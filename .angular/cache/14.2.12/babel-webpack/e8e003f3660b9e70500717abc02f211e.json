{"ast":null,"code":"/**\r\n * Handles formatting of pseudo-markup in text.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../Base\";\nimport { AMElement } from \"../rendering/AMElement\";\nimport { Adapter } from \"../utils/Adapter\";\nimport { registry } from \"../Registry\";\nimport * as $strings from \"../utils/Strings\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * Handles formatting of pseudo-markdown in text.\r\n *\r\n * @todo Encode < > in output\r\n * @todo Add more adapters\r\n * @important\r\n */\n\nvar TextFormatter =\n/** @class */\nfunction (_super) {\n  __extends(TextFormatter, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function TextFormatter() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Adapter.\r\n     */\n\n\n    _this.adapter = new Adapter(_this);\n    _this.className = \"TextFormatter\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  TextFormatter.prototype.debug = function () {};\n  /**\r\n   * Formats the text according to specifications passed in.\r\n   *\r\n   * @param text    Text to format\r\n   * @param output  Output format (svg, html)\r\n   * @return Formatted text\r\n   */\n\n\n  TextFormatter.prototype.format = function (text, output) {\n    // Apply default\n    if (!$type.hasValue(output)) {\n      output = \"svg\";\n    } // Init return value\n\n\n    var formatted = \"\"; // Replace double (escaped) square spaces with remporary codes\n\n    text = this.escape(text); // Divvy up the string by style tags\n\n    var styles = text.match(/\\[([^\\]]*?)\\]/gm);\n\n    if (!styles) {\n      // Nothing to do here - no formatting elements\n      return this.wrap(text, \"\", output);\n    } // Get pure text - no style tags\n\n\n    var texts = text.split(/\\[[^\\[\\]]*\\]/); // Go through each of the texts and wrap it in style tags\n\n    for (var i = 0, len = texts.length; i < len; i++) {\n      // Get text bit\n      var t = texts[i]; // Check if string is empty\n\n      if (t === \"\") {\n        continue;\n      } // Run through an adapter\n\n\n      t = this.adapter.apply(\"chunk\", t); // Get related style\n\n      var s = \"\";\n\n      if (i > 0) {\n        s = styles[i - 1].replace('[', '').replace(']', '');\n      } // Wrap text in tag\n\n\n      formatted += this.wrap(t, s, output);\n    } // Replace placeholders back\n\n\n    formatted = this.unescape(formatted); // Return result\n\n    return this.cleanUp(formatted);\n  };\n  /**\r\n   * Replaces brackets with temporary placeholders.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Input text\r\n   * @return Escaped text\r\n   */\n\n\n  TextFormatter.prototype.escape = function (text) {\n    return text.replace(/\\[\\[/g, registry.getPlaceholder(\"1\")).replace(/([^\\/\\]]{1})\\]\\]/g, \"$1\" + registry.getPlaceholder(\"2\")).replace(/\\]\\]/g, registry.getPlaceholder(\"2\")).replace(/\\{\\{/g, registry.getPlaceholder(\"3\")).replace(/\\}\\}/g, registry.getPlaceholder(\"4\")).replace(/\\'\\'/g, registry.getPlaceholder(\"5\"));\n  };\n  /**\r\n   * Replaces placeholders back to brackets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Escaped text\r\n   * @return Unescaped text\r\n   */\n\n\n  TextFormatter.prototype.unescape = function (text) {\n    return text.replace(new RegExp(registry.getPlaceholder(\"1\"), \"g\"), \"[[\").replace(new RegExp(registry.getPlaceholder(\"2\"), \"g\"), \"]]\").replace(new RegExp(registry.getPlaceholder(\"3\"), \"g\"), \"{{\").replace(new RegExp(registry.getPlaceholder(\"4\"), \"g\"), \"}}\").replace(new RegExp(registry.getPlaceholder(\"5\"), \"g\"), \"''\");\n  };\n  /**\r\n   * Cleans up the text text for leftover double square brackets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Input text\r\n   * @return Cleaned up text\r\n   */\n\n\n  TextFormatter.prototype.cleanUp = function (text) {\n    return text.replace(/\\[\\[/g, \"[\").replace(/\\]\\]/g, \"]\").replace(/\\{\\{/g, \"{\").replace(/\\}\\}/g, \"}\").replace(/\\'\\'/g, \"'\");\n  };\n  /**\r\n   * Wraps text into corresponding tags.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text   Text to wrap\r\n   * @param style  Styles\r\n   * @param output  Format to output in (svg, html)\r\n   * @return Formatted string\r\n   */\n\n\n  TextFormatter.prototype.wrap = function (text, style, output) {\n    if (style === \"\" || style === \"/\") {\n      //return text;\n      style = \"\";\n    }\n\n    switch (output) {\n      case \"html\":\n        return this.wrapHtml(text, this.translateStyleShortcuts(style));\n\n      default:\n        return this.wrapSvg(text, this.translateStyleShortcuts(style));\n    }\n  };\n  /**\r\n   * Wraps text in styled SVG tag.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text   Text to wrap\r\n   * @param style  Style property\r\n   * @return Formatted tag\r\n   */\n\n\n  TextFormatter.prototype.wrapSvg = function (text, style) {\n    if (style === \"\") {\n      return \"<tspan>\" + text + \"</tspan>\";\n    } else {\n      return \"<tspan style='\" + style + \"'>\" + text + \"</tspan>\";\n    }\n  };\n  /**\r\n   * Returns an SVG `<tspan>` element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text   Text\r\n   * @param style  Style\r\n   * @return Element\r\n   */\n\n\n  TextFormatter.prototype.getSvgElement = function (text, style) {\n    var element = new AMElement(\"tspan\");\n    element.textContent = text;\n\n    if (style) {\n      element.node.setAttribute(\"style\", style);\n    }\n\n    return element;\n  };\n  /**\r\n   * Wraps text in HTML <span> tag.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text   Text to wrap\r\n   * @param style  Style property\r\n   * @return Formatted tag\r\n   * @todo Translate SVG styles into HTML ones\r\n   */\n\n\n  TextFormatter.prototype.wrapHtml = function (text, style) {\n    if (style === \"\") {\n      return \"<span>\" + text + \"</span>\";\n    } else {\n      return \"<span style='\" + this.styleSvgToHtml(style) + \"'>\" + text + \"</span>\";\n    }\n  };\n  /**\r\n   * Returns an HTML `<span>` element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text   Text/HTML\r\n   * @param style  Style definition\r\n   * @return HTML element\r\n   */\n\n\n  TextFormatter.prototype.getHtmlElement = function (text, style) {\n    var element = document.createElement(\"span\");\n    element.innerHTML = text;\n\n    if (style) {\n      element.setAttribute(\"style\", style);\n    }\n\n    return element;\n  };\n  /**\r\n   * Trabslates SVG CSS into HTML CSS.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param style  SVG CSS\r\n   * @return HTML CSS\r\n   * @todo Implement actual translation\r\n   */\n\n\n  TextFormatter.prototype.styleSvgToHtml = function (style) {\n    style = style.replace(/fill:/, \"color:\");\n    return style;\n  };\n  /**\r\n   * Translates style shortcuts into full styles, i.e.:\r\n   * \"bold\" => \"font-weight: bold\"\r\n   * \"#f00\" => \"fill: #f00\"\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param style  Untranslated style\r\n   * @return Translated style\r\n   * @todo Implement actual translation\r\n   */\n\n\n  TextFormatter.prototype.translateStyleShortcuts = function (style) {\n    if (style == \"\" || style == \"[ ]\") {\n      return \"\";\n    }\n\n    var cached = registry.getCache(\"translateStyleShortcuts_\" + style);\n\n    if (cached) {\n      return cached;\n    } // Pre-process quoted text\n\n\n    var q = style.match(/('[^']*')|(\"[^\"]*\")/gi);\n\n    if (q) {\n      for (var i = 0; i < q.length; i++) {\n        style = style.replace(q[i], q[i].replace(/['\"]*/g, \"\").replace(/[ ]+/g, \"+\"));\n      }\n    } // Get style parts\n\n\n    var b = style.match(/([\\w\\-]*:[\\s]?[^;\\s\\]]*)|(\\#[\\w]{1,6})|([\\w]+)|(\\/)/gi); // Empty?\n\n    if (!b) {\n      return style;\n    } // Check each part\n\n\n    for (var i = 0; i < b.length; i++) {\n      if (b[i].match(/^bold$/i)) {\n        // Bold\n        b[i] = \"font-weight:\" + b[i];\n      } else if (b[i] == \"/\") {\n        // Just closing tag\n        // Do nothing\n        b[i] = \"\";\n      } else if (!b[i].match(/:/)) {\n        // Color\n        b[i] = \"fill:\" + b[i];\n      } else {\n        b[i] = b[i].replace(/\\+/g, \" \");\n      }\n    }\n\n    var res = b.join(';');\n    registry.setCache(\"translateStyleShortcuts_\" + style, res);\n    return res;\n  };\n  /**\r\n   * Splits string into chunks. (style blocks, quoted blocks, regular blocks)\r\n   *\r\n   * If the second parameter `quotedBlocks` is set to `true` this method will\r\n   * also single out text blocks enclosed within single quotes that no\r\n   * formatting should be applied to, and they should be displayed as is.\r\n   *\r\n   * Default for the above is `false`, so that you can use single quote in text\r\n   * without escaping it.\r\n   *\r\n   * If enabled, single quotes can be escaped by doubling it - adding two\r\n   * single quotes, which will be replaced by a one single quote in the final\r\n   * output.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text          Text to chunk\r\n   * @param quotedBlocks  Use quoted blocks\r\n   * @param noFormatting  Formatting blocks will be treated as regular text\r\n   * @return Array of string chunks\r\n   */\n\n\n  TextFormatter.prototype.chunk = function (text, quotedBlocks, noFormatting) {\n    if (quotedBlocks === void 0) {\n      quotedBlocks = false;\n    }\n\n    if (noFormatting === void 0) {\n      noFormatting = false;\n    } // Init result\n\n\n    var res = []; // Replace double (escaped) square spaces and quotes with temporary codes\n\n    text = this.escape(text); // Deal with style blocks\n\n    var chunks = quotedBlocks ? text.split(\"'\") : [text];\n\n    for (var i = 0; i < chunks.length; i++) {\n      var chunk = chunks[i]; // Empty?\n\n      if (chunk === \"\") {\n        continue;\n      }\n\n      if (i % 2 === 0) {\n        // Text outside quotes\n        // Parse for style blocks which are \"text\" chunks, the rest chunks are\n        // \"value\"\n        chunk = chunk.replace(/\\]\\[/g, \"]\" + $strings.PLACEHOLDER + \"[\");\n        chunk = chunk.replace(/\\[\\]/g, \"[ ]\");\n        var chunks2 = chunk.split(/[\\[\\]]+/);\n\n        for (var i2 = 0; i2 < chunks2.length; i2++) {\n          var chunk2 = this.cleanUp(this.unescape(chunks2[i2])); // Placeholder?\n\n          if (chunk2 === $strings.PLACEHOLDER) {\n            continue;\n          } // Empty?\n\n\n          if (chunk2 === \"\") {\n            continue;\n          } // Block or value\n\n\n          if (i2 % 2 === 0) {\n            res.push({\n              \"type\": \"value\",\n              \"text\": this.adapter.apply(\"chunk\", chunk2)\n            });\n          } else {\n            res.push({\n              \"type\": noFormatting ? \"value\" : \"format\",\n              \"text\": \"[\" + chunk2 + \"]\"\n            });\n          }\n        }\n      } else {\n        // A text within doublequotes\n        // All chunks are \"text\"\n        var chunks2 = chunk.split(/[\\[\\]]+/);\n\n        for (var i2 = 0; i2 < chunks2.length; i2++) {\n          var chunk2 = this.cleanUp(this.unescape(chunks2[i2])); // Empty?\n\n          if (chunk2 === \"\") {\n            continue;\n          } // Block or text\n\n\n          if (i2 % 2 === 0) {\n            res.push({\n              \"type\": \"text\",\n              \"text\": chunk2\n            });\n          } else if (this.isImage(chunk2)) {\n            res.push({\n              \"type\": \"image\",\n              \"text\": \"[\" + chunk2 + \"]\"\n            });\n          } else {\n            res.push({\n              \"type\": \"format\",\n              \"text\": \"[\" + chunk2 + \"]\"\n            });\n          }\n        }\n      }\n    }\n\n    return res;\n  };\n  /**\r\n   * Checks if supplied format contains image information and should be\r\n   * formatted as such.\r\n   * I.e.: `[img: myImage.png]`\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Format\r\n   * @return `true` if it is an image\r\n   */\n\n\n  TextFormatter.prototype.isImage = function (text) {\n    return text.match(/img[ ]?:/) ? true : false;\n  };\n\n  return TextFormatter;\n}(BaseObject);\n\nexport { TextFormatter };\nvar formatter;\n/**\r\n * Returns the global instance of [[TextFormatter]].\r\n *\r\n * All classes and instances should reuse this universal text formatter,\r\n * rather than create their own instance of it.\r\n */\n\nexport function getTextFormatter() {\n  if (formatter == null) {\n    formatter = new TextFormatter();\n  }\n\n  return formatter;\n}\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"TextFormatter\"] = TextFormatter;","map":{"version":3,"names":["__extends","BaseObject","AMElement","Adapter","registry","$strings","$type","TextFormatter","_super","_this","call","adapter","className","applyTheme","prototype","debug","format","text","output","hasValue","formatted","escape","styles","match","wrap","texts","split","i","len","length","t","apply","s","replace","unescape","cleanUp","getPlaceholder","RegExp","style","wrapHtml","translateStyleShortcuts","wrapSvg","getSvgElement","element","textContent","node","setAttribute","styleSvgToHtml","getHtmlElement","document","createElement","innerHTML","cached","getCache","q","b","res","join","setCache","chunk","quotedBlocks","noFormatting","chunks","PLACEHOLDER","chunks2","i2","chunk2","push","isImage","formatter","getTextFormatter","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/formatters/TextFormatter.js"],"sourcesContent":["/**\r\n * Handles formatting of pseudo-markup in text.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { AMElement } from \"../rendering/AMElement\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * Handles formatting of pseudo-markdown in text.\r\n *\r\n * @todo Encode < > in output\r\n * @todo Add more adapters\r\n * @important\r\n */\r\nvar TextFormatter = /** @class */ (function (_super) {\r\n    __extends(TextFormatter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TextFormatter() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Adapter.\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        _this.className = \"TextFormatter\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    TextFormatter.prototype.debug = function () { };\r\n    /**\r\n     * Formats the text according to specifications passed in.\r\n     *\r\n     * @param text    Text to format\r\n     * @param output  Output format (svg, html)\r\n     * @return Formatted text\r\n     */\r\n    TextFormatter.prototype.format = function (text, output) {\r\n        // Apply default\r\n        if (!$type.hasValue(output)) {\r\n            output = \"svg\";\r\n        }\r\n        // Init return value\r\n        var formatted = \"\";\r\n        // Replace double (escaped) square spaces with remporary codes\r\n        text = this.escape(text);\r\n        // Divvy up the string by style tags\r\n        var styles = text.match(/\\[([^\\]]*?)\\]/gm);\r\n        if (!styles) {\r\n            // Nothing to do here - no formatting elements\r\n            return this.wrap(text, \"\", output);\r\n        }\r\n        // Get pure text - no style tags\r\n        var texts = text.split(/\\[[^\\[\\]]*\\]/);\r\n        // Go through each of the texts and wrap it in style tags\r\n        for (var i = 0, len = texts.length; i < len; i++) {\r\n            // Get text bit\r\n            var t = texts[i];\r\n            // Check if string is empty\r\n            if (t === \"\") {\r\n                continue;\r\n            }\r\n            // Run through an adapter\r\n            t = this.adapter.apply(\"chunk\", t);\r\n            // Get related style\r\n            var s = \"\";\r\n            if (i > 0) {\r\n                s = styles[i - 1].replace('[', '').replace(']', '');\r\n            }\r\n            // Wrap text in tag\r\n            formatted += this.wrap(t, s, output);\r\n        }\r\n        // Replace placeholders back\r\n        formatted = this.unescape(formatted);\r\n        // Return result\r\n        return this.cleanUp(formatted);\r\n    };\r\n    /**\r\n     * Replaces brackets with temporary placeholders.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text  Input text\r\n     * @return Escaped text\r\n     */\r\n    TextFormatter.prototype.escape = function (text) {\r\n        return text.\r\n            replace(/\\[\\[/g, registry.getPlaceholder(\"1\")).\r\n            replace(/([^\\/\\]]{1})\\]\\]/g, \"$1\" + registry.getPlaceholder(\"2\")).\r\n            replace(/\\]\\]/g, registry.getPlaceholder(\"2\")).\r\n            replace(/\\{\\{/g, registry.getPlaceholder(\"3\")).\r\n            replace(/\\}\\}/g, registry.getPlaceholder(\"4\")).\r\n            replace(/\\'\\'/g, registry.getPlaceholder(\"5\"));\r\n    };\r\n    /**\r\n     * Replaces placeholders back to brackets.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text  Escaped text\r\n     * @return Unescaped text\r\n     */\r\n    TextFormatter.prototype.unescape = function (text) {\r\n        return text.\r\n            replace(new RegExp(registry.getPlaceholder(\"1\"), \"g\"), \"[[\").\r\n            replace(new RegExp(registry.getPlaceholder(\"2\"), \"g\"), \"]]\").\r\n            replace(new RegExp(registry.getPlaceholder(\"3\"), \"g\"), \"{{\").\r\n            replace(new RegExp(registry.getPlaceholder(\"4\"), \"g\"), \"}}\").\r\n            replace(new RegExp(registry.getPlaceholder(\"5\"), \"g\"), \"''\");\r\n    };\r\n    /**\r\n     * Cleans up the text text for leftover double square brackets.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text  Input text\r\n     * @return Cleaned up text\r\n     */\r\n    TextFormatter.prototype.cleanUp = function (text) {\r\n        return text.\r\n            replace(/\\[\\[/g, \"[\").\r\n            replace(/\\]\\]/g, \"]\").\r\n            replace(/\\{\\{/g, \"{\").\r\n            replace(/\\}\\}/g, \"}\").\r\n            replace(/\\'\\'/g, \"'\");\r\n    };\r\n    /**\r\n     * Wraps text into corresponding tags.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text   Text to wrap\r\n     * @param style  Styles\r\n     * @param output  Format to output in (svg, html)\r\n     * @return Formatted string\r\n     */\r\n    TextFormatter.prototype.wrap = function (text, style, output) {\r\n        if (style === \"\" || style === \"/\") {\r\n            //return text;\r\n            style = \"\";\r\n        }\r\n        switch (output) {\r\n            case \"html\":\r\n                return this.wrapHtml(text, this.translateStyleShortcuts(style));\r\n            default:\r\n                return this.wrapSvg(text, this.translateStyleShortcuts(style));\r\n        }\r\n    };\r\n    /**\r\n     * Wraps text in styled SVG tag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text   Text to wrap\r\n     * @param style  Style property\r\n     * @return Formatted tag\r\n     */\r\n    TextFormatter.prototype.wrapSvg = function (text, style) {\r\n        if (style === \"\") {\r\n            return \"<tspan>\" + text + \"</tspan>\";\r\n        }\r\n        else {\r\n            return \"<tspan style='\" + style + \"'>\" + text + \"</tspan>\";\r\n        }\r\n    };\r\n    /**\r\n     * Returns an SVG `<tspan>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text   Text\r\n     * @param style  Style\r\n     * @return Element\r\n     */\r\n    TextFormatter.prototype.getSvgElement = function (text, style) {\r\n        var element = new AMElement(\"tspan\");\r\n        element.textContent = text;\r\n        if (style) {\r\n            element.node.setAttribute(\"style\", style);\r\n        }\r\n        return element;\r\n    };\r\n    /**\r\n     * Wraps text in HTML <span> tag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text   Text to wrap\r\n     * @param style  Style property\r\n     * @return Formatted tag\r\n     * @todo Translate SVG styles into HTML ones\r\n     */\r\n    TextFormatter.prototype.wrapHtml = function (text, style) {\r\n        if (style === \"\") {\r\n            return \"<span>\" + text + \"</span>\";\r\n        }\r\n        else {\r\n            return \"<span style='\" + this.styleSvgToHtml(style) + \"'>\" + text + \"</span>\";\r\n        }\r\n    };\r\n    /**\r\n     * Returns an HTML `<span>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text   Text/HTML\r\n     * @param style  Style definition\r\n     * @return HTML element\r\n     */\r\n    TextFormatter.prototype.getHtmlElement = function (text, style) {\r\n        var element = document.createElement(\"span\");\r\n        element.innerHTML = text;\r\n        if (style) {\r\n            element.setAttribute(\"style\", style);\r\n        }\r\n        return element;\r\n    };\r\n    /**\r\n     * Trabslates SVG CSS into HTML CSS.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param style  SVG CSS\r\n     * @return HTML CSS\r\n     * @todo Implement actual translation\r\n     */\r\n    TextFormatter.prototype.styleSvgToHtml = function (style) {\r\n        style = style.replace(/fill:/, \"color:\");\r\n        return style;\r\n    };\r\n    /**\r\n     * Translates style shortcuts into full styles, i.e.:\r\n     * \"bold\" => \"font-weight: bold\"\r\n     * \"#f00\" => \"fill: #f00\"\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param style  Untranslated style\r\n     * @return Translated style\r\n     * @todo Implement actual translation\r\n     */\r\n    TextFormatter.prototype.translateStyleShortcuts = function (style) {\r\n        if (style == \"\" || style == \"[ ]\") {\r\n            return \"\";\r\n        }\r\n        var cached = registry.getCache(\"translateStyleShortcuts_\" + style);\r\n        if (cached) {\r\n            return cached;\r\n        }\r\n        // Pre-process quoted text\r\n        var q = style.match(/('[^']*')|(\"[^\"]*\")/gi);\r\n        if (q) {\r\n            for (var i = 0; i < q.length; i++) {\r\n                style = style.replace(q[i], q[i].replace(/['\"]*/g, \"\").replace(/[ ]+/g, \"+\"));\r\n            }\r\n        }\r\n        // Get style parts\r\n        var b = style.match(/([\\w\\-]*:[\\s]?[^;\\s\\]]*)|(\\#[\\w]{1,6})|([\\w]+)|(\\/)/gi);\r\n        // Empty?\r\n        if (!b) {\r\n            return style;\r\n        }\r\n        // Check each part\r\n        for (var i = 0; i < b.length; i++) {\r\n            if (b[i].match(/^bold$/i)) {\r\n                // Bold\r\n                b[i] = \"font-weight:\" + b[i];\r\n            }\r\n            else if (b[i] == \"/\") {\r\n                // Just closing tag\r\n                // Do nothing\r\n                b[i] = \"\";\r\n            }\r\n            else if (!b[i].match(/:/)) {\r\n                // Color\r\n                b[i] = \"fill:\" + b[i];\r\n            }\r\n            else {\r\n                b[i] = b[i].replace(/\\+/g, \" \");\r\n            }\r\n        }\r\n        var res = b.join(';');\r\n        registry.setCache(\"translateStyleShortcuts_\" + style, res);\r\n        return res;\r\n    };\r\n    /**\r\n     * Splits string into chunks. (style blocks, quoted blocks, regular blocks)\r\n     *\r\n     * If the second parameter `quotedBlocks` is set to `true` this method will\r\n     * also single out text blocks enclosed within single quotes that no\r\n     * formatting should be applied to, and they should be displayed as is.\r\n     *\r\n     * Default for the above is `false`, so that you can use single quote in text\r\n     * without escaping it.\r\n     *\r\n     * If enabled, single quotes can be escaped by doubling it - adding two\r\n     * single quotes, which will be replaced by a one single quote in the final\r\n     * output.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text          Text to chunk\r\n     * @param quotedBlocks  Use quoted blocks\r\n     * @param noFormatting  Formatting blocks will be treated as regular text\r\n     * @return Array of string chunks\r\n     */\r\n    TextFormatter.prototype.chunk = function (text, quotedBlocks, noFormatting) {\r\n        if (quotedBlocks === void 0) { quotedBlocks = false; }\r\n        if (noFormatting === void 0) { noFormatting = false; }\r\n        // Init result\r\n        var res = [];\r\n        // Replace double (escaped) square spaces and quotes with temporary codes\r\n        text = this.escape(text);\r\n        // Deal with style blocks\r\n        var chunks = quotedBlocks ? text.split(\"'\") : [text];\r\n        for (var i = 0; i < chunks.length; i++) {\r\n            var chunk = chunks[i];\r\n            // Empty?\r\n            if (chunk === \"\") {\r\n                continue;\r\n            }\r\n            if ((i % 2) === 0) {\r\n                // Text outside quotes\r\n                // Parse for style blocks which are \"text\" chunks, the rest chunks are\r\n                // \"value\"\r\n                chunk = chunk.replace(/\\]\\[/g, \"]\" + $strings.PLACEHOLDER + \"[\");\r\n                chunk = chunk.replace(/\\[\\]/g, \"[ ]\");\r\n                var chunks2 = chunk.split(/[\\[\\]]+/);\r\n                for (var i2 = 0; i2 < chunks2.length; i2++) {\r\n                    var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));\r\n                    // Placeholder?\r\n                    if (chunk2 === $strings.PLACEHOLDER) {\r\n                        continue;\r\n                    }\r\n                    // Empty?\r\n                    if (chunk2 === \"\") {\r\n                        continue;\r\n                    }\r\n                    // Block or value\r\n                    if ((i2 % 2) === 0) {\r\n                        res.push({\r\n                            \"type\": \"value\",\r\n                            \"text\": this.adapter.apply(\"chunk\", chunk2)\r\n                        });\r\n                    }\r\n                    else {\r\n                        res.push({\r\n                            \"type\": noFormatting ? \"value\" : \"format\",\r\n                            \"text\": \"[\" + chunk2 + \"]\"\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // A text within doublequotes\r\n                // All chunks are \"text\"\r\n                var chunks2 = chunk.split(/[\\[\\]]+/);\r\n                for (var i2 = 0; i2 < chunks2.length; i2++) {\r\n                    var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));\r\n                    // Empty?\r\n                    if (chunk2 === \"\") {\r\n                        continue;\r\n                    }\r\n                    // Block or text\r\n                    if ((i2 % 2) === 0) {\r\n                        res.push({\r\n                            \"type\": \"text\",\r\n                            \"text\": chunk2\r\n                        });\r\n                    }\r\n                    else if (this.isImage(chunk2)) {\r\n                        res.push({\r\n                            \"type\": \"image\",\r\n                            \"text\": \"[\" + chunk2 + \"]\"\r\n                        });\r\n                    }\r\n                    else {\r\n                        res.push({\r\n                            \"type\": \"format\",\r\n                            \"text\": \"[\" + chunk2 + \"]\"\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Checks if supplied format contains image information and should be\r\n     * formatted as such.\r\n     * I.e.: `[img: myImage.png]`\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text  Format\r\n     * @return `true` if it is an image\r\n     */\r\n    TextFormatter.prototype.isImage = function (text) {\r\n        return text.match(/img[ ]?:/) ? true : false;\r\n    };\r\n    return TextFormatter;\r\n}(BaseObject));\r\nexport { TextFormatter };\r\nvar formatter;\r\n/**\r\n * Returns the global instance of [[TextFormatter]].\r\n *\r\n * All classes and instances should reuse this universal text formatter,\r\n * rather than create their own instance of it.\r\n */\r\nexport function getTextFormatter() {\r\n    if (formatter == null) {\r\n        formatter = new TextFormatter();\r\n    }\r\n    return formatter;\r\n}\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TextFormatter\"] = TextFormatter;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}