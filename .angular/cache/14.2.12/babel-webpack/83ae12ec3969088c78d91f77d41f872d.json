{"ast":null,"code":"/**\r\n * Defines functionality for \"Data Item\"\r\n *\r\n * A Data Item can be any object that can hold data. For example [[LineSeries]]\r\n * holds a number of values, that comprise a line graph. Each of those values\r\n * (data points) is a {DataItem}.\r\n *\r\n * Furthermore the [[LineSeries]] itself can be represented as a entry in the\r\n * legend. Since legend needs access to Line Series' value, a DataItem is\r\n * created for the series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObjectEvents } from \"./Base\";\nimport { Adapter } from \"./utils/Adapter\";\nimport { Animation, AnimationDisposer } from \"./utils/Animation\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $array from \"./utils/Array\"; //import * as $object from \"./utils/Object\";\n\nimport * as $type from \"./utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * DataItem represents single element in data, for example a data point in a\r\n * Serial Chart Series, e.g. a column.\r\n *\r\n * DataItem defines relationship between structured data, required for specific\r\n * chart type or task, and raw source data.\r\n *\r\n * It also implements required calculations, updates related visual elements,\r\n * etc.\r\n *\r\n * @todo Description\r\n * @important\r\n */\n\nvar DataItem =\n/** @class */\nfunction (_super) {\n  __extends(DataItem, _super);\n  /**\r\n   * Constructor\r\n   * @todo Adding events to disposers produces errors in some cases, which means that chart is using disposed Data Items which is not right\r\n   */\n\n\n  function DataItem() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * This Data Item is currently disabled.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n\n    _this._disabled = false;\n    /**\r\n     * Indicates whether Data Item has any properties set.\r\n     *\r\n     * If it does not have any, the code can use this property to check whether\r\n     * they need to apply costly operation of re-applying properties, whenever\r\n     * Data Item-related element is redrawn, e.g. series.\r\n     */\n\n    _this.hasProperties = false;\n    /**\r\n     * An object containing calculated values.\r\n     */\n\n    _this.values = {};\n    /**\r\n     * An object container current working values.\r\n     */\n    //public readonly workingValues: { [index: string]: { [index: string]: number } } = {};\n\n    /**\r\n     * An object containing categories.\r\n     */\n\n    _this.categories = {};\n    /**\r\n     * An object containing dates.\r\n     */\n\n    _this.dates = {};\n    /**\r\n     * An object containing locations for the Data Item.\r\n     *\r\n     * A location is a position within date or category, or, in some other cases,\r\n     * where there is no single point but rather some period.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Data_item_locations} for info how data item locations work\r\n     */\n\n    _this.locations = {};\n    /**\r\n     * Current working locations.\r\n     */\n\n    _this.workingLocations = {};\n    /**\r\n     * An object containing Data Item specific appearance properties in key-value\r\n     * pairs.\r\n     *\r\n     * Sometimes a single Data Item needs to apply different properties than the\r\n     * rest of the data [[Series]] it is part of. E.g. a single column,\r\n     * represented by a Data Item needs to be filled with a different color than\r\n     * the reset of the [[ColumnSeries]] it belongs to.\r\n     *\r\n     * That's where Data Item's `properties` come into play.\r\n     *\r\n     * Please note that you should set Data Item-specific properties using\r\n     * `setProperty()` method, rather than access `properties` object directly.\r\n     */\n\n    _this.properties = {};\n    /**\r\n     * A list of [[Sprite]] elements that are associated with this Data Item.\r\n     *\r\n     * E.g. an [[Axis]] Data Item has several separate elements associated with\r\n     * it, like [[AxisTick]], [[AxisLabel]], and [[Grid]].\r\n     *\r\n     * Data Item keeps track of all of them, so it can toggle all related visual\r\n     * elements when it itself is toggled.\r\n     */\n\n    _this.sprites = [];\n    /**\r\n     * Identifies if this object is a \"template\" and should not be treated as\r\n     * real object that is drawn or actually used in the chart.\r\n     */\n\n    _this.isTemplate = false;\n    /**\r\n     * The current index within the dataItems\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._index = null;\n    /**\r\n     * Is Data Item currently visible?\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._visible = true;\n    /**\r\n     * Is Data Item currently hidden?\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._hidden = false;\n    /**\r\n     * Should this Data Item be used when calculating data ranges and scales?\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._ignoreMinMax = false;\n    /**\r\n     * Some of the Data Item's data fields may contain an array of children. This\r\n     * property contains an object indicating which fields hold an array, so that\r\n     * they can be processed properly.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.hasChildren = {};\n    /**\r\n     * Indicates whether Data Item is currently animiting from visible to hidden\r\n     * state.\r\n     */\n\n    _this.isHiding = false;\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._valueAnimations = {};\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._locationAnimations = {};\n    _this.className = \"DataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(DataItem.prototype, \"adapter\", {\n    /**\r\n     * Holds Adapter.\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        this._adapterO = new Adapter(this);\n      }\n\n      return this._adapterO;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"index\", {\n    /**\r\n     * Data Item's position index in Component's data.\r\n     *\r\n     * @return Index\r\n     */\n    get: function () {\n      if (this.component) {\n        if (this._index != null) {\n          return this._index;\n        } else {\n          return -1;\n        }\n      } else {\n        return -1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"animations\", {\n    /**\r\n     * A list of [[Animations]] objects currently mutating Data Item's values.\r\n     *\r\n     * @return [description]\r\n     */\n    get: function () {\n      if (!this._animations) {\n        this._animations = [];\n\n        this._disposers.push(new AnimationDisposer(this._animations));\n      }\n\n      return this._animations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"visible\", {\n    /**\r\n     * Returns `true` if this Data Item is currently visible.\r\n     *\r\n     * @return Visible?\r\n     */\n    get: function () {\n      if (this._hidden) {\n        return false;\n      }\n\n      return this._visible;\n    },\n\n    /**\r\n     * Sets visibility of the Data Item.\r\n     *\r\n     * @param value Visible?\r\n     */\n    set: function (value) {\n      if (value) {\n        this.hidden = false;\n      }\n\n      if (this._visible != value) {\n        this.setVisibility(value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"hidden\", {\n    /**\r\n     * Returns `true` if this Data Item is currently hidden.\r\n     *\r\n     * @return Hidden?\r\n     */\n    get: function () {\n      return this._hidden;\n    },\n\n    /**\r\n     * Sets hidden flag for data item. Mostly used to initially hide data item.\r\n     *\r\n     * @param value Hidden?\r\n     */\n    set: function (value) {\n      if (this._hidden != value) {\n        this._hidden = value;\n\n        if (value) {\n          this.setVisibility(false);\n        } else {\n          this.setVisibility(true, true);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"__disabled\", {\n    /**\r\n     * Is this Data Item currently disabled?\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {boolean}\r\n     */\n    get: function () {\n      return this._disabled;\n    },\n\n    /**\r\n     * Disables all Sprites associated with this Data Item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {boolean}\r\n     */\n    set: function (value) {\n      //\tif (this._disabled != value) { // not good\n      this._disabled = value;\n      $array.each(this.sprites, function (sprite) {\n        sprite.__disabled = value;\n      }); //\t}\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets visibility of the Data Item.\r\n   *\r\n   * @param value Data Item\r\n   */\n\n  DataItem.prototype.setVisibility = function (value, noChangeValues) {\n    $array.each(this.sprites, function (sprite) {\n      if (value) {\n        sprite.visible = sprite.defaultState.properties.visible;\n      } else {\n        if (sprite.hiddenState) {\n          sprite.visible = sprite.hiddenState.properties.visible;\n        } else {\n          sprite.visible = false;\n        }\n      }\n    });\n    this._visible = value;\n\n    if (this._eventDispatcher && !this.__disabled) {\n      if (this.events.isEnabled(\"visibilitychanged\")) {\n        var event_1 = {\n          type: \"visibilitychanged\",\n          target: this,\n          visible: value\n        };\n        this.events.dispatchImmediately(\"visibilitychanged\", event_1);\n      }\n    }\n  };\n  /**\r\n   * Shows the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param fields    A list of fields to set values of\r\n   */\n\n\n  DataItem.prototype.show = function (duration, delay, fields) {\n    var _this = this;\n\n    if (!this.hidden) {\n      this.setVisibility(true, true);\n      this.isHiding = false;\n\n      if (this._hideDisposer) {\n        this.removeDispose(this._hideDisposer);\n      }\n\n      var animation_1;\n\n      if (fields) {\n        $array.each(fields, function (field) {\n          animation_1 = _this.setWorkingValue(field, _this.values[field].value, duration, delay);\n        });\n      }\n\n      $array.each(this.sprites, function (sprite) {\n        var animation = sprite.show(duration);\n\n        if (animation != null && !animation.isFinished()) {\n          _this._disposers.push(animation);\n\n          if (delay != null && delay > 0) {\n            animation.delay(delay);\n          }\n        }\n      });\n      return animation_1;\n    }\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n\n  DataItem.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    $array.each(this.sprites, function (sprite) {\n      sprite.dispose();\n    });\n    this.sprites = [];\n  };\n  /**\r\n   * Hides the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param toValue   A value to set to `fields` when hiding\r\n   * @param fields    A list of data fields to set value to `toValue`\r\n   */\n\n\n  DataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    var _this = this;\n\n    this.isHiding = true;\n    $array.each(this.sprites, function (sprite) {\n      var animation = sprite.hide(duration);\n\n      if (animation != null && !animation.isFinished()) {\n        _this._disposers.push(animation);\n\n        if (delay != null && delay > 0) {\n          animation.delay(delay);\n        }\n      }\n    });\n\n    if ($type.isNumber(toValue) && fields) {\n      var animation_2;\n      $array.each(fields, function (field) {\n        var anim = _this.setWorkingValue(field, toValue, duration, delay);\n\n        if (anim) {\n          animation_2 = anim;\n        }\n      });\n\n      if (animation_2 && !animation_2.isFinished()) {\n        this._hideDisposer = animation_2.events.on(\"animationended\", function () {\n          _this.setVisibility(false, true);\n\n          _this.isHiding = false;\n        });\n\n        this._disposers.push(this._hideDisposer);\n\n        return animation_2;\n      } else {\n        this.isHiding = false;\n        this.setVisibility(false, true);\n      }\n    } else {\n      this.isHiding = false;\n      this.setVisibility(false);\n    }\n  };\n  /**\r\n   * Returns a duration (ms) the Data Item should take to animate from one\r\n   * value to another.\r\n   *\r\n   * If the duration is not specified via parameter, this method will try to\r\n   * request a default duration from the related `Component`.\r\n   *\r\n   * @param duration  Default duration (ms)\r\n   * @return Duration (ms)\r\n   */\n\n\n  DataItem.prototype.getDuration = function (duration) {\n    if (!$type.isNumber(duration)) {\n      var component = this.component;\n\n      if (component) {\n        duration = component.interpolationDuration;\n      }\n    }\n\n    if (duration != null) {\n      if (!this._adapterO) {\n        return duration;\n      } else {\n        return this._adapterO.apply(\"duration\", duration);\n      }\n    }\n  };\n  /**\r\n   * Returns a numeric value for specific data field.\r\n   *\r\n   * If `calculated` is not set, it will return a raw value, as it is in\r\n   * source data.\r\n   *\r\n   * If `calculated` is set, it will return a pre-calculated specific value.\r\n   *\r\n   * @param name        Data field name\r\n   * @param calculated  A calculated value name\r\n   * @return Value\r\n   */\n\n\n  DataItem.prototype.getValue = function (name, calculated) {\n    if (name && this.component) {\n      if (!calculated) {\n        calculated = this.component.dataFields[name + \"Show\"];\n\n        if (!calculated) {\n          calculated = \"value\";\n        }\n      }\n\n      var value = this.values[name][calculated];\n\n      if (this._adapterO && this._adapterO.isEnabled(\"value\")) {\n        return this._adapterO.apply(\"value\", {\n          value: value,\n          field: name\n        }).value;\n      } else {\n        return value;\n      }\n    }\n  };\n  /**\r\n   * Returns a current working value for a specific data field.\r\n   *\r\n   * The actual value may differ from the one returned by `getValue()`. The\r\n   * latter returns static values from the data source.\r\n   *\r\n   * `getWorkingValue()` returns current value, which is usually different if\r\n   * Data Item is animating from one state to another.\r\n   *\r\n   * @param name        Data field name\r\n   * @return Value\r\n   */\n\n\n  DataItem.prototype.getWorkingValue = function (name) {\n    if (name && this.component) {\n      var realName = this.component.dataFields[name + \"Show\"];\n\n      if (!realName) {\n        realName = \"workingValue\";\n      }\n\n      if (this._adapterO) {\n        return this._adapterO.apply(\"workingValue\", {\n          workingValue: this.values[name][realName],\n          field: name\n        }).workingValue;\n      } else {\n        return this.values[name][realName];\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   * @return Value\r\n   */\n\n\n  DataItem.prototype.getActualWorkingValue = function (name) {\n    return this.values[name].workingValue;\n  };\n  /**\r\n   * Sets a numeric value for specific data field.\r\n   *\r\n   * @param name        Data field name\r\n   * @param value       Value\r\n   * @param calculated  Calculated data field name\r\n   * @param duration    Duration (ms) to animate to new value to\r\n   * @param delay       Delay animation (ms)\r\n   */\n\n\n  DataItem.prototype.setValue = function (name, value, duration, delay) {\n    var currentValue = this.values[name].value;\n    var newDuration = this.getDuration(duration);\n    value = $type.toNumber(value);\n\n    if (currentValue !== value) {\n      this.values[name].value = value;\n\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"valuechanged\")) {\n          var event_2 = {\n            type: \"valuechanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"valuechanged\", event_2);\n        }\n      }\n\n      if (this.component) {\n        this.component.handleDataItemValueChange(this, name);\n      }\n    }\n\n    this.setWorkingValue(name, value, newDuration, delay);\n  };\n\n  DataItem.prototype.setCalculatedValue = function (name, value, calculated) {\n    var currentValue = this.values[name][calculated];\n\n    if (currentValue !== value && $type.isNumber(value)) {\n      this.values[name][calculated] = value;\n\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"calculatedvaluechanged\")) {\n          var event_3 = {\n            type: \"calculatedvaluechanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"calculatedvaluechanged\", event_3);\n        }\n      }\n\n      if (this.component) {\n        this.component.handleDataItemCalculatedValueChange(this, name);\n      }\n    }\n  };\n  /**\r\n   * Set current working numeric value for a specific data field.\r\n   *\r\n   * @param name        Data field name\r\n   * @param value       Value\r\n   * @param calculated  Calculated data field name\r\n   * @param duration    Duration (ms) to animate to new value to\r\n   * @param delay       Delay animation (ms)\r\n   * @return An [[Animation]] object used for transition to new values\r\n   */\n\n\n  DataItem.prototype.setWorkingValue = function (name, value, duration, delay) {\n    if ($type.isNumber(this.values[name].value)) {\n      var newDuration = this.getDuration(duration);\n      var workingValue = this.values[name].workingValue;\n\n      if (newDuration != null && newDuration > 0 && $type.isNumber(workingValue) && this.component) {\n        // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\n        if (workingValue != value) {\n          var animation = this.animate({\n            childObject: this.values[name],\n            property: \"workingValue\",\n            from: workingValue,\n            to: value,\n            dummyData: name\n          }, newDuration, this.component.interpolationEasing);\n\n          if (delay != null) {\n            animation.delay(delay);\n          }\n\n          animation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\n          animation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\n          animation.events.on(\"animationended\", this.handleInterpolationProgress, this);\n          this._valueAnimations[name] = animation;\n          return animation;\n        } else {\n          var valueAnimation = this._valueAnimations[name];\n\n          if (valueAnimation) {\n            valueAnimation.stop();\n          }\n\n          this.values[name].workingValue = value;\n        }\n      } else {\n        var valueAnimation = this._valueAnimations[name];\n\n        if (valueAnimation) {\n          valueAnimation.stop();\n        }\n\n        this.values[name].workingValue = value;\n\n        if (this._eventDispatcher && !this.__disabled) {\n          if (this.events.isEnabled(\"workingvaluechanged\")) {\n            var event_4 = {\n              type: \"workingvaluechanged\",\n              target: this,\n              property: name\n            };\n            this.events.dispatchImmediately(\"workingvaluechanged\", event_4);\n          }\n        }\n\n        if (this.component) {\n          this.component.handleDataItemWorkingValueChange(this, name);\n        }\n      }\n    }\n  };\n  /**\r\n   * Sets a relative location for a data field.\r\n   *\r\n   * A location is always relative on a 0 to 1 scale, with 0 being beginning,\r\n   * 0.5 middle and 1 end.\r\n   *\r\n   * @todo Rewiew description\r\n   * @param name      Data field name\r\n   * @param value     Location (0-1)\r\n   * @param duration  Duration (ms) to animate to new value to\r\n   * @param delay     Delay animation (ms)\r\n   */\n\n\n  DataItem.prototype.setLocation = function (name, value, duration, delay) {\n    var currentLocation = this.locations[name];\n\n    if (currentLocation !== value) {\n      this.locations[name] = value;\n\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"locationchanged\")) {\n          var event_5 = {\n            type: \"locationchanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"locationchanged\", event_5);\n        }\n      }\n\n      if (this.component) {\n        this.component.handleDataItemValueChange(this, name); // correct\n      }\n\n      this.setWorkingLocation(name, value, duration, delay);\n    }\n  };\n  /**\r\n   * Sets a current working location for a data field.\r\n   *\r\n   * @todo Rewiew description\r\n   * @param name      Data field name\r\n   * @param value     Location (0-1)\r\n   * @param duration  Duration (ms) to animate to new value to\r\n   * @param delay     Delay animation (ms)\r\n   */\n\n\n  DataItem.prototype.setWorkingLocation = function (name, value, duration, delay) {\n    var newDuration = this.getDuration(duration);\n    var workingLocation = this.workingLocations[name];\n\n    if (newDuration != null && newDuration > 0 && $type.isNumber(workingLocation) && this.component) {\n      // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\n      if (workingLocation != value) {\n        var animation = this.animate({\n          childObject: this.workingLocations,\n          property: name,\n          from: workingLocation,\n          to: value,\n          dummyData: name\n        }, newDuration, this.component.interpolationEasing);\n\n        if (delay != null) {\n          animation.delay(delay);\n        }\n\n        animation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\n        animation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\n        animation.events.on(\"animationended\", this.handleInterpolationProgress, this);\n        this._locationAnimations[name] = animation;\n        return animation;\n      } else {\n        var locationAnimation = this._locationAnimations[name];\n\n        if (locationAnimation) {\n          locationAnimation.stop();\n        }\n\n        this.workingLocations[name] = value;\n      }\n    } else {\n      var locationAnimation = this._locationAnimations[name];\n\n      if (locationAnimation) {\n        locationAnimation.stop();\n      }\n\n      this.workingLocations[name] = value;\n\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"workinglocationchanged\")) {\n          var event_6 = {\n            type: \"workinglocationchanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"workinglocationchanged\", event_6);\n        }\n      }\n\n      if (this.component) {\n        this.component.handleDataItemWorkingLocationChange(this, name);\n      }\n    }\n  };\n  /**\r\n   * Sets Date value to a data field.\r\n   *\r\n   * @param name      Data field name\r\n   * @param date      Date object\r\n   * @param duration  Duration (ms) to animate to new value to\r\n   */\n\n\n  DataItem.prototype.setDate = function (name, date, duration) {\n    if (!$type.isDate(date) && this.component) {\n      date = this.component.dateFormatter.parse(date);\n    }\n\n    var currentDate = this.dates[name];\n\n    if (currentDate !== date) {\n      this.dates[name] = date;\n      this.setValue(name, date.getTime(), duration);\n    }\n  };\n  /**\r\n   * Returns a Date value of the data field.\r\n   *\r\n   * @param name  Data field name\r\n   * @return Date object\r\n   */\n\n\n  DataItem.prototype.getDate = function (name) {\n    if (this._adapterO) {\n      return this._adapterO.apply(\"date\", {\n        date: this.dates[name],\n        field: name\n      }).date;\n    } else {\n      return this.dates[name];\n    }\n  };\n  /**\r\n   * Sets a Data Item-specific visual properties to apply to related elements.\r\n   *\r\n   * @param name   Property name\r\n   * @param value  Property value\r\n   */\n\n\n  DataItem.prototype.setProperty = function (name, value) {\n    if (this.properties[name] !== value) {\n      this.hasProperties = true;\n      this.properties[name] = value;\n\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"propertychanged\")) {\n          var event_7 = {\n            type: \"propertychanged\",\n            target: this,\n            property: name,\n            value: value\n          };\n          this.events.dispatchImmediately(\"propertychanged\", event_7);\n        }\n      }\n\n      if (this.component) {\n        this.component.handleDataItemPropertyChange(this, name);\n      }\n    }\n  };\n  /**\r\n   * Sets a related category for this Data Item.\r\n   *\r\n   * @todo Review description\r\n   * @param name   Data field name\r\n   * @param value  Category\r\n   */\n\n\n  DataItem.prototype.setCategory = function (name, value) {\n    if (!$type.isString(value)) {\n      value = $type.castString(value);\n    }\n\n    if (this.categories[name] !== value) {\n      this.categories[name] = value;\n    }\n  };\n  /**\r\n   * Clones the Data Item, including all related data.\r\n   *\r\n   * @return New Data Item clone\r\n   */\n  //public clone(cloneId?: string): this {\n  //\tlet dataItem: this = super.clone(cloneId);\n  //\tdataItem.copyFrom(this);\n  //\treturn dataItem;\n  //}\n\n  /**\r\n   * Copies all properties and related data from different data item.\r\n   *\r\n   * @param object Source data item\r\n   */\n\n\n  DataItem.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (source.dataContext) {\n      this.dataContext = $utils.copy(source.dataContext, {});\n    }\n\n    $utils.copyProperties(source.locations, this.locations);\n    /*\r\n    $utils.copyProperties(source.properties, this.properties);\r\n    $utils.copyProperties(source.categories, this.categories);\r\n    $utils.copyProperties(source.values, this.values);\r\n    $utils.copyProperties(source.dates, this.dates);\r\n      $object.each(source.values, (name, value) => {\r\n        this.values[name] = $object.copy(value);\r\n    });*/\n\n    if (source._adapterO) {\n      this.adapter.copyFrom(source._adapterO);\n    } //this.events.copyFrom(source.events); // because copied in Base\n\n\n    this.component = source.component;\n  };\n\n  Object.defineProperty(DataItem.prototype, \"opacity\", {\n    /**\r\n     * Sets opacity for all Data Item's related elements (Sprites).\r\n     *\r\n     * @param value Opacity (0-1)\r\n     */\n    set: function (value) {\n      $array.each(this.sprites, function (sprite) {\n        sprite.opacity = value;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"ignoreMinMax\", {\n    /**\r\n     * Exclude from min/max calculations?\r\n     * @return Exclude from min/max calculations?\r\n     */\n    get: function () {\n      return this._ignoreMinMax;\n    },\n\n    /**\r\n     * Sets whether this data point should not be included in the scale and\r\n     * minimum/maximum calculations.\r\n     *\r\n     * E.g. some we may want to exclude a particular data point from influencing\r\n     * [[ValueAxis]] scale.\r\n     *\r\n     * @param value  Exclude from min/max calculations?\r\n     */\n    set: function (value) {\n      this._ignoreMinMax = value;\n\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"propertychanged\")) {\n          var event_8 = {\n            type: \"propertychanged\",\n            target: this,\n            property: \"ignoreMinMax\",\n            value: value\n          };\n          this.events.dispatchImmediately(\"propertychanged\", event_8);\n        }\n      }\n\n      if (this.component) {\n        this.component.handleDataItemPropertyChange(this, \"ignoreMinMax\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and starts an [[Animation]] to interpolate (morph) Data Item's\r\n   * properties and/or values.\r\n   *\r\n   * @see {@link Animation}\r\n   * @param animationOptions  Animation options\r\n   * @param duration          Animation duration (ms)\r\n   * @param easing            Easing function\r\n   * @return Animation\r\n   */\n\n  DataItem.prototype.animate = function (animationOptions, duration, easing) {\n    return new Animation(this, animationOptions, duration, easing).start();\n  };\n  /**\r\n   * Handles intermediate steps when Data Item is interpolating (morphing) from\r\n   * one value to another.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Event object\r\n   */\n\n\n  DataItem.prototype.handleInterpolationProgress = function (event) {\n    var animation = event.target; // it's always only one options, no need cycle\n\n    var animationOptions = animation.animationOptions[0];\n\n    if (animationOptions) {\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"workingvaluechanged\")) {\n          var event_9 = {\n            type: \"workingvaluechanged\",\n            target: this,\n            property: animationOptions.dummyData\n          };\n          this.events.dispatchImmediately(\"workingvaluechanged\", event_9);\n        }\n      }\n\n      if (this.component) {\n        this.component.handleDataItemWorkingValueChange(this, animationOptions.dummyData);\n      }\n    }\n  };\n  /**\r\n   * Checks whether Data Item has values set for all of the data fields,\r\n   * supplied via argument.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fields  Field list to check\r\n   * @return Has values for all fields?\r\n   */\n\n\n  DataItem.prototype.hasValue = function (fields) {\n    // todo: what about categories?\n    for (var i = 0, len = fields.length; i < len; i++) {\n      var values = this.values[fields[i]];\n\n      if (!values || !$type.hasValue(values.value)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  Object.defineProperty(DataItem.prototype, \"depth\", {\n    /**\r\n     * Depth of the Data Item.\r\n     *\r\n     * In nested data structures, like TreeMap, this indicates the level this\r\n     * data point is at, in relation to the parent Data Item.\r\n     *\r\n     * @return Depth\r\n     */\n    get: function () {\n      if (!this.parent) {\n        return 0;\n      } else {\n        return this.parent.depth + 1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"dataContext\", {\n    /**\r\n     * Sets to a reference to an original object from Component's data.\r\n     *\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._dataContext;\n    },\n\n    /**\r\n     * A reference to an original object in Component's data, that this Data Item\r\n     * is derived from.\r\n     *\r\n     * @param value Original data object\r\n     */\n    set: function (value) {\n      this._dataContext = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * adds a sprite to dataItem.sprites array\r\n   * @ignore\r\n   */\n\n  DataItem.prototype.addSprite = function (sprite) {\n    if (sprite.dataItem && sprite.dataItem != this) {\n      $array.remove(sprite.dataItem.sprites, sprite);\n    }\n\n    if (!this.visible) {\n      sprite.hide(0);\n    }\n\n    if (this.isHiding) {\n      sprite.hide();\n    }\n\n    this.sprites.push(sprite);\n    sprite.dataItem = this;\n  };\n\n  return DataItem;\n}(BaseObjectEvents);\n\nexport { DataItem };","map":{"version":3,"names":["__extends","BaseObjectEvents","Adapter","Animation","AnimationDisposer","$utils","$array","$type","DataItem","_super","_this","call","_disabled","hasProperties","values","categories","dates","locations","workingLocations","properties","sprites","isTemplate","_index","_visible","_hidden","_ignoreMinMax","hasChildren","isHiding","_valueAnimations","_locationAnimations","className","applyTheme","Object","defineProperty","prototype","get","_adapterO","enumerable","configurable","component","_animations","_disposers","push","set","value","hidden","setVisibility","each","sprite","__disabled","noChangeValues","visible","defaultState","hiddenState","_eventDispatcher","events","isEnabled","event_1","type","target","dispatchImmediately","show","duration","delay","fields","_hideDisposer","removeDispose","animation_1","field","setWorkingValue","animation","isFinished","dispose","hide","toValue","isNumber","animation_2","anim","on","getDuration","interpolationDuration","apply","getValue","name","calculated","dataFields","getWorkingValue","realName","workingValue","getActualWorkingValue","setValue","currentValue","newDuration","toNumber","event_2","property","handleDataItemValueChange","setCalculatedValue","event_3","handleDataItemCalculatedValueChange","animate","childObject","from","to","dummyData","interpolationEasing","handleInterpolationProgress","valueAnimation","stop","event_4","handleDataItemWorkingValueChange","setLocation","currentLocation","event_5","setWorkingLocation","workingLocation","locationAnimation","event_6","handleDataItemWorkingLocationChange","setDate","date","isDate","dateFormatter","parse","currentDate","getTime","getDate","setProperty","event_7","handleDataItemPropertyChange","setCategory","isString","castString","copyFrom","source","dataContext","copy","copyProperties","adapter","opacity","event_8","animationOptions","easing","start","event","event_9","hasValue","i","len","length","parent","depth","_dataContext","addSprite","dataItem","remove"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/DataItem.js"],"sourcesContent":["/**\r\n * Defines functionality for \"Data Item\"\r\n *\r\n * A Data Item can be any object that can hold data. For example [[LineSeries]]\r\n * holds a number of values, that comprise a line graph. Each of those values\r\n * (data points) is a {DataItem}.\r\n *\r\n * Furthermore the [[LineSeries]] itself can be represented as a entry in the\r\n * legend. Since legend needs access to Line Series' value, a DataItem is\r\n * created for the series.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents } from \"./Base\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { Animation, AnimationDisposer } from \"./utils/Animation\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $array from \"./utils/Array\";\r\n//import * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * DataItem represents single element in data, for example a data point in a\r\n * Serial Chart Series, e.g. a column.\r\n *\r\n * DataItem defines relationship between structured data, required for specific\r\n * chart type or task, and raw source data.\r\n *\r\n * It also implements required calculations, updates related visual elements,\r\n * etc.\r\n *\r\n * @todo Description\r\n * @important\r\n */\r\nvar DataItem = /** @class */ (function (_super) {\r\n    __extends(DataItem, _super);\r\n    /**\r\n     * Constructor\r\n     * @todo Adding events to disposers produces errors in some cases, which means that chart is using disposed Data Items which is not right\r\n     */\r\n    function DataItem() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * This Data Item is currently disabled.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._disabled = false;\r\n        /**\r\n         * Indicates whether Data Item has any properties set.\r\n         *\r\n         * If it does not have any, the code can use this property to check whether\r\n         * they need to apply costly operation of re-applying properties, whenever\r\n         * Data Item-related element is redrawn, e.g. series.\r\n         */\r\n        _this.hasProperties = false;\r\n        /**\r\n         * An object containing calculated values.\r\n         */\r\n        _this.values = {};\r\n        /**\r\n         * An object container current working values.\r\n         */\r\n        //public readonly workingValues: { [index: string]: { [index: string]: number } } = {};\r\n        /**\r\n         * An object containing categories.\r\n         */\r\n        _this.categories = {};\r\n        /**\r\n         * An object containing dates.\r\n         */\r\n        _this.dates = {};\r\n        /**\r\n         * An object containing locations for the Data Item.\r\n         *\r\n         * A location is a position within date or category, or, in some other cases,\r\n         * where there is no single point but rather some period.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Data_item_locations} for info how data item locations work\r\n         */\r\n        _this.locations = {};\r\n        /**\r\n         * Current working locations.\r\n         */\r\n        _this.workingLocations = {};\r\n        /**\r\n         * An object containing Data Item specific appearance properties in key-value\r\n         * pairs.\r\n         *\r\n         * Sometimes a single Data Item needs to apply different properties than the\r\n         * rest of the data [[Series]] it is part of. E.g. a single column,\r\n         * represented by a Data Item needs to be filled with a different color than\r\n         * the reset of the [[ColumnSeries]] it belongs to.\r\n         *\r\n         * That's where Data Item's `properties` come into play.\r\n         *\r\n         * Please note that you should set Data Item-specific properties using\r\n         * `setProperty()` method, rather than access `properties` object directly.\r\n         */\r\n        _this.properties = {};\r\n        /**\r\n         * A list of [[Sprite]] elements that are associated with this Data Item.\r\n         *\r\n         * E.g. an [[Axis]] Data Item has several separate elements associated with\r\n         * it, like [[AxisTick]], [[AxisLabel]], and [[Grid]].\r\n         *\r\n         * Data Item keeps track of all of them, so it can toggle all related visual\r\n         * elements when it itself is toggled.\r\n         */\r\n        _this.sprites = [];\r\n        /**\r\n         * Identifies if this object is a \"template\" and should not be treated as\r\n         * real object that is drawn or actually used in the chart.\r\n         */\r\n        _this.isTemplate = false;\r\n        /**\r\n         * The current index within the dataItems\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._index = null;\r\n        /**\r\n         * Is Data Item currently visible?\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._visible = true;\r\n        /**\r\n         * Is Data Item currently hidden?\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._hidden = false;\r\n        /**\r\n         * Should this Data Item be used when calculating data ranges and scales?\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._ignoreMinMax = false;\r\n        /**\r\n         * Some of the Data Item's data fields may contain an array of children. This\r\n         * property contains an object indicating which fields hold an array, so that\r\n         * they can be processed properly.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.hasChildren = {};\r\n        /**\r\n         * Indicates whether Data Item is currently animiting from visible to hidden\r\n         * state.\r\n         */\r\n        _this.isHiding = false;\r\n        /**\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._valueAnimations = {};\r\n        /**\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._locationAnimations = {};\r\n        _this.className = \"DataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DataItem.prototype, \"adapter\", {\r\n        /**\r\n         * Holds Adapter.\r\n         */\r\n        get: function () {\r\n            if (!this._adapterO) {\r\n                this._adapterO = new Adapter(this);\r\n            }\r\n            return this._adapterO;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"index\", {\r\n        /**\r\n         * Data Item's position index in Component's data.\r\n         *\r\n         * @return Index\r\n         */\r\n        get: function () {\r\n            if (this.component) {\r\n                if (this._index != null) {\r\n                    return this._index;\r\n                }\r\n                else {\r\n                    return -1;\r\n                }\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"animations\", {\r\n        /**\r\n         * A list of [[Animations]] objects currently mutating Data Item's values.\r\n         *\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            if (!this._animations) {\r\n                this._animations = [];\r\n                this._disposers.push(new AnimationDisposer(this._animations));\r\n            }\r\n            return this._animations;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"visible\", {\r\n        /**\r\n         * Returns `true` if this Data Item is currently visible.\r\n         *\r\n         * @return Visible?\r\n         */\r\n        get: function () {\r\n            if (this._hidden) {\r\n                return false;\r\n            }\r\n            return this._visible;\r\n        },\r\n        /**\r\n         * Sets visibility of the Data Item.\r\n         *\r\n         * @param value Visible?\r\n         */\r\n        set: function (value) {\r\n            if (value) {\r\n                this.hidden = false;\r\n            }\r\n            if (this._visible != value) {\r\n                this.setVisibility(value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"hidden\", {\r\n        /**\r\n         * Returns `true` if this Data Item is currently hidden.\r\n         *\r\n         * @return Hidden?\r\n         */\r\n        get: function () {\r\n            return this._hidden;\r\n        },\r\n        /**\r\n         * Sets hidden flag for data item. Mostly used to initially hide data item.\r\n         *\r\n         * @param value Hidden?\r\n         */\r\n        set: function (value) {\r\n            if (this._hidden != value) {\r\n                this._hidden = value;\r\n                if (value) {\r\n                    this.setVisibility(false);\r\n                }\r\n                else {\r\n                    this.setVisibility(true, true);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"__disabled\", {\r\n        /**\r\n         * Is this Data Item currently disabled?\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {boolean}\r\n         */\r\n        get: function () {\r\n            return this._disabled;\r\n        },\r\n        /**\r\n         * Disables all Sprites associated with this Data Item.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {boolean}\r\n         */\r\n        set: function (value) {\r\n            //\tif (this._disabled != value) { // not good\r\n            this._disabled = value;\r\n            $array.each(this.sprites, function (sprite) {\r\n                sprite.__disabled = value;\r\n            });\r\n            //\t}\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets visibility of the Data Item.\r\n     *\r\n     * @param value Data Item\r\n     */\r\n    DataItem.prototype.setVisibility = function (value, noChangeValues) {\r\n        $array.each(this.sprites, function (sprite) {\r\n            if (value) {\r\n                sprite.visible = sprite.defaultState.properties.visible;\r\n            }\r\n            else {\r\n                if (sprite.hiddenState) {\r\n                    sprite.visible = sprite.hiddenState.properties.visible;\r\n                }\r\n                else {\r\n                    sprite.visible = false;\r\n                }\r\n            }\r\n        });\r\n        this._visible = value;\r\n        if (this._eventDispatcher && !this.__disabled) {\r\n            if (this.events.isEnabled(\"visibilitychanged\")) {\r\n                var event_1 = {\r\n                    type: \"visibilitychanged\",\r\n                    target: this,\r\n                    visible: value\r\n                };\r\n                this.events.dispatchImmediately(\"visibilitychanged\", event_1);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Shows the Data Item and related visual elements.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     * @param delay     Delay animation (ms)\r\n     * @param fields    A list of fields to set values of\r\n     */\r\n    DataItem.prototype.show = function (duration, delay, fields) {\r\n        var _this = this;\r\n        if (!this.hidden) {\r\n            this.setVisibility(true, true);\r\n            this.isHiding = false;\r\n            if (this._hideDisposer) {\r\n                this.removeDispose(this._hideDisposer);\r\n            }\r\n            var animation_1;\r\n            if (fields) {\r\n                $array.each(fields, function (field) {\r\n                    animation_1 = _this.setWorkingValue(field, _this.values[field].value, duration, delay);\r\n                });\r\n            }\r\n            $array.each(this.sprites, function (sprite) {\r\n                var animation = sprite.show(duration);\r\n                if (animation != null && !animation.isFinished()) {\r\n                    _this._disposers.push(animation);\r\n                    if (delay != null && delay > 0) {\r\n                        animation.delay(delay);\r\n                    }\r\n                }\r\n            });\r\n            return animation_1;\r\n        }\r\n    };\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    DataItem.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        $array.each(this.sprites, function (sprite) {\r\n            sprite.dispose();\r\n        });\r\n        this.sprites = [];\r\n    };\r\n    /**\r\n     * Hides the Data Item and related visual elements.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     * @param delay     Delay animation (ms)\r\n     * @param toValue   A value to set to `fields` when hiding\r\n     * @param fields    A list of data fields to set value to `toValue`\r\n     */\r\n    DataItem.prototype.hide = function (duration, delay, toValue, fields) {\r\n        var _this = this;\r\n        this.isHiding = true;\r\n        $array.each(this.sprites, function (sprite) {\r\n            var animation = sprite.hide(duration);\r\n            if (animation != null && !animation.isFinished()) {\r\n                _this._disposers.push(animation);\r\n                if (delay != null && delay > 0) {\r\n                    animation.delay(delay);\r\n                }\r\n            }\r\n        });\r\n        if ($type.isNumber(toValue) && fields) {\r\n            var animation_2;\r\n            $array.each(fields, function (field) {\r\n                var anim = _this.setWorkingValue(field, toValue, duration, delay);\r\n                if (anim) {\r\n                    animation_2 = anim;\r\n                }\r\n            });\r\n            if (animation_2 && !animation_2.isFinished()) {\r\n                this._hideDisposer = animation_2.events.on(\"animationended\", function () {\r\n                    _this.setVisibility(false, true);\r\n                    _this.isHiding = false;\r\n                });\r\n                this._disposers.push(this._hideDisposer);\r\n                return animation_2;\r\n            }\r\n            else {\r\n                this.isHiding = false;\r\n                this.setVisibility(false, true);\r\n            }\r\n        }\r\n        else {\r\n            this.isHiding = false;\r\n            this.setVisibility(false);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a duration (ms) the Data Item should take to animate from one\r\n     * value to another.\r\n     *\r\n     * If the duration is not specified via parameter, this method will try to\r\n     * request a default duration from the related `Component`.\r\n     *\r\n     * @param duration  Default duration (ms)\r\n     * @return Duration (ms)\r\n     */\r\n    DataItem.prototype.getDuration = function (duration) {\r\n        if (!$type.isNumber(duration)) {\r\n            var component = this.component;\r\n            if (component) {\r\n                duration = component.interpolationDuration;\r\n            }\r\n        }\r\n        if (duration != null) {\r\n            if (!this._adapterO) {\r\n                return duration;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"duration\", duration);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a numeric value for specific data field.\r\n     *\r\n     * If `calculated` is not set, it will return a raw value, as it is in\r\n     * source data.\r\n     *\r\n     * If `calculated` is set, it will return a pre-calculated specific value.\r\n     *\r\n     * @param name        Data field name\r\n     * @param calculated  A calculated value name\r\n     * @return Value\r\n     */\r\n    DataItem.prototype.getValue = function (name, calculated) {\r\n        if (name && this.component) {\r\n            if (!calculated) {\r\n                calculated = this.component.dataFields[name + \"Show\"];\r\n                if (!calculated) {\r\n                    calculated = \"value\";\r\n                }\r\n            }\r\n            var value = this.values[name][calculated];\r\n            if (this._adapterO && this._adapterO.isEnabled(\"value\")) {\r\n                return this._adapterO.apply(\"value\", {\r\n                    value: value,\r\n                    field: name\r\n                }).value;\r\n            }\r\n            else {\r\n                return value;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a current working value for a specific data field.\r\n     *\r\n     * The actual value may differ from the one returned by `getValue()`. The\r\n     * latter returns static values from the data source.\r\n     *\r\n     * `getWorkingValue()` returns current value, which is usually different if\r\n     * Data Item is animating from one state to another.\r\n     *\r\n     * @param name        Data field name\r\n     * @return Value\r\n     */\r\n    DataItem.prototype.getWorkingValue = function (name) {\r\n        if (name && this.component) {\r\n            var realName = this.component.dataFields[name + \"Show\"];\r\n            if (!realName) {\r\n                realName = \"workingValue\";\r\n            }\r\n            if (this._adapterO) {\r\n                return this._adapterO.apply(\"workingValue\", {\r\n                    workingValue: this.values[name][realName],\r\n                    field: name\r\n                }).workingValue;\r\n            }\r\n            else {\r\n                return this.values[name][realName];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     * @return Value\r\n     */\r\n    DataItem.prototype.getActualWorkingValue = function (name) {\r\n        return this.values[name].workingValue;\r\n    };\r\n    /**\r\n     * Sets a numeric value for specific data field.\r\n     *\r\n     * @param name        Data field name\r\n     * @param value       Value\r\n     * @param calculated  Calculated data field name\r\n     * @param duration    Duration (ms) to animate to new value to\r\n     * @param delay       Delay animation (ms)\r\n     */\r\n    DataItem.prototype.setValue = function (name, value, duration, delay) {\r\n        var currentValue = this.values[name].value;\r\n        var newDuration = this.getDuration(duration);\r\n        value = $type.toNumber(value);\r\n        if (currentValue !== value) {\r\n            this.values[name].value = value;\r\n            if (this._eventDispatcher && !this.__disabled) {\r\n                if (this.events.isEnabled(\"valuechanged\")) {\r\n                    var event_2 = {\r\n                        type: \"valuechanged\",\r\n                        target: this,\r\n                        property: name\r\n                    };\r\n                    this.events.dispatchImmediately(\"valuechanged\", event_2);\r\n                }\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemValueChange(this, name);\r\n            }\r\n        }\r\n        this.setWorkingValue(name, value, newDuration, delay);\r\n    };\r\n    DataItem.prototype.setCalculatedValue = function (name, value, calculated) {\r\n        var currentValue = this.values[name][calculated];\r\n        if (currentValue !== value && $type.isNumber(value)) {\r\n            this.values[name][calculated] = value;\r\n            if (this._eventDispatcher && !this.__disabled) {\r\n                if (this.events.isEnabled(\"calculatedvaluechanged\")) {\r\n                    var event_3 = {\r\n                        type: \"calculatedvaluechanged\",\r\n                        target: this,\r\n                        property: name\r\n                    };\r\n                    this.events.dispatchImmediately(\"calculatedvaluechanged\", event_3);\r\n                }\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemCalculatedValueChange(this, name);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Set current working numeric value for a specific data field.\r\n     *\r\n     * @param name        Data field name\r\n     * @param value       Value\r\n     * @param calculated  Calculated data field name\r\n     * @param duration    Duration (ms) to animate to new value to\r\n     * @param delay       Delay animation (ms)\r\n     * @return An [[Animation]] object used for transition to new values\r\n     */\r\n    DataItem.prototype.setWorkingValue = function (name, value, duration, delay) {\r\n        if ($type.isNumber(this.values[name].value)) {\r\n            var newDuration = this.getDuration(duration);\r\n            var workingValue = this.values[name].workingValue;\r\n            if (newDuration != null && newDuration > 0 && $type.isNumber(workingValue) && this.component) { // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\r\n                if (workingValue != value) {\r\n                    var animation = this.animate({ childObject: this.values[name], property: \"workingValue\", from: workingValue, to: value, dummyData: name }, newDuration, this.component.interpolationEasing);\r\n                    if (delay != null) {\r\n                        animation.delay(delay);\r\n                    }\r\n                    animation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\r\n                    animation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\r\n                    animation.events.on(\"animationended\", this.handleInterpolationProgress, this);\r\n                    this._valueAnimations[name] = animation;\r\n                    return animation;\r\n                }\r\n                else {\r\n                    var valueAnimation = this._valueAnimations[name];\r\n                    if (valueAnimation) {\r\n                        valueAnimation.stop();\r\n                    }\r\n                    this.values[name].workingValue = value;\r\n                }\r\n            }\r\n            else {\r\n                var valueAnimation = this._valueAnimations[name];\r\n                if (valueAnimation) {\r\n                    valueAnimation.stop();\r\n                }\r\n                this.values[name].workingValue = value;\r\n                if (this._eventDispatcher && !this.__disabled) {\r\n                    if (this.events.isEnabled(\"workingvaluechanged\")) {\r\n                        var event_4 = {\r\n                            type: \"workingvaluechanged\",\r\n                            target: this,\r\n                            property: name\r\n                        };\r\n                        this.events.dispatchImmediately(\"workingvaluechanged\", event_4);\r\n                    }\r\n                }\r\n                if (this.component) {\r\n                    this.component.handleDataItemWorkingValueChange(this, name);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a relative location for a data field.\r\n     *\r\n     * A location is always relative on a 0 to 1 scale, with 0 being beginning,\r\n     * 0.5 middle and 1 end.\r\n     *\r\n     * @todo Rewiew description\r\n     * @param name      Data field name\r\n     * @param value     Location (0-1)\r\n     * @param duration  Duration (ms) to animate to new value to\r\n     * @param delay     Delay animation (ms)\r\n     */\r\n    DataItem.prototype.setLocation = function (name, value, duration, delay) {\r\n        var currentLocation = this.locations[name];\r\n        if (currentLocation !== value) {\r\n            this.locations[name] = value;\r\n            if (this._eventDispatcher && !this.__disabled) {\r\n                if (this.events.isEnabled(\"locationchanged\")) {\r\n                    var event_5 = {\r\n                        type: \"locationchanged\",\r\n                        target: this,\r\n                        property: name\r\n                    };\r\n                    this.events.dispatchImmediately(\"locationchanged\", event_5);\r\n                }\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemValueChange(this, name); // correct\r\n            }\r\n            this.setWorkingLocation(name, value, duration, delay);\r\n        }\r\n    };\r\n    /**\r\n     * Sets a current working location for a data field.\r\n     *\r\n     * @todo Rewiew description\r\n     * @param name      Data field name\r\n     * @param value     Location (0-1)\r\n     * @param duration  Duration (ms) to animate to new value to\r\n     * @param delay     Delay animation (ms)\r\n     */\r\n    DataItem.prototype.setWorkingLocation = function (name, value, duration, delay) {\r\n        var newDuration = this.getDuration(duration);\r\n        var workingLocation = this.workingLocations[name];\r\n        if (newDuration != null && newDuration > 0 && $type.isNumber(workingLocation) && this.component) { // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\r\n            if (workingLocation != value) {\r\n                var animation = this.animate({ childObject: this.workingLocations, property: name, from: workingLocation, to: value, dummyData: name }, newDuration, this.component.interpolationEasing);\r\n                if (delay != null) {\r\n                    animation.delay(delay);\r\n                }\r\n                animation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\r\n                animation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\r\n                animation.events.on(\"animationended\", this.handleInterpolationProgress, this);\r\n                this._locationAnimations[name] = animation;\r\n                return animation;\r\n            }\r\n            else {\r\n                var locationAnimation = this._locationAnimations[name];\r\n                if (locationAnimation) {\r\n                    locationAnimation.stop();\r\n                }\r\n                this.workingLocations[name] = value;\r\n            }\r\n        }\r\n        else {\r\n            var locationAnimation = this._locationAnimations[name];\r\n            if (locationAnimation) {\r\n                locationAnimation.stop();\r\n            }\r\n            this.workingLocations[name] = value;\r\n            if (this._eventDispatcher && !this.__disabled) {\r\n                if (this.events.isEnabled(\"workinglocationchanged\")) {\r\n                    var event_6 = {\r\n                        type: \"workinglocationchanged\",\r\n                        target: this,\r\n                        property: name\r\n                    };\r\n                    this.events.dispatchImmediately(\"workinglocationchanged\", event_6);\r\n                }\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemWorkingLocationChange(this, name);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets Date value to a data field.\r\n     *\r\n     * @param name      Data field name\r\n     * @param date      Date object\r\n     * @param duration  Duration (ms) to animate to new value to\r\n     */\r\n    DataItem.prototype.setDate = function (name, date, duration) {\r\n        if (!$type.isDate(date) && this.component) {\r\n            date = this.component.dateFormatter.parse(date);\r\n        }\r\n        var currentDate = this.dates[name];\r\n        if (currentDate !== date) {\r\n            this.dates[name] = date;\r\n            this.setValue(name, date.getTime(), duration);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a Date value of the data field.\r\n     *\r\n     * @param name  Data field name\r\n     * @return Date object\r\n     */\r\n    DataItem.prototype.getDate = function (name) {\r\n        if (this._adapterO) {\r\n            return this._adapterO.apply(\"date\", {\r\n                date: this.dates[name],\r\n                field: name\r\n            }).date;\r\n        }\r\n        else {\r\n            return this.dates[name];\r\n        }\r\n    };\r\n    /**\r\n     * Sets a Data Item-specific visual properties to apply to related elements.\r\n     *\r\n     * @param name   Property name\r\n     * @param value  Property value\r\n     */\r\n    DataItem.prototype.setProperty = function (name, value) {\r\n        if (this.properties[name] !== value) {\r\n            this.hasProperties = true;\r\n            this.properties[name] = value;\r\n            if (this._eventDispatcher && !this.__disabled) {\r\n                if (this.events.isEnabled(\"propertychanged\")) {\r\n                    var event_7 = {\r\n                        type: \"propertychanged\",\r\n                        target: this,\r\n                        property: name,\r\n                        value: value\r\n                    };\r\n                    this.events.dispatchImmediately(\"propertychanged\", event_7);\r\n                }\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemPropertyChange(this, name);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a related category for this Data Item.\r\n     *\r\n     * @todo Review description\r\n     * @param name   Data field name\r\n     * @param value  Category\r\n     */\r\n    DataItem.prototype.setCategory = function (name, value) {\r\n        if (!$type.isString(value)) {\r\n            value = $type.castString(value);\r\n        }\r\n        if (this.categories[name] !== value) {\r\n            this.categories[name] = value;\r\n        }\r\n    };\r\n    /**\r\n     * Clones the Data Item, including all related data.\r\n     *\r\n     * @return New Data Item clone\r\n     */\r\n    //public clone(cloneId?: string): this {\r\n    //\tlet dataItem: this = super.clone(cloneId);\r\n    //\tdataItem.copyFrom(this);\r\n    //\treturn dataItem;\r\n    //}\r\n    /**\r\n     * Copies all properties and related data from different data item.\r\n     *\r\n     * @param object Source data item\r\n     */\r\n    DataItem.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (source.dataContext) {\r\n            this.dataContext = $utils.copy(source.dataContext, {});\r\n        }\r\n        $utils.copyProperties(source.locations, this.locations);\r\n        /*\r\n        $utils.copyProperties(source.properties, this.properties);\r\n        $utils.copyProperties(source.categories, this.categories);\r\n        $utils.copyProperties(source.values, this.values);\r\n        $utils.copyProperties(source.dates, this.dates);\r\n\r\n        $object.each(source.values, (name, value) => {\r\n            this.values[name] = $object.copy(value);\r\n        });*/\r\n        if (source._adapterO) {\r\n            this.adapter.copyFrom(source._adapterO);\r\n        }\r\n        //this.events.copyFrom(source.events); // because copied in Base\r\n        this.component = source.component;\r\n    };\r\n    Object.defineProperty(DataItem.prototype, \"opacity\", {\r\n        /**\r\n         * Sets opacity for all Data Item's related elements (Sprites).\r\n         *\r\n         * @param value Opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            $array.each(this.sprites, function (sprite) {\r\n                sprite.opacity = value;\r\n            });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"ignoreMinMax\", {\r\n        /**\r\n         * Exclude from min/max calculations?\r\n         * @return Exclude from min/max calculations?\r\n         */\r\n        get: function () {\r\n            return this._ignoreMinMax;\r\n        },\r\n        /**\r\n         * Sets whether this data point should not be included in the scale and\r\n         * minimum/maximum calculations.\r\n         *\r\n         * E.g. some we may want to exclude a particular data point from influencing\r\n         * [[ValueAxis]] scale.\r\n         *\r\n         * @param value  Exclude from min/max calculations?\r\n         */\r\n        set: function (value) {\r\n            this._ignoreMinMax = value;\r\n            if (this._eventDispatcher && !this.__disabled) {\r\n                if (this.events.isEnabled(\"propertychanged\")) {\r\n                    var event_8 = {\r\n                        type: \"propertychanged\",\r\n                        target: this,\r\n                        property: \"ignoreMinMax\",\r\n                        value: value\r\n                    };\r\n                    this.events.dispatchImmediately(\"propertychanged\", event_8);\r\n                }\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemPropertyChange(this, \"ignoreMinMax\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates and starts an [[Animation]] to interpolate (morph) Data Item's\r\n     * properties and/or values.\r\n     *\r\n     * @see {@link Animation}\r\n     * @param animationOptions  Animation options\r\n     * @param duration          Animation duration (ms)\r\n     * @param easing            Easing function\r\n     * @return Animation\r\n     */\r\n    DataItem.prototype.animate = function (animationOptions, duration, easing) {\r\n        return new Animation(this, animationOptions, duration, easing).start();\r\n    };\r\n    /**\r\n     * Handles intermediate steps when Data Item is interpolating (morphing) from\r\n     * one value to another.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Event object\r\n     */\r\n    DataItem.prototype.handleInterpolationProgress = function (event) {\r\n        var animation = event.target;\r\n        // it's always only one options, no need cycle\r\n        var animationOptions = animation.animationOptions[0];\r\n        if (animationOptions) {\r\n            if (this._eventDispatcher && !this.__disabled) {\r\n                if (this.events.isEnabled(\"workingvaluechanged\")) {\r\n                    var event_9 = {\r\n                        type: \"workingvaluechanged\",\r\n                        target: this,\r\n                        property: animationOptions.dummyData\r\n                    };\r\n                    this.events.dispatchImmediately(\"workingvaluechanged\", event_9);\r\n                }\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemWorkingValueChange(this, animationOptions.dummyData);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks whether Data Item has values set for all of the data fields,\r\n     * supplied via argument.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param fields  Field list to check\r\n     * @return Has values for all fields?\r\n     */\r\n    DataItem.prototype.hasValue = function (fields) {\r\n        // todo: what about categories?\r\n        for (var i = 0, len = fields.length; i < len; i++) {\r\n            var values = this.values[fields[i]];\r\n            if (!values || !$type.hasValue(values.value)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    Object.defineProperty(DataItem.prototype, \"depth\", {\r\n        /**\r\n         * Depth of the Data Item.\r\n         *\r\n         * In nested data structures, like TreeMap, this indicates the level this\r\n         * data point is at, in relation to the parent Data Item.\r\n         *\r\n         * @return Depth\r\n         */\r\n        get: function () {\r\n            if (!this.parent) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return this.parent.depth + 1;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"dataContext\", {\r\n        /**\r\n         * Sets to a reference to an original object from Component's data.\r\n         *\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._dataContext;\r\n        },\r\n        /**\r\n         * A reference to an original object in Component's data, that this Data Item\r\n         * is derived from.\r\n         *\r\n         * @param value Original data object\r\n         */\r\n        set: function (value) {\r\n            this._dataContext = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * adds a sprite to dataItem.sprites array\r\n     * @ignore\r\n     */\r\n    DataItem.prototype.addSprite = function (sprite) {\r\n        if (sprite.dataItem && sprite.dataItem != this) {\r\n            $array.remove(sprite.dataItem.sprites, sprite);\r\n        }\r\n        if (!this.visible) {\r\n            sprite.hide(0);\r\n        }\r\n        if (this.isHiding) {\r\n            sprite.hide();\r\n        }\r\n        this.sprites.push(sprite);\r\n        sprite.dataItem = this;\r\n    };\r\n    return DataItem;\r\n}(BaseObjectEvents));\r\nexport { DataItem };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,gBAAT,QAAiC,QAAjC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,SAAT,EAAoBC,iBAApB,QAA6C,mBAA7C;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB,C,CACA;;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,QAAQ;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC5CT,SAAS,CAACQ,QAAD,EAAWC,MAAX,CAAT;EACA;AACJ;AACA;AACA;;;EACI,SAASD,QAAT,GAAoB;IAChB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAAjC;IACA;AACR;AACA;AACA;AACA;;;IACQD,KAAK,CAACE,SAAN,GAAkB,KAAlB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;;IACQF,KAAK,CAACG,aAAN,GAAsB,KAAtB;IACA;AACR;AACA;;IACQH,KAAK,CAACI,MAAN,GAAe,EAAf;IACA;AACR;AACA;IACQ;;IACA;AACR;AACA;;IACQJ,KAAK,CAACK,UAAN,GAAmB,EAAnB;IACA;AACR;AACA;;IACQL,KAAK,CAACM,KAAN,GAAc,EAAd;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;IACQN,KAAK,CAACO,SAAN,GAAkB,EAAlB;IACA;AACR;AACA;;IACQP,KAAK,CAACQ,gBAAN,GAAyB,EAAzB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQR,KAAK,CAACS,UAAN,GAAmB,EAAnB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQT,KAAK,CAACU,OA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"},"metadata":{},"sourceType":"module"}