{"ast":null,"code":"/**\r\n * This functionality is related to the HTML wrapper that houses `<svg>` tag.\r\n */\nimport { Popup } from \"../elements/Popup\";\nimport { Modal } from \"../elements/Modal\";\nimport { ListTemplate, ListDisposer } from \"../utils/List\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $dom from \"../utils/DOM\";\nimport * as $array from \"../utils/Array\";\nimport * as $type from \"../utils/Type\";\nimport { ResizeSensor } from \"../utils/ResizeSensor\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A array of all SVG Containers (one SVG container per chart instance).\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport var svgContainers = [];\n/**\r\n * A class used to create an HTML wrapper for the SVG contents.\r\n */\n\nvar SVGContainer =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   *\r\n   * * Creates an HTML wrapper for SVG\r\n   */\n  function SVGContainer(htmlElement, ghost) {\n    var _this = this;\n    /**\r\n     * Indicates if this object has already been deleted. Any\r\n     * destruction/disposal code should take this into account when deciding\r\n     * wheter to run potentially costly disposal operations if they already have\r\n     * been run.\r\n     */\n\n\n    this._disposed = false;\n    /**\r\n     * If this component is in a separate HTML container, `autoResize` means the\r\n     * module will constantly measure container's size and adopt contents to it.\r\n     */\n\n    this.autoResize = true;\n    /**\r\n     * Holds list of references to [[Sprite]] objects that should not be exported\r\n     * when exporting chart to an image.\r\n     *\r\n     * @ignore\r\n     */\n\n    this.nonExportableSprites = [];\n    /**\r\n     * List of objects that need to be disposed when this one is disposed.\r\n     */\n\n    this._disposers = [];\n    this.cssScale = 1; // This is needed so that it won't resize while printing, so that way printing works correctly.\n\n    this._printing = false; // Log parent HTML element\n\n    this.htmlElement = htmlElement;\n\n    if (!ghost) {\n      this._printing = false;\n      this.initSensor();\n\n      this._disposers.push($dom.addEventListener(window, \"beforeprint\", function () {\n        _this._printing = true;\n      }));\n\n      this._disposers.push($dom.addEventListener(window, \"afterprint\", function () {\n        _this._printing = false;\n      }));\n    } // Adds to containers array\n\n\n    svgContainers.push(this);\n    /**\r\n     * Create child div for the container - it will have svg node\r\n     * It might seem that this container is not necessay, however having it solves\r\n     * a problems with mouse position detection and some other.\r\n     */\n\n    var svgContainer = document.createElement(\"div\");\n    var style = svgContainer.style;\n    style.width = \"100%\";\n    style.height = \"100%\";\n    style.position = \"relative\";\n    htmlElement.appendChild(svgContainer);\n    this.SVGContainer = svgContainer;\n  }\n  /**\r\n   * (Re)Initializes a resize sensor.\r\n   */\n\n\n  SVGContainer.prototype.initSensor = function () {\n    var _this = this;\n\n    if (this.resizeSensor) {\n      this.resizeSensor.dispose();\n    }\n\n    var callback = function () {\n      if (_this.autoResize && !_this._printing) {\n        _this.measure();\n      }\n    };\n\n    this.resizeSensor = new ResizeSensor(this.htmlElement, callback);\n\n    this._disposers.push(this.resizeSensor);\n  };\n  /**\r\n   * Measures size of parent HTML element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  SVGContainer.prototype.measure = function () {\n    var width = $utils.width(this.htmlElement);\n    var height = $utils.height(this.htmlElement);\n    var container = this.container;\n\n    if (container) {\n      if (this.width != width || this.height != height) {\n        this.width = width;\n        this.height = height;\n\n        if (width > 0) {\n          container.maxWidth = width;\n        }\n\n        if (height > 0) {\n          container.maxHeight = height;\n        }\n\n        $dom.fixPixelPerfect(this.SVGContainer);\n      }\n\n      if (!container.maxWidth) {\n        container.maxWidth = 0;\n      }\n\n      if (!container.maxHeight) {\n        container.maxHeight = 0;\n      }\n\n      this.cssScale = 1;\n      this.checkTransform(this.htmlElement);\n    }\n  };\n\n  Object.defineProperty(SVGContainer.prototype, \"container\", {\n    /**\r\n     * @return Container\r\n     */\n    get: function () {\n      return this._container;\n    },\n\n    /**\r\n     * A [[Container]] element which is placed into container.\r\n     *\r\n     * @param container  Container\r\n     */\n    set: function (container) {\n      this._container = container;\n      this.measure();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns if this object has been already been disposed.\r\n   *\r\n   * @return Is disposed?\r\n   */\n\n  SVGContainer.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Removes this container from SVG container list in system, which\r\n   * effectively disables size change monitoring for it.\r\n   */\n\n\n  SVGContainer.prototype.dispose = function () {\n    if (!this._disposed) {\n      $array.remove(svgContainers, this);\n    }\n\n    $array.each(this._disposers, function (item) {\n      item.dispose();\n    });\n  };\n\n  Object.defineProperty(SVGContainer.prototype, \"hideOverflow\", {\n    /**\r\n     * Indicates if chart container should have its style set\r\n     * to `overflow: hidden`.\r\n     *\r\n     * Normally, we don't want that, so that certain elements, such as tooltips,\r\n     * would be able to go outside chart area.\r\n     *\r\n     * There is one issue though. Some browsers ignore SVG masks and would\r\n     * display scrollbars if chart elements, that go outside chart area extend\r\n     * outside window.\r\n     *\r\n     * This is especially true for [[MapChart]], which can have its elements\r\n     * extend very widely when zoomed in. Even if those parts are not visible\r\n     * because of SVG masks, some browsers might still display window scrollbars.\r\n     *\r\n     * This is why we set this setting to `true` in [[MapChart]].\r\n     *\r\n     * Other charts use default of `false`.\r\n     */\n    set: function (value) {\n      if (value) {\n        this.SVGContainer.style.overflow = \"hidden\";\n      } else {\n        this.SVGContainer.style.overflow = \"\";\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SVGContainer.prototype, \"modal\", {\n    /**\r\n     * ==========================================================================\r\n     * MODAL/POPUP RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns a [[Modal]] instance, associated with this chart.\r\n     * (elements top parent)\r\n     *\r\n     * Accessing modal does not make it appear. To make a modal appear, use\r\n     * `showModal()` method.\r\n     *\r\n     * @see {@link Modal} for more information about using Modal windows\r\n     * @return Modal instance\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._modal)) {\n        // Create new modal\n        this._modal = new Modal();\n        this._modal.container = this.SVGContainer; // Add to disposers\n\n        this._disposers.push(this._modal);\n      }\n\n      return this._modal;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Opens a modal window with specific content (`text` parameter) and,\r\n   * optionally, `title`.\r\n   *\r\n   * The `text` parameter can contain HTML content.\r\n   *\r\n   * @see {@link Modal} for more information about using Modal windows\r\n   * @param text   Modal contents\r\n   * @param title  Title for the modal window\r\n   */\n\n  SVGContainer.prototype.openModal = function (text, title) {\n    // Hide previous modal\n    this.closeModal(); // Create modal\n\n    var modal = this.modal;\n    modal.content = text;\n    modal.readerTitle = title || \"\";\n    modal.title = title || \"\";\n    modal.open();\n    return modal;\n  };\n  /**\r\n   * Hides modal window if there is one currently open.\r\n   */\n\n\n  SVGContainer.prototype.closeModal = function () {\n    if (this._modal) {\n      this.modal.close();\n    }\n  };\n\n  Object.defineProperty(SVGContainer.prototype, \"popups\", {\n    /**\r\n     * A list of popups for this chart.\r\n     *\r\n     * @return Popups\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._popups)) {\n        // Create popup template\n        var popupTemplate = new Popup();\n        popupTemplate.container = this.SVGContainer; // Create the list\n\n        this._popups = new ListTemplate(popupTemplate); // Add to disposers\n\n        this._disposers.push(new ListDisposer(this._popups));\n\n        this._disposers.push(this._popups.template);\n      }\n\n      return this._popups;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates, opens, and returns a new [[Popup]] window.\r\n   *\r\n   * `text` can be any valid HTML.\r\n   *\r\n   * `title` is currently not supported.\r\n   *\r\n   * @param text   Popup contents\r\n   * @param title  Popup title\r\n   * @return Popup instance\r\n   */\n\n  SVGContainer.prototype.openPopup = function (text, title) {\n    var popup = this.popups.create();\n    popup.content = text;\n\n    if ($type.hasValue(title)) {\n      popup.title = title;\n    }\n\n    popup.open();\n    return popup;\n  };\n  /**\r\n   * Closes all currently open popup windows\r\n   */\n\n\n  SVGContainer.prototype.closeAllPopups = function () {\n    this.popups.each(function (popup) {\n      popup.close();\n    });\n  };\n\n  Object.defineProperty(SVGContainer.prototype, \"readerAlertElement\", {\n    /**\r\n     * ==========================================================================\r\n     * ACCESSIBILITY STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * A `<div>` element used as as placeholder to trigger screen alerts.\r\n     *\r\n     * @sunce 4.9.2\r\n     * @return Element\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._readerAlertElement)) {\n        // Create element\n        var div = document.createElement(\"div\");\n        div.setAttribute(\"role\", \"alert\");\n        div.style.zIndex = \"-100000\";\n        div.style.opacity = \"0\";\n        div.style.position = \"absolute\";\n        div.style.top = \"0\";\n        this.SVGContainer.appendChild(div);\n        this._readerAlertElement = div;\n      }\n\n      return this._readerAlertElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Triggers screen reader read out a message.\r\n   *\r\n   * @since 4.9.2\r\n   * @param  text  Alert text\r\n   */\n\n  SVGContainer.prototype.readerAlert = function (text) {\n    this.readerAlertElement.innerHTML = text;\n  };\n  /**\r\n   * ==========================================================================\r\n   * OTHER STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n\n  SVGContainer.prototype.checkTransform = function (div) {\n    if (window.getComputedStyle) {\n      if (div && div.style) {\n        var style = window.getComputedStyle(div, null);\n\n        if (style) {\n          var matrix = style.getPropertyValue(\"-webkit-transform\") || style.getPropertyValue(\"-moz-transform\") || style.getPropertyValue(\"-ms-transform\") || style.getPropertyValue(\"-o-transform\") || style.getPropertyValue(\"transform\");\n\n          if (matrix && matrix !== \"none\") {\n            var values = matrix.split('(')[1].split(')')[0].split(',');\n            var a = Number(values[0]);\n            var b = Number(values[1]);\n            var scale = Math.sqrt(a * a + b * b);\n\n            if (!isNaN(scale)) {\n              this.cssScale *= scale;\n            }\n          }\n        }\n      }\n\n      if (div.parentNode && div.parentNode instanceof HTMLElement) {\n        this.checkTransform(div.parentNode);\n      }\n    }\n  };\n\n  return SVGContainer;\n}();\n\nexport { SVGContainer };","map":{"version":3,"names":["Popup","Modal","ListTemplate","ListDisposer","$utils","$dom","$array","$type","ResizeSensor","svgContainers","SVGContainer","htmlElement","ghost","_this","_disposed","autoResize","nonExportableSprites","_disposers","cssScale","_printing","initSensor","push","addEventListener","window","svgContainer","document","createElement","style","width","height","position","appendChild","prototype","resizeSensor","dispose","callback","measure","container","maxWidth","maxHeight","fixPixelPerfect","checkTransform","Object","defineProperty","get","_container","set","enumerable","configurable","isDisposed","remove","each","item","value","overflow","hasValue","_modal","openModal","text","title","closeModal","modal","content","readerTitle","open","close","_popups","popupTemplate","template","openPopup","popup","popups","create","closeAllPopups","_readerAlertElement","div","setAttribute","zIndex","opacity","top","readerAlert","readerAlertElement","innerHTML","getComputedStyle","matrix","getPropertyValue","values","split","a","Number","b","scale","Math","sqrt","isNaN","parentNode","HTMLElement"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/rendering/SVGContainer.js"],"sourcesContent":["/**\r\n * This functionality is related to the HTML wrapper that houses `<svg>` tag.\r\n */\r\nimport { Popup } from \"../elements/Popup\";\r\nimport { Modal } from \"../elements/Modal\";\r\nimport { ListTemplate, ListDisposer } from \"../utils/List\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { ResizeSensor } from \"../utils/ResizeSensor\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A array of all SVG Containers (one SVG container per chart instance).\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport var svgContainers = [];\r\n/**\r\n * A class used to create an HTML wrapper for the SVG contents.\r\n */\r\nvar SVGContainer = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * * Creates an HTML wrapper for SVG\r\n     */\r\n    function SVGContainer(htmlElement, ghost) {\r\n        var _this = this;\r\n        /**\r\n         * Indicates if this object has already been deleted. Any\r\n         * destruction/disposal code should take this into account when deciding\r\n         * wheter to run potentially costly disposal operations if they already have\r\n         * been run.\r\n         */\r\n        this._disposed = false;\r\n        /**\r\n         * If this component is in a separate HTML container, `autoResize` means the\r\n         * module will constantly measure container's size and adopt contents to it.\r\n         */\r\n        this.autoResize = true;\r\n        /**\r\n         * Holds list of references to [[Sprite]] objects that should not be exported\r\n         * when exporting chart to an image.\r\n         *\r\n         * @ignore\r\n         */\r\n        this.nonExportableSprites = [];\r\n        /**\r\n         * List of objects that need to be disposed when this one is disposed.\r\n         */\r\n        this._disposers = [];\r\n        this.cssScale = 1;\r\n        // This is needed so that it won't resize while printing, so that way printing works correctly.\r\n        this._printing = false;\r\n        // Log parent HTML element\r\n        this.htmlElement = htmlElement;\r\n        if (!ghost) {\r\n            this._printing = false;\r\n            this.initSensor();\r\n            this._disposers.push($dom.addEventListener(window, \"beforeprint\", function () {\r\n                _this._printing = true;\r\n            }));\r\n            this._disposers.push($dom.addEventListener(window, \"afterprint\", function () {\r\n                _this._printing = false;\r\n            }));\r\n        }\r\n        // Adds to containers array\r\n        svgContainers.push(this);\r\n        /**\r\n         * Create child div for the container - it will have svg node\r\n         * It might seem that this container is not necessay, however having it solves\r\n         * a problems with mouse position detection and some other.\r\n         */\r\n        var svgContainer = document.createElement(\"div\");\r\n        var style = svgContainer.style;\r\n        style.width = \"100%\";\r\n        style.height = \"100%\";\r\n        style.position = \"relative\";\r\n        htmlElement.appendChild(svgContainer);\r\n        this.SVGContainer = svgContainer;\r\n    }\r\n    /**\r\n     * (Re)Initializes a resize sensor.\r\n     */\r\n    SVGContainer.prototype.initSensor = function () {\r\n        var _this = this;\r\n        if (this.resizeSensor) {\r\n            this.resizeSensor.dispose();\r\n        }\r\n        var callback = function () {\r\n            if (_this.autoResize && !_this._printing) {\r\n                _this.measure();\r\n            }\r\n        };\r\n        this.resizeSensor = new ResizeSensor(this.htmlElement, callback);\r\n        this._disposers.push(this.resizeSensor);\r\n    };\r\n    /**\r\n     * Measures size of parent HTML element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SVGContainer.prototype.measure = function () {\r\n        var width = $utils.width(this.htmlElement);\r\n        var height = $utils.height(this.htmlElement);\r\n        var container = this.container;\r\n        if (container) {\r\n            if (this.width != width || this.height != height) {\r\n                this.width = width;\r\n                this.height = height;\r\n                if (width > 0) {\r\n                    container.maxWidth = width;\r\n                }\r\n                if (height > 0) {\r\n                    container.maxHeight = height;\r\n                }\r\n                $dom.fixPixelPerfect(this.SVGContainer);\r\n            }\r\n            if (!container.maxWidth) {\r\n                container.maxWidth = 0;\r\n            }\r\n            if (!container.maxHeight) {\r\n                container.maxHeight = 0;\r\n            }\r\n            this.cssScale = 1;\r\n            this.checkTransform(this.htmlElement);\r\n        }\r\n    };\r\n    Object.defineProperty(SVGContainer.prototype, \"container\", {\r\n        /**\r\n         * @return Container\r\n         */\r\n        get: function () {\r\n            return this._container;\r\n        },\r\n        /**\r\n         * A [[Container]] element which is placed into container.\r\n         *\r\n         * @param container  Container\r\n         */\r\n        set: function (container) {\r\n            this._container = container;\r\n            this.measure();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns if this object has been already been disposed.\r\n     *\r\n     * @return Is disposed?\r\n     */\r\n    SVGContainer.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Removes this container from SVG container list in system, which\r\n     * effectively disables size change monitoring for it.\r\n     */\r\n    SVGContainer.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            $array.remove(svgContainers, this);\r\n        }\r\n        $array.each(this._disposers, function (item) {\r\n            item.dispose();\r\n        });\r\n    };\r\n    Object.defineProperty(SVGContainer.prototype, \"hideOverflow\", {\r\n        /**\r\n         * Indicates if chart container should have its style set\r\n         * to `overflow: hidden`.\r\n         *\r\n         * Normally, we don't want that, so that certain elements, such as tooltips,\r\n         * would be able to go outside chart area.\r\n         *\r\n         * There is one issue though. Some browsers ignore SVG masks and would\r\n         * display scrollbars if chart elements, that go outside chart area extend\r\n         * outside window.\r\n         *\r\n         * This is especially true for [[MapChart]], which can have its elements\r\n         * extend very widely when zoomed in. Even if those parts are not visible\r\n         * because of SVG masks, some browsers might still display window scrollbars.\r\n         *\r\n         * This is why we set this setting to `true` in [[MapChart]].\r\n         *\r\n         * Other charts use default of `false`.\r\n         */\r\n        set: function (value) {\r\n            if (value) {\r\n                this.SVGContainer.style.overflow = \"hidden\";\r\n            }\r\n            else {\r\n                this.SVGContainer.style.overflow = \"\";\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SVGContainer.prototype, \"modal\", {\r\n        /**\r\n         * ==========================================================================\r\n         * MODAL/POPUP RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns a [[Modal]] instance, associated with this chart.\r\n         * (elements top parent)\r\n         *\r\n         * Accessing modal does not make it appear. To make a modal appear, use\r\n         * `showModal()` method.\r\n         *\r\n         * @see {@link Modal} for more information about using Modal windows\r\n         * @return Modal instance\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._modal)) {\r\n                // Create new modal\r\n                this._modal = new Modal();\r\n                this._modal.container = this.SVGContainer;\r\n                // Add to disposers\r\n                this._disposers.push(this._modal);\r\n            }\r\n            return this._modal;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Opens a modal window with specific content (`text` parameter) and,\r\n     * optionally, `title`.\r\n     *\r\n     * The `text` parameter can contain HTML content.\r\n     *\r\n     * @see {@link Modal} for more information about using Modal windows\r\n     * @param text   Modal contents\r\n     * @param title  Title for the modal window\r\n     */\r\n    SVGContainer.prototype.openModal = function (text, title) {\r\n        // Hide previous modal\r\n        this.closeModal();\r\n        // Create modal\r\n        var modal = this.modal;\r\n        modal.content = text;\r\n        modal.readerTitle = title || \"\";\r\n        modal.title = title || \"\";\r\n        modal.open();\r\n        return modal;\r\n    };\r\n    /**\r\n     * Hides modal window if there is one currently open.\r\n     */\r\n    SVGContainer.prototype.closeModal = function () {\r\n        if (this._modal) {\r\n            this.modal.close();\r\n        }\r\n    };\r\n    Object.defineProperty(SVGContainer.prototype, \"popups\", {\r\n        /**\r\n         * A list of popups for this chart.\r\n         *\r\n         * @return Popups\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._popups)) {\r\n                // Create popup template\r\n                var popupTemplate = new Popup();\r\n                popupTemplate.container = this.SVGContainer;\r\n                // Create the list\r\n                this._popups = new ListTemplate(popupTemplate);\r\n                // Add to disposers\r\n                this._disposers.push(new ListDisposer(this._popups));\r\n                this._disposers.push(this._popups.template);\r\n            }\r\n            return this._popups;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates, opens, and returns a new [[Popup]] window.\r\n     *\r\n     * `text` can be any valid HTML.\r\n     *\r\n     * `title` is currently not supported.\r\n     *\r\n     * @param text   Popup contents\r\n     * @param title  Popup title\r\n     * @return Popup instance\r\n     */\r\n    SVGContainer.prototype.openPopup = function (text, title) {\r\n        var popup = this.popups.create();\r\n        popup.content = text;\r\n        if ($type.hasValue(title)) {\r\n            popup.title = title;\r\n        }\r\n        popup.open();\r\n        return popup;\r\n    };\r\n    /**\r\n     * Closes all currently open popup windows\r\n     */\r\n    SVGContainer.prototype.closeAllPopups = function () {\r\n        this.popups.each(function (popup) {\r\n            popup.close();\r\n        });\r\n    };\r\n    Object.defineProperty(SVGContainer.prototype, \"readerAlertElement\", {\r\n        /**\r\n         * ==========================================================================\r\n         * ACCESSIBILITY STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * A `<div>` element used as as placeholder to trigger screen alerts.\r\n         *\r\n         * @sunce 4.9.2\r\n         * @return Element\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._readerAlertElement)) {\r\n                // Create element\r\n                var div = document.createElement(\"div\");\r\n                div.setAttribute(\"role\", \"alert\");\r\n                div.style.zIndex = \"-100000\";\r\n                div.style.opacity = \"0\";\r\n                div.style.position = \"absolute\";\r\n                div.style.top = \"0\";\r\n                this.SVGContainer.appendChild(div);\r\n                this._readerAlertElement = div;\r\n            }\r\n            return this._readerAlertElement;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Triggers screen reader read out a message.\r\n     *\r\n     * @since 4.9.2\r\n     * @param  text  Alert text\r\n     */\r\n    SVGContainer.prototype.readerAlert = function (text) {\r\n        this.readerAlertElement.innerHTML = text;\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * OTHER STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    SVGContainer.prototype.checkTransform = function (div) {\r\n        if (window.getComputedStyle) {\r\n            if (div && div.style) {\r\n                var style = window.getComputedStyle(div, null);\r\n                if (style) {\r\n                    var matrix = style.getPropertyValue(\"-webkit-transform\") ||\r\n                        style.getPropertyValue(\"-moz-transform\") ||\r\n                        style.getPropertyValue(\"-ms-transform\") ||\r\n                        style.getPropertyValue(\"-o-transform\") ||\r\n                        style.getPropertyValue(\"transform\");\r\n                    if (matrix && matrix !== \"none\") {\r\n                        var values = matrix.split('(')[1].split(')')[0].split(',');\r\n                        var a = Number(values[0]);\r\n                        var b = Number(values[1]);\r\n                        var scale = Math.sqrt(a * a + b * b);\r\n                        if (!isNaN(scale)) {\r\n                            this.cssScale *= scale;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (div.parentNode && div.parentNode instanceof HTMLElement) {\r\n                this.checkTransform(div.parentNode);\r\n            }\r\n        }\r\n    };\r\n    return SVGContainer;\r\n}());\r\nexport { SVGContainer };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}