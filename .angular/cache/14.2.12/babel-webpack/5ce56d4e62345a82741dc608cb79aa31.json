{"ast":null,"code":"/**\r\n * ============================================================================\r\n * COMPARING FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Comparing function used for ordering.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Use localeCompare\r\n * @param a  Item 1\r\n * @param b  Item 2\r\n * @return Result\r\n */\nexport function order(a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\n/**\r\n * ============================================================================\r\n * OTHER FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Repeats a `string` number of times as set in `amount`.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Make this faster\r\n * @param string  Source string\r\n * @param amount  Number of times to repeat string\r\n * @return New string\r\n */\n\nexport function repeat(string, amount) {\n  return new Array(amount + 1).join(string);\n}\n/**\r\n * Generates a random string `characters` length.\r\n *\r\n * @param chars  Number of characters\r\n * @return Random string\r\n */\n\nexport function random(chars) {\n  var res = \"\";\n  var choice = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n  for (var i = 0; i < chars; i++) {\n    res += choice.charAt(Math.floor(Math.random() * choice.length));\n  }\n\n  return res;\n}","map":{"version":3,"names":["order","a","b","repeat","string","amount","Array","join","random","chars","res","choice","i","charAt","Math","floor","length"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/String.js"],"sourcesContent":["/**\r\n * ============================================================================\r\n * COMPARING FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Comparing function used for ordering.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Use localeCompare\r\n * @param a  Item 1\r\n * @param b  Item 2\r\n * @return Result\r\n */\r\nexport function order(a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n}\r\n/**\r\n * ============================================================================\r\n * OTHER FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Repeats a `string` number of times as set in `amount`.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Make this faster\r\n * @param string  Source string\r\n * @param amount  Number of times to repeat string\r\n * @return New string\r\n */\r\nexport function repeat(string, amount) {\r\n    return new Array(amount + 1).join(string);\r\n}\r\n/**\r\n * Generates a random string `characters` length.\r\n *\r\n * @param chars  Number of characters\r\n * @return Random string\r\n */\r\nexport function random(chars) {\r\n    var res = \"\";\r\n    var choice = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    for (var i = 0; i < chars; i++) {\r\n        res += choice.charAt(Math.floor(Math.random() * choice.length));\r\n    }\r\n    return res;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,KAAT,CAAeC,CAAf,EAAkBC,CAAlB,EAAqB;EACxB,IAAID,CAAC,KAAKC,CAAV,EAAa;IACT,OAAO,CAAP;EACH,CAFD,MAGK,IAAID,CAAC,GAAGC,CAAR,EAAW;IACZ,OAAO,CAAC,CAAR;EACH,CAFI,MAGA;IACD,OAAO,CAAP;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,MAAhB,EAAwBC,MAAxB,EAAgC;EACnC,OAAO,IAAIC,KAAJ,CAAUD,MAAM,GAAG,CAAnB,EAAsBE,IAAtB,CAA2BH,MAA3B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,MAAT,CAAgBC,KAAhB,EAAuB;EAC1B,IAAIC,GAAG,GAAG,EAAV;EACA,IAAIC,MAAM,GAAG,gEAAb;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAApB,EAA2BG,CAAC,EAA5B,EAAgC;IAC5BF,GAAG,IAAIC,MAAM,CAACE,MAAP,CAAcC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACN,MAAL,KAAgBG,MAAM,CAACK,MAAlC,CAAd,CAAP;EACH;;EACD,OAAON,GAAP;AACH"},"metadata":{},"sourceType":"module"}