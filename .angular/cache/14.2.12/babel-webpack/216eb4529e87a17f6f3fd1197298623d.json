{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisRendererY } from \"./AxisRendererY\";\nimport { CategoryAxis } from \"./CategoryAxis\";\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { Percent, percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { AxisBullet } from \"./AxisBullet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A renderer for radial axis.\r\n */\n\nvar AxisRendererRadial =\n/** @class */\nfunction (_super) {\n  __extends(AxisRendererRadial, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRendererRadial() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A related chart.\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    /**\r\n     * @ignore\r\n     */\n\n    _this.pixelRadiusReal = 0;\n    _this.className = \"AxisRendererRadial\";\n    _this.isMeasured = false;\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    _this.minGridDistance = 30;\n    _this.gridType = \"circles\";\n    _this.axisAngle = -90;\n    _this.isMeasured = false;\n    _this.layout = \"none\";\n    _this.radius = percent(100);\n    _this.line.strokeOpacity = 0;\n    _this.labels.template.horizontalCenter = \"middle\";\n\n    _this._disposers.push(_this._chart);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Validates Axis renderer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererRadial.prototype.validate = function () {\n    // so that radius would be updated\n    if (this.chart && this.chart.invalid) {\n      this.chart.validate();\n    }\n\n    _super.prototype.validate.call(this);\n  };\n\n  Object.defineProperty(AxisRendererRadial.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      return this.pixelRadius - this.pixelInnerRadius;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, false, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"pixelRadius\", {\n    /**\r\n     * Outer radius in pixels.\r\n     *\r\n     * @return Outer radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      var chart = this.chart;\n      var innerRadius = this.getPropertyValue(\"innerRadius\");\n\n      if (chart) {\n        if (!$type.hasValue(innerRadius)) {\n          innerRadius = chart.innerRadius;\n\n          if (innerRadius instanceof Percent && chart) {\n            innerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100);\n          }\n        } else {\n          if (innerRadius instanceof Percent && chart) {\n            var mr = chart.mr;\n            var value = innerRadius.value;\n            value = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\n            innerRadius = percent(value * 100);\n          }\n        }\n      }\n\n      return innerRadius;\n    },\n\n    /**\r\n     * Inner radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * Inner radius in pixels.\r\n     *\r\n     * @return Inner radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n\n  AxisRendererRadial.prototype.positionToPoint = function (position, position2) {\n    var radius = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\n    return {\n      x: radius * $math.cos(this.axisAngle),\n      y: radius * $math.sin(this.axisAngle)\n    };\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererRadial.prototype.updateAxisLine = function () {\n    this.line.path = $path.moveTo({\n      x: this.pixelInnerRadius * $math.cos(this.axisAngle),\n      y: this.pixelInnerRadius * $math.sin(this.axisAngle)\n    }) + $path.lineTo({\n      x: this.pixelRadius * $math.cos(this.axisAngle),\n      y: this.pixelRadius * $math.sin(this.axisAngle)\n    });\n    var title = this.axis.title;\n    title.valign = \"none\";\n    title.horizontalCenter = \"middle\";\n    title.verticalCenter = \"bottom\";\n    title.y = -this.axisLength / 2;\n    var rotation = 90;\n\n    if (this.opposite) {\n      if (!this.inside) {\n        rotation = -90;\n      }\n    } else {\n      if (this.inside) {\n        rotation = -90;\n      }\n    }\n\n    title.rotation = rotation;\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererRadial.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n    var path;\n    var radius = $math.getDistance(point);\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    var chart = this.chart;\n\n    if ($type.isNumber(radius) && grid.element && chart) {\n      var xAxis = chart.xAxes.getIndex(0);\n      var count = 0;\n      var series = chart.series.getIndex(0);\n\n      if (series) {\n        count = series.dataItems.length;\n      } // polygons are only possible if x axis is present\n      // @todo: review this\n\n\n      if (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\n        var gridLocation = xAxis.renderer.grid.template.location;\n        var angle = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\n        path = $path.moveTo({\n          x: radius * $math.cos(angle),\n          y: radius * $math.sin(angle)\n        });\n\n        for (var i = 1; i < count; i++) {\n          angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\n          path += $path.lineTo({\n            x: radius * $math.cos(angle),\n            y: radius * $math.sin(angle)\n          });\n        }\n\n        angle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\n        path += $path.lineTo({\n          x: radius * $math.cos(angle),\n          y: radius * $math.sin(angle)\n        });\n      } else {\n        path = $path.moveTo({\n          x: radius * $math.cos(startAngle),\n          y: radius * $math.sin(startAngle)\n        }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\n      }\n\n      grid.path = path;\n    }\n\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n\n\n  AxisRendererRadial.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    this.positionItem(label, point);\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererRadial.prototype.updateBaseGridElement = function () {// @todo? zero grid for radar chart, is it needed?\n  };\n  /**\r\n   * Checks if point is within bounds of a container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param point Point coordinates\r\n   * @return Fits?\r\n   */\n\n\n  AxisRendererRadial.prototype.fitsToBounds = function (point) {\n    return true;\n  };\n\n  Object.defineProperty(AxisRendererRadial.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * Start angle of the axis in degrees. (0-360)\r\n     *\r\n     * @param value  Start angle\r\n     */\n    set: function (value) {\n      // do not normalize angle here!\n      if (this.setPropertyValue(\"startAngle\", value)) {\n        this.invalidateAxisItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * End angle of the axis in degrees. (0-360)\r\n     *\r\n     * @param value  End angle\r\n     */\n    set: function (value) {\n      // do not normalize angel here!\n      if (this.setPropertyValue(\"endAngle\", value)) {\n        this.invalidateAxisItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"axisAngle\", {\n    /**\r\n     * @return Axis angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"axisAngle\"); //return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\n    },\n\n    /**\r\n     * Angle of the radial axis in degrees. (0-360)\r\n     *\r\n     * @param value  Axis angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\n      this.invalidateAxisItems();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"gridType\", {\n    /**\r\n     * Grid type\r\n     */\n    get: function () {\n      var axis = this.chart.xAxes.getIndex(0);\n\n      if (axis instanceof CategoryAxis) {\n        return this.getPropertyValue(\"gridType\");\n      } else {\n        return \"circles\";\n      }\n    },\n    // polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\n\n    /**\r\n     * Grid type for radial axis.\r\n     *\r\n     * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n     * straight lines (\"polygons\").\r\n     *\r\n     * @default \"circles\"\r\n     * @param value  Grid type\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"gridType\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n\n  AxisRendererRadial.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    var pixelInnerRadius = this.pixelInnerRadius;\n    var pixelRadius = this.axisLength + pixelInnerRadius;\n    var innerRadius = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\n    var radius = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius); //let angleCount: number = this.angleCount;\n\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    var arc = endAngle - startAngle;\n    var path;\n    var chart = this.chart;\n    var xAxis = chart.xAxes.getIndex(0);\n    var series = chart.series.getIndex(0);\n    var count = 0;\n\n    if (series) {\n      count = series.dataItems.length;\n    } // polygons are only possible if x axis is present\n    // @todo: review this\n\n\n    if (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\n      var gridLocation = xAxis.renderer.grid.template.location;\n      var angle = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\n      path = $path.moveTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      });\n\n      for (var i = 1; i < count; i++) {\n        angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\n        path += $path.lineTo({\n          x: radius * $math.cos(angle),\n          y: radius * $math.sin(angle)\n        });\n      }\n\n      angle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\n      path += $path.lineTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      });\n      path += $path.moveTo({\n        x: innerRadius * $math.cos(angle),\n        y: innerRadius * $math.sin(angle)\n      });\n\n      for (var i = count - 1; i >= 0; i--) {\n        angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\n        path += $path.lineTo({\n          x: innerRadius * $math.cos(angle),\n          y: innerRadius * $math.sin(angle)\n        });\n      }\n    } else {\n      path = $path.arc(startAngle, arc, radius, innerRadius);\n    }\n\n    return path;\n  };\n  /**\r\n   * Updates and positions an axis break element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Break element\r\n   */\n\n\n  AxisRendererRadial.prototype.updateBreakElement = function (axisBreak) {\n    // @todo: someday we might need axis break when gridType is polygons\n    var startLine = axisBreak.startLine;\n    var endLine = axisBreak.endLine;\n    var fillShape = axisBreak.fillShape;\n    var startPoint = axisBreak.startPoint;\n    var endPoint = axisBreak.endPoint;\n    startLine.radius = Math.abs(startPoint.y);\n    endLine.radius = Math.abs(endPoint.y);\n    fillShape.radius = Math.abs(endPoint.y);\n    fillShape.innerRadius = Math.abs(startPoint.y);\n  };\n  /**\r\n   * Creates visual elements for and axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Axis break\r\n   */\n\n\n  AxisRendererRadial.prototype.createBreakSprites = function (axisBreak) {\n    axisBreak.startLine = new WavedCircle();\n    axisBreak.endLine = new WavedCircle();\n    axisBreak.fillShape = new WavedCircle();\n  };\n  /**\r\n   * Updates some of the Axis tooltip's visual properties, related to\r\n   * rendering of the Axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererRadial.prototype.updateTooltip = function () {\n    var axis = this.axis;\n\n    if (axis) {\n      var bigNum = 4000;\n      var bbx = -4000;\n      var bby = -4000;\n      var bbw = bigNum * 2;\n      var bbh = bigNum * 2;\n      var axisAngle = this.axisAngle;\n\n      if (axisAngle < 0) {\n        axisAngle += 360;\n      }\n\n      var tooltipOrientation = \"vertical\";\n\n      if (axisAngle > 45 && axisAngle < 135 || axisAngle > 225 && axisAngle < 315) {\n        tooltipOrientation = \"horizontal\";\n      }\n\n      this.axis.updateTooltip(tooltipOrientation, {\n        x: bbx,\n        y: bby,\n        width: bbw,\n        height: bbh\n      });\n    }\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick      Tick element\r\n   * @param position  Position\r\n   */\n\n\n  AxisRendererRadial.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n\n    if (tick.element) {\n      var angle = $math.normalizeAngle(this.axisAngle + 90);\n\n      if (angle / 90 != Math.round(angle / 90)) {\n        tick.pixelPerfect = false;\n      } else {\n        tick.pixelPerfect = true;\n      }\n\n      var tickLength = -tick.length;\n\n      if (tick.inside) {\n        tickLength *= -1;\n      }\n\n      tick.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: tickLength * $math.cos(angle),\n        y: tickLength * $math.sin(angle)\n      });\n    }\n\n    this.positionItem(tick, point);\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions axis bullet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererRadial.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n  /**\r\n   * Converts a position on the axis to a coordinate in pixels.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (0-1)\r\n   * @return Coordinate (px)\r\n   */\n\n\n  AxisRendererRadial.prototype.positionToCoordinate = function (position) {\n    var coordinate;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n    var innerRadius = this.pixelInnerRadius;\n\n    if (axis.renderer.inversed) {\n      coordinate = (axis.end - position) * axisFullLength + innerRadius;\n    } else {\n      coordinate = (position - axis.start) * axisFullLength + innerRadius;\n    }\n\n    return $math.round(coordinate, 1);\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRendererRadial.prototype.pointToPosition = function (point) {\n    var coordinate = $math.getDistance(point) - this.pixelInnerRadius;\n    return this.coordinateToPosition(coordinate);\n  };\n\n  Object.defineProperty(AxisRendererRadial.prototype, \"chart\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n\n    /**\r\n     * A chart, associated with the Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Chart\r\n     */\n    set: function (value) {\n      this._chart.set(value, null);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisRendererRadial;\n}(AxisRendererY);\n\nexport { AxisRendererRadial };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;","map":{"version":3,"names":["__extends","AxisRendererY","CategoryAxis","WavedCircle","MutableValueDisposer","Percent","percent","registry","$math","$path","$utils","$type","AxisBullet","AxisRendererRadial","_super","_this","call","_chart","pixelRadiusReal","className","isMeasured","startAngle","endAngle","minGridDistance","gridType","axisAngle","layout","radius","line","strokeOpacity","labels","template","horizontalCenter","_disposers","push","applyTheme","prototype","validate","chart","invalid","Object","defineProperty","get","pixelRadius","pixelInnerRadius","enumerable","configurable","getPropertyValue","set","value","setPercentProperty","relativeRadiusToValue","innerRadius","hasValue","innerRadiusModifyer","mr","Math","max","min","plotContainer","innerHeight","innerWidth","positionToPoint","position","position2","fitToRange","positionToCoordinate","Infinity","x","cos","y","sin","updateAxisLine","path","moveTo","lineTo","title","axis","valign","verticalCenter","axisLength","rotation","opposite","inside","updateGridElement","grid","endPosition","location","point","getDistance","isNumber","element","xAxis","xAxes","getIndex","count","series","dataItems","length","gridLocation","renderer","angle","getAngle","i","cellEndLocation","arcTo","toggleVisibility","updateLabelElement","label","positionItem","minLabelPosition","maxLabelPosition","updateBaseGridElement","fitsToBounds","setPropertyValue","invalidateAxisItems","normalizeAngle","getPositionRangePath","startPosition","arc","updateBreakElement","axisBreak","startLine","endLine","fillShape","startPoint","endPoint","abs","createBreakSprites","updateTooltip","bigNum","bbx","bby","bbw","bbh","tooltipOrientation","width","height","updateTickElement","tick","round","pixelPerfect","tickLength","updateBullet","bullet","coordinate","axisFullLength","inversed","end","start","pointToPosition","coordinateToPosition","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererRadial.js"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nvar AxisRendererRadial = /** @class */ (function (_super) {\r\n    __extends(AxisRendererRadial, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param axis Related axis\r\n     */\r\n    function AxisRendererRadial() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A related chart.\r\n         */\r\n        _this._chart = new MutableValueDisposer();\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.pixelRadiusReal = 0;\r\n        _this.className = \"AxisRendererRadial\";\r\n        _this.isMeasured = false;\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        _this.minGridDistance = 30;\r\n        _this.gridType = \"circles\";\r\n        _this.axisAngle = -90;\r\n        _this.isMeasured = false;\r\n        _this.layout = \"none\";\r\n        _this.radius = percent(100);\r\n        _this.line.strokeOpacity = 0;\r\n        _this.labels.template.horizontalCenter = \"middle\";\r\n        _this._disposers.push(_this._chart);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Validates Axis renderer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererRadial.prototype.validate = function () {\r\n        // so that radius would be updated\r\n        if (this.chart && this.chart.invalid) {\r\n            this.chart.validate();\r\n        }\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"axisLength\", {\r\n        /**\r\n         * Returns actual length of the Axis, in pixels.\r\n         *\r\n         * @return Length (px)\r\n         */\r\n        get: function () {\r\n            return this.pixelRadius - this.pixelInnerRadius;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"radius\", {\r\n        /**\r\n         * @return Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the axis.\r\n         *\r\n         * Can be absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"pixelRadius\", {\r\n        /**\r\n         * Outer radius in pixels.\r\n         *\r\n         * @return Outer radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            var chart = this.chart;\r\n            var innerRadius = this.getPropertyValue(\"innerRadius\");\r\n            if (chart) {\r\n                if (!$type.hasValue(innerRadius)) {\r\n                    innerRadius = chart.innerRadius;\r\n                    if (innerRadius instanceof Percent && chart) {\r\n                        innerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100);\r\n                    }\r\n                }\r\n                else {\r\n                    if (innerRadius instanceof Percent && chart) {\r\n                        var mr = chart.mr;\r\n                        var value = innerRadius.value;\r\n                        value = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n                        innerRadius = percent(value * 100);\r\n                    }\r\n                }\r\n            }\r\n            return innerRadius;\r\n        },\r\n        /**\r\n         * Inner radius of the axis.\r\n         *\r\n         * Can be absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * Inner radius in pixels.\r\n         *\r\n         * @return Inner radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position on axis to point coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @param position2  Position (0-1) Position on the second axis\r\n     * @return Point\r\n     */\r\n    AxisRendererRadial.prototype.positionToPoint = function (position, position2) {\r\n        var radius = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n        return { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n    };\r\n    /**\r\n     * Updates and positions the axis line element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererRadial.prototype.updateAxisLine = function () {\r\n        this.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n        var title = this.axis.title;\r\n        title.valign = \"none\";\r\n        title.horizontalCenter = \"middle\";\r\n        title.verticalCenter = \"bottom\";\r\n        title.y = -this.axisLength / 2;\r\n        var rotation = 90;\r\n        if (this.opposite) {\r\n            if (!this.inside) {\r\n                rotation = -90;\r\n            }\r\n        }\r\n        else {\r\n            if (this.inside) {\r\n                rotation = -90;\r\n            }\r\n        }\r\n        title.rotation = rotation;\r\n    };\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param grid         Grid element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererRadial.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        var path;\r\n        var radius = $math.getDistance(point);\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        var chart = this.chart;\r\n        if ($type.isNumber(radius) && grid.element && chart) {\r\n            var xAxis = chart.xAxes.getIndex(0);\r\n            var count = 0;\r\n            var series = chart.series.getIndex(0);\r\n            if (series) {\r\n                count = series.dataItems.length;\r\n            }\r\n            // polygons are only possible if x axis is present\r\n            // @todo: review this\r\n            if (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n                var gridLocation = xAxis.renderer.grid.template.location;\r\n                var angle = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n                path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n                for (var i = 1; i < count; i++) {\r\n                    angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n                    path += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n                }\r\n                angle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n                path += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n            }\r\n            else {\r\n                path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n            }\r\n            grid.path = path;\r\n        }\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a label element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param label        Label element\r\n     * @param position     Starting position\r\n     * @param endPosition  Ending position\r\n     */\r\n    AxisRendererRadial.prototype.updateLabelElement = function (label, position, endPosition, location) {\r\n        if (!$type.hasValue(location)) {\r\n            location = label.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        var point = this.positionToPoint(position);\r\n        this.positionItem(label, point);\r\n        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n    };\r\n    /**\r\n     * Updates and positions the base grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererRadial.prototype.updateBaseGridElement = function () {\r\n        // @todo? zero grid for radar chart, is it needed?\r\n    };\r\n    /**\r\n     * Checks if point is within bounds of a container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param point Point coordinates\r\n     * @return Fits?\r\n     */\r\n    AxisRendererRadial.prototype.fitsToBounds = function (point) {\r\n        return true;\r\n    };\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Start angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Start angle of the axis in degrees. (0-360)\r\n         *\r\n         * @param value  Start angle\r\n         */\r\n        set: function (value) {\r\n            // do not normalize angle here!\r\n            if (this.setPropertyValue(\"startAngle\", value)) {\r\n                this.invalidateAxisItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"endAngle\", {\r\n        /**\r\n         * @return End angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * End angle of the axis in degrees. (0-360)\r\n         *\r\n         * @param value  End angle\r\n         */\r\n        set: function (value) {\r\n            // do not normalize angel here!\r\n            if (this.setPropertyValue(\"endAngle\", value)) {\r\n                this.invalidateAxisItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"axisAngle\", {\r\n        /**\r\n         * @return Axis angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"axisAngle\");\r\n            //return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n        },\r\n        /**\r\n         * Angle of the radial axis in degrees. (0-360)\r\n         *\r\n         * @param value  Axis angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n            this.invalidateAxisItems();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"gridType\", {\r\n        /**\r\n         * Grid type\r\n         */\r\n        get: function () {\r\n            var axis = this.chart.xAxes.getIndex(0);\r\n            if (axis instanceof CategoryAxis) {\r\n                return this.getPropertyValue(\"gridType\");\r\n            }\r\n            else {\r\n                return \"circles\";\r\n            }\r\n        },\r\n        // polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n        /**\r\n         * Grid type for radial axis.\r\n         *\r\n         * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n         * straight lines (\"polygons\").\r\n         *\r\n         * @default \"circles\"\r\n         * @param value  Grid type\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"gridType\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [getPositionRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param startPosition  Starting position\r\n     * @param endPosition    End position\r\n     * @return SVG path\r\n     */\r\n    AxisRendererRadial.prototype.getPositionRangePath = function (startPosition, endPosition) {\r\n        var pixelInnerRadius = this.pixelInnerRadius;\r\n        var pixelRadius = this.axisLength + pixelInnerRadius;\r\n        var innerRadius = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n        var radius = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n        //let angleCount: number = this.angleCount;\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        var arc = endAngle - startAngle;\r\n        var path;\r\n        var chart = this.chart;\r\n        var xAxis = chart.xAxes.getIndex(0);\r\n        var series = chart.series.getIndex(0);\r\n        var count = 0;\r\n        if (series) {\r\n            count = series.dataItems.length;\r\n        }\r\n        // polygons are only possible if x axis is present\r\n        // @todo: review this\r\n        if (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n            var gridLocation = xAxis.renderer.grid.template.location;\r\n            var angle = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n            path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n            for (var i = 1; i < count; i++) {\r\n                angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n                path += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n            }\r\n            angle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n            path += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n            path += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n            for (var i = count - 1; i >= 0; i--) {\r\n                angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n                path += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n            }\r\n        }\r\n        else {\r\n            path = $path.arc(startAngle, arc, radius, innerRadius);\r\n        }\r\n        return path;\r\n    };\r\n    /**\r\n     * Updates and positions an axis break element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axisBreak Break element\r\n     */\r\n    AxisRendererRadial.prototype.updateBreakElement = function (axisBreak) {\r\n        // @todo: someday we might need axis break when gridType is polygons\r\n        var startLine = axisBreak.startLine;\r\n        var endLine = axisBreak.endLine;\r\n        var fillShape = axisBreak.fillShape;\r\n        var startPoint = axisBreak.startPoint;\r\n        var endPoint = axisBreak.endPoint;\r\n        startLine.radius = Math.abs(startPoint.y);\r\n        endLine.radius = Math.abs(endPoint.y);\r\n        fillShape.radius = Math.abs(endPoint.y);\r\n        fillShape.innerRadius = Math.abs(startPoint.y);\r\n    };\r\n    /**\r\n     * Creates visual elements for and axis break.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axisBreak Axis break\r\n     */\r\n    AxisRendererRadial.prototype.createBreakSprites = function (axisBreak) {\r\n        axisBreak.startLine = new WavedCircle();\r\n        axisBreak.endLine = new WavedCircle();\r\n        axisBreak.fillShape = new WavedCircle();\r\n    };\r\n    /**\r\n     * Updates some of the Axis tooltip's visual properties, related to\r\n     * rendering of the Axis.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererRadial.prototype.updateTooltip = function () {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var bigNum = 4000;\r\n            var bbx = -4000;\r\n            var bby = -4000;\r\n            var bbw = bigNum * 2;\r\n            var bbh = bigNum * 2;\r\n            var axisAngle = this.axisAngle;\r\n            if (axisAngle < 0) {\r\n                axisAngle += 360;\r\n            }\r\n            var tooltipOrientation = \"vertical\";\r\n            if ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n                tooltipOrientation = \"horizontal\";\r\n            }\r\n            this.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n        }\r\n    };\r\n    /**\r\n     * Updates and positions a tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param tick      Tick element\r\n     * @param position  Position\r\n     */\r\n    AxisRendererRadial.prototype.updateTickElement = function (tick, position, endPosition) {\r\n        position = position + (endPosition - position) * tick.location;\r\n        var point = this.positionToPoint(position);\r\n        if (tick.element) {\r\n            var angle = $math.normalizeAngle(this.axisAngle + 90);\r\n            if (angle / 90 != Math.round(angle / 90)) {\r\n                tick.pixelPerfect = false;\r\n            }\r\n            else {\r\n                tick.pixelPerfect = true;\r\n            }\r\n            var tickLength = -tick.length;\r\n            if (tick.inside) {\r\n                tickLength *= -1;\r\n            }\r\n            tick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n        }\r\n        this.positionItem(tick, point);\r\n        this.toggleVisibility(tick, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions axis bullet.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param bullet       AxisBullet element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererRadial.prototype.updateBullet = function (bullet, position, endPosition) {\r\n        var location = 0.5;\r\n        if (bullet instanceof AxisBullet) {\r\n            location = bullet.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        var point = this.positionToPoint(position);\r\n        this.positionItem(bullet, point);\r\n        this.toggleVisibility(bullet, position, 0, 1);\r\n    };\r\n    /**\r\n     * Converts a position on the axis to a coordinate in pixels.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param position  Position (0-1)\r\n     * @return Coordinate (px)\r\n     */\r\n    AxisRendererRadial.prototype.positionToCoordinate = function (position) {\r\n        var coordinate;\r\n        var axis = this.axis;\r\n        var axisFullLength = axis.axisFullLength;\r\n        var innerRadius = this.pixelInnerRadius;\r\n        if (axis.renderer.inversed) {\r\n            coordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n        }\r\n        else {\r\n            coordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n        }\r\n        return $math.round(coordinate, 1);\r\n    };\r\n    /**\r\n     * Converts a point at specific coordinates to a relative position (0-1)\r\n     * on the axis.\r\n     *\r\n     * @param point  Point\r\n     * @return Position (0-1)\r\n     */\r\n    AxisRendererRadial.prototype.pointToPosition = function (point) {\r\n        var coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n        return this.coordinateToPosition(coordinate);\r\n    };\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"chart\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Chart\r\n         */\r\n        get: function () {\r\n            return this._chart.get();\r\n        },\r\n        /**\r\n         * A chart, associated with the Axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Chart\r\n         */\r\n        set: function (value) {\r\n            this._chart.set(value, null);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return AxisRendererRadial;\r\n}(AxisRendererY));\r\nexport { AxisRendererRadial };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}