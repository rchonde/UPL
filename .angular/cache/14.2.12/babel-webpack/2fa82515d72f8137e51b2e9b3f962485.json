{"ast":null,"code":"/**\r\n * Module for a multi-part arched line.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Polyline } from \"./Polyline\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a multi-part arched line.\r\n *\r\n * @see {@link IPolyarcEvents} for a list of available events\r\n * @see {@link IPolyarcAdapters} for a list of available Adapters\r\n */\n\nvar Polyarc =\n/** @class */\nfunction (_super) {\n  __extends(Polyarc, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Polyarc() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Polyarc\";\n    _this.controlPointDistance = 0.5;\n    _this.controlPointPosition = 0.5;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Creats and adds an SVG path for the arc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Polyarc.prototype.makePath = function () {\n    this._distance = 0;\n    var segments = this.segments;\n\n    if (segments && segments.length > 0) {\n      var path = \"\";\n      this._realSegments = [];\n\n      for (var i = 0, len = segments.length; i < len; i++) {\n        var points = segments[i];\n        var realPoints = [];\n\n        this._realSegments.push(realPoints);\n\n        if (points.length > 0) {\n          path += $path.moveTo(points[0]);\n\n          for (var p = 1; p < points.length; p++) {\n            var pointA = points[p - 1];\n            var pointB = points[p];\n            var distanceAB = $math.getDistance(pointB, pointA);\n            var cpDistance = distanceAB * this.controlPointDistance;\n            var controlPointPosition = this.controlPointPosition;\n            var angle = -$math.getAngle(pointA, pointB);\n            var cpx = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * $math.sin(angle);\n            var cpy = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * $math.cos(angle);\n            var controlPoint1 = {\n              x: cpx,\n              y: cpy\n            };\n            var cpx2 = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * $math.sin(angle);\n            var cpy2 = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * $math.cos(angle);\n            var controlPoint2 = {\n              x: cpx2,\n              y: cpy2\n            };\n            path += $path.cubicCurveTo(pointB, controlPoint1, controlPoint2); // we add a lot of points in order to get the position/angle later\n\n            var stepCount = Math.ceil(distanceAB);\n            var prevPoint = pointA;\n\n            if (stepCount > 0) {\n              for (var i_1 = 0; i_1 <= stepCount; i_1++) {\n                var point = $math.getPointOnCubicCurve(pointA, pointB, controlPoint1, controlPoint2, i_1 / stepCount);\n                realPoints.push(point);\n                this._distance += $math.getDistance(prevPoint, point);\n                prevPoint = point;\n              }\n            } else {\n              realPoints.push(pointA);\n            }\n          }\n        }\n      }\n\n      this.path = path;\n    }\n  };\n\n  Object.defineProperty(Polyarc.prototype, \"controlPointPosition\", {\n    /**\r\n     * @return Position (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"controlPointPosition\");\n    },\n\n    /**\r\n     * Relative position along the line the control point is. (0-1)\r\n     *\r\n     * @default 0.5\r\n     * @param value  Position (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"controlPointPosition\", value);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Polyarc.prototype, \"controlPointDistance\", {\n    /**\r\n     * @return Distance (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"controlPointDistance\");\n    },\n\n    /**\r\n     * Relative distance of the control point. (0-1)\r\n     *\r\n     * Default is half the length of the line. (0.5)\r\n     *\r\n     * @default 0.5\r\n     * @param value  Distance (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"controlPointDistance\", value);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Polyarc;\n}(Polyline);\n\nexport { Polyarc };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Polyarc\"] = Polyarc;","map":{"version":3,"names":["__extends","Polyline","registry","$math","$path","Polyarc","_super","_this","call","className","controlPointDistance","controlPointPosition","applyTheme","prototype","makePath","_distance","segments","length","path","_realSegments","i","len","points","realPoints","push","moveTo","p","pointA","pointB","distanceAB","getDistance","cpDistance","angle","getAngle","cpx","x","sin","cpy","y","cos","controlPoint1","cpx2","cpy2","controlPoint2","cubicCurveTo","stepCount","Math","ceil","prevPoint","i_1","point","getPointOnCubicCurve","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","enumerable","configurable","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/elements/Polyarc.js"],"sourcesContent":["/**\r\n * Module for a multi-part arched line.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Polyline } from \"./Polyline\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a multi-part arched line.\r\n *\r\n * @see {@link IPolyarcEvents} for a list of available events\r\n * @see {@link IPolyarcAdapters} for a list of available Adapters\r\n */\r\nvar Polyarc = /** @class */ (function (_super) {\r\n    __extends(Polyarc, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Polyarc() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Polyarc\";\r\n        _this.controlPointDistance = 0.5;\r\n        _this.controlPointPosition = 0.5;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creats and adds an SVG path for the arc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Polyarc.prototype.makePath = function () {\r\n        this._distance = 0;\r\n        var segments = this.segments;\r\n        if (segments && segments.length > 0) {\r\n            var path = \"\";\r\n            this._realSegments = [];\r\n            for (var i = 0, len = segments.length; i < len; i++) {\r\n                var points = segments[i];\r\n                var realPoints = [];\r\n                this._realSegments.push(realPoints);\r\n                if (points.length > 0) {\r\n                    path += $path.moveTo(points[0]);\r\n                    for (var p = 1; p < points.length; p++) {\r\n                        var pointA = points[p - 1];\r\n                        var pointB = points[p];\r\n                        var distanceAB = $math.getDistance(pointB, pointA);\r\n                        var cpDistance = distanceAB * this.controlPointDistance;\r\n                        var controlPointPosition = this.controlPointPosition;\r\n                        var angle = -$math.getAngle(pointA, pointB);\r\n                        var cpx = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * $math.sin(angle);\r\n                        var cpy = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * $math.cos(angle);\r\n                        var controlPoint1 = { x: cpx, y: cpy };\r\n                        var cpx2 = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * $math.sin(angle);\r\n                        var cpy2 = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * $math.cos(angle);\r\n                        var controlPoint2 = { x: cpx2, y: cpy2 };\r\n                        path += $path.cubicCurveTo(pointB, controlPoint1, controlPoint2);\r\n                        // we add a lot of points in order to get the position/angle later\r\n                        var stepCount = Math.ceil(distanceAB);\r\n                        var prevPoint = pointA;\r\n                        if (stepCount > 0) {\r\n                            for (var i_1 = 0; i_1 <= stepCount; i_1++) {\r\n                                var point = $math.getPointOnCubicCurve(pointA, pointB, controlPoint1, controlPoint2, i_1 / stepCount);\r\n                                realPoints.push(point);\r\n                                this._distance += $math.getDistance(prevPoint, point);\r\n                                prevPoint = point;\r\n                            }\r\n                        }\r\n                        else {\r\n                            realPoints.push(pointA);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.path = path;\r\n        }\r\n    };\r\n    Object.defineProperty(Polyarc.prototype, \"controlPointPosition\", {\r\n        /**\r\n         * @return Position (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"controlPointPosition\");\r\n        },\r\n        /**\r\n         * Relative position along the line the control point is. (0-1)\r\n         *\r\n         * @default 0.5\r\n         * @param value  Position (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"controlPointPosition\", value);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Polyarc.prototype, \"controlPointDistance\", {\r\n        /**\r\n         * @return Distance (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"controlPointDistance\");\r\n        },\r\n        /**\r\n         * Relative distance of the control point. (0-1)\r\n         *\r\n         * Default is half the length of the line. (0.5)\r\n         *\r\n         * @default 0.5\r\n         * @param value  Distance (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"controlPointDistance\", value);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Polyarc;\r\n}(Polyline));\r\nexport { Polyarc };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyarc\"] = Polyarc;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}