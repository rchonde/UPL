{"ast":null,"code":"/**\r\n * Functionality for adding images in SVG tree.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $dom from \"../utils/DOM\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to add `<image>` elements to SVG.\r\n *\r\n * @see {@link IImageEvents} for a list of available events\r\n * @see {@link IImageAdapters} for a list of available Adapters\r\n */\n\nvar Image =\n/** @class */\nfunction (_super) {\n  __extends(Image, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Image() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Image\";\n    _this.element = _this.paper.add(\"image\");\n\n    _this.applyTheme();\n\n    _this.width = 50;\n    _this.height = 50;\n    return _this;\n  }\n  /**\r\n   * Draws an `<image>` element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Image.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (this.href) {\n      var width = this.innerWidth;\n      var height = this.innerHeight;\n\n      if ($type.isNumber(this.widthRatio)) {\n        width = height * this.widthRatio;\n        this.width = width;\n      }\n\n      if ($type.isNumber(this.heightRatio)) {\n        height = width * this.heightRatio;\n        this.height = height;\n      }\n\n      this.element.attr({\n        \"width\": width,\n        \"height\": height\n      });\n      this.element.attrNS($dom.XLINK, \"xlink:href\", this.href);\n    }\n  };\n\n  Object.defineProperty(Image.prototype, \"href\", {\n    /**\r\n     * @return Image URI\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"href\");\n    },\n\n    /**\r\n     * An image URI.\r\n     *\r\n     * @param value  Image URI\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"href\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Image.prototype, \"widthRatio\", {\n    /**\r\n     * @return Ratio\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"widthRatio\");\n    },\n\n    /**\r\n     * Sets image `width` relatively to its `height`.\r\n     *\r\n     * If image's `height = 100` and `widthRatio = 0.5` the actual width will be\r\n     * `50`.\r\n     *\r\n     * @param value  Ratio\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"widthRatio\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Image.prototype, \"heightRatio\", {\n    /**\r\n     * @return Ratio\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"heightRatio\");\n    },\n\n    /**\r\n     * Sets image `height` relatively to its `width`.\r\n     *\r\n     * If image's `width = 100` and `heightRatio = 0.5` the actual height will be\r\n     * `50`.\r\n     *\r\n     * @param value  Ratio\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"heightRatio\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Image.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      return {\n        x: 0,\n        y: 0,\n        width: this.pixelWidth,\n        height: this.pixelHeight\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Image;\n}(Sprite);\n\nexport { Image };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Image\"] = Image;","map":{"version":3,"names":["__extends","Sprite","registry","$dom","$type","Image","_super","_this","call","className","element","paper","add","applyTheme","width","height","prototype","draw","href","innerWidth","innerHeight","isNumber","widthRatio","heightRatio","attr","attrNS","XLINK","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","enumerable","configurable","x","y","pixelWidth","pixelHeight","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/elements/Image.js"],"sourcesContent":["/**\r\n * Functionality for adding images in SVG tree.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to add `<image>` elements to SVG.\r\n *\r\n * @see {@link IImageEvents} for a list of available events\r\n * @see {@link IImageAdapters} for a list of available Adapters\r\n */\r\nvar Image = /** @class */ (function (_super) {\r\n    __extends(Image, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Image() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Image\";\r\n        _this.element = _this.paper.add(\"image\");\r\n        _this.applyTheme();\r\n        _this.width = 50;\r\n        _this.height = 50;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws an `<image>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Image.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this.href) {\r\n            var width = this.innerWidth;\r\n            var height = this.innerHeight;\r\n            if ($type.isNumber(this.widthRatio)) {\r\n                width = height * this.widthRatio;\r\n                this.width = width;\r\n            }\r\n            if ($type.isNumber(this.heightRatio)) {\r\n                height = width * this.heightRatio;\r\n                this.height = height;\r\n            }\r\n            this.element.attr({\r\n                \"width\": width,\r\n                \"height\": height\r\n            });\r\n            this.element.attrNS($dom.XLINK, \"xlink:href\", this.href);\r\n        }\r\n    };\r\n    Object.defineProperty(Image.prototype, \"href\", {\r\n        /**\r\n         * @return Image URI\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"href\");\r\n        },\r\n        /**\r\n         * An image URI.\r\n         *\r\n         * @param value  Image URI\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"href\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Image.prototype, \"widthRatio\", {\r\n        /**\r\n         * @return Ratio\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"widthRatio\");\r\n        },\r\n        /**\r\n         * Sets image `width` relatively to its `height`.\r\n         *\r\n         * If image's `height = 100` and `widthRatio = 0.5` the actual width will be\r\n         * `50`.\r\n         *\r\n         * @param value  Ratio\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"widthRatio\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Image.prototype, \"heightRatio\", {\r\n        /**\r\n         * @return Ratio\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"heightRatio\");\r\n        },\r\n        /**\r\n         * Sets image `height` relatively to its `width`.\r\n         *\r\n         * If image's `width = 100` and `heightRatio = 0.5` the actual height will be\r\n         * `50`.\r\n         *\r\n         * @param value  Ratio\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"heightRatio\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Image.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        get: function () {\r\n            return {\r\n                x: 0,\r\n                y: 0,\r\n                width: this.pixelWidth,\r\n                height: this.pixelHeight\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Image;\r\n}(Sprite));\r\nexport { Image };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Image\"] = Image;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAO,KAAKC,IAAZ,MAAsB,cAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,eAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,KAAK;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACzCN,SAAS,CAACK,KAAD,EAAQC,MAAR,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,KAAT,GAAiB;IACb,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;IACAD,KAAK,CAACE,SAAN,GAAkB,OAAlB;IACAF,KAAK,CAACG,OAAN,GAAgBH,KAAK,CAACI,KAAN,CAAYC,GAAZ,CAAgB,OAAhB,CAAhB;;IACAL,KAAK,CAACM,UAAN;;IACAN,KAAK,CAACO,KAAN,GAAc,EAAd;IACAP,KAAK,CAACQ,MAAN,GAAe,EAAf;IACA,OAAOR,KAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIF,KAAK,CAACW,SAAN,CAAgBC,IAAhB,GAAuB,YAAY;IAC/BX,MAAM,CAACU,SAAP,CAAiBC,IAAjB,CAAsBT,IAAtB,CAA2B,IAA3B;;IACA,IAAI,KAAKU,IAAT,EAAe;MACX,IAAIJ,KAAK,GAAG,KAAKK,UAAjB;MACA,IAAIJ,MAAM,GAAG,KAAKK,WAAlB;;MACA,IAAIhB,KAAK,CAACiB,QAAN,CAAe,KAAKC,UAApB,CAAJ,EAAqC;QACjCR,KAAK,GAAGC,MAAM,GAAG,KAAKO,UAAtB;QACA,KAAKR,KAAL,GAAaA,KAAb;MACH;;MACD,IAAIV,KAAK,CAACiB,QAAN,CAAe,KAAKE,WAApB,CAAJ,EAAsC;QAClCR,MAAM,GAAGD,KAAK,GAAG,KAAKS,WAAtB;QACA,KAAKR,MAAL,GAAcA,MAAd;MACH;;MACD,KAAKL,OAAL,CAAac,IAAb,CAAkB;QACd,SAASV,KADK;QAEd,UAAUC;MAFI,CAAlB;MAIA,KAAKL,OAAL,CAAae,MAAb,CAAoBtB,IAAI,CAACuB,KAAzB,EAAgC,YAAhC,EAA8C,KAAKR,IAAnD;IACH;EACJ,CAnBD;;EAoBAS,MAAM,CAACC,cAAP,CAAsBvB,KAAK,CAACW,SAA5B,EAAuC,MAAvC,EAA+C;IAC3C;AACR;AACA;IACQa,GAAG,EAAE,YAAY;MACb,OAAO,KAAKC,gBAAL,CAAsB,MAAtB,CAAP;IACH,CAN0C;;IAO3C;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKC,gBAAL,CAAsB,MAAtB,EAA8BD,KAA9B,EAAqC,IAArC;IACH,CAd0C;IAe3CE,UAAU,EAAE,IAf+B;IAgB3CC,YAAY,EAAE;EAhB6B,CAA/C;EAkBAR,MAAM,CAACC,cAAP,CAAsBvB,KAAK,CAACW,SAA5B,EAAuC,YAAvC,EAAqD;IACjD;AACR;AACA;IACQa,GAAG,EAAE,YAAY;MACb,OAAO,KAAKC,gBAAL,CAAsB,YAAtB,CAAP;IACH,CANgD;;IAOjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKC,gBAAL,CAAsB,YAAtB,EAAoCD,KAApC,EAA2C,IAA3C;IACH,CAjBgD;IAkBjDE,UAAU,EAAE,IAlBqC;IAmBjDC,YAAY,EAAE;EAnBmC,CAArD;EAqBAR,MAAM,CAACC,cAAP,CAAsBvB,KAAK,CAACW,SAA5B,EAAuC,aAAvC,EAAsD;IAClD;AACR;AACA;IACQa,GAAG,EAAE,YAAY;MACb,OAAO,KAAKC,gBAAL,CAAsB,aAAtB,CAAP;IACH,CANiD;;IAOlD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKC,gBAAL,CAAsB,aAAtB,EAAqCD,KAArC,EAA4C,IAA5C;IACH,CAjBiD;IAkBlDE,UAAU,EAAE,IAlBsC;IAmBlDC,YAAY,EAAE;EAnBoC,CAAtD;EAqBAR,MAAM,CAACC,cAAP,CAAsBvB,KAAK,CAACW,SAA5B,EAAuC,MAAvC,EAA+C;IAC3C;AACR;AACA;AACA;AACA;IACQa,GAAG,EAAE,YAAY;MACb,OAAO;QACHO,CAAC,EAAE,CADA;QAEHC,CAAC,EAAE,CAFA;QAGHvB,KAAK,EAAE,KAAKwB,UAHT;QAIHvB,MAAM,EAAE,KAAKwB;MAJV,CAAP;IAMH,CAb0C;IAc3CL,UAAU,EAAE,IAd+B;IAe3CC,YAAY,EAAE;EAf6B,CAA/C;EAiBA,OAAO9B,KAAP;AACH,CArH0B,CAqHzBJ,MArHyB,CAA3B;;AAsHA,SAASI,KAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACAH,QAAQ,CAACsC,iBAAT,CAA2B,OAA3B,IAAsCnC,KAAtC"},"metadata":{},"sourceType":"module"}