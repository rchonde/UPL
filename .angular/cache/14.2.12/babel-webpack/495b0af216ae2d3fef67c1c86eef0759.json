{"ast":null,"code":"/**\r\n * ChordNode module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { FlowDiagramNode } from \"./FlowDiagramNode\";\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\nimport { registry } from \"../../core/Registry\";\nimport { Slice } from \"../../core/elements/Slice\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Bullet } from \"../elements/Bullet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar ChordNode =\n/** @class */\nfunction (_super) {\n  __extends(ChordNode, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ChordNode() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ChordNode\";\n\n    var label = _this.createChild(AxisLabelCircular);\n\n    label.location = 0.5;\n    label.radius = 5;\n    label.text = \"{name}\";\n    label.zIndex = 1;\n    label.shouldClone = false;\n    _this.label = label;\n    _this.layout = \"none\";\n\n    _this.events.on(\"positionchanged\", _this.updateRotation, _this, false);\n\n    _this.isMeasured = false;\n    _this.slice = _this.createChild(Slice);\n    _this.slice.isMeasured = false;\n    var hiddenState = _this.hiddenState;\n    hiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\n    hiddenState.properties.opacity = 0.5;\n    hiddenState.properties.visible = true;\n    _this.setStateOnChildren = false;\n    _this.slice.hiddenState.properties.visible = true;\n\n    _this.adapter.add(\"tooltipX\", function (tooltipX, target) {\n      return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\n    });\n\n    _this.adapter.add(\"tooltipY\", function (tooltipY, target) {\n      return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\n    });\n\n    return _this;\n  }\n  /**\r\n   * Invalidates all links, attached to this node.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ChordNode.prototype.invalidateLinks = function () {\n    var _this = this;\n\n    _super.prototype.invalidateLinks.call(this);\n\n    var label = this.label;\n    var slice = this.slice;\n    var chart = this.chart;\n\n    if (chart && slice) {\n      var sum = this.total;\n      var arc_1 = slice.arc;\n      var sliceStartAngle_1 = slice.startAngle;\n      this.children.each(function (child) {\n        if (child instanceof Bullet) {\n          var locationX = child.locationX;\n\n          if (!$type.isNumber(locationX)) {\n            locationX = 0.5;\n          }\n\n          var locationY = child.locationY;\n\n          if (!$type.isNumber(locationY)) {\n            locationY = 1;\n          }\n\n          var childAngle = sliceStartAngle_1 + arc_1 * locationX;\n          var childRadius = locationY * slice.radius;\n          child.x = childRadius * $math.cos(childAngle);\n          child.y = childRadius * $math.sin(childAngle);\n        }\n      });\n      var labelAngle = sliceStartAngle_1 + arc_1 * label.location;\n      var startAngle = sliceStartAngle_1 + (1 - sum / this.adjustedTotal) * arc_1 * 0.5; // if value of a node is > then sum of the links, add to center link\n\n      if ($type.isNaN(startAngle)) {\n        startAngle = sliceStartAngle_1;\n      }\n\n      label.fixPosition(labelAngle, slice.radius);\n      this.nextAngle = startAngle;\n\n      if (this._outgoingSorted) {\n        $iter.each(this._outgoingSorted, function (dataItem) {\n          var link = dataItem.link;\n          link.parent = _this.chart.linksContainer;\n          var value = dataItem.getWorkingValue(\"value\");\n\n          if ($type.isNumber(value)) {\n            if (chart.nonRibbon) {\n              var percentWidth = link.percentWidth;\n\n              if (!$type.isNumber(percentWidth)) {\n                percentWidth = 5;\n              }\n\n              percentWidth = percentWidth / 100;\n              link.startAngle = sliceStartAngle_1 + arc_1 / 2 - arc_1 / 2 * percentWidth;\n              link.arc = arc_1 * percentWidth;\n            } else {\n              link.arc = value * chart.valueAngle;\n              link.startAngle = _this.nextAngle;\n              _this.nextAngle += link.arc;\n            }\n\n            if (!dataItem.toNode) {\n              link.endAngle = link.startAngle;\n            }\n\n            link.radius = slice.pixelInnerRadius;\n          } //link.validate();\n\n        });\n      }\n\n      if (this._incomingSorted) {\n        $iter.each(this._incomingSorted, function (dataItem) {\n          var link = dataItem.link;\n          link.radius = slice.pixelInnerRadius;\n\n          if (chart.nonRibbon) {\n            var percentWidth = link.percentWidth;\n\n            if (!$type.isNumber(percentWidth)) {\n              percentWidth = 5;\n            }\n\n            percentWidth = percentWidth / 100;\n            link.endAngle = sliceStartAngle_1 + arc_1 / 2 - arc_1 / 2 * percentWidth;\n            link.arc = arc_1 * percentWidth;\n          } else {\n            link.endAngle = _this.nextAngle;\n            var value = dataItem.getWorkingValue(\"value\");\n\n            if ($type.isNumber(value)) {\n              link.arc = value * chart.valueAngle; // yes, this is needed\n\n              _this.nextAngle += link.arc;\n            }\n          }\n\n          if (!dataItem.fromNode) {\n            link.startAngle = link.endAngle;\n          } //link.validate();\n\n        });\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   * updates slice start angle so that when we drag a node it would face the center\r\n   */\n\n\n  ChordNode.prototype.updateRotation = function () {\n    var slice = this.slice;\n    var mAngle = this.trueStartAngle + slice.arc / 2;\n    var radius = slice.radius;\n    var tx = radius * $math.cos(mAngle);\n    var ty = radius * $math.sin(mAngle);\n    var angle = $math.getAngle({\n      x: tx + this.pixelX,\n      y: ty + this.pixelY\n    });\n    slice.startAngle = this.trueStartAngle + (angle - mAngle);\n    this.dx = -this.pixelX;\n    this.dy = -this.pixelY;\n  };\n  /**\r\n   * Copies properties and labels from another [[ChordNode]].\r\n   *\r\n   * @param source  Source node\r\n   */\n\n\n  ChordNode.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.label.copyFrom(source.label);\n    this.slice.copyFrom(source.slice);\n  };\n\n  return ChordNode;\n}(FlowDiagramNode);\n\nexport { ChordNode };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;","map":{"version":3,"names":["__extends","FlowDiagramNode","AxisLabelCircular","registry","Slice","InterfaceColorSet","$iter","$math","$type","Bullet","ChordNode","_super","_this","call","className","label","createChild","location","radius","text","zIndex","shouldClone","layout","events","on","updateRotation","isMeasured","slice","hiddenState","properties","fill","getFor","opacity","visible","setStateOnChildren","adapter","add","tooltipX","target","ix","pixelInnerRadius","tooltipY","iy","prototype","invalidateLinks","chart","sum","total","arc_1","arc","sliceStartAngle_1","startAngle","children","each","child","locationX","isNumber","locationY","childAngle","childRadius","x","cos","y","sin","labelAngle","adjustedTotal","isNaN","fixPosition","nextAngle","_outgoingSorted","dataItem","link","parent","linksContainer","value","getWorkingValue","nonRibbon","percentWidth","valueAngle","toNode","endAngle","_incomingSorted","fromNode","mAngle","trueStartAngle","tx","ty","angle","getAngle","pixelX","pixelY","dx","dy","copyFrom","source","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/elements/ChordNode.js"],"sourcesContent":["/**\r\n * ChordNode module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode } from \"./FlowDiagramNode\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar ChordNode = /** @class */ (function (_super) {\r\n    __extends(ChordNode, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChordNode() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ChordNode\";\r\n        var label = _this.createChild(AxisLabelCircular);\r\n        label.location = 0.5;\r\n        label.radius = 5;\r\n        label.text = \"{name}\";\r\n        label.zIndex = 1;\r\n        label.shouldClone = false;\r\n        _this.label = label;\r\n        _this.layout = \"none\";\r\n        _this.events.on(\"positionchanged\", _this.updateRotation, _this, false);\r\n        _this.isMeasured = false;\r\n        _this.slice = _this.createChild(Slice);\r\n        _this.slice.isMeasured = false;\r\n        var hiddenState = _this.hiddenState;\r\n        hiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n        hiddenState.properties.opacity = 0.5;\r\n        hiddenState.properties.visible = true;\r\n        _this.setStateOnChildren = false;\r\n        _this.slice.hiddenState.properties.visible = true;\r\n        _this.adapter.add(\"tooltipX\", function (tooltipX, target) {\r\n            return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n        });\r\n        _this.adapter.add(\"tooltipY\", function (tooltipY, target) {\r\n            return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Invalidates all links, attached to this node.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ChordNode.prototype.invalidateLinks = function () {\r\n        var _this = this;\r\n        _super.prototype.invalidateLinks.call(this);\r\n        var label = this.label;\r\n        var slice = this.slice;\r\n        var chart = this.chart;\r\n        if (chart && slice) {\r\n            var sum = this.total;\r\n            var arc_1 = slice.arc;\r\n            var sliceStartAngle_1 = slice.startAngle;\r\n            this.children.each(function (child) {\r\n                if (child instanceof Bullet) {\r\n                    var locationX = child.locationX;\r\n                    if (!$type.isNumber(locationX)) {\r\n                        locationX = 0.5;\r\n                    }\r\n                    var locationY = child.locationY;\r\n                    if (!$type.isNumber(locationY)) {\r\n                        locationY = 1;\r\n                    }\r\n                    var childAngle = sliceStartAngle_1 + arc_1 * locationX;\r\n                    var childRadius = locationY * slice.radius;\r\n                    child.x = childRadius * $math.cos(childAngle);\r\n                    child.y = childRadius * $math.sin(childAngle);\r\n                }\r\n            });\r\n            var labelAngle = sliceStartAngle_1 + arc_1 * label.location;\r\n            var startAngle = sliceStartAngle_1 + (1 - sum / this.adjustedTotal) * arc_1 * 0.5; // if value of a node is > then sum of the links, add to center link\r\n            if ($type.isNaN(startAngle)) {\r\n                startAngle = sliceStartAngle_1;\r\n            }\r\n            label.fixPosition(labelAngle, slice.radius);\r\n            this.nextAngle = startAngle;\r\n            if (this._outgoingSorted) {\r\n                $iter.each(this._outgoingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    link.parent = _this.chart.linksContainer;\r\n                    var value = dataItem.getWorkingValue(\"value\");\r\n                    if ($type.isNumber(value)) {\r\n                        if (chart.nonRibbon) {\r\n                            var percentWidth = link.percentWidth;\r\n                            if (!$type.isNumber(percentWidth)) {\r\n                                percentWidth = 5;\r\n                            }\r\n                            percentWidth = percentWidth / 100;\r\n                            link.startAngle = sliceStartAngle_1 + arc_1 / 2 - arc_1 / 2 * percentWidth;\r\n                            link.arc = arc_1 * percentWidth;\r\n                        }\r\n                        else {\r\n                            link.arc = value * chart.valueAngle;\r\n                            link.startAngle = _this.nextAngle;\r\n                            _this.nextAngle += link.arc;\r\n                        }\r\n                        if (!dataItem.toNode) {\r\n                            link.endAngle = link.startAngle;\r\n                        }\r\n                        link.radius = slice.pixelInnerRadius;\r\n                    }\r\n                    //link.validate();\r\n                });\r\n            }\r\n            if (this._incomingSorted) {\r\n                $iter.each(this._incomingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    link.radius = slice.pixelInnerRadius;\r\n                    if (chart.nonRibbon) {\r\n                        var percentWidth = link.percentWidth;\r\n                        if (!$type.isNumber(percentWidth)) {\r\n                            percentWidth = 5;\r\n                        }\r\n                        percentWidth = percentWidth / 100;\r\n                        link.endAngle = sliceStartAngle_1 + arc_1 / 2 - arc_1 / 2 * percentWidth;\r\n                        link.arc = arc_1 * percentWidth;\r\n                    }\r\n                    else {\r\n                        link.endAngle = _this.nextAngle;\r\n                        var value = dataItem.getWorkingValue(\"value\");\r\n                        if ($type.isNumber(value)) {\r\n                            link.arc = value * chart.valueAngle; // yes, this is needed\r\n                            _this.nextAngle += link.arc;\r\n                        }\r\n                    }\r\n                    if (!dataItem.fromNode) {\r\n                        link.startAngle = link.endAngle;\r\n                    }\r\n                    //link.validate();\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     * updates slice start angle so that when we drag a node it would face the center\r\n     */\r\n    ChordNode.prototype.updateRotation = function () {\r\n        var slice = this.slice;\r\n        var mAngle = this.trueStartAngle + slice.arc / 2;\r\n        var radius = slice.radius;\r\n        var tx = radius * $math.cos(mAngle);\r\n        var ty = radius * $math.sin(mAngle);\r\n        var angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n        slice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n        this.dx = -this.pixelX;\r\n        this.dy = -this.pixelY;\r\n    };\r\n    /**\r\n     * Copies properties and labels from another [[ChordNode]].\r\n     *\r\n     * @param source  Source node\r\n     */\r\n    ChordNode.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.label.copyFrom(source.label);\r\n        this.slice.copyFrom(source.slice);\r\n    };\r\n    return ChordNode;\r\n}(FlowDiagramNode));\r\nexport { ChordNode };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}