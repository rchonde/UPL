{"ast":null,"code":"/**\r\n * Base functionality\r\n*/\nimport { __extends } from \"tslib\";\nimport { List, ListTemplate } from \"./utils/List\";\nimport { OrderedListTemplate, SortedListTemplate } from \"./utils/SortedList\";\nimport { Dictionary, DictionaryTemplate } from \"./utils/Dictionary\";\nimport { Disposer } from \"./utils/Disposer\";\nimport { EventDispatcher } from \"./utils/EventDispatcher\";\nimport { Adapter } from \"./utils/Adapter\";\nimport { Color, color } from \"./utils/Color\";\nimport { Percent, percent } from \"./utils/Percent\";\nimport { registry } from \"./Registry\";\nimport { cache } from \"./utils/Cache\";\nimport * as $array from \"./utils/Array\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\"; //import * as $debug from \"./utils/Debug\";\n\n/**\r\n * Provides base functionality for all derivative objects, like generating ids,\r\n * handling cache, etc.\r\n */\n\nvar BaseObject =\n/** @class */\nfunction () {\n  //protected _classes: { [index: string]: any } = {};\n\n  /**\r\n   * Constructor\r\n   * * Sets class name\r\n   */\n  function BaseObject() {\n    /**\r\n     * Indicates if this object has already been deleted. Any\r\n     * destruction/disposal code should take this into account when deciding\r\n     * wheter to run potentially costly disposal operations if they already have\r\n     * been run.\r\n     */\n    this._disposed = false;\n    /**\r\n     * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n     */\n\n    this._disposers = [];\n    this.className = \"BaseObject\"; //this.debug();\n  }\n\n  BaseObject.prototype.debug = function () {//$debug.debug(this);\n  };\n\n  Object.defineProperty(BaseObject.prototype, \"uid\", {\n    /**\r\n     * Returns object's internal unique ID.\r\n     *\r\n     * @return Unique ID\r\n     */\n    get: function () {\n      if (!this._uid) {\n        this._uid = registry.getUniqueId();\n        registry.map.setKey(this._uid, this);\n      }\n\n      return this._uid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseObject.prototype, \"id\", {\n    /**\r\n     * @return Id\r\n     */\n    get: function () {\n      return this._id;\n    },\n\n    /**\r\n     * Sets the user-defined id of the element.\r\n     *\r\n     * @param value Id\r\n     */\n    set: function (value) {\n      //registry.map.setKey(value, this); // registry.map only stores by uid\n      this._id = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseObject.prototype, \"map\", {\n    /**\r\n     * Returns a universal collection for mapping ids with objects.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Map collection\r\n     */\n    get: function () {\n      if (!this._map) {\n        this._map = new Dictionary();\n      }\n\n      return this._map;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseObject.prototype, \"delayedMap\", {\n    /**\r\n     * Returns mapping for objects referenced by id in JSON config that are not yet\r\n     * available at processing time.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Map collection\r\n     */\n    get: function () {\n      if (!this._delayedMap) {\n        this._delayedMap = new Dictionary();\n      }\n\n      return this._delayedMap;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Logs an id and property of the target element that is not yet available\r\n   * for later assignment.\r\n   *\r\n   * @ignore\r\n   * @param  property  Property to set\r\n   * @param  id        ID of the target element\r\n   */\n\n  BaseObject.prototype.addDelayedMap = function (property, id) {\n    var map = this.delayedMap;\n\n    if (!map.hasKey(id)) {\n      map.setKey(id, []);\n    }\n\n    var list = map.getKey(id);\n    list.push({\n      property: property,\n      target: this\n    });\n  };\n  /**\r\n   * Processes delayed JSON config items.\r\n   *\r\n   * @ignore\r\n   */\n\n\n  BaseObject.prototype.processDelayedMap = function () {\n    var _this = this;\n\n    this.delayedMap.each(function (id, list) {\n      if (_this.map.hasKey(id)) {\n        var target_1 = _this.map.getKey(id);\n\n        $array.each(list, function (item) {\n          item.target[item.property] = target_1;\n        });\n\n        _this.delayedMap.removeKey(id);\n      }\n    });\n  };\n  /**\r\n   * Applies properties from all assigned themes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  BaseObject.prototype.applyTheme = function () {\n    var _this = this; // TODO is this needed ?\n\n\n    if (registry) {\n      var themes = this.getCurrentThemes(); // TODO is this needed ?\n\n      if (themes) {\n        $array.each(themes, function (theme, index) {\n          theme(_this);\n        });\n      }\n    }\n  };\n\n  Object.defineProperty(BaseObject.prototype, \"themes\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return An array of themes\r\n     */\n    get: function () {\n      return this._themes;\n    },\n\n    /**\r\n     * A list of themes to be used for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value An array of themes\r\n     */\n    set: function (value) {\n      this._themes = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a list of themes that should be applied to this element. It could\r\n   * either be a list of themes set explicitly on this element, or system-wide.\r\n   *\r\n   * @return List of themes\r\n   */\n\n  BaseObject.prototype.getCurrentThemes = function () {\n    return this.themes || registry.themes;\n  };\n  /**\r\n   * Returns if this object has been already been disposed.\r\n   *\r\n   * @return Is disposed?\r\n   */\n\n\n  BaseObject.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n\n  BaseObject.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n      var a = this._disposers;\n      this._disposers = null;\n\n      while (a.length !== 0) {\n        var disposer = a.shift();\n        disposer.dispose();\n      } // Clear cache\n\n\n      this.clearCache(); // remove from clones list\n\n      if (this.clonedFrom) {\n        this.clonedFrom.clones.removeValue(this);\n      }\n\n      var uid = this._uid;\n\n      if (uid != null) {\n        registry.map.removeKey(uid);\n      }\n    }\n  };\n  /**\r\n   * Adds an IDisposer, which will be disposed when this object is disposed.\r\n   *\r\n   * @param target Object to dispose\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  BaseObject.prototype.addDisposer = function (target) {\n    this._disposers.push(target);\n  };\n  /**\r\n   * Disposes disposable object and removes it from `_disposers`.\r\n   *\r\n   * @param target Object to dispose\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  BaseObject.prototype.removeDispose = function (target) {\n    //if(target){\n    if (!this._disposed) {\n      var index = $array.indexOf(this._disposers, target);\n\n      if (index > -1) {\n        this._disposers.splice(index, 1);\n      }\n    }\n\n    target.dispose(); //}\n  };\n  /**\r\n   * Makes a copy of this object and returns the clone. Try to avoid cloning complex objects like chart, create new instances if you need them.\r\n   *\r\n   * @param cloneId  An id to use for clone (if not set a unique id will be generated)\r\n   * @returns Clone\r\n   */\n\n\n  BaseObject.prototype.clone = function (cloneId) {\n    if (!cloneId) {\n      cloneId = \"clone-\" + registry.getUniqueId();\n    }\n\n    var newObject = new this.constructor();\n    newObject.cloneId = cloneId;\n    newObject.copyFrom(this); // add to clones list\n    // this.clones.push(newObject); // moved this to copyFrom\n\n    return newObject;\n  };\n\n  Object.defineProperty(BaseObject.prototype, \"clones\", {\n    /**\r\n     * Returns a collection of object's clones.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Clones\r\n     */\n    get: function () {\n      if (!this._clones) {\n        this._clones = new List();\n      }\n\n      return this._clones;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related data from different element.\r\n   *\r\n   * @param object Source element\r\n   */\n\n  BaseObject.prototype.copyFrom = function (object) {\n    object.clones.push(this); // do not moveValue, as it is expensive! even if there will be several items in clones list, it's not that bad.\n\n    this.clonedFrom = object;\n  };\n\n  Object.defineProperty(BaseObject.prototype, \"className\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Class name\r\n     */\n    get: function () {\n      return this._className;\n    },\n\n    /**\r\n     * Element's class name. (a class that was used to instantiate the element)\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Class name\r\n     */\n    set: function (value) {\n      this._className = value;\n      /*if (registry) {\r\n          registry.registeredClasses[value] = typeof this;\r\n      }*/\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Caches value in object's cache.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key    Key\r\n   * @param value  Value\r\n   * @param ttl    TTL in seconds\r\n   */\n\n  BaseObject.prototype.setCache = function (key, value, ttl) {\n    cache.set(this.uid, key, value, ttl);\n  };\n  /**\r\n   * Retrieves cached value.\r\n   *\r\n   * If optional second padarameter is specified, it will return that value\r\n   * if cache is not available or is expired.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key    Key\r\n   * @param value  Value to return if cache is not available\r\n   * @return Value\r\n   */\n\n\n  BaseObject.prototype.getCache = function (key, value) {\n    if (value === void 0) {\n      value = undefined;\n    }\n\n    return cache.get(this.uid, key, value);\n  };\n  /**\r\n   * Clears object's local cache.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  BaseObject.prototype.clearCache = function () {\n    cache.clear(this.uid);\n  };\n  /**\r\n   * Creates [[Disposer]] for `setTimeout` function call. This ensures that all\r\n   * timeouts created by the object will be cleared when object itself is\r\n   * disposed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fn     Callback function\r\n   * @param delay  Timeout (ms)\r\n   * @return Disposer for timeout\r\n   */\n\n\n  BaseObject.prototype.setTimeout = function (fn, delay) {\n    var _this = this;\n\n    var id = setTimeout(function () {\n      _this.removeDispose(disposer);\n\n      fn();\n    }, delay);\n    var disposer = new Disposer(function () {\n      clearTimeout(id);\n    });\n\n    this._disposers.push(disposer);\n\n    return disposer;\n  };\n  /**\r\n   * Creates [[Disposer]] for `setInterval` function call. This ensures that all\r\n   * timeouts created by the object will be cleared when object itself is\r\n   * disposed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fn     Callback function\r\n   * @param delay  Timeout (ms)\r\n   * @return Disposer for timeout\r\n   */\n\n\n  BaseObject.prototype.setInterval = function (fn, delay) {\n    var _this = this;\n\n    var id = setInterval(function () {\n      _this.removeDispose(disposer);\n\n      fn();\n    }, delay);\n    var disposer = new Disposer(function () {\n      clearTimeout(id);\n    });\n\n    this._disposers.push(disposer);\n\n    return disposer;\n  };\n\n  Object.defineProperty(BaseObject.prototype, \"config\", {\n    /**\r\n     * ==========================================================================\r\n     * JSON-BASED CONFIG PROCESSING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Use this property to set JSON-based config. When set, triggers processing\r\n     * routine, which will go through all properties, and try to apply values,\r\n     * create instances, etc.\r\n     *\r\n     * Use this with caution, as it is a time-consuming process. It's used for\r\n     * initialchart setup only, not routine operations.\r\n     *\r\n     * @param json JSON config\r\n     */\n    set: function (config) {\n      try {\n        this.processConfig(config);\n      } catch (e) {\n        /*if (this instanceof Sprite) {\r\n            this.raiseCriticalError(e);\r\n        }*/\n        this.raiseCriticalError(e);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes the JSON config.\r\n   *\r\n   * @param json  JSON config\r\n   * @ignore Exclude from docs\r\n   */\n\n  BaseObject.prototype.processConfig = function (config) {\n    var _this = this;\n\n    if (!config) {\n      return;\n    } // Get target\n\n\n    var target = this; // Iterate through all of the items\n\n    $object.eachOrdered(config, function (configKey, value) {\n      var configValue = value; // Is this a callback?\n\n      if (configKey == \"callback\" && typeof value == \"function\") {\n        value.call(target);\n      } // Check if there's a property in target\n\n\n      if (_this.hasProperty(configKey)) {\n        var item_1; // Do we have instructions to create an object?\n        // We create a new object if \"type\" key is set, but only if the\n        // target object is of different type.\n\n        if ($type.isObject(configValue) && $type.hasValue(configValue[\"type\"]) && (!$type.isObject(target[configKey]) || !$type.hasValue(target[configKey].className) || configValue[\"forceCreate\"] || target[configKey].className != configValue[\"type\"]) && !_this.asIs(configKey)) {\n          item_1 = _this.createClassInstance(configValue[\"type\"]); // Create new instance\n\n          if (item_1) {\n            target[configKey] = item_1;\n          } else {\n            item_1 = target[configKey];\n          }\n        } else {\n          // Get item from the object\n          item_1 = target[configKey];\n        }\n        /**\r\n         * It is...\r\n         * --------------------------------------------------------------------\r\n         */\n\n\n        if (item_1 instanceof Adapter) {\n          // ... an Adapter, try to add handlers to it\n          // ------------------------------------------------------------------\n          _this.processAdapters(item_1, configValue);\n        } else if (item_1 instanceof EventDispatcher) {\n          // ... an EventDispatcher, try to add handlers to it\n          // ------------------------------------------------------------------\n          _this.processEvents(item_1, configValue);\n        } else if (configKey == \"locale\" && $type.isString(configValue)) {\n          // ... a locale specified as string, e.g. \"fr_FR\"\n          // ------------------------------------------------------------------\n          if (window[\"am4lang_\" + configValue]) {\n            target[configKey] = window[\"am4lang_\" + configValue];\n          }\n        } else if (configKey == \"parent\" && $type.isString(configValue)) {\n          // ... a parent referred via its it\n          // ------------------------------------------------------------------\n          var parent_1 = _this.map.getKey(configValue);\n\n          if (parent_1) {\n            target[configKey] = parent_1;\n          } else {\n            _this.addDelayedMap(\"parent\", configValue);\n          }\n        } else if (_this.asIs(configKey)) {\n          // ... a special field, just set it to new value\n          // ------------------------------------------------------------------\n          // (no need to add each indvidual item)\n          target[configKey] = configValue;\n        } else if (_this.asFunction(configKey) && $type.isString(configValue)) {\n          // ... a field indicating function name to look for in registry\n          // ------------------------------------------------------------------\n          if ($type.hasValue(registry.registeredClasses[configValue])) {\n            target[configKey] = registry.registeredClasses[configValue];\n          } else {\n            throw Error(\"Invalid easing function: \" + configValue);\n          }\n        } else if (configValue instanceof BaseObject) {\n          // ... a BaseObject object, we just going to use it as it is\n          // ------------------------------------------------------------------\n          target[configKey] = configValue;\n        } else if (item_1 instanceof BaseObject) {\n          // ... another child BaseObject\n          // ------------------------------------------------------------------\n          // Let's just pass in config part in and let itself deal with it\n          item_1.config = configValue;\n        } else if (item_1 instanceof ListTemplate || item_1 instanceof OrderedListTemplate || item_1 instanceof SortedListTemplate) {\n          // ... a list with template\n          // ------------------------------------------------------------------\n          // Let's see what we can do with it\n          if ($type.isArray(configValue)) {\n            // It's an array.\n            // Create a list item for entry, or try to apply properties to an\n            // existing entry if possible and it is present.\n            if (item_1 instanceof ListTemplate) {\n              _this.processListTemplate(configValue, item_1);\n            } else {\n              _this.processOrderedTemplate(configValue, item_1);\n            }\n          } else if ($type.isObject(configValue)) {\n            // It's a single oject.\n            // Treat it as a template.\n            if (configValue instanceof BaseObject) {\n              // Item is already a BaseObject, no need to process it further\n              item_1.template = configValue;\n            } else {\n              // Now let's find out if the whole object if a template, or we\n              // need to get it from `template` key\n              var templateValue = void 0;\n\n              if ($type.hasValue(configValue.template)) {\n                templateValue = configValue.template;\n              } else {\n                templateValue = configValue;\n              }\n\n              if (item_1.template instanceof BaseObject) {\n                // Template is a BaseObject so we will just let its config\n                // deal with the configuration\n                item_1.template.config = templateValue;\n              } else {\n                $object.each(templateValue, function (entryKey, entryValue) {\n                  var listItem = item_1.template[entryKey];\n\n                  if (listItem instanceof Adapter) {\n                    _this.processAdapters(listItem, entryValue);\n                  } else if (listItem instanceof EventDispatcher) {\n                    _this.processEvents(listItem, entryValue);\n                  } else if (listItem instanceof DictionaryTemplate) {\n                    _this.processDictionaryTemplate(listItem, entryValue);\n                  } else if (item_1.template[entryKey] instanceof BaseObject) {\n                    // Template is a BaseObject. Let it deal with its own config.\n                    item_1.template[entryKey].config = entryValue;\n                  } else if ($type.isObject(entryValue) && $type.hasValue(entryValue[\"type\"])) {\n                    listItem = _this.createClassInstance(entryValue[\"type\"]);\n\n                    if (listItem) {\n                      if (listItem instanceof BaseObject) {\n                        listItem.config = entryValue;\n                      }\n\n                      item_1.template[entryKey] = listItem;\n                    } else {\n                      item_1.template[entryKey] = entryValue;\n                    }\n                  } else if (listItem instanceof List) {\n                    // It's List, process it\n                    _this.processList(entryValue, listItem);\n                  } else {\n                    // Aything else. Just assing and be done with it.\n                    item_1.template[entryKey] = _this.maybeColorOrPercent(entryValue);\n                  }\n                });\n              } // Check maybe there are `values` to insert\n\n\n              if ($type.hasValue(configValue.values)) {\n                if (item_1 instanceof ListTemplate) {\n                  _this.processListTemplate(configValue.values, item_1);\n                } else {\n                  _this.processOrderedTemplate(configValue.values, item_1);\n                }\n              }\n            }\n          } else {// Something else?\n            // Not sure what to do with it on a list - ignore\n          }\n        } else if (item_1 instanceof List) {\n          // ... a list\n          // ------------------------------------------------------------------\n          if (configKey == \"children\") {\n            _this.processList(configValue, item_1, _this);\n          } else {\n            _this.processList(configValue, item_1);\n          }\n        } else if (item_1 instanceof DictionaryTemplate) {\n          // ... a dictionary with template\n          // ------------------------------------------------------------------\n          _this.processDictionaryTemplate(item_1, configValue);\n        } else if (item_1 instanceof Dictionary) {\n          // ... a dictionary\n          // ------------------------------------------------------------------\n          _this.processDictionary(item_1, configValue);\n        } else if (item_1 instanceof Color || item_1 instanceof Percent) {\n          // ... it's a Color or Percent\n          // ------------------------------------------------------------------\n          target[configKey] = _this.maybeColorOrPercent(configValue);\n        } else if ($type.isObject(item_1) && $type.isObject(configValue)) {\n          // ... a regular object\n          // ------------------------------------------------------------------\n          $object.copyAllProperties(configValue, item_1);\n        } else {\n          // ... something else - probably a simple property or object\n          // ------------------------------------------------------------------\n          // Maybe convert to `Percent` or `Color`?\n          configValue = _this.maybeColorOrPercent(configValue); // Assign\n\n          target[configKey] = configValue;\n        }\n      } else if (!_this.isReserved(configKey)) {\n        // Doesn't have property set. But we're going to assume JSON config\n        // creator knows what he/she is doing and set it anyway.\n        target[configKey] = configValue;\n      }\n    }, this.configOrder); // Any errors?\n\n    if (this.processingErrors.length) {\n      var errors = this.processingErrors.join(\"\\n\");\n      this._processingErrors = [];\n      throw Error(errors);\n    }\n  };\n  /**\r\n   * Tries to detect if value is color or percent and converts to proper object\r\n   * if necessary.\r\n   *\r\n   * Returns the same source value if no color/percent detected\r\n   *\r\n   * @param value  Source value\r\n   * @return Converted value\r\n   */\n\n\n  BaseObject.prototype.maybeColorOrPercent = function (value) {\n    if ($type.isString(value)) {\n      if (value.match(/^[\\-]?[0-9.]+\\%$/)) {\n        return percent($type.toNumber(value));\n      } else if (value.match(/^\\#[0-9abcdef]{3,}$/i)) {\n        return color(value);\n      }\n    }\n\n    return value;\n  };\n\n  BaseObject.prototype.processAdapters = function (item, config) {\n    var _this = this;\n\n    if ($type.isArray(config)) {\n      $array.each(config, function (entry, index) {\n        item.add(entry.key, entry.callback, entry.priority || 0, _this);\n      });\n    } else if ($type.isObject(config)) {\n      $object.each(config, function (key, entry) {\n        if (!item.has(key, entry)) {\n          item.add(key, entry);\n        }\n      });\n    }\n  };\n\n  BaseObject.prototype.processEvents = function (item, config) {\n    var _this = this;\n\n    if ($type.isArray(config)) {\n      $array.each(config, function (entry, index) {\n        item.on(entry.type, entry.callback, _this);\n      });\n    } else if ($type.isObject(config)) {\n      $object.each(config, function (key, entry) {\n        if (!item.has(key, entry)) {\n          item.on(key, entry);\n        }\n      });\n    }\n  };\n  /**\r\n   * Processes JSON config for a [[DictionaryTemplate]] item.\r\n   *\r\n   * @todo Description\r\n   * @param item    Item\r\n   * @param config  Config\r\n   */\n\n\n  BaseObject.prototype.processDictionaryTemplate = function (item, config) {\n    // We can only process object\n    // Not sure what to do with other types - ignore\n    if ($type.isObject(config)) {\n      // Create an entry for each item, or override properties for\n      // existing one.\n      $object.each(config, function (entryKey, entryValue) {\n        var listItem; // Get existing one, or create a new one\n\n        if (entryKey == \"template\") {\n          listItem = item.template;\n        } else if (item.hasKey(entryKey)) {\n          listItem = item.getKey(entryKey);\n        } else {\n          listItem = item.create(entryKey);\n        } // Set data\n\n\n        if (listItem instanceof BaseObject) {\n          listItem.config = entryValue;\n        } else if ($type.isObject(listItem) && $type.isObject(entryValue)) {\n          $object.copyAllProperties(entryValue, listItem);\n        } else {\n          listItem.setKey(entryKey, entryValue);\n        }\n      });\n    }\n  };\n  /**\r\n   * Processes JSON config for a [[Dictionary]] item.\r\n   *\r\n   * @todo Description\r\n   * @param item    Item\r\n   * @param config  Config\r\n   */\n\n\n  BaseObject.prototype.processDictionary = function (item, config) {\n    // We can only process object\n    // Not sure what to do with other types - ignore\n    if ($type.isObject(config)) {\n      // Create an entry for each item, or override properties for\n      // existing one.\n      // @todo support for non-basic types\n      $object.each(config, function (entryKey, entryValue) {\n        item.setKey(entryKey, entryValue);\n      });\n    }\n  };\n  /**\r\n   * Processes [[ListTemplate]].\r\n   *\r\n   * @param configValue  Config value\r\n   * @param item         Item\r\n   */\n\n\n  BaseObject.prototype.processListTemplate = function (configValue, item) {\n    var _this = this;\n\n    $array.each(configValue, function (entry, index) {\n      var type = _this.getConfigEntryType(entry);\n\n      var listItem;\n\n      if (item.hasIndex(index) && !entry[\"forceCreate\"]) {\n        listItem = item.getIndex(index);\n      } else if (entry instanceof BaseObject) {\n        // Item is already a BaseObject, no need to process it further\n        item.push(entry);\n        return;\n      } else if (type) {\n        listItem = item.create(type);\n      } else {\n        listItem = item.create();\n      }\n\n      if (entry === listItem) {// It's already the same item, do nothing\n      } else {\n        if ($type.isObject(entry)) {\n          // If the list item is BaseObject, we just need to let it\n          // deal if its own config\n          if (listItem instanceof BaseObject) {\n            listItem.config = entry;\n          } else if ($type.isObject(listItem) && $type.isObject(entry)) {\n            $object.copyAllProperties(entry, listItem);\n          } else {\n            item.setIndex(item.indexOf(listItem), entry);\n          }\n        }\n      }\n    }); // Truncate the list if it contains less items than the config\n    // array\n\n    while (configValue.length > item.length) {\n      item.pop();\n    }\n  };\n  /**\r\n   * Processes [[OrdererListTemplate]] or [[SortedListTemplate]].\r\n   *\r\n   * @param configValue  Config value\r\n   * @param item         Item\r\n   */\n\n\n  BaseObject.prototype.processOrderedTemplate = function (configValue, item) {\n    var _this = this;\n\n    $array.each(configValue, function (entry, index) {\n      var type = _this.getConfigEntryType(entry);\n\n      var listItem;\n\n      if (type) {\n        listItem = item.create(type);\n      } else {\n        listItem = item.create();\n      }\n\n      if ($type.isObject(entry)) {\n        // If the list item is BaseObject, we just need to let it\n        // deal if its own config\n        if (listItem instanceof BaseObject) {\n          listItem.config = entry;\n        } else if ($type.isObject(listItem) && $type.isObject(entry)) {\n          $object.copyAllProperties(entry, listItem);\n        } else {\n          item.insert(entry);\n        }\n      }\n    });\n  };\n  /**\r\n   * Processes [[List]].\r\n   *\r\n   * @param configValue  Config value\r\n   * @param item         Item\r\n   */\n\n\n  BaseObject.prototype.processList = function (configValue, item, parent) {\n    var _this = this; // Convert to array if necessary\n\n\n    if (!$type.isArray(configValue)) {\n      configValue = [configValue];\n    } // It's an array\n    // Create a list item for entry\n\n\n    var itemCount = item.length;\n    var extraCount = 0;\n    $array.each(configValue, function (entry, index) {\n      if ($type.isObject(entry)) {\n        // An object.\n        //\n        // Let's see if we can instantiate a class out of it, or we need\n        // to push it into list as it is.\n        //\n        // If there are items already at the specified index in the list,\n        // apply properties rather than create a new one.\n        var listItem = void 0;\n\n        if (index < itemCount && !entry[\"forceCreate\"]) {\n          listItem = item.getIndex(index);\n        } else if (entry instanceof BaseObject) {\n          // Item is already a BaseObject, no need to process it further\n          item.push(entry);\n          return;\n        } else {\n          extraCount++;\n          listItem = _this.createEntryInstance(entry);\n\n          if (parent) {\n            listItem.parent = parent;\n          } else {\n            item.push(listItem);\n          }\n        } // If the list item is BaseObject, we just need to let it\n        // deal if its own config\n\n\n        if (listItem instanceof BaseObject) {\n          listItem.config = entry;\n        } else if ($type.isObject(listItem) && $type.isObject(entry)) {\n          $object.copyAllProperties(entry, listItem);\n        }\n      } else {\n        // Basic value.\n        // Just push it into list, or override existing value\n        if (item.hasIndex(index)) {\n          item.setIndex(index, entry);\n        } else {\n          item.push(entry);\n        }\n      }\n    }); // Truncate the list if it contains less items than the config\n    // array\n\n    while (!parent && configValue.length + extraCount < item.length) {\n      item.pop();\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n\n\n  BaseObject.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } // Language must come first, so it's all set up when the rest of the\n    // elements are being instantiated\n    else if (a == \"language\") {\n      return -1;\n    } else if (b == \"language\") {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n  /**\r\n   * Checks if field should be just assigned as is, without any checking when\r\n   * processing JSON config.\r\n   *\r\n   * Extending functions can override this function to do their own checks.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as is?\r\n   */\n\n\n  BaseObject.prototype.asIs = function (field) {\n    return $array.indexOf([\"locale\"], field) != -1;\n  };\n  /**\r\n   * Checks if field needs to be converted to function, if it is specified\r\n   * as string.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n\n\n  BaseObject.prototype.asFunction = function (field) {\n    return false;\n  };\n  /**\r\n   * Creates a relevant class instance if such class definition exists.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param className  Class name\r\n   * @return Instance\r\n   */\n\n\n  BaseObject.prototype.createClassInstance = function (className) {\n    if ($type.hasValue(registry.registeredClasses[className])) {\n      return new registry.registeredClasses[className]();\n    } else {\n      throw Error(\"Invalid type: \\\"\" + className + \"\\\".\");\n    }\n  };\n  /**\r\n   * Creates a class instance for a config entry using it's type. (as set in\r\n   * `type` property)\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config part\r\n   * @return Instance\r\n   */\n\n\n  BaseObject.prototype.createEntryInstance = function (config) {\n    var res;\n\n    if ($type.hasValue(config[\"type\"])) {\n      res = this.createClassInstance(config[\"type\"]);\n    }\n\n    if (!res) {\n      return config;\n    }\n\n    return res;\n  };\n  /**\r\n   * Determines config object type.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config part\r\n   * @return Type\r\n   */\n\n\n  BaseObject.prototype.getConfigEntryType = function (config) {\n    if ($type.hasValue(config[\"type\"])) {\n      if ($type.hasValue(registry.registeredClasses[config[\"type\"]])) {\n        return registry.registeredClasses[config[\"type\"]];\n      } else {\n        throw Error(\"Invalid type: \\\"\" + config[\"type\"] + \"\\\".\");\n      }\n    }\n\n    return;\n  };\n  /**\r\n   * Checks if this element has a property.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param prop  Property name\r\n   * @return Has property?\r\n   */\n\n\n  BaseObject.prototype.hasProperty = function (prop) {\n    return prop in this ? true : false;\n  };\n  /**\r\n   * Checkes whether JSON key is a reserved keyword.\r\n   *\r\n   * @param key  Key\r\n   * @return Reserved\r\n   */\n\n\n  BaseObject.prototype.isReserved = function (key) {\n    return [\"type\", \"forceCreate\"].indexOf(key) !== -1;\n  };\n\n  Object.defineProperty(BaseObject.prototype, \"processingErrors\", {\n    /**\r\n     * A list of errors that happened during JSON processing.\r\n     *\r\n     * @return Errors\r\n     */\n    get: function () {\n      if (!this._processingErrors) {\n        this._processingErrors = [];\n      }\n\n      return this._processingErrors;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return BaseObject;\n}();\n\nexport { BaseObject };\n;\n/**\r\n * A version of [[BaseObject]] with events properties and methods.\r\n * Classes that use [[EventDispatcher]] should extend this instead of\r\n * [[BaseObject]] directly.\r\n */\n\nvar BaseObjectEvents =\n/** @class */\nfunction (_super) {\n  __extends(BaseObjectEvents, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function BaseObjectEvents() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"BaseObjectEvents\";\n    return _this;\n  }\n\n  Object.defineProperty(BaseObjectEvents.prototype, \"events\", {\n    /**\r\n     * An [[EventDispatcher]] instance\r\n     */\n    get: function () {\n      if (!this._eventDispatcher) {\n        this._eventDispatcher = new EventDispatcher();\n\n        this._disposers.push(this._eventDispatcher);\n      }\n\n      return this._eventDispatcher;\n    },\n    enumerable: true,\n    configurable: true\n  }); //public set events(value:EventDispatcher<AMEvent<this, this[\"_events\"]>>){\n  //\tthis._eventDispatcher = value;\n  //}\n\n  /**\r\n   * Dispatches an event using own event dispatcher. Will automatically\r\n   * populate event data object with event type and target (this element).\r\n   * It also checks if there are any handlers registered for this sepecific\r\n   * event.\r\n   *\r\n   * @param eventType Event type (name)\r\n   * @param data      Data to pass into event handler(s)\r\n   */\n\n  BaseObjectEvents.prototype.dispatch = function (eventType, data) {\n    // @todo Implement proper type check\n    if (this._eventDispatcher) {\n      if (this.events.isEnabled(eventType)) {\n        if (data) {\n          data.type = eventType;\n          data.target = data.target || this;\n          this.events.dispatch(eventType, {\n            type: eventType,\n            target: this\n          });\n        } else {\n          this.events.dispatch(eventType, {\n            type: eventType,\n            target: this\n          });\n        }\n      }\n    }\n  };\n  /**\r\n   * Works like `dispatch`, except event is triggered immediately, without\r\n   * waiting for the next frame cycle.\r\n   *\r\n   * @param eventType Event type (name)\r\n   * @param data      Data to pass into event handler(s)\r\n   */\n\n\n  BaseObjectEvents.prototype.dispatchImmediately = function (eventType, data) {\n    // @todo Implement proper type check\n    if (this._eventDispatcher) {\n      if (this.events.isEnabled(eventType)) {\n        if (data) {\n          data.type = eventType;\n          data.target = data.target || this;\n          this.events.dispatchImmediately(eventType, data);\n        } else {\n          this.events.dispatchImmediately(eventType, {\n            type: eventType,\n            target: this\n          });\n        }\n      }\n    }\n  };\n  /**\r\n   * Copies all parameters from another [[Sprite]].\r\n   *\r\n   * @param source Source object\r\n   */\n\n\n  BaseObjectEvents.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (source._eventDispatcher) {\n      this.events.copyFrom(source._eventDispatcher);\n    }\n  };\n\n  return BaseObjectEvents;\n}(BaseObject);\n\nexport { BaseObjectEvents };","map":{"version":3,"names":["__extends","List","ListTemplate","OrderedListTemplate","SortedListTemplate","Dictionary","DictionaryTemplate","Disposer","EventDispatcher","Adapter","Color","color","Percent","percent","registry","cache","$array","$object","$type","BaseObject","_disposed","_disposers","className","prototype","debug","Object","defineProperty","get","_uid","getUniqueId","map","setKey","enumerable","configurable","_id","set","value","_map","_delayedMap","addDelayedMap","property","id","delayedMap","hasKey","list","getKey","push","target","processDelayedMap","_this","each","target_1","item","removeKey","applyTheme","themes","getCurrentThemes","theme","index","_themes","isDisposed","dispose","a","length","disposer","shift","clearCache","clonedFrom","clones","removeValue","uid","addDisposer","removeDispose","indexOf","splice","clone","cloneId","newObject","constructor","copyFrom","_clones","object","_className","setCache","key","ttl","getCache","undefined","clear","setTimeout","fn","delay","clearTimeout","setInterval","config","processConfig","e","raiseCriticalError","eachOrdered","configKey","configValue","call","hasProperty","item_1","isObject","hasValue","asIs","createClassInstance","processAdapters","processEvents","isString","window","parent_1","asFunction","registeredClasses","Error","isArray","processListTemplate","processOrderedTemplate","template","templateValue","entryKey","entryValue","listItem","processDictionaryTemplate","processList","maybeColorOrPercent","values","processDictionary","copyAllProperties","isReserved","configOrder","processingErrors","errors","join","_processingErrors","match","toNumber","entry","add","callback","priority","has","on","type","create","getConfigEntryType","hasIndex","getIndex","setIndex","pop","insert","parent","itemCount","extraCount","createEntryInstance","b","field","res","prop","BaseObjectEvents","_super","_eventDispatcher","dispatch","eventType","data","events","isEnabled","dispatchImmediately","source"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/Base.js"],"sourcesContent":["/**\r\n * Base functionality\r\n*/\r\nimport { __extends } from \"tslib\";\r\nimport { List, ListTemplate } from \"./utils/List\";\r\nimport { OrderedListTemplate, SortedListTemplate } from \"./utils/SortedList\";\r\nimport { Dictionary, DictionaryTemplate } from \"./utils/Dictionary\";\r\nimport { Disposer } from \"./utils/Disposer\";\r\nimport { EventDispatcher } from \"./utils/EventDispatcher\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { Color, color } from \"./utils/Color\";\r\nimport { Percent, percent } from \"./utils/Percent\";\r\nimport { registry } from \"./Registry\";\r\nimport { cache } from \"./utils/Cache\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n//import * as $debug from \"./utils/Debug\";\r\n/**\r\n * Provides base functionality for all derivative objects, like generating ids,\r\n * handling cache, etc.\r\n */\r\nvar BaseObject = /** @class */ (function () {\r\n    //protected _classes: { [index: string]: any } = {};\r\n    /**\r\n     * Constructor\r\n     * * Sets class name\r\n     */\r\n    function BaseObject() {\r\n        /**\r\n         * Indicates if this object has already been deleted. Any\r\n         * destruction/disposal code should take this into account when deciding\r\n         * wheter to run potentially costly disposal operations if they already have\r\n         * been run.\r\n         */\r\n        this._disposed = false;\r\n        /**\r\n         * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n         */\r\n        this._disposers = [];\r\n        this.className = \"BaseObject\";\r\n        //this.debug();\r\n    }\r\n    BaseObject.prototype.debug = function () {\r\n        //$debug.debug(this);\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"uid\", {\r\n        /**\r\n         * Returns object's internal unique ID.\r\n         *\r\n         * @return Unique ID\r\n         */\r\n        get: function () {\r\n            if (!this._uid) {\r\n                this._uid = registry.getUniqueId();\r\n                registry.map.setKey(this._uid, this);\r\n            }\r\n            return this._uid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BaseObject.prototype, \"id\", {\r\n        /**\r\n         * @return Id\r\n         */\r\n        get: function () {\r\n            return this._id;\r\n        },\r\n        /**\r\n         * Sets the user-defined id of the element.\r\n         *\r\n         * @param value Id\r\n         */\r\n        set: function (value) {\r\n            //registry.map.setKey(value, this); // registry.map only stores by uid\r\n            this._id = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BaseObject.prototype, \"map\", {\r\n        /**\r\n         * Returns a universal collection for mapping ids with objects.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Map collection\r\n         */\r\n        get: function () {\r\n            if (!this._map) {\r\n                this._map = new Dictionary();\r\n            }\r\n            return this._map;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BaseObject.prototype, \"delayedMap\", {\r\n        /**\r\n         * Returns mapping for objects referenced by id in JSON config that are not yet\r\n         * available at processing time.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Map collection\r\n         */\r\n        get: function () {\r\n            if (!this._delayedMap) {\r\n                this._delayedMap = new Dictionary();\r\n            }\r\n            return this._delayedMap;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Logs an id and property of the target element that is not yet available\r\n     * for later assignment.\r\n     *\r\n     * @ignore\r\n     * @param  property  Property to set\r\n     * @param  id        ID of the target element\r\n     */\r\n    BaseObject.prototype.addDelayedMap = function (property, id) {\r\n        var map = this.delayedMap;\r\n        if (!map.hasKey(id)) {\r\n            map.setKey(id, []);\r\n        }\r\n        var list = map.getKey(id);\r\n        list.push({\r\n            property: property,\r\n            target: this\r\n        });\r\n    };\r\n    /**\r\n     * Processes delayed JSON config items.\r\n     *\r\n     * @ignore\r\n     */\r\n    BaseObject.prototype.processDelayedMap = function () {\r\n        var _this = this;\r\n        this.delayedMap.each(function (id, list) {\r\n            if (_this.map.hasKey(id)) {\r\n                var target_1 = _this.map.getKey(id);\r\n                $array.each(list, function (item) {\r\n                    item.target[item.property] = target_1;\r\n                });\r\n                _this.delayedMap.removeKey(id);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Applies properties from all assigned themes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    BaseObject.prototype.applyTheme = function () {\r\n        var _this = this;\r\n        // TODO is this needed ?\r\n        if (registry) {\r\n            var themes = this.getCurrentThemes();\r\n            // TODO is this needed ?\r\n            if (themes) {\r\n                $array.each(themes, function (theme, index) {\r\n                    theme(_this);\r\n                });\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"themes\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return An array of themes\r\n         */\r\n        get: function () {\r\n            return this._themes;\r\n        },\r\n        /**\r\n         * A list of themes to be used for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value An array of themes\r\n         */\r\n        set: function (value) {\r\n            this._themes = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a list of themes that should be applied to this element. It could\r\n     * either be a list of themes set explicitly on this element, or system-wide.\r\n     *\r\n     * @return List of themes\r\n     */\r\n    BaseObject.prototype.getCurrentThemes = function () {\r\n        return this.themes || registry.themes;\r\n    };\r\n    /**\r\n     * Returns if this object has been already been disposed.\r\n     *\r\n     * @return Is disposed?\r\n     */\r\n    BaseObject.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    BaseObject.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            this._disposed = true;\r\n            var a = this._disposers;\r\n            this._disposers = null;\r\n            while (a.length !== 0) {\r\n                var disposer = a.shift();\r\n                disposer.dispose();\r\n            }\r\n            // Clear cache\r\n            this.clearCache();\r\n            // remove from clones list\r\n            if (this.clonedFrom) {\r\n                this.clonedFrom.clones.removeValue(this);\r\n            }\r\n            var uid = this._uid;\r\n            if (uid != null) {\r\n                registry.map.removeKey(uid);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Adds an IDisposer, which will be disposed when this object is disposed.\r\n     *\r\n     * @param target Object to dispose\r\n     * @ignore Exclude from docs\r\n     */\r\n    BaseObject.prototype.addDisposer = function (target) {\r\n        this._disposers.push(target);\r\n    };\r\n    /**\r\n     * Disposes disposable object and removes it from `_disposers`.\r\n     *\r\n     * @param target Object to dispose\r\n     * @ignore Exclude from docs\r\n     */\r\n    BaseObject.prototype.removeDispose = function (target) {\r\n        //if(target){\r\n        if (!this._disposed) {\r\n            var index = $array.indexOf(this._disposers, target);\r\n            if (index > -1) {\r\n                this._disposers.splice(index, 1);\r\n            }\r\n        }\r\n        target.dispose();\r\n        //}\r\n    };\r\n    /**\r\n     * Makes a copy of this object and returns the clone. Try to avoid cloning complex objects like chart, create new instances if you need them.\r\n     *\r\n     * @param cloneId  An id to use for clone (if not set a unique id will be generated)\r\n     * @returns Clone\r\n     */\r\n    BaseObject.prototype.clone = function (cloneId) {\r\n        if (!cloneId) {\r\n            cloneId = \"clone-\" + registry.getUniqueId();\r\n        }\r\n        var newObject = new this.constructor();\r\n        newObject.cloneId = cloneId;\r\n        newObject.copyFrom(this);\r\n        // add to clones list\r\n        // this.clones.push(newObject); // moved this to copyFrom\r\n        return newObject;\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"clones\", {\r\n        /**\r\n         * Returns a collection of object's clones.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Clones\r\n         */\r\n        get: function () {\r\n            if (!this._clones) {\r\n                this._clones = new List();\r\n            }\r\n            return this._clones;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all properties and related data from different element.\r\n     *\r\n     * @param object Source element\r\n     */\r\n    BaseObject.prototype.copyFrom = function (object) {\r\n        object.clones.push(this); // do not moveValue, as it is expensive! even if there will be several items in clones list, it's not that bad.\r\n        this.clonedFrom = object;\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"className\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Class name\r\n         */\r\n        get: function () {\r\n            return this._className;\r\n        },\r\n        /**\r\n         * Element's class name. (a class that was used to instantiate the element)\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Class name\r\n         */\r\n        set: function (value) {\r\n            this._className = value;\r\n            /*if (registry) {\r\n                registry.registeredClasses[value] = typeof this;\r\n            }*/\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Caches value in object's cache.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param key    Key\r\n     * @param value  Value\r\n     * @param ttl    TTL in seconds\r\n     */\r\n    BaseObject.prototype.setCache = function (key, value, ttl) {\r\n        cache.set(this.uid, key, value, ttl);\r\n    };\r\n    /**\r\n     * Retrieves cached value.\r\n     *\r\n     * If optional second padarameter is specified, it will return that value\r\n     * if cache is not available or is expired.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param key    Key\r\n     * @param value  Value to return if cache is not available\r\n     * @return Value\r\n     */\r\n    BaseObject.prototype.getCache = function (key, value) {\r\n        if (value === void 0) { value = undefined; }\r\n        return cache.get(this.uid, key, value);\r\n    };\r\n    /**\r\n     * Clears object's local cache.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    BaseObject.prototype.clearCache = function () {\r\n        cache.clear(this.uid);\r\n    };\r\n    /**\r\n     * Creates [[Disposer]] for `setTimeout` function call. This ensures that all\r\n     * timeouts created by the object will be cleared when object itself is\r\n     * disposed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param fn     Callback function\r\n     * @param delay  Timeout (ms)\r\n     * @return Disposer for timeout\r\n     */\r\n    BaseObject.prototype.setTimeout = function (fn, delay) {\r\n        var _this = this;\r\n        var id = setTimeout(function () {\r\n            _this.removeDispose(disposer);\r\n            fn();\r\n        }, delay);\r\n        var disposer = new Disposer(function () {\r\n            clearTimeout(id);\r\n        });\r\n        this._disposers.push(disposer);\r\n        return disposer;\r\n    };\r\n    /**\r\n     * Creates [[Disposer]] for `setInterval` function call. This ensures that all\r\n     * timeouts created by the object will be cleared when object itself is\r\n     * disposed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param fn     Callback function\r\n     * @param delay  Timeout (ms)\r\n     * @return Disposer for timeout\r\n     */\r\n    BaseObject.prototype.setInterval = function (fn, delay) {\r\n        var _this = this;\r\n        var id = setInterval(function () {\r\n            _this.removeDispose(disposer);\r\n            fn();\r\n        }, delay);\r\n        var disposer = new Disposer(function () {\r\n            clearTimeout(id);\r\n        });\r\n        this._disposers.push(disposer);\r\n        return disposer;\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"config\", {\r\n        /**\r\n         * ==========================================================================\r\n         * JSON-BASED CONFIG PROCESSING\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Use this property to set JSON-based config. When set, triggers processing\r\n         * routine, which will go through all properties, and try to apply values,\r\n         * create instances, etc.\r\n         *\r\n         * Use this with caution, as it is a time-consuming process. It's used for\r\n         * initialchart setup only, not routine operations.\r\n         *\r\n         * @param json JSON config\r\n         */\r\n        set: function (config) {\r\n            try {\r\n                this.processConfig(config);\r\n            }\r\n            catch (e) {\r\n                /*if (this instanceof Sprite) {\r\n                    this.raiseCriticalError(e);\r\n                }*/\r\n                this.raiseCriticalError(e);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes the JSON config.\r\n     *\r\n     * @param json  JSON config\r\n     * @ignore Exclude from docs\r\n     */\r\n    BaseObject.prototype.processConfig = function (config) {\r\n        var _this = this;\r\n        if (!config) {\r\n            return;\r\n        }\r\n        // Get target\r\n        var target = this;\r\n        // Iterate through all of the items\r\n        $object.eachOrdered(config, function (configKey, value) {\r\n            var configValue = value;\r\n            // Is this a callback?\r\n            if (configKey == \"callback\" && typeof value == \"function\") {\r\n                value.call(target);\r\n            }\r\n            // Check if there's a property in target\r\n            if (_this.hasProperty(configKey)) {\r\n                var item_1;\r\n                // Do we have instructions to create an object?\r\n                // We create a new object if \"type\" key is set, but only if the\r\n                // target object is of different type.\r\n                if ($type.isObject(configValue)\r\n                    && $type.hasValue(configValue[\"type\"])\r\n                    && (!$type.isObject(target[configKey])\r\n                        || !$type.hasValue(target[configKey].className)\r\n                        || configValue[\"forceCreate\"]\r\n                        || target[configKey].className != configValue[\"type\"])\r\n                    && !_this.asIs(configKey)) {\r\n                    item_1 = _this.createClassInstance(configValue[\"type\"]);\r\n                    // Create new instance\r\n                    if (item_1) {\r\n                        target[configKey] = item_1;\r\n                    }\r\n                    else {\r\n                        item_1 = target[configKey];\r\n                    }\r\n                }\r\n                else {\r\n                    // Get item from the object\r\n                    item_1 = target[configKey];\r\n                }\r\n                /**\r\n                 * It is...\r\n                 * --------------------------------------------------------------------\r\n                 */\r\n                if (item_1 instanceof Adapter) {\r\n                    // ... an Adapter, try to add handlers to it\r\n                    // ------------------------------------------------------------------\r\n                    _this.processAdapters(item_1, configValue);\r\n                }\r\n                else if (item_1 instanceof EventDispatcher) {\r\n                    // ... an EventDispatcher, try to add handlers to it\r\n                    // ------------------------------------------------------------------\r\n                    _this.processEvents(item_1, configValue);\r\n                }\r\n                else if (configKey == \"locale\" && $type.isString(configValue)) {\r\n                    // ... a locale specified as string, e.g. \"fr_FR\"\r\n                    // ------------------------------------------------------------------\r\n                    if (window[\"am4lang_\" + configValue]) {\r\n                        target[configKey] = window[\"am4lang_\" + configValue];\r\n                    }\r\n                }\r\n                else if (configKey == \"parent\" && $type.isString(configValue)) {\r\n                    // ... a parent referred via its it\r\n                    // ------------------------------------------------------------------\r\n                    var parent_1 = _this.map.getKey(configValue);\r\n                    if (parent_1) {\r\n                        target[configKey] = parent_1;\r\n                    }\r\n                    else {\r\n                        _this.addDelayedMap(\"parent\", configValue);\r\n                    }\r\n                }\r\n                else if (_this.asIs(configKey)) {\r\n                    // ... a special field, just set it to new value\r\n                    // ------------------------------------------------------------------\r\n                    // (no need to add each indvidual item)\r\n                    target[configKey] = configValue;\r\n                }\r\n                else if (_this.asFunction(configKey) && $type.isString(configValue)) {\r\n                    // ... a field indicating function name to look for in registry\r\n                    // ------------------------------------------------------------------\r\n                    if ($type.hasValue(registry.registeredClasses[configValue])) {\r\n                        target[configKey] = registry.registeredClasses[configValue];\r\n                    }\r\n                    else {\r\n                        throw Error(\"Invalid easing function: \" + configValue);\r\n                    }\r\n                }\r\n                else if (configValue instanceof BaseObject) {\r\n                    // ... a BaseObject object, we just going to use it as it is\r\n                    // ------------------------------------------------------------------\r\n                    target[configKey] = configValue;\r\n                }\r\n                else if (item_1 instanceof BaseObject) {\r\n                    // ... another child BaseObject\r\n                    // ------------------------------------------------------------------\r\n                    // Let's just pass in config part in and let itself deal with it\r\n                    item_1.config = configValue;\r\n                }\r\n                else if (item_1 instanceof ListTemplate || item_1 instanceof OrderedListTemplate || item_1 instanceof SortedListTemplate) {\r\n                    // ... a list with template\r\n                    // ------------------------------------------------------------------\r\n                    // Let's see what we can do with it\r\n                    if ($type.isArray(configValue)) {\r\n                        // It's an array.\r\n                        // Create a list item for entry, or try to apply properties to an\r\n                        // existing entry if possible and it is present.\r\n                        if (item_1 instanceof ListTemplate) {\r\n                            _this.processListTemplate(configValue, item_1);\r\n                        }\r\n                        else {\r\n                            _this.processOrderedTemplate(configValue, item_1);\r\n                        }\r\n                    }\r\n                    else if ($type.isObject(configValue)) {\r\n                        // It's a single oject.\r\n                        // Treat it as a template.\r\n                        if (configValue instanceof BaseObject) {\r\n                            // Item is already a BaseObject, no need to process it further\r\n                            item_1.template = configValue;\r\n                        }\r\n                        else {\r\n                            // Now let's find out if the whole object if a template, or we\r\n                            // need to get it from `template` key\r\n                            var templateValue = void 0;\r\n                            if ($type.hasValue(configValue.template)) {\r\n                                templateValue = configValue.template;\r\n                            }\r\n                            else {\r\n                                templateValue = configValue;\r\n                            }\r\n                            if (item_1.template instanceof BaseObject) {\r\n                                // Template is a BaseObject so we will just let its config\r\n                                // deal with the configuration\r\n                                item_1.template.config = templateValue;\r\n                            }\r\n                            else {\r\n                                $object.each(templateValue, function (entryKey, entryValue) {\r\n                                    var listItem = item_1.template[entryKey];\r\n                                    if (listItem instanceof Adapter) {\r\n                                        _this.processAdapters(listItem, entryValue);\r\n                                    }\r\n                                    else if (listItem instanceof EventDispatcher) {\r\n                                        _this.processEvents(listItem, entryValue);\r\n                                    }\r\n                                    else if (listItem instanceof DictionaryTemplate) {\r\n                                        _this.processDictionaryTemplate(listItem, entryValue);\r\n                                    }\r\n                                    else if (item_1.template[entryKey] instanceof BaseObject) {\r\n                                        // Template is a BaseObject. Let it deal with its own config.\r\n                                        item_1.template[entryKey].config = entryValue;\r\n                                    }\r\n                                    else if ($type.isObject(entryValue) && $type.hasValue(entryValue[\"type\"])) {\r\n                                        listItem = _this.createClassInstance(entryValue[\"type\"]);\r\n                                        if (listItem) {\r\n                                            if (listItem instanceof BaseObject) {\r\n                                                listItem.config = entryValue;\r\n                                            }\r\n                                            item_1.template[entryKey] = listItem;\r\n                                        }\r\n                                        else {\r\n                                            item_1.template[entryKey] = entryValue;\r\n                                        }\r\n                                    }\r\n                                    else if (listItem instanceof List) {\r\n                                        // It's List, process it\r\n                                        _this.processList(entryValue, listItem);\r\n                                    }\r\n                                    else {\r\n                                        // Aything else. Just assing and be done with it.\r\n                                        item_1.template[entryKey] = _this.maybeColorOrPercent(entryValue);\r\n                                    }\r\n                                });\r\n                            }\r\n                            // Check maybe there are `values` to insert\r\n                            if ($type.hasValue(configValue.values)) {\r\n                                if (item_1 instanceof ListTemplate) {\r\n                                    _this.processListTemplate(configValue.values, item_1);\r\n                                }\r\n                                else {\r\n                                    _this.processOrderedTemplate(configValue.values, item_1);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Something else?\r\n                        // Not sure what to do with it on a list - ignore\r\n                    }\r\n                }\r\n                else if (item_1 instanceof List) {\r\n                    // ... a list\r\n                    // ------------------------------------------------------------------\r\n                    if (configKey == \"children\") {\r\n                        _this.processList(configValue, item_1, _this);\r\n                    }\r\n                    else {\r\n                        _this.processList(configValue, item_1);\r\n                    }\r\n                }\r\n                else if (item_1 instanceof DictionaryTemplate) {\r\n                    // ... a dictionary with template\r\n                    // ------------------------------------------------------------------\r\n                    _this.processDictionaryTemplate(item_1, configValue);\r\n                }\r\n                else if (item_1 instanceof Dictionary) {\r\n                    // ... a dictionary\r\n                    // ------------------------------------------------------------------\r\n                    _this.processDictionary(item_1, configValue);\r\n                }\r\n                else if (item_1 instanceof Color || item_1 instanceof Percent) {\r\n                    // ... it's a Color or Percent\r\n                    // ------------------------------------------------------------------\r\n                    target[configKey] = _this.maybeColorOrPercent(configValue);\r\n                }\r\n                else if ($type.isObject(item_1) && $type.isObject(configValue)) {\r\n                    // ... a regular object\r\n                    // ------------------------------------------------------------------\r\n                    $object.copyAllProperties(configValue, item_1);\r\n                }\r\n                else {\r\n                    // ... something else - probably a simple property or object\r\n                    // ------------------------------------------------------------------\r\n                    // Maybe convert to `Percent` or `Color`?\r\n                    configValue = _this.maybeColorOrPercent(configValue);\r\n                    // Assign\r\n                    target[configKey] = configValue;\r\n                }\r\n            }\r\n            else if (!_this.isReserved(configKey)) {\r\n                // Doesn't have property set. But we're going to assume JSON config\r\n                // creator knows what he/she is doing and set it anyway.\r\n                target[configKey] = configValue;\r\n            }\r\n        }, this.configOrder);\r\n        // Any errors?\r\n        if (this.processingErrors.length) {\r\n            var errors = this.processingErrors.join(\"\\n\");\r\n            this._processingErrors = [];\r\n            throw Error(errors);\r\n        }\r\n    };\r\n    /**\r\n     * Tries to detect if value is color or percent and converts to proper object\r\n     * if necessary.\r\n     *\r\n     * Returns the same source value if no color/percent detected\r\n     *\r\n     * @param value  Source value\r\n     * @return Converted value\r\n     */\r\n    BaseObject.prototype.maybeColorOrPercent = function (value) {\r\n        if ($type.isString(value)) {\r\n            if (value.match(/^[\\-]?[0-9.]+\\%$/)) {\r\n                return percent($type.toNumber(value));\r\n            }\r\n            else if (value.match(/^\\#[0-9abcdef]{3,}$/i)) {\r\n                return color(value);\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    BaseObject.prototype.processAdapters = function (item, config) {\r\n        var _this = this;\r\n        if ($type.isArray(config)) {\r\n            $array.each(config, function (entry, index) {\r\n                item.add(entry.key, entry.callback, entry.priority || 0, _this);\r\n            });\r\n        }\r\n        else if ($type.isObject(config)) {\r\n            $object.each(config, function (key, entry) {\r\n                if (!item.has(key, entry)) {\r\n                    item.add(key, entry);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    BaseObject.prototype.processEvents = function (item, config) {\r\n        var _this = this;\r\n        if ($type.isArray(config)) {\r\n            $array.each(config, function (entry, index) {\r\n                item.on(entry.type, entry.callback, _this);\r\n            });\r\n        }\r\n        else if ($type.isObject(config)) {\r\n            $object.each(config, function (key, entry) {\r\n                if (!item.has(key, entry)) {\r\n                    item.on(key, entry);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Processes JSON config for a [[DictionaryTemplate]] item.\r\n     *\r\n     * @todo Description\r\n     * @param item    Item\r\n     * @param config  Config\r\n     */\r\n    BaseObject.prototype.processDictionaryTemplate = function (item, config) {\r\n        // We can only process object\r\n        // Not sure what to do with other types - ignore\r\n        if ($type.isObject(config)) {\r\n            // Create an entry for each item, or override properties for\r\n            // existing one.\r\n            $object.each(config, function (entryKey, entryValue) {\r\n                var listItem;\r\n                // Get existing one, or create a new one\r\n                if (entryKey == \"template\") {\r\n                    listItem = item.template;\r\n                }\r\n                else if (item.hasKey(entryKey)) {\r\n                    listItem = item.getKey(entryKey);\r\n                }\r\n                else {\r\n                    listItem = item.create(entryKey);\r\n                }\r\n                // Set data\r\n                if (listItem instanceof BaseObject) {\r\n                    listItem.config = entryValue;\r\n                }\r\n                else if ($type.isObject(listItem) && $type.isObject(entryValue)) {\r\n                    $object.copyAllProperties(entryValue, listItem);\r\n                }\r\n                else {\r\n                    listItem.setKey(entryKey, entryValue);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Processes JSON config for a [[Dictionary]] item.\r\n     *\r\n     * @todo Description\r\n     * @param item    Item\r\n     * @param config  Config\r\n     */\r\n    BaseObject.prototype.processDictionary = function (item, config) {\r\n        // We can only process object\r\n        // Not sure what to do with other types - ignore\r\n        if ($type.isObject(config)) {\r\n            // Create an entry for each item, or override properties for\r\n            // existing one.\r\n            // @todo support for non-basic types\r\n            $object.each(config, function (entryKey, entryValue) {\r\n                item.setKey(entryKey, entryValue);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Processes [[ListTemplate]].\r\n     *\r\n     * @param configValue  Config value\r\n     * @param item         Item\r\n     */\r\n    BaseObject.prototype.processListTemplate = function (configValue, item) {\r\n        var _this = this;\r\n        $array.each(configValue, function (entry, index) {\r\n            var type = _this.getConfigEntryType(entry);\r\n            var listItem;\r\n            if (item.hasIndex(index) && !entry[\"forceCreate\"]) {\r\n                listItem = item.getIndex(index);\r\n            }\r\n            else if (entry instanceof BaseObject) {\r\n                // Item is already a BaseObject, no need to process it further\r\n                item.push(entry);\r\n                return;\r\n            }\r\n            else if (type) {\r\n                listItem = item.create(type);\r\n            }\r\n            else {\r\n                listItem = item.create();\r\n            }\r\n            if (entry === listItem) {\r\n                // It's already the same item, do nothing\r\n            }\r\n            else {\r\n                if ($type.isObject(entry)) {\r\n                    // If the list item is BaseObject, we just need to let it\r\n                    // deal if its own config\r\n                    if (listItem instanceof BaseObject) {\r\n                        listItem.config = entry;\r\n                    }\r\n                    else if ($type.isObject(listItem) && $type.isObject(entry)) {\r\n                        $object.copyAllProperties(entry, listItem);\r\n                    }\r\n                    else {\r\n                        item.setIndex(item.indexOf(listItem), entry);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        // Truncate the list if it contains less items than the config\r\n        // array\r\n        while (configValue.length > item.length) {\r\n            item.pop();\r\n        }\r\n    };\r\n    /**\r\n     * Processes [[OrdererListTemplate]] or [[SortedListTemplate]].\r\n     *\r\n     * @param configValue  Config value\r\n     * @param item         Item\r\n     */\r\n    BaseObject.prototype.processOrderedTemplate = function (configValue, item) {\r\n        var _this = this;\r\n        $array.each(configValue, function (entry, index) {\r\n            var type = _this.getConfigEntryType(entry);\r\n            var listItem;\r\n            if (type) {\r\n                listItem = item.create(type);\r\n            }\r\n            else {\r\n                listItem = item.create();\r\n            }\r\n            if ($type.isObject(entry)) {\r\n                // If the list item is BaseObject, we just need to let it\r\n                // deal if its own config\r\n                if (listItem instanceof BaseObject) {\r\n                    listItem.config = entry;\r\n                }\r\n                else if ($type.isObject(listItem) && $type.isObject(entry)) {\r\n                    $object.copyAllProperties(entry, listItem);\r\n                }\r\n                else {\r\n                    item.insert(entry);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Processes [[List]].\r\n     *\r\n     * @param configValue  Config value\r\n     * @param item         Item\r\n     */\r\n    BaseObject.prototype.processList = function (configValue, item, parent) {\r\n        var _this = this;\r\n        // Convert to array if necessary\r\n        if (!$type.isArray(configValue)) {\r\n            configValue = [configValue];\r\n        }\r\n        // It's an array\r\n        // Create a list item for entry\r\n        var itemCount = item.length;\r\n        var extraCount = 0;\r\n        $array.each(configValue, function (entry, index) {\r\n            if ($type.isObject(entry)) {\r\n                // An object.\r\n                //\r\n                // Let's see if we can instantiate a class out of it, or we need\r\n                // to push it into list as it is.\r\n                //\r\n                // If there are items already at the specified index in the list,\r\n                // apply properties rather than create a new one.\r\n                var listItem = void 0;\r\n                if ((index < itemCount) && !entry[\"forceCreate\"]) {\r\n                    listItem = item.getIndex(index);\r\n                }\r\n                else if (entry instanceof BaseObject) {\r\n                    // Item is already a BaseObject, no need to process it further\r\n                    item.push(entry);\r\n                    return;\r\n                }\r\n                else {\r\n                    extraCount++;\r\n                    listItem = _this.createEntryInstance(entry);\r\n                    if (parent) {\r\n                        listItem.parent = parent;\r\n                    }\r\n                    else {\r\n                        item.push(listItem);\r\n                    }\r\n                }\r\n                // If the list item is BaseObject, we just need to let it\r\n                // deal if its own config\r\n                if (listItem instanceof BaseObject) {\r\n                    listItem.config = entry;\r\n                }\r\n                else if ($type.isObject(listItem) && $type.isObject(entry)) {\r\n                    $object.copyAllProperties(entry, listItem);\r\n                }\r\n            }\r\n            else {\r\n                // Basic value.\r\n                // Just push it into list, or override existing value\r\n                if (item.hasIndex(index)) {\r\n                    item.setIndex(index, entry);\r\n                }\r\n                else {\r\n                    item.push(entry);\r\n                }\r\n            }\r\n        });\r\n        // Truncate the list if it contains less items than the config\r\n        // array\r\n        while (!parent && (configValue.length + extraCount) < item.length) {\r\n            item.pop();\r\n        }\r\n    };\r\n    /**\r\n     * This function is used to sort element's JSON config properties, so that\r\n     * some properties that absolutely need to be processed last, can be put at\r\n     * the end.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param a  Element 1\r\n     * @param b  Element 2\r\n     * @return Sorting number\r\n     */\r\n    BaseObject.prototype.configOrder = function (a, b) {\r\n        if (a == b) {\r\n            return 0;\r\n        }\r\n        // Language must come first, so it's all set up when the rest of the\r\n        // elements are being instantiated\r\n        else if (a == \"language\") {\r\n            return -1;\r\n        }\r\n        else if (b == \"language\") {\r\n            return 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * Checks if field should be just assigned as is, without any checking when\r\n     * processing JSON config.\r\n     *\r\n     * Extending functions can override this function to do their own checks.\r\n     *\r\n     * @param field  Field name\r\n     * @return Assign as is?\r\n     */\r\n    BaseObject.prototype.asIs = function (field) {\r\n        return $array.indexOf([\"locale\"], field) != -1;\r\n    };\r\n    /**\r\n     * Checks if field needs to be converted to function, if it is specified\r\n     * as string.\r\n     *\r\n     * @param field  Field name\r\n     * @return Assign as function?\r\n     */\r\n    BaseObject.prototype.asFunction = function (field) {\r\n        return false;\r\n    };\r\n    /**\r\n     * Creates a relevant class instance if such class definition exists.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param className  Class name\r\n     * @return Instance\r\n     */\r\n    BaseObject.prototype.createClassInstance = function (className) {\r\n        if ($type.hasValue(registry.registeredClasses[className])) {\r\n            return new registry.registeredClasses[className]();\r\n        }\r\n        else {\r\n            throw Error(\"Invalid type: \\\"\" + className + \"\\\".\");\r\n        }\r\n    };\r\n    /**\r\n     * Creates a class instance for a config entry using it's type. (as set in\r\n     * `type` property)\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config part\r\n     * @return Instance\r\n     */\r\n    BaseObject.prototype.createEntryInstance = function (config) {\r\n        var res;\r\n        if ($type.hasValue(config[\"type\"])) {\r\n            res = this.createClassInstance(config[\"type\"]);\r\n        }\r\n        if (!res) {\r\n            return config;\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Determines config object type.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config part\r\n     * @return Type\r\n     */\r\n    BaseObject.prototype.getConfigEntryType = function (config) {\r\n        if ($type.hasValue(config[\"type\"])) {\r\n            if ($type.hasValue(registry.registeredClasses[config[\"type\"]])) {\r\n                return registry.registeredClasses[config[\"type\"]];\r\n            }\r\n            else {\r\n                throw Error(\"Invalid type: \\\"\" + config[\"type\"] + \"\\\".\");\r\n            }\r\n        }\r\n        return;\r\n    };\r\n    /**\r\n     * Checks if this element has a property.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param prop  Property name\r\n     * @return Has property?\r\n     */\r\n    BaseObject.prototype.hasProperty = function (prop) {\r\n        return prop in this ? true : false;\r\n    };\r\n    /**\r\n     * Checkes whether JSON key is a reserved keyword.\r\n     *\r\n     * @param key  Key\r\n     * @return Reserved\r\n     */\r\n    BaseObject.prototype.isReserved = function (key) {\r\n        return [\"type\", \"forceCreate\"].indexOf(key) !== -1;\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"processingErrors\", {\r\n        /**\r\n         * A list of errors that happened during JSON processing.\r\n         *\r\n         * @return Errors\r\n         */\r\n        get: function () {\r\n            if (!this._processingErrors) {\r\n                this._processingErrors = [];\r\n            }\r\n            return this._processingErrors;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return BaseObject;\r\n}());\r\nexport { BaseObject };\r\n;\r\n/**\r\n * A version of [[BaseObject]] with events properties and methods.\r\n * Classes that use [[EventDispatcher]] should extend this instead of\r\n * [[BaseObject]] directly.\r\n */\r\nvar BaseObjectEvents = /** @class */ (function (_super) {\r\n    __extends(BaseObjectEvents, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function BaseObjectEvents() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"BaseObjectEvents\";\r\n        return _this;\r\n    }\r\n    Object.defineProperty(BaseObjectEvents.prototype, \"events\", {\r\n        /**\r\n         * An [[EventDispatcher]] instance\r\n         */\r\n        get: function () {\r\n            if (!this._eventDispatcher) {\r\n                this._eventDispatcher = new EventDispatcher();\r\n                this._disposers.push(this._eventDispatcher);\r\n            }\r\n            return this._eventDispatcher;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    //public set events(value:EventDispatcher<AMEvent<this, this[\"_events\"]>>){\r\n    //\tthis._eventDispatcher = value;\r\n    //}\r\n    /**\r\n     * Dispatches an event using own event dispatcher. Will automatically\r\n     * populate event data object with event type and target (this element).\r\n     * It also checks if there are any handlers registered for this sepecific\r\n     * event.\r\n     *\r\n     * @param eventType Event type (name)\r\n     * @param data      Data to pass into event handler(s)\r\n     */\r\n    BaseObjectEvents.prototype.dispatch = function (eventType, data) {\r\n        // @todo Implement proper type check\r\n        if (this._eventDispatcher) {\r\n            if (this.events.isEnabled(eventType)) {\r\n                if (data) {\r\n                    data.type = eventType;\r\n                    data.target = data.target || this;\r\n                    this.events.dispatch(eventType, {\r\n                        type: eventType,\r\n                        target: this\r\n                    });\r\n                }\r\n                else {\r\n                    this.events.dispatch(eventType, {\r\n                        type: eventType,\r\n                        target: this\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Works like `dispatch`, except event is triggered immediately, without\r\n     * waiting for the next frame cycle.\r\n     *\r\n     * @param eventType Event type (name)\r\n     * @param data      Data to pass into event handler(s)\r\n     */\r\n    BaseObjectEvents.prototype.dispatchImmediately = function (eventType, data) {\r\n        // @todo Implement proper type check\r\n        if (this._eventDispatcher) {\r\n            if (this.events.isEnabled(eventType)) {\r\n                if (data) {\r\n                    data.type = eventType;\r\n                    data.target = data.target || this;\r\n                    this.events.dispatchImmediately(eventType, data);\r\n                }\r\n                else {\r\n                    this.events.dispatchImmediately(eventType, {\r\n                        type: eventType,\r\n                        target: this\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Sprite]].\r\n     *\r\n     * @param source Source object\r\n     */\r\n    BaseObjectEvents.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (source._eventDispatcher) {\r\n            this.events.copyFrom(source._eventDispatcher);\r\n        }\r\n    };\r\n    return BaseObjectEvents;\r\n}(BaseObject));\r\nexport { BaseObjectEvents };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}