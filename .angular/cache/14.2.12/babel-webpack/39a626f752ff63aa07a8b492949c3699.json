{"ast":null,"code":"/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Dictionary } from \"./Dictionary\";\nimport * as $type from \"./Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Represents object cache.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Better storage\r\n * @todo TTL logging\r\n * @todo Garbage collector\r\n */\n\nvar Cache =\n/** @class */\nfunction () {\n  function Cache() {\n    /**\r\n     * Storage for cache items.\r\n     */\n    this._storage = new Dictionary();\n    /**\r\n     * Default TTL in milliseconds.\r\n     */\n\n    this.ttl = 1000;\n  }\n  /**\r\n   * Caches or updates cached value, resets TTL.\r\n   *\r\n   * If `ttl` is set to zero, item will never expire.\r\n   *\r\n   * @param owner  An id of the object that owns this cache\r\n   * @param key    Index key\r\n   * @param value  Value\r\n   * @param ttl    TTL of the cache to live in milliseconds\r\n   */\n\n\n  Cache.prototype.set = function (owner, key, value, ttl) {\n    // Create if storage does not exist for this owner\n    var ownerStorage = this._storage.insertKeyIfEmpty(owner, function () {\n      return new Dictionary();\n    }); // Create cache item\n\n\n    var item = {\n      \"touched\": new Date().getTime(),\n      \"ttl\": $type.isNumber(ttl) ? ttl : this.ttl,\n      \"value\": value\n    }; // Set\n\n    ownerStorage.setKey(key, item);\n  };\n  /**\r\n   * Rerturns cached item, respecting TTL.\r\n   *\r\n   * @param owner  An id of the object that owns this cache\r\n   * @param key    Index key\r\n   * @param value  Value to return if cache not available\r\n   * @return Value, or `undefined` if not set\r\n   */\n\n\n  Cache.prototype.get = function (owner, key, value) {\n    if (value === void 0) {\n      value = undefined;\n    } // \t\t || ypeof this._storage[owner][key] === \"undefined\" || this._storage[owner][key].expired === true) {\n\n\n    if (this._storage.hasKey(owner)) {\n      var ownerStorage = this._storage.getKey(owner);\n\n      if (ownerStorage.hasKey(key)) {\n        var cacheItem = ownerStorage.getKey(key);\n\n        if (cacheItem.ttl && cacheItem.touched + cacheItem.ttl < new Date().getTime()) {\n          cacheItem.expired = true;\n        }\n\n        if (cacheItem.expired) {\n          ownerStorage.removeKey(key);\n          return value;\n        }\n\n        return cacheItem.value;\n      } else {\n        return value;\n      }\n    } else {\n      return value;\n    }\n  };\n  /**\r\n   * Clears cache for specific owner or everything.\r\n   *\r\n   * @param owner Owner to clear cache for\r\n   */\n\n\n  Cache.prototype.clear = function (owner) {\n    if (owner) {\n      this._storage.removeKey(owner);\n    } else {\n      this._storage.clear();\n    }\n  };\n\n  return Cache;\n}();\n\nexport { Cache };\n/**\r\n * ============================================================================\r\n * GLOBAL INSTANCE\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A global instance of cache. Use this instance to cache any values.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport var cache = new Cache();","map":{"version":3,"names":["Dictionary","$type","Cache","_storage","ttl","prototype","set","owner","key","value","ownerStorage","insertKeyIfEmpty","item","Date","getTime","isNumber","setKey","get","undefined","hasKey","getKey","cacheItem","touched","expired","removeKey","clear","cache"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/Cache.js"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Dictionary } from \"./Dictionary\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents object cache.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Better storage\r\n * @todo TTL logging\r\n * @todo Garbage collector\r\n */\r\nvar Cache = /** @class */ (function () {\r\n    function Cache() {\r\n        /**\r\n         * Storage for cache items.\r\n         */\r\n        this._storage = new Dictionary();\r\n        /**\r\n         * Default TTL in milliseconds.\r\n         */\r\n        this.ttl = 1000;\r\n    }\r\n    /**\r\n     * Caches or updates cached value, resets TTL.\r\n     *\r\n     * If `ttl` is set to zero, item will never expire.\r\n     *\r\n     * @param owner  An id of the object that owns this cache\r\n     * @param key    Index key\r\n     * @param value  Value\r\n     * @param ttl    TTL of the cache to live in milliseconds\r\n     */\r\n    Cache.prototype.set = function (owner, key, value, ttl) {\r\n        // Create if storage does not exist for this owner\r\n        var ownerStorage = this._storage.insertKeyIfEmpty(owner, function () { return new Dictionary(); });\r\n        // Create cache item\r\n        var item = {\r\n            \"touched\": new Date().getTime(),\r\n            \"ttl\": $type.isNumber(ttl) ? ttl : this.ttl,\r\n            \"value\": value\r\n        };\r\n        // Set\r\n        ownerStorage.setKey(key, item);\r\n    };\r\n    /**\r\n     * Rerturns cached item, respecting TTL.\r\n     *\r\n     * @param owner  An id of the object that owns this cache\r\n     * @param key    Index key\r\n     * @param value  Value to return if cache not available\r\n     * @return Value, or `undefined` if not set\r\n     */\r\n    Cache.prototype.get = function (owner, key, value) {\r\n        if (value === void 0) { value = undefined; }\r\n        // \t\t || ypeof this._storage[owner][key] === \"undefined\" || this._storage[owner][key].expired === true) {\r\n        if (this._storage.hasKey(owner)) {\r\n            var ownerStorage = this._storage.getKey(owner);\r\n            if (ownerStorage.hasKey(key)) {\r\n                var cacheItem = ownerStorage.getKey(key);\r\n                if (cacheItem.ttl && ((cacheItem.touched + cacheItem.ttl) < new Date().getTime())) {\r\n                    cacheItem.expired = true;\r\n                }\r\n                if (cacheItem.expired) {\r\n                    ownerStorage.removeKey(key);\r\n                    return value;\r\n                }\r\n                return cacheItem.value;\r\n            }\r\n            else {\r\n                return value;\r\n            }\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    };\r\n    /**\r\n     * Clears cache for specific owner or everything.\r\n     *\r\n     * @param owner Owner to clear cache for\r\n     */\r\n    Cache.prototype.clear = function (owner) {\r\n        if (owner) {\r\n            this._storage.removeKey(owner);\r\n        }\r\n        else {\r\n            this._storage.clear();\r\n        }\r\n    };\r\n    return Cache;\r\n}());\r\nexport { Cache };\r\n/**\r\n * ============================================================================\r\n * GLOBAL INSTANCE\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A global instance of cache. Use this instance to cache any values.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport var cache = new Cache();\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,QAA2B,cAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,QAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,KAAK;AAAG;AAAe,YAAY;EACnC,SAASA,KAAT,GAAiB;IACb;AACR;AACA;IACQ,KAAKC,QAAL,GAAgB,IAAIH,UAAJ,EAAhB;IACA;AACR;AACA;;IACQ,KAAKI,GAAL,GAAW,IAAX;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIF,KAAK,CAACG,SAAN,CAAgBC,GAAhB,GAAsB,UAAUC,KAAV,EAAiBC,GAAjB,EAAsBC,KAAtB,EAA6BL,GAA7B,EAAkC;IACpD;IACA,IAAIM,YAAY,GAAG,KAAKP,QAAL,CAAcQ,gBAAd,CAA+BJ,KAA/B,EAAsC,YAAY;MAAE,OAAO,IAAIP,UAAJ,EAAP;IAA0B,CAA9E,CAAnB,CAFoD,CAGpD;;;IACA,IAAIY,IAAI,GAAG;MACP,WAAW,IAAIC,IAAJ,GAAWC,OAAX,EADJ;MAEP,OAAOb,KAAK,CAACc,QAAN,CAAeX,GAAf,IAAsBA,GAAtB,GAA4B,KAAKA,GAFjC;MAGP,SAASK;IAHF,CAAX,CAJoD,CASpD;;IACAC,YAAY,CAACM,MAAb,CAAoBR,GAApB,EAAyBI,IAAzB;EACH,CAXD;EAYA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIV,KAAK,CAACG,SAAN,CAAgBY,GAAhB,GAAsB,UAAUV,KAAV,EAAiBC,GAAjB,EAAsBC,KAAtB,EAA6B;IAC/C,IAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;MAAEA,KAAK,GAAGS,SAAR;IAAoB,CADG,CAE/C;;;IACA,IAAI,KAAKf,QAAL,CAAcgB,MAAd,CAAqBZ,KAArB,CAAJ,EAAiC;MAC7B,IAAIG,YAAY,GAAG,KAAKP,QAAL,CAAciB,MAAd,CAAqBb,KAArB,CAAnB;;MACA,IAAIG,YAAY,CAACS,MAAb,CAAoBX,GAApB,CAAJ,EAA8B;QAC1B,IAAIa,SAAS,GAAGX,YAAY,CAACU,MAAb,CAAoBZ,GAApB,CAAhB;;QACA,IAAIa,SAAS,CAACjB,GAAV,IAAmBiB,SAAS,CAACC,OAAV,GAAoBD,SAAS,CAACjB,GAA/B,GAAsC,IAAIS,IAAJ,GAAWC,OAAX,EAA5D,EAAmF;UAC/EO,SAAS,CAACE,OAAV,GAAoB,IAApB;QACH;;QACD,IAAIF,SAAS,CAACE,OAAd,EAAuB;UACnBb,YAAY,CAACc,SAAb,CAAuBhB,GAAvB;UACA,OAAOC,KAAP;QACH;;QACD,OAAOY,SAAS,CAACZ,KAAjB;MACH,CAVD,MAWK;QACD,OAAOA,KAAP;MACH;IACJ,CAhBD,MAiBK;MACD,OAAOA,KAAP;IACH;EACJ,CAvBD;EAwBA;AACJ;AACA;AACA;AACA;;;EACIP,KAAK,CAACG,SAAN,CAAgBoB,KAAhB,GAAwB,UAAUlB,KAAV,EAAiB;IACrC,IAAIA,KAAJ,EAAW;MACP,KAAKJ,QAAL,CAAcqB,SAAd,CAAwBjB,KAAxB;IACH,CAFD,MAGK;MACD,KAAKJ,QAAL,CAAcsB,KAAd;IACH;EACJ,CAPD;;EAQA,OAAOvB,KAAP;AACH,CA/E0B,EAA3B;;AAgFA,SAASA,KAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIwB,KAAK,GAAG,IAAIxB,KAAJ,EAAZ"},"metadata":{},"sourceType":"module"}