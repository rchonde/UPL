{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { XYCursor } from \"./XYCursor\";\nimport { Percent, percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\n\nvar RadarCursor =\n/** @class */\nfunction (_super) {\n  __extends(RadarCursor, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function RadarCursor() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"RadarCursor\";\n    _this.radius = percent(100);\n    _this.innerRadius = percent(0); // Apply theme\n\n    _this.applyTheme();\n\n    _this.mask = undefined;\n    return _this;\n  }\n  /**\r\n   * Checks if point is within bounds of a container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param point  Point to check\r\n   * @return Fits within container?\r\n   */\n\n\n  RadarCursor.prototype.fitsToBounds = function (point) {\n    var radius = $math.getDistance(point); //if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\n    //return false;\n    //}\n\n    if (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) {\n      // ok to add/remove some\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(RadarCursor.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * Starting angle of the cursor's radial line.\r\n     *\r\n     * @param value Start angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarCursor.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * End angle of the cursor's radial line.\r\n     *\r\n     * @param value End angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  RadarCursor.prototype.triggerMoveReal = function (point, force) {\n    if (!this.xAxis || this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled)) {\n      this.updateLineX(this.point);\n    }\n\n    if (!this.yAxis || this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled)) {\n      this.updateLineY(this.point);\n    }\n\n    this.updateSelection();\n\n    _super.prototype.triggerMoveReal.call(this, point, force);\n  };\n  /**\r\n   * (Re)draws the horizontal (circular) cursor's line.\r\n   *\r\n   * @param point New target point\r\n   */\n\n\n  RadarCursor.prototype.updateLineX = function (point) {\n    var radius = this.pixelRadius;\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    var innerRadius = this.pixelInnerRadius;\n\n    if (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\n      var angle = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\n      var path = void 0;\n\n      if (this.lineX && this.lineX.visible) {\n        this.lineX.moveTo({\n          x: 0,\n          y: 0\n        }); // fill\n\n        if (this.xAxis && this.fullWidthLineX) {\n          var startPoint = this.xAxis.currentItemStartPoint;\n          var endPoint = this.xAxis.currentItemEndPoint;\n\n          if (startPoint && endPoint) {\n            var fillStartAngle = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\n            var fillEndAngle = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\n            var arc = fillEndAngle - fillStartAngle; // clockwise\n            // this is needed, normalizeAngle doesn't solve it\n\n            if (startAngle < endAngle) {\n              if (arc < 0) {\n                arc += 360;\n              }\n            } // ccw\n            else {\n              if (arc > 0) {\n                arc -= 360;\n              }\n            }\n\n            angle -= arc / 2;\n            path = $path.moveTo({\n              x: innerRadius * $math.cos(angle),\n              y: innerRadius * $math.sin(angle)\n            }) + $path.lineTo({\n              x: radius * $math.cos(angle),\n              y: radius * $math.sin(angle)\n            }) + $path.arcTo(angle, arc, radius) + $path.lineTo({\n              x: innerRadius * $math.cos(angle + arc),\n              y: innerRadius * $math.sin(angle + arc)\n            }) + $path.arcTo(angle + arc, -arc, innerRadius);\n          }\n        } // line\n\n\n        if (!path) {\n          path = $path.moveTo({\n            x: innerRadius * $math.cos(angle),\n            y: innerRadius * $math.sin(angle)\n          }) + $path.lineTo({\n            x: radius * $math.cos(angle),\n            y: radius * $math.sin(angle)\n          });\n        }\n\n        this.lineX.path = path;\n      }\n    }\n  };\n  /**\r\n   * (Re)draws the vertical (radial) cursor's line.\r\n   *\r\n   * @param point New target point\r\n   */\n\n\n  RadarCursor.prototype.updateLineY = function (point) {\n    if (this.lineY && this.lineY.visible) {\n      var startAngle = this.startAngle;\n      var endAngle = this.endAngle;\n      var truePixelRadius = this.truePixelRadius;\n      var radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\n\n      if ($type.isNumber(radius) && $type.isNumber(startAngle)) {\n        this.lineY.moveTo({\n          x: 0,\n          y: 0\n        });\n        var path = void 0;\n        var arc = endAngle - startAngle;\n\n        if (this.yAxis && this.fullWidthLineY) {\n          // fill\n          var startPoint = this.yAxis.currentItemStartPoint;\n          var endPoint = this.yAxis.currentItemEndPoint;\n\n          if (startPoint && endPoint) {\n            var innerRadius = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\n            radius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\n            path = $path.moveTo({\n              x: radius * $math.cos(startAngle),\n              y: radius * $math.sin(startAngle)\n            }) + $path.arcTo(startAngle, arc, radius);\n            path += $path.moveTo({\n              x: innerRadius * $math.cos(endAngle),\n              y: innerRadius * $math.sin(endAngle)\n            }) + $path.arcTo(endAngle, -arc, innerRadius);\n          }\n        }\n\n        if (!path) {\n          path = $path.moveTo({\n            x: radius * $math.cos(startAngle),\n            y: radius * $math.sin(startAngle)\n          }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\n        }\n\n        this.lineY.path = path;\n      }\n    }\n  };\n  /**\r\n   * Updates selection dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  RadarCursor.prototype.updateSelection = function () {\n    if (this._usesSelection) {\n      var downPoint = this.downPoint;\n\n      if (downPoint) {\n        var point = this.point;\n        var radius = this.pixelRadius;\n        var truePixelRadius = this.truePixelRadius;\n        var innerRadius = this.pixelInnerRadius;\n        var startAngle = Math.min(this.startAngle, this.endAngle);\n        var endAngle = Math.max(this.startAngle, this.endAngle);\n        var downAngle = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\n        var angle = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\n        var downRadius = $math.getDistance(downPoint);\n\n        if (downRadius < truePixelRadius) {\n          var currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\n          this._prevAngle = angle;\n          var path = $path.moveTo({\n            x: 0,\n            y: 0\n          });\n          var downSin = $math.sin(downAngle);\n          var downCos = $math.cos(downAngle);\n          var sin = $math.sin(angle);\n          var cos = $math.cos(angle);\n          var behavior = this.behavior;\n\n          if (behavior == \"zoomX\" || behavior == \"selectX\") {\n            path += $path.lineTo({\n              x: radius * downCos,\n              y: radius * downSin\n            }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({\n              x: innerRadius * cos,\n              y: innerRadius * sin\n            }) + $path.arcTo(angle, downAngle - angle, innerRadius);\n          } else if (behavior == \"zoomY\" || behavior == \"selectY\") {\n            path = $path.moveTo({\n              x: currentRadius * $math.cos(startAngle),\n              y: currentRadius * $math.sin(startAngle)\n            }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({\n              x: downRadius * $math.cos(endAngle),\n              y: downRadius * $math.sin(endAngle)\n            }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\n          } else if (behavior == \"zoomXY\") {\n            path = $path.moveTo({\n              x: currentRadius * $math.cos(downAngle),\n              y: currentRadius * $math.sin(downAngle)\n            }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({\n              x: downRadius * $math.cos(angle),\n              y: downRadius * $math.sin(angle)\n            }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\n          }\n\n          this.selection.path = path;\n        }\n\n        this.selection.moveTo({\n          x: 0,\n          y: 0\n        });\n      }\n    }\n  };\n  /**\r\n   * Updates cursors current positions.\r\n   */\n\n\n  RadarCursor.prototype.getPositions = function () {\n    // positions are used by axes or series\n    var chart = this.chart;\n\n    if (chart) {\n      var innerRadius = this.pixelInnerRadius;\n      var radius = this.truePixelRadius - innerRadius;\n      var startAngle = this.startAngle;\n      var endAngle = this.endAngle;\n      var angle = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\n      var xPosition = (angle - startAngle) / (endAngle - startAngle);\n      this.xPosition = xPosition;\n      this.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\n    }\n  };\n  /**\r\n   * Overriding inherited method, so that nothing happens when it's triggered.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  RadarCursor.prototype.updatePoint = function (point) {};\n  /**\r\n   * Updates Cursor's position when axis tooltip changes horizontal position.\r\n   *\r\n   * @param event Axis event\r\n   */\n\n\n  RadarCursor.prototype.handleXTooltipPosition = function (event) {\n    if (this.xAxis.cursorTooltipEnabled) {\n      var tooltip = this.xAxis.tooltip;\n      this.updateLineX($utils.svgPointToSprite({\n        x: tooltip.pixelX,\n        y: tooltip.pixelY\n      }, this));\n    }\n  };\n  /**\r\n   * Updates Cursor's position when axis tooltip changes vertical position.\r\n   *\r\n   * @todo Description\r\n   * @param event Axis event\r\n   */\n\n\n  RadarCursor.prototype.handleYTooltipPosition = function (event) {\n    if (this.yAxis.cursorTooltipEnabled) {\n      var tooltip = this.yAxis.tooltip;\n      this.updateLineY($utils.svgPointToSprite({\n        x: tooltip.pixelX,\n        y: tooltip.pixelY\n      }, this));\n    }\n  };\n  /**\r\n   * needs to be overriden\r\n   * @ignore\r\n   */\n\n\n  RadarCursor.prototype.updateLinePositions = function (point) {};\n  /**\r\n   * [getRanges description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  RadarCursor.prototype.getRanges = function () {\n    var downPoint = this.downPoint;\n\n    if (downPoint) {\n      var upPoint = this.upPoint;\n      var chart = this.chart;\n\n      if (chart) {\n        var radius = this.pixelRadius;\n        var startAngle = this.startAngle;\n        var endAngle = this.endAngle;\n        var downAngle = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\n        var upAngle = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\n        var downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\n        var upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\n        var startX = 0;\n        var endX = 1;\n        var startY = 0;\n        var endY = 1;\n        var behavior = this.behavior;\n\n        if (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\n          var arc = endAngle - startAngle;\n          startX = $math.round((downAngle - startAngle) / arc, 5);\n          endX = $math.round((upAngle - startAngle) / arc, 5);\n        }\n\n        if (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\n          startY = $math.round(downRadius / radius, 5);\n          endY = $math.round(upRadius / radius, 5);\n        }\n\n        this.xRange = {\n          start: Math.min(startX, endX),\n          end: Math.max(startX, endX)\n        };\n        this.yRange = {\n          start: Math.min(startY, endY),\n          end: Math.max(startY, endY)\n        };\n\n        if (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {// void\n        } else {\n          this.selection.hide();\n        }\n      }\n    }\n  };\n  /**\r\n   * Overriding inherited method, so that nothing happens when `updateSize`\r\n   * is triggered.\r\n   *\r\n   * RadarCursor is quite complicated and needs own sizing logic.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  RadarCursor.prototype.updateSize = function () {};\n\n  Object.defineProperty(RadarCursor.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius of the cursor's circular line.\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, false, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarCursor.prototype, \"pixelRadius\", {\n    /**\r\n     * Outer radius of the circular line in pixels.\r\n     *\r\n     * @return Outer radius (px)\r\n     * @readonly\r\n     */\n    get: function () {\n      return $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarCursor.prototype, \"truePixelRadius\", {\n    /**\r\n     * [truePixelRadius description]\r\n     *\r\n     * @todo Description\r\n     * @return Outer radius (px)\r\n     * @readonly\r\n     */\n    get: function () {\n      return $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarCursor.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the cursor's circular line.\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Inner radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarCursor.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * Inner radius of the circular line in pixels.\r\n     *\r\n     * @return Inner radius (px)\r\n     * @readonly\r\n     */\n    get: function () {\n      var innerRadius = this.innerRadius;\n\n      if (innerRadius instanceof Percent) {\n        innerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\n      }\n\n      return $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  RadarCursor.prototype.fixPoint = function (point) {\n    // overriding xy method\n    return point;\n  };\n\n  return RadarCursor;\n}(XYCursor);\n\nexport { RadarCursor };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;","map":{"version":3,"names":["__extends","XYCursor","Percent","percent","registry","$path","$math","$utils","$type","RadarCursor","_super","_this","call","className","radius","innerRadius","applyTheme","mask","undefined","prototype","fitsToBounds","point","getDistance","truePixelRadius","pixelInnerRadius","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","enumerable","configurable","triggerMoveReal","force","xAxis","cursorTooltipEnabled","tooltip","disabled","updateLineX","yAxis","updateLineY","updateSelection","pixelRadius","startAngle","endAngle","isNumber","angle","fitAngleToRange","getAngle","path","lineX","visible","moveTo","x","y","fullWidthLineX","startPoint","currentItemStartPoint","endPoint","currentItemEndPoint","fillStartAngle","fillEndAngle","arc","cos","sin","lineTo","arcTo","lineY","fitToRange","fullWidthLineY","_usesSelection","downPoint","Math","min","max","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","behavior","closePath","selection","getPositions","chart","xPosition","yPosition","updatePoint","handleXTooltipPosition","event","svgPointToSprite","pixelX","pixelY","handleYTooltipPosition","updateLinePositions","getRanges","upPoint","upAngle","upRadius","startX","endX","startY","endY","round","xRange","start","end","yRange","hide","updateSize","setPercentProperty","relativeRadiusToValue","relativeToValue","innerWidth","innerHeight","innerRadiusModifyer","fixPoint","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/cursors/RadarCursor.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\nimport { XYCursor } from \"./XYCursor\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nvar RadarCursor = /** @class */ (function (_super) {\r\n    __extends(RadarCursor, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarCursor() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"RadarCursor\";\r\n        _this.radius = percent(100);\r\n        _this.innerRadius = percent(0);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        _this.mask = undefined;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Checks if point is within bounds of a container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param point  Point to check\r\n     * @return Fits within container?\r\n     */\r\n    RadarCursor.prototype.fitsToBounds = function (point) {\r\n        var radius = $math.getDistance(point);\r\n        //if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n        //return false;\r\n        //}\r\n        if (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(RadarCursor.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Start angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the cursor's radial line.\r\n         *\r\n         * @param value Start angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"endAngle\", {\r\n        /**\r\n         * @return End angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * End angle of the cursor's radial line.\r\n         *\r\n         * @param value End angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    RadarCursor.prototype.triggerMoveReal = function (point, force) {\r\n        if (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n            this.updateLineX(this.point);\r\n        }\r\n        if (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n            this.updateLineY(this.point);\r\n        }\r\n        this.updateSelection();\r\n        _super.prototype.triggerMoveReal.call(this, point, force);\r\n    };\r\n    /**\r\n     * (Re)draws the horizontal (circular) cursor's line.\r\n     *\r\n     * @param point New target point\r\n     */\r\n    RadarCursor.prototype.updateLineX = function (point) {\r\n        var radius = this.pixelRadius;\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        var innerRadius = this.pixelInnerRadius;\r\n        if (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n            var angle = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n            var path = void 0;\r\n            if (this.lineX && this.lineX.visible) {\r\n                this.lineX.moveTo({ x: 0, y: 0 });\r\n                // fill\r\n                if (this.xAxis && this.fullWidthLineX) {\r\n                    var startPoint = this.xAxis.currentItemStartPoint;\r\n                    var endPoint = this.xAxis.currentItemEndPoint;\r\n                    if (startPoint && endPoint) {\r\n                        var fillStartAngle = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n                        var fillEndAngle = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n                        var arc = fillEndAngle - fillStartAngle;\r\n                        // clockwise\r\n                        // this is needed, normalizeAngle doesn't solve it\r\n                        if (startAngle < endAngle) {\r\n                            if (arc < 0) {\r\n                                arc += 360;\r\n                            }\r\n                        }\r\n                        // ccw\r\n                        else {\r\n                            if (arc > 0) {\r\n                                arc -= 360;\r\n                            }\r\n                        }\r\n                        angle -= arc / 2;\r\n                        path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n                            + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n                            + $path.arcTo(angle, arc, radius)\r\n                            + $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n                            + $path.arcTo(angle + arc, -arc, innerRadius);\r\n                    }\r\n                }\r\n                // line\r\n                if (!path) {\r\n                    path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n                }\r\n                this.lineX.path = path;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * (Re)draws the vertical (radial) cursor's line.\r\n     *\r\n     * @param point New target point\r\n     */\r\n    RadarCursor.prototype.updateLineY = function (point) {\r\n        if (this.lineY && this.lineY.visible) {\r\n            var startAngle = this.startAngle;\r\n            var endAngle = this.endAngle;\r\n            var truePixelRadius = this.truePixelRadius;\r\n            var radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n            if ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n                this.lineY.moveTo({ x: 0, y: 0 });\r\n                var path = void 0;\r\n                var arc = endAngle - startAngle;\r\n                if (this.yAxis && this.fullWidthLineY) {\r\n                    // fill\r\n                    var startPoint = this.yAxis.currentItemStartPoint;\r\n                    var endPoint = this.yAxis.currentItemEndPoint;\r\n                    if (startPoint && endPoint) {\r\n                        var innerRadius = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n                        radius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n                        path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n                        path += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n                    }\r\n                }\r\n                if (!path) {\r\n                    path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n                }\r\n                this.lineY.path = path;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates selection dimensions on size change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.updateSelection = function () {\r\n        if (this._usesSelection) {\r\n            var downPoint = this.downPoint;\r\n            if (downPoint) {\r\n                var point = this.point;\r\n                var radius = this.pixelRadius;\r\n                var truePixelRadius = this.truePixelRadius;\r\n                var innerRadius = this.pixelInnerRadius;\r\n                var startAngle = Math.min(this.startAngle, this.endAngle);\r\n                var endAngle = Math.max(this.startAngle, this.endAngle);\r\n                var downAngle = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n                var angle = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n                var downRadius = $math.getDistance(downPoint);\r\n                if (downRadius < truePixelRadius) {\r\n                    var currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n                    this._prevAngle = angle;\r\n                    var path = $path.moveTo({ x: 0, y: 0 });\r\n                    var downSin = $math.sin(downAngle);\r\n                    var downCos = $math.cos(downAngle);\r\n                    var sin = $math.sin(angle);\r\n                    var cos = $math.cos(angle);\r\n                    var behavior = this.behavior;\r\n                    if (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n                        path += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n                    }\r\n                    else if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n                        path = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n                    }\r\n                    else if (behavior == \"zoomXY\") {\r\n                        path = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n                    }\r\n                    this.selection.path = path;\r\n                }\r\n                this.selection.moveTo({ x: 0, y: 0 });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates cursors current positions.\r\n     */\r\n    RadarCursor.prototype.getPositions = function () {\r\n        // positions are used by axes or series\r\n        var chart = this.chart;\r\n        if (chart) {\r\n            var innerRadius = this.pixelInnerRadius;\r\n            var radius = this.truePixelRadius - innerRadius;\r\n            var startAngle = this.startAngle;\r\n            var endAngle = this.endAngle;\r\n            var angle = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n            var xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n            this.xPosition = xPosition;\r\n            this.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n        }\r\n    };\r\n    /**\r\n     * Overriding inherited method, so that nothing happens when it's triggered.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.updatePoint = function (point) {\r\n    };\r\n    /**\r\n     * Updates Cursor's position when axis tooltip changes horizontal position.\r\n     *\r\n     * @param event Axis event\r\n     */\r\n    RadarCursor.prototype.handleXTooltipPosition = function (event) {\r\n        if (this.xAxis.cursorTooltipEnabled) {\r\n            var tooltip = this.xAxis.tooltip;\r\n            this.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n        }\r\n    };\r\n    /**\r\n     * Updates Cursor's position when axis tooltip changes vertical position.\r\n     *\r\n     * @todo Description\r\n     * @param event Axis event\r\n     */\r\n    RadarCursor.prototype.handleYTooltipPosition = function (event) {\r\n        if (this.yAxis.cursorTooltipEnabled) {\r\n            var tooltip = this.yAxis.tooltip;\r\n            this.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n        }\r\n    };\r\n    /**\r\n     * needs to be overriden\r\n     * @ignore\r\n     */\r\n    RadarCursor.prototype.updateLinePositions = function (point) {\r\n    };\r\n    /**\r\n     * [getRanges description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    RadarCursor.prototype.getRanges = function () {\r\n        var downPoint = this.downPoint;\r\n        if (downPoint) {\r\n            var upPoint = this.upPoint;\r\n            var chart = this.chart;\r\n            if (chart) {\r\n                var radius = this.pixelRadius;\r\n                var startAngle = this.startAngle;\r\n                var endAngle = this.endAngle;\r\n                var downAngle = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n                var upAngle = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n                var downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n                var upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n                var startX = 0;\r\n                var endX = 1;\r\n                var startY = 0;\r\n                var endY = 1;\r\n                var behavior = this.behavior;\r\n                if (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n                    var arc = endAngle - startAngle;\r\n                    startX = $math.round((downAngle - startAngle) / arc, 5);\r\n                    endX = $math.round((upAngle - startAngle) / arc, 5);\r\n                }\r\n                if (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n                    startY = $math.round(downRadius / radius, 5);\r\n                    endY = $math.round(upRadius / radius, 5);\r\n                }\r\n                this.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n                this.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n                if (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.selection.hide();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Overriding inherited method, so that nothing happens when `updateSize`\r\n     * is triggered.\r\n     *\r\n     * RadarCursor is quite complicated and needs own sizing logic.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.updateSize = function () { };\r\n    Object.defineProperty(RadarCursor.prototype, \"radius\", {\r\n        /**\r\n         * @return Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the cursor's circular line.\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"pixelRadius\", {\r\n        /**\r\n         * Outer radius of the circular line in pixels.\r\n         *\r\n         * @return Outer radius (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"truePixelRadius\", {\r\n        /**\r\n         * [truePixelRadius description]\r\n         *\r\n         * @todo Description\r\n         * @return Outer radius (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            return $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the cursor's circular line.\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Inner radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * Inner radius of the circular line in pixels.\r\n         *\r\n         * @return Inner radius (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            var innerRadius = this.innerRadius;\r\n            if (innerRadius instanceof Percent) {\r\n                innerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n            }\r\n            return $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.fixPoint = function (point) {\r\n        // overriding xy method\r\n        return point;\r\n    };\r\n    return RadarCursor;\r\n}(XYCursor));\r\nexport { RadarCursor };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,0BAAjC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC/CV,SAAS,CAACS,WAAD,EAAcC,MAAd,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,WAAT,GAAuB;IACnB,IAAIE,KAAK,GACT;IACAD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;IAGAD,KAAK,CAACE,SAAN,GAAkB,aAAlB;IACAF,KAAK,CAACG,MAAN,GAAeX,OAAO,CAAC,GAAD,CAAtB;IACAQ,KAAK,CAACI,WAAN,GAAoBZ,OAAO,CAAC,CAAD,CAA3B,CANmB,CAOnB;;IACAQ,KAAK,CAACK,UAAN;;IACAL,KAAK,CAACM,IAAN,GAAaC,SAAb;IACA,OAAOP,KAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIF,WAAW,CAACU,SAAZ,CAAsBC,YAAtB,GAAqC,UAAUC,KAAV,EAAiB;IAClD,IAAIP,MAAM,GAAGR,KAAK,CAACgB,WAAN,CAAkBD,KAAlB,CAAb,CADkD,CAElD;IACA;IACA;;IACA,IAAIP,MAAM,GAAG,KAAKS,eAAL,GAAuB,CAAhC,IAAqCT,MAAM,GAAG,KAAKU,gBAAL,GAAwB,CAA1E,EAA6E;MAAE;MAC3E,OAAO,IAAP;IACH;;IACD,OAAO,KAAP;EACH,CATD;;EAUAC,MAAM,CAACC,cAAP,CAAsBjB,WAAW,CAACU,SAAlC,EAA6C,YAA7C,EAA2D;IACvD;AACR;AACA;IACQQ,GAAG,EAAE,YAAY;MACb,OAAO,KAAKC,gBAAL,CAAsB,YAAtB,CAAP;IACH,CANsD;;IAOvD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKC,gBAAL,CAAsB,YAAtB,EAAoCD,KAApC,EAA2C,IAA3C;IACH,CAdsD;IAevDE,UAAU,EAAE,IAf2C;IAgBvDC,YAAY,EAAE;EAhByC,CAA3D;EAkBAR,MAAM,CAACC,cAAP,CAAsBjB,WAAW,CAACU,SAAlC,EAA6C,UAA7C,EAAyD;IACrD;AACR;AACA;IACQQ,GAAG,EAAE,YAAY;MACb,OAAO,KAAKC,gBAAL,CAAsB,UAAtB,CAAP;IACH,CANoD;;IAOrD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKC,gBAAL,CAAsB,UAAtB,EAAkCD,KAAlC,EAAyC,IAAzC;IACH,CAdoD;IAerDE,UAAU,EAAE,IAfyC;IAgBrDC,YAAY,EAAE;EAhBuC,CAAzD;;EAkBAxB,WAAW,CAACU,SAAZ,CAAsBe,eAAtB,GAAwC,UAAUb,KAAV,EAAiBc,KAAjB,EAAwB;IAC5D,IAAI,CAAC,KAAKC,KAAN,IAAgB,KAAKA,KAAL,KAAe,CAAC,KAAKA,KAAL,CAAWC,oBAAZ,IAAoC,KAAKD,KAAL,CAAWE,OAAX,CAAmBC,QAAtE,CAApB,EAAsG;MAClG,KAAKC,WAAL,CAAiB,KAAKnB,KAAtB;IACH;;IACD,IAAI,CAAC,KAAKoB,KAAN,IAAgB,KAAKA,KAAL,KAAe,CAAC,KAAKA,KAAL,CAAWJ,oBAAZ,IAAoC,KAAKI,KAAL,CAAWH,OAAX,CAAmBC,QAAtE,CAApB,EAAsG;MAClG,KAAKG,WAAL,CAAiB,KAAKrB,KAAtB;IACH;;IACD,KAAKsB,eAAL;;IACAjC,MAAM,CAACS,SAAP,CAAiBe,eAAjB,CAAiCtB,IAAjC,CAAsC,IAAtC,EAA4CS,KAA5C,EAAmDc,KAAnD;EACH,CATD;EAUA;AACJ;AACA;AACA;AACA;;;EACI1B,WAAW,CAACU,SAAZ,CAAsBqB,WAAtB,GAAoC,UAAUnB,KAAV,EAAiB;IACjD,IAAIP,MAAM,GAAG,KAAK8B,WAAlB;IACA,IAAIC,UAAU,GAAG,KAAKA,UAAtB;IACA,IAAIC,QAAQ,GAAG,KAAKA,QAApB;IACA,IAAI/B,WAAW,GAAG,KAAKS,gBAAvB;;IACA,IAAIV,MAAM,GAAG,CAAT,IAAcN,KAAK,CAACuC,QAAN,CAAeF,UAAf,CAAd,IAA4CrC,KAAK,CAACuC,QAAN,CAAeD,QAAf,CAA5C,IAAwEtC,KAAK,CAACuC,QAAN,CAAehC,WAAf,CAA5E,EAAyG;MACrG,IAAIiC,KAAK,GAAG1C,KAAK,CAAC2C,eAAN,CAAsB3C,KAAK,CAAC4C,QAAN,CAAe7B,KAAf,CAAtB,EAA6CwB,UAA7C,EAAyDC,QAAzD,CAAZ;MACA,IAAIK,IAAI,GAAG,KAAK,CAAhB;;MACA,IAAI,KAAKC,KAAL,IAAc,KAAKA,KAAL,CAAWC,OAA7B,EAAsC;QAClC,KAAKD,KAAL,CAAWE,MAAX,CAAkB;UAAEC,CAAC,EAAE,CAAL;UAAQC,CAAC,EAAE;QAAX,CAAlB,EADkC,CAElC;;QACA,IAAI,KAAKpB,KAAL,IAAc,KAAKqB,cAAvB,EAAuC;UACnC,IAAIC,UAAU,GAAG,KAAKtB,KAAL,CAAWuB,qBAA5B;UACA,IAAIC,QAAQ,GAAG,KAAKxB,KAAL,CAAWyB,mBAA1B;;UACA,IAAIH,UAAU,IAAIE,QAAlB,EAA4B;YACxB,IAAIE,cAAc,GAAGxD,KAAK,CAAC2C,eAAN,CAAsB3C,KAAK,CAAC4C,QAAN,CAAeQ,UAAf,CAAtB,EAAkDb,UAAlD,EAA8DC,QAA9D,CAArB;YACA,IAAIiB,YAAY,GAAGzD,KAAK,CAAC2C,eAAN,CAAsB3C,KAAK,CAAC4C,QAAN,CAAeU,QAAf,CAAtB,EAAgDf,UAAhD,EAA4DC,QAA5D,CAAnB;YACA,IAAIkB,GAAG,GAAGD,YAAY,GAAGD,cAAzB,CAHwB,CAIxB;YACA;;YACA,IAAIjB,UAAU,GAAGC,QAAjB,EAA2B;cACvB,IAAIkB,GAAG,GAAG,CAAV,EAAa;gBACTA,GAAG,IAAI,GAAP;cACH;YACJ,CAJD,CAKA;YALA,KAMK;cACD,IAAIA,GAAG,GAAG,CAAV,EAAa;gBACTA,GAAG,IAAI,GAAP;cACH;YACJ;;YACDhB,KAAK,IAAIgB,GAAG,GAAG,CAAf;YACAb,IAAI,GAAG9C,KAAK,CAACiD,MAAN,CAAa;cAAEC,CAAC,EAAExC,WAAW,GAAGT,KAAK,CAAC2D,GAAN,CAAUjB,KAAV,CAAnB;cAAqCQ,CAAC,EAAEzC,WAAW,GAAGT,KAAK,CAAC4D,GAAN,CAAUlB,KAAV;YAAtD,CAAb,IACD3C,KAAK,CAAC8D,MAAN,CAAa;cAAEZ,CAAC,EAAEzC,MAAM,GAAGR,KAAK,CAAC2D,GAAN,CAAUjB,KAAV,CAAd;cAAgCQ,CAAC,EAAE1C,MAAM,GAAGR,KAAK,CAAC4D,GAAN,CAAUlB,KAAV;YAA5C,CAAb,CADC,GAED3C,KAAK,CAAC+D,KAAN,CAAYpB,KAAZ,EAAmBgB,GAAnB,EAAwBlD,MAAxB,CAFC,GAGDT,KAAK,CAAC8D,MAAN,CAAa;cAAEZ,CAAC,EAAExC,WAAW,GAAGT,KAAK,CAAC2D,GAAN,CAAUjB,KAAK,GAAGgB,GAAlB,CAAnB;cAA2CR,CAAC,EAAEzC,WAAW,GAAGT,KAAK,CAAC4D,GAAN,CAAUlB,KAAK,GAAGgB,GAAlB;YAA5D,CAAb,CAHC,GAID3D,KAAK,CAAC+D,KAAN,CAAYpB,KAAK,GAAGgB,GAApB,EAAyB,CAACA,GAA1B,EAA+BjD,WAA/B,CAJN;UAKH;QACJ,CA9BiC,CA+BlC;;;QACA,IAAI,CAACoC,IAAL,EAAW;UACPA,IAAI,GAAG9C,KAAK,CAACiD,MAAN,CAAa;YAAEC,CAAC,EAAExC,WAAW,GAAGT,KAAK,CAAC2D,GAAN,CAAUjB,KAAV,CAAnB;YAAqCQ,CAAC,EAAEzC,WAAW,GAAGT,KAAK,CAAC4D,GAAN,CAAUlB,KAAV;UAAtD,CAAb,IAAyF3C,KAAK,CAAC8D,MAAN,CAAa;YAAEZ,CAAC,EAAEzC,MAAM,GAAGR,KAAK,CAAC2D,GAAN,CAAUjB,KAAV,CAAd;YAAgCQ,CAAC,EAAE1C,MAAM,GAAGR,KAAK,CAAC4D,GAAN,CAAUlB,KAAV;UAA5C,CAAb,CAAhG;QACH;;QACD,KAAKI,KAAL,CAAWD,IAAX,GAAkBA,IAAlB;MACH;IACJ;EACJ,CA9CD;EA+CA;AACJ;AACA;AACA;AACA;;;EACI1C,WAAW,CAACU,SAAZ,CAAsBuB,WAAtB,GAAoC,UAAUrB,KAAV,EAAiB;IACjD,IAAI,KAAKgD,KAAL,IAAc,KAAKA,KAAL,CAAWhB,OAA7B,EAAsC;MAClC,IAAIR,UAAU,GAAG,KAAKA,UAAtB;MACA,IAAIC,QAAQ,GAAG,KAAKA,QAApB;MACA,IAAIvB,eAAe,GAAG,KAAKA,eAA3B;MACA,IAAIT,MAAM,GAAGR,KAAK,CAACgE,UAAN,CAAiBhE,KAAK,CAACgB,WAAN,CAAkBD,KAAlB,CAAjB,EAA2C,CAA3C,EAA8C,KAAKE,eAAnD,CAAb;;MACA,IAAIf,KAAK,CAACuC,QAAN,CAAejC,MAAf,KAA0BN,KAAK,CAACuC,QAAN,CAAeF,UAAf,CAA9B,EAA0D;QACtD,KAAKwB,KAAL,CAAWf,MAAX,CAAkB;UAAEC,CAAC,EAAE,CAAL;UAAQC,CAAC,EAAE;QAAX,CAAlB;QACA,IAAIL,IAAI,GAAG,KAAK,CAAhB;QACA,IAAIa,GAAG,GAAGlB,QAAQ,GAAGD,UAArB;;QACA,IAAI,KAAKJ,KAAL,IAAc,KAAK8B,cAAvB,EAAuC;UACnC;UACA,IAAIb,UAAU,GAAG,KAAKjB,KAAL,CAAWkB,qBAA5B;UACA,IAAIC,QAAQ,GAAG,KAAKnB,KAAL,CAAWoB,mBAA1B;;UACA,IAAIH,UAAU,IAAIE,QAAlB,EAA4B;YACxB,IAAI7C,WAAW,GAAGT,KAAK,CAACgE,UAAN,CAAiBhE,KAAK,CAACgB,WAAN,CAAkBoC,UAAlB,CAAjB,EAAgD,CAAhD,EAAmDnC,eAAnD,CAAlB;YACAT,MAAM,GAAGR,KAAK,CAACgE,UAAN,CAAiBhE,KAAK,CAACgB,WAAN,CAAkBsC,QAAlB,CAAjB,EAA8C,CAA9C,EAAiDrC,eAAjD,CAAT;YACA4B,IAAI,GAAG9C,KAAK,CAACiD,MAAN,CAAa;cAAEC,CAAC,EAAEzC,MAAM,GAAGR,KAAK,CAAC2D,GAAN,CAAUpB,UAAV,CAAd;cAAqCW,CAAC,EAAE1C,MAAM,GAAGR,KAAK,CAAC4D,GAAN,CAAUrB,UAAV;YAAjD,CAAb,IAAyFxC,KAAK,CAAC+D,KAAN,CAAYvB,UAAZ,EAAwBmB,GAAxB,EAA6BlD,MAA7B,CAAhG;YACAqC,IAAI,IAAI9C,KAAK,CAACiD,MAAN,CAAa;cAAEC,CAAC,EAAExC,WAAW,GAAGT,KAAK,CAAC2D,GAAN,CAAUnB,QAAV,CAAnB;cAAwCU,CAAC,EAAEzC,WAAW,GAAGT,KAAK,CAAC4D,GAAN,CAAUpB,QAAV;YAAzD,CAAb,IAA+FzC,KAAK,CAAC+D,KAAN,CAAYtB,QAAZ,EAAsB,CAACkB,GAAvB,EAA4BjD,WAA5B,CAAvG;UACH;QACJ;;QACD,IAAI,CAACoC,IAAL,EAAW;UACPA,IAAI,GAAG9C,KAAK,CAACiD,MAAN,CAAa;YAAEC,CAAC,EAAEzC,MAAM,GAAGR,KAAK,CAAC2D,GAAN,CAAUpB,UAAV,CAAd;YAAqCW,CAAC,EAAE1C,MAAM,GAAGR,KAAK,CAAC4D,GAAN,CAAUrB,UAAV;UAAjD,CAAb,IAAyFxC,KAAK,CAAC+D,KAAN,CAAYvB,UAAZ,EAAwBC,QAAQ,GAAGD,UAAnC,EAA+C/B,MAA/C,CAAhG;QACH;;QACD,KAAKuD,KAAL,CAAWlB,IAAX,GAAkBA,IAAlB;MACH;IACJ;EACJ,CA3BD;EA4BA;AACJ;AACA;AACA;AACA;;;EACI1C,WAAW,CAACU,SAAZ,CAAsBwB,eAAtB,GAAwC,YAAY;IAChD,IAAI,KAAK6B,cAAT,EAAyB;MACrB,IAAIC,SAAS,GAAG,KAAKA,SAArB;;MACA,IAAIA,SAAJ,EAAe;QACX,IAAIpD,KAAK,GAAG,KAAKA,KAAjB;QACA,IAAIP,MAAM,GAAG,KAAK8B,WAAlB;QACA,IAAIrB,eAAe,GAAG,KAAKA,eAA3B;QACA,IAAIR,WAAW,GAAG,KAAKS,gBAAvB;QACA,IAAIqB,UAAU,GAAG6B,IAAI,CAACC,GAAL,CAAS,KAAK9B,UAAd,EAA0B,KAAKC,QAA/B,CAAjB;QACA,IAAIA,QAAQ,GAAG4B,IAAI,CAACE,GAAL,CAAS,KAAK/B,UAAd,EAA0B,KAAKC,QAA/B,CAAf;QACA,IAAI+B,SAAS,GAAGvE,KAAK,CAAC2C,eAAN,CAAsB3C,KAAK,CAAC4C,QAAN,CAAeuB,SAAf,CAAtB,EAAiD5B,UAAjD,EAA6DC,QAA7D,CAAhB;QACA,IAAIE,KAAK,GAAG1C,KAAK,CAAC2C,eAAN,CAAsB3C,KAAK,CAAC4C,QAAN,CAAe7B,KAAf,CAAtB,EAA6CwB,UAA7C,EAAyDC,QAAzD,CAAZ;QACA,IAAIgC,UAAU,GAAGxE,KAAK,CAACgB,WAAN,CAAkBmD,SAAlB,CAAjB;;QACA,IAAIK,UAAU,GAAGvD,eAAjB,EAAkC;UAC9B,IAAIwD,aAAa,GAAGzE,KAAK,CAACgE,UAAN,CAAiBhE,KAAK,CAACgB,WAAN,CAAkBD,KAAlB,CAAjB,EAA2C,CAA3C,EAA8CE,eAA9C,CAApB;UACA,KAAKyD,UAAL,GAAkBhC,KAAlB;UACA,IAAIG,IAAI,GAAG9C,KAAK,CAACiD,MAAN,CAAa;YAAEC,CAAC,EAAE,CAAL;YAAQC,CAAC,EAAE;UAAX,CAAb,CAAX;UACA,IAAIyB,OAAO,GAAG3E,KAAK,CAAC4D,GAAN,CAAUW,SAAV,CAAd;UACA,IAAIK,OAAO,GAAG5E,KAAK,CAAC2D,GAAN,CAAUY,SAAV,CAAd;UACA,IAAIX,GAAG,GAAG5D,KAAK,CAAC4D,GAAN,CAAUlB,KAAV,CAAV;UACA,IAAIiB,GAAG,GAAG3D,KAAK,CAAC2D,GAAN,CAAUjB,KAAV,CAAV;UACA,IAAImC,QAAQ,GAAG,KAAKA,QAApB;;UACA,IAAIA,QAAQ,IAAI,OAAZ,IAAuBA,QAAQ,IAAI,SAAvC,EAAkD;YAC9ChC,IAAI,IAAI9C,KAAK,CAAC8D,MAAN,CAAa;cAAEZ,CAAC,EAAEzC,MAAM,GAAGoE,OAAd;cAAuB1B,CAAC,EAAE1C,MAAM,GAAGmE;YAAnC,CAAb,IAA6D5E,KAAK,CAAC+D,KAAN,CAAYS,SAAZ,EAAuB7B,KAAK,GAAG6B,SAA/B,EAA0C/D,MAA1C,CAA7D,GAAiHT,KAAK,CAAC8D,MAAN,CAAa;cAAEZ,CAAC,EAAExC,WAAW,GAAGkD,GAAnB;cAAwBT,CAAC,EAAEzC,WAAW,GAAGmD;YAAzC,CAAb,CAAjH,GAAgL7D,KAAK,CAAC+D,KAAN,CAAYpB,KAAZ,EAAmB6B,SAAS,GAAG7B,KAA/B,EAAsCjC,WAAtC,CAAxL;UACH,CAFD,MAGK,IAAIoE,QAAQ,IAAI,OAAZ,IAAuBA,QAAQ,IAAI,SAAvC,EAAkD;YACnDhC,IAAI,GAAG9C,KAAK,CAACiD,MAAN,CAAa;cAAEC,CAAC,EAAEwB,aAAa,GAAGzE,KAAK,CAAC2D,GAAN,CAAUpB,UAAV,CAArB;cAA4CW,CAAC,EAAEuB,aAAa,GAAGzE,KAAK,CAAC4D,GAAN,CAAUrB,UAAV;YAA/D,CAAb,IAAuGxC,KAAK,CAAC+D,KAAN,CAAYvB,UAAZ,EAAwBC,QAAQ,GAAGD,UAAnC,EAA+CkC,aAA/C,CAAvG,GAAuK1E,KAAK,CAAC8D,MAAN,CAAa;cAAEZ,CAAC,EAAEuB,UAAU,GAAGxE,KAAK,CAAC2D,GAAN,CAAUnB,QAAV,CAAlB;cAAuCU,CAAC,EAAEsB,UAAU,GAAGxE,KAAK,CAAC4D,GAAN,CAAUpB,QAAV;YAAvD,CAAb,CAAvK,GAAoQzC,KAAK,CAAC+D,KAAN,CAAYtB,QAAZ,EAAsBD,UAAU,GAAGC,QAAnC,EAA6CgC,UAA7C,CAApQ,GAA+TzE,KAAK,CAAC+E,SAAN,EAAtU;UACH,CAFI,MAGA,IAAID,QAAQ,IAAI,QAAhB,EAA0B;YAC3BhC,IAAI,GAAG9C,KAAK,CAACiD,MAAN,CAAa;cAAEC,CAAC,EAAEwB,aAAa,GAAGzE,KAAK,CAAC2D,GAAN,CAAUY,SAAV,CAArB;cAA2CrB,CAAC,EAAEuB,aAAa,GAAGzE,KAAK,CAAC4D,GAAN,CAAUW,SAAV;YAA9D,CAAb,IAAqGxE,KAAK,CAAC+D,KAAN,CAAYS,SAAZ,EAAuB7B,KAAK,GAAG6B,SAA/B,EAA0CE,aAA1C,CAArG,GAAgK1E,KAAK,CAAC8D,MAAN,CAAa;cAAEZ,CAAC,EAAEuB,UAAU,GAAGxE,KAAK,CAAC2D,GAAN,CAAUjB,KAAV,CAAlB;cAAoCQ,CAAC,EAAEsB,UAAU,GAAGxE,KAAK,CAAC4D,GAAN,CAAUlB,KAAV;YAApD,CAAb,CAAhK,GAAuP3C,KAAK,CAAC+D,KAAN,CAAYpB,KAAZ,EAAmB6B,SAAS,GAAG7B,KAA/B,EAAsC8B,UAAtC,CAAvP,GAA2SzE,KAAK,CAAC+E,SAAN,EAAlT;UACH;;UACD,KAAKC,SAAL,CAAelC,IAAf,GAAsBA,IAAtB;QACH;;QACD,KAAKkC,SAAL,CAAe/B,MAAf,CAAsB;UAAEC,CAAC,EAAE,CAAL;UAAQC,CAAC,EAAE;QAAX,CAAtB;MACH;IACJ;EACJ,CApCD;EAqCA;AACJ;AACA;;;EACI/C,WAAW,CAACU,SAAZ,CAAsBmE,YAAtB,GAAqC,YAAY;IAC7C;IACA,IAAIC,KAAK,GAAG,KAAKA,KAAjB;;IACA,IAAIA,KAAJ,EAAW;MACP,IAAIxE,WAAW,GAAG,KAAKS,gBAAvB;MACA,IAAIV,MAAM,GAAG,KAAKS,eAAL,GAAuBR,WAApC;MACA,IAAI8B,UAAU,GAAG,KAAKA,UAAtB;MACA,IAAIC,QAAQ,GAAG,KAAKA,QAApB;MACA,IAAIE,KAAK,GAAG1C,KAAK,CAAC2C,eAAN,CAAsB3C,KAAK,CAAC4C,QAAN,CAAe,KAAK7B,KAApB,CAAtB,EAAkDwB,UAAlD,EAA8DC,QAA9D,CAAZ;MACA,IAAI0C,SAAS,GAAI,CAACxC,KAAK,GAAGH,UAAT,KAAwBC,QAAQ,GAAGD,UAAnC,CAAjB;MACA,KAAK2C,SAAL,GAAiBA,SAAjB;MACA,KAAKC,SAAL,GAAiBnF,KAAK,CAACgE,UAAN,CAAiB,CAAChE,KAAK,CAACgB,WAAN,CAAkB,KAAKD,KAAvB,IAAgCN,WAAjC,IAAgDD,MAAjE,EAAyE,CAAzE,EAA4E,CAA5E,CAAjB;IACH;EACJ,CAbD;EAcA;AACJ;AACA;AACA;AACA;;;EACIL,WAAW,CAACU,SAAZ,CAAsBuE,WAAtB,GAAoC,UAAUrE,KAAV,EAAiB,CACpD,CADD;EAEA;AACJ;AACA;AACA;AACA;;;EACIZ,WAAW,CAACU,SAAZ,CAAsBwE,sBAAtB,GAA+C,UAAUC,KAAV,EAAiB;IAC5D,IAAI,KAAKxD,KAAL,CAAWC,oBAAf,EAAqC;MACjC,IAAIC,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAzB;MACA,KAAKE,WAAL,CAAiBjC,MAAM,CAACsF,gBAAP,CAAwB;QAAEtC,CAAC,EAAEjB,OAAO,CAACwD,MAAb;QAAqBtC,CAAC,EAAElB,OAAO,CAACyD;MAAhC,CAAxB,EAAkE,IAAlE,CAAjB;IACH;EACJ,CALD;EAMA;AACJ;AACA;AACA;AACA;AACA;;;EACItF,WAAW,CAACU,SAAZ,CAAsB6E,sBAAtB,GAA+C,UAAUJ,KAAV,EAAiB;IAC5D,IAAI,KAAKnD,KAAL,CAAWJ,oBAAf,EAAqC;MACjC,IAAIC,OAAO,GAAG,KAAKG,KAAL,CAAWH,OAAzB;MACA,KAAKI,WAAL,CAAiBnC,MAAM,CAACsF,gBAAP,CAAwB;QAAEtC,CAAC,EAAEjB,OAAO,CAACwD,MAAb;QAAqBtC,CAAC,EAAElB,OAAO,CAACyD;MAAhC,CAAxB,EAAkE,IAAlE,CAAjB;IACH;EACJ,CALD;EAMA;AACJ;AACA;AACA;;;EACItF,WAAW,CAACU,SAAZ,CAAsB8E,mBAAtB,GAA4C,UAAU5E,KAAV,EAAiB,CAC5D,CADD;EAEA;AACJ;AACA;AACA;AACA;;;EACIZ,WAAW,CAACU,SAAZ,CAAsB+E,SAAtB,GAAkC,YAAY;IAC1C,IAAIzB,SAAS,GAAG,KAAKA,SAArB;;IACA,IAAIA,SAAJ,EAAe;MACX,IAAI0B,OAAO,GAAG,KAAKA,OAAnB;MACA,IAAIZ,KAAK,GAAG,KAAKA,KAAjB;;MACA,IAAIA,KAAJ,EAAW;QACP,IAAIzE,MAAM,GAAG,KAAK8B,WAAlB;QACA,IAAIC,UAAU,GAAG,KAAKA,UAAtB;QACA,IAAIC,QAAQ,GAAG,KAAKA,QAApB;QACA,IAAI+B,SAAS,GAAGvE,KAAK,CAAC2C,eAAN,CAAsB3C,KAAK,CAAC4C,QAAN,CAAeuB,SAAf,CAAtB,EAAiD,KAAK5B,UAAtD,EAAkE,KAAKC,QAAvE,CAAhB;QACA,IAAIsD,OAAO,GAAG9F,KAAK,CAAC2C,eAAN,CAAsB3C,KAAK,CAAC4C,QAAN,CAAeiD,OAAf,CAAtB,EAA+C,KAAKtD,UAApD,EAAgE,KAAKC,QAArE,CAAd;QACA,IAAIgC,UAAU,GAAGxE,KAAK,CAACgE,UAAN,CAAiBhE,KAAK,CAACgB,WAAN,CAAkBmD,SAAlB,CAAjB,EAA+C,CAA/C,EAAkD3D,MAAlD,CAAjB;QACA,IAAIuF,QAAQ,GAAG/F,KAAK,CAACgE,UAAN,CAAiBhE,KAAK,CAACgB,WAAN,CAAkB6E,OAAlB,CAAjB,EAA6C,CAA7C,EAAgDrF,MAAhD,CAAf;QACA,IAAIwF,MAAM,GAAG,CAAb;QACA,IAAIC,IAAI,GAAG,CAAX;QACA,IAAIC,MAAM,GAAG,CAAb;QACA,IAAIC,IAAI,GAAG,CAAX;QACA,IAAItB,QAAQ,GAAG,KAAKA,QAApB;;QACA,IAAIA,QAAQ,IAAI,OAAZ,IAAuBA,QAAQ,IAAI,SAAnC,IAAgDA,QAAQ,IAAI,QAA5D,IAAwEA,QAAQ,IAAI,UAAxF,EAAoG;UAChG,IAAInB,GAAG,GAAGlB,QAAQ,GAAGD,UAArB;UACAyD,MAAM,GAAGhG,KAAK,CAACoG,KAAN,CAAY,CAAC7B,SAAS,GAAGhC,UAAb,IAA2BmB,GAAvC,EAA4C,CAA5C,CAAT;UACAuC,IAAI,GAAGjG,KAAK,CAACoG,KAAN,CAAY,CAACN,OAAO,GAAGvD,UAAX,IAAyBmB,GAArC,EAA0C,CAA1C,CAAP;QACH;;QACD,IAAImB,QAAQ,IAAI,OAAZ,IAAuBA,QAAQ,IAAI,SAAnC,IAAgDA,QAAQ,IAAI,QAA5D,IAAwEA,QAAQ,IAAI,UAAxF,EAAoG;UAChGqB,MAAM,GAAGlG,KAAK,CAACoG,KAAN,CAAY5B,UAAU,GAAGhE,MAAzB,EAAiC,CAAjC,CAAT;UACA2F,IAAI,GAAGnG,KAAK,CAACoG,KAAN,CAAYL,QAAQ,GAAGvF,MAAvB,EAA+B,CAA/B,CAAP;QACH;;QACD,KAAK6F,MAAL,GAAc;UAAEC,KAAK,EAAElC,IAAI,CAACC,GAAL,CAAS2B,MAAT,EAAiBC,IAAjB,CAAT;UAAiCM,GAAG,EAAEnC,IAAI,CAACE,GAAL,CAAS0B,MAAT,EAAiBC,IAAjB;QAAtC,CAAd;QACA,KAAKO,MAAL,GAAc;UAAEF,KAAK,EAAElC,IAAI,CAACC,GAAL,CAAS6B,MAAT,EAAiBC,IAAjB,CAAT;UAAiCI,GAAG,EAAEnC,IAAI,CAACE,GAAL,CAAS4B,MAAT,EAAiBC,IAAjB;QAAtC,CAAd;;QACA,IAAI,KAAKtB,QAAL,IAAiB,SAAjB,IAA8B,KAAKA,QAAL,IAAiB,SAA/C,IAA4D,KAAKA,QAAL,IAAiB,UAAjF,EAA6F,CACzF;QACH,CAFD,MAGK;UACD,KAAKE,SAAL,CAAe0B,IAAf;QACH;MACJ;IACJ;EACJ,CArCD;EAsCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACItG,WAAW,CAACU,SAAZ,CAAsB6F,UAAtB,GAAmC,YAAY,CAAG,CAAlD;;EACAvF,MAAM,CAACC,cAAP,CAAsBjB,WAAW,CAACU,SAAlC,EAA6C,QAA7C,EAAuD;IACnD;AACR;AACA;IACQQ,GAAG,EAAE,YAAY;MACb,OAAO,KAAKC,gBAAL,CAAsB,QAAtB,CAAP;IACH,CANkD;;IAOnD;AACR;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKmF,kBAAL,CAAwB,QAAxB,EAAkCnF,KAAlC,EAAyC,KAAzC,EAAgD,KAAhD,EAAuD,EAAvD,EAA2D,KAA3D;IACH,CAfkD;IAgBnDE,UAAU,EAAE,IAhBuC;IAiBnDC,YAAY,EAAE;EAjBqC,CAAvD;EAmBAR,MAAM,CAACC,cAAP,CAAsBjB,WAAW,CAACU,SAAlC,EAA6C,aAA7C,EAA4D;IACxD;AACR;AACA;AACA;AACA;AACA;IACQQ,GAAG,EAAE,YAAY;MACb,OAAOpB,MAAM,CAAC2G,qBAAP,CAA6B,KAAKpG,MAAlC,EAA0C,KAAKS,eAA/C,CAAP;IACH,CATuD;IAUxDS,UAAU,EAAE,IAV4C;IAWxDC,YAAY,EAAE;EAX0C,CAA5D;EAaAR,MAAM,CAACC,cAAP,CAAsBjB,WAAW,CAACU,SAAlC,EAA6C,iBAA7C,EAAgE;IAC5D;AACR;AACA;AACA;AACA;AACA;AACA;IACQQ,GAAG,EAAE,YAAY;MACb,OAAOpB,MAAM,CAAC4G,eAAP,CAAuBhH,OAAO,CAAC,GAAD,CAA9B,EAAqCG,KAAK,CAACqE,GAAN,CAAU,KAAKyC,UAAL,GAAkB,CAA5B,EAA+B,KAAKC,WAAL,GAAmB,CAAlD,CAArC,CAAP;IACH,CAV2D;IAW5DrF,UAAU,EAAE,IAXgD;IAY5DC,YAAY,EAAE;EAZ8C,CAAhE;EAcAR,MAAM,CAACC,cAAP,CAAsBjB,WAAW,CAACU,SAAlC,EAA6C,aAA7C,EAA4D;IACxD;AACR;AACA;IACQQ,GAAG,EAAE,YAAY;MACb,OAAO,KAAKC,gBAAL,CAAsB,aAAtB,CAAP;IACH,CANuD;;IAOxD;AACR;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKmF,kBAAL,CAAwB,aAAxB,EAAuCnF,KAAvC,EAA8C,KAA9C,EAAqD,KAArD,EAA4D,EAA5D,EAAgE,KAAhE;IACH,CAfuD;IAgBxDE,UAAU,EAAE,IAhB4C;IAiBxDC,YAAY,EAAE;EAjB0C,CAA5D;EAmBAR,MAAM,CAACC,cAAP,CAAsBjB,WAAW,CAACU,SAAlC,EAA6C,kBAA7C,EAAiE;IAC7D;AACR;AACA;AACA;AACA;AACA;IACQQ,GAAG,EAAE,YAAY;MACb,IAAIZ,WAAW,GAAG,KAAKA,WAAvB;;MACA,IAAIA,WAAW,YAAYb,OAA3B,EAAoC;QAChCa,WAAW,GAAGZ,OAAO,CAAC,MAAMY,WAAW,CAACe,KAAlB,GAA0B,KAAKyD,KAAL,CAAW+B,mBAAtC,CAArB;MACH;;MACD,OAAO/G,MAAM,CAAC2G,qBAAP,CAA6BnG,WAA7B,EAA0C,KAAKQ,eAA/C,KAAmE,CAA1E;IACH,CAb4D;IAc7DS,UAAU,EAAE,IAdiD;IAe7DC,YAAY,EAAE;EAf+C,CAAjE;EAiBA;AACJ;AACA;AACA;;EACIxB,WAAW,CAACU,SAAZ,CAAsBoG,QAAtB,GAAiC,UAAUlG,KAAV,EAAiB;IAC9C;IACA,OAAOA,KAAP;EACH,CAHD;;EAIA,OAAOZ,WAAP;AACH,CAnZgC,CAmZ/BR,QAnZ+B,CAAjC;;AAoZA,SAASQ,WAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACAL,QAAQ,CAACoH,iBAAT,CAA2B,aAA3B,IAA4C/G,WAA5C"},"metadata":{},"sourceType":"module"}