{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { registry } from \"../Registry\";\nimport * as $path from \"./Path\";\nimport * as $array from \"../utils/Array\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nvar Tension =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param tensionX [description]\r\n   * @param tensionY [description]\r\n   */\n  function Tension(tensionX, tensionY) {\n    this._tensionX = tensionX;\n    this._tensionY = tensionY;\n  }\n  /**\r\n   * [smooth description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param points  [description]\r\n   * @return [description]\r\n   */\n\n\n  Tension.prototype.smooth = function (points) {\n    for (var i = points.length - 1; i > 0; i--) {\n      var p0 = points[i];\n      var p1 = points[i - 1];\n\n      if (Math.abs(p0.x - p1.x) < 0.1 && Math.abs(p0.y - p1.y) < 0.1) {\n        points.splice(i - 1, 1);\n      }\n    }\n\n    var tensionX = this._tensionX;\n    var tensionY = this._tensionY;\n\n    if (points.length < 3 || tensionX >= 1 && tensionY >= 1) {\n      return $path.polyline(points);\n    }\n\n    var first = points[0];\n    var last = points[points.length - 1];\n    var closed = false;\n\n    if ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\n      closed = true;\n    } // Can't moveTo here, as it wont be possible to have fill then.\n\n\n    var path = \"\";\n\n    for (var i = 0, len = points.length - 1; i < len; i++) {\n      var p0 = points[i - 1];\n      var p1 = points[i];\n      var p2 = points[i + 1];\n      var p3 = points[i + 2];\n\n      if (i === 0) {\n        if (closed) {\n          p0 = points[points.length - 2];\n        } else {\n          p0 = points[i];\n        }\n      } else if (i == points.length - 2) {\n        if (closed) {\n          p3 = points[1];\n        } else {\n          p3 = points[i + 1];\n        }\n      }\n\n      var controlPointA = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\n      var controlPointB = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\n      path += $path.cubicCurveTo(p2, controlPointA, controlPointB);\n    }\n\n    return path;\n  };\n\n  return Tension;\n}();\n\nexport { Tension };\n/**\r\n * Returns a waved line SVG path between two points.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point1            Starting point\r\n * @param point2            Ending point\r\n * @param waveLength        Wave length\r\n * @param waveHeight        Wave height\r\n * @param adjustWaveLength  Adjust wave length based on the actual line length\r\n * @return SVG path\r\n */\n\nexport function wavedLine(point1, point2, waveLength, waveHeight, tension, adjustWaveLength) {\n  var x1 = point1.x;\n  var y1 = point1.y;\n  var x2 = point2.x;\n  var y2 = point2.y;\n  var distance = $math.getDistance(point1, point2);\n\n  if (adjustWaveLength) {\n    waveLength = distance / Math.round(distance / waveLength);\n  }\n\n  var d = registry.getCache($utils.stringify([\"wavedLine\", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]));\n\n  if (!d) {\n    if (distance > 0) {\n      var angle = Math.atan2(y2 - y1, x2 - x1);\n      var cos = Math.cos(angle);\n      var sin = Math.sin(angle);\n      var waveLengthX = waveLength * cos;\n      var waveLengthY = waveLength * sin;\n\n      if (waveLength <= 1 || waveHeight <= 1) {\n        d = $path.lineTo(point2);\n      } else {\n        var halfWaveCount = Math.round(2 * distance / waveLength);\n        var points = [];\n        var sign_1 = 1;\n\n        if (x2 < x1) {\n          sign_1 *= -1;\n        }\n\n        if (y2 < y1) {\n          sign_1 *= -1;\n        }\n\n        for (var i = 0; i <= halfWaveCount; i++) {\n          sign_1 *= -1;\n          var x = x1 + i * waveLengthX / 2 + sign_1 * waveHeight / 2 * sin;\n          var y = y1 + i * waveLengthY / 2 - sign_1 * waveHeight / 2 * cos;\n          points.push({\n            x: x,\n            y: y\n          });\n        }\n\n        d = new Tension(tension, tension).smooth(points);\n      }\n    } else {\n      d = \"\";\n    }\n\n    registry.setCache($utils.stringify([\"wavedLine\", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]), d);\n  }\n\n  return d;\n}\n\nvar Monotone =\n/** @class */\nfunction () {\n  function Monotone(reversed, info) {\n    this._reversed = reversed;\n    this._closed = info.closed;\n  } // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n  // \"you can express cubic Hermite interpolation in terms of cubic BÃ©zier curves\n  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\n\n\n  Monotone.prototype._curve = function (x0, x1, y0, y1, t0, t1) {\n    var dx = (x1 - x0) / 3;\n\n    if (this._reversed) {\n      return $path.cubicCurveTo({\n        x: y1,\n        y: x1\n      }, {\n        x: y0 + dx * t0,\n        y: x0 + dx\n      }, {\n        x: y1 - dx * t1,\n        y: x1 - dx\n      });\n    } else {\n      return $path.cubicCurveTo({\n        x: x1,\n        y: y1\n      }, {\n        x: x0 + dx,\n        y: y0 + dx * t0\n      }, {\n        x: x1 - dx,\n        y: y1 - dx * t1\n      });\n    }\n  };\n\n  Monotone.prototype.smooth = function (points) {\n    var _this = this;\n\n    var x0 = NaN;\n    var x1 = NaN;\n    var y0 = NaN;\n    var y1 = NaN;\n    var t0 = NaN;\n    var point = 0;\n    var output = \"\";\n    $array.each(points, function (_a) {\n      var x = _a.x,\n          y = _a.y;\n\n      if (_this._reversed) {\n        var temp = x;\n        x = y;\n        y = temp;\n      }\n\n      var t1 = NaN;\n\n      if (!(x === x1 && y === y1)) {\n        switch (point) {\n          case 0:\n            point = 1;\n\n            if (_this._reversed) {\n              output += $path.lineTo({\n                x: y,\n                y: x\n              });\n            } else {\n              output += $path.lineTo({\n                x: x,\n                y: y\n              });\n            }\n\n            break;\n\n          case 1:\n            point = 2;\n            break;\n\n          case 2:\n            point = 3;\n            output += _this._curve(x0, x1, y0, y1, slope2(x0, x1, y0, y1, t1 = slope3(x0, x1, y0, y1, x, y)), t1);\n            break;\n\n          default:\n            output += _this._curve(x0, x1, y0, y1, t0, t1 = slope3(x0, x1, y0, y1, x, y));\n            break;\n        }\n\n        x0 = x1;\n        x1 = x;\n        y0 = y1;\n        y1 = y;\n        t0 = t1;\n      }\n    });\n\n    switch (point) {\n      case 2:\n        if (this._reversed) {\n          output += $path.lineTo({\n            x: y1,\n            y: x1\n          });\n        } else {\n          output += $path.lineTo({\n            x: x1,\n            y: y1\n          });\n        }\n\n        break;\n\n      case 3:\n        output += this._curve(x0, x1, y0, y1, t0, slope2(x0, x1, y0, y1, t0));\n        break;\n    }\n\n    if (this._closed) {\n      output += $path.closePath();\n    }\n\n    return output;\n  };\n\n  return Monotone;\n}();\n\nexport { Monotone }; // TODO move this someplace else\n\nfunction sign(x) {\n  return x < 0 ? -1 : 1;\n}\n\nfunction slope2(x0, x1, y0, y1, t) {\n  var h = x1 - x0;\n  return h ? (3 * (y1 - y0) / h - t) / 2 : t;\n}\n\nfunction slope3(x0, x1, y0, y1, x2, y2) {\n  var h0 = x1 - x0;\n  var h1 = x2 - x1;\n  var s0 = (y1 - y0) / (h0 || h1 < 0 && -0);\n  var s1 = (y2 - y1) / (h1 || h0 < 0 && -0);\n  var p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n}\n\nvar MonotoneX =\n/** @class */\nfunction (_super) {\n  __extends(MonotoneX, _super);\n\n  function MonotoneX(info) {\n    return _super.call(this, false, info) || this;\n  }\n\n  return MonotoneX;\n}(Monotone);\n\nexport { MonotoneX };\n\nvar MonotoneY =\n/** @class */\nfunction (_super) {\n  __extends(MonotoneY, _super);\n\n  function MonotoneY(info) {\n    return _super.call(this, true, info) || this;\n  }\n\n  return MonotoneY;\n}(Monotone);\n\nexport { MonotoneY };\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nvar Basis =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param info  [description]\r\n   */\n  function Basis(info) {\n    this._closed = info.closed;\n  }\n  /**\r\n   * [smooth description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param points  [description]\r\n   * @return [description]\r\n   */\n\n\n  Basis.prototype.smooth = function (points) {\n    var _this = this;\n\n    var x0 = NaN;\n    var x1 = NaN;\n    var x2 = NaN;\n    var x3 = NaN;\n    var x4 = NaN;\n    var y0 = NaN;\n    var y1 = NaN;\n    var y2 = NaN;\n    var y3 = NaN;\n    var y4 = NaN;\n    var point = 0;\n    var output = \"\";\n\n    var pushCurve = function (x, y) {\n      output += $path.cubicCurveTo({\n        x: (x0 + 4 * x1 + x) / 6,\n        y: (y0 + 4 * y1 + y) / 6\n      }, {\n        x: (2 * x0 + x1) / 3,\n        y: (2 * y0 + y1) / 3\n      }, {\n        x: (x0 + 2 * x1) / 3,\n        y: (y0 + 2 * y1) / 3\n      });\n    };\n\n    var pushPoint = function (_a) {\n      var x = _a.x,\n          y = _a.y;\n\n      switch (point) {\n        case 0:\n          point = 1;\n\n          if (_this._closed) {\n            x2 = x;\n            y2 = y;\n          } else {\n            output += $path.lineTo({\n              x: x,\n              y: y\n            });\n          }\n\n          break;\n\n        case 1:\n          point = 2;\n\n          if (_this._closed) {\n            x3 = x;\n            y3 = y;\n          }\n\n          break;\n\n        case 2:\n          point = 3;\n\n          if (_this._closed) {\n            x4 = x;\n            y4 = y;\n            output += $path.moveTo({\n              x: (x0 + 4 * x1 + x) / 6,\n              y: (y0 + 4 * y1 + y) / 6\n            });\n            break;\n          } else {\n            output += $path.lineTo({\n              x: (5 * x0 + x1) / 6,\n              y: (5 * y0 + y1) / 6\n            }); // fall-through\n          }\n\n        default:\n          pushCurve(x, y);\n          break;\n      }\n\n      x0 = x1;\n      x1 = x;\n      y0 = y1;\n      y1 = y;\n    };\n\n    $array.each(points, pushPoint);\n\n    if (this._closed) {\n      switch (point) {\n        case 1:\n          output += $path.moveTo({\n            x: x2,\n            y: y2\n          });\n          output += $path.closePath();\n          break;\n\n        case 2:\n          output += $path.moveTo({\n            x: (x2 + 2 * x3) / 3,\n            y: (y2 + 2 * y3) / 3\n          });\n          output += $path.lineTo({\n            x: (x3 + 2 * x2) / 3,\n            y: (y3 + 2 * y2) / 3\n          });\n          output += $path.closePath();\n          break;\n\n        case 3:\n          pushPoint({\n            x: x2,\n            y: y2\n          });\n          pushPoint({\n            x: x3,\n            y: y3\n          });\n          pushPoint({\n            x: x4,\n            y: y4\n          });\n          break;\n      }\n    } else {\n      switch (point) {\n        case 3:\n          pushCurve(x1, y1);\n        // fall-through\n\n        case 2:\n          output += $path.lineTo({\n            x: x1,\n            y: y1\n          });\n          break;\n      }\n\n      output += $path.closePath();\n    }\n\n    return output;\n  };\n\n  return Basis;\n}();\n\nexport { Basis };","map":{"version":3,"names":["__extends","registry","$path","$array","$utils","$math","Tension","tensionX","tensionY","_tensionX","_tensionY","prototype","smooth","points","i","length","p0","p1","Math","abs","x","y","splice","polyline","first","last","closed","round","path","len","p2","p3","controlPointA","getCubicControlPointA","controlPointB","getCubicControlPointB","cubicCurveTo","wavedLine","point1","point2","waveLength","waveHeight","tension","adjustWaveLength","x1","y1","x2","y2","distance","getDistance","d","getCache","stringify","angle","atan2","cos","sin","waveLengthX","waveLengthY","lineTo","halfWaveCount","sign_1","push","setCache","Monotone","reversed","info","_reversed","_closed","_curve","x0","y0","t0","t1","dx","_this","NaN","point","output","each","_a","temp","slope2","slope3","closePath","sign","t","h","h0","h1","s0","s1","p","min","MonotoneX","_super","call","MonotoneY","Basis","x3","x4","y3","y4","pushCurve","pushPoint","moveTo"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/rendering/Smoothing.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"./Path\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar Tension = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param tensionX [description]\r\n     * @param tensionY [description]\r\n     */\r\n    function Tension(tensionX, tensionY) {\r\n        this._tensionX = tensionX;\r\n        this._tensionY = tensionY;\r\n    }\r\n    /**\r\n     * [smooth description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param points  [description]\r\n     * @return [description]\r\n     */\r\n    Tension.prototype.smooth = function (points) {\r\n        for (var i = points.length - 1; i > 0; i--) {\r\n            var p0 = points[i];\r\n            var p1 = points[i - 1];\r\n            if (Math.abs(p0.x - p1.x) < 0.1 && Math.abs(p0.y - p1.y) < 0.1) {\r\n                points.splice(i - 1, 1);\r\n            }\r\n        }\r\n        var tensionX = this._tensionX;\r\n        var tensionY = this._tensionY;\r\n        if (points.length < 3 || (tensionX >= 1 && tensionY >= 1)) {\r\n            return $path.polyline(points);\r\n        }\r\n        var first = points[0];\r\n        var last = points[points.length - 1];\r\n        var closed = false;\r\n        if ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\r\n            closed = true;\r\n        }\r\n        // Can't moveTo here, as it wont be possible to have fill then.\r\n        var path = \"\";\r\n        for (var i = 0, len = points.length - 1; i < len; i++) {\r\n            var p0 = points[i - 1];\r\n            var p1 = points[i];\r\n            var p2 = points[i + 1];\r\n            var p3 = points[i + 2];\r\n            if (i === 0) {\r\n                if (closed) {\r\n                    p0 = points[points.length - 2];\r\n                }\r\n                else {\r\n                    p0 = points[i];\r\n                }\r\n            }\r\n            else if (i == points.length - 2) {\r\n                if (closed) {\r\n                    p3 = points[1];\r\n                }\r\n                else {\r\n                    p3 = points[i + 1];\r\n                }\r\n            }\r\n            var controlPointA = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\r\n            var controlPointB = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\r\n            path += $path.cubicCurveTo(p2, controlPointA, controlPointB);\r\n        }\r\n        return path;\r\n    };\r\n    return Tension;\r\n}());\r\nexport { Tension };\r\n/**\r\n * Returns a waved line SVG path between two points.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point1            Starting point\r\n * @param point2            Ending point\r\n * @param waveLength        Wave length\r\n * @param waveHeight        Wave height\r\n * @param adjustWaveLength  Adjust wave length based on the actual line length\r\n * @return SVG path\r\n */\r\nexport function wavedLine(point1, point2, waveLength, waveHeight, tension, adjustWaveLength) {\r\n    var x1 = point1.x;\r\n    var y1 = point1.y;\r\n    var x2 = point2.x;\r\n    var y2 = point2.y;\r\n    var distance = $math.getDistance(point1, point2);\r\n    if (adjustWaveLength) {\r\n        waveLength = distance / Math.round(distance / waveLength);\r\n    }\r\n    var d = registry.getCache($utils.stringify([\"wavedLine\", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]));\r\n    if (!d) {\r\n        if (distance > 0) {\r\n            var angle = Math.atan2(y2 - y1, x2 - x1);\r\n            var cos = Math.cos(angle);\r\n            var sin = Math.sin(angle);\r\n            var waveLengthX = waveLength * cos;\r\n            var waveLengthY = waveLength * sin;\r\n            if (waveLength <= 1 || waveHeight <= 1) {\r\n                d = $path.lineTo(point2);\r\n            }\r\n            else {\r\n                var halfWaveCount = Math.round(2 * distance / waveLength);\r\n                var points = [];\r\n                var sign_1 = 1;\r\n                if (x2 < x1) {\r\n                    sign_1 *= -1;\r\n                }\r\n                if (y2 < y1) {\r\n                    sign_1 *= -1;\r\n                }\r\n                for (var i = 0; i <= halfWaveCount; i++) {\r\n                    sign_1 *= -1;\r\n                    var x = x1 + i * waveLengthX / 2 + sign_1 * waveHeight / 2 * sin;\r\n                    var y = y1 + i * waveLengthY / 2 - sign_1 * waveHeight / 2 * cos;\r\n                    points.push({ x: x, y: y });\r\n                }\r\n                d = new Tension(tension, tension).smooth(points);\r\n            }\r\n        }\r\n        else {\r\n            d = \"\";\r\n        }\r\n        registry.setCache($utils.stringify([\"wavedLine\", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]), d);\r\n    }\r\n    return d;\r\n}\r\nvar Monotone = /** @class */ (function () {\r\n    function Monotone(reversed, info) {\r\n        this._reversed = reversed;\r\n        this._closed = info.closed;\r\n    }\r\n    // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\r\n    // \"you can express cubic Hermite interpolation in terms of cubic BÃ©zier curves\r\n    // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\r\n    Monotone.prototype._curve = function (x0, x1, y0, y1, t0, t1) {\r\n        var dx = (x1 - x0) / 3;\r\n        if (this._reversed) {\r\n            return $path.cubicCurveTo({ x: y1, y: x1 }, { x: y0 + dx * t0, y: x0 + dx }, { x: y1 - dx * t1, y: x1 - dx });\r\n        }\r\n        else {\r\n            return $path.cubicCurveTo({ x: x1, y: y1 }, { x: x0 + dx, y: y0 + dx * t0 }, { x: x1 - dx, y: y1 - dx * t1 });\r\n        }\r\n    };\r\n    Monotone.prototype.smooth = function (points) {\r\n        var _this = this;\r\n        var x0 = NaN;\r\n        var x1 = NaN;\r\n        var y0 = NaN;\r\n        var y1 = NaN;\r\n        var t0 = NaN;\r\n        var point = 0;\r\n        var output = \"\";\r\n        $array.each(points, function (_a) {\r\n            var x = _a.x, y = _a.y;\r\n            if (_this._reversed) {\r\n                var temp = x;\r\n                x = y;\r\n                y = temp;\r\n            }\r\n            var t1 = NaN;\r\n            if (!(x === x1 && y === y1)) {\r\n                switch (point) {\r\n                    case 0:\r\n                        point = 1;\r\n                        if (_this._reversed) {\r\n                            output += $path.lineTo({ x: y, y: x });\r\n                        }\r\n                        else {\r\n                            output += $path.lineTo({ x: x, y: y });\r\n                        }\r\n                        break;\r\n                    case 1:\r\n                        point = 2;\r\n                        break;\r\n                    case 2:\r\n                        point = 3;\r\n                        output += _this._curve(x0, x1, y0, y1, slope2(x0, x1, y0, y1, t1 = slope3(x0, x1, y0, y1, x, y)), t1);\r\n                        break;\r\n                    default:\r\n                        output += _this._curve(x0, x1, y0, y1, t0, t1 = slope3(x0, x1, y0, y1, x, y));\r\n                        break;\r\n                }\r\n                x0 = x1;\r\n                x1 = x;\r\n                y0 = y1;\r\n                y1 = y;\r\n                t0 = t1;\r\n            }\r\n        });\r\n        switch (point) {\r\n            case 2:\r\n                if (this._reversed) {\r\n                    output += $path.lineTo({ x: y1, y: x1 });\r\n                }\r\n                else {\r\n                    output += $path.lineTo({ x: x1, y: y1 });\r\n                }\r\n                break;\r\n            case 3:\r\n                output += this._curve(x0, x1, y0, y1, t0, slope2(x0, x1, y0, y1, t0));\r\n                break;\r\n        }\r\n        if (this._closed) {\r\n            output += $path.closePath();\r\n        }\r\n        return output;\r\n    };\r\n    return Monotone;\r\n}());\r\nexport { Monotone };\r\n// TODO move this someplace else\r\nfunction sign(x) {\r\n    return x < 0 ? -1 : 1;\r\n}\r\nfunction slope2(x0, x1, y0, y1, t) {\r\n    var h = x1 - x0;\r\n    return h ? (3 * (y1 - y0) / h - t) / 2 : t;\r\n}\r\nfunction slope3(x0, x1, y0, y1, x2, y2) {\r\n    var h0 = x1 - x0;\r\n    var h1 = x2 - x1;\r\n    var s0 = (y1 - y0) / (h0 || h1 < 0 && -0);\r\n    var s1 = (y2 - y1) / (h1 || h0 < 0 && -0);\r\n    var p = (s0 * h1 + s1 * h0) / (h0 + h1);\r\n    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\r\n}\r\nvar MonotoneX = /** @class */ (function (_super) {\r\n    __extends(MonotoneX, _super);\r\n    function MonotoneX(info) {\r\n        return _super.call(this, false, info) || this;\r\n    }\r\n    return MonotoneX;\r\n}(Monotone));\r\nexport { MonotoneX };\r\nvar MonotoneY = /** @class */ (function (_super) {\r\n    __extends(MonotoneY, _super);\r\n    function MonotoneY(info) {\r\n        return _super.call(this, true, info) || this;\r\n    }\r\n    return MonotoneY;\r\n}(Monotone));\r\nexport { MonotoneY };\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar Basis = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param info  [description]\r\n     */\r\n    function Basis(info) {\r\n        this._closed = info.closed;\r\n    }\r\n    /**\r\n     * [smooth description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param points  [description]\r\n     * @return [description]\r\n     */\r\n    Basis.prototype.smooth = function (points) {\r\n        var _this = this;\r\n        var x0 = NaN;\r\n        var x1 = NaN;\r\n        var x2 = NaN;\r\n        var x3 = NaN;\r\n        var x4 = NaN;\r\n        var y0 = NaN;\r\n        var y1 = NaN;\r\n        var y2 = NaN;\r\n        var y3 = NaN;\r\n        var y4 = NaN;\r\n        var point = 0;\r\n        var output = \"\";\r\n        var pushCurve = function (x, y) {\r\n            output += $path.cubicCurveTo({\r\n                x: (x0 + 4 * x1 + x) / 6,\r\n                y: (y0 + 4 * y1 + y) / 6\r\n            }, {\r\n                x: (2 * x0 + x1) / 3,\r\n                y: (2 * y0 + y1) / 3\r\n            }, {\r\n                x: (x0 + 2 * x1) / 3,\r\n                y: (y0 + 2 * y1) / 3\r\n            });\r\n        };\r\n        var pushPoint = function (_a) {\r\n            var x = _a.x, y = _a.y;\r\n            switch (point) {\r\n                case 0:\r\n                    point = 1;\r\n                    if (_this._closed) {\r\n                        x2 = x;\r\n                        y2 = y;\r\n                    }\r\n                    else {\r\n                        output += $path.lineTo({ x: x, y: y });\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    point = 2;\r\n                    if (_this._closed) {\r\n                        x3 = x;\r\n                        y3 = y;\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    point = 3;\r\n                    if (_this._closed) {\r\n                        x4 = x;\r\n                        y4 = y;\r\n                        output += $path.moveTo({ x: (x0 + 4 * x1 + x) / 6, y: (y0 + 4 * y1 + y) / 6 });\r\n                        break;\r\n                    }\r\n                    else {\r\n                        output += $path.lineTo({ x: (5 * x0 + x1) / 6, y: (5 * y0 + y1) / 6 });\r\n                        // fall-through\r\n                    }\r\n                default:\r\n                    pushCurve(x, y);\r\n                    break;\r\n            }\r\n            x0 = x1;\r\n            x1 = x;\r\n            y0 = y1;\r\n            y1 = y;\r\n        };\r\n        $array.each(points, pushPoint);\r\n        if (this._closed) {\r\n            switch (point) {\r\n                case 1:\r\n                    output += $path.moveTo({ x: x2, y: y2 });\r\n                    output += $path.closePath();\r\n                    break;\r\n                case 2:\r\n                    output += $path.moveTo({ x: (x2 + 2 * x3) / 3, y: (y2 + 2 * y3) / 3 });\r\n                    output += $path.lineTo({ x: (x3 + 2 * x2) / 3, y: (y3 + 2 * y2) / 3 });\r\n                    output += $path.closePath();\r\n                    break;\r\n                case 3:\r\n                    pushPoint({ x: x2, y: y2 });\r\n                    pushPoint({ x: x3, y: y3 });\r\n                    pushPoint({ x: x4, y: y4 });\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            switch (point) {\r\n                case 3:\r\n                    pushCurve(x1, y1);\r\n                // fall-through\r\n                case 2:\r\n                    output += $path.lineTo({ x: x1, y: y1 });\r\n                    break;\r\n            }\r\n            output += $path.closePath();\r\n        }\r\n        return output;\r\n    };\r\n    return Basis;\r\n}());\r\nexport { Basis };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}