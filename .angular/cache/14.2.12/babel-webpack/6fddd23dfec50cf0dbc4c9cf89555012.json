{"ast":null,"code":"/**\r\n * Percent chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\nimport { PercentSeries } from \"../series/PercentSeries\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar PercentChartDataItem =\n/** @class */\nfunction (_super) {\n  __extends(PercentChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PercentChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PercentChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return PercentChartDataItem;\n}(SerialChartDataItem);\n\nexport { PercentChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\n\nvar PercentChart =\n/** @class */\nfunction (_super) {\n  __extends(PercentChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PercentChart() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"PercentChart\";\n    _this.align = \"none\";\n    _this.valign = \"none\"; // so that the chart is always drawn, even the legend wants all the space\n\n    _this.chartContainer.minHeight = 50;\n    _this.chartContainer.minWidth = 50; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * (Re)validates chart data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PercentChart.prototype.validateData = function () {\n    _super.prototype.validateData.call(this);\n\n    this.feedLegend();\n  };\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n\n\n  PercentChart.prototype.feedLegend = function () {\n    var legend = this.legend;\n\n    if (legend) {\n      var legendData_1 = [];\n      $iter.each(this.series.iterator(), function (series) {\n        if (!series.hiddenInLegend) {\n          $iter.each(series.dataItems.iterator(), function (dataItem) {\n            if (!dataItem.hiddenInLegend) {\n              legendData_1.push(dataItem);\n\n              if (!dataItem.legendSettings) {\n                dataItem.legendSettings = series.legendSettings;\n              }\n            }\n          });\n        }\n      });\n      legend.data = legendData_1;\n      legend.dataFields.name = \"category\";\n    }\n  };\n  /**\r\n   * Creates a new [[PercentSeries]].\r\n   *\r\n   * @return New series\r\n   */\n\n\n  PercentChart.prototype.createSeries = function () {\n    return new PercentSeries();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  PercentChart.prototype.setLegend = function (legend) {\n    _super.prototype.setLegend.call(this, legend);\n\n    if (legend) {\n      legend.labels.template.text = \"{category}\";\n      legend.valueLabels.template.text = \"{value.percent.formatNumber('#.0p')}\";\n      legend.itemContainers.template.events.on(\"over\", function (event) {\n        var percentSeriesDataItem = event.target.dataItem.dataContext;\n\n        if (percentSeriesDataItem.visible && !percentSeriesDataItem.isHiding) {\n          var slice = percentSeriesDataItem.slice;\n          slice.dispatchImmediately(\"over\");\n          slice.isHover = true;\n          slice.interactions.isRealHover = true;\n        }\n      });\n      legend.itemContainers.template.events.on(\"out\", function (event) {\n        var percentSeriesDataItem = event.target.dataItem.dataContext;\n        var slice = percentSeriesDataItem.slice;\n        slice.dispatchImmediately(\"out\");\n        slice.isHover = false;\n      });\n    }\n  };\n\n  return PercentChart;\n}(SerialChart);\n\nexport { PercentChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\n\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;","map":{"version":3,"names":["__extends","SerialChart","SerialChartDataItem","PercentSeries","registry","$iter","PercentChartDataItem","_super","_this","call","className","applyTheme","PercentChart","align","valign","chartContainer","minHeight","minWidth","prototype","validateData","feedLegend","legend","legendData_1","each","series","iterator","hiddenInLegend","dataItems","dataItem","push","legendSettings","data","dataFields","name","createSeries","setLegend","labels","template","text","valueLabels","itemContainers","events","on","event","percentSeriesDataItem","target","dataContext","visible","isHiding","slice","dispatchImmediately","isHover","interactions","isRealHover","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/types/PercentChart.js"],"sourcesContent":["/**\r\n * Percent chart module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\r\nimport { PercentSeries } from \"../series/PercentSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PercentChartDataItem = /** @class */ (function (_super) {\r\n    __extends(PercentChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PercentChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PercentChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PercentChartDataItem;\r\n}(SerialChartDataItem));\r\nexport { PercentChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nvar PercentChart = /** @class */ (function (_super) {\r\n    __extends(PercentChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PercentChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"PercentChart\";\r\n        _this.align = \"none\";\r\n        _this.valign = \"none\";\r\n        // so that the chart is always drawn, even the legend wants all the space\r\n        _this.chartContainer.minHeight = 50;\r\n        _this.chartContainer.minWidth = 50;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)validates chart data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PercentChart.prototype.validateData = function () {\r\n        _super.prototype.validateData.call(this);\r\n        this.feedLegend();\r\n    };\r\n    /**\r\n     * Setups the legend to use the chart's data.\r\n     * @ignore\r\n     */\r\n    PercentChart.prototype.feedLegend = function () {\r\n        var legend = this.legend;\r\n        if (legend) {\r\n            var legendData_1 = [];\r\n            $iter.each(this.series.iterator(), function (series) {\r\n                if (!series.hiddenInLegend) {\r\n                    $iter.each(series.dataItems.iterator(), function (dataItem) {\r\n                        if (!dataItem.hiddenInLegend) {\r\n                            legendData_1.push(dataItem);\r\n                            if (!dataItem.legendSettings) {\r\n                                dataItem.legendSettings = series.legendSettings;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            legend.data = legendData_1;\r\n            legend.dataFields.name = \"category\";\r\n        }\r\n    };\r\n    /**\r\n     * Creates a new [[PercentSeries]].\r\n     *\r\n     * @return New series\r\n     */\r\n    PercentChart.prototype.createSeries = function () {\r\n        return new PercentSeries();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    PercentChart.prototype.setLegend = function (legend) {\r\n        _super.prototype.setLegend.call(this, legend);\r\n        if (legend) {\r\n            legend.labels.template.text = \"{category}\";\r\n            legend.valueLabels.template.text = \"{value.percent.formatNumber('#.0p')}\";\r\n            legend.itemContainers.template.events.on(\"over\", function (event) {\r\n                var percentSeriesDataItem = event.target.dataItem.dataContext;\r\n                if (percentSeriesDataItem.visible && !percentSeriesDataItem.isHiding) {\r\n                    var slice = percentSeriesDataItem.slice;\r\n                    slice.dispatchImmediately(\"over\");\r\n                    slice.isHover = true;\r\n                    slice.interactions.isRealHover = true;\r\n                }\r\n            });\r\n            legend.itemContainers.template.events.on(\"out\", function (event) {\r\n                var percentSeriesDataItem = event.target.dataItem.dataContext;\r\n                var slice = percentSeriesDataItem.slice;\r\n                slice.dispatchImmediately(\"out\");\r\n                slice.isHover = false;\r\n            });\r\n        }\r\n    };\r\n    return PercentChart;\r\n}(SerialChart));\r\nexport { PercentChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}