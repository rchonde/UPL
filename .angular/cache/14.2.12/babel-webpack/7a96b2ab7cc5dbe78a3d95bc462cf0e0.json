{"ast":null,"code":"/**\r\n * Pointed shape module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a shape with a pointer.\r\n *\r\n * @see {@link IPointedShapeEvents} for a list of available events\r\n * @see {@link IPointedShapeAdapters} for a list of available Adapters\r\n */\n\nvar PointedShape =\n/** @class */\nfunction (_super) {\n  __extends(PointedShape, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PointedShape() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PointedShape\";\n    _this.pointerBaseWidth = 15;\n    _this.pointerLength = 10;\n    _this.pointerY = 0;\n    _this.pointerX = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PointedShape.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (!$type.isNumber(this.pointerX)) {\n      this.pointerX = this.pixelWidth / 2;\n    }\n\n    if (!$type.isNumber(this.pointerY)) {\n      this.pointerY = this.pixelHeight + 10;\n    }\n  };\n\n  Object.defineProperty(PointedShape.prototype, \"pointerBaseWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pointerBaseWidth\");\n    },\n\n    /**\r\n     * A width of the pinter's (stem's) thick end (base) in pixels.\r\n     *\r\n     * @default 15\r\n     * @param value  Width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"pointerBaseWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PointedShape.prototype, \"pointerLength\", {\n    /**\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pointerLength\");\n    },\n\n    /**\r\n     * A length of the pinter (stem) in pixels.\r\n     *\r\n     * @default 10\r\n     * @param value  Length (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"pointerLength\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PointedShape.prototype, \"pointerX\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pointerX\");\n    },\n\n    /**\r\n     * X coordinate the shape is pointing to.\r\n     *\r\n     * @param value  X\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"pointerX\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PointedShape.prototype, \"pointerY\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pointerY\");\n    },\n\n    /**\r\n     * Y coordinate the shape is pointing to.\r\n     *\r\n     * @param value  Y\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"pointerY\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PointedShape;\n}(Sprite);\n\nexport { PointedShape };","map":{"version":3,"names":["__extends","Sprite","$type","PointedShape","_super","_this","call","className","pointerBaseWidth","pointerLength","pointerY","pointerX","applyTheme","prototype","draw","isNumber","pixelWidth","pixelHeight","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","enumerable","configurable"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/elements/PointedShape.js"],"sourcesContent":["/**\r\n * Pointed shape module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a shape with a pointer.\r\n *\r\n * @see {@link IPointedShapeEvents} for a list of available events\r\n * @see {@link IPointedShapeAdapters} for a list of available Adapters\r\n */\r\nvar PointedShape = /** @class */ (function (_super) {\r\n    __extends(PointedShape, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PointedShape() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PointedShape\";\r\n        _this.pointerBaseWidth = 15;\r\n        _this.pointerLength = 10;\r\n        _this.pointerY = 0;\r\n        _this.pointerX = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PointedShape.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (!$type.isNumber(this.pointerX)) {\r\n            this.pointerX = this.pixelWidth / 2;\r\n        }\r\n        if (!$type.isNumber(this.pointerY)) {\r\n            this.pointerY = this.pixelHeight + 10;\r\n        }\r\n    };\r\n    Object.defineProperty(PointedShape.prototype, \"pointerBaseWidth\", {\r\n        /**\r\n         * @return Width (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pointerBaseWidth\");\r\n        },\r\n        /**\r\n         * A width of the pinter's (stem's) thick end (base) in pixels.\r\n         *\r\n         * @default 15\r\n         * @param value  Width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"pointerBaseWidth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PointedShape.prototype, \"pointerLength\", {\r\n        /**\r\n         * @return Length (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pointerLength\");\r\n        },\r\n        /**\r\n         * A length of the pinter (stem) in pixels.\r\n         *\r\n         * @default 10\r\n         * @param value  Length (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"pointerLength\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PointedShape.prototype, \"pointerX\", {\r\n        /**\r\n         * @return X\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pointerX\");\r\n        },\r\n        /**\r\n         * X coordinate the shape is pointing to.\r\n         *\r\n         * @param value  X\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"pointerX\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PointedShape.prototype, \"pointerY\", {\r\n        /**\r\n         * @return Y\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pointerY\");\r\n        },\r\n        /**\r\n         * Y coordinate the shape is pointing to.\r\n         *\r\n         * @param value  Y\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"pointerY\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PointedShape;\r\n}(Sprite));\r\nexport { PointedShape };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}