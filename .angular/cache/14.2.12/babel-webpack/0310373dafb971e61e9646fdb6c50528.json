{"ast":null,"code":"/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Column } from \"./Column\";\nimport { Sprite } from \"../../core/Sprite\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { registry } from \"../../core/Registry\";\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar CurvedColumn =\n/** @class */\nfunction (_super) {\n  __extends(CurvedColumn, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function CurvedColumn() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"CurvedColumn\";\n    return _this;\n  }\n  /**\r\n   * [createAssets description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  CurvedColumn.prototype.createAssets = function () {\n    this.curvedColumn = this.createChild(Sprite);\n    this.curvedColumn.shouldClone = false;\n    this.setPropertyValue(\"tension\", 0.7);\n    this.width = percent(120);\n    this.height = percent(120); // some dirty hack so that if user access column, it won't get error\n\n    this.column = this.curvedColumn;\n  };\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  CurvedColumn.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.realWidth;\n    var h = this.realHeight;\n    var x = this.realX - this.pixelX;\n    var y = this.realY - this.pixelY;\n    var points; // TODO can this be removed ?\n\n    $utils.used(this.width);\n    var tensionX = 1;\n    var tensionY = 1;\n\n    if (this.orientation == \"vertical\") {\n      tensionX = this.tension;\n      points = [{\n        x: 0,\n        y: h + y\n      }, {\n        x: w / 2,\n        y: y\n      }, {\n        x: w,\n        y: h + y\n      }];\n    } else {\n      tensionY = this.tension;\n      h = Math.abs(h);\n      points = [{\n        x: x,\n        y: h\n      }, {\n        x: x + w,\n        y: h / 2\n      }, {\n        x: x,\n        y: 0\n      }];\n    }\n\n    var path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\n    this.column.path = path;\n  };\n  /**\r\n   * Copies all parameters from another [[CurvedColumn]].\r\n   *\r\n   * @param source  Source CurvedColumn\r\n   */\n\n\n  CurvedColumn.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (this.curvedColumn) {\n      this.curvedColumn.copyFrom(source.curvedColumn);\n    }\n  };\n\n  Object.defineProperty(CurvedColumn.prototype, \"tension\", {\n    /**\r\n     * @return Tension (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tension\");\n    },\n\n    /**\r\n     * Horizontal tension of the curve.\r\n     *\r\n     * Tension defines how \"lose\" the line will be.\r\n     *\r\n     * 1 is the maximum tension which would result in pointy columns with\r\n     * straight edges.\r\n     *\r\n     * The smaller the tension th wider the column will be.\r\n     *\r\n     * @default 0.7\r\n     * @param value tension (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tension\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CurvedColumn.prototype, \"orientation\", {\n    /**\r\n     * Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n\n    /**\r\n     * Orientation of the column.\r\n     *\r\n     * Available options: \"vertical\" (default) and \"horizontal\".\r\n     *\r\n     * @default \"vertical\"\r\n     * @param value  Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"orientation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return CurvedColumn;\n}(Column);\n\nexport { CurvedColumn };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;","map":{"version":3,"names":["__extends","Column","Sprite","$path","$utils","registry","$smoothing","percent","CurvedColumn","_super","_this","call","className","prototype","createAssets","curvedColumn","createChild","shouldClone","setPropertyValue","width","height","column","draw","w","realWidth","h","realHeight","x","realX","pixelX","y","realY","pixelY","points","used","tensionX","tensionY","orientation","tension","Math","abs","path","moveTo","Tension","smooth","copyFrom","source","Object","defineProperty","get","getPropertyValue","set","value","enumerable","configurable","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/elements/CurvedColumn.js"],"sourcesContent":["/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar CurvedColumn = /** @class */ (function (_super) {\r\n    __extends(CurvedColumn, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CurvedColumn() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"CurvedColumn\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * [createAssets description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    CurvedColumn.prototype.createAssets = function () {\r\n        this.curvedColumn = this.createChild(Sprite);\r\n        this.curvedColumn.shouldClone = false;\r\n        this.setPropertyValue(\"tension\", 0.7);\r\n        this.width = percent(120);\r\n        this.height = percent(120);\r\n        // some dirty hack so that if user access column, it won't get error\r\n        this.column = this.curvedColumn;\r\n    };\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    CurvedColumn.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var w = this.realWidth;\r\n        var h = this.realHeight;\r\n        var x = this.realX - this.pixelX;\r\n        var y = this.realY - this.pixelY;\r\n        var points;\r\n        // TODO can this be removed ?\r\n        $utils.used(this.width);\r\n        var tensionX = 1;\r\n        var tensionY = 1;\r\n        if (this.orientation == \"vertical\") {\r\n            tensionX = this.tension;\r\n            points = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n        }\r\n        else {\r\n            tensionY = this.tension;\r\n            h = Math.abs(h);\r\n            points = [{ x: x, y: h }, { x: x + w, y: h / 2 }, { x: x, y: 0 }];\r\n        }\r\n        var path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n        this.column.path = path;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[CurvedColumn]].\r\n     *\r\n     * @param source  Source CurvedColumn\r\n     */\r\n    CurvedColumn.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.curvedColumn) {\r\n            this.curvedColumn.copyFrom(source.curvedColumn);\r\n        }\r\n    };\r\n    Object.defineProperty(CurvedColumn.prototype, \"tension\", {\r\n        /**\r\n         * @return Tension (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tension\");\r\n        },\r\n        /**\r\n         * Horizontal tension of the curve.\r\n         *\r\n         * Tension defines how \"lose\" the line will be.\r\n         *\r\n         * 1 is the maximum tension which would result in pointy columns with\r\n         * straight edges.\r\n         *\r\n         * The smaller the tension th wider the column will be.\r\n         *\r\n         * @default 0.7\r\n         * @param value tension (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tension\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CurvedColumn.prototype, \"orientation\", {\r\n        /**\r\n         * Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * Orientation of the column.\r\n         *\r\n         * Available options: \"vertical\" (default) and \"horizontal\".\r\n         *\r\n         * @default \"vertical\"\r\n         * @param value  Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"orientation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CurvedColumn;\r\n}(Column));\r\nexport { CurvedColumn };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}