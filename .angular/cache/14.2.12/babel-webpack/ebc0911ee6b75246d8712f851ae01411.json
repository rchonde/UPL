{"ast":null,"code":"/**\r\n * Ellipse module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Circle } from \"./Circle\";\nimport { registry } from \"../Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws an ellipse\r\n * @see {@link IEllipseEvents} for a list of available events\r\n * @see {@link IEllipseAdapters} for a list of available Adapters\r\n */\n\nvar Ellipse =\n/** @class */\nfunction (_super) {\n  __extends(Ellipse, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Ellipse() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Ellipse\";\n    _this.element = _this.paper.add(\"ellipse\");\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the ellipsis.\r\n   */\n\n\n  Ellipse.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    this.element.attr({\n      \"rx\": this.radius\n    });\n    this.element.attr({\n      \"ry\": this.radiusY\n    });\n  };\n\n  Object.defineProperty(Ellipse.prototype, \"radiusY\", {\n    /**\r\n     * @return Vertical radius\r\n     */\n    get: function () {\n      return this.innerHeight / 2;\n    },\n\n    /**\r\n     * Vertical radius.\r\n     *\r\n     * It's a relative size to the `radius`.\r\n     *\r\n     * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n     * horizontal radius.\r\n     *\r\n     * @param value  Vertical radius\r\n     */\n    set: function (value) {\n      this.height = value * 2;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Ellipse.prototype, \"radius\", {\n    /**\r\n     * @return Horizontal radius\r\n     */\n    get: function () {\n      return this.innerWidth / 2;\n    },\n\n    /**\r\n     * Horizontal radius.\r\n     *\r\n     * @param value  Horizontal radius\r\n     */\n    set: function (value) {\n      this.width = value * 2;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Ellipse;\n}(Circle);\n\nexport { Ellipse };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Ellipse\"] = Ellipse;","map":{"version":3,"names":["__extends","Circle","registry","Ellipse","_super","_this","call","className","element","paper","add","applyTheme","prototype","draw","attr","radius","radiusY","Object","defineProperty","get","innerHeight","set","value","height","invalidate","enumerable","configurable","innerWidth","width","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/elements/Ellipse.js"],"sourcesContent":["/**\r\n * Ellipse module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle } from \"./Circle\";\r\nimport { registry } from \"../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws an ellipse\r\n * @see {@link IEllipseEvents} for a list of available events\r\n * @see {@link IEllipseAdapters} for a list of available Adapters\r\n */\r\nvar Ellipse = /** @class */ (function (_super) {\r\n    __extends(Ellipse, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Ellipse() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Ellipse\";\r\n        _this.element = _this.paper.add(\"ellipse\");\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the ellipsis.\r\n     */\r\n    Ellipse.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        this.element.attr({ \"rx\": this.radius });\r\n        this.element.attr({ \"ry\": this.radiusY });\r\n    };\r\n    Object.defineProperty(Ellipse.prototype, \"radiusY\", {\r\n        /**\r\n         * @return Vertical radius\r\n         */\r\n        get: function () {\r\n            return this.innerHeight / 2;\r\n        },\r\n        /**\r\n         * Vertical radius.\r\n         *\r\n         * It's a relative size to the `radius`.\r\n         *\r\n         * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n         * horizontal radius.\r\n         *\r\n         * @param value  Vertical radius\r\n         */\r\n        set: function (value) {\r\n            this.height = value * 2;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Ellipse.prototype, \"radius\", {\r\n        /**\r\n         * @return Horizontal radius\r\n         */\r\n        get: function () {\r\n            return this.innerWidth / 2;\r\n        },\r\n        /**\r\n         * Horizontal radius.\r\n         *\r\n         * @param value  Horizontal radius\r\n         */\r\n        set: function (value) {\r\n            this.width = value * 2;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Ellipse;\r\n}(Circle));\r\nexport { Ellipse };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Ellipse\"] = Ellipse;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC3CJ,SAAS,CAACG,OAAD,EAAUC,MAAV,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,OAAT,GAAmB;IACf,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;IACAD,KAAK,CAACE,SAAN,GAAkB,SAAlB;IACAF,KAAK,CAACG,OAAN,GAAgBH,KAAK,CAACI,KAAN,CAAYC,GAAZ,CAAgB,SAAhB,CAAhB;;IACAL,KAAK,CAACM,UAAN;;IACA,OAAON,KAAP;EACH;EACD;AACJ;AACA;;;EACIF,OAAO,CAACS,SAAR,CAAkBC,IAAlB,GAAyB,YAAY;IACjCT,MAAM,CAACQ,SAAP,CAAiBC,IAAjB,CAAsBP,IAAtB,CAA2B,IAA3B;;IACA,KAAKE,OAAL,CAAaM,IAAb,CAAkB;MAAE,MAAM,KAAKC;IAAb,CAAlB;IACA,KAAKP,OAAL,CAAaM,IAAb,CAAkB;MAAE,MAAM,KAAKE;IAAb,CAAlB;EACH,CAJD;;EAKAC,MAAM,CAACC,cAAP,CAAsBf,OAAO,CAACS,SAA9B,EAAyC,SAAzC,EAAoD;IAChD;AACR;AACA;IACQO,GAAG,EAAE,YAAY;MACb,OAAO,KAAKC,WAAL,GAAmB,CAA1B;IACH,CAN+C;;IAOhD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKC,MAAL,GAAcD,KAAK,GAAG,CAAtB;MACA,KAAKE,UAAL;IACH,CApB+C;IAqBhDC,UAAU,EAAE,IArBoC;IAsBhDC,YAAY,EAAE;EAtBkC,CAApD;EAwBAT,MAAM,CAACC,cAAP,CAAsBf,OAAO,CAACS,SAA9B,EAAyC,QAAzC,EAAmD;IAC/C;AACR;AACA;IACQO,GAAG,EAAE,YAAY;MACb,OAAO,KAAKQ,UAAL,GAAkB,CAAzB;IACH,CAN8C;;IAO/C;AACR;AACA;AACA;AACA;IACQN,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKM,KAAL,GAAaN,KAAK,GAAG,CAArB;MACA,KAAKE,UAAL;IACH,CAf8C;IAgB/CC,UAAU,EAAE,IAhBmC;IAiB/CC,YAAY,EAAE;EAjBiC,CAAnD;EAmBA,OAAOvB,OAAP;AACH,CAhE4B,CAgE3BF,MAhE2B,CAA7B;;AAiEA,SAASE,OAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,QAAQ,CAAC2B,iBAAT,CAA2B,SAA3B,IAAwC1B,OAAxC"},"metadata":{},"sourceType":"module"}