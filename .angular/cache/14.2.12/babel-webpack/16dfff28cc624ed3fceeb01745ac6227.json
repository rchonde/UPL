{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/recurrence.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport errors from \"../../core/errors\";\nimport { each } from \"../../core/utils/iterator\";\nimport { RRule, RRuleSet } from \"rrule\";\nimport dateUtils from \"../../core/utils/date\";\nimport timeZoneUtils from \"./utils.timeZone\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar ruleNames = [\"freq\", \"interval\", \"byday\", \"byweekno\", \"byyearday\", \"bymonth\", \"bymonthday\", \"count\", \"until\", \"byhour\", \"byminute\", \"bysecond\", \"bysetpos\", \"wkst\"];\nvar freqNames = [\"DAILY\", \"WEEKLY\", \"MONTHLY\", \"YEARLY\", \"SECONDLY\", \"MINUTELY\", \"HOURLY\"];\nvar days = {\n  SU: 0,\n  MO: 1,\n  TU: 2,\n  WE: 3,\n  TH: 4,\n  FR: 5,\n  SA: 6\n};\nvar loggedWarnings = [];\nvar MS_IN_HOUR = 36e5;\nvar MS_IN_DAY = 24 * MS_IN_HOUR;\nvar recurrence = null;\nexport function getRecurrenceProcessor() {\n  if (!recurrence) {\n    recurrence = new RecurrenceProcessor();\n  }\n\n  return recurrence;\n}\n\nclass RecurrenceProcessor {\n  constructor() {\n    this.rRule = null;\n    this.rRuleSet = null;\n    this.validator = new RecurrenceValidator();\n  }\n\n  generateDates(options) {\n    var recurrenceRule = this.evalRecurrenceRule(options.rule);\n    var rule = recurrenceRule.rule;\n\n    if (!recurrenceRule.isValid || !rule.freq) {\n      return [];\n    }\n\n    var rruleIntervalParams = this._createRruleIntervalParams(options);\n\n    this._initializeRRule(options, rruleIntervalParams.startIntervalDate, rule.until);\n\n    return this.rRuleSet.between(rruleIntervalParams.minViewDate, rruleIntervalParams.maxViewDate, true).filter(date => date.getTime() + rruleIntervalParams.appointmentDuration >= rruleIntervalParams.minViewTime).map(date => this._convertRruleResult(rruleIntervalParams, options, date));\n  }\n\n  _createRruleIntervalParams(options) {\n    var {\n      start: start,\n      min: min,\n      max: max,\n      appointmentTimezoneOffset: appointmentTimezoneOffset\n    } = options;\n    var clientOffsets_startDate = timeZoneUtils.getClientTimezoneOffset(start),\n        clientOffsets_minViewDate = timeZoneUtils.getClientTimezoneOffset(min),\n        clientOffsets_maxViewDate = timeZoneUtils.getClientTimezoneOffset(max);\n    var duration = options.end ? options.end.getTime() - options.start.getTime() : 0;\n    var startIntervalDate = timeZoneUtils.setOffsetsToDate(options.start, [-clientOffsets_startDate, appointmentTimezoneOffset]);\n    var minViewTime = options.min.getTime() - clientOffsets_minViewDate + appointmentTimezoneOffset;\n    var minViewDate = new Date(minViewTime - duration);\n    var maxViewDate = timeZoneUtils.setOffsetsToDate(options.max, [-clientOffsets_maxViewDate, appointmentTimezoneOffset]);\n    var startDateDSTDifferenceMs = timeZoneUtils.getDiffBetweenClientTimezoneOffsets(options.start, startIntervalDate);\n    var switchToSummerTime = startDateDSTDifferenceMs < 0;\n    return {\n      startIntervalDate: startIntervalDate,\n      minViewTime: minViewTime,\n      minViewDate: minViewDate,\n      maxViewDate: maxViewDate,\n      startIntervalDateDSTShift: switchToSummerTime ? 0 : startDateDSTDifferenceMs,\n      appointmentDuration: duration\n    };\n  }\n\n  _convertRruleResult(rruleIntervalParams, options, rruleDate) {\n    var localTimezoneOffset = timeZoneUtils.getClientTimezoneOffset(rruleDate);\n    var additionalWorkaroundOffsetForRrule = localTimezoneOffset / MS_IN_HOUR <= -13 ? -MS_IN_DAY : 0;\n    var convertedBackDate = timeZoneUtils.setOffsetsToDate(rruleDate, [localTimezoneOffset, additionalWorkaroundOffsetForRrule, -options.appointmentTimezoneOffset, rruleIntervalParams.startIntervalDateDSTShift]);\n    var convertedDateDSTShift = timeZoneUtils.getDiffBetweenClientTimezoneOffsets(convertedBackDate, rruleDate);\n    var switchToSummerTime = convertedDateDSTShift < 0;\n    var resultDate = timeZoneUtils.setOffsetsToDate(convertedBackDate, [convertedDateDSTShift]);\n    var resultDateDSTShift = timeZoneUtils.getDiffBetweenClientTimezoneOffsets(resultDate, convertedBackDate);\n\n    if (resultDateDSTShift && switchToSummerTime) {\n      return new Date(resultDate.getTime() + resultDateDSTShift);\n    }\n\n    return resultDate;\n  }\n\n  hasRecurrence(options) {\n    return !!this.generateDates(options).length;\n  }\n\n  evalRecurrenceRule(rule) {\n    var result = {\n      rule: {},\n      isValid: false\n    };\n\n    if (rule) {\n      result.rule = this._parseRecurrenceRule(rule);\n      result.isValid = this.validator.validateRRule(result.rule, rule);\n    }\n\n    return result;\n  }\n\n  isValidRecurrenceRule(rule) {\n    return this.evalRecurrenceRule(rule).isValid;\n  }\n\n  daysFromByDayRule(rule) {\n    var result = [];\n\n    if (rule.byday) {\n      if (Array.isArray(rule.byday)) {\n        result = rule.byday;\n      } else {\n        result = rule.byday.split(\",\");\n      }\n    }\n\n    return result.map(item => {\n      var match = item.match(/[A-Za-z]+/);\n      return !!match && match[0];\n    }).filter(item => !!item);\n  }\n\n  getAsciiStringByDate(date) {\n    var currentOffset = date.getTimezoneOffset() * toMs(\"minute\");\n    var offsetDate = new Date(date.getTime() + currentOffset);\n    return offsetDate.getFullYear() + (\"0\" + (offsetDate.getMonth() + 1)).slice(-2) + (\"0\" + offsetDate.getDate()).slice(-2) + \"T\" + (\"0\" + offsetDate.getHours()).slice(-2) + (\"0\" + offsetDate.getMinutes()).slice(-2) + (\"0\" + offsetDate.getSeconds()).slice(-2) + \"Z\";\n  }\n\n  getRecurrenceString(object) {\n    if (!object || !object.freq) {\n      return;\n    }\n\n    var result = \"\";\n\n    for (var field in object) {\n      var value = object[field];\n\n      if (\"interval\" === field && value < 2) {\n        continue;\n      }\n\n      if (\"until\" === field) {\n        value = this.getAsciiStringByDate(value);\n      }\n\n      result += field + \"=\" + value + \";\";\n    }\n\n    result = result.substring(0, result.length - 1);\n    return result.toUpperCase();\n  }\n\n  _parseExceptionToRawArray(value) {\n    return value.match(/(\\d{4})(\\d{2})(\\d{2})(T(\\d{2})(\\d{2})(\\d{2}))?(Z)?/);\n  }\n\n  getDateByAsciiString(exceptionText) {\n    if (\"string\" !== typeof exceptionText) {\n      return exceptionText;\n    }\n\n    var result = this._parseExceptionToRawArray(exceptionText);\n\n    if (!result) {\n      return null;\n    }\n\n    var [year, month, date, hours, minutes, seconds, isUtc] = this._createDateTuple(result);\n\n    if (isUtc) {\n      return new Date(Date.UTC(year, month, date, hours, minutes, seconds));\n    }\n\n    return new Date(year, month, date, hours, minutes, seconds);\n  }\n\n  _dispose() {\n    if (this.rRuleSet) {\n      delete this.rRuleSet;\n      this.rRuleSet = null;\n    }\n\n    if (this.rRule) {\n      delete this.rRule;\n      this.rRule = null;\n    }\n  }\n\n  _getTimeZoneOffset() {\n    return new Date().getTimezoneOffset();\n  }\n\n  _initializeRRule(options, startDateUtc, until) {\n    var ruleOptions = RRule.parseString(options.rule);\n    var firstDayOfWeek = options.firstDayOfWeek;\n    ruleOptions.dtstart = startDateUtc;\n\n    if (!ruleOptions.wkst && firstDayOfWeek) {\n      ruleOptions.wkst = [6, 0, 1, 2, 3, 4, 5][firstDayOfWeek];\n    }\n\n    if (until) {\n      ruleOptions.until = timeZoneUtils.setOffsetsToDate(until, [-timeZoneUtils.getClientTimezoneOffset(until), options.appointmentTimezoneOffset]);\n    }\n\n    this._createRRule(ruleOptions);\n\n    if (options.exception) {\n      var exceptionStrings = options.exception;\n      var exceptionDates = exceptionStrings.split(\",\").map(rule => this.getDateByAsciiString(rule));\n      exceptionDates.forEach(date => {\n        if (options.getPostProcessedException) {\n          date = options.getPostProcessedException(date);\n        }\n\n        var utcDate = timeZoneUtils.setOffsetsToDate(date, [-timeZoneUtils.getClientTimezoneOffset(date), options.appointmentTimezoneOffset]);\n        this.rRuleSet.exdate(utcDate);\n      });\n    }\n  }\n\n  _createRRule(ruleOptions) {\n    this._dispose();\n\n    this.rRuleSet = new RRuleSet();\n    this.rRule = new RRule(ruleOptions);\n    this.rRuleSet.rrule(this.rRule);\n  }\n\n  _parseRecurrenceRule(recurrence) {\n    var ruleObject = {};\n    var ruleParts = recurrence.split(\";\");\n\n    for (var i = 0, len = ruleParts.length; i < len; i++) {\n      var rule = ruleParts[i].split(\"=\");\n      var ruleName = rule[0].toLowerCase();\n      var ruleValue = rule[1];\n      ruleObject[ruleName] = ruleValue;\n    }\n\n    var count = parseInt(ruleObject.count);\n\n    if (!isNaN(count)) {\n      ruleObject.count = count;\n    }\n\n    if (ruleObject.interval) {\n      var interval = parseInt(ruleObject.interval);\n\n      if (!isNaN(interval)) {\n        ruleObject.interval = interval;\n      }\n    } else {\n      ruleObject.interval = 1;\n    }\n\n    if (ruleObject.freq && ruleObject.until) {\n      ruleObject.until = this.getDateByAsciiString(ruleObject.until);\n    }\n\n    return ruleObject;\n  }\n\n  _createDateTuple(parseResult) {\n    var isUtc = void 0 !== parseResult[8];\n    parseResult.shift();\n\n    if (void 0 === parseResult[3]) {\n      parseResult.splice(3);\n    } else {\n      parseResult.splice(3, 1);\n      parseResult.splice(6);\n    }\n\n    parseResult[1]--;\n    parseResult.unshift(null);\n    return [parseInt(parseResult[1]), parseInt(parseResult[2]), parseInt(parseResult[3]), parseInt(parseResult[4]) || 0, parseInt(parseResult[5]) || 0, parseInt(parseResult[6]) || 0, isUtc];\n  }\n\n}\n\nclass RecurrenceValidator {\n  validateRRule(rule, recurrence) {\n    if (this._brokenRuleNameExists(rule) || !freqNames.includes(rule.freq) || this._wrongCountRule(rule) || this._wrongIntervalRule(rule) || this._wrongDayOfWeek(rule) || this._wrongByMonthDayRule(rule) || this._wrongByMonth(rule) || this._wrongUntilRule(rule)) {\n      this._logBrokenRule(recurrence);\n\n      return false;\n    }\n\n    return true;\n  }\n\n  _wrongUntilRule(rule) {\n    var wrongUntil = false;\n    var until = rule.until;\n\n    if (void 0 !== until && !(until instanceof Date)) {\n      wrongUntil = true;\n    }\n\n    return wrongUntil;\n  }\n\n  _wrongCountRule(rule) {\n    var wrongCount = false;\n    var count = rule.count;\n\n    if (count && \"string\" === typeof count) {\n      wrongCount = true;\n    }\n\n    return wrongCount;\n  }\n\n  _wrongByMonthDayRule(rule) {\n    var wrongByMonthDay = false;\n    var byMonthDay = rule.bymonthday;\n\n    if (byMonthDay && isNaN(parseInt(byMonthDay))) {\n      wrongByMonthDay = true;\n    }\n\n    return wrongByMonthDay;\n  }\n\n  _wrongByMonth(rule) {\n    var wrongByMonth = false;\n    var byMonth = rule.bymonth;\n\n    if (byMonth && isNaN(parseInt(byMonth))) {\n      wrongByMonth = true;\n    }\n\n    return wrongByMonth;\n  }\n\n  _wrongIntervalRule(rule) {\n    var wrongInterval = false;\n    var interval = rule.interval;\n\n    if (interval && \"string\" === typeof interval) {\n      wrongInterval = true;\n    }\n\n    return wrongInterval;\n  }\n\n  _wrongDayOfWeek(rule) {\n    var byDay = rule.byday;\n    var daysByRule = getRecurrenceProcessor().daysFromByDayRule(rule);\n    var brokenDaysExist = false;\n\n    if (\"\" === byDay) {\n      brokenDaysExist = true;\n    }\n\n    each(daysByRule, function (_, day) {\n      if (!Object.prototype.hasOwnProperty.call(days, day)) {\n        brokenDaysExist = true;\n        return false;\n      }\n    });\n    return brokenDaysExist;\n  }\n\n  _brokenRuleNameExists(rule) {\n    var brokenRuleExists = false;\n    each(rule, function (ruleName) {\n      if (!ruleNames.includes(ruleName)) {\n        brokenRuleExists = true;\n        return false;\n      }\n    });\n    return brokenRuleExists;\n  }\n\n  _logBrokenRule(recurrence) {\n    if (!loggedWarnings.includes(recurrence)) {\n      errors.log(\"W0006\", recurrence);\n      loggedWarnings.push(recurrence);\n    }\n  }\n\n}","map":{"version":3,"names":["errors","each","RRule","RRuleSet","dateUtils","timeZoneUtils","toMs","dateToMilliseconds","ruleNames","freqNames","days","SU","MO","TU","WE","TH","FR","SA","loggedWarnings","MS_IN_HOUR","MS_IN_DAY","recurrence","getRecurrenceProcessor","RecurrenceProcessor","constructor","rRule","rRuleSet","validator","RecurrenceValidator","generateDates","options","recurrenceRule","evalRecurrenceRule","rule","isValid","freq","rruleIntervalParams","_createRruleIntervalParams","_initializeRRule","startIntervalDate","until","between","minViewDate","maxViewDate","filter","date","getTime","appointmentDuration","minViewTime","map","_convertRruleResult","start","min","max","appointmentTimezoneOffset","clientOffsets_startDate","getClientTimezoneOffset","clientOffsets_minViewDate","clientOffsets_maxViewDate","duration","end","setOffsetsToDate","Date","startDateDSTDifferenceMs","getDiffBetweenClientTimezoneOffsets","switchToSummerTime","startIntervalDateDSTShift","rruleDate","localTimezoneOffset","additionalWorkaroundOffsetForRrule","convertedBackDate","convertedDateDSTShift","resultDate","resultDateDSTShift","hasRecurrence","length","result","_parseRecurrenceRule","validateRRule","isValidRecurrenceRule","daysFromByDayRule","byday","Array","isArray","split","item","match","getAsciiStringByDate","currentOffset","getTimezoneOffset","offsetDate","getFullYear","getMonth","slice","getDate","getHours","getMinutes","getSeconds","getRecurrenceString","object","field","value","substring","toUpperCase","_parseExceptionToRawArray","getDateByAsciiString","exceptionText","year","month","hours","minutes","seconds","isUtc","_createDateTuple","UTC","_dispose","_getTimeZoneOffset","startDateUtc","ruleOptions","parseString","firstDayOfWeek","dtstart","wkst","_createRRule","exception","exceptionStrings","exceptionDates","forEach","getPostProcessedException","utcDate","exdate","rrule","ruleObject","ruleParts","i","len","ruleName","toLowerCase","ruleValue","count","parseInt","isNaN","interval","parseResult","shift","splice","unshift","_brokenRuleNameExists","includes","_wrongCountRule","_wrongIntervalRule","_wrongDayOfWeek","_wrongByMonthDayRule","_wrongByMonth","_wrongUntilRule","_logBrokenRule","wrongUntil","wrongCount","wrongByMonthDay","byMonthDay","bymonthday","wrongByMonth","byMonth","bymonth","wrongInterval","byDay","daysByRule","brokenDaysExist","_","day","Object","prototype","hasOwnProperty","call","brokenRuleExists","log","push"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/devextreme/esm/ui/scheduler/recurrence.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/recurrence.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport errors from \"../../core/errors\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    RRule,\r\n    RRuleSet\r\n} from \"rrule\";\r\nimport dateUtils from \"../../core/utils/date\";\r\nimport timeZoneUtils from \"./utils.timeZone\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar ruleNames = [\"freq\", \"interval\", \"byday\", \"byweekno\", \"byyearday\", \"bymonth\", \"bymonthday\", \"count\", \"until\", \"byhour\", \"byminute\", \"bysecond\", \"bysetpos\", \"wkst\"];\r\nvar freqNames = [\"DAILY\", \"WEEKLY\", \"MONTHLY\", \"YEARLY\", \"SECONDLY\", \"MINUTELY\", \"HOURLY\"];\r\nvar days = {\r\n    SU: 0,\r\n    MO: 1,\r\n    TU: 2,\r\n    WE: 3,\r\n    TH: 4,\r\n    FR: 5,\r\n    SA: 6\r\n};\r\nvar loggedWarnings = [];\r\nvar MS_IN_HOUR = 36e5;\r\nvar MS_IN_DAY = 24 * MS_IN_HOUR;\r\nvar recurrence = null;\r\nexport function getRecurrenceProcessor() {\r\n    if (!recurrence) {\r\n        recurrence = new RecurrenceProcessor\r\n    }\r\n    return recurrence\r\n}\r\nclass RecurrenceProcessor {\r\n    constructor() {\r\n        this.rRule = null;\r\n        this.rRuleSet = null;\r\n        this.validator = new RecurrenceValidator\r\n    }\r\n    generateDates(options) {\r\n        var recurrenceRule = this.evalRecurrenceRule(options.rule);\r\n        var rule = recurrenceRule.rule;\r\n        if (!recurrenceRule.isValid || !rule.freq) {\r\n            return []\r\n        }\r\n        var rruleIntervalParams = this._createRruleIntervalParams(options);\r\n        this._initializeRRule(options, rruleIntervalParams.startIntervalDate, rule.until);\r\n        return this.rRuleSet.between(rruleIntervalParams.minViewDate, rruleIntervalParams.maxViewDate, true).filter(date => date.getTime() + rruleIntervalParams.appointmentDuration >= rruleIntervalParams.minViewTime).map(date => this._convertRruleResult(rruleIntervalParams, options, date))\r\n    }\r\n    _createRruleIntervalParams(options) {\r\n        var {\r\n            start: start,\r\n            min: min,\r\n            max: max,\r\n            appointmentTimezoneOffset: appointmentTimezoneOffset\r\n        } = options;\r\n        var clientOffsets_startDate = timeZoneUtils.getClientTimezoneOffset(start),\r\n            clientOffsets_minViewDate = timeZoneUtils.getClientTimezoneOffset(min),\r\n            clientOffsets_maxViewDate = timeZoneUtils.getClientTimezoneOffset(max);\r\n        var duration = options.end ? options.end.getTime() - options.start.getTime() : 0;\r\n        var startIntervalDate = timeZoneUtils.setOffsetsToDate(options.start, [-clientOffsets_startDate, appointmentTimezoneOffset]);\r\n        var minViewTime = options.min.getTime() - clientOffsets_minViewDate + appointmentTimezoneOffset;\r\n        var minViewDate = new Date(minViewTime - duration);\r\n        var maxViewDate = timeZoneUtils.setOffsetsToDate(options.max, [-clientOffsets_maxViewDate, appointmentTimezoneOffset]);\r\n        var startDateDSTDifferenceMs = timeZoneUtils.getDiffBetweenClientTimezoneOffsets(options.start, startIntervalDate);\r\n        var switchToSummerTime = startDateDSTDifferenceMs < 0;\r\n        return {\r\n            startIntervalDate: startIntervalDate,\r\n            minViewTime: minViewTime,\r\n            minViewDate: minViewDate,\r\n            maxViewDate: maxViewDate,\r\n            startIntervalDateDSTShift: switchToSummerTime ? 0 : startDateDSTDifferenceMs,\r\n            appointmentDuration: duration\r\n        }\r\n    }\r\n    _convertRruleResult(rruleIntervalParams, options, rruleDate) {\r\n        var localTimezoneOffset = timeZoneUtils.getClientTimezoneOffset(rruleDate);\r\n        var additionalWorkaroundOffsetForRrule = localTimezoneOffset / MS_IN_HOUR <= -13 ? -MS_IN_DAY : 0;\r\n        var convertedBackDate = timeZoneUtils.setOffsetsToDate(rruleDate, [localTimezoneOffset, additionalWorkaroundOffsetForRrule, -options.appointmentTimezoneOffset, rruleIntervalParams.startIntervalDateDSTShift]);\r\n        var convertedDateDSTShift = timeZoneUtils.getDiffBetweenClientTimezoneOffsets(convertedBackDate, rruleDate);\r\n        var switchToSummerTime = convertedDateDSTShift < 0;\r\n        var resultDate = timeZoneUtils.setOffsetsToDate(convertedBackDate, [convertedDateDSTShift]);\r\n        var resultDateDSTShift = timeZoneUtils.getDiffBetweenClientTimezoneOffsets(resultDate, convertedBackDate);\r\n        if (resultDateDSTShift && switchToSummerTime) {\r\n            return new Date(resultDate.getTime() + resultDateDSTShift)\r\n        }\r\n        return resultDate\r\n    }\r\n    hasRecurrence(options) {\r\n        return !!this.generateDates(options).length\r\n    }\r\n    evalRecurrenceRule(rule) {\r\n        var result = {\r\n            rule: {},\r\n            isValid: false\r\n        };\r\n        if (rule) {\r\n            result.rule = this._parseRecurrenceRule(rule);\r\n            result.isValid = this.validator.validateRRule(result.rule, rule)\r\n        }\r\n        return result\r\n    }\r\n    isValidRecurrenceRule(rule) {\r\n        return this.evalRecurrenceRule(rule).isValid\r\n    }\r\n    daysFromByDayRule(rule) {\r\n        var result = [];\r\n        if (rule.byday) {\r\n            if (Array.isArray(rule.byday)) {\r\n                result = rule.byday\r\n            } else {\r\n                result = rule.byday.split(\",\")\r\n            }\r\n        }\r\n        return result.map(item => {\r\n            var match = item.match(/[A-Za-z]+/);\r\n            return !!match && match[0]\r\n        }).filter(item => !!item)\r\n    }\r\n    getAsciiStringByDate(date) {\r\n        var currentOffset = date.getTimezoneOffset() * toMs(\"minute\");\r\n        var offsetDate = new Date(date.getTime() + currentOffset);\r\n        return offsetDate.getFullYear() + (\"0\" + (offsetDate.getMonth() + 1)).slice(-2) + (\"0\" + offsetDate.getDate()).slice(-2) + \"T\" + (\"0\" + offsetDate.getHours()).slice(-2) + (\"0\" + offsetDate.getMinutes()).slice(-2) + (\"0\" + offsetDate.getSeconds()).slice(-2) + \"Z\"\r\n    }\r\n    getRecurrenceString(object) {\r\n        if (!object || !object.freq) {\r\n            return\r\n        }\r\n        var result = \"\";\r\n        for (var field in object) {\r\n            var value = object[field];\r\n            if (\"interval\" === field && value < 2) {\r\n                continue\r\n            }\r\n            if (\"until\" === field) {\r\n                value = this.getAsciiStringByDate(value)\r\n            }\r\n            result += field + \"=\" + value + \";\"\r\n        }\r\n        result = result.substring(0, result.length - 1);\r\n        return result.toUpperCase()\r\n    }\r\n    _parseExceptionToRawArray(value) {\r\n        return value.match(/(\\d{4})(\\d{2})(\\d{2})(T(\\d{2})(\\d{2})(\\d{2}))?(Z)?/)\r\n    }\r\n    getDateByAsciiString(exceptionText) {\r\n        if (\"string\" !== typeof exceptionText) {\r\n            return exceptionText\r\n        }\r\n        var result = this._parseExceptionToRawArray(exceptionText);\r\n        if (!result) {\r\n            return null\r\n        }\r\n        var [year, month, date, hours, minutes, seconds, isUtc] = this._createDateTuple(result);\r\n        if (isUtc) {\r\n            return new Date(Date.UTC(year, month, date, hours, minutes, seconds))\r\n        }\r\n        return new Date(year, month, date, hours, minutes, seconds)\r\n    }\r\n    _dispose() {\r\n        if (this.rRuleSet) {\r\n            delete this.rRuleSet;\r\n            this.rRuleSet = null\r\n        }\r\n        if (this.rRule) {\r\n            delete this.rRule;\r\n            this.rRule = null\r\n        }\r\n    }\r\n    _getTimeZoneOffset() {\r\n        return (new Date).getTimezoneOffset()\r\n    }\r\n    _initializeRRule(options, startDateUtc, until) {\r\n        var ruleOptions = RRule.parseString(options.rule);\r\n        var firstDayOfWeek = options.firstDayOfWeek;\r\n        ruleOptions.dtstart = startDateUtc;\r\n        if (!ruleOptions.wkst && firstDayOfWeek) {\r\n            ruleOptions.wkst = [6, 0, 1, 2, 3, 4, 5][firstDayOfWeek]\r\n        }\r\n        if (until) {\r\n            ruleOptions.until = timeZoneUtils.setOffsetsToDate(until, [-timeZoneUtils.getClientTimezoneOffset(until), options.appointmentTimezoneOffset])\r\n        }\r\n        this._createRRule(ruleOptions);\r\n        if (options.exception) {\r\n            var exceptionStrings = options.exception;\r\n            var exceptionDates = exceptionStrings.split(\",\").map(rule => this.getDateByAsciiString(rule));\r\n            exceptionDates.forEach(date => {\r\n                if (options.getPostProcessedException) {\r\n                    date = options.getPostProcessedException(date)\r\n                }\r\n                var utcDate = timeZoneUtils.setOffsetsToDate(date, [-timeZoneUtils.getClientTimezoneOffset(date), options.appointmentTimezoneOffset]);\r\n                this.rRuleSet.exdate(utcDate)\r\n            })\r\n        }\r\n    }\r\n    _createRRule(ruleOptions) {\r\n        this._dispose();\r\n        this.rRuleSet = new RRuleSet;\r\n        this.rRule = new RRule(ruleOptions);\r\n        this.rRuleSet.rrule(this.rRule)\r\n    }\r\n    _parseRecurrenceRule(recurrence) {\r\n        var ruleObject = {};\r\n        var ruleParts = recurrence.split(\";\");\r\n        for (var i = 0, len = ruleParts.length; i < len; i++) {\r\n            var rule = ruleParts[i].split(\"=\");\r\n            var ruleName = rule[0].toLowerCase();\r\n            var ruleValue = rule[1];\r\n            ruleObject[ruleName] = ruleValue\r\n        }\r\n        var count = parseInt(ruleObject.count);\r\n        if (!isNaN(count)) {\r\n            ruleObject.count = count\r\n        }\r\n        if (ruleObject.interval) {\r\n            var interval = parseInt(ruleObject.interval);\r\n            if (!isNaN(interval)) {\r\n                ruleObject.interval = interval\r\n            }\r\n        } else {\r\n            ruleObject.interval = 1\r\n        }\r\n        if (ruleObject.freq && ruleObject.until) {\r\n            ruleObject.until = this.getDateByAsciiString(ruleObject.until)\r\n        }\r\n        return ruleObject\r\n    }\r\n    _createDateTuple(parseResult) {\r\n        var isUtc = void 0 !== parseResult[8];\r\n        parseResult.shift();\r\n        if (void 0 === parseResult[3]) {\r\n            parseResult.splice(3)\r\n        } else {\r\n            parseResult.splice(3, 1);\r\n            parseResult.splice(6)\r\n        }\r\n        parseResult[1]--;\r\n        parseResult.unshift(null);\r\n        return [parseInt(parseResult[1]), parseInt(parseResult[2]), parseInt(parseResult[3]), parseInt(parseResult[4]) || 0, parseInt(parseResult[5]) || 0, parseInt(parseResult[6]) || 0, isUtc]\r\n    }\r\n}\r\nclass RecurrenceValidator {\r\n    validateRRule(rule, recurrence) {\r\n        if (this._brokenRuleNameExists(rule) || !freqNames.includes(rule.freq) || this._wrongCountRule(rule) || this._wrongIntervalRule(rule) || this._wrongDayOfWeek(rule) || this._wrongByMonthDayRule(rule) || this._wrongByMonth(rule) || this._wrongUntilRule(rule)) {\r\n            this._logBrokenRule(recurrence);\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n    _wrongUntilRule(rule) {\r\n        var wrongUntil = false;\r\n        var until = rule.until;\r\n        if (void 0 !== until && !(until instanceof Date)) {\r\n            wrongUntil = true\r\n        }\r\n        return wrongUntil\r\n    }\r\n    _wrongCountRule(rule) {\r\n        var wrongCount = false;\r\n        var count = rule.count;\r\n        if (count && \"string\" === typeof count) {\r\n            wrongCount = true\r\n        }\r\n        return wrongCount\r\n    }\r\n    _wrongByMonthDayRule(rule) {\r\n        var wrongByMonthDay = false;\r\n        var byMonthDay = rule.bymonthday;\r\n        if (byMonthDay && isNaN(parseInt(byMonthDay))) {\r\n            wrongByMonthDay = true\r\n        }\r\n        return wrongByMonthDay\r\n    }\r\n    _wrongByMonth(rule) {\r\n        var wrongByMonth = false;\r\n        var byMonth = rule.bymonth;\r\n        if (byMonth && isNaN(parseInt(byMonth))) {\r\n            wrongByMonth = true\r\n        }\r\n        return wrongByMonth\r\n    }\r\n    _wrongIntervalRule(rule) {\r\n        var wrongInterval = false;\r\n        var interval = rule.interval;\r\n        if (interval && \"string\" === typeof interval) {\r\n            wrongInterval = true\r\n        }\r\n        return wrongInterval\r\n    }\r\n    _wrongDayOfWeek(rule) {\r\n        var byDay = rule.byday;\r\n        var daysByRule = getRecurrenceProcessor().daysFromByDayRule(rule);\r\n        var brokenDaysExist = false;\r\n        if (\"\" === byDay) {\r\n            brokenDaysExist = true\r\n        }\r\n        each(daysByRule, (function(_, day) {\r\n            if (!Object.prototype.hasOwnProperty.call(days, day)) {\r\n                brokenDaysExist = true;\r\n                return false\r\n            }\r\n        }));\r\n        return brokenDaysExist\r\n    }\r\n    _brokenRuleNameExists(rule) {\r\n        var brokenRuleExists = false;\r\n        each(rule, (function(ruleName) {\r\n            if (!ruleNames.includes(ruleName)) {\r\n                brokenRuleExists = true;\r\n                return false\r\n            }\r\n        }));\r\n        return brokenRuleExists\r\n    }\r\n    _logBrokenRule(recurrence) {\r\n        if (!loggedWarnings.includes(recurrence)) {\r\n            errors.log(\"W0006\", recurrence);\r\n            loggedWarnings.push(recurrence)\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}