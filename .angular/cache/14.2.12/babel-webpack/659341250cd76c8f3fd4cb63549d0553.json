{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/timeZoneCalculator/utils.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../../../core/utils/type\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { PathTimeZoneConversion } from \"./types\";\nvar MS_IN_MINUTE = 6e4;\nvar MS_IN_HOUR = 60 * MS_IN_MINUTE;\nexport class TimeZoneCalculator {\n  constructor(options) {\n    this.options = options;\n  }\n\n  createDate(sourceDate, info) {\n    var date = new Date(sourceDate);\n\n    switch (info.path) {\n      case PathTimeZoneConversion.fromSourceToAppointment:\n        return this.getConvertedDate(date, info.appointmentTimeZone, true, false);\n\n      case PathTimeZoneConversion.fromAppointmentToSource:\n        return this.getConvertedDate(date, info.appointmentTimeZone, true, true);\n\n      case PathTimeZoneConversion.fromSourceToGrid:\n        return this.getConvertedDate(date, info.appointmentTimeZone, false, false);\n\n      case PathTimeZoneConversion.fromGridToSource:\n        return this.getConvertedDate(date, info.appointmentTimeZone, false, true);\n\n      default:\n        throw new Error(\"not specified pathTimeZoneConversion\");\n    }\n  }\n\n  getOffsets(date, appointmentTimezone) {\n    var clientOffset = -this.getClientOffset(date) / dateUtils.dateToMilliseconds(\"hour\");\n    var commonOffset = this.getCommonOffset(date);\n    var appointmentOffset = this.getAppointmentOffset(date, appointmentTimezone);\n    return {\n      client: clientOffset,\n      common: !isDefined(commonOffset) ? clientOffset : commonOffset,\n      appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\n    };\n  }\n\n  getConvertedDateByOffsets(date, clientOffset, targetOffset, isBack) {\n    var direction = isBack ? -1 : 1;\n    var resultDate = new Date(date);\n    resultDate.setMinutes(resultDate.getMinutes() - direction * (60 * clientOffset));\n    resultDate.setMinutes(resultDate.getMinutes() + direction * (60 * targetOffset));\n    return new Date(resultDate);\n  }\n\n  getOriginStartDateOffsetInMs(date, timezone, isUTCDate) {\n    var offsetInHours = this.getOffsetInHours(date, timezone, isUTCDate);\n    return offsetInHours * MS_IN_HOUR;\n  }\n\n  getOffsetInHours(date, timezone, isUTCDate) {\n    var {\n      appointment: appointment,\n      client: client,\n      common: common\n    } = this.getOffsets(date, timezone);\n\n    if (!!timezone && isUTCDate) {\n      return appointment - client;\n    }\n\n    if (!!timezone && !isUTCDate) {\n      return appointment - common;\n    }\n\n    if (!timezone && isUTCDate) {\n      return common - client;\n    }\n\n    return 0;\n  }\n\n  getClientOffset(date) {\n    return this.options.getClientOffset(date);\n  }\n\n  getCommonOffset(date) {\n    return this.options.tryGetCommonOffset(date);\n  }\n\n  getAppointmentOffset(date, appointmentTimezone) {\n    return this.options.tryGetAppointmentOffset(date, appointmentTimezone);\n  }\n\n  getConvertedDate(date, appointmentTimezone, useAppointmentTimeZone, isBack) {\n    var newDate = new Date(date.getTime());\n    var offsets = this.getOffsets(newDate, appointmentTimezone);\n\n    if (useAppointmentTimeZone && !!appointmentTimezone) {\n      return this.getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack);\n    }\n\n    return this.getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack);\n  }\n\n}","map":{"version":3,"names":["isDefined","dateUtils","PathTimeZoneConversion","MS_IN_MINUTE","MS_IN_HOUR","TimeZoneCalculator","constructor","options","createDate","sourceDate","info","date","Date","path","fromSourceToAppointment","getConvertedDate","appointmentTimeZone","fromAppointmentToSource","fromSourceToGrid","fromGridToSource","Error","getOffsets","appointmentTimezone","clientOffset","getClientOffset","dateToMilliseconds","commonOffset","getCommonOffset","appointmentOffset","getAppointmentOffset","client","common","appointment","getConvertedDateByOffsets","targetOffset","isBack","direction","resultDate","setMinutes","getMinutes","getOriginStartDateOffsetInMs","timezone","isUTCDate","offsetInHours","getOffsetInHours","tryGetCommonOffset","tryGetAppointmentOffset","useAppointmentTimeZone","newDate","getTime","offsets"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/devextreme/esm/renovation/ui/scheduler/timeZoneCalculator/utils.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/renovation/ui/scheduler/timeZoneCalculator/utils.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined\r\n} from \"../../../../core/utils/type\";\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport {\r\n    PathTimeZoneConversion\r\n} from \"./types\";\r\nvar MS_IN_MINUTE = 6e4;\r\nvar MS_IN_HOUR = 60 * MS_IN_MINUTE;\r\nexport class TimeZoneCalculator {\r\n    constructor(options) {\r\n        this.options = options\r\n    }\r\n    createDate(sourceDate, info) {\r\n        var date = new Date(sourceDate);\r\n        switch (info.path) {\r\n            case PathTimeZoneConversion.fromSourceToAppointment:\r\n                return this.getConvertedDate(date, info.appointmentTimeZone, true, false);\r\n            case PathTimeZoneConversion.fromAppointmentToSource:\r\n                return this.getConvertedDate(date, info.appointmentTimeZone, true, true);\r\n            case PathTimeZoneConversion.fromSourceToGrid:\r\n                return this.getConvertedDate(date, info.appointmentTimeZone, false, false);\r\n            case PathTimeZoneConversion.fromGridToSource:\r\n                return this.getConvertedDate(date, info.appointmentTimeZone, false, true);\r\n            default:\r\n                throw new Error(\"not specified pathTimeZoneConversion\")\r\n        }\r\n    }\r\n    getOffsets(date, appointmentTimezone) {\r\n        var clientOffset = -this.getClientOffset(date) / dateUtils.dateToMilliseconds(\"hour\");\r\n        var commonOffset = this.getCommonOffset(date);\r\n        var appointmentOffset = this.getAppointmentOffset(date, appointmentTimezone);\r\n        return {\r\n            client: clientOffset,\r\n            common: !isDefined(commonOffset) ? clientOffset : commonOffset,\r\n            appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\r\n        }\r\n    }\r\n    getConvertedDateByOffsets(date, clientOffset, targetOffset, isBack) {\r\n        var direction = isBack ? -1 : 1;\r\n        var resultDate = new Date(date);\r\n        resultDate.setMinutes(resultDate.getMinutes() - direction * (60 * clientOffset));\r\n        resultDate.setMinutes(resultDate.getMinutes() + direction * (60 * targetOffset));\r\n        return new Date(resultDate)\r\n    }\r\n    getOriginStartDateOffsetInMs(date, timezone, isUTCDate) {\r\n        var offsetInHours = this.getOffsetInHours(date, timezone, isUTCDate);\r\n        return offsetInHours * MS_IN_HOUR\r\n    }\r\n    getOffsetInHours(date, timezone, isUTCDate) {\r\n        var {\r\n            appointment: appointment,\r\n            client: client,\r\n            common: common\r\n        } = this.getOffsets(date, timezone);\r\n        if (!!timezone && isUTCDate) {\r\n            return appointment - client\r\n        }\r\n        if (!!timezone && !isUTCDate) {\r\n            return appointment - common\r\n        }\r\n        if (!timezone && isUTCDate) {\r\n            return common - client\r\n        }\r\n        return 0\r\n    }\r\n    getClientOffset(date) {\r\n        return this.options.getClientOffset(date)\r\n    }\r\n    getCommonOffset(date) {\r\n        return this.options.tryGetCommonOffset(date)\r\n    }\r\n    getAppointmentOffset(date, appointmentTimezone) {\r\n        return this.options.tryGetAppointmentOffset(date, appointmentTimezone)\r\n    }\r\n    getConvertedDate(date, appointmentTimezone, useAppointmentTimeZone, isBack) {\r\n        var newDate = new Date(date.getTime());\r\n        var offsets = this.getOffsets(newDate, appointmentTimezone);\r\n        if (useAppointmentTimeZone && !!appointmentTimezone) {\r\n            return this.getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack)\r\n        }\r\n        return this.getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack)\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}