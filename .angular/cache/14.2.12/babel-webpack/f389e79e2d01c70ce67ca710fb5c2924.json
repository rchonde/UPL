{"ast":null,"code":"import { __extends, __generator } from \"tslib\";\nimport { Disposer, MultiDisposer } from \"./Disposer\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\nimport * as $iter from \"./Iterator\";\n/**\r\n * @todo Description\r\n */\n\nvar IndexedIterable =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param array  List items\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   */\n  function IndexedIterable(array, start, end) {\n    this._array = array;\n    this._start = start;\n    this._end = end;\n  }\n  /**\r\n   * Returns a list item iterator.\r\n   *\r\n   * @return Iterator\r\n   */\n\n\n  IndexedIterable.prototype.iterator = function () {\n    var _this = this;\n\n    return function (push) {\n      if (_this._start !== _this._end) {\n        if (_this._start < _this._end) {\n          for (var i = _this._start; i < _this._end; ++i) {\n            if (!push(_this._array[i])) {\n              break;\n            }\n          }\n        } else {\n          for (var i = _this._start - 1; i >= _this._end; --i) {\n            if (!push(_this._array[i])) {\n              break;\n            }\n          }\n        }\n      }\n    };\n  };\n  /**\r\n   * Returns an interable list sorted backwards than current list.\r\n   *\r\n   * @return List\r\n   */\n\n\n  IndexedIterable.prototype.backwards = function () {\n    return new IndexedIterable(this._array, this._end, this._start);\n  };\n  /**\r\n   * Returns a new list consisting only of specific range of items between\r\n   * `start` and `end` indexes.\r\n   *\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return List\r\n   */\n\n\n  IndexedIterable.prototype.range = function (start, end) {\n    if (start <= end) {\n      if (this._start === this._end) {\n        return this;\n      } else if (this._start < this._end) {\n        var diff = end - start;\n        start = Math.max(this._start + start, this._start);\n        end = Math.min(start + diff, this._end);\n        return new IndexedIterable(this._array, start, end);\n      } else {\n        var diff = end - start;\n        start = Math.max(this._start - start, this._end);\n        end = Math.max(start - diff, this._end);\n        return new IndexedIterable(this._array, start, end);\n      }\n    } else {\n      throw new Error(\"Start index must be lower than end index\");\n    }\n  };\n\n  return IndexedIterable;\n}();\n\nexport { IndexedIterable };\n/**\r\n * ListGrouper organizes [[List]] items into groups.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nvar ListGrouper =\n/** @class */\nfunction (_super) {\n  __extends(ListGrouper, _super);\n  /**\r\n   * Constructor.\r\n   */\n\n\n  function ListGrouper(list, getKey, sort) {\n    var _this = _super.call(this, [list.events.on(\"inserted\", function (x) {\n      var value = x.newValue;\n\n      var key = _this._getKey(value);\n\n      var index = 0;\n      $iter.eachContinue(list.iterator(), function (x) {\n        if (x === value) {\n          return false;\n        } else if (_this._getKey(x) === key) {\n          ++index;\n        }\n\n        return true;\n      });\n\n      _this._insert(value, key, index);\n    }, undefined, false), list.events.on(\"removed\", function (x) {\n      _this._remove(x.oldValue);\n    }, undefined, false)]) || this;\n    /**\r\n     * Grouping keys.\r\n     */\n\n\n    _this._keys = [];\n    /**\r\n     * List item groups.\r\n     */\n\n    _this._groups = {};\n    _this._getKey = getKey;\n    _this._sort = sort;\n    $iter.each(list.iterator(), function (x) {\n      _this._insert(x, getKey(x));\n    });\n    return _this;\n  }\n  /**\r\n   * Inserts an item (`x`) to a specific group (`key`) and specific `index`.\r\n   *\r\n   * @param x      Item\r\n   * @param key    Group name\r\n   * @param index  Index\r\n   */\n\n\n  ListGrouper.prototype._insert = function (x, key, index) {\n    if (this._groups[key] == null) {\n      this._groups[key] = []; // TODO code duplication with SortedList\n\n      var _a = $array.getSortedIndex(this._keys, this._sort, key),\n          found = _a.found,\n          index_1 = _a.index;\n\n      if (found) {\n        throw new Error(\"Key already exists: \" + key);\n      } else {\n        $array.insertIndex(this._keys, index_1, key);\n      }\n    }\n\n    if (index == null) {\n      this._groups[key].push(x);\n    } else {\n      $array.insertIndex(this._groups[key], index, x);\n    }\n  };\n  /**\r\n   * Removes an item from the list.\r\n   *\r\n   * @param x Item to remove\r\n   */\n\n\n  ListGrouper.prototype._remove = function (x) {\n    var key = this._getKey(x);\n\n    var values = this._groups[key];\n\n    if (values != null) {\n      $array.remove(values, x);\n\n      if (values.length === 0) {\n        delete this._groups[key];\n\n        var _a = $array.getSortedIndex(this._keys, this._sort, key),\n            found = _a.found,\n            index = _a.index;\n\n        if (found) {\n          $array.removeIndex(this._keys, index);\n        } else {\n          throw new Error(\"Key doesn't exist: \" + key);\n        }\n      }\n    }\n  };\n  /**\r\n   * Returns an iterator for the list.\r\n   *\r\n   * The iterator will iterate through all items in all groups.\r\n   *\r\n   * @return Iterator\r\n   */\n\n\n  ListGrouper.prototype.iterator = function () {\n    var _this = this;\n\n    return $iter.flatten($iter.map($iter.fromArray(this._keys), function (key) {\n      return $iter.fromArray(_this._groups[key]);\n    }));\n  };\n\n  return ListGrouper;\n}(MultiDisposer);\n\nexport { ListGrouper };\n/**\r\n * A disposable list, which when disposed itself will call `dispose()` method\r\n * on all its items.\r\n */\n\nvar ListDisposer =\n/** @class */\nfunction (_super) {\n  __extends(ListDisposer, _super);\n\n  function ListDisposer(list, disposeOnRemove) {\n    if (disposeOnRemove === void 0) {\n      disposeOnRemove = true;\n    }\n\n    var _this = this;\n\n    if (disposeOnRemove) {\n      var disposer_1 = list.events.on(\"removed\", function (x) {\n        x.oldValue.dispose();\n      }, undefined, false);\n      _this = _super.call(this, function () {\n        disposer_1.dispose(); // TODO clear the list ?\n\n        $iter.each(list.iterator(), function (x) {\n          x.dispose();\n        });\n      }) || this;\n    } else {\n      _this = _super.call(this, function () {\n        // TODO clear the list ?\n        $iter.each(list.iterator(), function (x) {\n          x.dispose();\n        });\n      }) || this;\n    }\n\n    return _this;\n  }\n\n  return ListDisposer;\n}(Disposer);\n\nexport { ListDisposer };\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param index  Index\r\n * @param len    Length\r\n */\n\nfunction checkBounds(index, len) {\n  if (!(index >= 0 && index < len)) {\n    throw new Error(\"Index out of bounds: \" + index);\n  }\n}\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\n\n\nvar List =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param initial  Inital list of values to add to list\r\n   */\n  function List(initial) {\n    if (initial === void 0) {\n      initial = [];\n    }\n    /**\r\n     * Event dispatcher.\r\n     */\n\n\n    this.events = new EventDispatcher();\n    this._values = initial;\n  }\n\n  Object.defineProperty(List.prototype, \"values\", {\n    /**\r\n     * An array of values in the list.\r\n     *\r\n     * Do not use this property to add values. Rather use dedicated methods, like\r\n     * `push()`, `removeIndex()`, etc.\r\n     *\r\n     * @readonly\r\n     * @return List values\r\n     */\n    get: function () {\n      return this._values;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if list contains specific item reference.\r\n   *\r\n   * @param item  Item to search for\r\n   * @return `true` if found, `false` if not found\r\n   */\n\n  List.prototype.contains = function (value) {\n    return this._values.indexOf(value) !== -1;\n  };\n  /**\r\n   * Removes specific item from the list.\r\n   *\r\n   * @param item An item to remove\r\n   */\n\n\n  List.prototype.removeValue = function (value) {\n    var i = 0;\n    var length = this._values.length;\n\n    while (i < length) {\n      // TODO handle NaN\n      if (this._values[i] === value) {\n        this.removeIndex(i);\n        --length;\n      } else {\n        ++i;\n      }\n    }\n  };\n  /**\r\n   * Searches the list for specific item and returns its index.\r\n   *\r\n   * @param item  An item to search for\r\n   * @return Index or -1 if not found\r\n   */\n\n\n  List.prototype.indexOf = function (value) {\n    return $array.indexOf(this._values, value);\n  };\n\n  Object.defineProperty(List.prototype, \"length\", {\n    /**\r\n     * Number of items in list.\r\n     *\r\n     * @readonly\r\n     * @return Number of items\r\n     */\n    get: function () {\n      return this._values.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if there's a value at specific index.\r\n   *\r\n   * @param index  Index\r\n   * @return Value exists?\r\n   */\n\n  List.prototype.hasIndex = function (index) {\n    return index >= 0 && index < this._values.length;\n  };\n  /**\r\n   * Returns an item at specified index.\r\n   *\r\n   * @param index  Index\r\n   * @return List item\r\n   */\n\n\n  List.prototype.getIndex = function (index) {\n    return this._values[index];\n  };\n  /**\r\n   * Sets value at specific index.\r\n   *\r\n   * If there's already a value at the index, it is overwritten.\r\n   *\r\n   * @param index  Index\r\n   * @param value  New value\r\n   * @return New value\r\n   */\n\n\n  List.prototype.setIndex = function (index, value) {\n    checkBounds(index, this._values.length);\n    var oldValue = this._values[index]; // Do nothing if the old value and the new value are the same\n\n    if (oldValue !== value) {\n      this._values[index] = value;\n\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatchImmediately(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue,\n          newValue: value\n        });\n      }\n\n      if (this.events.isEnabled(\"removed\")) {\n        this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: this,\n          oldValue: oldValue\n        });\n      }\n\n      if (this.events.isEnabled(\"inserted\")) {\n        this.events.dispatchImmediately(\"inserted\", {\n          type: \"inserted\",\n          target: this,\n          newValue: value\n        });\n      }\n    }\n\n    return oldValue;\n  };\n  /**\r\n   * Adds an item to the list at a specific index, which pushes all the other\r\n   * items further down the list.\r\n   *\r\n   * @param index Index\r\n   * @param item  An item to add\r\n   */\n\n\n  List.prototype.insertIndex = function (index, value) {\n    checkBounds(index, this._values.length + 1);\n    $array.insertIndex(this._values, index, value);\n\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatchImmediately(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index: index,\n        newValue: value\n      });\n    }\n\n    if (this.events.isEnabled(\"inserted\")) {\n      this.events.dispatchImmediately(\"inserted\", {\n        type: \"inserted\",\n        target: this,\n        newValue: value\n      });\n    }\n  };\n  /**\r\n   * [_sortQuicksort description]\r\n   *\r\n   * @todo Description\r\n   * @param low    [description]\r\n   * @param high   [description]\r\n   * @param order  [description]\r\n   */\n\n\n  List.prototype._sortQuicksort = function (low, high, order) {\n    if (low < high) {\n      var p = this._sortPartition(low, high, order);\n\n      this._sortQuicksort(low, p, order);\n\n      this._sortQuicksort(p + 1, high, order);\n    }\n  };\n  /**\r\n   * [_sortPartition description]\r\n   *\r\n   * @todo Description\r\n   * @param low    [description]\r\n   * @param high   [description]\r\n   * @param order  [description]\r\n   * @return [description]\r\n   */\n\n\n  List.prototype._sortPartition = function (low, high, order) {\n    var values = this._values;\n    var pivot = values[low];\n    var i = low - 1;\n    var j = high + 1;\n\n    for (;;) {\n      do {\n        ++i;\n      } while (order(values[i], pivot) < 0);\n\n      do {\n        --j;\n      } while (order(values[j], pivot) > 0);\n\n      if (i >= j) {\n        return j;\n      } else {\n        this.swap(i, j);\n      }\n    }\n  };\n  /**\r\n   * Reorders list items according to specific ordering function.\r\n   *\r\n   * @param order  Ordering function\r\n   */\n\n\n  List.prototype.sort = function (order) {\n    // https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n    // @todo faster implementation of this\n    // @todo test this\n    this._sortQuicksort(0, this._values.length - 1, order);\n  };\n  /**\r\n   * Swaps indexes of two items in the list.\r\n   *\r\n   * @param a  Item 1\r\n   * @param b  Item 2\r\n   */\n\n\n  List.prototype.swap = function (a, b) {\n    var len = this._values.length;\n    checkBounds(a, len);\n    checkBounds(b, len);\n\n    if (a !== b) {\n      var value_a = this._values[a];\n      var value_b = this._values[b];\n      this._values[a] = value_b;\n\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatchImmediately(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: a,\n          oldValue: value_a,\n          newValue: value_b\n        });\n      }\n\n      this._values[b] = value_a;\n\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatchImmediately(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: b,\n          oldValue: value_b,\n          newValue: value_a\n        });\n      }\n    }\n  };\n  /**\r\n   * Removes a value at specific index.\r\n   *\r\n   * @param index  Index of value to remove\r\n   * @return Removed value\r\n   */\n\n\n  List.prototype.removeIndex = function (index) {\n    checkBounds(index, this._values.length);\n    var oldValue = this._values[index];\n    $array.removeIndex(this._values, index);\n\n    if (this.events.isEnabled(\"removeIndex\")) {\n      this.events.dispatchImmediately(\"removeIndex\", {\n        type: \"removeIndex\",\n        target: this,\n        index: index,\n        oldValue: oldValue\n      });\n    }\n\n    if (this.events.isEnabled(\"removed\")) {\n      this.events.dispatchImmediately(\"removed\", {\n        type: \"removed\",\n        target: this,\n        oldValue: oldValue\n      });\n    }\n\n    return oldValue;\n  };\n  /**\r\n   * Moves an item to a specific index within the list.\r\n   *\r\n   * If the index is not specified it will move the item to the end of the\r\n   * list.\r\n   *\r\n   * @param value  Item to move\r\n   * @param index  Index to place item at\r\n   */\n\n\n  List.prototype.moveValue = function (value, toIndex) {\n    // TODO don't do anything if the desired index is the same as the current index\n    var index = this.indexOf(value); // TODO remove all old values rather than only the first ?\n\n    if (index !== -1) {\n      var oldValue = this._values[index];\n      $array.removeIndex(this._values, index);\n\n      if (this.events.isEnabled(\"removeIndex\")) {\n        this.events.dispatchImmediately(\"removeIndex\", {\n          type: \"removeIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue\n        });\n      }\n    }\n\n    if (toIndex == null) {\n      toIndex = this._values.length;\n\n      this._values.push(value);\n    } else {\n      $array.insertIndex(this._values, toIndex, value);\n    }\n\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatchImmediately(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index: toIndex,\n        newValue: value\n      });\n    }\n\n    if (index === -1) {\n      if (this.events.isEnabled(\"inserted\")) {\n        this.events.dispatchImmediately(\"inserted\", {\n          type: \"inserted\",\n          target: this,\n          newValue: value\n        });\n      }\n    }\n  };\n  /**\r\n   * Adds an item to the end of the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n\n\n  List.prototype.push = function (value) {\n    var index = this._values.push(value) - 1;\n\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatchImmediately(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index: index,\n        newValue: value\n      });\n    }\n\n    if (this.events.isEnabled(\"inserted\")) {\n      this.events.dispatchImmediately(\"inserted\", {\n        type: \"inserted\",\n        target: this,\n        newValue: value\n      });\n    }\n\n    return value;\n  };\n  /**\r\n   * Adds an item as a first item in the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n\n\n  List.prototype.unshift = function (value) {\n    this.insertIndex(0, value);\n  };\n  /**\r\n   * Adds multiple items to the list.\r\n   *\r\n   * @param items  An Array of items to add\r\n   */\n\n\n  List.prototype.pushAll = function (values) {\n    var _this = this;\n\n    $array.each(values, function (value) {\n      _this.push(value);\n    });\n  };\n  /**\r\n   * Copies and adds items from abother list.\r\n   *\r\n   * @param source  A list top copy items from\r\n   */\n\n\n  List.prototype.copyFrom = function (source) {\n    this.pushAll(source._values);\n  };\n  /**\r\n   * Returns the last item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n\n\n  List.prototype.pop = function () {\n    var index = this._values.length - 1;\n    return index < 0 ? undefined : this.removeIndex(this._values.length - 1);\n  };\n  /**\r\n   * Returns the first item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n\n\n  List.prototype.shift = function () {\n    return this._values.length ? this.removeIndex(0) : undefined;\n  };\n  /**\r\n   * Sets multiple items to the list.\r\n   *\r\n   * All current items are removed.\r\n   *\r\n   * @param newArray  New items\r\n   */\n\n\n  List.prototype.setAll = function (newArray) {\n    var _this = this; // @tod if a value exists in both the new and old arrays, don't send remove/insert events\n\n\n    var oldArray = $array.copy(this._values);\n    this._values.length = 0;\n    $array.each(newArray, function (value) {\n      _this._values.push(value);\n    });\n\n    if (this.events.isEnabled(\"setAll\")) {\n      this.events.dispatchImmediately(\"setAll\", {\n        type: \"setAll\",\n        target: this,\n        oldArray: oldArray,\n        newArray: this._values // TODO make a copy ?\n\n      });\n    }\n\n    if (this.events.isEnabled(\"removed\")) {\n      $array.each(oldArray, function (x) {\n        _this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: _this,\n          oldValue: x\n        });\n      });\n    }\n\n    if (this.events.isEnabled(\"inserted\")) {\n      $array.each(this._values, function (x) {\n        _this.events.dispatchImmediately(\"inserted\", {\n          type: \"inserted\",\n          target: _this,\n          newValue: x\n        });\n      });\n    }\n  };\n  /**\r\n   * Removes all items from the list.\r\n   */\n\n\n  List.prototype.clear = function () {\n    this.setAll([]);\n  };\n  /**\r\n   * Returns a list iterator.\r\n   *\r\n   * @return Iterator\r\n   */\n\n\n  List.prototype.iterator = function () {\n    return $iter.fromArray(this._values);\n  };\n  /**\r\n   * Returns an ES6 iterator for the list.\r\n   */\n\n\n  List.prototype[Symbol.iterator] = function () {\n    var length, i;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          length = this._values.length;\n          i = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < length)) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , this._values[i]];\n\n        case 2:\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          ++i;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n  /**\r\n   * Calls `f` for each element in the list.\r\n   *\r\n   * `f` should have at least one parameter defined which will get a current\r\n   * item, with optional second argument - index.\r\n   */\n\n\n  List.prototype.each = function (f) {\n    $array.each(this._values, f);\n  };\n  /**\r\n   * Returns a specific range of list items, which can be iterated.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Code duplication with IndexedIterable\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return Range\r\n   */\n\n\n  List.prototype.range = function (start, end) {\n    if (start <= end) {\n      var diff = end - start;\n      start = Math.max(start, 0);\n      end = Math.min(start + diff, this._values.length);\n      return new IndexedIterable(this._values, start, end);\n    } else {\n      throw new Error(\"Start index must be lower than end index\");\n    }\n  };\n  /**\r\n   * Returns an iterator that has list items sorted backwards.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return List\r\n   */\n\n\n  List.prototype.backwards = function () {\n    return new IndexedIterable(this._values, this._values.length, 0);\n  };\n\n  return List;\n}();\n\nexport { List };\n/**\r\n * A version of a [[List]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\n\nvar ListTemplate =\n/** @class */\nfunction (_super) {\n  __extends(ListTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t Template object\r\n   */\n\n\n  function ListTemplate(t) {\n    var _this = _super.call(this) || this;\n\n    _this.template = t;\n    return _this;\n  }\n\n  Object.defineProperty(ListTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other list.\r\n   *\r\n   * @param source  Source list\r\n   */\n\n  ListTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    $iter.each(source.iterator(), function (value) {\n      _this.push(value.clone());\n    });\n  };\n\n  ListTemplate.prototype.create = function (make) {\n    var clone = make != null ? new make() : this.template.clone();\n    this.push(clone);\n    return clone;\n  };\n  /**\r\n   * Creates an exact clone of the list, including its items and template.\r\n   *\r\n   * @return New list\r\n   */\n\n\n  ListTemplate.prototype.clone = function () {\n    var out = new ListTemplate(this.template);\n    var values = this.values;\n    var length = values.length;\n\n    for (var i = 0; i < length; ++i) {\n      out.push(values[i].clone());\n    }\n\n    return out;\n  };\n\n  return ListTemplate;\n}(List);\n\nexport { ListTemplate };","map":{"version":3,"names":["__extends","__generator","Disposer","MultiDisposer","EventDispatcher","$array","$iter","IndexedIterable","array","start","end","_array","_start","_end","prototype","iterator","_this","push","i","backwards","range","diff","Math","max","min","Error","ListGrouper","_super","list","getKey","sort","call","events","on","x","value","newValue","key","_getKey","index","eachContinue","_insert","undefined","_remove","oldValue","_keys","_groups","_sort","each","_a","getSortedIndex","found","index_1","insertIndex","values","remove","length","removeIndex","flatten","map","fromArray","ListDisposer","disposeOnRemove","disposer_1","dispose","checkBounds","len","List","initial","_values","Object","defineProperty","get","enumerable","configurable","contains","indexOf","removeValue","hasIndex","getIndex","setIndex","isEnabled","dispatchImmediately","type","target","_sortQuicksort","low","high","order","p","_sortPartition","pivot","j","swap","a","b","value_a","value_b","moveValue","toIndex","unshift","pushAll","copyFrom","source","pop","shift","setAll","newArray","oldArray","copy","clear","Symbol","label","sent","f","ListTemplate","t","template","_template","set","v","isTemplate","clone","create","make","out"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/List.js"],"sourcesContent":["import { __extends, __generator } from \"tslib\";\r\nimport { Disposer, MultiDisposer } from \"./Disposer\";\r\nimport { EventDispatcher } from \"./EventDispatcher\";\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\n/**\r\n * @todo Description\r\n */\r\nvar IndexedIterable = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param array  List items\r\n     * @param start  Start index\r\n     * @param end    End index\r\n     */\r\n    function IndexedIterable(array, start, end) {\r\n        this._array = array;\r\n        this._start = start;\r\n        this._end = end;\r\n    }\r\n    /**\r\n     * Returns a list item iterator.\r\n     *\r\n     * @return Iterator\r\n     */\r\n    IndexedIterable.prototype.iterator = function () {\r\n        var _this = this;\r\n        return function (push) {\r\n            if (_this._start !== _this._end) {\r\n                if (_this._start < _this._end) {\r\n                    for (var i = _this._start; i < _this._end; ++i) {\r\n                        if (!push(_this._array[i])) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    for (var i = _this._start - 1; i >= _this._end; --i) {\r\n                        if (!push(_this._array[i])) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Returns an interable list sorted backwards than current list.\r\n     *\r\n     * @return List\r\n     */\r\n    IndexedIterable.prototype.backwards = function () {\r\n        return new IndexedIterable(this._array, this._end, this._start);\r\n    };\r\n    /**\r\n     * Returns a new list consisting only of specific range of items between\r\n     * `start` and `end` indexes.\r\n     *\r\n     * @param start  Start index\r\n     * @param end    End index\r\n     * @return List\r\n     */\r\n    IndexedIterable.prototype.range = function (start, end) {\r\n        if (start <= end) {\r\n            if (this._start === this._end) {\r\n                return this;\r\n            }\r\n            else if (this._start < this._end) {\r\n                var diff = end - start;\r\n                start = Math.max(this._start + start, this._start);\r\n                end = Math.min(start + diff, this._end);\r\n                return new IndexedIterable(this._array, start, end);\r\n            }\r\n            else {\r\n                var diff = end - start;\r\n                start = Math.max(this._start - start, this._end);\r\n                end = Math.max(start - diff, this._end);\r\n                return new IndexedIterable(this._array, start, end);\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Start index must be lower than end index\");\r\n        }\r\n    };\r\n    return IndexedIterable;\r\n}());\r\nexport { IndexedIterable };\r\n/**\r\n * ListGrouper organizes [[List]] items into groups.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar ListGrouper = /** @class */ (function (_super) {\r\n    __extends(ListGrouper, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function ListGrouper(list, getKey, sort) {\r\n        var _this = _super.call(this, [\r\n            list.events.on(\"inserted\", function (x) {\r\n                var value = x.newValue;\r\n                var key = _this._getKey(value);\r\n                var index = 0;\r\n                $iter.eachContinue(list.iterator(), function (x) {\r\n                    if (x === value) {\r\n                        return false;\r\n                    }\r\n                    else if (_this._getKey(x) === key) {\r\n                        ++index;\r\n                    }\r\n                    return true;\r\n                });\r\n                _this._insert(value, key, index);\r\n            }, undefined, false),\r\n            list.events.on(\"removed\", function (x) {\r\n                _this._remove(x.oldValue);\r\n            }, undefined, false)\r\n        ]) || this;\r\n        /**\r\n         * Grouping keys.\r\n         */\r\n        _this._keys = [];\r\n        /**\r\n         * List item groups.\r\n         */\r\n        _this._groups = {};\r\n        _this._getKey = getKey;\r\n        _this._sort = sort;\r\n        $iter.each(list.iterator(), function (x) {\r\n            _this._insert(x, getKey(x));\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Inserts an item (`x`) to a specific group (`key`) and specific `index`.\r\n     *\r\n     * @param x      Item\r\n     * @param key    Group name\r\n     * @param index  Index\r\n     */\r\n    ListGrouper.prototype._insert = function (x, key, index) {\r\n        if (this._groups[key] == null) {\r\n            this._groups[key] = [];\r\n            // TODO code duplication with SortedList\r\n            var _a = $array.getSortedIndex(this._keys, this._sort, key), found = _a.found, index_1 = _a.index;\r\n            if (found) {\r\n                throw new Error(\"Key already exists: \" + key);\r\n            }\r\n            else {\r\n                $array.insertIndex(this._keys, index_1, key);\r\n            }\r\n        }\r\n        if (index == null) {\r\n            this._groups[key].push(x);\r\n        }\r\n        else {\r\n            $array.insertIndex(this._groups[key], index, x);\r\n        }\r\n    };\r\n    /**\r\n     * Removes an item from the list.\r\n     *\r\n     * @param x Item to remove\r\n     */\r\n    ListGrouper.prototype._remove = function (x) {\r\n        var key = this._getKey(x);\r\n        var values = this._groups[key];\r\n        if (values != null) {\r\n            $array.remove(values, x);\r\n            if (values.length === 0) {\r\n                delete this._groups[key];\r\n                var _a = $array.getSortedIndex(this._keys, this._sort, key), found = _a.found, index = _a.index;\r\n                if (found) {\r\n                    $array.removeIndex(this._keys, index);\r\n                }\r\n                else {\r\n                    throw new Error(\"Key doesn't exist: \" + key);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns an iterator for the list.\r\n     *\r\n     * The iterator will iterate through all items in all groups.\r\n     *\r\n     * @return Iterator\r\n     */\r\n    ListGrouper.prototype.iterator = function () {\r\n        var _this = this;\r\n        return $iter.flatten($iter.map($iter.fromArray(this._keys), function (key) {\r\n            return $iter.fromArray(_this._groups[key]);\r\n        }));\r\n    };\r\n    return ListGrouper;\r\n}(MultiDisposer));\r\nexport { ListGrouper };\r\n/**\r\n * A disposable list, which when disposed itself will call `dispose()` method\r\n * on all its items.\r\n */\r\nvar ListDisposer = /** @class */ (function (_super) {\r\n    __extends(ListDisposer, _super);\r\n    function ListDisposer(list, disposeOnRemove) {\r\n        if (disposeOnRemove === void 0) { disposeOnRemove = true; }\r\n        var _this = this;\r\n        if (disposeOnRemove) {\r\n            var disposer_1 = list.events.on(\"removed\", function (x) {\r\n                x.oldValue.dispose();\r\n            }, undefined, false);\r\n            _this = _super.call(this, function () {\r\n                disposer_1.dispose();\r\n                // TODO clear the list ?\r\n                $iter.each(list.iterator(), function (x) {\r\n                    x.dispose();\r\n                });\r\n            }) || this;\r\n        }\r\n        else {\r\n            _this = _super.call(this, function () {\r\n                // TODO clear the list ?\r\n                $iter.each(list.iterator(), function (x) {\r\n                    x.dispose();\r\n                });\r\n            }) || this;\r\n        }\r\n        return _this;\r\n    }\r\n    return ListDisposer;\r\n}(Disposer));\r\nexport { ListDisposer };\r\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param index  Index\r\n * @param len    Length\r\n */\r\nfunction checkBounds(index, len) {\r\n    if (!(index >= 0 && index < len)) {\r\n        throw new Error(\"Index out of bounds: \" + index);\r\n    }\r\n}\r\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\r\nvar List = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param initial  Inital list of values to add to list\r\n     */\r\n    function List(initial) {\r\n        if (initial === void 0) { initial = []; }\r\n        /**\r\n         * Event dispatcher.\r\n         */\r\n        this.events = new EventDispatcher();\r\n        this._values = initial;\r\n    }\r\n    Object.defineProperty(List.prototype, \"values\", {\r\n        /**\r\n         * An array of values in the list.\r\n         *\r\n         * Do not use this property to add values. Rather use dedicated methods, like\r\n         * `push()`, `removeIndex()`, etc.\r\n         *\r\n         * @readonly\r\n         * @return List values\r\n         */\r\n        get: function () {\r\n            return this._values;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks if list contains specific item reference.\r\n     *\r\n     * @param item  Item to search for\r\n     * @return `true` if found, `false` if not found\r\n     */\r\n    List.prototype.contains = function (value) {\r\n        return this._values.indexOf(value) !== -1;\r\n    };\r\n    /**\r\n     * Removes specific item from the list.\r\n     *\r\n     * @param item An item to remove\r\n     */\r\n    List.prototype.removeValue = function (value) {\r\n        var i = 0;\r\n        var length = this._values.length;\r\n        while (i < length) {\r\n            // TODO handle NaN\r\n            if (this._values[i] === value) {\r\n                this.removeIndex(i);\r\n                --length;\r\n            }\r\n            else {\r\n                ++i;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Searches the list for specific item and returns its index.\r\n     *\r\n     * @param item  An item to search for\r\n     * @return Index or -1 if not found\r\n     */\r\n    List.prototype.indexOf = function (value) {\r\n        return $array.indexOf(this._values, value);\r\n    };\r\n    Object.defineProperty(List.prototype, \"length\", {\r\n        /**\r\n         * Number of items in list.\r\n         *\r\n         * @readonly\r\n         * @return Number of items\r\n         */\r\n        get: function () {\r\n            return this._values.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks if there's a value at specific index.\r\n     *\r\n     * @param index  Index\r\n     * @return Value exists?\r\n     */\r\n    List.prototype.hasIndex = function (index) {\r\n        return index >= 0 && index < this._values.length;\r\n    };\r\n    /**\r\n     * Returns an item at specified index.\r\n     *\r\n     * @param index  Index\r\n     * @return List item\r\n     */\r\n    List.prototype.getIndex = function (index) {\r\n        return this._values[index];\r\n    };\r\n    /**\r\n     * Sets value at specific index.\r\n     *\r\n     * If there's already a value at the index, it is overwritten.\r\n     *\r\n     * @param index  Index\r\n     * @param value  New value\r\n     * @return New value\r\n     */\r\n    List.prototype.setIndex = function (index, value) {\r\n        checkBounds(index, this._values.length);\r\n        var oldValue = this._values[index];\r\n        // Do nothing if the old value and the new value are the same\r\n        if (oldValue !== value) {\r\n            this._values[index] = value;\r\n            if (this.events.isEnabled(\"setIndex\")) {\r\n                this.events.dispatchImmediately(\"setIndex\", {\r\n                    type: \"setIndex\",\r\n                    target: this,\r\n                    index: index,\r\n                    oldValue: oldValue,\r\n                    newValue: value\r\n                });\r\n            }\r\n            if (this.events.isEnabled(\"removed\")) {\r\n                this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: this,\r\n                    oldValue: oldValue\r\n                });\r\n            }\r\n            if (this.events.isEnabled(\"inserted\")) {\r\n                this.events.dispatchImmediately(\"inserted\", {\r\n                    type: \"inserted\",\r\n                    target: this,\r\n                    newValue: value\r\n                });\r\n            }\r\n        }\r\n        return oldValue;\r\n    };\r\n    /**\r\n     * Adds an item to the list at a specific index, which pushes all the other\r\n     * items further down the list.\r\n     *\r\n     * @param index Index\r\n     * @param item  An item to add\r\n     */\r\n    List.prototype.insertIndex = function (index, value) {\r\n        checkBounds(index, this._values.length + 1);\r\n        $array.insertIndex(this._values, index, value);\r\n        if (this.events.isEnabled(\"insertIndex\")) {\r\n            this.events.dispatchImmediately(\"insertIndex\", {\r\n                type: \"insertIndex\",\r\n                target: this,\r\n                index: index,\r\n                newValue: value\r\n            });\r\n        }\r\n        if (this.events.isEnabled(\"inserted\")) {\r\n            this.events.dispatchImmediately(\"inserted\", {\r\n                type: \"inserted\",\r\n                target: this,\r\n                newValue: value\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * [_sortQuicksort description]\r\n     *\r\n     * @todo Description\r\n     * @param low    [description]\r\n     * @param high   [description]\r\n     * @param order  [description]\r\n     */\r\n    List.prototype._sortQuicksort = function (low, high, order) {\r\n        if (low < high) {\r\n            var p = this._sortPartition(low, high, order);\r\n            this._sortQuicksort(low, p, order);\r\n            this._sortQuicksort(p + 1, high, order);\r\n        }\r\n    };\r\n    /**\r\n     * [_sortPartition description]\r\n     *\r\n     * @todo Description\r\n     * @param low    [description]\r\n     * @param high   [description]\r\n     * @param order  [description]\r\n     * @return [description]\r\n     */\r\n    List.prototype._sortPartition = function (low, high, order) {\r\n        var values = this._values;\r\n        var pivot = values[low];\r\n        var i = low - 1;\r\n        var j = high + 1;\r\n        for (;;) {\r\n            do {\r\n                ++i;\r\n            } while (order(values[i], pivot) < 0);\r\n            do {\r\n                --j;\r\n            } while (order(values[j], pivot) > 0);\r\n            if (i >= j) {\r\n                return j;\r\n            }\r\n            else {\r\n                this.swap(i, j);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Reorders list items according to specific ordering function.\r\n     *\r\n     * @param order  Ordering function\r\n     */\r\n    List.prototype.sort = function (order) {\r\n        // https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\r\n        // @todo faster implementation of this\r\n        // @todo test this\r\n        this._sortQuicksort(0, this._values.length - 1, order);\r\n    };\r\n    /**\r\n     * Swaps indexes of two items in the list.\r\n     *\r\n     * @param a  Item 1\r\n     * @param b  Item 2\r\n     */\r\n    List.prototype.swap = function (a, b) {\r\n        var len = this._values.length;\r\n        checkBounds(a, len);\r\n        checkBounds(b, len);\r\n        if (a !== b) {\r\n            var value_a = this._values[a];\r\n            var value_b = this._values[b];\r\n            this._values[a] = value_b;\r\n            if (this.events.isEnabled(\"setIndex\")) {\r\n                this.events.dispatchImmediately(\"setIndex\", {\r\n                    type: \"setIndex\",\r\n                    target: this,\r\n                    index: a,\r\n                    oldValue: value_a,\r\n                    newValue: value_b\r\n                });\r\n            }\r\n            this._values[b] = value_a;\r\n            if (this.events.isEnabled(\"setIndex\")) {\r\n                this.events.dispatchImmediately(\"setIndex\", {\r\n                    type: \"setIndex\",\r\n                    target: this,\r\n                    index: b,\r\n                    oldValue: value_b,\r\n                    newValue: value_a\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Removes a value at specific index.\r\n     *\r\n     * @param index  Index of value to remove\r\n     * @return Removed value\r\n     */\r\n    List.prototype.removeIndex = function (index) {\r\n        checkBounds(index, this._values.length);\r\n        var oldValue = this._values[index];\r\n        $array.removeIndex(this._values, index);\r\n        if (this.events.isEnabled(\"removeIndex\")) {\r\n            this.events.dispatchImmediately(\"removeIndex\", {\r\n                type: \"removeIndex\",\r\n                target: this,\r\n                index: index,\r\n                oldValue: oldValue\r\n            });\r\n        }\r\n        if (this.events.isEnabled(\"removed\")) {\r\n            this.events.dispatchImmediately(\"removed\", {\r\n                type: \"removed\",\r\n                target: this,\r\n                oldValue: oldValue\r\n            });\r\n        }\r\n        return oldValue;\r\n    };\r\n    /**\r\n     * Moves an item to a specific index within the list.\r\n     *\r\n     * If the index is not specified it will move the item to the end of the\r\n     * list.\r\n     *\r\n     * @param value  Item to move\r\n     * @param index  Index to place item at\r\n     */\r\n    List.prototype.moveValue = function (value, toIndex) {\r\n        // TODO don't do anything if the desired index is the same as the current index\r\n        var index = this.indexOf(value);\r\n        // TODO remove all old values rather than only the first ?\r\n        if (index !== -1) {\r\n            var oldValue = this._values[index];\r\n            $array.removeIndex(this._values, index);\r\n            if (this.events.isEnabled(\"removeIndex\")) {\r\n                this.events.dispatchImmediately(\"removeIndex\", {\r\n                    type: \"removeIndex\",\r\n                    target: this,\r\n                    index: index,\r\n                    oldValue: oldValue\r\n                });\r\n            }\r\n        }\r\n        if (toIndex == null) {\r\n            toIndex = this._values.length;\r\n            this._values.push(value);\r\n        }\r\n        else {\r\n            $array.insertIndex(this._values, toIndex, value);\r\n        }\r\n        if (this.events.isEnabled(\"insertIndex\")) {\r\n            this.events.dispatchImmediately(\"insertIndex\", {\r\n                type: \"insertIndex\",\r\n                target: this,\r\n                index: toIndex,\r\n                newValue: value\r\n            });\r\n        }\r\n        if (index === -1) {\r\n            if (this.events.isEnabled(\"inserted\")) {\r\n                this.events.dispatchImmediately(\"inserted\", {\r\n                    type: \"inserted\",\r\n                    target: this,\r\n                    newValue: value\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Adds an item to the end of the list.\r\n     *\r\n     * @param item  An item to add\r\n     */\r\n    List.prototype.push = function (value) {\r\n        var index = this._values.push(value) - 1;\r\n        if (this.events.isEnabled(\"insertIndex\")) {\r\n            this.events.dispatchImmediately(\"insertIndex\", {\r\n                type: \"insertIndex\",\r\n                target: this,\r\n                index: index,\r\n                newValue: value\r\n            });\r\n        }\r\n        if (this.events.isEnabled(\"inserted\")) {\r\n            this.events.dispatchImmediately(\"inserted\", {\r\n                type: \"inserted\",\r\n                target: this,\r\n                newValue: value\r\n            });\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Adds an item as a first item in the list.\r\n     *\r\n     * @param item  An item to add\r\n     */\r\n    List.prototype.unshift = function (value) {\r\n        this.insertIndex(0, value);\r\n    };\r\n    /**\r\n     * Adds multiple items to the list.\r\n     *\r\n     * @param items  An Array of items to add\r\n     */\r\n    List.prototype.pushAll = function (values) {\r\n        var _this = this;\r\n        $array.each(values, function (value) {\r\n            _this.push(value);\r\n        });\r\n    };\r\n    /**\r\n     * Copies and adds items from abother list.\r\n     *\r\n     * @param source  A list top copy items from\r\n     */\r\n    List.prototype.copyFrom = function (source) {\r\n        this.pushAll(source._values);\r\n    };\r\n    /**\r\n     * Returns the last item from the list, and removes it.\r\n     *\r\n     * @return Item\r\n     */\r\n    List.prototype.pop = function () {\r\n        var index = this._values.length - 1;\r\n        return index < 0 ? undefined : this.removeIndex(this._values.length - 1);\r\n    };\r\n    /**\r\n     * Returns the first item from the list, and removes it.\r\n     *\r\n     * @return Item\r\n     */\r\n    List.prototype.shift = function () {\r\n        return this._values.length ? this.removeIndex(0) : undefined;\r\n    };\r\n    /**\r\n     * Sets multiple items to the list.\r\n     *\r\n     * All current items are removed.\r\n     *\r\n     * @param newArray  New items\r\n     */\r\n    List.prototype.setAll = function (newArray) {\r\n        var _this = this;\r\n        // @tod if a value exists in both the new and old arrays, don't send remove/insert events\r\n        var oldArray = $array.copy(this._values);\r\n        this._values.length = 0;\r\n        $array.each(newArray, function (value) {\r\n            _this._values.push(value);\r\n        });\r\n        if (this.events.isEnabled(\"setAll\")) {\r\n            this.events.dispatchImmediately(\"setAll\", {\r\n                type: \"setAll\",\r\n                target: this,\r\n                oldArray: oldArray,\r\n                newArray: this._values // TODO make a copy ?\r\n            });\r\n        }\r\n        if (this.events.isEnabled(\"removed\")) {\r\n            $array.each(oldArray, function (x) {\r\n                _this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: _this,\r\n                    oldValue: x\r\n                });\r\n            });\r\n        }\r\n        if (this.events.isEnabled(\"inserted\")) {\r\n            $array.each(this._values, function (x) {\r\n                _this.events.dispatchImmediately(\"inserted\", {\r\n                    type: \"inserted\",\r\n                    target: _this,\r\n                    newValue: x\r\n                });\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Removes all items from the list.\r\n     */\r\n    List.prototype.clear = function () {\r\n        this.setAll([]);\r\n    };\r\n    /**\r\n     * Returns a list iterator.\r\n     *\r\n     * @return Iterator\r\n     */\r\n    List.prototype.iterator = function () {\r\n        return $iter.fromArray(this._values);\r\n    };\r\n    /**\r\n     * Returns an ES6 iterator for the list.\r\n     */\r\n    List.prototype[Symbol.iterator] = function () {\r\n        var length, i;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    length = this._values.length;\r\n                    i = 0;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    if (!(i < length)) return [3 /*break*/, 4];\r\n                    return [4 /*yield*/, this._values[i]];\r\n                case 2:\r\n                    _a.sent();\r\n                    _a.label = 3;\r\n                case 3:\r\n                    ++i;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Calls `f` for each element in the list.\r\n     *\r\n     * `f` should have at least one parameter defined which will get a current\r\n     * item, with optional second argument - index.\r\n     */\r\n    List.prototype.each = function (f) {\r\n        $array.each(this._values, f);\r\n    };\r\n    /**\r\n     * Returns a specific range of list items, which can be iterated.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Code duplication with IndexedIterable\r\n     * @param start  Start index\r\n     * @param end    End index\r\n     * @return Range\r\n     */\r\n    List.prototype.range = function (start, end) {\r\n        if (start <= end) {\r\n            var diff = end - start;\r\n            start = Math.max(start, 0);\r\n            end = Math.min(start + diff, this._values.length);\r\n            return new IndexedIterable(this._values, start, end);\r\n        }\r\n        else {\r\n            throw new Error(\"Start index must be lower than end index\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns an iterator that has list items sorted backwards.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return List\r\n     */\r\n    List.prototype.backwards = function () {\r\n        return new IndexedIterable(this._values, this._values.length, 0);\r\n    };\r\n    return List;\r\n}());\r\nexport { List };\r\n/**\r\n * A version of a [[List]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nvar ListTemplate = /** @class */ (function (_super) {\r\n    __extends(ListTemplate, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param t Template object\r\n     */\r\n    function ListTemplate(t) {\r\n        var _this = _super.call(this) || this;\r\n        _this.template = t;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ListTemplate.prototype, \"template\", {\r\n        /**\r\n         * @return Template object\r\n         */\r\n        get: function () {\r\n            return this._template;\r\n        },\r\n        /**\r\n         * A \"template\" object to copy all properties from when creating new list\r\n         * items.\r\n         *\r\n         * @param v  Template object\r\n         */\r\n        set: function (v) {\r\n            v.isTemplate = true;\r\n            this._template = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all elements from other list.\r\n     *\r\n     * @param source  Source list\r\n     */\r\n    ListTemplate.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (value) {\r\n            _this.push(value.clone());\r\n        });\r\n    };\r\n    ListTemplate.prototype.create = function (make) {\r\n        var clone = (make != null\r\n            ? new make()\r\n            : this.template.clone());\r\n        this.push(clone);\r\n        return clone;\r\n    };\r\n    /**\r\n     * Creates an exact clone of the list, including its items and template.\r\n     *\r\n     * @return New list\r\n     */\r\n    ListTemplate.prototype.clone = function () {\r\n        var out = new ListTemplate(this.template);\r\n        var values = this.values;\r\n        var length = values.length;\r\n        for (var i = 0; i < length; ++i) {\r\n            out.push(values[i].clone());\r\n        }\r\n        return out;\r\n    };\r\n    return ListTemplate;\r\n}(List));\r\nexport { ListTemplate };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}