{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"./Container\";\nimport { List, ListDisposer } from \"./utils/List\";\nimport { OrderedListTemplate } from \"./utils/SortedList\";\nimport { Dictionary } from \"./utils/Dictionary\";\nimport { Disposer, MultiDisposer } from \"./utils/Disposer\";\nimport { DataSource } from \"./data/DataSource\";\nimport { Responsive } from \"./utils/Responsive\";\nimport { system } from \"./System\";\nimport { DataItem } from \"./DataItem\";\nimport { registry } from \"./Registry\";\nimport * as $math from \"./utils/Math\";\nimport * as $array from \"./utils/Array\";\nimport * as $ease from \"./utils/Ease\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $iter from \"./utils/Iterator\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A Component represents an independent functional element or control, that\r\n * can have it's own behavior, children, data, etc.\r\n *\r\n * A few examples of a Component: [[Legend]], [[Series]], [[Scrollbar]].\r\n *\r\n * @see {@link IComponentEvents} for a list of available events\r\n * @see {@link IComponentAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar Component =\n/** @class */\nfunction (_super) {\n  __extends(Component, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Component() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Holds data field names.\r\n     *\r\n     * Data fields define connection beween [[DataItem]] and actual properties\r\n     * in raw data.\r\n     */\n\n\n    _this.dataFields = {};\n    /**\r\n     * A list of [[DataSource]] definitions of external data source.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._dataSources = {};\n    /**\r\n     * This is used when only new data is invalidated (if added using `addData`\r\n     * method).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._parseDataFrom = 0;\n    /**\r\n     * Holds the disposers for the dataItems and dataUsers\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._dataDisposers = [];\n    /**\r\n     * Currently selected \"data set\".\r\n     *\r\n     * If it's set to `\"\"`, main data set (unaggregated data) is used.\r\n     */\n\n    _this._currentDataSetId = \"\";\n    /**\r\n     * [_start description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._start = 0;\n    /**\r\n     * [_end description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._end = 1;\n    /**\r\n     * If set to `true`, changing data range in element will not trigger\r\n     * `daterangechanged` event.\r\n     */\n\n    _this.skipRangeEvent = false;\n    /**\r\n     * Whenever selected scope changes (chart is zoomed or panned), for example\r\n     * by interaction from a Scrollbar, or API, a chart needs to reposition\r\n     * its contents.\r\n     *\r\n     * `rangeChangeDuration` influences how this is performed.\r\n     *\r\n     * If set to zero (0), the change will happen instantenously.\r\n     *\r\n     * If set to non-zero value, the chart will gradually animate into new\r\n     * position for the set amount of milliseconds.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.rangeChangeDuration = 0;\n    /**\r\n     * An easing function to use for range change animation.\r\n     *\r\n     * @see {@link Ease}\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.rangeChangeEasing = $ease.cubicOut;\n    /**\r\n     * A duration (ms) of each data parsing step. A Component parses its data in\r\n     * chunks in order to avoid completely freezing the machine when large data\r\n     * sets are used. This setting will control how many milliseconds should pass\r\n     * when parsing data until parser stops for a brief moment to let other\r\n     * processes catch up.\r\n     */\n\n    _this.parsingStepDuration = 50;\n    /**\r\n     * [dataInvalid description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this.dataInvalid = false;\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.rawDataInvalid = false;\n    /**\r\n     * [dataRangeInvalid description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this.dataRangeInvalid = false;\n    /**\r\n     * [dataItemsInvalid description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this.dataItemsInvalid = false;\n    /**\r\n     * If set to a non-zero number the element will \"animate\" data values of its\r\n     * children.\r\n     *\r\n     * This will happen on first load and whenever data values change.\r\n     *\r\n     * Enabling interpolation will mean that elements will transit smoothly into\r\n     * new values rather than updating instantly.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.interpolationDuration = 0;\n    /**\r\n     * An easing function to use for interpolating values when transiting from\r\n     * one source value to another.\r\n     *\r\n     * @default cubicOut\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     * @see {@link Ease}\r\n     */\n\n    _this.interpolationEasing = $ease.cubicOut;\n    /**\r\n     * Indicates whether transition between data item's values should start and\r\n     * play out all at once, or with a small delay (as defined by\r\n     * `sequencedInterpolationDelay`) for each subsequent data item.\r\n     *\r\n     * @default true\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.sequencedInterpolation = true;\n    /**\r\n     * A delay (ms) to wait between animating each subsequent data item's\r\n     * interpolation animation.\r\n     *\r\n     * Relative only if `sequencedInterpolation = true`.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.sequencedInterpolationDelay = 0;\n    /**\r\n     * A progress (0-1) for the data validation process.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.dataValidationProgress = 0;\n    _this._addAllDataItems = true;\n    _this._usesData = true;\n    _this.className = \"Component\";\n    _this.minZoomCount = 1;\n    _this.maxZoomCount = 0;\n    _this._dataItems = new OrderedListTemplate(_this.createDataItem());\n\n    _this._dataItems.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\n\n    _this._dataItems.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\n\n    _this._disposers.push(new ListDisposer(_this._dataItems));\n\n    _this._disposers.push(_this._dataItems.template);\n\n    _this.invalidateData(); // TODO what about remove ?\n\n\n    _this.dataUsers.events.on(\"inserted\", _this.handleDataUserAdded, _this, false); // Set up disposers\n\n\n    _this._disposers.push(new MultiDisposer(_this._dataDisposers));\n\n    _this._start = 0;\n    _this._end = 1;\n    _this.maxZoomDeclination = 1; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  Component.prototype.createDataItem = function () {\n    return new DataItem();\n  };\n  /**\r\n   * [handleDataUserAdded description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param event Event object\r\n   */\n\n\n  Component.prototype.handleDataUserAdded = function (event) {\n    var dataUser = event.newValue;\n    dataUser.dataProvider = this;\n  };\n  /**\r\n   * [handleDataItemValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Component.prototype.handleDataItemValueChange = function (dataItem, name) {\n    if (!this.dataItemsInvalid) {\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {};\n  /**\r\n   * [handleDataItemWorkingLocationChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.handleDataItemWorkingLocationChange = function (dataItem, name) {};\n  /**\r\n   * [handleDataItemCalculatedValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.handleDataItemCalculatedValueChange = function (dataItem, name) {};\n  /**\r\n   * [handleDataItemPropertyChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.handleDataItemPropertyChange = function (dataItem, name) {};\n  /**\r\n   * Populates a [[DataItem]] width data from data source.\r\n   *\r\n   * Loops through all the fields and if such a field is found in raw data\r\n   * object, a corresponding value on passed in `dataItem` is set.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item\r\n   */\n\n\n  Component.prototype.processDataItem = function (dataItem, dataContext) {\n    var _this = this;\n\n    if (dataItem) {\n      if (!dataContext) {\n        dataContext = {};\n      } // store reference to original data item\n\n\n      dataItem.dataContext = dataContext;\n      var hasSomeValues_1 = false;\n      $object.each(this.dataFields, function (key, fieldValue) {\n        var fieldName = key;\n        var value = dataContext[fieldValue]; // Apply adapters to a retrieved value\n\n        if (_this._adapterO) {\n          if (_this._adapterO.isEnabled(\"dataContextValue\")) {\n            value = _this._adapterO.apply(\"dataContextValue\", {\n              field: fieldName,\n              value: value,\n              dataItem: dataItem\n            }).value;\n          }\n        }\n\n        if ($type.hasValue(value)) {\n          hasSomeValues_1 = true;\n\n          if (dataItem.hasChildren[fieldName]) {\n            var template = _this.createDataItem();\n\n            template.copyFrom(_this.mainDataSet.template);\n            var children = new OrderedListTemplate(template);\n            children.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\n            children.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\n\n            _this._dataDisposers.push(new ListDisposer(children));\n\n            var count = value.length;\n\n            for (var i = 0; i < count; i++) {\n              var rawDataItem = value[i];\n              var childDataItem = children.create();\n              childDataItem.parent = dataItem;\n\n              _this.processDataItem(childDataItem, rawDataItem);\n            }\n\n            var anyDataItem = dataItem;\n            anyDataItem[fieldName] = children;\n          } else {\n            // data is converted to numbers/dates in each dataItem\n            dataItem[fieldName] = value;\n          }\n        }\n      });\n      $object.each(this.propertyFields, function (key, fieldValue) {\n        var f = key;\n        var value = dataContext[fieldValue];\n\n        if ($type.hasValue(value)) {\n          hasSomeValues_1 = true;\n          dataItem.setProperty(f, value);\n        }\n      }); // @todo we might need some flag which would tell whether we should create empty data items or not.\n\n      if (!this._addAllDataItems && !hasSomeValues_1) {\n        this.mainDataSet.remove(dataItem);\n      }\n    }\n  };\n  /**\r\n   *\r\n   * When validating raw data, instead of processing data item, we update it\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item\r\n   */\n\n\n  Component.prototype.updateDataItem = function (dataItem) {\n    var _this = this;\n\n    if (dataItem) {\n      var dataContext_1 = dataItem.dataContext;\n      $object.each(this.dataFields, function (key, fieldValue) {\n        var fieldName = key;\n        var value = dataContext_1[fieldValue]; // Apply adapters to a retrieved value\n\n        if (_this._adapterO) {\n          value = _this._adapterO.apply(\"dataContextValue\", {\n            field: fieldName,\n            value: value,\n            dataItem: dataItem\n          }).value;\n        }\n\n        if ($type.hasValue(value)) {\n          if (dataItem.hasChildren[fieldName]) {\n            var anyDataItem = dataItem;\n            var children = anyDataItem[fieldName];\n            children.each(function (child) {\n              _this.updateDataItem(child);\n            });\n          } else {\n            // data is converted to numbers/dates in each dataItem\t\t\t\t\t\n            dataItem[fieldName] = value;\n          }\n        }\n      });\n      $object.each(this.propertyFields, function (key, fieldValue) {\n        var f = key;\n        var value = dataContext_1[fieldValue];\n\n        if ($type.hasValue(value)) {\n          dataItem.setProperty(f, value);\n        }\n      });\n    }\n  };\n  /**\r\n   * [validateDataElements description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Component.prototype.validateDataElements = function () {\n    var count = this.endIndex;\n\n    for (var i = this.startIndex; i < count; i++) {\n      var dataItem = this.dataItems.getIndex(i); // TODO is this correct\n\n      if (dataItem) {\n        this.validateDataElement(dataItem);\n      }\n    }\n  };\n  /**\r\n   * Validates this element and its related elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.validate = function () {\n    this.validateDataElements();\n\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * [validateDataElement description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem [description]\r\n   */\n\n\n  Component.prototype.validateDataElement = function (dataItem) {};\n  /**\r\n   * Adds one or several (array) of data items to the existing data.\r\n   *\r\n   * @param rawDataItem One or many raw data item objects\r\n   */\n\n\n  Component.prototype.addData = function (rawDataItem, removeCount, skipRaw) {\n    var _this = this; // need to check if data is invalid, as addData might be called multiple times\n\n\n    if (!this.dataInvalid && this.inited) {\n      this._parseDataFrom = this.data.length; // save length of parsed data\n    }\n\n    if (!skipRaw) {\n      if (rawDataItem instanceof Array) {\n        // can't use concat because new array is returned\n        $array.each(rawDataItem, function (dataItem) {\n          _this.data.push(dataItem);\n        });\n      } else {\n        this.data.push(rawDataItem); // add to raw data array\n      }\n    }\n\n    if (this.inited) {\n      this.removeData(removeCount, skipRaw);\n    } else {\n      if ($type.isNumber(removeCount)) {\n        while (removeCount > 0) {\n          this.data.shift();\n          removeCount--;\n        }\n      }\n    }\n\n    this.invalidateData();\n  };\n  /**\r\n   * Removes elements from the beginning of data\r\n   *\r\n   * @param count number of elements to remove\r\n   */\n\n\n  Component.prototype.removeData = function (count, skipRaw) {\n    if ($type.isNumber(count) && count > 0) {\n      while (count > 0) {\n        var dataItem = this.mainDataSet.getIndex(0);\n\n        if (dataItem) {\n          this.mainDataSet.remove(dataItem);\n        }\n\n        this.dataUsers.each(function (dataUser) {\n          if (!dataUser.data || dataUser.data.length == 0) {\n            var dataItem_1 = dataUser.mainDataSet.getIndex(0);\n\n            if (dataItem_1) {\n              dataUser.mainDataSet.remove(dataItem_1);\n            }\n          }\n        });\n\n        if (!skipRaw) {\n          this.data.shift();\n        }\n\n        if (this._parseDataFrom > 0) {\n          this._parseDataFrom--;\n        }\n\n        count--;\n      } // changed from invalidateData since 4.7.19 to solve #51551\n\n\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * Triggers a data (re)parsing.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.invalidateData = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    } //if(!this.dataInvalid){\n\n\n    registry.addToInvalidComponents(this);\n    system.requestFrame();\n    this.dataInvalid = true;\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidateDataItems();\n    }); //}\n  };\n  /**\r\n   * [invalidateDataUsers description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Component.prototype.invalidateDataUsers = function () {\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidate();\n    });\n  };\n  /**\r\n   * Invalidates data values. When data array is not changed, but values within\r\n   * it changes, we invalidate data so that component would process changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.invalidateDataItems = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    } //if(!this.dataItemsInvalid){\n\n\n    $array.move(registry.invalidDataItems, this);\n    system.requestFrame();\n    this.dataItemsInvalid = true;\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidateDataItems();\n    }); //}\n  };\n  /**\r\n   * Invalidates data range. This is done when data which must be shown\r\n   * changes (chart is zoomed for example).\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.invalidateDataRange = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    } //if(!this.dataRangeInvalid){\n\n\n    this.dataRangeInvalid = true;\n    $array.move(registry.invalidDataRange, this);\n    system.requestFrame(); //}\n  };\n  /**\r\n   * Processes data range.\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.validateDataRange = function () {\n    $array.remove(registry.invalidDataRange, this);\n    this.dataRangeInvalid = false;\n\n    if (this.startIndex != this._prevStartIndex || this.endIndex != this._prevEndIndex) {\n      this.rangeChangeUpdate();\n      this.appendDataItems();\n      this.invalidate();\n      this.dispatchImmediately(\"datarangechanged\");\n    }\n  };\n  /**\r\n   * [sliceData description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.sliceData = function () {\n    this._workingStartIndex = this.startIndex;\n    this._workingEndIndex = this.endIndex;\n  };\n  /**\r\n   * [rangeChangeUpdate description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.rangeChangeUpdate = function () {\n    this.sliceData();\n    this._prevStartIndex = this.startIndex;\n    this._prevEndIndex = this.endIndex;\n  };\n  /**\r\n   * [appendDataItems description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.appendDataItems = function () {\n    // TODO use an iterator instead\n    var count = this.endIndex;\n\n    for (var i = this.startIndex; i < count; i++) {\n      // data item\n      var dataItem = this.dataItems.getIndex(i);\n\n      if (dataItem) {\n        dataItem.__disabled = false;\n      }\n    }\n\n    for (var i = 0; i < this.startIndex; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n\n      if (dataItem) {\n        dataItem.__disabled = true;\n      }\n    }\n\n    for (var i = this.endIndex; i < this.dataItems.length; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n\n      if (dataItem) {\n        dataItem.__disabled = true;\n      }\n    }\n  };\n  /**\r\n   * If you want to have a smooth transition from one data values to another, you change your raw data and then you must call this method.\r\n   * then instead of redrawing everything, the chart will check raw data and smoothly transit from previous to new data\r\n   */\n\n\n  Component.prototype.invalidateRawData = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    } //if(!this.rawDataInvalid){\n\n\n    $array.move(registry.invalidRawDatas, this);\n    system.requestFrame();\n    this.rawDataInvalid = true;\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidateRawData();\n    }); //}\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Component.prototype.validateRawData = function () {\n    var _this = this;\n\n    $array.remove(registry.invalidRawDatas, this);\n    $iter.each(this.mainDataSet.iterator(), function (dataItem) {\n      if (dataItem) {\n        _this.updateDataItem(dataItem);\n      }\n    });\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n\n  Component.prototype.dispose = function () {\n    var _this = this;\n\n    this.mainDataSet.template.clones.clear();\n    $object.each(this._dataSources, function (key, source) {\n      _this.removeDispose(source);\n    });\n    this.disposeData();\n\n    _super.prototype.dispose.call(this);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Component.prototype.disposeData = function () {\n    this.mainDataSet.template.clones.clear();\n    $array.each(this._dataDisposers, function (x) {\n      x.dispose();\n    }); // and for all components\n\n    $iter.each(this.dataUsers.iterator(), function (dataUser) {\n      dataUser.disposeData();\n    });\n    this._dataDisposers.length = 0;\n    this._startIndex = undefined;\n    this._endIndex = undefined; // dispose old\n\n    this.mainDataSet.clear();\n    this.mainDataSet.template.clones.clear();\n\n    if (this._dataSets) {\n      this._dataSets.clear();\n    }\n  };\n\n  Component.prototype.getDataItem = function (dataContext) {\n    return this.mainDataSet.create();\n  };\n  /**\r\n   * Validates (processes) data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.validateData = function () {\n    this.dispatchImmediately(\"beforedatavalidated\");\n    this.dataInvalid = false;\n    registry.removeFromInvalidComponents(this);\n\n    if (this.__disabled) {\n      return;\n    }\n\n    this.dataValidationProgress = 0; // need this to slice new data\n\n    this._prevStartIndex = undefined;\n    this._prevEndIndex = undefined; // todo: this needs some overthinking, maybe some extra settings like zoomOotonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\n\n    this._startIndex = undefined;\n    this._endIndex = undefined;\n\n    if (this.dataFields.data && this.dataItem) {\n      var dataContext = this.dataItem.dataContext;\n      this._data = dataContext[this.dataFields.data];\n    } // data items array is reset only if all data is validated, if _parseDataFrom is not 0, we append new data only\n    // check heatmap demo if uncommented\n    // fixed both issues by adding && this.data.length > 0\n    // check adding series example if changed\n\n\n    if (this._parseDataFrom === 0 && this.data.length > 0) {\n      this.disposeData();\n    }\n\n    if (this.data.length > 0) {\n      var preloader = this.preloader; // and for all components\n\n      $iter.each(this.dataUsers.iterator(), function (dataUser) {\n        // todo: this needs some overthinking, maybe some extra settings like zoomOUtonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\n        dataUser._startIndex = undefined;\n        dataUser._endIndex = undefined;\n      });\n      var counter = 0;\n      var startTime = Date.now(); // parse data\n\n      var i = this._parseDataFrom;\n      var n = this.data.length;\n\n      var _loop_1 = function () {\n        var rawDataItem = this_1.data[i];\n\n        if (this_1._usesData) {\n          var dataItem = this_1.getDataItem(rawDataItem);\n          this_1.processDataItem(dataItem, rawDataItem);\n        }\n\n        this_1.dataUsers.each(function (dataUser) {\n          if (dataUser.data.length == 0) {\n            // checking if data is not set directly\n            var dataUserDataItem = dataUser.getDataItem(rawDataItem);\n            dataUser.processDataItem(dataUserDataItem, rawDataItem);\n          }\n        });\n        counter++; // show preloader if this takes too many time\n\n        if (counter == 100) {\n          // no need to check it on each data item\n          counter = 0;\n          var elapsed = Date.now() - startTime;\n\n          if (elapsed > this_1.parsingStepDuration) {\n            if (i < this_1.data.length - 10) {\n              this_1._parseDataFrom = i + 1; // update preloader\n\n              if (preloader) {\n                if (i / this_1.data.length > 0.5 && !preloader.visible) {// do not start showing\n                } else {\n                  preloader.progress = i / this_1.data.length;\n                }\n              }\n\n              this_1.dataValidationProgress = i / this_1.data.length;\n              i = this_1.data.length; // stops cycle\n\n              this_1.invalidateData();\n              return {\n                value: void 0\n              };\n            }\n          }\n        }\n      };\n\n      var this_1 = this;\n\n      for (i; i < n; i++) {\n        var state_1 = _loop_1();\n\n        if (typeof state_1 === \"object\") return state_1.value;\n      }\n\n      if (preloader) {\n        preloader.progress = 1;\n      }\n\n      this.dataUsers.each(function (dataUser) {\n        if (dataUser.hidden || dataUser.appeared && !dataUser.visible && dataUser.stacked) {\n          dataUser.hide(0);\n        }\n      });\n    }\n\n    this.dataValidationProgress = 1;\n    this._parseDataFrom = 0; // reset this index, it is set to dataItems.length if addData() method was used.\n\n    this.invalidateDataItems();\n\n    if (!this._internalDefaultsApplied) {\n      this.applyInternalDefaults();\n    }\n\n    this.dispatch(\"datavalidated\"); // can't zoom chart if dispatched immediately\n  };\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.validateDataItems = function () {\n    $array.remove(registry.invalidDataItems, this);\n    this.dataItemsInvalid = false;\n    this.invalidateDataRange();\n    this.invalidate();\n    this.dispatch(\"dataitemsvalidated\");\n  };\n\n  Object.defineProperty(Component.prototype, \"data\", {\n    /**\r\n     * Returns element's source (raw) data.\r\n     *\r\n     * @return Data\r\n     */\n    get: function () {\n      if (!this._data) {\n        this._data = [];\n      }\n\n      if (!this._adapterO) {\n        return this._data;\n      } else {\n        return this._adapterO.apply(\"data\", this._data);\n      }\n    },\n\n    /**\r\n     * Sets source (raw) data for the element. The \"data\" is always an `Array`\r\n     * of objects.\r\n     *\r\n     * IMPORTANT: The order of data items in `data` array is important as it\r\n     * might affect chart look and behavior. [More details](https://www.amcharts.com/docs/v4/concepts/data/#Order_of_data_items).\r\n     *\r\n     * @param value Data\r\n     */\n    set: function (value) {\n      this.setData(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Component.prototype.setData = function (value) {\n    // array might be the same, but there might be items added\n    // todo: check if array changed, toString maybe?\n    if (!this.isDisposed()) {\n      this._parseDataFrom = 0;\n      this.disposeData();\n      this._data = value;\n\n      if (value && value.length > 0) {\n        this.invalidateData();\n      } else {\n        this.dispatchImmediately(\"beforedatavalidated\");\n        this.dispatch(\"datavalidated\");\n      }\n    }\n  };\n  /**\r\n   * Returns (creates if necessary) a [[DataSource]] bound to any specific\r\n   * property.\r\n   *\r\n   * For example if I want to bind `data` to an external JSON file, I'd create\r\n   * a DataSource for it.\r\n   *\r\n   * @param property  Property to bind external data to\r\n   * @return A DataSource for property\r\n   */\n\n\n  Component.prototype.getDataSource = function (property) {\n    var _this = this;\n\n    if (!$type.hasValue(this._dataSources[property])) {\n      this._dataSources[property] = new DataSource();\n      this._dataSources[property].component = this;\n      this.setDataSourceEvents(this._dataSources[property], property);\n\n      this._dataSources[property].adapter.add(\"dateFields\", function (val) {\n        return _this.dataSourceDateFields(val);\n      });\n\n      this._dataSources[property].adapter.add(\"numberFields\", function (val) {\n        return _this.dataSourceNumberFields(val);\n      });\n\n      this.events.on(\"inited\", function () {\n        _this.loadData(property);\n      }, this, false);\n    }\n\n    return this._dataSources[property];\n  };\n\n  Object.defineProperty(Component.prototype, \"dataSource\", {\n    /**\r\n     * @return Data source\r\n     */\n    get: function () {\n      if (!this._dataSources[\"data\"]) {\n        this.getDataSource(\"data\");\n      }\n\n      return this._dataSources[\"data\"];\n    },\n\n    /**\r\n     *A [[DataSource]] to be used for loading Component's data.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/loading-external-data/} for more on loading external data\r\n     * @param value  Data source\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (this._dataSources[\"data\"]) {\n        this.removeDispose(this._dataSources[\"data\"]);\n      }\n\n      this._dataSources[\"data\"] = value;\n      this._dataSources[\"data\"].component = this;\n      this.events.on(\"inited\", function () {\n        _this.loadData(\"data\");\n      }, this, false);\n      this.setDataSourceEvents(value, \"data\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Initiates loading of the external data via [[DataSource]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Component.prototype.loadData = function (property) {\n    this._dataSources[property].load();\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Array of date fields\r\n   * @return Array of date fields populated with chart's date fields\r\n   */\n\n\n  Component.prototype.dataSourceDateFields = function (value) {\n    return value;\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Array of number fields\r\n   * @return Array of number fields populated with chart's number fields\r\n   */\n\n\n  Component.prototype.dataSourceNumberFields = function (value) {\n    return value;\n  };\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param list        [description]\r\n   * @param dataFields  [description]\r\n   * @param targetList  [description]\r\n   * @return [description]\r\n   */\n\n\n  Component.prototype.populateDataSourceFields = function (list, dataFields, targetList) {\n    $array.each(targetList, function (value) {\n      if (dataFields[value] && $array.indexOf(list, dataFields[value]) === -1) {\n        list.push(dataFields[value]);\n      }\n    });\n    return list;\n  };\n  /**\r\n   * Sets events on a [[DataSource]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.setDataSourceEvents = function (ds, property) {\n    var _this = this;\n\n    ds.events.on(\"started\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 0; //preloader.label.text = this.language.translate(\"Loading\");\n      }\n    }, undefined, false);\n    ds.events.on(\"loadstarted\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 0.25;\n      }\n    }, undefined, false);\n    ds.events.on(\"loadended\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 0.5;\n      }\n    }, undefined, false);\n    ds.events.on(\"parseended\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 0.75;\n      }\n    }, undefined, false);\n    ds.events.on(\"ended\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 1;\n      }\n    }, undefined, false);\n    ds.events.on(\"error\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 1;\n      }\n\n      _this.openModal(ev.message);\n    }, undefined, false);\n\n    if (property) {\n      ds.events.on(\"done\", function (ev) {\n        var preloader = _this.preloader;\n\n        if (preloader) {\n          preloader.progress = 1;\n        }\n\n        if (property == \"data\" && !$type.isArray(ev.data)) {\n          ev.data = [ev.data];\n        }\n\n        if (ds.incremental && property == \"data\" && _this.data.length) {\n          _this.addData(ev.data, ds.keepCount ? ev.data.length : 0);\n        } else if (ds.updateCurrentData && property == \"data\" && _this.data.length) {\n          // cycle through existing data items\n          $array.each(_this.data, function (item, index) {\n            if ($type.hasValue(ev.data[index])) {\n              $object.each(item, function (key, val) {\n                if ($type.hasValue(ev.data[index][key])) {\n                  item[key] = ev.data[index][key];\n                }\n              });\n            }\n          });\n\n          _this.invalidateRawData();\n        } else {\n          _this[property] = ev.data;\n        }\n      });\n    }\n  };\n\n  Object.defineProperty(Component.prototype, \"responsive\", {\n    /**\r\n     * @return Responsive rules handler\r\n     */\n    get: function () {\n      if (!this._responsive) {\n        this._responsive = new Responsive();\n        this._responsive.component = this;\n      }\n\n      return this._responsive;\n    },\n\n    /**\r\n     * A [[Responsive]] instance to be used when applying conditional\r\n     * property values.\r\n     *\r\n     * NOTE: Responsive features are currently in development and may not work\r\n     * as expected, if at all.\r\n     *\r\n     * @param value  Responsive rules handler\r\n     */\n    set: function (value) {\n      this._responsive = value;\n      this._responsive.component = this;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets current zoom.\r\n   *\r\n   * The range uses relative values from 0 to 1, with 0 marking beginning and 1\r\n   * marking end of the available data range.\r\n   *\r\n   * This method will not have any effect when called on a chart object.\r\n   * Since the chart can have a number of axes and series, each with its own\r\n   * data, the meaning of \"range\" is very ambiguous.\r\n   *\r\n   * To zoom the chart use `zoom*` methods on its respective axes.\r\n   *\r\n   * @param range          Range\r\n   * @param skipRangeEvent Should rangechanged event not be triggered?\r\n   * @param instantly      Do not animate?\r\n   * @return Actual modidied range (taking `maxZoomFactor` into account)\r\n   */\n\n  Component.prototype.zoom = function (range, skipRangeEvent, instantly, declination) {\n    var _this = this;\n\n    if (skipRangeEvent === void 0) {\n      skipRangeEvent = false;\n    }\n\n    if (instantly === void 0) {\n      instantly = false;\n    }\n\n    var start = range.start;\n    var end = range.end;\n    var priority = range.priority;\n\n    if (range.start == range.end) {\n      range.start = range.start - 0.5 / this.maxZoomFactor;\n      range.end = range.end + 0.5 / this.maxZoomFactor;\n    }\n\n    if (priority == \"end\" && end == 1 && start != 0) {\n      if (start < this.start) {\n        priority = \"start\";\n      }\n    }\n\n    if (priority == \"start\" && start == 0) {\n      if (end > this.end) {\n        priority = \"end\";\n      }\n    }\n\n    if (!$type.isNumber(declination)) {\n      declination = this.maxZoomDeclination;\n    }\n\n    if (!$type.isNumber(start) || !$type.isNumber(end)) {\n      return {\n        start: this.start,\n        end: this.end\n      };\n    }\n\n    if (this._finalStart != start || this._finalEnd != end) {\n      var maxZoomFactor = this.maxZoomFactor / this.minZoomCount;\n      var minZoomFactor = this.maxZoomFactor / this.maxZoomCount; // most likely we are dragging left scrollbar grip here, so we tend to modify end\n\n      if (priority == \"start\") {\n        if (this.maxZoomCount > 0) {\n          // add to the end\n          if (1 / (end - start) < minZoomFactor) {\n            end = start + 1 / minZoomFactor;\n          }\n        } // add to the end\n\n\n        if (1 / (end - start) > maxZoomFactor) {\n          end = start + 1 / maxZoomFactor;\n        } //unless end is > 0\n\n\n        if (end > 1 && end - start < 1 / maxZoomFactor) {\n          //end = 1;\n          start = end - 1 / maxZoomFactor;\n        }\n      } // most likely we are dragging right, so we modify left\n      else {\n        if (this.maxZoomCount > 0) {\n          // add to the end\n          if (1 / (end - start) < minZoomFactor) {\n            start = end - 1 / minZoomFactor;\n          }\n        } // remove from start\n\n\n        if (1 / (end - start) > maxZoomFactor) {\n          if (start <= 0) {\n            end = start + 1 / maxZoomFactor;\n          } else {\n            start = end - 1 / maxZoomFactor;\n          }\n        }\n\n        if (start < 0 && end - start < 1 / maxZoomFactor) {\n          //start = 0;\n          end = start + 1 / maxZoomFactor;\n        }\n      }\n\n      if (start < -declination) {\n        start = -declination;\n      }\n\n      if (1 / (end - start) > maxZoomFactor) {\n        end = start + 1 / maxZoomFactor;\n      }\n\n      if (end > 1 + declination) {\n        end = 1 + declination;\n      }\n\n      if (1 / (end - start) > maxZoomFactor) {\n        start = end - 1 / maxZoomFactor;\n      }\n\n      this._finalEnd = end;\n      this._finalStart = start;\n      this.skipRangeEvent = skipRangeEvent;\n      this.dispatchImmediately(\"rangechangestarted\");\n\n      if (this.rangeChangeDuration > 0 && !instantly) {\n        // todo: maybe move this to Animation\n        var rangeChangeAnimation = this.rangeChangeAnimation;\n\n        if (rangeChangeAnimation && rangeChangeAnimation.progress < 1) {\n          var options = rangeChangeAnimation.animationOptions;\n\n          if (options.length > 1) {\n            if (options[0].to == start && options[1].to == end) {\n              return {\n                start: start,\n                end: end\n              };\n            } else {\n              if (!rangeChangeAnimation.isDisposed()) {\n                rangeChangeAnimation.stop();\n              }\n            }\n          }\n        }\n\n        if (this.rangeChangeAnimation) {\n          this.rangeChangeAnimation.kill();\n        }\n\n        rangeChangeAnimation = this.animate([{\n          property: \"start\",\n          to: start\n        }, {\n          property: \"end\",\n          to: end\n        }], this.rangeChangeDuration, this.rangeChangeEasing);\n        this.rangeChangeAnimation = rangeChangeAnimation;\n\n        if (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\n          rangeChangeAnimation.events.on(\"animationended\", function () {\n            _this.dispatchImmediately(\"rangechangeended\");\n          });\n        } else {\n          this.dispatchImmediately(\"rangechangeended\");\n        }\n      } else {\n        this.start = start;\n        this.end = end;\n        this.dispatch(\"rangechangeended\");\n      }\n    }\n\n    return {\n      start: start,\n      end: end\n    };\n  };\n  /**\r\n   * Zooms to specific data items using their index in data.\r\n   *\r\n   * This method will not have any effect when called on a chart object.\r\n   * Since the chart can have a number of axes and series, each with its own\r\n   * data, the meaning of \"index\" is very ambiguous.\r\n   *\r\n   * To zoom the chart use `zoom*` methods on its respective axes.\r\n   *\r\n   * @param startIndex     Index of the starting data item\r\n   * @param endIndex       Index of the ending data item\r\n   * @param skipRangeEvent Should rangechanged event not be triggered?\r\n   * @param instantly      Do not animate?\r\n   */\n\n\n  Component.prototype.zoomToIndexes = function (startIndex, endIndex, skipRangeEvent, instantly) {\n    if (!$type.isNumber(startIndex) || !$type.isNumber(endIndex)) {\n      return;\n    }\n\n    var start = startIndex / this.dataItems.length;\n    var end = endIndex / this.dataItems.length;\n    this.zoom({\n      start: start,\n      end: end\n    }, skipRangeEvent, instantly);\n  };\n\n  Object.defineProperty(Component.prototype, \"zoomFactor\", {\n    /**\r\n     * A current zoom factor (0-1). 1 meaning fully zoomed out. (showing all of\r\n     * the available data)\r\n     *\r\n     * @return Zoom factor\r\n     */\n    get: function () {\n      return $math.fitToRange(1 / (this.end - this.start), 1, this.maxZoomFactor);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"maxZoomFactor\", {\n    /**\r\n     * @return Maximum zoomFactor\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxZoomFactor\");\n    },\n\n    /**\r\n     * Max available `zoomFactor`.\r\n     *\r\n     * The element will not allow zoom to occur beyond this factor.\r\n     *\r\n     * [[DateAxis]] and [[CategoryAxis]] calculate this atutomatically so that\r\n     * category axis could be zoomed to one category and date axis allows to be\r\n     * zoomed up to one base interval.\r\n     *\r\n     * In case you want to restrict category or date axis to be zoomed to more\r\n     * than one category or more than one base interval, use `minZoomCount`\r\n     * property (set it to `> 1`).\r\n     *\r\n     * Default value of [[ValueAxis]]'s `maxZoomFactor` is `1000`.\r\n     *\r\n     * Feel free to modify it to allow bigger zoom or to restrict zooming.\r\n     *\r\n     * @param value  Maximum zoomFactor\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maxZoomFactor\", value)) {\n        if (value == 1) {\n          this.maxZoomDeclination = 0;\n        }\n\n        this.invalidateDataRange();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"maxZoomDeclination\", {\n    /**\r\n     * @ignore\r\n     * @return Maximum zoom declination\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxZoomDeclination\");\n    },\n\n    /**\r\n     * Max zoom declination.\r\n     *\r\n     * @ignore\r\n     * @default 1\r\n     * @param value  Maximum zoom declination\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maxZoomDeclination\", value)) {\n        this.invalidateDataRange();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"startIndex\", {\n    /**\r\n     * Current starting index.\r\n     *\r\n     * @return Start index\r\n     */\n    get: function () {\n      if (!$type.isNumber(this._startIndex)) {\n        this._startIndex = 0;\n      }\n\n      return this._startIndex;\n    },\n\n    /**\r\n     * Sets current starting index.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Start index\r\n     */\n    set: function (value) {\n      this._startIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length); //this._workingStartIndex = this._startIndex; // not good, breaks adjusted working start index of line series\n\n      this.start = this.indexToPosition(this._startIndex);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   * @todo:review description\r\n   * returns item's relative position by the index of the item\r\n   * @param index\r\n   */\n\n  Component.prototype.indexToPosition = function (index) {\n    return index / this.dataItems.length;\n  };\n\n  Object.defineProperty(Component.prototype, \"endIndex\", {\n    /**\r\n     * Current ending index.\r\n     *\r\n     * @return End index\r\n     */\n    get: function () {\n      var count = this.dataItems.length;\n\n      if (!$type.isNumber(this._endIndex) || this._endIndex > count) {\n        this._endIndex = count;\n      }\n\n      return this._endIndex;\n    },\n\n    /**\r\n     * Sets current ending index.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value End index\r\n     */\n    set: function (value) {\n      this._endIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length); //this._workingEndIndex = this._endIndex; // not good, breaks adjusted workingend index of line series\n\n      this.end = this.indexToPosition(this._endIndex);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"start\", {\n    /**\r\n     * @return Start (0-1)\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this._start;\n      } else {\n        return this._adapterO.apply(\"start\", this._start);\n      }\n    },\n\n    /**\r\n     * Start of the current data range (zoom).\r\n     *\r\n     * These are relative values from 0 (beginning) to 1 (end).\r\n     *\r\n     * @param value Start (0-1)\r\n     */\n    set: function (value) {\n      // value = $math.round(value, 10); not good\n      //if (1 / (this.end - value) > this.maxZoomFactor) {\n      //\tvalue = this.end - 1 / this.maxZoomFactor;\n      //}\n      if (this._start != value) {\n        this._start = value;\n        var startIndex = Math.max(0, Math.floor(this.dataItems.length * value) || 0);\n        this._startIndex = Math.min(startIndex, this.dataItems.length);\n        this.invalidateDataRange();\n        this.invalidate();\n        this.dispatchImmediately(\"startchanged\");\n        this.dispatch(\"startendchanged\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"end\", {\n    /**\r\n     * @return End (0-1)\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this._end;\n      } else {\n        return this._adapterO.apply(\"end\", this._end);\n      }\n    },\n\n    /**\r\n     * End of the current data range (zoom).\r\n     *\r\n     * These are relative values from 0 (beginning) to 1 (end).\r\n     *\r\n     * @param value End (0-1)\r\n     */\n    set: function (value) {\n      // value = $math.round(value, 10); // not good\n      //if (1 / (value - this.start) > this.maxZoomFactor) {\n      //\tvalue = 1 / this.maxZoomFactor + this.start;\n      //}\n      if (this._end != value) {\n        this._end = value;\n        this._endIndex = Math.min(this.dataItems.length, Math.ceil(this.dataItems.length * value) || 0);\n        this.invalidateDataRange();\n        this.invalidate();\n        this.dispatchImmediately(\"endchanged\");\n        this.dispatch(\"startendchanged\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [removeFromInvalids description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n  Component.prototype.removeFromInvalids = function () {\n    _super.prototype.removeFromInvalids.call(this);\n\n    registry.removeFromInvalidComponents(this);\n    $array.remove(registry.invalidDataItems, this);\n    $array.remove(registry.invalidDataRange, this);\n    $array.remove(registry.invalidRawDatas, this);\n  };\n\n  Object.defineProperty(Component.prototype, \"dataItems\", {\n    /**\r\n     * Returns a list of source [[DataItem]] objects currently used in the chart.\r\n     *\r\n     * @return List of data items\r\n     */\n    get: function () {\n      if (this._currentDataSetId != \"\") {\n        var dataItems = this.dataSets.getKey(this._currentDataSetId);\n\n        if (dataItems) {\n          return dataItems;\n        }\n      }\n\n      return this._dataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"dataSets\", {\n    /**\r\n     * Holds data items for data sets (usually aggregated data).\r\n     *\r\n     * @ignore\r\n     * @since 4.7.0\r\n     * @return  Data sets\r\n     */\n    get: function () {\n      if (!this._dataSets) {\n        this._dataSets = new Dictionary();\n      }\n\n      return this._dataSets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Makes the chart use particular data set.\r\n   *\r\n   * If `id` is not provided or there is no such data set, main data will be\r\n   * used.\r\n   *\r\n   * @ignore\r\n   * @since 4.7.0\r\n   * @param  id  Data set id\r\n   */\n\n  Component.prototype.setDataSet = function (id) {\n    if (this._currentDataSetId != id) {\n      var dataSet = this.dataSets.getKey(id);\n\n      if (!dataSet) {\n        if (this._currentDataSetId != \"\") {\n          this.dataItems.each(function (dataItem) {\n            dataItem.__disabled = true;\n          });\n          this._currentDataSetId = \"\";\n          this.invalidateDataRange();\n          this._prevStartIndex = undefined;\n          this.dataItems.each(function (dataItem) {\n            dataItem.__disabled = false;\n          });\n          return true;\n        }\n      } else {\n        this.dataItems.each(function (dataItem) {\n          dataItem.__disabled = true;\n        });\n        this._currentDataSetId = id;\n        this.invalidateDataRange();\n        this._prevStartIndex = undefined;\n        this.dataItems.each(function (dataItem) {\n          dataItem.__disabled = false;\n        });\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Component.prototype, \"currentDataSetId\", {\n    /**\r\n     * Returns id of the currently used data set, or `undefined` if main data set\r\n     * is in use.\r\n     *\r\n     * @since 4.7.0\r\n     * @return Current data set id\r\n     */\n    get: function () {\n      return this._currentDataSetId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"mainDataSet\", {\n    /**\r\n     * Returns reference to \"main\" data set (unaggregated data as it was supplied\r\n     * in `data`).\r\n     *\r\n     * @since 4.7.0\r\n     * @return Main data set\r\n     */\n    get: function () {\n      return this._dataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates the indexes for the dataItems\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Component.prototype._updateDataItemIndexes = function (startIndex) {\n    var dataItems = this.mainDataSet.values;\n    var length = dataItems.length;\n\n    for (var i = startIndex; i < length; ++i) {\n      dataItems[i]._index = i;\n    }\n  };\n  /**\r\n   * Processes newly added [[DataItem]] as well as triggers data re-validation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event [description]\r\n   */\n\n\n  Component.prototype.handleDataItemAdded = function (event) {\n    event.newValue.component = this;\n\n    this._updateDataItemIndexes(event.index);\n\n    if (!this.dataItemsInvalid) {\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * removes [[DataItem]] as well as triggers data re-validation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event [description]\r\n   */\n\n\n  Component.prototype.handleDataItemRemoved = function (event) {\n    //\t\tevent.oldValue.component = undefined; // not good, as some items might be not removed from component lists\n    this._updateDataItemIndexes(event.index);\n\n    if (!this.dataItemsInvalid) {\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * Binds a data element's field to a specific field in raw data.\r\n   * For example, for the very basic column chart you'd want to bind a `value`\r\n   * field to a field in data, such as `price`.\r\n   *\r\n   * Some more advanced Components, like [[CandlestickSeries]] need several\r\n   * data fields bound to data, such as ones for open, high, low and close\r\n   * values.\r\n   *\r\n   * @todo Example\r\n   * @param field  Field name\r\n   * @param value  Field name in data\r\n   */\n\n\n  Component.prototype.bindDataField = function (field, value) {\n    this.dataFields[field] = value;\n    this.invalidateDataRange();\n  };\n  /**\r\n   * Invalidates processed data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.invalidateProcessedData = function () {\n    this.resetProcessedRange();\n    this.invalidateDataRange();\n  };\n  /**\r\n   * [resetProcessedRange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Component.prototype.resetProcessedRange = function () {\n    this._prevEndIndex = null;\n    this._prevStartIndex = null;\n  };\n\n  Object.defineProperty(Component.prototype, \"dataUsers\", {\n    /**\r\n     * Returns all other [[Component]] objects that are using this element's\r\n     * data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @return [description]\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._dataUsers) {\n        this._dataUsers = new List(); //this._disposers.push(new ListDisposer(this._dataUsers));\n        // TODO better way of handling this? e.g. move into another module ?\n\n        this._disposers.push(new Disposer(function () {\n          // TODO clear the list ?\n          $iter.each(_this._dataUsers.iterator(), function (x) {\n            x.dispose();\n          });\n        }));\n      }\n\n      return this._dataUsers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a clone of this element.\r\n   *\r\n   * @return Clone\r\n   */\n\n  Component.prototype.clone = function () {\n    var component = _super.prototype.clone.call(this);\n\n    component.dataFields = $utils.copyProperties(this.dataFields, {});\n    return component;\n  };\n  /**\r\n   * Copies all parameters from another [[Component]].\r\n   *\r\n   * @param source Source Component\r\n   */\n\n\n  Component.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.data = source.data;\n    this.sequencedInterpolation = source.sequencedInterpolation;\n    this.sequencedInterpolationDelay = source.sequencedInterpolationDelay;\n    this.interpolationDuration = source.interpolationDuration;\n    this.interpolationEasing = source.interpolationEasing;\n  };\n  /**\r\n   * Invalidates the whole element, including all its children, causing\r\n   * complete re-parsing of data and redraw.\r\n   *\r\n   * Use sparingly!\r\n   */\n\n\n  Component.prototype.reinit = function () {\n    this._inited = false;\n    this.deepInvalidate();\n  };\n  /**\r\n   * Add an adapter for data.\r\n   *\r\n   * @return Exporting\r\n   */\n\n\n  Component.prototype.getExporting = function () {\n    var _export = _super.prototype.getExporting.call(this);\n\n    if (!_export.adapter.has(\"data\", this._exportData, -1, this)) {\n      _export.adapter.add(\"data\", this._exportData, -1, this);\n\n      this.events.on(\"datavalidated\", function (ev) {\n        _export.handleDataUpdated();\n      });\n    }\n\n    return _export;\n  };\n\n  Component.prototype._exportData = function (arg) {\n    arg.data = this.data;\n    return arg;\n  };\n\n  Component.prototype.setDisabled = function (value) {\n    var changed = _super.prototype.setDisabled.call(this, value);\n\n    if (changed) {\n      this.invalidateData();\n    }\n\n    return changed;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Component.prototype.setShowOnInit = function (value) {\n    if (value != this.getPropertyValue(\"showOnInit\")) {\n      if (value && !this.inited && !this.hidden) {\n        this._showOnInitDisposer2 = this.events.once(\"dataitemsvalidated\", this.hideInitially, this, false);\n\n        this._disposers.push(this._showOnInitDisposer2);\n      } else {\n        if (this._showOnInitDisposer2) {\n          this.removeDispose(this._showOnInitDisposer2);\n        }\n      }\n    } // important order here\n\n\n    _super.prototype.setShowOnInit.call(this, value);\n  };\n\n  Component.prototype.setBaseId = function (value) {\n    if (value != this._baseId) {\n      if (this.dataInvalid) {\n        this.dataInvalid = false;\n        registry.removeFromInvalidComponents(this);\n        this._baseId = value;\n        this.invalidateData();\n      }\n    }\n\n    _super.prototype.setBaseId.call(this, value);\n  };\n\n  Object.defineProperty(Component.prototype, \"minZoomCount\", {\n    /**\r\n     * @return Min zoom count\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minZoomCount\");\n    },\n\n    /**\r\n     * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * Allows restricting zoom in beyond certain number of categories or base\r\n     * intervals.\r\n     *\r\n     * @default 1\r\n     * @param value  Min zoom count\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minZoomCount\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"maxZoomCount\", {\n    /**\r\n     * @return Max zoom count\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxZoomCount\");\n    },\n\n    /**\r\n     * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * Limits how many categories or base intervals can be shown at the same\r\n     * time.\r\n     *\r\n     * If there are more items in the chart, the chart will auto-zoom.\r\n     *\r\n     * @default 0 (no limit)\r\n     * @since 4.6.2\r\n     * @param value  Max zoom count\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxZoomCount\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Called during the System.update method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Component.prototype._systemCheckIfValidate = function () {\n    if (this.dataInvalid || this.dataProvider && this.dataProvider.dataInvalid) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /**\r\n   * Adds easing functions to \"function\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n\n\n  Component.prototype.asFunction = function (field) {\n    return field == \"interpolationEasing\" || field == \"rangeChangeEasing\" || _super.prototype.asIs.call(this, field);\n  };\n\n  return Component;\n}(Container);\n\nexport { Component };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Component\"] = Component;","map":{"version":3,"names":["__extends","Container","List","ListDisposer","OrderedListTemplate","Dictionary","Disposer","MultiDisposer","DataSource","Responsive","system","DataItem","registry","$math","$array","$ease","$utils","$iter","$object","$type","Component","_super","_this","call","dataFields","_dataSources","_parseDataFrom","_dataDisposers","_currentDataSetId","_start","_end","skipRangeEvent","rangeChangeDuration","rangeChangeEasing","cubicOut","parsingStepDuration","dataInvalid","rawDataInvalid","dataRangeInvalid","dataItemsInvalid","interpolationDuration","interpolationEasing","sequencedInterpolation","sequencedInterpolationDelay","dataValidationProgress","_addAllDataItems","_usesData","className","minZoomCount","maxZoomCount","_dataItems","createDataItem","events","on","handleDataItemAdded","handleDataItemRemoved","_disposers","push","template","invalidateData","dataUsers","handleDataUserAdded","maxZoomDeclination","applyTheme","prototype","event","dataUser","newValue","dataProvider","handleDataItemValueChange","dataItem","name","invalidateDataItems","handleDataItemWorkingValueChange","handleDataItemWorkingLocationChange","handleDataItemCalculatedValueChange","handleDataItemPropertyChange","processDataItem","dataContext","hasSomeValues_1","each","key","fieldValue","fieldName","value","_adapterO","isEnabled","apply","field","hasValue","hasChildren","copyFrom","mainDataSet","children","count","length","i","rawDataItem","childDataItem","create","parent","anyDataItem","propertyFields","f","setProperty","remove","updateDataItem","dataContext_1","child","validateDataElements","endIndex","startIndex","dataItems","getIndex","validateDataElement","validate","addData","removeCount","skipRaw","inited","data","Array","removeData","isNumber","shift","dataItem_1","disabled","isTemplate","addToInvalidComponents","requestFrame","iterator","x","invalidateDataUsers","invalidate","move","invalidDataItems","invalidateDataRange","invalidDataRange","validateDataRange","_prevStartIndex","_prevEndIndex","rangeChangeUpdate","appendDataItems","dispatchImmediately","sliceData","_workingStartIndex","_workingEndIndex","__disabled","invalidateRawData","invalidRawDatas","validateRawData","dispose","clones","clear","source","removeDispose","disposeData","_startIndex","undefined","_endIndex","_dataSets","getDataItem","validateData","removeFromInvalidComponents","_data","preloader","counter","startTime","Date","now","n","_loop_1","this_1","dataUserDataItem","elapsed","visible","progress","state_1","hidden","appeared","stacked","hide","_internalDefaultsApplied","applyInternalDefaults","dispatch","validateDataItems","Object","defineProperty","get","set","setData","enumerable","configurable","isDisposed","getDataSource","property","component","setDataSourceEvents","adapter","add","val","dataSourceDateFields","dataSourceNumberFields","loadData","load","populateDataSourceFields","list","targetList","indexOf","ds","ev","openModal","message","isArray","incremental","keepCount","updateCurrentData","item","index","_responsive","zoom","range","instantly","declination","start","end","priority","maxZoomFactor","_finalStart","_finalEnd","minZoomFactor","rangeChangeAnimation","options","animationOptions","to","stop","kill","animate","isFinished","zoomToIndexes","fitToRange","getPropertyValue","setPropertyValue","Math","round","indexToPosition","max","floor","min","ceil","removeFromInvalids","dataSets","getKey","setDataSet","id","dataSet","_updateDataItemIndexes","values","_index","bindDataField","invalidateProcessedData","resetProcessedRange","_dataUsers","clone","copyProperties","reinit","_inited","deepInvalidate","getExporting","_export","has","_exportData","handleDataUpdated","arg","setDisabled","changed","setShowOnInit","_showOnInitDisposer2","once","hideInitially","setBaseId","_baseId","_systemCheckIfValidate","asFunction","asIs","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/Component.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"./Container\";\r\nimport { List, ListDisposer } from \"./utils/List\";\r\nimport { OrderedListTemplate } from \"./utils/SortedList\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\nimport { Disposer, MultiDisposer } from \"./utils/Disposer\";\r\nimport { DataSource } from \"./data/DataSource\";\r\nimport { Responsive } from \"./utils/Responsive\";\r\nimport { system } from \"./System\";\r\nimport { DataItem } from \"./DataItem\";\r\nimport { registry } from \"./Registry\";\r\nimport * as $math from \"./utils/Math\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $ease from \"./utils/Ease\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $iter from \"./utils/Iterator\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A Component represents an independent functional element or control, that\r\n * can have it's own behavior, children, data, etc.\r\n *\r\n * A few examples of a Component: [[Legend]], [[Series]], [[Scrollbar]].\r\n *\r\n * @see {@link IComponentEvents} for a list of available events\r\n * @see {@link IComponentAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar Component = /** @class */ (function (_super) {\r\n    __extends(Component, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Component() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Holds data field names.\r\n         *\r\n         * Data fields define connection beween [[DataItem]] and actual properties\r\n         * in raw data.\r\n         */\r\n        _this.dataFields = {};\r\n        /**\r\n         * A list of [[DataSource]] definitions of external data source.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._dataSources = {};\r\n        /**\r\n         * This is used when only new data is invalidated (if added using `addData`\r\n         * method).\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._parseDataFrom = 0;\r\n        /**\r\n         * Holds the disposers for the dataItems and dataUsers\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._dataDisposers = [];\r\n        /**\r\n         * Currently selected \"data set\".\r\n         *\r\n         * If it's set to `\"\"`, main data set (unaggregated data) is used.\r\n         */\r\n        _this._currentDataSetId = \"\";\r\n        /**\r\n         * [_start description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._start = 0;\r\n        /**\r\n         * [_end description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._end = 1;\r\n        /**\r\n         * If set to `true`, changing data range in element will not trigger\r\n         * `daterangechanged` event.\r\n         */\r\n        _this.skipRangeEvent = false;\r\n        /**\r\n         * Whenever selected scope changes (chart is zoomed or panned), for example\r\n         * by interaction from a Scrollbar, or API, a chart needs to reposition\r\n         * its contents.\r\n         *\r\n         * `rangeChangeDuration` influences how this is performed.\r\n         *\r\n         * If set to zero (0), the change will happen instantenously.\r\n         *\r\n         * If set to non-zero value, the chart will gradually animate into new\r\n         * position for the set amount of milliseconds.\r\n         *\r\n         * @default 0\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         */\r\n        _this.rangeChangeDuration = 0;\r\n        /**\r\n         * An easing function to use for range change animation.\r\n         *\r\n         * @see {@link Ease}\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         */\r\n        _this.rangeChangeEasing = $ease.cubicOut;\r\n        /**\r\n         * A duration (ms) of each data parsing step. A Component parses its data in\r\n         * chunks in order to avoid completely freezing the machine when large data\r\n         * sets are used. This setting will control how many milliseconds should pass\r\n         * when parsing data until parser stops for a brief moment to let other\r\n         * processes catch up.\r\n         */\r\n        _this.parsingStepDuration = 50;\r\n        /**\r\n         * [dataInvalid description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.dataInvalid = false;\r\n        /**\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.rawDataInvalid = false;\r\n        /**\r\n         * [dataRangeInvalid description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.dataRangeInvalid = false;\r\n        /**\r\n         * [dataItemsInvalid description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.dataItemsInvalid = false;\r\n        /**\r\n         * If set to a non-zero number the element will \"animate\" data values of its\r\n         * children.\r\n         *\r\n         * This will happen on first load and whenever data values change.\r\n         *\r\n         * Enabling interpolation will mean that elements will transit smoothly into\r\n         * new values rather than updating instantly.\r\n         *\r\n         * @default 0\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         */\r\n        _this.interpolationDuration = 0;\r\n        /**\r\n         * An easing function to use for interpolating values when transiting from\r\n         * one source value to another.\r\n         *\r\n         * @default cubicOut\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         * @see {@link Ease}\r\n         */\r\n        _this.interpolationEasing = $ease.cubicOut;\r\n        /**\r\n         * Indicates whether transition between data item's values should start and\r\n         * play out all at once, or with a small delay (as defined by\r\n         * `sequencedInterpolationDelay`) for each subsequent data item.\r\n         *\r\n         * @default true\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         */\r\n        _this.sequencedInterpolation = true;\r\n        /**\r\n         * A delay (ms) to wait between animating each subsequent data item's\r\n         * interpolation animation.\r\n         *\r\n         * Relative only if `sequencedInterpolation = true`.\r\n         *\r\n         * @default 0\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         */\r\n        _this.sequencedInterpolationDelay = 0;\r\n        /**\r\n         * A progress (0-1) for the data validation process.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.dataValidationProgress = 0;\r\n        _this._addAllDataItems = true;\r\n        _this._usesData = true;\r\n        _this.className = \"Component\";\r\n        _this.minZoomCount = 1;\r\n        _this.maxZoomCount = 0;\r\n        _this._dataItems = new OrderedListTemplate(_this.createDataItem());\r\n        _this._dataItems.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\r\n        _this._dataItems.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\r\n        _this._disposers.push(new ListDisposer(_this._dataItems));\r\n        _this._disposers.push(_this._dataItems.template);\r\n        _this.invalidateData();\r\n        // TODO what about remove ?\r\n        _this.dataUsers.events.on(\"inserted\", _this.handleDataUserAdded, _this, false);\r\n        // Set up disposers\r\n        _this._disposers.push(new MultiDisposer(_this._dataDisposers));\r\n        _this._start = 0;\r\n        _this._end = 1;\r\n        _this.maxZoomDeclination = 1;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    Component.prototype.createDataItem = function () {\r\n        return new DataItem();\r\n    };\r\n    /**\r\n     * [handleDataUserAdded description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param event Event object\r\n     */\r\n    Component.prototype.handleDataUserAdded = function (event) {\r\n        var dataUser = event.newValue;\r\n        dataUser.dataProvider = this;\r\n    };\r\n    /**\r\n     * [handleDataItemValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Component.prototype.handleDataItemValueChange = function (dataItem, name) {\r\n        if (!this.dataItemsInvalid) {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingLocationChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.handleDataItemWorkingLocationChange = function (dataItem, name) {\r\n    };\r\n    /**\r\n     * [handleDataItemCalculatedValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.handleDataItemCalculatedValueChange = function (dataItem, name) {\r\n    };\r\n    /**\r\n     * [handleDataItemPropertyChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.handleDataItemPropertyChange = function (dataItem, name) {\r\n    };\r\n    /**\r\n     * Populates a [[DataItem]] width data from data source.\r\n     *\r\n     * Loops through all the fields and if such a field is found in raw data\r\n     * object, a corresponding value on passed in `dataItem` is set.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param item\r\n     */\r\n    Component.prototype.processDataItem = function (dataItem, dataContext) {\r\n        var _this = this;\r\n        if (dataItem) {\r\n            if (!dataContext) {\r\n                dataContext = {};\r\n            }\r\n            // store reference to original data item\r\n            dataItem.dataContext = dataContext;\r\n            var hasSomeValues_1 = false;\r\n            $object.each(this.dataFields, function (key, fieldValue) {\r\n                var fieldName = key;\r\n                var value = dataContext[fieldValue];\r\n                // Apply adapters to a retrieved value\r\n                if (_this._adapterO) {\r\n                    if (_this._adapterO.isEnabled(\"dataContextValue\")) {\r\n                        value = _this._adapterO.apply(\"dataContextValue\", {\r\n                            field: fieldName,\r\n                            value: value,\r\n                            dataItem: dataItem\r\n                        }).value;\r\n                    }\r\n                }\r\n                if ($type.hasValue(value)) {\r\n                    hasSomeValues_1 = true;\r\n                    if (dataItem.hasChildren[fieldName]) {\r\n                        var template = _this.createDataItem();\r\n                        template.copyFrom(_this.mainDataSet.template);\r\n                        var children = new OrderedListTemplate(template);\r\n                        children.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\r\n                        children.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\r\n                        _this._dataDisposers.push(new ListDisposer(children));\r\n                        var count = value.length;\r\n                        for (var i = 0; i < count; i++) {\r\n                            var rawDataItem = value[i];\r\n                            var childDataItem = children.create();\r\n                            childDataItem.parent = dataItem;\r\n                            _this.processDataItem(childDataItem, rawDataItem);\r\n                        }\r\n                        var anyDataItem = dataItem;\r\n                        anyDataItem[fieldName] = children;\r\n                    }\r\n                    else {\r\n                        // data is converted to numbers/dates in each dataItem\r\n                        dataItem[fieldName] = value;\r\n                    }\r\n                }\r\n            });\r\n            $object.each(this.propertyFields, function (key, fieldValue) {\r\n                var f = key;\r\n                var value = dataContext[fieldValue];\r\n                if ($type.hasValue(value)) {\r\n                    hasSomeValues_1 = true;\r\n                    dataItem.setProperty(f, value);\r\n                }\r\n            });\r\n            // @todo we might need some flag which would tell whether we should create empty data items or not.\r\n            if (!this._addAllDataItems && !hasSomeValues_1) {\r\n                this.mainDataSet.remove(dataItem);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * When validating raw data, instead of processing data item, we update it\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param item\r\n     */\r\n    Component.prototype.updateDataItem = function (dataItem) {\r\n        var _this = this;\r\n        if (dataItem) {\r\n            var dataContext_1 = dataItem.dataContext;\r\n            $object.each(this.dataFields, function (key, fieldValue) {\r\n                var fieldName = key;\r\n                var value = dataContext_1[fieldValue];\r\n                // Apply adapters to a retrieved value\r\n                if (_this._adapterO) {\r\n                    value = _this._adapterO.apply(\"dataContextValue\", {\r\n                        field: fieldName,\r\n                        value: value,\r\n                        dataItem: dataItem\r\n                    }).value;\r\n                }\r\n                if ($type.hasValue(value)) {\r\n                    if (dataItem.hasChildren[fieldName]) {\r\n                        var anyDataItem = dataItem;\r\n                        var children = (anyDataItem[fieldName]);\r\n                        children.each(function (child) {\r\n                            _this.updateDataItem(child);\r\n                        });\r\n                    }\r\n                    else {\r\n                        // data is converted to numbers/dates in each dataItem\t\t\t\t\t\r\n                        dataItem[fieldName] = value;\r\n                    }\r\n                }\r\n            });\r\n            $object.each(this.propertyFields, function (key, fieldValue) {\r\n                var f = key;\r\n                var value = dataContext_1[fieldValue];\r\n                if ($type.hasValue(value)) {\r\n                    dataItem.setProperty(f, value);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * [validateDataElements description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Component.prototype.validateDataElements = function () {\r\n        var count = this.endIndex;\r\n        for (var i = this.startIndex; i < count; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            // TODO is this correct\r\n            if (dataItem) {\r\n                this.validateDataElement(dataItem);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates this element and its related elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.validate = function () {\r\n        this.validateDataElements();\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    /**\r\n     * [validateDataElement description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem [description]\r\n     */\r\n    Component.prototype.validateDataElement = function (dataItem) {\r\n    };\r\n    /**\r\n     * Adds one or several (array) of data items to the existing data.\r\n     *\r\n     * @param rawDataItem One or many raw data item objects\r\n     */\r\n    Component.prototype.addData = function (rawDataItem, removeCount, skipRaw) {\r\n        var _this = this;\r\n        // need to check if data is invalid, as addData might be called multiple times\r\n        if (!this.dataInvalid && this.inited) {\r\n            this._parseDataFrom = this.data.length; // save length of parsed data\r\n        }\r\n        if (!skipRaw) {\r\n            if (rawDataItem instanceof Array) {\r\n                // can't use concat because new array is returned\r\n                $array.each(rawDataItem, function (dataItem) {\r\n                    _this.data.push(dataItem);\r\n                });\r\n            }\r\n            else {\r\n                this.data.push(rawDataItem); // add to raw data array\r\n            }\r\n        }\r\n        if (this.inited) {\r\n            this.removeData(removeCount, skipRaw);\r\n        }\r\n        else {\r\n            if ($type.isNumber(removeCount)) {\r\n                while (removeCount > 0) {\r\n                    this.data.shift();\r\n                    removeCount--;\r\n                }\r\n            }\r\n        }\r\n        this.invalidateData();\r\n    };\r\n    /**\r\n     * Removes elements from the beginning of data\r\n     *\r\n     * @param count number of elements to remove\r\n     */\r\n    Component.prototype.removeData = function (count, skipRaw) {\r\n        if ($type.isNumber(count) && count > 0) {\r\n            while (count > 0) {\r\n                var dataItem = this.mainDataSet.getIndex(0);\r\n                if (dataItem) {\r\n                    this.mainDataSet.remove(dataItem);\r\n                }\r\n                this.dataUsers.each(function (dataUser) {\r\n                    if (!dataUser.data || dataUser.data.length == 0) {\r\n                        var dataItem_1 = dataUser.mainDataSet.getIndex(0);\r\n                        if (dataItem_1) {\r\n                            dataUser.mainDataSet.remove(dataItem_1);\r\n                        }\r\n                    }\r\n                });\r\n                if (!skipRaw) {\r\n                    this.data.shift();\r\n                }\r\n                if (this._parseDataFrom > 0) {\r\n                    this._parseDataFrom--;\r\n                }\r\n                count--;\r\n            }\r\n            // changed from invalidateData since 4.7.19 to solve #51551\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    /**\r\n     * Triggers a data (re)parsing.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.invalidateData = function () {\r\n        if (this.disabled || this.isTemplate) {\r\n            return;\r\n        }\r\n        //if(!this.dataInvalid){\r\n        registry.addToInvalidComponents(this);\r\n        system.requestFrame();\r\n        this.dataInvalid = true;\r\n        $iter.each(this.dataUsers.iterator(), function (x) {\r\n            x.invalidateDataItems();\r\n        });\r\n        //}\r\n    };\r\n    /**\r\n     * [invalidateDataUsers description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Component.prototype.invalidateDataUsers = function () {\r\n        $iter.each(this.dataUsers.iterator(), function (x) {\r\n            x.invalidate();\r\n        });\r\n    };\r\n    /**\r\n     * Invalidates data values. When data array is not changed, but values within\r\n     * it changes, we invalidate data so that component would process changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.invalidateDataItems = function () {\r\n        if (this.disabled || this.isTemplate) {\r\n            return;\r\n        }\r\n        //if(!this.dataItemsInvalid){\r\n        $array.move(registry.invalidDataItems, this);\r\n        system.requestFrame();\r\n        this.dataItemsInvalid = true;\r\n        $iter.each(this.dataUsers.iterator(), function (x) {\r\n            x.invalidateDataItems();\r\n        });\r\n        //}\r\n    };\r\n    /**\r\n     * Invalidates data range. This is done when data which must be shown\r\n     * changes (chart is zoomed for example).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.invalidateDataRange = function () {\r\n        if (this.disabled || this.isTemplate) {\r\n            return;\r\n        }\r\n        //if(!this.dataRangeInvalid){\r\n        this.dataRangeInvalid = true;\r\n        $array.move(registry.invalidDataRange, this);\r\n        system.requestFrame();\r\n        //}\r\n    };\r\n    /**\r\n     * Processes data range.\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.validateDataRange = function () {\r\n        $array.remove(registry.invalidDataRange, this);\r\n        this.dataRangeInvalid = false;\r\n        if (this.startIndex != this._prevStartIndex || this.endIndex != this._prevEndIndex) {\r\n            this.rangeChangeUpdate();\r\n            this.appendDataItems();\r\n            this.invalidate();\r\n            this.dispatchImmediately(\"datarangechanged\");\r\n        }\r\n    };\r\n    /**\r\n     * [sliceData description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.sliceData = function () {\r\n        this._workingStartIndex = this.startIndex;\r\n        this._workingEndIndex = this.endIndex;\r\n    };\r\n    /**\r\n     * [rangeChangeUpdate description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.rangeChangeUpdate = function () {\r\n        this.sliceData();\r\n        this._prevStartIndex = this.startIndex;\r\n        this._prevEndIndex = this.endIndex;\r\n    };\r\n    /**\r\n     * [appendDataItems description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.appendDataItems = function () {\r\n        // TODO use an iterator instead\r\n        var count = this.endIndex;\r\n        for (var i = this.startIndex; i < count; i++) {\r\n            // data item\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            if (dataItem) {\r\n                dataItem.__disabled = false;\r\n            }\r\n        }\r\n        for (var i = 0; i < this.startIndex; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            if (dataItem) {\r\n                dataItem.__disabled = true;\r\n            }\r\n        }\r\n        for (var i = this.endIndex; i < this.dataItems.length; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            if (dataItem) {\r\n                dataItem.__disabled = true;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * If you want to have a smooth transition from one data values to another, you change your raw data and then you must call this method.\r\n     * then instead of redrawing everything, the chart will check raw data and smoothly transit from previous to new data\r\n     */\r\n    Component.prototype.invalidateRawData = function () {\r\n        if (this.disabled || this.isTemplate) {\r\n            return;\r\n        }\r\n        //if(!this.rawDataInvalid){\r\n        $array.move(registry.invalidRawDatas, this);\r\n        system.requestFrame();\r\n        this.rawDataInvalid = true;\r\n        $iter.each(this.dataUsers.iterator(), function (x) {\r\n            x.invalidateRawData();\r\n        });\r\n        //}\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Component.prototype.validateRawData = function () {\r\n        var _this = this;\r\n        $array.remove(registry.invalidRawDatas, this);\r\n        $iter.each(this.mainDataSet.iterator(), function (dataItem) {\r\n            if (dataItem) {\r\n                _this.updateDataItem(dataItem);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    Component.prototype.dispose = function () {\r\n        var _this = this;\r\n        this.mainDataSet.template.clones.clear();\r\n        $object.each(this._dataSources, function (key, source) {\r\n            _this.removeDispose(source);\r\n        });\r\n        this.disposeData();\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Component.prototype.disposeData = function () {\r\n        this.mainDataSet.template.clones.clear();\r\n        $array.each(this._dataDisposers, function (x) {\r\n            x.dispose();\r\n        });\r\n        // and for all components\r\n        $iter.each(this.dataUsers.iterator(), function (dataUser) {\r\n            dataUser.disposeData();\r\n        });\r\n        this._dataDisposers.length = 0;\r\n        this._startIndex = undefined;\r\n        this._endIndex = undefined;\r\n        // dispose old\r\n        this.mainDataSet.clear();\r\n        this.mainDataSet.template.clones.clear();\r\n        if (this._dataSets) {\r\n            this._dataSets.clear();\r\n        }\r\n    };\r\n    Component.prototype.getDataItem = function (dataContext) {\r\n        return this.mainDataSet.create();\r\n    };\r\n    /**\r\n     * Validates (processes) data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.validateData = function () {\r\n        this.dispatchImmediately(\"beforedatavalidated\");\r\n        this.dataInvalid = false;\r\n        registry.removeFromInvalidComponents(this);\r\n        if (this.__disabled) {\r\n            return;\r\n        }\r\n        this.dataValidationProgress = 0;\r\n        // need this to slice new data\r\n        this._prevStartIndex = undefined;\r\n        this._prevEndIndex = undefined;\r\n        // todo: this needs some overthinking, maybe some extra settings like zoomOotonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\r\n        this._startIndex = undefined;\r\n        this._endIndex = undefined;\r\n        if (this.dataFields.data && this.dataItem) {\r\n            var dataContext = this.dataItem.dataContext;\r\n            this._data = dataContext[this.dataFields.data];\r\n        }\r\n        // data items array is reset only if all data is validated, if _parseDataFrom is not 0, we append new data only\r\n        // check heatmap demo if uncommented\r\n        // fixed both issues by adding && this.data.length > 0\r\n        // check adding series example if changed\r\n        if (this._parseDataFrom === 0 && this.data.length > 0) {\r\n            this.disposeData();\r\n        }\r\n        if (this.data.length > 0) {\r\n            var preloader = this.preloader;\r\n            // and for all components\r\n            $iter.each(this.dataUsers.iterator(), function (dataUser) {\r\n                // todo: this needs some overthinking, maybe some extra settings like zoomOUtonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\r\n                dataUser._startIndex = undefined;\r\n                dataUser._endIndex = undefined;\r\n            });\r\n            var counter = 0;\r\n            var startTime = Date.now();\r\n            // parse data\r\n            var i = this._parseDataFrom;\r\n            var n = this.data.length;\r\n            var _loop_1 = function () {\r\n                var rawDataItem = this_1.data[i];\r\n                if (this_1._usesData) {\r\n                    var dataItem = this_1.getDataItem(rawDataItem);\r\n                    this_1.processDataItem(dataItem, rawDataItem);\r\n                }\r\n                this_1.dataUsers.each(function (dataUser) {\r\n                    if (dataUser.data.length == 0) { // checking if data is not set directly\r\n                        var dataUserDataItem = dataUser.getDataItem(rawDataItem);\r\n                        dataUser.processDataItem(dataUserDataItem, rawDataItem);\r\n                    }\r\n                });\r\n                counter++;\r\n                // show preloader if this takes too many time\r\n                if (counter == 100) { // no need to check it on each data item\r\n                    counter = 0;\r\n                    var elapsed = Date.now() - startTime;\r\n                    if (elapsed > this_1.parsingStepDuration) {\r\n                        if (i < this_1.data.length - 10) {\r\n                            this_1._parseDataFrom = i + 1;\r\n                            // update preloader\r\n                            if (preloader) {\r\n                                if (i / this_1.data.length > 0.5 && !preloader.visible) {\r\n                                    // do not start showing\r\n                                }\r\n                                else {\r\n                                    preloader.progress = i / this_1.data.length;\r\n                                }\r\n                            }\r\n                            this_1.dataValidationProgress = i / this_1.data.length;\r\n                            i = this_1.data.length; // stops cycle\r\n                            this_1.invalidateData();\r\n                            return { value: void 0 };\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            var this_1 = this;\r\n            for (i; i < n; i++) {\r\n                var state_1 = _loop_1();\r\n                if (typeof state_1 === \"object\")\r\n                    return state_1.value;\r\n            }\r\n            if (preloader) {\r\n                preloader.progress = 1;\r\n            }\r\n            this.dataUsers.each(function (dataUser) {\r\n                if (dataUser.hidden || (dataUser.appeared && !dataUser.visible && dataUser.stacked)) {\r\n                    dataUser.hide(0);\r\n                }\r\n            });\r\n        }\r\n        this.dataValidationProgress = 1;\r\n        this._parseDataFrom = 0; // reset this index, it is set to dataItems.length if addData() method was used.\r\n        this.invalidateDataItems();\r\n        if (!this._internalDefaultsApplied) {\r\n            this.applyInternalDefaults();\r\n        }\r\n        this.dispatch(\"datavalidated\"); // can't zoom chart if dispatched immediately\r\n    };\r\n    /**\r\n     * Validates (processes) data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.validateDataItems = function () {\r\n        $array.remove(registry.invalidDataItems, this);\r\n        this.dataItemsInvalid = false;\r\n        this.invalidateDataRange();\r\n        this.invalidate();\r\n        this.dispatch(\"dataitemsvalidated\");\r\n    };\r\n    Object.defineProperty(Component.prototype, \"data\", {\r\n        /**\r\n         * Returns element's source (raw) data.\r\n         *\r\n         * @return Data\r\n         */\r\n        get: function () {\r\n            if (!this._data) {\r\n                this._data = [];\r\n            }\r\n            if (!this._adapterO) {\r\n                return this._data;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"data\", this._data);\r\n            }\r\n        },\r\n        /**\r\n         * Sets source (raw) data for the element. The \"data\" is always an `Array`\r\n         * of objects.\r\n         *\r\n         * IMPORTANT: The order of data items in `data` array is important as it\r\n         * might affect chart look and behavior. [More details](https://www.amcharts.com/docs/v4/concepts/data/#Order_of_data_items).\r\n         *\r\n         * @param value Data\r\n         */\r\n        set: function (value) {\r\n            this.setData(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Component.prototype.setData = function (value) {\r\n        // array might be the same, but there might be items added\r\n        // todo: check if array changed, toString maybe?\r\n        if (!this.isDisposed()) {\r\n            this._parseDataFrom = 0;\r\n            this.disposeData();\r\n            this._data = value;\r\n            if (value && value.length > 0) {\r\n                this.invalidateData();\r\n            }\r\n            else {\r\n                this.dispatchImmediately(\"beforedatavalidated\");\r\n                this.dispatch(\"datavalidated\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns (creates if necessary) a [[DataSource]] bound to any specific\r\n     * property.\r\n     *\r\n     * For example if I want to bind `data` to an external JSON file, I'd create\r\n     * a DataSource for it.\r\n     *\r\n     * @param property  Property to bind external data to\r\n     * @return A DataSource for property\r\n     */\r\n    Component.prototype.getDataSource = function (property) {\r\n        var _this = this;\r\n        if (!$type.hasValue(this._dataSources[property])) {\r\n            this._dataSources[property] = new DataSource();\r\n            this._dataSources[property].component = this;\r\n            this.setDataSourceEvents(this._dataSources[property], property);\r\n            this._dataSources[property].adapter.add(\"dateFields\", function (val) {\r\n                return _this.dataSourceDateFields(val);\r\n            });\r\n            this._dataSources[property].adapter.add(\"numberFields\", function (val) {\r\n                return _this.dataSourceNumberFields(val);\r\n            });\r\n            this.events.on(\"inited\", function () {\r\n                _this.loadData(property);\r\n            }, this, false);\r\n        }\r\n        return this._dataSources[property];\r\n    };\r\n    Object.defineProperty(Component.prototype, \"dataSource\", {\r\n        /**\r\n         * @return Data source\r\n         */\r\n        get: function () {\r\n            if (!this._dataSources[\"data\"]) {\r\n                this.getDataSource(\"data\");\r\n            }\r\n            return this._dataSources[\"data\"];\r\n        },\r\n        /**\r\n         *A [[DataSource]] to be used for loading Component's data.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/loading-external-data/} for more on loading external data\r\n         * @param value  Data source\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            if (this._dataSources[\"data\"]) {\r\n                this.removeDispose(this._dataSources[\"data\"]);\r\n            }\r\n            this._dataSources[\"data\"] = value;\r\n            this._dataSources[\"data\"].component = this;\r\n            this.events.on(\"inited\", function () {\r\n                _this.loadData(\"data\");\r\n            }, this, false);\r\n            this.setDataSourceEvents(value, \"data\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Initiates loading of the external data via [[DataSource]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.loadData = function (property) {\r\n        this._dataSources[property].load();\r\n    };\r\n    /**\r\n     * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n     * so that particular chart types can popuplate this setting with their\r\n     * own type-specific data fields so they are parsed properly.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Array of date fields\r\n     * @return Array of date fields populated with chart's date fields\r\n     */\r\n    Component.prototype.dataSourceDateFields = function (value) {\r\n        return value;\r\n    };\r\n    /**\r\n     * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n     * so that particular chart types can popuplate this setting with their\r\n     * own type-specific data fields so they are parsed properly.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Array of number fields\r\n     * @return Array of number fields populated with chart's number fields\r\n     */\r\n    Component.prototype.dataSourceNumberFields = function (value) {\r\n        return value;\r\n    };\r\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param list        [description]\r\n     * @param dataFields  [description]\r\n     * @param targetList  [description]\r\n     * @return [description]\r\n     */\r\n    Component.prototype.populateDataSourceFields = function (list, dataFields, targetList) {\r\n        $array.each(targetList, function (value) {\r\n            if (dataFields[value] && $array.indexOf(list, dataFields[value]) === -1) {\r\n                list.push(dataFields[value]);\r\n            }\r\n        });\r\n        return list;\r\n    };\r\n    /**\r\n     * Sets events on a [[DataSource]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.setDataSourceEvents = function (ds, property) {\r\n        var _this = this;\r\n        ds.events.on(\"started\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 0;\r\n                //preloader.label.text = this.language.translate(\"Loading\");\r\n            }\r\n        }, undefined, false);\r\n        ds.events.on(\"loadstarted\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 0.25;\r\n            }\r\n        }, undefined, false);\r\n        ds.events.on(\"loadended\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 0.5;\r\n            }\r\n        }, undefined, false);\r\n        ds.events.on(\"parseended\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 0.75;\r\n            }\r\n        }, undefined, false);\r\n        ds.events.on(\"ended\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 1;\r\n            }\r\n        }, undefined, false);\r\n        ds.events.on(\"error\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 1;\r\n            }\r\n            _this.openModal(ev.message);\r\n        }, undefined, false);\r\n        if (property) {\r\n            ds.events.on(\"done\", function (ev) {\r\n                var preloader = _this.preloader;\r\n                if (preloader) {\r\n                    preloader.progress = 1;\r\n                }\r\n                if (property == \"data\" && !$type.isArray(ev.data)) {\r\n                    ev.data = [ev.data];\r\n                }\r\n                if (ds.incremental && property == \"data\" && _this.data.length) {\r\n                    _this.addData(ev.data, ds.keepCount ? ev.data.length : 0);\r\n                }\r\n                else if (ds.updateCurrentData && property == \"data\" && _this.data.length) {\r\n                    // cycle through existing data items\r\n                    $array.each(_this.data, function (item, index) {\r\n                        if ($type.hasValue(ev.data[index])) {\r\n                            $object.each(item, function (key, val) {\r\n                                if ($type.hasValue(ev.data[index][key])) {\r\n                                    item[key] = ev.data[index][key];\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                    _this.invalidateRawData();\r\n                }\r\n                else {\r\n                    _this[property] = ev.data;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(Component.prototype, \"responsive\", {\r\n        /**\r\n         * @return Responsive rules handler\r\n         */\r\n        get: function () {\r\n            if (!this._responsive) {\r\n                this._responsive = new Responsive();\r\n                this._responsive.component = this;\r\n            }\r\n            return this._responsive;\r\n        },\r\n        /**\r\n         * A [[Responsive]] instance to be used when applying conditional\r\n         * property values.\r\n         *\r\n         * NOTE: Responsive features are currently in development and may not work\r\n         * as expected, if at all.\r\n         *\r\n         * @param value  Responsive rules handler\r\n         */\r\n        set: function (value) {\r\n            this._responsive = value;\r\n            this._responsive.component = this;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets current zoom.\r\n     *\r\n     * The range uses relative values from 0 to 1, with 0 marking beginning and 1\r\n     * marking end of the available data range.\r\n     *\r\n     * This method will not have any effect when called on a chart object.\r\n     * Since the chart can have a number of axes and series, each with its own\r\n     * data, the meaning of \"range\" is very ambiguous.\r\n     *\r\n     * To zoom the chart use `zoom*` methods on its respective axes.\r\n     *\r\n     * @param range          Range\r\n     * @param skipRangeEvent Should rangechanged event not be triggered?\r\n     * @param instantly      Do not animate?\r\n     * @return Actual modidied range (taking `maxZoomFactor` into account)\r\n     */\r\n    Component.prototype.zoom = function (range, skipRangeEvent, instantly, declination) {\r\n        var _this = this;\r\n        if (skipRangeEvent === void 0) { skipRangeEvent = false; }\r\n        if (instantly === void 0) { instantly = false; }\r\n        var start = range.start;\r\n        var end = range.end;\r\n        var priority = range.priority;\r\n        if (range.start == range.end) {\r\n            range.start = range.start - 0.5 / this.maxZoomFactor;\r\n            range.end = range.end + 0.5 / this.maxZoomFactor;\r\n        }\r\n        if (priority == \"end\" && end == 1 && start != 0) {\r\n            if (start < this.start) {\r\n                priority = \"start\";\r\n            }\r\n        }\r\n        if (priority == \"start\" && start == 0) {\r\n            if (end > this.end) {\r\n                priority = \"end\";\r\n            }\r\n        }\r\n        if (!$type.isNumber(declination)) {\r\n            declination = this.maxZoomDeclination;\r\n        }\r\n        if (!$type.isNumber(start) || !$type.isNumber(end)) {\r\n            return { start: this.start, end: this.end };\r\n        }\r\n        if (this._finalStart != start || this._finalEnd != end) {\r\n            var maxZoomFactor = this.maxZoomFactor / this.minZoomCount;\r\n            var minZoomFactor = this.maxZoomFactor / this.maxZoomCount;\r\n            // most likely we are dragging left scrollbar grip here, so we tend to modify end\r\n            if (priority == \"start\") {\r\n                if (this.maxZoomCount > 0) {\r\n                    // add to the end\r\n                    if (1 / (end - start) < minZoomFactor) {\r\n                        end = start + 1 / minZoomFactor;\r\n                    }\r\n                }\r\n                // add to the end\r\n                if (1 / (end - start) > maxZoomFactor) {\r\n                    end = start + 1 / maxZoomFactor;\r\n                }\r\n                //unless end is > 0\r\n                if (end > 1 && end - start < 1 / maxZoomFactor) {\r\n                    //end = 1;\r\n                    start = end - 1 / maxZoomFactor;\r\n                }\r\n            }\r\n            // most likely we are dragging right, so we modify left\r\n            else {\r\n                if (this.maxZoomCount > 0) {\r\n                    // add to the end\r\n                    if (1 / (end - start) < minZoomFactor) {\r\n                        start = end - 1 / minZoomFactor;\r\n                    }\r\n                }\r\n                // remove from start\r\n                if (1 / (end - start) > maxZoomFactor) {\r\n                    if (start <= 0) {\r\n                        end = start + 1 / maxZoomFactor;\r\n                    }\r\n                    else {\r\n                        start = end - 1 / maxZoomFactor;\r\n                    }\r\n                }\r\n                if (start < 0 && end - start < 1 / maxZoomFactor) {\r\n                    //start = 0;\r\n                    end = start + 1 / maxZoomFactor;\r\n                }\r\n            }\r\n            if (start < -declination) {\r\n                start = -declination;\r\n            }\r\n            if (1 / (end - start) > maxZoomFactor) {\r\n                end = start + 1 / maxZoomFactor;\r\n            }\r\n            if (end > 1 + declination) {\r\n                end = 1 + declination;\r\n            }\r\n            if (1 / (end - start) > maxZoomFactor) {\r\n                start = end - 1 / maxZoomFactor;\r\n            }\r\n            this._finalEnd = end;\r\n            this._finalStart = start;\r\n            this.skipRangeEvent = skipRangeEvent;\r\n            this.dispatchImmediately(\"rangechangestarted\");\r\n            if (this.rangeChangeDuration > 0 && !instantly) {\r\n                // todo: maybe move this to Animation\r\n                var rangeChangeAnimation = this.rangeChangeAnimation;\r\n                if (rangeChangeAnimation && rangeChangeAnimation.progress < 1) {\r\n                    var options = rangeChangeAnimation.animationOptions;\r\n                    if (options.length > 1) {\r\n                        if (options[0].to == start && options[1].to == end) {\r\n                            return { start: start, end: end };\r\n                        }\r\n                        else {\r\n                            if (!rangeChangeAnimation.isDisposed()) {\r\n                                rangeChangeAnimation.stop();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this.rangeChangeAnimation) {\r\n                    this.rangeChangeAnimation.kill();\r\n                }\r\n                rangeChangeAnimation = this.animate([{ property: \"start\", to: start }, { property: \"end\", to: end }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n                this.rangeChangeAnimation = rangeChangeAnimation;\r\n                if (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\r\n                    rangeChangeAnimation.events.on(\"animationended\", function () {\r\n                        _this.dispatchImmediately(\"rangechangeended\");\r\n                    });\r\n                }\r\n                else {\r\n                    this.dispatchImmediately(\"rangechangeended\");\r\n                }\r\n            }\r\n            else {\r\n                this.start = start;\r\n                this.end = end;\r\n                this.dispatch(\"rangechangeended\");\r\n            }\r\n        }\r\n        return { start: start, end: end };\r\n    };\r\n    /**\r\n     * Zooms to specific data items using their index in data.\r\n     *\r\n     * This method will not have any effect when called on a chart object.\r\n     * Since the chart can have a number of axes and series, each with its own\r\n     * data, the meaning of \"index\" is very ambiguous.\r\n     *\r\n     * To zoom the chart use `zoom*` methods on its respective axes.\r\n     *\r\n     * @param startIndex     Index of the starting data item\r\n     * @param endIndex       Index of the ending data item\r\n     * @param skipRangeEvent Should rangechanged event not be triggered?\r\n     * @param instantly      Do not animate?\r\n     */\r\n    Component.prototype.zoomToIndexes = function (startIndex, endIndex, skipRangeEvent, instantly) {\r\n        if (!$type.isNumber(startIndex) || !$type.isNumber(endIndex)) {\r\n            return;\r\n        }\r\n        var start = startIndex / this.dataItems.length;\r\n        var end = endIndex / this.dataItems.length;\r\n        this.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n    };\r\n    Object.defineProperty(Component.prototype, \"zoomFactor\", {\r\n        /**\r\n         * A current zoom factor (0-1). 1 meaning fully zoomed out. (showing all of\r\n         * the available data)\r\n         *\r\n         * @return Zoom factor\r\n         */\r\n        get: function () {\r\n            return $math.fitToRange(1 / (this.end - this.start), 1, this.maxZoomFactor);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"maxZoomFactor\", {\r\n        /**\r\n         * @return Maximum zoomFactor\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxZoomFactor\");\r\n        },\r\n        /**\r\n         * Max available `zoomFactor`.\r\n         *\r\n         * The element will not allow zoom to occur beyond this factor.\r\n         *\r\n         * [[DateAxis]] and [[CategoryAxis]] calculate this atutomatically so that\r\n         * category axis could be zoomed to one category and date axis allows to be\r\n         * zoomed up to one base interval.\r\n         *\r\n         * In case you want to restrict category or date axis to be zoomed to more\r\n         * than one category or more than one base interval, use `minZoomCount`\r\n         * property (set it to `> 1`).\r\n         *\r\n         * Default value of [[ValueAxis]]'s `maxZoomFactor` is `1000`.\r\n         *\r\n         * Feel free to modify it to allow bigger zoom or to restrict zooming.\r\n         *\r\n         * @param value  Maximum zoomFactor\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"maxZoomFactor\", value)) {\r\n                if (value == 1) {\r\n                    this.maxZoomDeclination = 0;\r\n                }\r\n                this.invalidateDataRange();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"maxZoomDeclination\", {\r\n        /**\r\n         * @ignore\r\n         * @return Maximum zoom declination\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxZoomDeclination\");\r\n        },\r\n        /**\r\n         * Max zoom declination.\r\n         *\r\n         * @ignore\r\n         * @default 1\r\n         * @param value  Maximum zoom declination\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"maxZoomDeclination\", value)) {\r\n                this.invalidateDataRange();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"startIndex\", {\r\n        /**\r\n         * Current starting index.\r\n         *\r\n         * @return Start index\r\n         */\r\n        get: function () {\r\n            if (!$type.isNumber(this._startIndex)) {\r\n                this._startIndex = 0;\r\n            }\r\n            return this._startIndex;\r\n        },\r\n        /**\r\n         * Sets current starting index.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Start index\r\n         */\r\n        set: function (value) {\r\n            this._startIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\r\n            //this._workingStartIndex = this._startIndex; // not good, breaks adjusted working start index of line series\r\n            this.start = this.indexToPosition(this._startIndex);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     * @todo:review description\r\n     * returns item's relative position by the index of the item\r\n     * @param index\r\n     */\r\n    Component.prototype.indexToPosition = function (index) {\r\n        return index / this.dataItems.length;\r\n    };\r\n    Object.defineProperty(Component.prototype, \"endIndex\", {\r\n        /**\r\n         * Current ending index.\r\n         *\r\n         * @return End index\r\n         */\r\n        get: function () {\r\n            var count = this.dataItems.length;\r\n            if (!$type.isNumber(this._endIndex) || this._endIndex > count) {\r\n                this._endIndex = count;\r\n            }\r\n            return this._endIndex;\r\n        },\r\n        /**\r\n         * Sets current ending index.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value End index\r\n         */\r\n        set: function (value) {\r\n            this._endIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\r\n            //this._workingEndIndex = this._endIndex; // not good, breaks adjusted workingend index of line series\r\n            this.end = this.indexToPosition(this._endIndex);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"start\", {\r\n        /**\r\n         * @return Start (0-1)\r\n         */\r\n        get: function () {\r\n            if (!this._adapterO) {\r\n                return this._start;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"start\", this._start);\r\n            }\r\n        },\r\n        /**\r\n         * Start of the current data range (zoom).\r\n         *\r\n         * These are relative values from 0 (beginning) to 1 (end).\r\n         *\r\n         * @param value Start (0-1)\r\n         */\r\n        set: function (value) {\r\n            // value = $math.round(value, 10); not good\r\n            //if (1 / (this.end - value) > this.maxZoomFactor) {\r\n            //\tvalue = this.end - 1 / this.maxZoomFactor;\r\n            //}\r\n            if (this._start != value) {\r\n                this._start = value;\r\n                var startIndex = Math.max(0, Math.floor(this.dataItems.length * value) || 0);\r\n                this._startIndex = Math.min(startIndex, this.dataItems.length);\r\n                this.invalidateDataRange();\r\n                this.invalidate();\r\n                this.dispatchImmediately(\"startchanged\");\r\n                this.dispatch(\"startendchanged\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"end\", {\r\n        /**\r\n         * @return End (0-1)\r\n         */\r\n        get: function () {\r\n            if (!this._adapterO) {\r\n                return this._end;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"end\", this._end);\r\n            }\r\n        },\r\n        /**\r\n         * End of the current data range (zoom).\r\n         *\r\n         * These are relative values from 0 (beginning) to 1 (end).\r\n         *\r\n         * @param value End (0-1)\r\n         */\r\n        set: function (value) {\r\n            // value = $math.round(value, 10); // not good\r\n            //if (1 / (value - this.start) > this.maxZoomFactor) {\r\n            //\tvalue = 1 / this.maxZoomFactor + this.start;\r\n            //}\r\n            if (this._end != value) {\r\n                this._end = value;\r\n                this._endIndex = Math.min(this.dataItems.length, Math.ceil(this.dataItems.length * value) || 0);\r\n                this.invalidateDataRange();\r\n                this.invalidate();\r\n                this.dispatchImmediately(\"endchanged\");\r\n                this.dispatch(\"startendchanged\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [removeFromInvalids description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Component.prototype.removeFromInvalids = function () {\r\n        _super.prototype.removeFromInvalids.call(this);\r\n        registry.removeFromInvalidComponents(this);\r\n        $array.remove(registry.invalidDataItems, this);\r\n        $array.remove(registry.invalidDataRange, this);\r\n        $array.remove(registry.invalidRawDatas, this);\r\n    };\r\n    Object.defineProperty(Component.prototype, \"dataItems\", {\r\n        /**\r\n         * Returns a list of source [[DataItem]] objects currently used in the chart.\r\n         *\r\n         * @return List of data items\r\n         */\r\n        get: function () {\r\n            if (this._currentDataSetId != \"\") {\r\n                var dataItems = this.dataSets.getKey(this._currentDataSetId);\r\n                if (dataItems) {\r\n                    return dataItems;\r\n                }\r\n            }\r\n            return this._dataItems;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"dataSets\", {\r\n        /**\r\n         * Holds data items for data sets (usually aggregated data).\r\n         *\r\n         * @ignore\r\n         * @since 4.7.0\r\n         * @return  Data sets\r\n         */\r\n        get: function () {\r\n            if (!this._dataSets) {\r\n                this._dataSets = new Dictionary();\r\n            }\r\n            return this._dataSets;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Makes the chart use particular data set.\r\n     *\r\n     * If `id` is not provided or there is no such data set, main data will be\r\n     * used.\r\n     *\r\n     * @ignore\r\n     * @since 4.7.0\r\n     * @param  id  Data set id\r\n     */\r\n    Component.prototype.setDataSet = function (id) {\r\n        if (this._currentDataSetId != id) {\r\n            var dataSet = this.dataSets.getKey(id);\r\n            if (!dataSet) {\r\n                if (this._currentDataSetId != \"\") {\r\n                    this.dataItems.each(function (dataItem) {\r\n                        dataItem.__disabled = true;\r\n                    });\r\n                    this._currentDataSetId = \"\";\r\n                    this.invalidateDataRange();\r\n                    this._prevStartIndex = undefined;\r\n                    this.dataItems.each(function (dataItem) {\r\n                        dataItem.__disabled = false;\r\n                    });\r\n                    return true;\r\n                }\r\n            }\r\n            else {\r\n                this.dataItems.each(function (dataItem) {\r\n                    dataItem.__disabled = true;\r\n                });\r\n                this._currentDataSetId = id;\r\n                this.invalidateDataRange();\r\n                this._prevStartIndex = undefined;\r\n                this.dataItems.each(function (dataItem) {\r\n                    dataItem.__disabled = false;\r\n                });\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(Component.prototype, \"currentDataSetId\", {\r\n        /**\r\n         * Returns id of the currently used data set, or `undefined` if main data set\r\n         * is in use.\r\n         *\r\n         * @since 4.7.0\r\n         * @return Current data set id\r\n         */\r\n        get: function () {\r\n            return this._currentDataSetId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"mainDataSet\", {\r\n        /**\r\n         * Returns reference to \"main\" data set (unaggregated data as it was supplied\r\n         * in `data`).\r\n         *\r\n         * @since 4.7.0\r\n         * @return Main data set\r\n         */\r\n        get: function () {\r\n            return this._dataItems;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates the indexes for the dataItems\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype._updateDataItemIndexes = function (startIndex) {\r\n        var dataItems = this.mainDataSet.values;\r\n        var length = dataItems.length;\r\n        for (var i = startIndex; i < length; ++i) {\r\n            dataItems[i]._index = i;\r\n        }\r\n    };\r\n    /**\r\n     * Processes newly added [[DataItem]] as well as triggers data re-validation.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event [description]\r\n     */\r\n    Component.prototype.handleDataItemAdded = function (event) {\r\n        event.newValue.component = this;\r\n        this._updateDataItemIndexes(event.index);\r\n        if (!this.dataItemsInvalid) {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    /**\r\n     * removes [[DataItem]] as well as triggers data re-validation.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event [description]\r\n     */\r\n    Component.prototype.handleDataItemRemoved = function (event) {\r\n        //\t\tevent.oldValue.component = undefined; // not good, as some items might be not removed from component lists\r\n        this._updateDataItemIndexes(event.index);\r\n        if (!this.dataItemsInvalid) {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    /**\r\n     * Binds a data element's field to a specific field in raw data.\r\n     * For example, for the very basic column chart you'd want to bind a `value`\r\n     * field to a field in data, such as `price`.\r\n     *\r\n     * Some more advanced Components, like [[CandlestickSeries]] need several\r\n     * data fields bound to data, such as ones for open, high, low and close\r\n     * values.\r\n     *\r\n     * @todo Example\r\n     * @param field  Field name\r\n     * @param value  Field name in data\r\n     */\r\n    Component.prototype.bindDataField = function (field, value) {\r\n        this.dataFields[field] = value;\r\n        this.invalidateDataRange();\r\n    };\r\n    /**\r\n     * Invalidates processed data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.invalidateProcessedData = function () {\r\n        this.resetProcessedRange();\r\n        this.invalidateDataRange();\r\n    };\r\n    /**\r\n     * [resetProcessedRange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Component.prototype.resetProcessedRange = function () {\r\n        this._prevEndIndex = null;\r\n        this._prevStartIndex = null;\r\n    };\r\n    Object.defineProperty(Component.prototype, \"dataUsers\", {\r\n        /**\r\n         * Returns all other [[Component]] objects that are using this element's\r\n         * data.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._dataUsers) {\r\n                this._dataUsers = new List();\r\n                //this._disposers.push(new ListDisposer(this._dataUsers));\r\n                // TODO better way of handling this? e.g. move into another module ?\r\n                this._disposers.push(new Disposer(function () {\r\n                    // TODO clear the list ?\r\n                    $iter.each(_this._dataUsers.iterator(), function (x) {\r\n                        x.dispose();\r\n                    });\r\n                }));\r\n            }\r\n            return this._dataUsers;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a clone of this element.\r\n     *\r\n     * @return Clone\r\n     */\r\n    Component.prototype.clone = function () {\r\n        var component = _super.prototype.clone.call(this);\r\n        component.dataFields = $utils.copyProperties(this.dataFields, {});\r\n        return component;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Component]].\r\n     *\r\n     * @param source Source Component\r\n     */\r\n    Component.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.data = source.data;\r\n        this.sequencedInterpolation = source.sequencedInterpolation;\r\n        this.sequencedInterpolationDelay = source.sequencedInterpolationDelay;\r\n        this.interpolationDuration = source.interpolationDuration;\r\n        this.interpolationEasing = source.interpolationEasing;\r\n    };\r\n    /**\r\n     * Invalidates the whole element, including all its children, causing\r\n     * complete re-parsing of data and redraw.\r\n     *\r\n     * Use sparingly!\r\n     */\r\n    Component.prototype.reinit = function () {\r\n        this._inited = false;\r\n        this.deepInvalidate();\r\n    };\r\n    /**\r\n     * Add an adapter for data.\r\n     *\r\n     * @return Exporting\r\n     */\r\n    Component.prototype.getExporting = function () {\r\n        var _export = _super.prototype.getExporting.call(this);\r\n        if (!_export.adapter.has(\"data\", this._exportData, -1, this)) {\r\n            _export.adapter.add(\"data\", this._exportData, -1, this);\r\n            this.events.on(\"datavalidated\", function (ev) {\r\n                _export.handleDataUpdated();\r\n            });\r\n        }\r\n        return _export;\r\n    };\r\n    Component.prototype._exportData = function (arg) {\r\n        arg.data = this.data;\r\n        return arg;\r\n    };\r\n    Component.prototype.setDisabled = function (value) {\r\n        var changed = _super.prototype.setDisabled.call(this, value);\r\n        if (changed) {\r\n            this.invalidateData();\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Component.prototype.setShowOnInit = function (value) {\r\n        if (value != this.getPropertyValue(\"showOnInit\")) {\r\n            if (value && !this.inited && !this.hidden) {\r\n                this._showOnInitDisposer2 = this.events.once(\"dataitemsvalidated\", this.hideInitially, this, false);\r\n                this._disposers.push(this._showOnInitDisposer2);\r\n            }\r\n            else {\r\n                if (this._showOnInitDisposer2) {\r\n                    this.removeDispose(this._showOnInitDisposer2);\r\n                }\r\n            }\r\n        }\r\n        // important order here\r\n        _super.prototype.setShowOnInit.call(this, value);\r\n    };\r\n    Component.prototype.setBaseId = function (value) {\r\n        if (value != this._baseId) {\r\n            if (this.dataInvalid) {\r\n                this.dataInvalid = false;\r\n                registry.removeFromInvalidComponents(this);\r\n                this._baseId = value;\r\n                this.invalidateData();\r\n            }\r\n        }\r\n        _super.prototype.setBaseId.call(this, value);\r\n    };\r\n    Object.defineProperty(Component.prototype, \"minZoomCount\", {\r\n        /**\r\n         * @return Min zoom count\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minZoomCount\");\r\n        },\r\n        /**\r\n         * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n         *\r\n         * Allows restricting zoom in beyond certain number of categories or base\r\n         * intervals.\r\n         *\r\n         * @default 1\r\n         * @param value  Min zoom count\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minZoomCount\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"maxZoomCount\", {\r\n        /**\r\n         * @return Max zoom count\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxZoomCount\");\r\n        },\r\n        /**\r\n         * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n         *\r\n         * Limits how many categories or base intervals can be shown at the same\r\n         * time.\r\n         *\r\n         * If there are more items in the chart, the chart will auto-zoom.\r\n         *\r\n         * @default 0 (no limit)\r\n         * @since 4.6.2\r\n         * @param value  Max zoom count\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maxZoomCount\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Called during the System.update method\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype._systemCheckIfValidate = function () {\r\n        if (this.dataInvalid || (this.dataProvider && this.dataProvider.dataInvalid)) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Adds easing functions to \"function\" fields.\r\n     *\r\n     * @param field  Field name\r\n     * @return Assign as function?\r\n     */\r\n    Component.prototype.asFunction = function (field) {\r\n        return field == \"interpolationEasing\" || field == \"rangeChangeEasing\" || _super.prototype.asIs.call(this, field);\r\n    };\r\n    return Component;\r\n}(Container));\r\nexport { Component };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Component\"] = Component;\r\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,IAAT,EAAeC,YAAf,QAAmC,cAAnC;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,kBAAxC;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,gBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC7CrB,SAAS,CAACoB,SAAD,EAAYC,MAAZ,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,SAAT,GAAqB;IACjB,IAAIE,KAAK,GACT;IACAD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAFrB;IAGA;AACR;AACA;AACA;AACA;AACA;;;IACQD,KAAK,CAACE,UAAN,GAAmB,EAAnB;IACA;AACR;AACA;AACA;AACA;;IACQF,KAAK,CAACG,YAAN,GAAqB,EAArB;IACA;AACR;AACA;AACA;AACA;AACA;;IACQH,KAAK,CAACI,cAAN,GAAuB,CAAvB;IACA;AACR;AACA;AACA;AACA;;IACQJ,KAAK,CAACK,cAAN,GAAuB,EAAvB;IACA;AACR;AACA;AACA;AACA;;IACQL,KAAK,CAACM,iBAAN,GAA0B,EAA1B;IACA;AACR;AACA;AACA;AACA;;IACQN,KAAK,CAACO,MAAN,GAAe,CAAf;IACA;AACR;AACA;AACA;AACA;;IACQP,KAAK,CAACQ,IAAN,GAAa,CAAb;IACA;AACR;AACA;AACA;;IACQR,KAAK,CAACS,cAAN,GAAuB,KAAvB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQT,KAAK,CAACU,mBAAN,GAA4B,CAA5B;IACA;AACR;AACA;AACA;AACA;AACA;;IACQV,KAAK,CAACW,iBAAN,GAA0BlB,KAAK,CAACmB,QAAhC;IACA;AACR;AACA;AACA;AACA;AACA;AACA;;IACQZ,KAAK,CAACa,mBAAN,GAA4B,EAA5B;IACA;AACR;AACA;AACA;AACA;AACA;;IACQb,KAAK,CAACc,WAAN,GAAoB,KAApB;IACA;AACR;AACA;AACA;;IACQd,KAAK,CAACe,cAAN,GAAuB,KAAvB;IACA;AACR;AACA;AACA;AACA;AACA;;IACQf,KAAK,CAACgB,gBAAN,GAAyB,KAAzB;IACA;AACR;AACA;AACA;AACA;AACA;;IACQhB,KAAK,CAACiB,gBAAN,GAAyB,KAAzB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQjB,KAAK,CAACkB,qBAAN,GAA8B,CAA9B;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;IACQlB,KAAK,CAACmB,mBAAN,GAA4B1B,KAAK,CAACmB,QAAlC;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;IACQZ,KAAK,CAACoB,sBAAN,GAA+B,IAA/B;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQpB,KAAK,CAACqB,2BAAN,GAAoC,CAApC;IACA;AACR;AACA;AACA;AACA;;IACQrB,KAAK,CAACsB,sBAAN,GAA+B,CAA/B;IACAtB,KAAK,CAACuB,gBAAN,GAAyB,IAAzB;IACAvB,KAAK,CAACwB,SAAN,GAAkB,IAAlB;IACAxB,KAAK,CAACyB,SAAN,GAAkB,WAAlB;IACAz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"},"metadata":{},"sourceType":"module"}