{"ast":null,"code":"import { __extends, __generator } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\nimport * as $iter from \"./Iterator\";\nimport * as $type from \"./Type\";\n/**\r\n * Ordered list contains values of any type in an indexed array.\r\n */\n\nvar OrderedList =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param initial  Inital list of values to add to list\r\n   */\n  function OrderedList(initial) {\n    /**\r\n     * Holds list values.\r\n     */\n    this._values = [];\n    /**\r\n     * Event dispatcher.\r\n     */\n\n    this.events = new EventDispatcher();\n\n    if (initial != null) {\n      this.setAll(initial);\n    }\n  }\n\n  Object.defineProperty(OrderedList.prototype, \"values\", {\n    /**\r\n     * All items of the list.\r\n     *\r\n     * Do not modify the list directly. Rather use `insert()` and `remove()`\r\n     * methods.\r\n     *\r\n     * @return List values\r\n     */\n    get: function () {\n      return this._values;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Inserts a value into list item array.\r\n   *\r\n   * @param value  Value\r\n   */\n\n  OrderedList.prototype._insert = function (value) {\n    this._values.push(value);\n\n    return this._values.length - 1;\n  };\n\n  Object.defineProperty(OrderedList.prototype, \"length\", {\n    /**\r\n     * Number of items in the list.\r\n     *\r\n     * @readonly\r\n     * @return Length\r\n     */\n    get: function () {\n      return this._values.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns the index of the specific `value`.\r\n   *\r\n   * -1 if not found.\r\n   *\r\n   * @param value  Value\r\n   * @return Index\r\n   */\n\n  OrderedList.prototype.indexOf = function (value) {\n    return $array.indexOf(this._values, value);\n  };\n  /**\r\n   * Checks if list contains the `value`.\r\n   *\r\n   * @param value  Value\r\n   * @return In the list?\r\n   */\n\n\n  OrderedList.prototype.contains = function (value) {\n    return this.indexOf(value) !== -1;\n  };\n  /**\r\n   * Returns an item at specific `index`.\r\n   *\r\n   * @param index  Index\r\n   * @return Item\r\n   */\n\n\n  OrderedList.prototype.getIndex = function (index) {\n    return this._values[index];\n  };\n\n  Object.defineProperty(OrderedList.prototype, \"first\", {\n    /**\r\n     * First item in the list.\r\n     *\r\n     * @return Item\r\n     */\n    get: function () {\n      return this._values[0];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OrderedList.prototype, \"last\", {\n    /**\r\n     * Last item in the list.\r\n     *\r\n     * @return Item\r\n     */\n    get: function () {\n      return this._values[this._values.length - 1];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Inserts a value into list.\r\n   *\r\n   * @param value  Value\r\n   */\n\n  OrderedList.prototype.insert = function (value) {\n    var index = this._insert(value);\n\n    if (this.events.isEnabled(\"inserted\")) {\n      this.events.dispatchImmediately(\"inserted\", {\n        type: \"inserted\",\n        target: this,\n        index: index,\n        newValue: value\n      });\n    }\n  };\n  /**\r\n   * Removes an item with the `value` from the list.\r\n   *\r\n   * @param value  Value\r\n   */\n\n\n  OrderedList.prototype.remove = function (value) {\n    var index = this.indexOf(value);\n\n    if (index !== -1) {\n      var oldValue = this._values[index];\n      $array.removeIndex(this._values, index);\n\n      if (this.events.isEnabled(\"removed\")) {\n        this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: this,\n          index: index,\n          oldValue: oldValue\n        });\n      }\n    }\n  };\n  /**\r\n   * Sets multiple items to the list.\r\n   *\r\n   * All current items are removed.\r\n   *\r\n   * @param newArray  New items\r\n   */\n\n\n  OrderedList.prototype.setAll = function (newArray) {\n    var _this = this;\n\n    $array.eachReverse(this._values, function (x, i) {\n      _this._values.pop();\n\n      if (_this.events.isEnabled(\"removed\")) {\n        _this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: _this,\n          index: i,\n          oldValue: x\n        });\n      }\n    });\n    $array.each(newArray, function (value) {\n      _this.insert(value);\n    });\n  };\n  /**\r\n   * Removes all items from the list.\r\n   */\n\n\n  OrderedList.prototype.clear = function () {\n    this.setAll([]);\n  };\n  /**\r\n   * Returns part of the list between `start` and `end` indexes, as a new\r\n   * [[OrderedList]].\r\n   *\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return Items in range\r\n   */\n\n\n  OrderedList.prototype.slice = function (start, end) {\n    var out = new OrderedList();\n    out._values = this._values.slice(start, end);\n    return out;\n  };\n  /**\r\n   * Finds a closest available index to the `value` in specified direction.\r\n   *\r\n   * @ignore exclude from docs\r\n   * @param value      value to search for\r\n   * @param fn         A callback function that returns value of the item\r\n   * @param direction  Direciton\r\n   * @return Index\r\n   */\n\n\n  OrderedList.prototype.findClosestIndex = function (value, fn, direction) {\n    if (direction === void 0) {\n      direction = \"any\";\n    } // Init temporary values\n\n\n    var closestIndex = -1;\n    var closestValue;\n    var closestDifference;\n    var i = 0;\n    $iter.eachContinue(this.iterator(), function (element) {\n      var item = fn(element); // Calc difference\n\n      if (direction === \"any\") {\n        // Exact match?\n        if (item === value) {\n          // Found exact value - don't bother searching further\n          closestIndex = i;\n          return false;\n        }\n\n        var difference = Math.abs(value - item);\n\n        if (!$type.hasValue(closestDifference) || closestDifference > difference) {\n          closestIndex = i;\n          closestValue = item;\n          closestDifference = difference;\n        }\n      } else if (direction === \"left\" && item < value) {\n        if (!$type.hasValue(closestValue) || closestValue < item) {\n          closestIndex = i;\n          closestValue = item;\n        }\n      } else if (direction === \"right\" && item >= value) {\n        if (!$type.hasValue(closestValue) || closestValue >= item) {\n          closestIndex = i;\n          closestValue = item;\n        }\n      }\n\n      ++i;\n      return true;\n    }); // Found nothing?\n\n    if (closestIndex === -1) {\n      if (direction === \"left\") {\n        // Use First one\n        closestIndex = 0;\n      } else if (direction === \"right\") {\n        // Use last item\n        closestIndex = this.length - 1;\n      }\n    }\n\n    return closestIndex;\n  };\n  /**\r\n   * Returns a list iterator.\r\n   *\r\n   * @return Iterator\r\n   */\n\n\n  OrderedList.prototype.iterator = function () {\n    return $iter.fromArray(this._values);\n  };\n  /**\r\n   * Returns an ES6 iterator for the list.\r\n   */\n\n\n  OrderedList.prototype[Symbol.iterator] = function () {\n    var length, i;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          length = this._values.length;\n          i = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < length)) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , this._values[i]];\n\n        case 2:\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          ++i;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n  /**\r\n   * Calls `f` for each element in the list.\r\n   */\n\n\n  OrderedList.prototype.each = function (f) {\n    $array.each(this._values, f);\n  };\n\n  return OrderedList;\n}();\n\nexport { OrderedList };\n/**\r\n * A list where all items are ordered according to specific ordering function,\r\n * which is passed in via constructor parameter, when creating an instance of\r\n * [[SortedList]].\r\n */\n\nvar SortedList =\n/** @class */\nfunction (_super) {\n  __extends(SortedList, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param sort  Ordering function\r\n   */\n\n\n  function SortedList(sort) {\n    var _this = _super.call(this) || this;\n\n    _this._ordering = sort;\n    return _this;\n  }\n  /**\r\n   * Inserts item into the list.\r\n   *\r\n   * @param value  Item\r\n   */\n\n\n  SortedList.prototype._insert = function (value) {\n    var index = $array.getSortedIndex(this._values, this._ordering, value).index;\n    $array.insertIndex(this._values, index, value);\n    return index;\n  };\n  /**\r\n   * Returns index of the item in list if found.\r\n   *\r\n   * -1 if item is not in the list.\r\n   *\r\n   * @param value  Item to search for\r\n   * @return Index\r\n   */\n\n\n  SortedList.prototype.indexOf = function (value) {\n    var _a = $array.getSortedIndex(this._values, this._ordering, value),\n        found = _a.found,\n        index = _a.index;\n\n    if (found) {\n      return index;\n    } else {\n      return -1;\n    }\n  };\n  /**\r\n   * [udpate description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param value [description]\r\n   */\n\n\n  SortedList.prototype.update = function (value) {\n    // @todo test this\n    var index = $array.indexOf(this._values, value); // @todo throw an error if it doesn't exist ?\n\n    if (index !== -1) {\n      var last = this._values.length - 1; // Check if the current ordering is correct\n\n      if (!((index === 0 || this._ordering(this._values[index - 1], value) < 0) && (index === last || this._ordering(value, this._values[index + 1]) < 0))) {\n        // TODO send remove/insert/move events\n        $array.removeIndex(this._values, index);\n\n        this._insert(value);\n      }\n    }\n  };\n\n  return SortedList;\n}(OrderedList);\n\nexport { SortedList };\n/**\r\n * A version of a [[OrderedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\n\nvar OrderedListTemplate =\n/** @class */\nfunction (_super) {\n  __extends(OrderedListTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t Template object\r\n   */\n\n\n  function OrderedListTemplate(t) {\n    var _this = _super.call(this) || this;\n\n    _this.template = t;\n    return _this;\n  }\n\n  Object.defineProperty(OrderedListTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other list.\r\n   *\r\n   * @param source  Source list\r\n   */\n\n  OrderedListTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    $iter.each(source.iterator(), function (value) {\n      _this.insert(value.clone());\n    });\n  };\n  /**\r\n   * Returns part of the list, starting at `start` and ending at `end` indexes,\r\n   * as a new [[OrderedListTemplate]].\r\n   *\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return New list\r\n   */\n\n\n  OrderedListTemplate.prototype.slice = function (start, end) {\n    var out = new OrderedListTemplate(this.template);\n    out._values = this._values.slice(start, end);\n    return out;\n  };\n\n  OrderedListTemplate.prototype.create = function (make) {\n    var clone = make != null ? new make() : this.template.clone();\n    this.insert(clone);\n    return clone;\n  };\n\n  return OrderedListTemplate;\n}(OrderedList);\n\nexport { OrderedListTemplate };\n/**\r\n * A version of a [[SortedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\n\nvar SortedListTemplate =\n/** @class */\nfunction (_super) {\n  __extends(SortedListTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t     Template object\r\n   * @param sort  Ordering function\r\n   */\n\n\n  function SortedListTemplate(t, sort) {\n    var _this = _super.call(this, sort) || this;\n\n    _this.template = t;\n    return _this;\n  }\n\n  Object.defineProperty(SortedListTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other list.\r\n   *\r\n   * @param source  Source list\r\n   */\n\n  SortedListTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    $iter.each(source.iterator(), function (value) {\n      _this.insert(value.clone());\n    });\n  };\n\n  SortedListTemplate.prototype.create = function (make) {\n    var clone = make != null ? new make() : this.template.clone();\n    this.insert(clone);\n    return clone;\n  };\n\n  return SortedListTemplate;\n}(SortedList);\n\nexport { SortedListTemplate };","map":{"version":3,"names":["__extends","__generator","EventDispatcher","$array","$iter","$type","OrderedList","initial","_values","events","setAll","Object","defineProperty","prototype","get","enumerable","configurable","_insert","value","push","length","indexOf","contains","getIndex","index","insert","isEnabled","dispatchImmediately","type","target","newValue","remove","oldValue","removeIndex","newArray","_this","eachReverse","x","i","pop","each","clear","slice","start","end","out","findClosestIndex","fn","direction","closestIndex","closestValue","closestDifference","eachContinue","iterator","element","item","difference","Math","abs","hasValue","fromArray","Symbol","_a","label","sent","f","SortedList","_super","sort","call","_ordering","getSortedIndex","insertIndex","found","update","last","OrderedListTemplate","t","template","_template","set","v","isTemplate","copyFrom","source","clone","create","make","SortedListTemplate"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/SortedList.js"],"sourcesContent":["import { __extends, __generator } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { EventDispatcher } from \"./EventDispatcher\";\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * Ordered list contains values of any type in an indexed array.\r\n */\r\nvar OrderedList = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param initial  Inital list of values to add to list\r\n     */\r\n    function OrderedList(initial) {\r\n        /**\r\n         * Holds list values.\r\n         */\r\n        this._values = [];\r\n        /**\r\n         * Event dispatcher.\r\n         */\r\n        this.events = new EventDispatcher();\r\n        if (initial != null) {\r\n            this.setAll(initial);\r\n        }\r\n    }\r\n    Object.defineProperty(OrderedList.prototype, \"values\", {\r\n        /**\r\n         * All items of the list.\r\n         *\r\n         * Do not modify the list directly. Rather use `insert()` and `remove()`\r\n         * methods.\r\n         *\r\n         * @return List values\r\n         */\r\n        get: function () {\r\n            return this._values;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Inserts a value into list item array.\r\n     *\r\n     * @param value  Value\r\n     */\r\n    OrderedList.prototype._insert = function (value) {\r\n        this._values.push(value);\r\n        return this._values.length - 1;\r\n    };\r\n    Object.defineProperty(OrderedList.prototype, \"length\", {\r\n        /**\r\n         * Number of items in the list.\r\n         *\r\n         * @readonly\r\n         * @return Length\r\n         */\r\n        get: function () {\r\n            return this._values.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the index of the specific `value`.\r\n     *\r\n     * -1 if not found.\r\n     *\r\n     * @param value  Value\r\n     * @return Index\r\n     */\r\n    OrderedList.prototype.indexOf = function (value) {\r\n        return $array.indexOf(this._values, value);\r\n    };\r\n    /**\r\n     * Checks if list contains the `value`.\r\n     *\r\n     * @param value  Value\r\n     * @return In the list?\r\n     */\r\n    OrderedList.prototype.contains = function (value) {\r\n        return this.indexOf(value) !== -1;\r\n    };\r\n    /**\r\n     * Returns an item at specific `index`.\r\n     *\r\n     * @param index  Index\r\n     * @return Item\r\n     */\r\n    OrderedList.prototype.getIndex = function (index) {\r\n        return this._values[index];\r\n    };\r\n    Object.defineProperty(OrderedList.prototype, \"first\", {\r\n        /**\r\n         * First item in the list.\r\n         *\r\n         * @return Item\r\n         */\r\n        get: function () {\r\n            return this._values[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OrderedList.prototype, \"last\", {\r\n        /**\r\n         * Last item in the list.\r\n         *\r\n         * @return Item\r\n         */\r\n        get: function () {\r\n            return this._values[this._values.length - 1];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Inserts a value into list.\r\n     *\r\n     * @param value  Value\r\n     */\r\n    OrderedList.prototype.insert = function (value) {\r\n        var index = this._insert(value);\r\n        if (this.events.isEnabled(\"inserted\")) {\r\n            this.events.dispatchImmediately(\"inserted\", {\r\n                type: \"inserted\",\r\n                target: this,\r\n                index: index,\r\n                newValue: value\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Removes an item with the `value` from the list.\r\n     *\r\n     * @param value  Value\r\n     */\r\n    OrderedList.prototype.remove = function (value) {\r\n        var index = this.indexOf(value);\r\n        if (index !== -1) {\r\n            var oldValue = this._values[index];\r\n            $array.removeIndex(this._values, index);\r\n            if (this.events.isEnabled(\"removed\")) {\r\n                this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: this,\r\n                    index: index,\r\n                    oldValue: oldValue,\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets multiple items to the list.\r\n     *\r\n     * All current items are removed.\r\n     *\r\n     * @param newArray  New items\r\n     */\r\n    OrderedList.prototype.setAll = function (newArray) {\r\n        var _this = this;\r\n        $array.eachReverse(this._values, function (x, i) {\r\n            _this._values.pop();\r\n            if (_this.events.isEnabled(\"removed\")) {\r\n                _this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: _this,\r\n                    index: i,\r\n                    oldValue: x\r\n                });\r\n            }\r\n        });\r\n        $array.each(newArray, function (value) {\r\n            _this.insert(value);\r\n        });\r\n    };\r\n    /**\r\n     * Removes all items from the list.\r\n     */\r\n    OrderedList.prototype.clear = function () {\r\n        this.setAll([]);\r\n    };\r\n    /**\r\n     * Returns part of the list between `start` and `end` indexes, as a new\r\n     * [[OrderedList]].\r\n     *\r\n     * @param start  Start index\r\n     * @param end    End index\r\n     * @return Items in range\r\n     */\r\n    OrderedList.prototype.slice = function (start, end) {\r\n        var out = new OrderedList();\r\n        out._values = this._values.slice(start, end);\r\n        return out;\r\n    };\r\n    /**\r\n     * Finds a closest available index to the `value` in specified direction.\r\n     *\r\n     * @ignore exclude from docs\r\n     * @param value      value to search for\r\n     * @param fn         A callback function that returns value of the item\r\n     * @param direction  Direciton\r\n     * @return Index\r\n     */\r\n    OrderedList.prototype.findClosestIndex = function (value, fn, direction) {\r\n        if (direction === void 0) { direction = \"any\"; }\r\n        // Init temporary values\r\n        var closestIndex = -1;\r\n        var closestValue;\r\n        var closestDifference;\r\n        var i = 0;\r\n        $iter.eachContinue(this.iterator(), function (element) {\r\n            var item = fn(element);\r\n            // Calc difference\r\n            if (direction === \"any\") {\r\n                // Exact match?\r\n                if (item === value) {\r\n                    // Found exact value - don't bother searching further\r\n                    closestIndex = i;\r\n                    return false;\r\n                }\r\n                var difference = Math.abs(value - item);\r\n                if (!$type.hasValue(closestDifference) || (closestDifference > difference)) {\r\n                    closestIndex = i;\r\n                    closestValue = item;\r\n                    closestDifference = difference;\r\n                }\r\n            }\r\n            else if (direction === \"left\" && (item < value)) {\r\n                if (!$type.hasValue(closestValue) || (closestValue < item)) {\r\n                    closestIndex = i;\r\n                    closestValue = item;\r\n                }\r\n            }\r\n            else if (direction === \"right\" && (item >= value)) {\r\n                if (!$type.hasValue(closestValue) || (closestValue >= item)) {\r\n                    closestIndex = i;\r\n                    closestValue = item;\r\n                }\r\n            }\r\n            ++i;\r\n            return true;\r\n        });\r\n        // Found nothing?\r\n        if (closestIndex === -1) {\r\n            if (direction === \"left\") {\r\n                // Use First one\r\n                closestIndex = 0;\r\n            }\r\n            else if (direction === \"right\") {\r\n                // Use last item\r\n                closestIndex = this.length - 1;\r\n            }\r\n        }\r\n        return closestIndex;\r\n    };\r\n    /**\r\n     * Returns a list iterator.\r\n     *\r\n     * @return Iterator\r\n     */\r\n    OrderedList.prototype.iterator = function () {\r\n        return $iter.fromArray(this._values);\r\n    };\r\n    /**\r\n     * Returns an ES6 iterator for the list.\r\n     */\r\n    OrderedList.prototype[Symbol.iterator] = function () {\r\n        var length, i;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    length = this._values.length;\r\n                    i = 0;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    if (!(i < length)) return [3 /*break*/, 4];\r\n                    return [4 /*yield*/, this._values[i]];\r\n                case 2:\r\n                    _a.sent();\r\n                    _a.label = 3;\r\n                case 3:\r\n                    ++i;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Calls `f` for each element in the list.\r\n     */\r\n    OrderedList.prototype.each = function (f) {\r\n        $array.each(this._values, f);\r\n    };\r\n    return OrderedList;\r\n}());\r\nexport { OrderedList };\r\n/**\r\n * A list where all items are ordered according to specific ordering function,\r\n * which is passed in via constructor parameter, when creating an instance of\r\n * [[SortedList]].\r\n */\r\nvar SortedList = /** @class */ (function (_super) {\r\n    __extends(SortedList, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param sort  Ordering function\r\n     */\r\n    function SortedList(sort) {\r\n        var _this = _super.call(this) || this;\r\n        _this._ordering = sort;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Inserts item into the list.\r\n     *\r\n     * @param value  Item\r\n     */\r\n    SortedList.prototype._insert = function (value) {\r\n        var index = $array.getSortedIndex(this._values, this._ordering, value).index;\r\n        $array.insertIndex(this._values, index, value);\r\n        return index;\r\n    };\r\n    /**\r\n     * Returns index of the item in list if found.\r\n     *\r\n     * -1 if item is not in the list.\r\n     *\r\n     * @param value  Item to search for\r\n     * @return Index\r\n     */\r\n    SortedList.prototype.indexOf = function (value) {\r\n        var _a = $array.getSortedIndex(this._values, this._ordering, value), found = _a.found, index = _a.index;\r\n        if (found) {\r\n            return index;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    };\r\n    /**\r\n     * [udpate description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\r\n    SortedList.prototype.update = function (value) {\r\n        // @todo test this\r\n        var index = $array.indexOf(this._values, value);\r\n        // @todo throw an error if it doesn't exist ?\r\n        if (index !== -1) {\r\n            var last = this._values.length - 1;\r\n            // Check if the current ordering is correct\r\n            if (!((index === 0 || this._ordering(this._values[index - 1], value) < 0) &&\r\n                (index === last || this._ordering(value, this._values[index + 1]) < 0))) {\r\n                // TODO send remove/insert/move events\r\n                $array.removeIndex(this._values, index);\r\n                this._insert(value);\r\n            }\r\n        }\r\n    };\r\n    return SortedList;\r\n}(OrderedList));\r\nexport { SortedList };\r\n/**\r\n * A version of a [[OrderedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nvar OrderedListTemplate = /** @class */ (function (_super) {\r\n    __extends(OrderedListTemplate, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param t Template object\r\n     */\r\n    function OrderedListTemplate(t) {\r\n        var _this = _super.call(this) || this;\r\n        _this.template = t;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(OrderedListTemplate.prototype, \"template\", {\r\n        /**\r\n         * @return Template object\r\n         */\r\n        get: function () {\r\n            return this._template;\r\n        },\r\n        /**\r\n         * A \"template\" object to copy all properties from when creating new list\r\n         * items.\r\n         *\r\n         * @param v  Template object\r\n         */\r\n        set: function (v) {\r\n            v.isTemplate = true;\r\n            this._template = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all elements from other list.\r\n     *\r\n     * @param source  Source list\r\n     */\r\n    OrderedListTemplate.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (value) {\r\n            _this.insert(value.clone());\r\n        });\r\n    };\r\n    /**\r\n     * Returns part of the list, starting at `start` and ending at `end` indexes,\r\n     * as a new [[OrderedListTemplate]].\r\n     *\r\n     * @param start  Start index\r\n     * @param end    End index\r\n     * @return New list\r\n     */\r\n    OrderedListTemplate.prototype.slice = function (start, end) {\r\n        var out = new OrderedListTemplate(this.template);\r\n        out._values = this._values.slice(start, end);\r\n        return out;\r\n    };\r\n    OrderedListTemplate.prototype.create = function (make) {\r\n        var clone = (make != null\r\n            ? new make()\r\n            : this.template.clone());\r\n        this.insert(clone);\r\n        return clone;\r\n    };\r\n    return OrderedListTemplate;\r\n}(OrderedList));\r\nexport { OrderedListTemplate };\r\n/**\r\n * A version of a [[SortedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nvar SortedListTemplate = /** @class */ (function (_super) {\r\n    __extends(SortedListTemplate, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param t     Template object\r\n     * @param sort  Ordering function\r\n     */\r\n    function SortedListTemplate(t, sort) {\r\n        var _this = _super.call(this, sort) || this;\r\n        _this.template = t;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(SortedListTemplate.prototype, \"template\", {\r\n        /**\r\n         * @return Template object\r\n         */\r\n        get: function () {\r\n            return this._template;\r\n        },\r\n        /**\r\n         * A \"template\" object to copy all properties from when creating new list\r\n         * items.\r\n         *\r\n         * @param v  Template object\r\n         */\r\n        set: function (v) {\r\n            v.isTemplate = true;\r\n            this._template = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all elements from other list.\r\n     *\r\n     * @param source  Source list\r\n     */\r\n    SortedListTemplate.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (value) {\r\n            _this.insert(value.clone());\r\n        });\r\n    };\r\n    SortedListTemplate.prototype.create = function (make) {\r\n        var clone = (make != null\r\n            ? new make()\r\n            : this.template.clone());\r\n        this.insert(clone);\r\n        return clone;\r\n    };\r\n    return SortedListTemplate;\r\n}(SortedList));\r\nexport { SortedListTemplate };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}