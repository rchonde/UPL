{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { WavedLine } from \"../../core/elements/WavedLine\";\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\nimport { registry } from \"../../core/Registry\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\nimport { AxisBullet } from \"./AxisBullet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A renderer for vertical axis.\r\n *\r\n * @see {@link IAxisRendererYEvents} for a list of available events\r\n * @see {@link IAxisRendererYAdapters} for a list of available Adapters\r\n */\n\nvar AxisRendererY =\n/** @class */\nfunction (_super) {\n  __extends(AxisRendererY, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRendererY() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"AxisRendererY\";\n    _this.minGridDistance = 40;\n    _this.opposite = false;\n    _this.height = percent(100);\n    _this.labels.template.verticalCenter = \"middle\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n  * @ignore\r\n  */\n\n\n  AxisRendererY.prototype.setAxis = function (axis) {\n    _super.prototype.setAxis.call(this, axis);\n\n    axis.layout = \"horizontal\";\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  AxisRendererY.prototype.updateGridContainer = function () {\n    var axis = this.axis;\n\n    if (axis) {\n      var gridContainer = this.gridContainer;\n      gridContainer.y = axis.pixelY;\n      gridContainer.height = axis.axisLength;\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  AxisRendererY.prototype.toAxisPosition = function (value) {\n    var axis = this.axis;\n\n    if (axis) {\n      var inversedPosition = 1 - value;\n      var relativePositionSprite = axis.relativePositionSprite;\n      var y = axis.pixelY;\n\n      if (relativePositionSprite) {\n        y = $utils.spritePointToSprite({\n          x: 0,\n          y: this.pixelY\n        }, this.parent, relativePositionSprite).y;\n      } else {\n        relativePositionSprite = axis.parent;\n      }\n\n      if (relativePositionSprite) {\n        var relativeY = y / relativePositionSprite.innerHeight;\n        var relativeHeight = axis.axisLength / relativePositionSprite.innerHeight;\n        return 1 - (inversedPosition - relativeY) / relativeHeight;\n      }\n    }\n\n    return value;\n  };\n  /**\r\n   * Called when rendered is attached to an Axis, as well as a property of\r\n   * Axis that might affect the appearance is updated.\r\n   *\r\n   * E.g. `axis.opposite`, `axis.inside`, etc.\r\n   *\r\n   * This method is called **before** draw, so that any related setting\r\n   * changed in this method can be changed.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererY.prototype.processRenderer = function () {\n    _super.prototype.processRenderer.call(this);\n\n    var axis = this.axis;\n\n    if (axis) {\n      var title = axis.title;\n      title.valign = \"middle\";\n\n      if (!(axis.height instanceof Percent)) {\n        axis.height = percent(100);\n      }\n\n      if (this.opposite) {\n        title.rotation = 90;\n        this.line.toBack();\n        title.toFront();\n      } else {\n        title.rotation = -90;\n        title.toBack();\n        this.line.toFront();\n      }\n    }\n  };\n  /**\r\n   * Updates some of the Axis tooltip's visual properties, related to\r\n   * rendering of the Axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererY.prototype.updateTooltip = function () {\n    var axis = this.axis;\n\n    if (axis) {\n      var bigNum = 2000;\n      var bbx = 0;\n      var bby = 0;\n      var bbw = bigNum;\n      var bbh = this.axisLength; // right\n\n      if (this.opposite) {\n        if (this.inside) {\n          bbx = -bigNum;\n          bbw = bigNum;\n        }\n      } // left\n      else {\n        if (!this.inside) {\n          bbx = -bigNum;\n          bbw = bigNum;\n        }\n      }\n\n      this.axis.updateTooltip(\"horizontal\", {\n        x: bbx,\n        y: bby,\n        width: bbw,\n        height: bbh\n      });\n    }\n  };\n\n  Object.defineProperty(AxisRendererY.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      var axis = this.axis;\n      return axis.measuredHeight - axis.pixelPaddingTop - axis.pixelPaddingBottom || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n\n  AxisRendererY.prototype.positionToPoint = function (position, position2) {\n    return {\n      x: 0,\n      y: this.positionToCoordinate(position)\n    };\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRendererY.prototype.pointToPosition = function (point) {\n    return this.coordinateToPosition(point.y, point.x);\n  };\n  /**\r\n   * Converts a coordinate in pixels to a relative position. (0-1)\r\n   *\r\n   * @param coordinate  Coordinate (px)\r\n   * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRendererY.prototype.coordinateToPosition = function (coordinate, coordinate2) {\n    var position;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n\n    if (axis.renderer.inversed) {\n      position = 1 - axis.start - coordinate / axisFullLength;\n    } else {\n      position = coordinate / axisFullLength + (1 - axis.end);\n    }\n\n    return $math.round(position, 5);\n  };\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n\n\n  AxisRendererY.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    var y1 = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\n    var y2 = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\n    var h = Math.abs(y2 - y1);\n    var w = this.getWidth();\n    var y = Math.min(y1, y2);\n    var x = 0;\n    return $path.rectToPath({\n      x: x,\n      y: y,\n      width: w,\n      height: h\n    }, true);\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererY.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position); //\tpoint.y = $utils.spritePointToSprite({ x: 0, y: point.y }, this, this.gridContainer).y;\n\n    grid.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: this.getWidth(),\n      y: 0\n    });\n    this.positionItem(grid, point);\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererY.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n    var tickLength = tick.length;\n\n    try {\n      $utils.used(this.axis.title.measuredWidth);\n    } catch (_a) {// void\n    }\n\n    point.x = $utils.spritePointToSprite({\n      x: this.line.pixelX,\n      y: 0\n    }, this.line.parent, this.gridContainer).x;\n\n    if (!this.opposite) {\n      tickLength *= tick.inside ? 1 : -1;\n    } else {\n      tickLength *= tick.inside ? -1 : 1;\n    }\n\n    tick.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: tickLength,\n      y: 0\n    });\n    this.positionItem(tick, point);\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererY.prototype.updateAxisLine = function () {\n    this.line.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: this.axisLength\n    });\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererY.prototype.updateBaseGridElement = function () {\n    _super.prototype.updateBaseGridElement.call(this);\n\n    var axis = this.axis;\n    var w = this.getWidth();\n    var h = this.axisLength;\n    var y = axis.basePoint.y;\n    var baseGrid = this.baseGrid;\n\n    if (y < -0.2 || y > h + 0.2) {\n      baseGrid.hide(0);\n    } else {\n      var x = $utils.spritePointToSprite({\n        x: 0,\n        y: 0\n      }, this.gridContainer, baseGrid.parent).x;\n      baseGrid.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: w,\n        y: 0\n      });\n      baseGrid.moveTo({\n        x: x,\n        y: y\n      });\n      baseGrid.show(0);\n    }\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n\n\n  AxisRendererY.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    label.isMeasured = !label.inside;\n    var point = this.positionToPoint(position);\n    var horizontalCenter;\n    var deltaX = 0;\n    var maxWidth = this.gridContainer.maxWidth;\n\n    if (this.opposite) {\n      if (label.inside) {\n        horizontalCenter = \"right\";\n\n        if (label.align == \"left\") {\n          deltaX = -maxWidth;\n          horizontalCenter = \"left\";\n        }\n\n        if (label.align == \"center\") {\n          deltaX = -maxWidth / 2;\n          horizontalCenter = \"middle\";\n        }\n      } else {\n        horizontalCenter = \"left\";\n      }\n\n      point.x = 0 + deltaX;\n    } else {\n      if (label.inside) {\n        horizontalCenter = \"left\";\n\n        if (label.align == \"right\") {\n          deltaX = maxWidth;\n          horizontalCenter = \"right\";\n        }\n\n        if (label.align == \"center\") {\n          deltaX = maxWidth / 2;\n          horizontalCenter = \"middle\";\n        }\n      } else {\n        horizontalCenter = \"right\";\n      }\n\n      point.x = this.measuredWidth + deltaX;\n    }\n\n    if (label.rotation == 0) {\n      // Apply fuzzy logic to verticalCenter only if labels are not rotated\n      label.horizontalCenter = horizontalCenter;\n    }\n\n    this.positionItem(label, point);\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n  /**\r\n   * Updates and positions an axis break element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Break element\r\n   */\n\n\n  AxisRendererY.prototype.updateBreakElement = function (axisBreak) {\n    _super.prototype.updateBreakElement.call(this, axisBreak);\n\n    var startLine = axisBreak.startLine;\n    var endLine = axisBreak.endLine;\n    var fillShape = axisBreak.fillShape;\n    var startPoint = axisBreak.startPoint;\n    var endPoint = axisBreak.endPoint;\n    var x1 = axisBreak.pixelMarginLeft;\n    var x2 = this.getWidth() - axisBreak.pixelMarginLeft - axisBreak.pixelMarginRight;\n    startPoint.y = $math.fitToRange(startPoint.y, -1, this.axisLength + 1);\n    endPoint.y = $math.fitToRange(endPoint.y, -1, this.axisLength + 1);\n\n    if (startPoint.y == endPoint.y && (startPoint.y < 0 || startPoint.y > this.axisLength)) {\n      axisBreak.fillShape.__disabled = true;\n    } else {\n      axisBreak.fillShape.__disabled = false;\n    }\n\n    var w = Math.abs(x2 - x1);\n    startLine.x = x1;\n    startLine.height = 0;\n    startLine.width = w;\n    endLine.x = x1;\n    endLine.height = 0;\n    endLine.width = w;\n    fillShape.width = w;\n    fillShape.height = Math.abs(endPoint.y - startPoint.y);\n    fillShape.x = x1;\n    fillShape.y = endPoint.y;\n  };\n  /**\r\n   * Creates visual elements for and axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Axis break\r\n   */\n\n\n  AxisRendererY.prototype.createBreakSprites = function (axisBreak) {\n    axisBreak.startLine = new WavedLine();\n    axisBreak.endLine = new WavedLine();\n    var wavedRectangle = new WavedRectangle();\n    wavedRectangle.setWavedSides(true, false, true, false);\n    axisBreak.fillShape = wavedRectangle;\n  };\n  /**\r\n   * Converts a position on the axis to a coordinate in pixels.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (0-1)\r\n   * @return Coordinate (px)\r\n   */\n\n\n  AxisRendererY.prototype.positionToCoordinate = function (position) {\n    var coordinate;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n\n    if (!axis.renderer.inversed) {\n      coordinate = (axis.end - position) * axisFullLength;\n    } else {\n      coordinate = (position - axis.start) * axisFullLength;\n    }\n\n    return coordinate;\n  };\n  /**\r\n   * Updates and positions axis bullets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererY.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    point.x = $utils.spritePointToSprite({\n      x: this.line.pixelX,\n      y: 0\n    }, this.line.parent, this.gridContainer).x;\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n\n  return AxisRendererY;\n}(AxisRenderer);\n\nexport { AxisRendererY };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisRendererY\"] = AxisRendererY;\n/**\r\n * Add default responsive rules\r\n */\n\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.widthS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererY) {\n      var state = target.states.create(stateId);\n      state.properties.inside = true;\n      state.properties.maxLabelPosition = 0.9;\n      state.properties.minLabelPosition = 0.1;\n      return state;\n    }\n\n    return null;\n  }\n});\n/**\r\n * Disable labels altogather on very small charts\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.widthXS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererY) {\n      var state = target.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});","map":{"version":3,"names":["__extends","AxisRenderer","WavedLine","WavedRectangle","registry","percent","Percent","$math","$path","$utils","$type","defaultRules","ResponsiveBreakpoints","AxisBullet","AxisRendererY","_super","_this","call","className","minGridDistance","opposite","height","labels","template","verticalCenter","applyTheme","prototype","setAxis","axis","layout","updateGridContainer","gridContainer","y","pixelY","axisLength","toAxisPosition","value","inversedPosition","relativePositionSprite","spritePointToSprite","x","parent","relativeY","innerHeight","relativeHeight","processRenderer","title","valign","rotation","line","toBack","toFront","updateTooltip","bigNum","bbx","bby","bbw","bbh","inside","width","Object","defineProperty","get","measuredHeight","pixelPaddingTop","pixelPaddingBottom","enumerable","configurable","positionToPoint","position","position2","positionToCoordinate","pointToPosition","point","coordinateToPosition","coordinate","coordinate2","axisFullLength","renderer","inversed","start","end","round","getPositionRangePath","startPosition","endPosition","y1","fitToRange","y2","h","Math","abs","w","getWidth","min","rectToPath","updateGridElement","grid","location","path","moveTo","lineTo","positionItem","toggleVisibility","updateTickElement","tick","tickLength","length","used","measuredWidth","_a","pixelX","updateAxisLine","updateBaseGridElement","basePoint","baseGrid","hide","show","updateLabelElement","label","hasValue","isMeasured","horizontalCenter","deltaX","maxWidth","align","minLabelPosition","maxLabelPosition","updateBreakElement","axisBreak","startLine","endLine","fillShape","startPoint","endPoint","x1","pixelMarginLeft","x2","pixelMarginRight","__disabled","createBreakSprites","wavedRectangle","setWavedSides","updateBullet","bullet","registeredClasses","push","relevant","widthS","state","target","stateId","states","create","properties","widthXS","disabled"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererY.js"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A renderer for vertical axis.\r\n *\r\n * @see {@link IAxisRendererYEvents} for a list of available events\r\n * @see {@link IAxisRendererYAdapters} for a list of available Adapters\r\n */\r\nvar AxisRendererY = /** @class */ (function (_super) {\r\n    __extends(AxisRendererY, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param axis Related axis\r\n     */\r\n    function AxisRendererY() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"AxisRendererY\";\r\n        _this.minGridDistance = 40;\r\n        _this.opposite = false;\r\n        _this.height = percent(100);\r\n        _this.labels.template.verticalCenter = \"middle\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n    * @ignore\r\n    */\r\n    AxisRendererY.prototype.setAxis = function (axis) {\r\n        _super.prototype.setAxis.call(this, axis);\r\n        axis.layout = \"horizontal\";\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    AxisRendererY.prototype.updateGridContainer = function () {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var gridContainer = this.gridContainer;\r\n            gridContainer.y = axis.pixelY;\r\n            gridContainer.height = axis.axisLength;\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    AxisRendererY.prototype.toAxisPosition = function (value) {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var inversedPosition = 1 - value;\r\n            var relativePositionSprite = axis.relativePositionSprite;\r\n            var y = axis.pixelY;\r\n            if (relativePositionSprite) {\r\n                y = $utils.spritePointToSprite({ x: 0, y: this.pixelY }, this.parent, relativePositionSprite).y;\r\n            }\r\n            else {\r\n                relativePositionSprite = axis.parent;\r\n            }\r\n            if (relativePositionSprite) {\r\n                var relativeY = y / relativePositionSprite.innerHeight;\r\n                var relativeHeight = axis.axisLength / relativePositionSprite.innerHeight;\r\n                return 1 - (inversedPosition - relativeY) / relativeHeight;\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Called when rendered is attached to an Axis, as well as a property of\r\n     * Axis that might affect the appearance is updated.\r\n     *\r\n     * E.g. `axis.opposite`, `axis.inside`, etc.\r\n     *\r\n     * This method is called **before** draw, so that any related setting\r\n     * changed in this method can be changed.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererY.prototype.processRenderer = function () {\r\n        _super.prototype.processRenderer.call(this);\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var title = axis.title;\r\n            title.valign = \"middle\";\r\n            if (!(axis.height instanceof Percent)) {\r\n                axis.height = percent(100);\r\n            }\r\n            if (this.opposite) {\r\n                title.rotation = 90;\r\n                this.line.toBack();\r\n                title.toFront();\r\n            }\r\n            else {\r\n                title.rotation = -90;\r\n                title.toBack();\r\n                this.line.toFront();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates some of the Axis tooltip's visual properties, related to\r\n     * rendering of the Axis.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererY.prototype.updateTooltip = function () {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var bigNum = 2000;\r\n            var bbx = 0;\r\n            var bby = 0;\r\n            var bbw = bigNum;\r\n            var bbh = this.axisLength;\r\n            // right\r\n            if (this.opposite) {\r\n                if (this.inside) {\r\n                    bbx = -bigNum;\r\n                    bbw = bigNum;\r\n                }\r\n            }\r\n            // left\r\n            else {\r\n                if (!this.inside) {\r\n                    bbx = -bigNum;\r\n                    bbw = bigNum;\r\n                }\r\n            }\r\n            this.axis.updateTooltip(\"horizontal\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n        }\r\n    };\r\n    Object.defineProperty(AxisRendererY.prototype, \"axisLength\", {\r\n        /**\r\n         * Returns actual length of the Axis, in pixels.\r\n         *\r\n         * @return Length (px)\r\n         */\r\n        get: function () {\r\n            var axis = this.axis;\r\n            return (axis.measuredHeight - axis.pixelPaddingTop - axis.pixelPaddingBottom) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position on axis to point coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @param position2  Position (0-1) Position on the second axis\r\n     * @return Point\r\n     */\r\n    AxisRendererY.prototype.positionToPoint = function (position, position2) {\r\n        return { x: 0, y: this.positionToCoordinate(position) };\r\n    };\r\n    /**\r\n     * Converts a point at specific coordinates to a relative position (0-1)\r\n     * on the axis.\r\n     *\r\n     * @param point  Point\r\n     * @return Position (0-1)\r\n     */\r\n    AxisRendererY.prototype.pointToPosition = function (point) {\r\n        return this.coordinateToPosition(point.y, point.x);\r\n    };\r\n    /**\r\n     * Converts a coordinate in pixels to a relative position. (0-1)\r\n     *\r\n     * @param coordinate  Coordinate (px)\r\n     * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n     * @return Position (0-1)\r\n     */\r\n    AxisRendererY.prototype.coordinateToPosition = function (coordinate, coordinate2) {\r\n        var position;\r\n        var axis = this.axis;\r\n        var axisFullLength = axis.axisFullLength;\r\n        if (axis.renderer.inversed) {\r\n            position = (1 - axis.start) - coordinate / axisFullLength;\r\n        }\r\n        else {\r\n            position = coordinate / axisFullLength + (1 - axis.end);\r\n        }\r\n        return $math.round(position, 5);\r\n    };\r\n    /**\r\n     * [getPositionRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param startPosition  Starting position\r\n     * @param endPosition    End position\r\n     * @return SVG path\r\n     */\r\n    AxisRendererY.prototype.getPositionRangePath = function (startPosition, endPosition) {\r\n        var y1 = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n        var y2 = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n        var h = Math.abs(y2 - y1);\r\n        var w = this.getWidth();\r\n        var y = Math.min(y1, y2);\r\n        var x = 0;\r\n        return $path.rectToPath({\r\n            x: x,\r\n            y: y,\r\n            width: w,\r\n            height: h\r\n        }, true);\r\n    };\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param grid         Grid element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererY.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        //\tpoint.y = $utils.spritePointToSprite({ x: 0, y: point.y }, this, this.gridContainer).y;\r\n        grid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.getWidth(), y: 0 });\r\n        this.positionItem(grid, point);\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param tick         Tick element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererY.prototype.updateTickElement = function (tick, position, endPosition) {\r\n        position = position + (endPosition - position) * tick.location;\r\n        var point = this.positionToPoint(position);\r\n        var tickLength = tick.length;\r\n        try {\r\n            $utils.used(this.axis.title.measuredWidth);\r\n        }\r\n        catch (_a) {\r\n            // void\r\n        }\r\n        point.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n        if (!this.opposite) {\r\n            tickLength *= (tick.inside ? 1 : -1);\r\n        }\r\n        else {\r\n            tickLength *= (tick.inside ? -1 : 1);\r\n        }\r\n        tick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength, y: 0 });\r\n        this.positionItem(tick, point);\r\n        this.toggleVisibility(tick, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions the axis line element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererY.prototype.updateAxisLine = function () {\r\n        this.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.axisLength });\r\n    };\r\n    /**\r\n     * Updates and positions the base grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererY.prototype.updateBaseGridElement = function () {\r\n        _super.prototype.updateBaseGridElement.call(this);\r\n        var axis = this.axis;\r\n        var w = this.getWidth();\r\n        var h = this.axisLength;\r\n        var y = axis.basePoint.y;\r\n        var baseGrid = this.baseGrid;\r\n        if (y < -0.2 || y > h + 0.2) {\r\n            baseGrid.hide(0);\r\n        }\r\n        else {\r\n            var x = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).x;\r\n            baseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n            baseGrid.moveTo({ x: x, y: y });\r\n            baseGrid.show(0);\r\n        }\r\n    };\r\n    /**\r\n     * Updates and positions a label element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param label        Label element\r\n     * @param position     Starting position\r\n     * @param endPosition  Ending position\r\n     */\r\n    AxisRendererY.prototype.updateLabelElement = function (label, position, endPosition, location) {\r\n        if (!$type.hasValue(location)) {\r\n            location = label.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        label.isMeasured = !label.inside;\r\n        var point = this.positionToPoint(position);\r\n        var horizontalCenter;\r\n        var deltaX = 0;\r\n        var maxWidth = this.gridContainer.maxWidth;\r\n        if (this.opposite) {\r\n            if (label.inside) {\r\n                horizontalCenter = \"right\";\r\n                if (label.align == \"left\") {\r\n                    deltaX = -maxWidth;\r\n                    horizontalCenter = \"left\";\r\n                }\r\n                if (label.align == \"center\") {\r\n                    deltaX = -maxWidth / 2;\r\n                    horizontalCenter = \"middle\";\r\n                }\r\n            }\r\n            else {\r\n                horizontalCenter = \"left\";\r\n            }\r\n            point.x = 0 + deltaX;\r\n        }\r\n        else {\r\n            if (label.inside) {\r\n                horizontalCenter = \"left\";\r\n                if (label.align == \"right\") {\r\n                    deltaX = maxWidth;\r\n                    horizontalCenter = \"right\";\r\n                }\r\n                if (label.align == \"center\") {\r\n                    deltaX = maxWidth / 2;\r\n                    horizontalCenter = \"middle\";\r\n                }\r\n            }\r\n            else {\r\n                horizontalCenter = \"right\";\r\n            }\r\n            point.x = this.measuredWidth + deltaX;\r\n        }\r\n        if (label.rotation == 0) {\r\n            // Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n            label.horizontalCenter = horizontalCenter;\r\n        }\r\n        this.positionItem(label, point);\r\n        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n    };\r\n    /**\r\n     * Updates and positions an axis break element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axisBreak Break element\r\n     */\r\n    AxisRendererY.prototype.updateBreakElement = function (axisBreak) {\r\n        _super.prototype.updateBreakElement.call(this, axisBreak);\r\n        var startLine = axisBreak.startLine;\r\n        var endLine = axisBreak.endLine;\r\n        var fillShape = axisBreak.fillShape;\r\n        var startPoint = axisBreak.startPoint;\r\n        var endPoint = axisBreak.endPoint;\r\n        var x1 = axisBreak.pixelMarginLeft;\r\n        var x2 = this.getWidth() - axisBreak.pixelMarginLeft - axisBreak.pixelMarginRight;\r\n        startPoint.y = $math.fitToRange(startPoint.y, -1, this.axisLength + 1);\r\n        endPoint.y = $math.fitToRange(endPoint.y, -1, this.axisLength + 1);\r\n        if (startPoint.y == endPoint.y && (startPoint.y < 0 || startPoint.y > this.axisLength)) {\r\n            axisBreak.fillShape.__disabled = true;\r\n        }\r\n        else {\r\n            axisBreak.fillShape.__disabled = false;\r\n        }\r\n        var w = Math.abs(x2 - x1);\r\n        startLine.x = x1;\r\n        startLine.height = 0;\r\n        startLine.width = w;\r\n        endLine.x = x1;\r\n        endLine.height = 0;\r\n        endLine.width = w;\r\n        fillShape.width = w;\r\n        fillShape.height = Math.abs(endPoint.y - startPoint.y);\r\n        fillShape.x = x1;\r\n        fillShape.y = endPoint.y;\r\n    };\r\n    /**\r\n     * Creates visual elements for and axis break.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axisBreak Axis break\r\n     */\r\n    AxisRendererY.prototype.createBreakSprites = function (axisBreak) {\r\n        axisBreak.startLine = new WavedLine();\r\n        axisBreak.endLine = new WavedLine();\r\n        var wavedRectangle = new WavedRectangle();\r\n        wavedRectangle.setWavedSides(true, false, true, false);\r\n        axisBreak.fillShape = wavedRectangle;\r\n    };\r\n    /**\r\n     * Converts a position on the axis to a coordinate in pixels.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param position  Position (0-1)\r\n     * @return Coordinate (px)\r\n     */\r\n    AxisRendererY.prototype.positionToCoordinate = function (position) {\r\n        var coordinate;\r\n        var axis = this.axis;\r\n        var axisFullLength = axis.axisFullLength;\r\n        if (!axis.renderer.inversed) {\r\n            coordinate = (axis.end - position) * axisFullLength;\r\n        }\r\n        else {\r\n            coordinate = (position - axis.start) * axisFullLength;\r\n        }\r\n        return coordinate;\r\n    };\r\n    /**\r\n     * Updates and positions axis bullets.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param bullet       AxisBullet element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererY.prototype.updateBullet = function (bullet, position, endPosition) {\r\n        var location = 0.5;\r\n        if (bullet instanceof AxisBullet) {\r\n            location = bullet.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        var point = this.positionToPoint(position);\r\n        point.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n        this.positionItem(bullet, point);\r\n        this.toggleVisibility(bullet, position, 0, 1);\r\n    };\r\n    return AxisRendererY;\r\n}(AxisRenderer));\r\nexport { AxisRendererY };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererY\"] = AxisRendererY;\r\n/**\r\n * Add default responsive rules\r\n */\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.widthS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof AxisRendererY) {\r\n            var state = target.states.create(stateId);\r\n            state.properties.inside = true;\r\n            state.properties.maxLabelPosition = 0.9;\r\n            state.properties.minLabelPosition = 0.1;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.widthXS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof AxisRendererY) {\r\n            var state = target.states.create(stateId);\r\n            state.properties.disabled = true;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}