{"ast":null,"code":"/**\r\n * Defines Pyramid Series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo: sequenced?\n\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar PyramidSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(PyramidSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PyramidSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PyramidSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return PyramidSeriesDataItem;\n}(FunnelSeriesDataItem);\n\nexport { PyramidSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\n\nvar PyramidSeries =\n/** @class */\nfunction (_super) {\n  __extends(PyramidSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PyramidSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PyramidSeries\";\n    _this.topWidth = percent(0);\n    _this.bottomWidth = percent(100);\n    _this.pyramidHeight = percent(100);\n    _this.valueIs = \"area\";\n    _this.sliceLinks.template.width = 0;\n    _this.sliceLinks.template.height = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  PyramidSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Pyramid Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  PyramidSeries.prototype.createDataItem = function () {\n    return new PyramidSeriesDataItem();\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PyramidSeries.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    this._nextWidth = undefined;\n  };\n  /**\r\n   * [getNextValue description]\r\n   *\r\n   * @todo Description\r\n   * @param dataItem [description]\r\n   * @return [description]\r\n   */\n\n\n  PyramidSeries.prototype.getNextValue = function (dataItem) {\n    var index = dataItem.index;\n    var nextValue = dataItem.getWorkingValue(\"value\");\n\n    if (index < this.dataItems.length - 1) {\n      var nextItem = this.dataItems.getIndex(index + 1);\n      nextValue = nextItem.getWorkingValue(\"value\");\n    }\n\n    if (nextValue == 0) {\n      nextValue = 0.000001;\n    }\n\n    return nextValue;\n  };\n  /**\r\n   * [validateDataElements description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PyramidSeries.prototype.validateDataElements = function () {\n    var _this = this;\n\n    var maxWidth = this.slicesContainer.innerWidth;\n    var maxHeight = this.slicesContainer.innerHeight;\n    this.dataItems.each(function (dataItem) {\n      if (dataItem.value > 0) {\n        var relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\n        var sliceLink = dataItem.sliceLink;\n\n        if (_this.orientation == \"vertical\") {\n          maxHeight -= sliceLink.pixelHeight * relValue;\n        } else {\n          maxWidth -= sliceLink.pixelWidth * relValue;\n        }\n      }\n    });\n    this._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\n    this._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\n\n    if (this.orientation == \"vertical\") {\n      var y = (maxHeight - this._pyramidHeight) / 2;\n      this.slicesContainer.y = y;\n      this.labelsContainer.y = y;\n      this.ticksContainer.y = y;\n    } else {\n      var x = (maxWidth - this._pyramidWidth) / 2;\n      this.slicesContainer.x = x;\n      this.labelsContainer.x = x;\n      this.ticksContainer.x = x;\n    }\n\n    _super.prototype.validateDataElements.call(this);\n  };\n  /**\r\n   * [decorateSlice description]\r\n   *\r\n   * @todo Description\r\n   * @param dataItem [description]\r\n   */\n\n\n  PyramidSeries.prototype.decorateSlice = function (dataItem) {\n    var sum = this.dataItem.values.value.absoluteSum;\n\n    if (sum == 0) {\n      return;\n    }\n\n    var slice = dataItem.slice;\n    var sliceLink = dataItem.sliceLink;\n    var label = dataItem.label;\n    var tick = dataItem.tick; // TODO can this be removed ?\n\n    this.getNextValue(dataItem);\n    var workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\n    var pyramidWidth = this._pyramidWidth;\n    var pyramidHeight = this._pyramidHeight;\n    var maxWidth = this.slicesContainer.innerWidth;\n    var maxHeight = this.slicesContainer.innerHeight;\n    var linkWidth = sliceLink.pixelWidth;\n    var linkHeight = sliceLink.pixelHeight;\n\n    if ((dataItem.value == 0 || dataItem.value == null) && this.ignoreZeroValues) {\n      dataItem.__disabled = true;\n    } else {\n      dataItem.__disabled = false;\n    }\n\n    if (this.orientation == \"vertical\") {\n      var topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\n\n      if (!$type.isNumber(this._nextWidth)) {\n        this._nextWidth = topWidth;\n      }\n\n      var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\n      var sliceTopWidth = this._nextWidth;\n      var angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\n      var c = Math.tan(Math.PI / 2 - angle);\n\n      if (c == 0) {\n        c = 0.00000001;\n      }\n\n      var sliceHeight = void 0;\n      var sliceBottomWidth = void 0;\n\n      if (this.valueIs == \"area\") {\n        var totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\n        var square = totalSquare * workingValue / sum;\n        var s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\n        sliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\n\n        if (sliceHeight > 0) {\n          sliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\n        } else {\n          sliceBottomWidth = sliceTopWidth;\n        }\n      } else {\n        sliceHeight = pyramidHeight * workingValue / sum;\n        sliceBottomWidth = sliceTopWidth - sliceHeight * c;\n      }\n\n      slice.height = sliceHeight;\n      slice.width = maxWidth;\n      slice.bottomWidth = sliceBottomWidth;\n      slice.topWidth = sliceTopWidth;\n      sliceLink.topWidth = slice.bottomWidth;\n      sliceLink.bottomWidth = slice.bottomWidth;\n      slice.y = this._nextY; //slice.x = maxWidth / 2;\n\n      if (!this.alignLabels) {\n        label.x = maxWidth / 2;\n      } else {\n        label.x = 0;\n      }\n\n      label.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\n      this._nextY += slice.pixelHeight + linkHeight * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\n      sliceLink.y = this._nextY - linkHeight;\n      sliceLink.x = maxWidth / 2;\n    } else {\n      var topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\n\n      if (!$type.isNumber(this._nextWidth)) {\n        this._nextWidth = topWidth;\n      }\n\n      var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\n      var sliceTopWidth = this._nextWidth;\n      var angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\n      var c = Math.tan(Math.PI / 2 - angle);\n\n      if (c == 0) {\n        c = 0.00000001;\n      }\n\n      var sliceWidth = void 0;\n      var sliceBottomWidth = void 0;\n\n      if (this.valueIs == \"area\") {\n        var totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\n        var square = totalSquare * workingValue / sum;\n        sliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\n        sliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\n      } else {\n        sliceWidth = pyramidWidth * workingValue / sum;\n        sliceBottomWidth = sliceTopWidth - sliceWidth * c;\n      }\n\n      slice.width = sliceWidth;\n      slice.height = maxHeight;\n      slice.bottomWidth = sliceBottomWidth;\n      slice.topWidth = sliceTopWidth;\n      sliceLink.topWidth = slice.bottomWidth;\n      sliceLink.bottomWidth = slice.bottomWidth;\n      slice.x = this._nextY;\n\n      if (!this.alignLabels) {\n        label.y = maxHeight / 2;\n      } else {\n        label.y = this.labelsContainer.measuredHeight;\n      }\n\n      label.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\n      this._nextY += slice.pixelWidth + linkWidth * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\n      sliceLink.x = this._nextY - linkWidth;\n      sliceLink.y = maxHeight / 2;\n    }\n\n    this._nextWidth = slice.bottomWidth;\n  };\n\n  Object.defineProperty(PyramidSeries.prototype, \"topWidth\", {\n    /**\r\n     * @return {number | Percent}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"topWidth\");\n    },\n\n    /**\r\n     * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n     *\r\n     * `0%` (default) means the pyramid will be perfectly pointy.\r\n     * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n     * `100%` will take the whole width of the chart.\r\n     *\r\n     * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n     * `100%` and `bottomWidth` to `0%`.\r\n     *\r\n     * @default 0%\r\n     * @param {number | Percent}\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"pyramidHeight\", {\n    /**\r\n     * @return {number | Percent}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pyramidHeight\");\n    },\n\n    /**\r\n     * Height of pyramid\r\n     *\r\n     *\r\n     * @default 100%\r\n     * @param {number | Percent}\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"bottomWidth\", {\n    /**\r\n     * @return {number | Percent}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"bottomWidth\");\n    },\n\n    /**\r\n     * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n     *\r\n     * `0%` means the pyramid's botto will be pointy.\r\n     * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n     * `100%` (default) will take the whole width of the chart.\r\n     *\r\n     * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n     * `100%` and `bottomWidth` to `0%`.\r\n     *\r\n     * @param {number | Percent}\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"valueIs\", {\n    /**\r\n     * @return {\"area\" | \"height\"}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"valueIs\");\n    },\n\n    /**\r\n     * Indicates how slice's value will influence its size.\r\n     *\r\n     * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n     * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n     * slices based on their value.\r\n     *\r\n     * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n     * will represent their value relatively to values of the other slices.\r\n     *\r\n     * This is a correct way to depict \"weight\" of each slice based on their\r\n     * values.\r\n     *\r\n     * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n     * divvied up between slices. Actual slice width or area is not counted in.\r\n     *\r\n     * From the data-viz standpoint this does not make a lot of sense, since\r\n     * slices with lesser values might appear more prominent if they are placed\r\n     * towards thick end of the pyramid since their areas will be bigger.\r\n     *\r\n     * @default \"area\"\r\n     * @param {\"area\" | \"height\"}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"valueIs\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PyramidSeries;\n}(FunnelSeries);\n\nexport { PyramidSeries };\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;","map":{"version":3,"names":["__extends","FunnelSeries","FunnelSeriesDataItem","registry","$type","$utils","percent","PyramidSeriesDataItem","_super","_this","call","className","applyTheme","PyramidSeries","topWidth","bottomWidth","pyramidHeight","valueIs","sliceLinks","template","width","height","prototype","applyInternalDefaults","hasValue","readerTitle","language","translate","createDataItem","validate","_nextWidth","undefined","getNextValue","dataItem","index","nextValue","getWorkingValue","dataItems","length","nextItem","getIndex","validateDataElements","maxWidth","slicesContainer","innerWidth","maxHeight","innerHeight","each","value","relValue","sliceLink","orientation","pixelHeight","pixelWidth","_pyramidHeight","relativeToValue","_pyramidWidth","y","labelsContainer","ticksContainer","x","decorateSlice","sum","values","absoluteSum","slice","label","tick","workingValue","Math","abs","pyramidWidth","linkWidth","linkHeight","ignoreZeroValues","__disabled","isNumber","sliceTopWidth","angle","atan2","c","tan","PI","sliceHeight","sliceBottomWidth","totalSquare","square","s","sqrt","_nextY","alignLabels","pixelY","locationY","dy","max","sliceWidth","measuredHeight","pixelX","locationX","dx","Object","defineProperty","get","getPropertyValue","set","setPercentProperty","invalidate","enumerable","configurable","setPropertyValue","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/series/PyramidSeries.js"],"sourcesContent":["/**\r\n * Defines Pyramid Series.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo: sequenced?\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PyramidSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(PyramidSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PyramidSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PyramidSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PyramidSeriesDataItem;\r\n}(FunnelSeriesDataItem));\r\nexport { PyramidSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nvar PyramidSeries = /** @class */ (function (_super) {\r\n    __extends(PyramidSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PyramidSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PyramidSeries\";\r\n        _this.topWidth = percent(0);\r\n        _this.bottomWidth = percent(100);\r\n        _this.pyramidHeight = percent(100);\r\n        _this.valueIs = \"area\";\r\n        _this.sliceLinks.template.width = 0;\r\n        _this.sliceLinks.template.height = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    PyramidSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Pyramid Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    PyramidSeries.prototype.createDataItem = function () {\r\n        return new PyramidSeriesDataItem();\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PyramidSeries.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        this._nextWidth = undefined;\r\n    };\r\n    /**\r\n     * [getNextValue description]\r\n     *\r\n     * @todo Description\r\n     * @param dataItem [description]\r\n     * @return [description]\r\n     */\r\n    PyramidSeries.prototype.getNextValue = function (dataItem) {\r\n        var index = dataItem.index;\r\n        var nextValue = dataItem.getWorkingValue(\"value\");\r\n        if (index < this.dataItems.length - 1) {\r\n            var nextItem = this.dataItems.getIndex(index + 1);\r\n            nextValue = nextItem.getWorkingValue(\"value\");\r\n        }\r\n        if (nextValue == 0) {\r\n            nextValue = 0.000001;\r\n        }\r\n        return nextValue;\r\n    };\r\n    /**\r\n     * [validateDataElements description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    PyramidSeries.prototype.validateDataElements = function () {\r\n        var _this = this;\r\n        var maxWidth = this.slicesContainer.innerWidth;\r\n        var maxHeight = this.slicesContainer.innerHeight;\r\n        this.dataItems.each(function (dataItem) {\r\n            if (dataItem.value > 0) {\r\n                var relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n                var sliceLink = dataItem.sliceLink;\r\n                if (_this.orientation == \"vertical\") {\r\n                    maxHeight -= (sliceLink.pixelHeight * relValue);\r\n                }\r\n                else {\r\n                    maxWidth -= (sliceLink.pixelWidth * relValue);\r\n                }\r\n            }\r\n        });\r\n        this._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n        this._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n        if (this.orientation == \"vertical\") {\r\n            var y = (maxHeight - this._pyramidHeight) / 2;\r\n            this.slicesContainer.y = y;\r\n            this.labelsContainer.y = y;\r\n            this.ticksContainer.y = y;\r\n        }\r\n        else {\r\n            var x = (maxWidth - this._pyramidWidth) / 2;\r\n            this.slicesContainer.x = x;\r\n            this.labelsContainer.x = x;\r\n            this.ticksContainer.x = x;\r\n        }\r\n        _super.prototype.validateDataElements.call(this);\r\n    };\r\n    /**\r\n     * [decorateSlice description]\r\n     *\r\n     * @todo Description\r\n     * @param dataItem [description]\r\n     */\r\n    PyramidSeries.prototype.decorateSlice = function (dataItem) {\r\n        var sum = this.dataItem.values.value.absoluteSum;\r\n        if (sum == 0) {\r\n            return;\r\n        }\r\n        var slice = dataItem.slice;\r\n        var sliceLink = dataItem.sliceLink;\r\n        var label = dataItem.label;\r\n        var tick = dataItem.tick;\r\n        // TODO can this be removed ?\r\n        this.getNextValue(dataItem);\r\n        var workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\r\n        var pyramidWidth = this._pyramidWidth;\r\n        var pyramidHeight = this._pyramidHeight;\r\n        var maxWidth = this.slicesContainer.innerWidth;\r\n        var maxHeight = this.slicesContainer.innerHeight;\r\n        var linkWidth = sliceLink.pixelWidth;\r\n        var linkHeight = sliceLink.pixelHeight;\r\n        if ((dataItem.value == 0 || dataItem.value == null) && this.ignoreZeroValues) {\r\n            dataItem.__disabled = true;\r\n        }\r\n        else {\r\n            dataItem.__disabled = false;\r\n        }\r\n        if (this.orientation == \"vertical\") {\r\n            var topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n            if (!$type.isNumber(this._nextWidth)) {\r\n                this._nextWidth = topWidth;\r\n            }\r\n            var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n            var sliceTopWidth = this._nextWidth;\r\n            var angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n            var c = Math.tan(Math.PI / 2 - angle);\r\n            if (c == 0) {\r\n                c = 0.00000001;\r\n            }\r\n            var sliceHeight = void 0;\r\n            var sliceBottomWidth = void 0;\r\n            if (this.valueIs == \"area\") {\r\n                var totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n                var square = totalSquare * workingValue / sum;\r\n                var s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n                sliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n                if (sliceHeight > 0) {\r\n                    sliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n                }\r\n                else {\r\n                    sliceBottomWidth = sliceTopWidth;\r\n                }\r\n            }\r\n            else {\r\n                sliceHeight = pyramidHeight * workingValue / sum;\r\n                sliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n            }\r\n            slice.height = sliceHeight;\r\n            slice.width = maxWidth;\r\n            slice.bottomWidth = sliceBottomWidth;\r\n            slice.topWidth = sliceTopWidth;\r\n            sliceLink.topWidth = slice.bottomWidth;\r\n            sliceLink.bottomWidth = slice.bottomWidth;\r\n            slice.y = this._nextY;\r\n            //slice.x = maxWidth / 2;\r\n            if (!this.alignLabels) {\r\n                label.x = maxWidth / 2;\r\n            }\r\n            else {\r\n                label.x = 0;\r\n            }\r\n            label.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\r\n            this._nextY += slice.pixelHeight + linkHeight * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n            sliceLink.y = this._nextY - linkHeight;\r\n            sliceLink.x = maxWidth / 2;\r\n        }\r\n        else {\r\n            var topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n            if (!$type.isNumber(this._nextWidth)) {\r\n                this._nextWidth = topWidth;\r\n            }\r\n            var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n            var sliceTopWidth = this._nextWidth;\r\n            var angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n            var c = Math.tan(Math.PI / 2 - angle);\r\n            if (c == 0) {\r\n                c = 0.00000001;\r\n            }\r\n            var sliceWidth = void 0;\r\n            var sliceBottomWidth = void 0;\r\n            if (this.valueIs == \"area\") {\r\n                var totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n                var square = totalSquare * workingValue / sum;\r\n                sliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n                sliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n            }\r\n            else {\r\n                sliceWidth = pyramidWidth * workingValue / sum;\r\n                sliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n            }\r\n            slice.width = sliceWidth;\r\n            slice.height = maxHeight;\r\n            slice.bottomWidth = sliceBottomWidth;\r\n            slice.topWidth = sliceTopWidth;\r\n            sliceLink.topWidth = slice.bottomWidth;\r\n            sliceLink.bottomWidth = slice.bottomWidth;\r\n            slice.x = this._nextY;\r\n            if (!this.alignLabels) {\r\n                label.y = maxHeight / 2;\r\n            }\r\n            else {\r\n                label.y = this.labelsContainer.measuredHeight;\r\n            }\r\n            label.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\r\n            this._nextY += slice.pixelWidth + linkWidth * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n            sliceLink.x = this._nextY - linkWidth;\r\n            sliceLink.y = maxHeight / 2;\r\n        }\r\n        this._nextWidth = slice.bottomWidth;\r\n    };\r\n    Object.defineProperty(PyramidSeries.prototype, \"topWidth\", {\r\n        /**\r\n         * @return {number | Percent}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"topWidth\");\r\n        },\r\n        /**\r\n         * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n         *\r\n         * `0%` (default) means the pyramid will be perfectly pointy.\r\n         * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n         * `100%` will take the whole width of the chart.\r\n         *\r\n         * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n         * `100%` and `bottomWidth` to `0%`.\r\n         *\r\n         * @default 0%\r\n         * @param {number | Percent}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PyramidSeries.prototype, \"pyramidHeight\", {\r\n        /**\r\n         * @return {number | Percent}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pyramidHeight\");\r\n        },\r\n        /**\r\n         * Height of pyramid\r\n         *\r\n         *\r\n         * @default 100%\r\n         * @param {number | Percent}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PyramidSeries.prototype, \"bottomWidth\", {\r\n        /**\r\n         * @return {number | Percent}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"bottomWidth\");\r\n        },\r\n        /**\r\n         * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n         *\r\n         * `0%` means the pyramid's botto will be pointy.\r\n         * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n         * `100%` (default) will take the whole width of the chart.\r\n         *\r\n         * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n         * `100%` and `bottomWidth` to `0%`.\r\n         *\r\n         * @param {number | Percent}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PyramidSeries.prototype, \"valueIs\", {\r\n        /**\r\n         * @return {\"area\" | \"height\"}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"valueIs\");\r\n        },\r\n        /**\r\n         * Indicates how slice's value will influence its size.\r\n         *\r\n         * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n         * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n         * slices based on their value.\r\n         *\r\n         * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n         * will represent their value relatively to values of the other slices.\r\n         *\r\n         * This is a correct way to depict \"weight\" of each slice based on their\r\n         * values.\r\n         *\r\n         * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n         * divvied up between slices. Actual slice width or area is not counted in.\r\n         *\r\n         * From the data-viz standpoint this does not make a lot of sense, since\r\n         * slices with lesser values might appear more prominent if they are placed\r\n         * towards thick end of the pyramid since their areas will be bigger.\r\n         *\r\n         * @default \"area\"\r\n         * @param {\"area\" | \"height\"}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"valueIs\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PyramidSeries;\r\n}(FunnelSeries));\r\nexport { PyramidSeries };\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}