{"ast":null,"code":"/**\r\n * A collection of functions that deals with path calculations.\r\n */\nimport * as $math from \"../utils/Math\";\nimport * as $type from \"../utils/Type\";\nimport { getGhostPaper } from \"../rendering/Paper\";\nimport { options } from \"../Options\";\n/**\r\n * ============================================================================\r\n * PATH FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Returns an SVG path from a number of points.\r\n *\r\n * @ignore Exclude from docs\r\n * @param points  An array of line elbow points\r\n * @return SVG path\r\n */\n\nexport function polyline(points) {\n  var path = lineTo(points[0]);\n  var prevPoint = {\n    x: 0,\n    y: 0\n  };\n  var minStep = options.minPolylineStep;\n\n  if (!$type.isNumber(minStep)) {\n    minStep = 0.5;\n  }\n\n  for (var i = 0, len = points.length; i < len; i++) {\n    var point = points[i];\n\n    if ($math.getDistance(point, prevPoint) > minStep) {\n      path += lineTo(point);\n      prevPoint = point;\n    }\n  }\n\n  return path;\n}\n/**\r\n * Returns a starting point of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point  Starting point\r\n * @return SVG path\r\n */\n\nexport function moveTo(point) {\n  return \" M\" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4) + \" \";\n}\n/**\r\n * Returns a line part of SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point  SVG path\r\n * @return SVG path\r\n */\n\nexport function lineTo(point) {\n  return \" L\" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4) + \" \";\n}\n/**\r\n * Returns a quadratic curve part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point         End point of the curve\r\n * @param controlPoint  Control point\r\n * @return SVG path\r\n */\n\nexport function quadraticCurveTo(point, controlPoint) {\n  return \" Q\" + $math.round(controlPoint.x, 4) + \",\" + $math.round(controlPoint.y, 4) + \" \" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4);\n}\n/**\r\n * Returns a cubic curve part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point          End point of the curve\r\n * @param controlPointA  Control point A\r\n * @param controlPointB  Control point B\r\n * @return SVG path\r\n */\n\nexport function cubicCurveTo(point, controlPointA, controlPointB) {\n  return \" C\" + $math.round(controlPointA.x, 4) + \",\" + $math.round(controlPointA.y, 4) + \" \" + $math.round(controlPointB.x, 4) + \",\" + $math.round(controlPointB.y, 4) + \" \" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4);\n}\n/**\r\n * Returns a terminator for an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @return SVG path\r\n */\n\nexport function closePath() {\n  return \" Z\";\n}\n/**\r\n * Returns an arc part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Better parameter descriptions\r\n * @param startAngle  Starting angle\r\n * @param arc         Arc\r\n * @param radius      Radius\r\n * @param radiusY     Vertical radius\r\n * @return SVG path\r\n */\n\nexport function arcTo(startAngle, arc, radius, radiusY) {\n  if (arc == 0) {\n    return \"\";\n  }\n\n  if (!$type.isNumber(radiusY)) {\n    radiusY = radius;\n  }\n\n  var path = \"\";\n  var c = \",\";\n  var segments = Math.ceil(Math.abs(arc) / 180);\n  var l = 1;\n\n  if (arc < 0) {\n    l = 0;\n  } // previous, as we use a not A\n\n\n  var pax = 0;\n  var pay = 0; // center\n\n  var cx = -$math.cos(startAngle) * radius;\n  var cy = -$math.sin(startAngle) * radiusY; // foir very short angles and big radius, solves artefacts\n\n  if (arc < 0.5 && radius > 3000) {\n    var endAngle = startAngle + arc;\n    var ax = $math.round($math.cos(endAngle) * radius, 4);\n    var ay = $math.round($math.sin(endAngle) * radiusY, 4);\n    return lineTo({\n      x: ax,\n      y: ay\n    });\n  }\n\n  for (var i = 0; i < segments; i++) {\n    var endAngle = startAngle + arc / segments * (i + 1);\n    var ax = $math.round($math.cos(endAngle) * radius + cx - pax, 4);\n    var ay = $math.round($math.sin(endAngle) * radiusY + cy - pay, 4);\n    path += \" a\" + radius + c + radiusY + c + 0 + c + 0 + c + l + c + ax + c + ay;\n    pax = ax;\n    pay = ay;\n  }\n\n  return path;\n}\n/**\r\n * Creates an arc path.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param startAngle         [description]\r\n * @param arc                [description]\r\n * @param radius             [description]\r\n * @param innerRadius        [description]\r\n * @param radiusY            [description]\r\n * @param cornerRadius       [description]\r\n * @param innerCornerRadius  [description]\r\n * @return SVG path\r\n */\n\nexport function arc(startAngle, arc, radius, innerRadius, radiusY, cornerRadius, innerCornerRadius) {\n  if (arc == 0) {\n    return \"\";\n  }\n\n  if (!$type.isNumber(innerRadius)) {\n    innerRadius = 0;\n  }\n\n  if (radius == 0 && innerRadius <= 0) {\n    return \"\";\n  }\n\n  if (radius < innerRadius) {\n    var temp = radius;\n    radius = innerRadius;\n    innerRadius = temp;\n\n    if ($type.isNumber(radiusY)) {\n      radiusY = radiusY / innerRadius * radius;\n    }\n  }\n\n  arc = $math.min(arc, 360);\n\n  if (arc == 360) {\n    cornerRadius = 0;\n    innerCornerRadius = 0;\n  }\n\n  var endAngle = startAngle + arc;\n  var crSin = $math.sin($math.min(arc, 45) / 2);\n  radiusY = $type.isNumber(radiusY) ? radiusY : radius;\n  cornerRadius = cornerRadius || 0;\n  innerCornerRadius = $type.isNumber(innerCornerRadius) ? innerCornerRadius : cornerRadius;\n  var innerRadiusY = radiusY / radius * innerRadius;\n  var cornerRadiusY = radiusY / radius * cornerRadius;\n  var innerCornerRadiusY = radiusY / radius * innerCornerRadius;\n  cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\n  cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\n  innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\n  innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\n  cornerRadius = $math.round($math.fitToRange(cornerRadius, 0, radius * crSin), 4);\n  cornerRadiusY = $math.round($math.fitToRange(cornerRadiusY, 0, radiusY * crSin), 4);\n  innerCornerRadius = $math.round($math.fitToRange(innerCornerRadius, 0, innerRadius * crSin), 4);\n  innerCornerRadiusY = $math.round($math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin), 4);\n  var crAngle = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\n  var crAngleY = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\n\n  if (innerRadius < innerCornerRadius) {\n    innerRadius = innerCornerRadius;\n  }\n\n  if (innerRadiusY < innerCornerRadiusY) {\n    innerRadiusY = innerCornerRadiusY;\n  }\n\n  var crInnerAngle = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\n  var crInnerAngleY = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\n\n  if (!$type.isNumber(crInnerAngle)) {\n    crInnerAngle = 0;\n  }\n\n  if (!$type.isNumber(crInnerAngleY)) {\n    crInnerAngleY = 0;\n  }\n\n  var middleAngle = startAngle + arc / 2;\n  var mPoint = {\n    x: $math.round($math.cos(middleAngle) * innerRadius, 4),\n    y: $math.sin(middleAngle) * innerRadiusY\n  };\n  var a0 = {\n    x: $math.cos(startAngle) * (innerRadius + innerCornerRadius),\n    y: $math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY)\n  };\n  var b0 = {\n    x: $math.cos(startAngle) * (radius - cornerRadius),\n    y: $math.sin(startAngle) * (radiusY - cornerRadiusY)\n  };\n  var c0 = {\n    x: $math.cos(endAngle) * (radius - cornerRadius),\n    y: $math.sin(endAngle) * (radiusY - cornerRadiusY)\n  };\n  var d0 = {\n    x: $math.cos(endAngle) * (innerRadius + innerCornerRadius),\n    y: $math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY)\n  };\n  var b1 = {\n    x: $math.cos(startAngle + crAngle) * radius,\n    y: $math.sin(startAngle + crAngleY) * radiusY\n  };\n  var d1 = {\n    x: $math.cos(endAngle - crInnerAngle) * innerRadius,\n    y: $math.sin(endAngle - crInnerAngleY) * innerRadiusY\n  }; // some magic math\n\n  innerCornerRadius += innerCornerRadius * $math.sin(crInnerAngle / 2);\n  innerCornerRadiusY += innerCornerRadiusY * $math.sin(crInnerAngleY / 2);\n\n  if (crInnerAngle > (endAngle - startAngle) / 2) {\n    d1 = mPoint;\n  }\n\n  var path = \"\"; // start from b if this is full circle\n\n  if (arc == 360) {\n    path = moveTo(b0);\n  } // otherwise start from a\n  else {\n    path = moveTo(a0);\n    path += lineTo(b0);\n    path += arcToPoint(b1, cornerRadius, cornerRadiusY, true);\n  } // draw arc\n\n\n  path += arcTo(startAngle + crAngle, arc - 2 * crAngle, radius, radiusY); // draw inner arc\n\n  if ($type.isNumber(innerRadius) && innerRadius != 0) {\n    // move to B if this is full circle\n    if (arc == 360 && cornerRadius == 0) {\n      path += moveTo(d0);\n    } // draw line otherwise\n    else {\n      path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);\n      path += lineTo(d0);\n      path += arcToPoint(d1, innerCornerRadius, innerCornerRadiusY, true);\n    }\n\n    path += arcTo(endAngle - crInnerAngle, -(arc - 2 * crInnerAngle), innerRadius, innerRadiusY);\n\n    if (arc < 360 || cornerRadius > 0) {\n      path += arcToPoint(a0, innerCornerRadius, innerCornerRadiusY, true);\n    }\n\n    path += lineTo(a0);\n  } else {\n    path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);\n\n    if (arc < 360) {\n      path += lineTo(a0);\n    }\n  }\n\n  return path;\n}\n/**\r\n * Creates a path for an arc to specific coordinate.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param point         Reference point\r\n * @param radius        Radius\r\n * @param radiusY       Vertical radius (for skewed arcs)\r\n * @param sweepFlag     [description]\r\n * @param largeArcFlag  [description]\r\n * @param xAxisRotation [description]\r\n * @return Arc path\r\n */\n\nexport function arcToPoint(point, radius, radiusY, sweepFlag, largeArcFlag, xAxisRotation) {\n  if (radius == 0) {\n    return \"\";\n  }\n\n  xAxisRotation = xAxisRotation || 0;\n  largeArcFlag = Boolean(largeArcFlag);\n  sweepFlag = Boolean(sweepFlag);\n  var c = \",\";\n  var sweepFlagValue = +sweepFlag; // converts to 1 or 0\n\n  var largeArcFlagValue = +largeArcFlag; // converts to 1 or 0\n\n  return \" A\" + radius + c + radiusY + c + xAxisRotation + c + largeArcFlagValue + c + sweepFlagValue + c + $math.round(point.x, 4) + c + $math.round(point.y, 4);\n}\n/**\r\n * Creates a new rectangle.\r\n *\r\n * @ignore Exclude from docs\r\n * @param width   Width (px)\r\n * @param height  Height (px)\r\n * @param x       X position\r\n * @param y       Y position\r\n * @return Rectangle\r\n */\n\nexport function rectangle(width, height, x, y) {\n  if (!$type.isNumber(x)) {\n    x = 0;\n  }\n\n  if (!$type.isNumber(y)) {\n    y = 0;\n  }\n\n  return moveTo({\n    x: x,\n    y: y\n  }) + lineTo({\n    x: x + width,\n    y: y\n  }) + lineTo({\n    x: x + width,\n    y: y + height\n  }) + lineTo({\n    x: x,\n    y: y + height\n  }) + closePath();\n}\n/**\r\n * Converts a rectangle to an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rect  Rectangle\r\n * @param ccw   Counter-clockwise?\r\n * @return SVG path\r\n */\n\nexport function rectToPath(rect, ccw) {\n  var c = \",\";\n  var L = \" L\";\n\n  if (ccw) {\n    return \"M\" + rect.x + c + rect.y + L + rect.x + c + (rect.y + rect.height) + L + (rect.x + rect.width) + c + (rect.y + rect.height) + L + (rect.x + rect.width) + c + rect.y + L + rect.x + c + rect.y;\n  } else {\n    return \"M\" + rect.x + c + rect.y + L + (rect.x + rect.width) + c + rect.y + L + (rect.x + rect.width) + c + (rect.y + rect.height) + L + rect.x + c + (rect.y + rect.height) + L + rect.x + c + rect.y;\n  }\n}\n/**\r\n * Converts SVG path to array of points.\r\n *\r\n * Note, this is experimental feature based on method which is deprecated\r\n * on some browsers and some browsers do not support it at all.\r\n *\r\n * You can save the output of this function, but not rely on it completely.\r\n */\n\nexport function pathToPoints(path, pointCount) {\n  var paper = getGhostPaper();\n  var svgPath = paper.add(\"path\").node;\n  svgPath.setAttribute(\"d\", path);\n\n  if (svgPath.getPointAtLength && svgPath.getTotalLength) {\n    var length_1 = svgPath.getTotalLength();\n    var toPoints = [];\n\n    for (var i = 0; i < pointCount; i++) {\n      var point = svgPath.getPointAtLength(i / pointCount * length_1);\n      toPoints.push({\n        x: point.x,\n        y: point.y\n      });\n    }\n\n    return toPoints;\n  }\n\n  svgPath.remove();\n}\nexport function spiralPoints(cx, cy, radius, radiusY, innerRadius, step, radiusStep, startAngle, endAngle) {\n  if (!$type.isNumber(startAngle)) {\n    startAngle = 0;\n  }\n\n  if (!$type.isNumber(startAngle)) {\n    endAngle = startAngle;\n  }\n\n  var r = innerRadius + 0.01;\n  var angle = startAngle * $math.RADIANS;\n  var points = [];\n\n  while (r < radius + radiusStep) {\n    var stepSize = step;\n\n    if (stepSize / 2 > r) {\n      stepSize = 2 * r;\n    }\n\n    angle += 2 * Math.asin(stepSize / 2 / r);\n\n    if (angle * $math.DEGREES > endAngle + (radius - innerRadius) / radiusStep * 360) {\n      break;\n    }\n\n    var degrees = angle * $math.DEGREES;\n    var point = {\n      x: cx + r * Math.cos(angle),\n      y: cy + r * radiusY / radius * Math.sin(angle)\n    };\n    points.push(point);\n    r = innerRadius + degrees / 360 * radiusStep;\n  }\n\n  points.shift();\n  return points;\n}\nexport function pointsToPath(points) {\n  if (!points || points.length == 0) {\n    return \"\";\n  }\n\n  var path = moveTo(points[0]);\n\n  if (points && points.length > 0) {\n    for (var i = 1; i < points.length; i++) {\n      path += lineTo(points[i]);\n    }\n  }\n\n  return path;\n}","map":{"version":3,"names":["$math","$type","getGhostPaper","options","polyline","points","path","lineTo","prevPoint","x","y","minStep","minPolylineStep","isNumber","i","len","length","point","getDistance","moveTo","round","quadraticCurveTo","controlPoint","cubicCurveTo","controlPointA","controlPointB","closePath","arcTo","startAngle","arc","radius","radiusY","c","segments","Math","ceil","abs","l","pax","pay","cx","cos","cy","sin","endAngle","ax","ay","innerRadius","cornerRadius","innerCornerRadius","temp","min","crSin","innerRadiusY","cornerRadiusY","innerCornerRadiusY","fitToRange","crAngle","asin","DEGREES","crAngleY","crInnerAngle","crInnerAngleY","middleAngle","mPoint","a0","b0","c0","d0","b1","d1","arcToPoint","sweepFlag","largeArcFlag","xAxisRotation","Boolean","sweepFlagValue","largeArcFlagValue","rectangle","width","height","rectToPath","rect","ccw","L","pathToPoints","pointCount","paper","svgPath","add","node","setAttribute","getPointAtLength","getTotalLength","length_1","toPoints","push","remove","spiralPoints","step","radiusStep","r","angle","RADIANS","stepSize","degrees","shift","pointsToPath"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js"],"sourcesContent":["/**\r\n * A collection of functions that deals with path calculations.\r\n */\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { getGhostPaper } from \"../rendering/Paper\";\r\nimport { options } from \"../Options\";\r\n/**\r\n * ============================================================================\r\n * PATH FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Returns an SVG path from a number of points.\r\n *\r\n * @ignore Exclude from docs\r\n * @param points  An array of line elbow points\r\n * @return SVG path\r\n */\r\nexport function polyline(points) {\r\n    var path = lineTo(points[0]);\r\n    var prevPoint = { x: 0, y: 0 };\r\n    var minStep = options.minPolylineStep;\r\n    if (!$type.isNumber(minStep)) {\r\n        minStep = 0.5;\r\n    }\r\n    for (var i = 0, len = points.length; i < len; i++) {\r\n        var point = points[i];\r\n        if ($math.getDistance(point, prevPoint) > minStep) {\r\n            path += lineTo(point);\r\n            prevPoint = point;\r\n        }\r\n    }\r\n    return path;\r\n}\r\n/**\r\n * Returns a starting point of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point  Starting point\r\n * @return SVG path\r\n */\r\nexport function moveTo(point) {\r\n    return \" M\" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4) + \" \";\r\n}\r\n/**\r\n * Returns a line part of SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point  SVG path\r\n * @return SVG path\r\n */\r\nexport function lineTo(point) {\r\n    return \" L\" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4) + \" \";\r\n}\r\n/**\r\n * Returns a quadratic curve part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point         End point of the curve\r\n * @param controlPoint  Control point\r\n * @return SVG path\r\n */\r\nexport function quadraticCurveTo(point, controlPoint) {\r\n    return \" Q\" + $math.round(controlPoint.x, 4)\r\n        + \",\" + $math.round(controlPoint.y, 4) + \" \" + $math.round(point.x, 4)\r\n        + \",\" + $math.round(point.y, 4);\r\n}\r\n/**\r\n * Returns a cubic curve part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point          End point of the curve\r\n * @param controlPointA  Control point A\r\n * @param controlPointB  Control point B\r\n * @return SVG path\r\n */\r\nexport function cubicCurveTo(point, controlPointA, controlPointB) {\r\n    return \" C\" + $math.round(controlPointA.x, 4)\r\n        + \",\" + $math.round(controlPointA.y, 4) + \" \" + $math.round(controlPointB.x, 4)\r\n        + \",\" + $math.round(controlPointB.y, 4) + \" \" + $math.round(point.x, 4)\r\n        + \",\" + $math.round(point.y, 4);\r\n}\r\n/**\r\n * Returns a terminator for an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @return SVG path\r\n */\r\nexport function closePath() {\r\n    return \" Z\";\r\n}\r\n/**\r\n * Returns an arc part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Better parameter descriptions\r\n * @param startAngle  Starting angle\r\n * @param arc         Arc\r\n * @param radius      Radius\r\n * @param radiusY     Vertical radius\r\n * @return SVG path\r\n */\r\nexport function arcTo(startAngle, arc, radius, radiusY) {\r\n    if (arc == 0) {\r\n        return \"\";\r\n    }\r\n    if (!$type.isNumber(radiusY)) {\r\n        radiusY = radius;\r\n    }\r\n    var path = \"\";\r\n    var c = \",\";\r\n    var segments = Math.ceil(Math.abs(arc) / 180);\r\n    var l = 1;\r\n    if (arc < 0) {\r\n        l = 0;\r\n    }\r\n    // previous, as we use a not A\r\n    var pax = 0;\r\n    var pay = 0;\r\n    // center\r\n    var cx = -$math.cos(startAngle) * radius;\r\n    var cy = -$math.sin(startAngle) * radiusY;\r\n    // foir very short angles and big radius, solves artefacts\r\n    if (arc < 0.5 && radius > 3000) {\r\n        var endAngle = startAngle + arc;\r\n        var ax = $math.round($math.cos(endAngle) * radius, 4);\r\n        var ay = $math.round($math.sin(endAngle) * radiusY, 4);\r\n        return lineTo({ x: ax, y: ay });\r\n    }\r\n    for (var i = 0; i < segments; i++) {\r\n        var endAngle = startAngle + arc / segments * (i + 1);\r\n        var ax = $math.round($math.cos(endAngle) * radius + cx - pax, 4);\r\n        var ay = $math.round($math.sin(endAngle) * radiusY + cy - pay, 4);\r\n        path += \" a\" + radius + c + radiusY + c + 0 + c + 0 + c + l + c + ax + c + ay;\r\n        pax = ax;\r\n        pay = ay;\r\n    }\r\n    return path;\r\n}\r\n/**\r\n * Creates an arc path.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param startAngle         [description]\r\n * @param arc                [description]\r\n * @param radius             [description]\r\n * @param innerRadius        [description]\r\n * @param radiusY            [description]\r\n * @param cornerRadius       [description]\r\n * @param innerCornerRadius  [description]\r\n * @return SVG path\r\n */\r\nexport function arc(startAngle, arc, radius, innerRadius, radiusY, cornerRadius, innerCornerRadius) {\r\n    if (arc == 0) {\r\n        return \"\";\r\n    }\r\n    if (!$type.isNumber(innerRadius)) {\r\n        innerRadius = 0;\r\n    }\r\n    if (radius == 0 && innerRadius <= 0) {\r\n        return \"\";\r\n    }\r\n    if (radius < innerRadius) {\r\n        var temp = radius;\r\n        radius = innerRadius;\r\n        innerRadius = temp;\r\n        if ($type.isNumber(radiusY)) {\r\n            radiusY = radiusY / innerRadius * radius;\r\n        }\r\n    }\r\n    arc = $math.min(arc, 360);\r\n    if (arc == 360) {\r\n        cornerRadius = 0;\r\n        innerCornerRadius = 0;\r\n    }\r\n    var endAngle = startAngle + arc;\r\n    var crSin = $math.sin($math.min(arc, 45) / 2);\r\n    radiusY = $type.isNumber(radiusY) ? radiusY : radius;\r\n    cornerRadius = cornerRadius || 0;\r\n    innerCornerRadius = $type.isNumber(innerCornerRadius) ? innerCornerRadius : cornerRadius;\r\n    var innerRadiusY = (radiusY / radius) * innerRadius;\r\n    var cornerRadiusY = (radiusY / radius) * cornerRadius;\r\n    var innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;\r\n    cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\r\n    cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n    innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\r\n    innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n    cornerRadius = $math.round($math.fitToRange(cornerRadius, 0, radius * crSin), 4);\r\n    cornerRadiusY = $math.round($math.fitToRange(cornerRadiusY, 0, radiusY * crSin), 4);\r\n    innerCornerRadius = $math.round($math.fitToRange(innerCornerRadius, 0, innerRadius * crSin), 4);\r\n    innerCornerRadiusY = $math.round($math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin), 4);\r\n    var crAngle = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\r\n    var crAngleY = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\r\n    if (innerRadius < innerCornerRadius) {\r\n        innerRadius = innerCornerRadius;\r\n    }\r\n    if (innerRadiusY < innerCornerRadiusY) {\r\n        innerRadiusY = innerCornerRadiusY;\r\n    }\r\n    var crInnerAngle = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\r\n    var crInnerAngleY = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\r\n    if (!$type.isNumber(crInnerAngle)) {\r\n        crInnerAngle = 0;\r\n    }\r\n    if (!$type.isNumber(crInnerAngleY)) {\r\n        crInnerAngleY = 0;\r\n    }\r\n    var middleAngle = startAngle + arc / 2;\r\n    var mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.sin(middleAngle) * innerRadiusY };\r\n    var a0 = { x: $math.cos(startAngle) * (innerRadius + innerCornerRadius), y: $math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n    var b0 = { x: $math.cos(startAngle) * (radius - cornerRadius), y: $math.sin(startAngle) * (radiusY - cornerRadiusY) };\r\n    var c0 = { x: $math.cos(endAngle) * (radius - cornerRadius), y: $math.sin(endAngle) * (radiusY - cornerRadiusY) };\r\n    var d0 = { x: $math.cos(endAngle) * (innerRadius + innerCornerRadius), y: $math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n    var b1 = { x: $math.cos(startAngle + crAngle) * radius, y: $math.sin(startAngle + crAngleY) * radiusY };\r\n    var d1 = { x: $math.cos(endAngle - crInnerAngle) * innerRadius, y: $math.sin(endAngle - crInnerAngleY) * innerRadiusY };\r\n    // some magic math\r\n    innerCornerRadius += innerCornerRadius * $math.sin(crInnerAngle / 2);\r\n    innerCornerRadiusY += innerCornerRadiusY * $math.sin(crInnerAngleY / 2);\r\n    if (crInnerAngle > (endAngle - startAngle) / 2) {\r\n        d1 = mPoint;\r\n    }\r\n    var path = \"\";\r\n    // start from b if this is full circle\r\n    if (arc == 360) {\r\n        path = moveTo(b0);\r\n    }\r\n    // otherwise start from a\r\n    else {\r\n        path = moveTo(a0);\r\n        path += lineTo(b0);\r\n        path += arcToPoint(b1, cornerRadius, cornerRadiusY, true);\r\n    }\r\n    // draw arc\r\n    path += arcTo(startAngle + crAngle, arc - 2 * crAngle, radius, radiusY);\r\n    // draw inner arc\r\n    if ($type.isNumber(innerRadius) && innerRadius != 0) {\r\n        // move to B if this is full circle\r\n        if (arc == 360 && cornerRadius == 0) {\r\n            path += moveTo(d0);\r\n        }\r\n        // draw line otherwise\r\n        else {\r\n            path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);\r\n            path += lineTo(d0);\r\n            path += arcToPoint(d1, innerCornerRadius, innerCornerRadiusY, true);\r\n        }\r\n        path += arcTo(endAngle - crInnerAngle, -(arc - 2 * crInnerAngle), innerRadius, innerRadiusY);\r\n        if (arc < 360 || cornerRadius > 0) {\r\n            path += arcToPoint(a0, innerCornerRadius, innerCornerRadiusY, true);\r\n        }\r\n        path += lineTo(a0);\r\n    }\r\n    else {\r\n        path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);\r\n        if (arc < 360) {\r\n            path += lineTo(a0);\r\n        }\r\n    }\r\n    return path;\r\n}\r\n/**\r\n * Creates a path for an arc to specific coordinate.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param point         Reference point\r\n * @param radius        Radius\r\n * @param radiusY       Vertical radius (for skewed arcs)\r\n * @param sweepFlag     [description]\r\n * @param largeArcFlag  [description]\r\n * @param xAxisRotation [description]\r\n * @return Arc path\r\n */\r\nexport function arcToPoint(point, radius, radiusY, sweepFlag, largeArcFlag, xAxisRotation) {\r\n    if (radius == 0) {\r\n        return \"\";\r\n    }\r\n    xAxisRotation = xAxisRotation || 0;\r\n    largeArcFlag = Boolean(largeArcFlag);\r\n    sweepFlag = Boolean(sweepFlag);\r\n    var c = \",\";\r\n    var sweepFlagValue = +sweepFlag; // converts to 1 or 0\r\n    var largeArcFlagValue = +largeArcFlag; // converts to 1 or 0\r\n    return \" A\" + radius + c + radiusY + c + xAxisRotation + c + largeArcFlagValue + c + sweepFlagValue + c + $math.round(point.x, 4) + c + $math.round(point.y, 4);\r\n}\r\n/**\r\n * Creates a new rectangle.\r\n *\r\n * @ignore Exclude from docs\r\n * @param width   Width (px)\r\n * @param height  Height (px)\r\n * @param x       X position\r\n * @param y       Y position\r\n * @return Rectangle\r\n */\r\nexport function rectangle(width, height, x, y) {\r\n    if (!$type.isNumber(x)) {\r\n        x = 0;\r\n    }\r\n    if (!$type.isNumber(y)) {\r\n        y = 0;\r\n    }\r\n    return moveTo({ x: x, y: y }) + lineTo({ x: x + width, y: y }) + lineTo({ x: x + width, y: y + height }) + lineTo({ x: x, y: y + height }) + closePath();\r\n}\r\n/**\r\n * Converts a rectangle to an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rect  Rectangle\r\n * @param ccw   Counter-clockwise?\r\n * @return SVG path\r\n */\r\nexport function rectToPath(rect, ccw) {\r\n    var c = \",\";\r\n    var L = \" L\";\r\n    if (ccw) {\r\n        return \"M\" + rect.x\r\n            + c + rect.y + L + rect.x\r\n            + c + (rect.y + rect.height) + L + (rect.x + rect.width)\r\n            + c + (rect.y + rect.height) + L + (rect.x + rect.width)\r\n            + c + rect.y + L + rect.x\r\n            + c + rect.y;\r\n    }\r\n    else {\r\n        return \"M\" + rect.x\r\n            + c + rect.y + L + (rect.x + rect.width)\r\n            + c + rect.y + L + (rect.x + rect.width)\r\n            + c + (rect.y + rect.height) + L + rect.x\r\n            + c + (rect.y + rect.height) + L + rect.x\r\n            + c + rect.y;\r\n    }\r\n}\r\n/**\r\n * Converts SVG path to array of points.\r\n *\r\n * Note, this is experimental feature based on method which is deprecated\r\n * on some browsers and some browsers do not support it at all.\r\n *\r\n * You can save the output of this function, but not rely on it completely.\r\n */\r\nexport function pathToPoints(path, pointCount) {\r\n    var paper = getGhostPaper();\r\n    var svgPath = paper.add(\"path\").node;\r\n    svgPath.setAttribute(\"d\", path);\r\n    if (svgPath.getPointAtLength && svgPath.getTotalLength) {\r\n        var length_1 = svgPath.getTotalLength();\r\n        var toPoints = [];\r\n        for (var i = 0; i < pointCount; i++) {\r\n            var point = svgPath.getPointAtLength(i / pointCount * length_1);\r\n            toPoints.push({ x: point.x, y: point.y });\r\n        }\r\n        return toPoints;\r\n    }\r\n    svgPath.remove();\r\n}\r\nexport function spiralPoints(cx, cy, radius, radiusY, innerRadius, step, radiusStep, startAngle, endAngle) {\r\n    if (!$type.isNumber(startAngle)) {\r\n        startAngle = 0;\r\n    }\r\n    if (!$type.isNumber(startAngle)) {\r\n        endAngle = startAngle;\r\n    }\r\n    var r = innerRadius + 0.01;\r\n    var angle = startAngle * $math.RADIANS;\r\n    var points = [];\r\n    while (r < radius + radiusStep) {\r\n        var stepSize = step;\r\n        if (stepSize / 2 > r) {\r\n            stepSize = 2 * r;\r\n        }\r\n        angle += 2 * Math.asin(stepSize / 2 / r);\r\n        if (angle * $math.DEGREES > endAngle + ((radius - innerRadius) / radiusStep) * 360) {\r\n            break;\r\n        }\r\n        var degrees = angle * $math.DEGREES;\r\n        var point = { x: cx + r * Math.cos(angle), y: cy + r * radiusY / radius * Math.sin(angle) };\r\n        points.push(point);\r\n        r = innerRadius + degrees / 360 * radiusStep;\r\n    }\r\n    points.shift();\r\n    return points;\r\n}\r\nexport function pointsToPath(points) {\r\n    if (!points || points.length == 0) {\r\n        return \"\";\r\n    }\r\n    var path = moveTo(points[0]);\r\n    if (points && points.length > 0) {\r\n        for (var i = 1; i < points.length; i++) {\r\n            path += lineTo(points[i]);\r\n        }\r\n    }\r\n    return path;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}