{"ast":null,"code":"/**\r\n * A collection of keyboard-related utilities accessible via `keyboard`\r\n * instance.\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $type from \"./Type\";\n/**\r\n * A class that represents collection of keyboard-related utilities.\r\n *\r\n * Do not instantiate this class directly, but rather use `keyboard` variable.\r\n */\n\nvar Keyboard =\n/** @class */\nfunction () {\n  function Keyboard() {}\n  /**\r\n   * Returns a named key based on information contained in the event or\r\n   * \"other\".\r\n   *\r\n   * @param ev  A keyboard event\r\n   * @return Keyboard named key\r\n   */\n\n\n  Keyboard.prototype.getEventKey = function (ev) {\n    // Get the key code\n    var code = ev.keyCode || ev.which,\n        key; // Map to internal key\n\n    switch (code) {\n      case 38:\n        key = \"up\";\n        break;\n\n      case 40:\n        key = \"down\";\n        break;\n\n      case 37:\n        key = \"left\";\n        break;\n\n      case 39:\n        key = \"right\";\n        break;\n\n      case 13:\n        key = \"enter\";\n        break;\n\n      case 27:\n        key = \"esc\";\n        break;\n\n      case 36:\n        key = \"home\";\n        break;\n\n      case 35:\n        key = \"end\";\n        break;\n\n      case 9:\n        key = \"tab\";\n        break;\n\n      case 17:\n        key = \"ctrl\";\n        break;\n\n      case 18:\n        key = \"alt\";\n        break;\n\n      case 16:\n        key = \"shift\";\n        break;\n\n      case 32:\n        key = \"space\";\n        break;\n\n      case 36:\n        key = \"home\";\n        break;\n\n      case 35:\n        key = \"end\";\n        break;\n\n      case 33:\n        key = \"pgup\";\n        break;\n\n      case 34:\n        key = \"pgdn\";\n        break;\n\n      case 45:\n        key = \"ins\";\n        break;\n\n      case 46:\n        key = \"del\";\n        break;\n\n      case 107:\n        key = \"plus\";\n        break;\n\n      case 109:\n        key = \"minus\";\n        break;\n\n      default:\n        key = \"other\";\n        break;\n    }\n\n    return key;\n  };\n  /**\r\n   * Checks if event key is one or more of the selected named keys.\r\n   *\r\n   * @param ev   Keyboard event\r\n   * @param key  Named key or array of keys\r\n   * @return Is event key one of the list?\r\n   */\n\n\n  Keyboard.prototype.isKey = function (ev, key) {\n    var eventKey = this.getEventKey(ev);\n\n    if ($type.isString(key)) {\n      key = [key];\n    }\n\n    return key.indexOf(eventKey) !== -1;\n  };\n  /**\r\n   * Returns `true` if shift key was presset at the moment of the event.\r\n   *\r\n   * @param ev  Event object\r\n   * @return Was shift pressed?\r\n   */\n\n\n  Keyboard.prototype.shiftKey = function (ev) {\n    return ev.shiftKey;\n  };\n  /**\r\n   * Returns `true` if ctrl key was presset at the moment of the event.\r\n   *\r\n   * @param ev  Event object\r\n   * @return Was ctrl pressed?\r\n   */\n\n\n  Keyboard.prototype.ctrlKey = function (ev) {\n    return ev.ctrlKey;\n  };\n  /**\r\n   * Returns `true` if alt key was presset at the moment of the event\r\n   * @param ev  Event object\r\n   * @return Was alt pressed?\r\n   */\n\n\n  Keyboard.prototype.altKey = function (ev) {\n    return ev.altKey;\n  };\n  /**\r\n   * Returns `true` if meta key was presset at the moment of the event\r\n   * @param ev  Event object\r\n   * @return Was meta pressed?\r\n   */\n\n\n  Keyboard.prototype.metaKey = function (ev) {\n    return ev.metaKey;\n  };\n\n  return Keyboard;\n}();\n\nexport { Keyboard };\n/**\r\n * A single [[Keyboard]] instance to be reused across all elements so that\r\n * they don't need to instantiate their own.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport var keyboard = new Keyboard();","map":{"version":3,"names":["$type","Keyboard","prototype","getEventKey","ev","code","keyCode","which","key","isKey","eventKey","isString","indexOf","shiftKey","ctrlKey","altKey","metaKey","keyboard"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/Keyboard.js"],"sourcesContent":["/**\r\n * A collection of keyboard-related utilities accessible via `keyboard`\r\n * instance.\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $type from \"./Type\";\r\n/**\r\n * A class that represents collection of keyboard-related utilities.\r\n *\r\n * Do not instantiate this class directly, but rather use `keyboard` variable.\r\n */\r\nvar Keyboard = /** @class */ (function () {\r\n    function Keyboard() {\r\n    }\r\n    /**\r\n     * Returns a named key based on information contained in the event or\r\n     * \"other\".\r\n     *\r\n     * @param ev  A keyboard event\r\n     * @return Keyboard named key\r\n     */\r\n    Keyboard.prototype.getEventKey = function (ev) {\r\n        // Get the key code\r\n        var code = ev.keyCode || ev.which, key;\r\n        // Map to internal key\r\n        switch (code) {\r\n            case 38:\r\n                key = \"up\";\r\n                break;\r\n            case 40:\r\n                key = \"down\";\r\n                break;\r\n            case 37:\r\n                key = \"left\";\r\n                break;\r\n            case 39:\r\n                key = \"right\";\r\n                break;\r\n            case 13:\r\n                key = \"enter\";\r\n                break;\r\n            case 27:\r\n                key = \"esc\";\r\n                break;\r\n            case 36:\r\n                key = \"home\";\r\n                break;\r\n            case 35:\r\n                key = \"end\";\r\n                break;\r\n            case 9:\r\n                key = \"tab\";\r\n                break;\r\n            case 17:\r\n                key = \"ctrl\";\r\n                break;\r\n            case 18:\r\n                key = \"alt\";\r\n                break;\r\n            case 16:\r\n                key = \"shift\";\r\n                break;\r\n            case 32:\r\n                key = \"space\";\r\n                break;\r\n            case 36:\r\n                key = \"home\";\r\n                break;\r\n            case 35:\r\n                key = \"end\";\r\n                break;\r\n            case 33:\r\n                key = \"pgup\";\r\n                break;\r\n            case 34:\r\n                key = \"pgdn\";\r\n                break;\r\n            case 45:\r\n                key = \"ins\";\r\n                break;\r\n            case 46:\r\n                key = \"del\";\r\n                break;\r\n            case 107:\r\n                key = \"plus\";\r\n                break;\r\n            case 109:\r\n                key = \"minus\";\r\n                break;\r\n            default:\r\n                key = \"other\";\r\n                break;\r\n        }\r\n        return key;\r\n    };\r\n    /**\r\n     * Checks if event key is one or more of the selected named keys.\r\n     *\r\n     * @param ev   Keyboard event\r\n     * @param key  Named key or array of keys\r\n     * @return Is event key one of the list?\r\n     */\r\n    Keyboard.prototype.isKey = function (ev, key) {\r\n        var eventKey = this.getEventKey(ev);\r\n        if ($type.isString(key)) {\r\n            key = [key];\r\n        }\r\n        return key.indexOf(eventKey) !== -1;\r\n    };\r\n    /**\r\n     * Returns `true` if shift key was presset at the moment of the event.\r\n     *\r\n     * @param ev  Event object\r\n     * @return Was shift pressed?\r\n     */\r\n    Keyboard.prototype.shiftKey = function (ev) {\r\n        return ev.shiftKey;\r\n    };\r\n    /**\r\n     * Returns `true` if ctrl key was presset at the moment of the event.\r\n     *\r\n     * @param ev  Event object\r\n     * @return Was ctrl pressed?\r\n     */\r\n    Keyboard.prototype.ctrlKey = function (ev) {\r\n        return ev.ctrlKey;\r\n    };\r\n    /**\r\n     * Returns `true` if alt key was presset at the moment of the event\r\n     * @param ev  Event object\r\n     * @return Was alt pressed?\r\n     */\r\n    Keyboard.prototype.altKey = function (ev) {\r\n        return ev.altKey;\r\n    };\r\n    /**\r\n     * Returns `true` if meta key was presset at the moment of the event\r\n     * @param ev  Event object\r\n     * @return Was meta pressed?\r\n     */\r\n    Keyboard.prototype.metaKey = function (ev) {\r\n        return ev.metaKey;\r\n    };\r\n    return Keyboard;\r\n}());\r\nexport { Keyboard };\r\n/**\r\n * A single [[Keyboard]] instance to be reused across all elements so that\r\n * they don't need to instantiate their own.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport var keyboard = new Keyboard();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}