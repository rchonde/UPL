{"ast":null,"code":"/**\r\n * Data parser module.\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { DateFormatter } from \"../formatters/DateFormatter\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Base class for the data parsers.\r\n */\n\nvar DataParser =\n/** @class */\nfunction () {\n  function DataParser() {}\n  /**\r\n   * A \"placeholder\" function for real parsers to override.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param data  Source data\r\n   * @return Parsed data (empty)\r\n   */\n\n\n  DataParser.prototype.parse = function (data) {\n    return [];\n  };\n\n  ;\n  Object.defineProperty(DataParser.prototype, \"parsableNumbers\", {\n    /**\r\n     * Checks if there are any numeric fields that need to be converted to\r\n     * numbers.\r\n     *\r\n     * @return Numeric fields?\r\n     */\n    get: function () {\n      return this.options.numberFields && this.options.numberFields.length > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts a value to 'number' if it is in `numberFields`.\r\n   *\r\n   * @param field  Field name\r\n   * @param value  Value\r\n   * @return Parsed or original value\r\n   */\n\n  DataParser.prototype.maybeToNumber = function (field, value) {\n    if (this.options.numberFields.indexOf(field) !== -1) {\n      return $utils.anyToNumber(value);\n    }\n\n    return value;\n  };\n\n  Object.defineProperty(DataParser.prototype, \"parsableDates\", {\n    /**\r\n     * Checks if there are any date fields that need to be converted to `Date`\r\n     * objects.\r\n     *\r\n     * @return Date fields?\r\n     */\n    get: function () {\n      return this.options.dateFields && this.options.dateFields.length > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts a value to `Date` if it is in `dateFields`.\r\n   *\r\n   * @param field  Field name\r\n   * @param value  Value\r\n   * @return Parsed or original value\r\n   */\n\n  DataParser.prototype.maybeToDate = function (field, value) {\n    if (this.options.dateFields.indexOf(field) !== -1) {\n      return this.options.dateFormatter.parse(value, this.dateFormat);\n    }\n\n    return value;\n  };\n  /**\r\n   * Replaces empty value with something else.\r\n   *\r\n   * @param value  Source value\r\n   * @return Source value or replacement\r\n   */\n\n\n  DataParser.prototype.maybeToEmpty = function (value) {\n    if ((!$type.hasValue(value) || value == \"\") && $type.hasValue(this.options.emptyAs)) {\n      return this.options.emptyAs;\n    }\n\n    return value;\n  };\n\n  Object.defineProperty(DataParser.prototype, \"dateFormatter\", {\n    /**\r\n     * [[DateFormatter]] object for date parsing.\r\n     *\r\n     * If there was not [[DateFormatter]] supplied in parser options, a new one\r\n     * is created.\r\n     *\r\n     * @return Date formatter\r\n     * @see {@link DateFormatter}\r\n     */\n    get: function () {\n      if (!this.options.dateFormatter) {\n        this.options.dateFormatter = new DateFormatter();\n\n        if (this.options.dateFormat) {\n          this.options.dateFormat = this.options.dateFormat;\n        }\n      }\n\n      return this.options.dateFormatter;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataParser.prototype, \"dateFormat\", {\n    /**\r\n     * A date format to use when parsing dates.\r\n     *\r\n     * @return Date format\r\n     * @see {@link DateFormatter}\r\n     */\n    get: function () {\n      return this.options.dateFormat || this.dateFormatter.inputDateFormat;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DataParser;\n}();\n\nexport { DataParser };","map":{"version":3,"names":["DateFormatter","$utils","$type","DataParser","prototype","parse","data","Object","defineProperty","get","options","numberFields","length","enumerable","configurable","maybeToNumber","field","value","indexOf","anyToNumber","dateFields","maybeToDate","dateFormatter","dateFormat","maybeToEmpty","hasValue","emptyAs","inputDateFormat"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/data/DataParser.js"],"sourcesContent":["/**\r\n * Data parser module.\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { DateFormatter } from \"../formatters/DateFormatter\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Base class for the data parsers.\r\n */\r\nvar DataParser = /** @class */ (function () {\r\n    function DataParser() {\r\n    }\r\n    /**\r\n     * A \"placeholder\" function for real parsers to override.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param data  Source data\r\n     * @return Parsed data (empty)\r\n     */\r\n    DataParser.prototype.parse = function (data) {\r\n        return [];\r\n    };\r\n    ;\r\n    Object.defineProperty(DataParser.prototype, \"parsableNumbers\", {\r\n        /**\r\n         * Checks if there are any numeric fields that need to be converted to\r\n         * numbers.\r\n         *\r\n         * @return Numeric fields?\r\n         */\r\n        get: function () {\r\n            return this.options.numberFields && (this.options.numberFields.length > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts a value to 'number' if it is in `numberFields`.\r\n     *\r\n     * @param field  Field name\r\n     * @param value  Value\r\n     * @return Parsed or original value\r\n     */\r\n    DataParser.prototype.maybeToNumber = function (field, value) {\r\n        if (this.options.numberFields.indexOf(field) !== -1) {\r\n            return $utils.anyToNumber(value);\r\n        }\r\n        return value;\r\n    };\r\n    Object.defineProperty(DataParser.prototype, \"parsableDates\", {\r\n        /**\r\n         * Checks if there are any date fields that need to be converted to `Date`\r\n         * objects.\r\n         *\r\n         * @return Date fields?\r\n         */\r\n        get: function () {\r\n            return this.options.dateFields && (this.options.dateFields.length > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts a value to `Date` if it is in `dateFields`.\r\n     *\r\n     * @param field  Field name\r\n     * @param value  Value\r\n     * @return Parsed or original value\r\n     */\r\n    DataParser.prototype.maybeToDate = function (field, value) {\r\n        if (this.options.dateFields.indexOf(field) !== -1) {\r\n            return this.options.dateFormatter.parse(value, this.dateFormat);\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Replaces empty value with something else.\r\n     *\r\n     * @param value  Source value\r\n     * @return Source value or replacement\r\n     */\r\n    DataParser.prototype.maybeToEmpty = function (value) {\r\n        if ((!$type.hasValue(value) || value == \"\") && $type.hasValue(this.options.emptyAs)) {\r\n            return this.options.emptyAs;\r\n        }\r\n        return value;\r\n    };\r\n    Object.defineProperty(DataParser.prototype, \"dateFormatter\", {\r\n        /**\r\n         * [[DateFormatter]] object for date parsing.\r\n         *\r\n         * If there was not [[DateFormatter]] supplied in parser options, a new one\r\n         * is created.\r\n         *\r\n         * @return Date formatter\r\n         * @see {@link DateFormatter}\r\n         */\r\n        get: function () {\r\n            if (!this.options.dateFormatter) {\r\n                this.options.dateFormatter = new DateFormatter;\r\n                if (this.options.dateFormat) {\r\n                    this.options.dateFormat = this.options.dateFormat;\r\n                }\r\n            }\r\n            return this.options.dateFormatter;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataParser.prototype, \"dateFormat\", {\r\n        /**\r\n         * A date format to use when parsing dates.\r\n         *\r\n         * @return Date format\r\n         * @see {@link DateFormatter}\r\n         */\r\n        get: function () {\r\n            return this.options.dateFormat || this.dateFormatter.inputDateFormat;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DataParser;\r\n}());\r\nexport { DataParser };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}