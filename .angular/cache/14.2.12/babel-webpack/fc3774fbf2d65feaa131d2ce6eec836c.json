{"ast":null,"code":"/**\r\n * Sankey diagram module.\r\n */\nimport { __extends, __read, __spread } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { SankeyNode } from \"../elements/SankeyNode\";\nimport { SankeyLink } from \"../elements/SankeyLink\";\nimport { Animation } from \"../../core/utils/Animation\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $object from \"../../core/utils/Object\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo rearange notes after dragged\n\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar SankeyDiagramDataItem =\n/** @class */\nfunction (_super) {\n  __extends(SankeyDiagramDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SankeyDiagramDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"SankeyDiagramDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return SankeyDiagramDataItem;\n}(FlowDiagramDataItem);\n\nexport { SankeyDiagramDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\n\nvar SankeyDiagram =\n/** @class */\nfunction (_super) {\n  __extends(SankeyDiagram, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SankeyDiagram() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"SankeyDiagram\";\n    _this.orientation = \"horizontal\";\n    _this.nodeAlign = \"middle\";\n    _this.nodesContainer.width = percent(100);\n    _this.nodesContainer.height = percent(100);\n    _this.linksContainer.width = percent(100);\n    _this.linksContainer.height = percent(100); // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * (Re)validates chart's data, effectively causing the chart to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  SankeyDiagram.prototype.validateData = function () {\n    var _this = this;\n\n    this._valueHeight = undefined;\n\n    _super.prototype.validateData.call(this);\n\n    this._levelCount = 0;\n    this.nodes.each(function (key, node) {\n      node.level = undefined;\n    });\n    this.nodes.each(function (key, node) {\n      node.level = _this.getNodeLevel(node, 0);\n      _this._levelCount = $math.max(_this._levelCount, node.level);\n    });\n  };\n  /**\r\n   * Returns node's highest level.\r\n   *\r\n   * @param node   Node\r\n   * @param level  Current level\r\n   * @return New level\r\n   */\n\n\n  SankeyDiagram.prototype.getNodeLevel = function (node, level) {\n    var _this = this;\n\n    var levels = [level];\n    $iter.each(node.incomingDataItems.iterator(), function (link) {\n      if (link.fromNode) {\n        if ($type.isNumber(link.fromNode.level)) {\n          levels.push(link.fromNode.level + 1);\n        } else {\n          _this._counter = 0;\n\n          _this.checkLoop(link.fromNode);\n\n          if (_this._counter < _this.dataItems.length) {\n            levels.push(_this.getNodeLevel(link.fromNode, level + 1));\n          }\n        }\n      }\n    });\n    return Math.max.apply(Math, __spread(levels));\n  };\n  /**\r\n   * Checks if there's no loop in the ancestor chain.\r\n   *\r\n   * @param  node  Node\r\n   */\n\n\n  SankeyDiagram.prototype.checkLoop = function (node) {\n    var _this = this;\n\n    this._counter++;\n\n    if (this._counter > this.dataItems.length) {\n      return;\n    }\n\n    $iter.each(node.incomingDataItems.iterator(), function (link) {\n      _this.checkLoop(link.fromNode);\n    });\n  };\n  /**\r\n   * Calculates relation between pixel height and total value.\r\n   *\r\n   * In Sankey the actual thickness of links and height of nodes will depend\r\n   * on their values.\r\n   */\n\n\n  SankeyDiagram.prototype.calculateValueHeight = function () {\n    var _this = this; // calculate sums of each level\n\n\n    this._levelSum = {};\n    this._levelNodesCount = {};\n    this.maxSum = 0;\n    var total = this.dataItem.values.value.sum;\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n\n      _this.getNodeValue(node);\n    });\n    this.nodes.each(function (key, node) {\n      var level = node.level;\n      var value = Math.max(node.totalIncoming, node.totalOutgoing);\n\n      if (value / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n\n      if ($type.isNumber(_this._levelSum[level])) {\n        _this._levelSum[level] += value;\n      } else {\n        _this._levelSum[level] = value;\n      }\n\n      if ($type.isNumber(_this._levelNodesCount[level])) {\n        _this._levelNodesCount[level]++;\n      } else {\n        _this._levelNodesCount[level] = 1;\n      }\n    });\n    var availableHeight;\n\n    if (this.orientation == \"horizontal\") {\n      availableHeight = this.chartContainer.maxHeight - 1;\n    } else {\n      availableHeight = this.chartContainer.maxWidth - 1;\n    }\n\n    var maxSumLevel;\n    var minHeight;\n    $object.each(this._levelSum, function (key, value) {\n      var realValue = value;\n      var levelNodeCount = _this._levelNodesCount[key];\n      var valueHeight = (availableHeight - (levelNodeCount - 1) * _this.nodePadding) / realValue;\n\n      if (valueHeight == Infinity) {\n        valueHeight = 0;\n      }\n\n      if (minHeight > valueHeight || !$type.isNumber(minHeight)) {\n        minHeight = valueHeight;\n        _this.maxSum = realValue;\n        maxSumLevel = $type.toNumber(key);\n      }\n    });\n    this._maxSumLevel = maxSumLevel;\n    var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\n    var valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\n\n    if (valueHeight == Infinity) {\n      valueHeight = 0;\n    }\n\n    if (!$type.isNumber(this.valueHeight)) {\n      this.valueHeight = valueHeight;\n    } else {\n      var finalHeight = void 0;\n\n      try {\n        finalHeight = this._heightAnimation.animationOptions[0].to;\n      } catch (err) {} // without animations it will be non-smooth as maxValue jumps from one column to another\n\n\n      if (finalHeight != valueHeight) {\n        var duration = this.interpolationDuration;\n\n        try {\n          duration = this.nodes.template.states.getKey(\"active\").transitionDuration;\n        } catch (err) {}\n\n        this._heightAnimation = new Animation(this, {\n          property: \"valueHeight\",\n          from: this.valueHeight,\n          to: valueHeight\n        }, duration, this.interpolationEasing).start();\n\n        this._disposers.push(this._heightAnimation);\n      }\n    }\n  };\n  /**\r\n   * Redraws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  SankeyDiagram.prototype.validate = function () {\n    var _this = this;\n\n    _super.prototype.validate.call(this);\n\n    this.calculateValueHeight();\n    var container = this.nodesContainer;\n    var nextCoordinate = {};\n    var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\n    var total = this.dataItem.values.value.sum;\n    var availableHeight;\n\n    if (this.orientation == \"horizontal\") {\n      availableHeight = this.chartContainer.maxHeight - 1;\n    } else {\n      availableHeight = this.chartContainer.maxWidth - 1;\n    }\n\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      var level = node.level;\n      var levelCoordinate = 0;\n      var nodeCount = _this._levelNodesCount[level];\n\n      switch (_this.nodeAlign) {\n        case \"bottom\":\n          levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding;\n          break;\n\n        case \"middle\":\n          levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding / 2;\n          break;\n      }\n\n      if (_this.maxSum == 0) {\n        switch (_this.nodeAlign) {\n          case \"bottom\":\n            levelCoordinate = availableHeight - nodeCount * (_this.minNodeSize * availableHeight + _this.nodePadding);\n            break;\n\n          case \"middle\":\n            levelCoordinate = availableHeight / 2 - nodeCount / 2 * (_this.minNodeSize * availableHeight + _this.nodePadding);\n            break;\n        }\n      }\n\n      node.parent = container;\n      var delta;\n      var x;\n      var y;\n      var value = Math.max(node.totalIncoming, node.totalOutgoing);\n\n      if (value / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n\n      if (_this.orientation == \"horizontal\") {\n        delta = (_this.innerWidth - node.pixelWidth) / _this._levelCount;\n        x = delta * node.level;\n        y = nextCoordinate[level] || levelCoordinate;\n        var h = value * _this.valueHeight;\n\n        if (total == 0 && h == 0) {\n          h = _this.minNodeSize * availableHeight;\n        }\n\n        node.height = h;\n        node.minX = x;\n        node.maxX = x;\n        nextCoordinate[level] = y + h + _this.nodePadding;\n      } else {\n        delta = (_this.innerHeight - node.pixelHeight) / _this._levelCount;\n        x = nextCoordinate[level] || levelCoordinate;\n        y = delta * node.level;\n        var w = value * _this.valueHeight;\n\n        if (total == 0 && w == 0) {\n          w = _this.minNodeSize * availableHeight;\n        }\n\n        node.width = w;\n        node.minY = y;\n        node.maxY = y;\n        nextCoordinate[level] = x + w + _this.nodePadding;\n      }\n\n      node.x = x;\n      node.y = y;\n    });\n  };\n  /**\r\n   * Performs actual operations to reveal this element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param duration Fade in duration (ms)\r\n   * @return Fade in duration (ms)\r\n   */\n\n\n  SankeyDiagram.prototype.showReal = function (duration) {\n    var _this = this;\n\n    if (this.preventShow) {\n      return;\n    }\n\n    if (this.interpolationDuration > 0) {\n      var container_1 = this.nodesContainer;\n      var i_1 = 0;\n      $iter.each(this.links.iterator(), function (link) {\n        link.hide(0);\n      });\n      $iter.each(this._sorted, function (strNode) {\n        var node = strNode[1];\n        var property;\n\n        if (_this.orientation == \"horizontal\") {\n          node.dx = -(container_1.pixelWidth - node.pixelWidth) / Math.max(_this._levelCount, 1);\n          property = \"dx\";\n        } else {\n          node.dy = -(container_1.pixelHeight - node.pixelHeight) / Math.max(_this._levelCount, 1);\n          property = \"dy\";\n        }\n\n        var delay = 0;\n        var duration = _this.interpolationDuration;\n\n        if (_this.sequencedInterpolation) {\n          delay = _this.sequencedInterpolationDelay * i_1 + duration * i_1 / $iter.length(_this.nodes.iterator());\n        }\n\n        node.opacity = 0;\n        node.invalidateLinks();\n        node.animate([{\n          property: \"opacity\",\n          from: 0,\n          to: 1\n        }, {\n          property: property,\n          to: 0\n        }], _this.interpolationDuration, _this.interpolationEasing).delay(delay);\n        $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\n          var animation = dataItem.link.show(_this.interpolationDuration);\n\n          if (animation && !animation.isFinished()) {\n            animation.delay(delay);\n          }\n        });\n        $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\n          if (!dataItem.fromNode) {\n            var animation = dataItem.link.show(_this.interpolationDuration);\n\n            if (animation && !animation.isFinished()) {\n              animation.delay(delay);\n            }\n          }\n        });\n        i_1++;\n      });\n    }\n\n    return _super.prototype.showReal.call(this);\n  };\n  /**\r\n   * Changes the sort type of the nodes.\r\n   *\r\n   * This will actually reshuffle nodes using nice animation.\r\n   */\n\n\n  SankeyDiagram.prototype.changeSorting = function () {\n    var _this = this;\n\n    this.sortNodes();\n    var nextCoordinate = {};\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      var level = node.level;\n      var levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2;\n      var property;\n      var nodeHeight;\n\n      if (_this.orientation == \"horizontal\") {\n        property = \"y\";\n        nodeHeight = node.pixelHeight;\n      } else {\n        property = \"x\";\n        nodeHeight = node.pixelWidth;\n      }\n\n      node.animate({\n        property: property,\n        to: nextCoordinate[level] || levelCoordinate\n      }, _this.interpolationDuration, _this.interpolationEasing);\n      nextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + _this.nodePadding;\n      node.invalidateLinks();\n    });\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  SankeyDiagram.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Sankey diagram\");\n    }\n  };\n  /**\r\n   * Creates and returns a new data item.\r\n   *\r\n   * @return Data item\r\n   */\n\n\n  SankeyDiagram.prototype.createDataItem = function () {\n    return new SankeyDiagramDataItem();\n  };\n\n  Object.defineProperty(SankeyDiagram.prototype, \"nodeAlign\", {\n    /**\r\n     * @returns Returns nodeAlign value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nodeAlign\");\n    },\n\n    /**\r\n     * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n     *\r\n     * @param value  Node sorting\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"nodeAlign\", value);\n      this.changeSorting();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyDiagram.prototype, \"orientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n\n    /**\r\n     * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n     *\r\n     * @param value Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"orientation\", value, true);\n      var nameLabel = this.nodes.template.nameLabel;\n\n      if (value == \"vertical\") {\n        this.nodes.template.width = undefined;\n        nameLabel.label.horizontalCenter = \"middle\";\n        nameLabel.locationX = 0.5;\n      } else {\n        this.nodes.template.height = undefined;\n        nameLabel.label.horizontalCenter = \"left\";\n        nameLabel.locationX = 1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  SankeyDiagram.prototype.createNode = function () {\n    var node = new SankeyNode();\n\n    this._disposers.push(node);\n\n    return node;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  SankeyDiagram.prototype.createLink = function () {\n    var link = new SankeyLink();\n\n    this._disposers.push(link);\n\n    return link;\n  };\n\n  Object.defineProperty(SankeyDiagram.prototype, \"valueHeight\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._valueHeight;\n    },\n\n    /**\r\n     * @ignore\r\n     */\n    set: function (value) {\n      if (value != this._valueHeight) {\n        this._valueHeight = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  SankeyDiagram.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    this._sorted = this.nodes.iterator();\n  };\n\n  return SankeyDiagram;\n}(FlowDiagram);\n\nexport { SankeyDiagram };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;","map":{"version":3,"names":["__extends","__read","__spread","FlowDiagram","FlowDiagramDataItem","percent","registry","SankeyNode","SankeyLink","Animation","$iter","$math","$type","$object","SankeyDiagramDataItem","_super","_this","call","className","applyTheme","SankeyDiagram","orientation","nodeAlign","nodesContainer","width","height","linksContainer","prototype","validateData","_valueHeight","undefined","_levelCount","nodes","each","key","node","level","getNodeLevel","max","levels","incomingDataItems","iterator","link","fromNode","isNumber","push","_counter","checkLoop","dataItems","length","Math","apply","calculateValueHeight","_levelSum","_levelNodesCount","maxSum","total","dataItem","values","value","sum","_sorted","strNode","getNodeValue","totalIncoming","totalOutgoing","minNodeSize","availableHeight","chartContainer","maxHeight","maxWidth","maxSumLevel","minHeight","realValue","levelNodeCount","valueHeight","nodePadding","Infinity","toNumber","_maxSumLevel","maxSumLevelNodeCount","finalHeight","_heightAnimation","animationOptions","to","err","duration","interpolationDuration","template","states","getKey","transitionDuration","property","from","interpolationEasing","start","_disposers","validate","container","nextCoordinate","levelCoordinate","nodeCount","parent","delta","x","y","innerWidth","pixelWidth","h","minX","maxX","innerHeight","pixelHeight","w","minY","maxY","showReal","preventShow","container_1","i_1","links","hide","dx","dy","delay","sequencedInterpolation","sequencedInterpolationDelay","opacity","invalidateLinks","animate","outgoingDataItems","animation","show","isFinished","changeSorting","sortNodes","nodeHeight","applyInternalDefaults","hasValue","readerTitle","language","translate","createDataItem","Object","defineProperty","get","getPropertyValue","set","setPropertyValue","enumerable","configurable","nameLabel","label","horizontalCenter","locationX","createNode","createLink","invalidate","disposeData","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/types/SankeyDiagram.js"],"sourcesContent":["/**\r\n * Sankey diagram module.\r\n */\r\nimport { __extends, __read, __spread } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SankeyNode } from \"../elements/SankeyNode\";\r\nimport { SankeyLink } from \"../elements/SankeyLink\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo rearange notes after dragged\r\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar SankeyDiagramDataItem = /** @class */ (function (_super) {\r\n    __extends(SankeyDiagramDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SankeyDiagramDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"SankeyDiagramDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return SankeyDiagramDataItem;\r\n}(FlowDiagramDataItem));\r\nexport { SankeyDiagramDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\r\nvar SankeyDiagram = /** @class */ (function (_super) {\r\n    __extends(SankeyDiagram, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SankeyDiagram() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"SankeyDiagram\";\r\n        _this.orientation = \"horizontal\";\r\n        _this.nodeAlign = \"middle\";\r\n        _this.nodesContainer.width = percent(100);\r\n        _this.nodesContainer.height = percent(100);\r\n        _this.linksContainer.width = percent(100);\r\n        _this.linksContainer.height = percent(100);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)validates chart's data, effectively causing the chart to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SankeyDiagram.prototype.validateData = function () {\r\n        var _this = this;\r\n        this._valueHeight = undefined;\r\n        _super.prototype.validateData.call(this);\r\n        this._levelCount = 0;\r\n        this.nodes.each(function (key, node) {\r\n            node.level = undefined;\r\n        });\r\n        this.nodes.each(function (key, node) {\r\n            node.level = _this.getNodeLevel(node, 0);\r\n            _this._levelCount = $math.max(_this._levelCount, node.level);\r\n        });\r\n    };\r\n    /**\r\n     * Returns node's highest level.\r\n     *\r\n     * @param node   Node\r\n     * @param level  Current level\r\n     * @return New level\r\n     */\r\n    SankeyDiagram.prototype.getNodeLevel = function (node, level) {\r\n        var _this = this;\r\n        var levels = [level];\r\n        $iter.each(node.incomingDataItems.iterator(), function (link) {\r\n            if (link.fromNode) {\r\n                if ($type.isNumber(link.fromNode.level)) {\r\n                    levels.push(link.fromNode.level + 1);\r\n                }\r\n                else {\r\n                    _this._counter = 0;\r\n                    _this.checkLoop(link.fromNode);\r\n                    if (_this._counter < _this.dataItems.length) {\r\n                        levels.push(_this.getNodeLevel(link.fromNode, level + 1));\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return Math.max.apply(Math, __spread(levels));\r\n    };\r\n    /**\r\n     * Checks if there's no loop in the ancestor chain.\r\n     *\r\n     * @param  node  Node\r\n     */\r\n    SankeyDiagram.prototype.checkLoop = function (node) {\r\n        var _this = this;\r\n        this._counter++;\r\n        if (this._counter > this.dataItems.length) {\r\n            return;\r\n        }\r\n        $iter.each(node.incomingDataItems.iterator(), function (link) {\r\n            _this.checkLoop(link.fromNode);\r\n        });\r\n    };\r\n    /**\r\n     * Calculates relation between pixel height and total value.\r\n     *\r\n     * In Sankey the actual thickness of links and height of nodes will depend\r\n     * on their values.\r\n     */\r\n    SankeyDiagram.prototype.calculateValueHeight = function () {\r\n        var _this = this;\r\n        // calculate sums of each level\r\n        this._levelSum = {};\r\n        this._levelNodesCount = {};\r\n        this.maxSum = 0;\r\n        var total = this.dataItem.values.value.sum;\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            _this.getNodeValue(node);\r\n        });\r\n        this.nodes.each(function (key, node) {\r\n            var level = node.level;\r\n            var value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n            if (value / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            if ($type.isNumber(_this._levelSum[level])) {\r\n                _this._levelSum[level] += value;\r\n            }\r\n            else {\r\n                _this._levelSum[level] = value;\r\n            }\r\n            if ($type.isNumber(_this._levelNodesCount[level])) {\r\n                _this._levelNodesCount[level]++;\r\n            }\r\n            else {\r\n                _this._levelNodesCount[level] = 1;\r\n            }\r\n        });\r\n        var availableHeight;\r\n        if (this.orientation == \"horizontal\") {\r\n            availableHeight = this.chartContainer.maxHeight - 1;\r\n        }\r\n        else {\r\n            availableHeight = this.chartContainer.maxWidth - 1;\r\n        }\r\n        var maxSumLevel;\r\n        var minHeight;\r\n        $object.each(this._levelSum, function (key, value) {\r\n            var realValue = value;\r\n            var levelNodeCount = _this._levelNodesCount[key];\r\n            var valueHeight = (availableHeight - (levelNodeCount - 1) * _this.nodePadding) / realValue;\r\n            if (valueHeight == Infinity) {\r\n                valueHeight = 0;\r\n            }\r\n            if (minHeight > valueHeight || !$type.isNumber(minHeight)) {\r\n                minHeight = valueHeight;\r\n                _this.maxSum = realValue;\r\n                maxSumLevel = $type.toNumber(key);\r\n            }\r\n        });\r\n        this._maxSumLevel = maxSumLevel;\r\n        var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n        var valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\r\n        if (valueHeight == Infinity) {\r\n            valueHeight = 0;\r\n        }\r\n        if (!$type.isNumber(this.valueHeight)) {\r\n            this.valueHeight = valueHeight;\r\n        }\r\n        else {\r\n            var finalHeight = void 0;\r\n            try {\r\n                finalHeight = this._heightAnimation.animationOptions[0].to;\r\n            }\r\n            catch (err) {\r\n            }\r\n            // without animations it will be non-smooth as maxValue jumps from one column to another\r\n            if (finalHeight != valueHeight) {\r\n                var duration = this.interpolationDuration;\r\n                try {\r\n                    duration = this.nodes.template.states.getKey(\"active\").transitionDuration;\r\n                }\r\n                catch (err) {\r\n                }\r\n                this._heightAnimation = new Animation(this, { property: \"valueHeight\", from: this.valueHeight, to: valueHeight }, duration, this.interpolationEasing).start();\r\n                this._disposers.push(this._heightAnimation);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Redraws the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SankeyDiagram.prototype.validate = function () {\r\n        var _this = this;\r\n        _super.prototype.validate.call(this);\r\n        this.calculateValueHeight();\r\n        var container = this.nodesContainer;\r\n        var nextCoordinate = {};\r\n        var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n        var total = this.dataItem.values.value.sum;\r\n        var availableHeight;\r\n        if (this.orientation == \"horizontal\") {\r\n            availableHeight = this.chartContainer.maxHeight - 1;\r\n        }\r\n        else {\r\n            availableHeight = this.chartContainer.maxWidth - 1;\r\n        }\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            var level = node.level;\r\n            var levelCoordinate = 0;\r\n            var nodeCount = _this._levelNodesCount[level];\r\n            switch (_this.nodeAlign) {\r\n                case \"bottom\":\r\n                    levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding;\r\n                    break;\r\n                case \"middle\":\r\n                    levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding / 2;\r\n                    break;\r\n            }\r\n            if (_this.maxSum == 0) {\r\n                switch (_this.nodeAlign) {\r\n                    case \"bottom\":\r\n                        levelCoordinate = availableHeight - nodeCount * (_this.minNodeSize * availableHeight + _this.nodePadding);\r\n                        break;\r\n                    case \"middle\":\r\n                        levelCoordinate = availableHeight / 2 - nodeCount / 2 * (_this.minNodeSize * availableHeight + _this.nodePadding);\r\n                        break;\r\n                }\r\n            }\r\n            node.parent = container;\r\n            var delta;\r\n            var x;\r\n            var y;\r\n            var value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n            if (value / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            if (_this.orientation == \"horizontal\") {\r\n                delta = (_this.innerWidth - node.pixelWidth) / _this._levelCount;\r\n                x = delta * node.level;\r\n                y = nextCoordinate[level] || levelCoordinate;\r\n                var h = value * _this.valueHeight;\r\n                if (total == 0 && h == 0) {\r\n                    h = _this.minNodeSize * availableHeight;\r\n                }\r\n                node.height = h;\r\n                node.minX = x;\r\n                node.maxX = x;\r\n                nextCoordinate[level] = y + h + _this.nodePadding;\r\n            }\r\n            else {\r\n                delta = (_this.innerHeight - node.pixelHeight) / _this._levelCount;\r\n                x = nextCoordinate[level] || levelCoordinate;\r\n                y = delta * node.level;\r\n                var w = value * _this.valueHeight;\r\n                if (total == 0 && w == 0) {\r\n                    w = _this.minNodeSize * availableHeight;\r\n                }\r\n                node.width = w;\r\n                node.minY = y;\r\n                node.maxY = y;\r\n                nextCoordinate[level] = x + w + _this.nodePadding;\r\n            }\r\n            node.x = x;\r\n            node.y = y;\r\n        });\r\n    };\r\n    /**\r\n     * Performs actual operations to reveal this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param duration Fade in duration (ms)\r\n     * @return Fade in duration (ms)\r\n     */\r\n    SankeyDiagram.prototype.showReal = function (duration) {\r\n        var _this = this;\r\n        if (this.preventShow) {\r\n            return;\r\n        }\r\n        if (this.interpolationDuration > 0) {\r\n            var container_1 = this.nodesContainer;\r\n            var i_1 = 0;\r\n            $iter.each(this.links.iterator(), function (link) {\r\n                link.hide(0);\r\n            });\r\n            $iter.each(this._sorted, function (strNode) {\r\n                var node = strNode[1];\r\n                var property;\r\n                if (_this.orientation == \"horizontal\") {\r\n                    node.dx = -(container_1.pixelWidth - node.pixelWidth) / Math.max(_this._levelCount, 1);\r\n                    property = \"dx\";\r\n                }\r\n                else {\r\n                    node.dy = -(container_1.pixelHeight - node.pixelHeight) / Math.max(_this._levelCount, 1);\r\n                    property = \"dy\";\r\n                }\r\n                var delay = 0;\r\n                var duration = _this.interpolationDuration;\r\n                if (_this.sequencedInterpolation) {\r\n                    delay = _this.sequencedInterpolationDelay * i_1 + duration * i_1 / $iter.length(_this.nodes.iterator());\r\n                }\r\n                node.opacity = 0;\r\n                node.invalidateLinks();\r\n                node.animate([{ property: \"opacity\", from: 0, to: 1 }, { property: property, to: 0 }], _this.interpolationDuration, _this.interpolationEasing).delay(delay);\r\n                $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\r\n                    var animation = dataItem.link.show(_this.interpolationDuration);\r\n                    if (animation && !animation.isFinished()) {\r\n                        animation.delay(delay);\r\n                    }\r\n                });\r\n                $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\r\n                    if (!dataItem.fromNode) {\r\n                        var animation = dataItem.link.show(_this.interpolationDuration);\r\n                        if (animation && !animation.isFinished()) {\r\n                            animation.delay(delay);\r\n                        }\r\n                    }\r\n                });\r\n                i_1++;\r\n            });\r\n        }\r\n        return _super.prototype.showReal.call(this);\r\n    };\r\n    /**\r\n     * Changes the sort type of the nodes.\r\n     *\r\n     * This will actually reshuffle nodes using nice animation.\r\n     */\r\n    SankeyDiagram.prototype.changeSorting = function () {\r\n        var _this = this;\r\n        this.sortNodes();\r\n        var nextCoordinate = {};\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            var level = node.level;\r\n            var levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2;\r\n            var property;\r\n            var nodeHeight;\r\n            if (_this.orientation == \"horizontal\") {\r\n                property = \"y\";\r\n                nodeHeight = node.pixelHeight;\r\n            }\r\n            else {\r\n                property = \"x\";\r\n                nodeHeight = node.pixelWidth;\r\n            }\r\n            node.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, _this.interpolationDuration, _this.interpolationEasing);\r\n            nextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + _this.nodePadding;\r\n            node.invalidateLinks();\r\n        });\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    SankeyDiagram.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Sankey diagram\");\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new data item.\r\n     *\r\n     * @return Data item\r\n     */\r\n    SankeyDiagram.prototype.createDataItem = function () {\r\n        return new SankeyDiagramDataItem();\r\n    };\r\n    Object.defineProperty(SankeyDiagram.prototype, \"nodeAlign\", {\r\n        /**\r\n         * @returns Returns nodeAlign value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nodeAlign\");\r\n        },\r\n        /**\r\n         * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n         *\r\n         * @param value  Node sorting\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"nodeAlign\", value);\r\n            this.changeSorting();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyDiagram.prototype, \"orientation\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n         *\r\n         * @param value Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"orientation\", value, true);\r\n            var nameLabel = this.nodes.template.nameLabel;\r\n            if (value == \"vertical\") {\r\n                this.nodes.template.width = undefined;\r\n                nameLabel.label.horizontalCenter = \"middle\";\r\n                nameLabel.locationX = 0.5;\r\n            }\r\n            else {\r\n                this.nodes.template.height = undefined;\r\n                nameLabel.label.horizontalCenter = \"left\";\r\n                nameLabel.locationX = 1;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    SankeyDiagram.prototype.createNode = function () {\r\n        var node = new SankeyNode();\r\n        this._disposers.push(node);\r\n        return node;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    SankeyDiagram.prototype.createLink = function () {\r\n        var link = new SankeyLink();\r\n        this._disposers.push(link);\r\n        return link;\r\n    };\r\n    Object.defineProperty(SankeyDiagram.prototype, \"valueHeight\", {\r\n        /**\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return this._valueHeight;\r\n        },\r\n        /**\r\n         * @ignore\r\n         */\r\n        set: function (value) {\r\n            if (value != this._valueHeight) {\r\n                this._valueHeight = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    SankeyDiagram.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this._sorted = this.nodes.iterator();\r\n    };\r\n    return SankeyDiagram;\r\n}(FlowDiagram));\r\nexport { SankeyDiagram };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}