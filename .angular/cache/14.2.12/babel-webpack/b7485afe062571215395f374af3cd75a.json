{"ast":null,"code":"/**\r\n * Language module contains everything related to language-specific operations:\r\n * * Translating prompts\r\n * * Translating functions\r\n * * Date format localizations\r\n */\nimport { __extends, __read, __spread } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObjectEvents } from \"../Base\";\nimport { Adapter } from \"./Adapter\";\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\nimport en from \"../../../lang/en\";\nimport { options } from \"../Options\";\n;\n;\n/**\r\n * Handles all language-related tasks, like loading and storing translations,\r\n * translating prompts, lists of prompts and even functions.\r\n *\r\n * Almost every object in amCharts4 universe will have a `language` property,\r\n * which can be accessed for prompt translation.\r\n *\r\n * @see {@link ILanguageAdapters} for a list of available Adapters\r\n * @todo Make prompt keys case-insensitive\r\n * @important\r\n */\n\nvar Language =\n/** @class */\nfunction (_super) {\n  __extends(Language, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Language() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Adapter.\r\n     */\n\n\n    _this.adapter = new Adapter(_this);\n    /**\r\n     * Current locale.\r\n     */\n\n    _this._locale = en;\n    /**\r\n     * Default locale. A locale to fall back to if none is specified, or\r\n     * if there's no translation for the prompt for the current language.\r\n     */\n\n    _this._defaultLocale = en;\n    _this.className = \"Language\"; // Set default language if necessary\n\n    if ($type.hasValue(options.defaultLocale)) {\n      _this.locale = options.defaultLocale;\n    }\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns locale that is currently used.\r\n   *\r\n   * @param locale  Force locale. Will use current language if not set.\r\n   * @return Locale\r\n   */\n\n\n  Language.prototype.getLocale = function (locale) {\n    if (locale == null) {\n      locale = this._locale;\n    }\n\n    return this.adapter.apply(\"locale\", {\n      locale: locale\n    }).locale;\n  };\n  /**\r\n   * Returns the translation of the string.\r\n   *\r\n   * If the translation is empty, it will return untranslated prompt.\r\n   *\r\n   * Third parameter and up are strings that can be used to replace \"%X\"\r\n   * placeholders in prompt.\r\n   *\r\n   * E.g.:\r\n   *\r\n   * ```TypeScript\r\n   * // Results in \"This is a first translation test\"\r\n   * chart.language.translate(\"This is a %1 translation %2\", null, \"first\", \"test\");\r\n   * ```\r\n   * ```JavaScriptScript\r\n   * // Results in \"This is a first translation test\"\r\n   * chart.language.translate(\"This is a %1 translation %2\", null, \"first\", \"test\");\r\n   * ```\r\n   *\r\n   * @param  prompt   A string to translate\r\n   * @param  locale   Force translation into specific locale, e.g. fr_FR\r\n   * @param  rest     Parameters to replace in string\r\n   * @return          Translation\r\n   */\n\n\n  Language.prototype.translate = function (prompt, locale) {\n    var rest = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      rest[_i - 2] = arguments[_i];\n    } // Get langauge\n\n\n    locale = this.getLocale(locale); // Init translation\n\n    var translation = prompt; // Get translations for the locale\n\n    var translations = this.getTranslations(locale);\n    var value = translations[prompt]; // Try to look for the translation\n\n    if (value === null) {\n      translation = \"\";\n    } else if ($type.hasValue(value)) {\n      // It might be an empty string\n      if (value) {\n        translation = value;\n      }\n    } else if (locale !== this._defaultLocale) {\n      // Try to look in default language\n      return this.translate.apply(this, __spread([prompt, this._defaultLocale], rest));\n    } // Replace %1, %2, etc params\n\n\n    if (rest.length) {\n      for (var len = rest.length, i = 0; i < len; ++i) {\n        translation = translation.split(\"%\" + (i + 1)).join(rest[i]);\n      }\n    } // Return the translation\n\n\n    return this.adapter.apply(\"translate\", {\n      translation: translation,\n      locale: locale\n    }).translation;\n  };\n  /**\r\n   * Non-type-checked translation.\r\n   *\r\n   * Can be used by plugins and other code that may have their own non-standard\r\n   * translation prompts.\r\n   *\r\n   * @since 4.5.5\r\n   * @param  prompt   A string to translate\r\n   * @param  locale   Force translation into specific locale, e.g. fr_FR\r\n   * @param  rest     Parameters to replace in string\r\n   * @return          Translation\r\n   */\n\n\n  Language.prototype.translateAny = function (prompt, locale) {\n    var rest = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      rest[_i - 2] = arguments[_i];\n    }\n\n    return this.translate.apply(this, __spread([prompt, locale], rest));\n  };\n  /**\r\n   * Sets a prompt translation.\r\n   *\r\n   * @since 4.9.35\r\n   * @param  prompt       Prompt in English\r\n   * @param  translation  Translation\r\n   * @param  locale       Locale\r\n   */\n\n\n  Language.prototype.setTranslationAny = function (prompt, translation, locale) {\n    var localeTarget = locale || this.locale;\n    localeTarget[prompt] = translation;\n  };\n  /**\r\n   * Translates prompt.\r\n   *\r\n   * If translation is empty, it will return empty string, which is a different\r\n   * behavior than that of regular `translate`.\r\n   *\r\n   * @param prompt   A string to translate\r\n   * @param locale   Force translation into specific locale, e.g. fr_FR\r\n   * @param ...rest  Parameters to replace in string\r\n   * @return Translation\r\n   */\n\n\n  Language.prototype.translateEmpty = function (prompt, locale) {\n    var rest = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      rest[_i - 2] = arguments[_i];\n    }\n\n    var translation = this.translate.apply(this, __spread([prompt, locale], rest));\n    return translation == prompt ? \"\" : translation;\n  };\n  /**\r\n   * Translates a function.\r\n   *\r\n   * This method will return a function reference, but will not run it. It's\r\n   * up to the caller script to run the function.\r\n   *\r\n   * @param prompt  A function id to translate\r\n   * @param locale  Force translation into specific locale. e.g. fr_FR\r\n   * @return A language-specific version of the function\r\n   * @todo Apply adapter\r\n   */\n\n\n  Language.prototype.translateFunc = function (prompt, locale) {\n    // Get langauge\n    locale = this.getLocale(locale); // Get translations for the locale\n\n    var translations = this.getTranslations(locale);\n    var value = translations[prompt]; // Try to look for the translation\n\n    if (value != null) {\n      return value;\n    } // Try to look in default language\n\n\n    if (locale !== this._defaultLocale) {\n      return this.translateFunc(prompt, this._defaultLocale);\n    } // Fail - return empty function\n\n\n    return function () {\n      return \"\";\n    };\n  };\n  /**\r\n   * Translates a list of prompts in one go.\r\n   *\r\n   * @param list    An array of strings to translate\r\n   * @param locale  Force translation into specific locale. e.g. fr_FR\r\n   * @return An array of translated strings in the same order as source list\r\n   */\n\n\n  Language.prototype.translateAll = function (list, locale) {\n    var _this = this; // Translate all items in the list\n\n\n    if (!this.isDefault()) {\n      return $array.map(list, function (x) {\n        return _this.translate(x, locale);\n      });\n    } else {\n      return list;\n    }\n  };\n  /**\r\n   * Returns `true` if the currently selected locale is a default locale.\r\n   *\r\n   * @return `true` if locale is default; `false` if it is not.\r\n   */\n\n\n  Language.prototype.isDefault = function () {\n    return this._defaultLocale === this._locale;\n  };\n\n  Object.defineProperty(Language.prototype, \"locale\", {\n    /**\r\n     * @return Locale definition\r\n     */\n    get: function () {\n      return this._locale;\n    },\n\n    /**\r\n     * Current locale.\r\n     *\r\n     * @param value  Locale definition (translations)\r\n     */\n    set: function (value) {\n      if (this._locale != value) {\n        this._locale = value;\n\n        if (this.events.isEnabled(\"localechanged\")) {\n          var event_1 = {\n            type: \"localechanged\",\n            locale: value,\n            target: this\n          };\n          this.events.dispatchImmediately(\"localechanged\", event_1);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns translations for a given locale.\r\n   *\r\n   * @ignore\r\n   * @deprecated\r\n   * @param locale  Locale\r\n   * @return Translations\r\n   */\n\n  Language.prototype.getTranslations = function (locale) {\n    return this.adapter.apply(\"translations\", {\n      translations: locale,\n      locale: locale\n    }).translations;\n  };\n\n  return Language;\n}(BaseObjectEvents);\n\nexport { Language };","map":{"version":3,"names":["__extends","__read","__spread","BaseObjectEvents","Adapter","$array","$type","en","options","Language","_super","_this","call","adapter","_locale","_defaultLocale","className","hasValue","defaultLocale","locale","applyTheme","prototype","getLocale","apply","translate","prompt","rest","_i","arguments","length","translation","translations","getTranslations","value","len","i","split","join","translateAny","setTranslationAny","localeTarget","translateEmpty","translateFunc","translateAll","list","isDefault","map","x","Object","defineProperty","get","set","events","isEnabled","event_1","type","target","dispatchImmediately","enumerable","configurable"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/Language.js"],"sourcesContent":["/**\r\n * Language module contains everything related to language-specific operations:\r\n * * Translating prompts\r\n * * Translating functions\r\n * * Date format localizations\r\n */\r\nimport { __extends, __read, __spread } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { Adapter } from \"./Adapter\";\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\nimport en from \"../../../lang/en\";\r\nimport { options } from \"../Options\";\r\n;\r\n;\r\n/**\r\n * Handles all language-related tasks, like loading and storing translations,\r\n * translating prompts, lists of prompts and even functions.\r\n *\r\n * Almost every object in amCharts4 universe will have a `language` property,\r\n * which can be accessed for prompt translation.\r\n *\r\n * @see {@link ILanguageAdapters} for a list of available Adapters\r\n * @todo Make prompt keys case-insensitive\r\n * @important\r\n */\r\nvar Language = /** @class */ (function (_super) {\r\n    __extends(Language, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Language() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Adapter.\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        /**\r\n         * Current locale.\r\n         */\r\n        _this._locale = en;\r\n        /**\r\n         * Default locale. A locale to fall back to if none is specified, or\r\n         * if there's no translation for the prompt for the current language.\r\n         */\r\n        _this._defaultLocale = en;\r\n        _this.className = \"Language\";\r\n        // Set default language if necessary\r\n        if ($type.hasValue(options.defaultLocale)) {\r\n            _this.locale = options.defaultLocale;\r\n        }\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns locale that is currently used.\r\n     *\r\n     * @param locale  Force locale. Will use current language if not set.\r\n     * @return Locale\r\n     */\r\n    Language.prototype.getLocale = function (locale) {\r\n        if (locale == null) {\r\n            locale = this._locale;\r\n        }\r\n        return this.adapter.apply(\"locale\", {\r\n            locale: locale\r\n        }).locale;\r\n    };\r\n    /**\r\n     * Returns the translation of the string.\r\n     *\r\n     * If the translation is empty, it will return untranslated prompt.\r\n     *\r\n     * Third parameter and up are strings that can be used to replace \"%X\"\r\n     * placeholders in prompt.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * // Results in \"This is a first translation test\"\r\n     * chart.language.translate(\"This is a %1 translation %2\", null, \"first\", \"test\");\r\n     * ```\r\n     * ```JavaScriptScript\r\n     * // Results in \"This is a first translation test\"\r\n     * chart.language.translate(\"This is a %1 translation %2\", null, \"first\", \"test\");\r\n     * ```\r\n     *\r\n     * @param  prompt   A string to translate\r\n     * @param  locale   Force translation into specific locale, e.g. fr_FR\r\n     * @param  rest     Parameters to replace in string\r\n     * @return          Translation\r\n     */\r\n    Language.prototype.translate = function (prompt, locale) {\r\n        var rest = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            rest[_i - 2] = arguments[_i];\r\n        }\r\n        // Get langauge\r\n        locale = this.getLocale(locale);\r\n        // Init translation\r\n        var translation = prompt;\r\n        // Get translations for the locale\r\n        var translations = this.getTranslations(locale);\r\n        var value = translations[prompt];\r\n        // Try to look for the translation\r\n        if (value === null) {\r\n            translation = \"\";\r\n        }\r\n        else if ($type.hasValue(value)) {\r\n            // It might be an empty string\r\n            if (value) {\r\n                translation = value;\r\n            }\r\n        }\r\n        else if (locale !== this._defaultLocale) {\r\n            // Try to look in default language\r\n            return this.translate.apply(this, __spread([prompt, this._defaultLocale], rest));\r\n        }\r\n        // Replace %1, %2, etc params\r\n        if (rest.length) {\r\n            for (var len = rest.length, i = 0; i < len; ++i) {\r\n                translation = translation.split(\"%\" + (i + 1)).join(rest[i]);\r\n            }\r\n        }\r\n        // Return the translation\r\n        return this.adapter.apply(\"translate\", {\r\n            translation: translation,\r\n            locale: locale\r\n        }).translation;\r\n    };\r\n    /**\r\n     * Non-type-checked translation.\r\n     *\r\n     * Can be used by plugins and other code that may have their own non-standard\r\n     * translation prompts.\r\n     *\r\n     * @since 4.5.5\r\n     * @param  prompt   A string to translate\r\n     * @param  locale   Force translation into specific locale, e.g. fr_FR\r\n     * @param  rest     Parameters to replace in string\r\n     * @return          Translation\r\n     */\r\n    Language.prototype.translateAny = function (prompt, locale) {\r\n        var rest = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            rest[_i - 2] = arguments[_i];\r\n        }\r\n        return this.translate.apply(this, __spread([prompt, locale], rest));\r\n    };\r\n    /**\r\n     * Sets a prompt translation.\r\n     *\r\n     * @since 4.9.35\r\n     * @param  prompt       Prompt in English\r\n     * @param  translation  Translation\r\n     * @param  locale       Locale\r\n     */\r\n    Language.prototype.setTranslationAny = function (prompt, translation, locale) {\r\n        var localeTarget = locale || this.locale;\r\n        localeTarget[prompt] = translation;\r\n    };\r\n    /**\r\n     * Translates prompt.\r\n     *\r\n     * If translation is empty, it will return empty string, which is a different\r\n     * behavior than that of regular `translate`.\r\n     *\r\n     * @param prompt   A string to translate\r\n     * @param locale   Force translation into specific locale, e.g. fr_FR\r\n     * @param ...rest  Parameters to replace in string\r\n     * @return Translation\r\n     */\r\n    Language.prototype.translateEmpty = function (prompt, locale) {\r\n        var rest = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            rest[_i - 2] = arguments[_i];\r\n        }\r\n        var translation = this.translate.apply(this, __spread([prompt, locale], rest));\r\n        return translation == prompt ? \"\" : translation;\r\n    };\r\n    /**\r\n     * Translates a function.\r\n     *\r\n     * This method will return a function reference, but will not run it. It's\r\n     * up to the caller script to run the function.\r\n     *\r\n     * @param prompt  A function id to translate\r\n     * @param locale  Force translation into specific locale. e.g. fr_FR\r\n     * @return A language-specific version of the function\r\n     * @todo Apply adapter\r\n     */\r\n    Language.prototype.translateFunc = function (prompt, locale) {\r\n        // Get langauge\r\n        locale = this.getLocale(locale);\r\n        // Get translations for the locale\r\n        var translations = this.getTranslations(locale);\r\n        var value = translations[prompt];\r\n        // Try to look for the translation\r\n        if (value != null) {\r\n            return value;\r\n        }\r\n        // Try to look in default language\r\n        if (locale !== this._defaultLocale) {\r\n            return this.translateFunc(prompt, this._defaultLocale);\r\n        }\r\n        // Fail - return empty function\r\n        return function () {\r\n            return \"\";\r\n        };\r\n    };\r\n    /**\r\n     * Translates a list of prompts in one go.\r\n     *\r\n     * @param list    An array of strings to translate\r\n     * @param locale  Force translation into specific locale. e.g. fr_FR\r\n     * @return An array of translated strings in the same order as source list\r\n     */\r\n    Language.prototype.translateAll = function (list, locale) {\r\n        var _this = this;\r\n        // Translate all items in the list\r\n        if (!this.isDefault()) {\r\n            return $array.map(list, function (x) { return _this.translate(x, locale); });\r\n        }\r\n        else {\r\n            return list;\r\n        }\r\n    };\r\n    /**\r\n     * Returns `true` if the currently selected locale is a default locale.\r\n     *\r\n     * @return `true` if locale is default; `false` if it is not.\r\n     */\r\n    Language.prototype.isDefault = function () {\r\n        return this._defaultLocale === this._locale;\r\n    };\r\n    Object.defineProperty(Language.prototype, \"locale\", {\r\n        /**\r\n         * @return Locale definition\r\n         */\r\n        get: function () {\r\n            return this._locale;\r\n        },\r\n        /**\r\n         * Current locale.\r\n         *\r\n         * @param value  Locale definition (translations)\r\n         */\r\n        set: function (value) {\r\n            if (this._locale != value) {\r\n                this._locale = value;\r\n                if (this.events.isEnabled(\"localechanged\")) {\r\n                    var event_1 = {\r\n                        type: \"localechanged\",\r\n                        locale: value,\r\n                        target: this\r\n                    };\r\n                    this.events.dispatchImmediately(\"localechanged\", event_1);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns translations for a given locale.\r\n     *\r\n     * @ignore\r\n     * @deprecated\r\n     * @param locale  Locale\r\n     * @return Translations\r\n     */\r\n    Language.prototype.getTranslations = function (locale) {\r\n        return this.adapter.apply(\"translations\", {\r\n            translations: locale,\r\n            locale: locale\r\n        }).translations;\r\n    };\r\n    return Language;\r\n}(BaseObjectEvents));\r\nexport { Language };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}