{"ast":null,"code":"import ENGLISH from './i18n';\nimport { RRule } from '../rrule'; // =============================================================================\n// Parser\n// =============================================================================\n\nvar Parser =\n/** @class */\nfunction () {\n  function Parser(rules) {\n    this.done = true;\n    this.rules = rules;\n  }\n\n  Parser.prototype.start = function (text) {\n    this.text = text;\n    this.done = false;\n    return this.nextSymbol();\n  };\n\n  Parser.prototype.isDone = function () {\n    return this.done && this.symbol === null;\n  };\n\n  Parser.prototype.nextSymbol = function () {\n    var best;\n    var bestSymbol;\n    this.symbol = null;\n    this.value = null;\n\n    do {\n      if (this.done) return false;\n      var rule = void 0;\n      best = null;\n\n      for (var name_1 in this.rules) {\n        rule = this.rules[name_1];\n        var match = rule.exec(this.text);\n\n        if (match) {\n          if (best === null || match[0].length > best[0].length) {\n            best = match;\n            bestSymbol = name_1;\n          }\n        }\n      }\n\n      if (best != null) {\n        this.text = this.text.substr(best[0].length);\n        if (this.text === '') this.done = true;\n      }\n\n      if (best == null) {\n        this.done = true;\n        this.symbol = null;\n        this.value = null;\n        return;\n      }\n    } while (bestSymbol === 'SKIP');\n\n    this.symbol = bestSymbol;\n    this.value = best;\n    return true;\n  };\n\n  Parser.prototype.accept = function (name) {\n    if (this.symbol === name) {\n      if (this.value) {\n        var v = this.value;\n        this.nextSymbol();\n        return v;\n      }\n\n      this.nextSymbol();\n      return true;\n    }\n\n    return false;\n  };\n\n  Parser.prototype.acceptNumber = function () {\n    return this.accept('number');\n  };\n\n  Parser.prototype.expect = function (name) {\n    if (this.accept(name)) return true;\n    throw new Error('expected ' + name + ' but found ' + this.symbol);\n  };\n\n  return Parser;\n}();\n\nexport default function parseText(text, language) {\n  if (language === void 0) {\n    language = ENGLISH;\n  }\n\n  var options = {};\n  var ttr = new Parser(language.tokens);\n  if (!ttr.start(text)) return null;\n  S();\n  return options;\n\n  function S() {\n    // every [n]\n    ttr.expect('every');\n    var n = ttr.acceptNumber();\n    if (n) options.interval = parseInt(n[0], 10);\n    if (ttr.isDone()) throw new Error('Unexpected end');\n\n    switch (ttr.symbol) {\n      case 'day(s)':\n        options.freq = RRule.DAILY;\n\n        if (ttr.nextSymbol()) {\n          AT();\n          F();\n        }\n\n        break;\n      // FIXME Note: every 2 weekdays != every two weeks on weekdays.\n      // DAILY on weekdays is not a valid rule\n\n      case 'weekday(s)':\n        options.freq = RRule.WEEKLY;\n        options.byweekday = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR];\n        ttr.nextSymbol();\n        F();\n        break;\n\n      case 'week(s)':\n        options.freq = RRule.WEEKLY;\n\n        if (ttr.nextSymbol()) {\n          ON();\n          F();\n        }\n\n        break;\n\n      case 'hour(s)':\n        options.freq = RRule.HOURLY;\n\n        if (ttr.nextSymbol()) {\n          ON();\n          F();\n        }\n\n        break;\n\n      case 'minute(s)':\n        options.freq = RRule.MINUTELY;\n\n        if (ttr.nextSymbol()) {\n          ON();\n          F();\n        }\n\n        break;\n\n      case 'month(s)':\n        options.freq = RRule.MONTHLY;\n\n        if (ttr.nextSymbol()) {\n          ON();\n          F();\n        }\n\n        break;\n\n      case 'year(s)':\n        options.freq = RRule.YEARLY;\n\n        if (ttr.nextSymbol()) {\n          ON();\n          F();\n        }\n\n        break;\n\n      case 'monday':\n      case 'tuesday':\n      case 'wednesday':\n      case 'thursday':\n      case 'friday':\n      case 'saturday':\n      case 'sunday':\n        options.freq = RRule.WEEKLY;\n        var key = ttr.symbol.substr(0, 2).toUpperCase();\n        options.byweekday = [RRule[key]];\n        if (!ttr.nextSymbol()) return; // TODO check for duplicates\n\n        while (ttr.accept('comma')) {\n          if (ttr.isDone()) throw new Error('Unexpected end');\n          var wkd = decodeWKD();\n\n          if (!wkd) {\n            throw new Error('Unexpected symbol ' + ttr.symbol + ', expected weekday');\n          }\n\n          options.byweekday.push(RRule[wkd]);\n          ttr.nextSymbol();\n        }\n\n        MDAYs();\n        F();\n        break;\n\n      case 'january':\n      case 'february':\n      case 'march':\n      case 'april':\n      case 'may':\n      case 'june':\n      case 'july':\n      case 'august':\n      case 'september':\n      case 'october':\n      case 'november':\n      case 'december':\n        options.freq = RRule.YEARLY;\n        options.bymonth = [decodeM()];\n        if (!ttr.nextSymbol()) return; // TODO check for duplicates\n\n        while (ttr.accept('comma')) {\n          if (ttr.isDone()) throw new Error('Unexpected end');\n          var m = decodeM();\n\n          if (!m) {\n            throw new Error('Unexpected symbol ' + ttr.symbol + ', expected month');\n          }\n\n          options.bymonth.push(m);\n          ttr.nextSymbol();\n        }\n\n        ON();\n        F();\n        break;\n\n      default:\n        throw new Error('Unknown symbol');\n    }\n  }\n\n  function ON() {\n    var on = ttr.accept('on');\n    var the = ttr.accept('the');\n    if (!(on || the)) return;\n\n    do {\n      var nth = decodeNTH();\n      var wkd = decodeWKD();\n      var m = decodeM(); // nth <weekday> | <weekday>\n\n      if (nth) {\n        // ttr.nextSymbol()\n        if (wkd) {\n          ttr.nextSymbol();\n          if (!options.byweekday) options.byweekday = [];\n          options.byweekday.push(RRule[wkd].nth(nth));\n        } else {\n          if (!options.bymonthday) options.bymonthday = [];\n          options.bymonthday.push(nth);\n          ttr.accept('day(s)');\n        } // <weekday>\n\n      } else if (wkd) {\n        ttr.nextSymbol();\n        if (!options.byweekday) options.byweekday = [];\n        options.byweekday.push(RRule[wkd]);\n      } else if (ttr.symbol === 'weekday(s)') {\n        ttr.nextSymbol();\n\n        if (!options.byweekday) {\n          options.byweekday = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR];\n        }\n      } else if (ttr.symbol === 'week(s)') {\n        ttr.nextSymbol();\n        var n = ttr.acceptNumber();\n\n        if (!n) {\n          throw new Error('Unexpected symbol ' + ttr.symbol + ', expected week number');\n        }\n\n        options.byweekno = [parseInt(n[0], 10)];\n\n        while (ttr.accept('comma')) {\n          n = ttr.acceptNumber();\n\n          if (!n) {\n            throw new Error('Unexpected symbol ' + ttr.symbol + '; expected monthday');\n          }\n\n          options.byweekno.push(parseInt(n[0], 10));\n        }\n      } else if (m) {\n        ttr.nextSymbol();\n        if (!options.bymonth) options.bymonth = [];\n        options.bymonth.push(m);\n      } else {\n        return;\n      }\n    } while (ttr.accept('comma') || ttr.accept('the') || ttr.accept('on'));\n  }\n\n  function AT() {\n    var at = ttr.accept('at');\n    if (!at) return;\n\n    do {\n      var n = ttr.acceptNumber();\n\n      if (!n) {\n        throw new Error('Unexpected symbol ' + ttr.symbol + ', expected hour');\n      }\n\n      options.byhour = [parseInt(n[0], 10)];\n\n      while (ttr.accept('comma')) {\n        n = ttr.acceptNumber();\n\n        if (!n) {\n          throw new Error('Unexpected symbol ' + ttr.symbol + '; expected hour');\n        }\n\n        options.byhour.push(parseInt(n[0], 10));\n      }\n    } while (ttr.accept('comma') || ttr.accept('at'));\n  }\n\n  function decodeM() {\n    switch (ttr.symbol) {\n      case 'january':\n        return 1;\n\n      case 'february':\n        return 2;\n\n      case 'march':\n        return 3;\n\n      case 'april':\n        return 4;\n\n      case 'may':\n        return 5;\n\n      case 'june':\n        return 6;\n\n      case 'july':\n        return 7;\n\n      case 'august':\n        return 8;\n\n      case 'september':\n        return 9;\n\n      case 'october':\n        return 10;\n\n      case 'november':\n        return 11;\n\n      case 'december':\n        return 12;\n\n      default:\n        return false;\n    }\n  }\n\n  function decodeWKD() {\n    switch (ttr.symbol) {\n      case 'monday':\n      case 'tuesday':\n      case 'wednesday':\n      case 'thursday':\n      case 'friday':\n      case 'saturday':\n      case 'sunday':\n        return ttr.symbol.substr(0, 2).toUpperCase();\n\n      default:\n        return false;\n    }\n  }\n\n  function decodeNTH() {\n    switch (ttr.symbol) {\n      case 'last':\n        ttr.nextSymbol();\n        return -1;\n\n      case 'first':\n        ttr.nextSymbol();\n        return 1;\n\n      case 'second':\n        ttr.nextSymbol();\n        return ttr.accept('last') ? -2 : 2;\n\n      case 'third':\n        ttr.nextSymbol();\n        return ttr.accept('last') ? -3 : 3;\n\n      case 'nth':\n        var v = parseInt(ttr.value[1], 10);\n        if (v < -366 || v > 366) throw new Error('Nth out of range: ' + v);\n        ttr.nextSymbol();\n        return ttr.accept('last') ? -v : v;\n\n      default:\n        return false;\n    }\n  }\n\n  function MDAYs() {\n    ttr.accept('on');\n    ttr.accept('the');\n    var nth = decodeNTH();\n    if (!nth) return;\n    options.bymonthday = [nth];\n    ttr.nextSymbol();\n\n    while (ttr.accept('comma')) {\n      nth = decodeNTH();\n\n      if (!nth) {\n        throw new Error('Unexpected symbol ' + ttr.symbol + '; expected monthday');\n      }\n\n      options.bymonthday.push(nth);\n      ttr.nextSymbol();\n    }\n  }\n\n  function F() {\n    if (ttr.symbol === 'until') {\n      var date = Date.parse(ttr.text);\n      if (!date) throw new Error('Cannot parse until date:' + ttr.text);\n      options.until = new Date(date);\n    } else if (ttr.accept('for')) {\n      options.count = parseInt(ttr.value[0], 10);\n      ttr.expect('number'); // ttr.expect('times')\n    }\n  }\n}","map":{"version":3,"names":["ENGLISH","RRule","Parser","rules","done","prototype","start","text","nextSymbol","isDone","symbol","best","bestSymbol","value","rule","name_1","match","exec","length","substr","accept","name","v","acceptNumber","expect","Error","parseText","language","options","ttr","tokens","S","n","interval","parseInt","freq","DAILY","AT","F","WEEKLY","byweekday","MO","TU","WE","TH","FR","ON","HOURLY","MINUTELY","MONTHLY","YEARLY","key","toUpperCase","wkd","decodeWKD","push","MDAYs","bymonth","decodeM","m","on","the","nth","decodeNTH","bymonthday","byweekno","at","byhour","date","Date","parse","until","count"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/rrule/dist/esm/nlp/parsetext.js"],"sourcesContent":["import ENGLISH from './i18n';\nimport { RRule } from '../rrule';\n// =============================================================================\n// Parser\n// =============================================================================\nvar Parser = /** @class */ (function () {\n    function Parser(rules) {\n        this.done = true;\n        this.rules = rules;\n    }\n    Parser.prototype.start = function (text) {\n        this.text = text;\n        this.done = false;\n        return this.nextSymbol();\n    };\n    Parser.prototype.isDone = function () {\n        return this.done && this.symbol === null;\n    };\n    Parser.prototype.nextSymbol = function () {\n        var best;\n        var bestSymbol;\n        this.symbol = null;\n        this.value = null;\n        do {\n            if (this.done)\n                return false;\n            var rule = void 0;\n            best = null;\n            for (var name_1 in this.rules) {\n                rule = this.rules[name_1];\n                var match = rule.exec(this.text);\n                if (match) {\n                    if (best === null || match[0].length > best[0].length) {\n                        best = match;\n                        bestSymbol = name_1;\n                    }\n                }\n            }\n            if (best != null) {\n                this.text = this.text.substr(best[0].length);\n                if (this.text === '')\n                    this.done = true;\n            }\n            if (best == null) {\n                this.done = true;\n                this.symbol = null;\n                this.value = null;\n                return;\n            }\n        } while (bestSymbol === 'SKIP');\n        this.symbol = bestSymbol;\n        this.value = best;\n        return true;\n    };\n    Parser.prototype.accept = function (name) {\n        if (this.symbol === name) {\n            if (this.value) {\n                var v = this.value;\n                this.nextSymbol();\n                return v;\n            }\n            this.nextSymbol();\n            return true;\n        }\n        return false;\n    };\n    Parser.prototype.acceptNumber = function () {\n        return this.accept('number');\n    };\n    Parser.prototype.expect = function (name) {\n        if (this.accept(name))\n            return true;\n        throw new Error('expected ' + name + ' but found ' + this.symbol);\n    };\n    return Parser;\n}());\nexport default function parseText(text, language) {\n    if (language === void 0) { language = ENGLISH; }\n    var options = {};\n    var ttr = new Parser(language.tokens);\n    if (!ttr.start(text))\n        return null;\n    S();\n    return options;\n    function S() {\n        // every [n]\n        ttr.expect('every');\n        var n = ttr.acceptNumber();\n        if (n)\n            options.interval = parseInt(n[0], 10);\n        if (ttr.isDone())\n            throw new Error('Unexpected end');\n        switch (ttr.symbol) {\n            case 'day(s)':\n                options.freq = RRule.DAILY;\n                if (ttr.nextSymbol()) {\n                    AT();\n                    F();\n                }\n                break;\n            // FIXME Note: every 2 weekdays != every two weeks on weekdays.\n            // DAILY on weekdays is not a valid rule\n            case 'weekday(s)':\n                options.freq = RRule.WEEKLY;\n                options.byweekday = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR];\n                ttr.nextSymbol();\n                F();\n                break;\n            case 'week(s)':\n                options.freq = RRule.WEEKLY;\n                if (ttr.nextSymbol()) {\n                    ON();\n                    F();\n                }\n                break;\n            case 'hour(s)':\n                options.freq = RRule.HOURLY;\n                if (ttr.nextSymbol()) {\n                    ON();\n                    F();\n                }\n                break;\n            case 'minute(s)':\n                options.freq = RRule.MINUTELY;\n                if (ttr.nextSymbol()) {\n                    ON();\n                    F();\n                }\n                break;\n            case 'month(s)':\n                options.freq = RRule.MONTHLY;\n                if (ttr.nextSymbol()) {\n                    ON();\n                    F();\n                }\n                break;\n            case 'year(s)':\n                options.freq = RRule.YEARLY;\n                if (ttr.nextSymbol()) {\n                    ON();\n                    F();\n                }\n                break;\n            case 'monday':\n            case 'tuesday':\n            case 'wednesday':\n            case 'thursday':\n            case 'friday':\n            case 'saturday':\n            case 'sunday':\n                options.freq = RRule.WEEKLY;\n                var key = ttr.symbol\n                    .substr(0, 2)\n                    .toUpperCase();\n                options.byweekday = [RRule[key]];\n                if (!ttr.nextSymbol())\n                    return;\n                // TODO check for duplicates\n                while (ttr.accept('comma')) {\n                    if (ttr.isDone())\n                        throw new Error('Unexpected end');\n                    var wkd = decodeWKD();\n                    if (!wkd) {\n                        throw new Error('Unexpected symbol ' + ttr.symbol + ', expected weekday');\n                    }\n                    options.byweekday.push(RRule[wkd]);\n                    ttr.nextSymbol();\n                }\n                MDAYs();\n                F();\n                break;\n            case 'january':\n            case 'february':\n            case 'march':\n            case 'april':\n            case 'may':\n            case 'june':\n            case 'july':\n            case 'august':\n            case 'september':\n            case 'october':\n            case 'november':\n            case 'december':\n                options.freq = RRule.YEARLY;\n                options.bymonth = [decodeM()];\n                if (!ttr.nextSymbol())\n                    return;\n                // TODO check for duplicates\n                while (ttr.accept('comma')) {\n                    if (ttr.isDone())\n                        throw new Error('Unexpected end');\n                    var m = decodeM();\n                    if (!m) {\n                        throw new Error('Unexpected symbol ' + ttr.symbol + ', expected month');\n                    }\n                    options.bymonth.push(m);\n                    ttr.nextSymbol();\n                }\n                ON();\n                F();\n                break;\n            default:\n                throw new Error('Unknown symbol');\n        }\n    }\n    function ON() {\n        var on = ttr.accept('on');\n        var the = ttr.accept('the');\n        if (!(on || the))\n            return;\n        do {\n            var nth = decodeNTH();\n            var wkd = decodeWKD();\n            var m = decodeM();\n            // nth <weekday> | <weekday>\n            if (nth) {\n                // ttr.nextSymbol()\n                if (wkd) {\n                    ttr.nextSymbol();\n                    if (!options.byweekday)\n                        options.byweekday = [];\n                    options.byweekday.push(RRule[wkd].nth(nth));\n                }\n                else {\n                    if (!options.bymonthday)\n                        options.bymonthday = [];\n                    options.bymonthday.push(nth);\n                    ttr.accept('day(s)');\n                }\n                // <weekday>\n            }\n            else if (wkd) {\n                ttr.nextSymbol();\n                if (!options.byweekday)\n                    options.byweekday = [];\n                options.byweekday.push(RRule[wkd]);\n            }\n            else if (ttr.symbol === 'weekday(s)') {\n                ttr.nextSymbol();\n                if (!options.byweekday) {\n                    options.byweekday = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR];\n                }\n            }\n            else if (ttr.symbol === 'week(s)') {\n                ttr.nextSymbol();\n                var n = ttr.acceptNumber();\n                if (!n) {\n                    throw new Error('Unexpected symbol ' + ttr.symbol + ', expected week number');\n                }\n                options.byweekno = [parseInt(n[0], 10)];\n                while (ttr.accept('comma')) {\n                    n = ttr.acceptNumber();\n                    if (!n) {\n                        throw new Error('Unexpected symbol ' + ttr.symbol + '; expected monthday');\n                    }\n                    options.byweekno.push(parseInt(n[0], 10));\n                }\n            }\n            else if (m) {\n                ttr.nextSymbol();\n                if (!options.bymonth)\n                    options.bymonth = [];\n                options.bymonth.push(m);\n            }\n            else {\n                return;\n            }\n        } while (ttr.accept('comma') || ttr.accept('the') || ttr.accept('on'));\n    }\n    function AT() {\n        var at = ttr.accept('at');\n        if (!at)\n            return;\n        do {\n            var n = ttr.acceptNumber();\n            if (!n) {\n                throw new Error('Unexpected symbol ' + ttr.symbol + ', expected hour');\n            }\n            options.byhour = [parseInt(n[0], 10)];\n            while (ttr.accept('comma')) {\n                n = ttr.acceptNumber();\n                if (!n) {\n                    throw new Error('Unexpected symbol ' + ttr.symbol + '; expected hour');\n                }\n                options.byhour.push(parseInt(n[0], 10));\n            }\n        } while (ttr.accept('comma') || ttr.accept('at'));\n    }\n    function decodeM() {\n        switch (ttr.symbol) {\n            case 'january':\n                return 1;\n            case 'february':\n                return 2;\n            case 'march':\n                return 3;\n            case 'april':\n                return 4;\n            case 'may':\n                return 5;\n            case 'june':\n                return 6;\n            case 'july':\n                return 7;\n            case 'august':\n                return 8;\n            case 'september':\n                return 9;\n            case 'october':\n                return 10;\n            case 'november':\n                return 11;\n            case 'december':\n                return 12;\n            default:\n                return false;\n        }\n    }\n    function decodeWKD() {\n        switch (ttr.symbol) {\n            case 'monday':\n            case 'tuesday':\n            case 'wednesday':\n            case 'thursday':\n            case 'friday':\n            case 'saturday':\n            case 'sunday':\n                return ttr.symbol.substr(0, 2).toUpperCase();\n            default:\n                return false;\n        }\n    }\n    function decodeNTH() {\n        switch (ttr.symbol) {\n            case 'last':\n                ttr.nextSymbol();\n                return -1;\n            case 'first':\n                ttr.nextSymbol();\n                return 1;\n            case 'second':\n                ttr.nextSymbol();\n                return ttr.accept('last') ? -2 : 2;\n            case 'third':\n                ttr.nextSymbol();\n                return ttr.accept('last') ? -3 : 3;\n            case 'nth':\n                var v = parseInt(ttr.value[1], 10);\n                if (v < -366 || v > 366)\n                    throw new Error('Nth out of range: ' + v);\n                ttr.nextSymbol();\n                return ttr.accept('last') ? -v : v;\n            default:\n                return false;\n        }\n    }\n    function MDAYs() {\n        ttr.accept('on');\n        ttr.accept('the');\n        var nth = decodeNTH();\n        if (!nth)\n            return;\n        options.bymonthday = [nth];\n        ttr.nextSymbol();\n        while (ttr.accept('comma')) {\n            nth = decodeNTH();\n            if (!nth) {\n                throw new Error('Unexpected symbol ' + ttr.symbol + '; expected monthday');\n            }\n            options.bymonthday.push(nth);\n            ttr.nextSymbol();\n        }\n    }\n    function F() {\n        if (ttr.symbol === 'until') {\n            var date = Date.parse(ttr.text);\n            if (!date)\n                throw new Error('Cannot parse until date:' + ttr.text);\n            options.until = new Date(date);\n        }\n        else if (ttr.accept('for')) {\n            options.count = parseInt(ttr.value[0], 10);\n            ttr.expect('number');\n            // ttr.expect('times')\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}