{"ast":null,"code":"/**\r\n * This module contains ColorSet object definition\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../Base\";\nimport { Color, color } from \"./Color\";\nimport { registry } from \"../Registry\";\nimport * as $colors from \"./Colors\";\nimport * as $type from \"./Type\";\nimport * as $utils from \"./Utils\";\nimport * as $math from \"./Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Represents a set of colors. Can also generate colors according to set rules.\r\n *\r\n * @important\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\n\nvar ColorSet =\n/** @class */\nfunction (_super) {\n  __extends(ColorSet, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ColorSet() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Holds the list of the colors in this set. (preset or auto-generated)\r\n     */\n\n\n    _this._list = [];\n    /**\r\n     * Current step in a color generator's cycle.\r\n     */\n\n    _this._currentStep = 0;\n    /**\r\n     * If set to non-zero value, the ColorSet will start iterating colors from\r\n     * that particular index, not the first color in the list.\r\n     */\n\n    _this._startIndex = 0;\n    /**\r\n     * Current pass in the color generator's cycle. Normally a generator would\r\n     * cycle through all available hue range, then repeat it, alternating other\r\n     * color properties, to generate distinctive colors.\r\n     */\n\n    _this._currentPass = 0;\n    /**\r\n     * A base color. If there are no colors pre-set in the color list, ColorSet\r\n     * will use this color as a base when generating new ones, applying\r\n     * `stepOptions` and `passOptions` to this base color.\r\n     */\n\n    _this.baseColor = new Color({\n      r: 103,\n      g: 183,\n      b: 220\n    });\n    /**\r\n     * Modifications to apply with each new generated color.\r\n     */\n\n    _this.stepOptions = {};\n    /**\r\n     * Modifications to apply on top of `stepOptions` for each \"pass\" of the\r\n     * color generation.\r\n     *\r\n     * A \"pass\" is when ColorSet generates `minColors` number of colors.\r\n     */\n\n    _this.passOptions = {\n      brighten: -0.2\n    };\n    /**\r\n     * An index increment to use when iterating through color list.\r\n     *\r\n     * Default is 1, which means returning each and every color.\r\n     *\r\n     * Setting it to a bigger number will make ColorSet `next()` iterator skip\r\n     * some colors.\r\n     *\r\n     * E.g. setting to 2, will return every second color in the list.\r\n     *\r\n     * This is useful, when the color list has colors that are too close each\r\n     * other for contrast.\r\n     *\r\n     * However, having bigger number will mean that `next()` iterator will go\r\n     * through the list quicker, and the generator will kick sooner.\r\n     */\n\n    _this.step = 1;\n    /**\r\n     * A number of colors to generate in one \"pass\".\r\n     *\r\n     * This setting can be automatically overridden, if ColorSet has a list of\r\n     * pre-set colors. In such case ColorSet will generate exactly the same\r\n     * number of colors with each pass as there were colors in original set.\r\n     */\n\n    _this.minColors = 20;\n    /**\r\n     * Do not let the \"lightness\" of generated color to fall below this\r\n     * threshold.\r\n     */\n\n    _this.minLightness = 0.2;\n    /**\r\n     * Do not let the \"lightness\" of generated color to get above this threshold.\r\n     */\n\n    _this.maxLightness = 0.9;\n    /**\r\n     * Randomly shuffle generated colors.\r\n     */\n\n    _this.shuffle = false;\n    /**\r\n     * When colors are generated, based on `stepOptions`, each generated color\r\n     * gets either lighter or darker.\r\n     *\r\n     * If this is set to `true`, color generator will switch to opposing spectrum\r\n     * when reaching `minLightness` or `maxLightness`.\r\n     *\r\n     * E.g. if we start off with a red color, then gradually generate lighter\r\n     * colors through rose shades, then switch back to dark red and gradually\r\n     * increase the lightness of it until it reaches the starting red.\r\n     *\r\n     * If set to `false` it will stop there and cap lightness at whatever level\r\n     * we hit `minLightness` or `maxLightness`, which may result in a number of\r\n     * the same colors.\r\n     */\n\n    _this.wrap = true;\n    /**\r\n     * Re-use same colors in the pre-set list, when ColorSet runs out of colors,\r\n     * rather than start generating new ones.\r\n     */\n\n    _this.reuse = false;\n    /**\r\n     * Saturation of colors. This will change saturation of all colors of color\r\n     * set.\r\n     *\r\n     * It is recommended to set this in theme, as changing it at run time won't\r\n     * make the items to redraw and change color.\r\n     */\n\n    _this.saturation = 1;\n    _this.className = \"ColorSet\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(ColorSet.prototype, \"list\", {\n    /**\r\n     * Returns current list of colors.\r\n     *\r\n     * If there are none, a new list of colors is generated, based on various\r\n     * ColorSet settings.\r\n     *\r\n     * @return Color list\r\n     */\n    get: function () {\n      if (!this._list) {\n        this.generate(this.minColors);\n      }\n\n      return this._list;\n    },\n\n    /**\r\n     * Sets a list of pre-defined colors to use for the iterator.\r\n     *\r\n     * @param value Color list\r\n     */\n    set: function (value) {\n      this._list = value;\n      this.reset();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Gets reusable color.\r\n   *\r\n   * @param   index  Index of color\r\n   * @return         Color\r\n   */\n\n  ColorSet.prototype.getReusableColor = function (index) {\n    if (this._list.length == 0) {\n      this.generate(1);\n      return this.list[0];\n    } else {\n      var tmpstep = index - Math.floor(index / this._list.length) * this.list.length;\n      return this.list[tmpstep];\n    }\n  };\n  /**\r\n   * Returns next color in the list using internal iterator counter.\r\n   *\r\n   * If `step` is set to something other than 1, it may return other color than\r\n   * exact next one in the list.\r\n   *\r\n   * @return Color\r\n   */\n\n\n  ColorSet.prototype.next = function () {\n    var color;\n\n    if (this.list.length <= this._currentStep) {\n      if (this.reuse) {\n        color = this.getReusableColor(this._currentStep);\n      } else {\n        this.generate($math.max(this.minColors, this._currentStep + 1));\n        color = this.list[this._currentStep];\n      }\n    } else {\n      color = this.list[this._currentStep];\n    }\n\n    this._currentStep += this.step;\n    return color.saturate(this.saturation);\n  };\n  /**\r\n   * Returns a color at specific index in the list.\r\n   *\r\n   * @param i  Index\r\n   * @return Color\r\n   */\n\n\n  ColorSet.prototype.getIndex = function (i) {\n    var color;\n\n    if (this.list.length <= i) {\n      if (this.reuse) {\n        color = this.getReusableColor(i);\n      } else {\n        this.generate(this.minColors);\n        color = this.getIndex(i);\n      }\n    } else {\n      color = this.list[i];\n    }\n\n    return color.saturate(this.saturation);\n  };\n  /**\r\n   * Resets internal iterator.\r\n   *\r\n   * Calling `next()` after this will return the very first color in the color\r\n   * list, even if it was already returned before.\r\n   */\n\n\n  ColorSet.prototype.reset = function () {\n    this._currentStep = this._startIndex;\n  };\n\n  Object.defineProperty(ColorSet.prototype, \"currentStep\", {\n    /**\r\n     * @return Step\r\n     */\n    get: function () {\n      return this._currentStep;\n    },\n\n    /**\r\n     * Sets current color iteration. You can use this property to skip some\r\n     * colors from iteration. E.g. setting it to `10` will skip first ten\r\n     * colors.\r\n     *\r\n     * Please note that the number is zero-based.\r\n     *\r\n     * @param value  Step\r\n     */\n    set: function (value) {\n      this._currentStep = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColorSet.prototype, \"startIndex\", {\n    /**\r\n     * @return Index\r\n     */\n    get: function () {\n      return this._startIndex;\n    },\n\n    /**\r\n     * If set to non-zero value, the ColorSet will start iterating colors from\r\n     * that particular index, not the first color in the list.\r\n     *\r\n     * @default 0\r\n     * @since 4.4.9\r\n     * @param  value  Index\r\n     */\n    set: function (value) {\n      this._startIndex = value;\n      this.reset();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Generates colors based on the various ColorSet settings.\r\n   *\r\n   * @param count Number of colors to generate\r\n   */\n\n  ColorSet.prototype.generate = function (count) {\n    // Init\n    var curColor = this.currentColor;\n    var hsl = $colors.rgbToHsl($type.getValue(curColor.rgb));\n    var hueStep = $type.hasValue(this.stepOptions.hue) ? this.stepOptions.hue : 1 / count;\n    var mods = {\n      brighten: 0,\n      lighten: 0,\n      hue: hsl.h,\n      lightness: hsl.l,\n      saturation: hsl.s\n    }; // Generate list of hues, and shuffle them\n\n    var hues = [];\n    var startIndex = this.list.length == 0 ? 0 : 1;\n\n    if (this.reuse) {\n      for (var i = startIndex; i <= count; i++) {\n        hues.push($colors.rgbToHsl($type.getValue(this._list[i].rgb)).h);\n      }\n    } else {\n      for (var i = startIndex; i <= count; i++) {\n        var h = hsl.h + hueStep * i;\n\n        if (this.wrap && h > 1) {\n          h -= 1;\n        }\n\n        hues.push(h);\n      }\n    } // Shuffle colors randomly\n\n\n    if (this.shuffle) {\n      hues.sort(function (a, b) {\n        return Math.random() - 0.5;\n      });\n    } // Generate colors by rotating hue\n\n\n    for (var i = 0; i < count; i++) {\n      // Update hue\n      if (this.reuse) {\n        hsl = $colors.rgbToHsl($type.getValue(this._list[i].rgb));\n      } else {\n        hsl.h = hues.shift();\n      } // Apply HSL mods\n\n\n      this.applyStepOptions(hsl, mods, i, this._currentPass); // Convert back to Color\n\n      var c = color($colors.hslToRgb(hsl)); // Apply regular color mods\n\n      var brighten = (this.stepOptions.brighten || 0) * i + (this.passOptions.brighten || 0) * this._currentPass;\n\n      if (brighten != 0) {\n        if (this.wrap) {\n          brighten = $utils.fitNumberRelative(brighten, this.minLightness, this.maxLightness);\n        } else {\n          brighten = $utils.fitNumber(brighten, this.minLightness, this.maxLightness);\n        }\n\n        c = c.brighten(brighten);\n      }\n\n      var lighten = (this.stepOptions.lighten || 0) * i + (this.passOptions.lighten || 0) * this._currentPass;\n\n      if (lighten != 0) {\n        if (this.wrap) {\n          lighten = $utils.fitNumberRelative(lighten, this.minLightness, this.maxLightness);\n        } else {\n          lighten = $utils.fitNumber(lighten, this.minLightness, this.maxLightness);\n        }\n\n        c = c.lighten(lighten);\n      }\n\n      this._list.push(c);\n    }\n\n    this._currentPass++;\n  };\n\n  Object.defineProperty(ColorSet.prototype, \"currentColor\", {\n    /**\r\n     * Returns current last color. It's either the last color in the list of\r\n     * colors, or `baseColor` if list is empty.\r\n     *\r\n     * @return Color\r\n     */\n    get: function () {\n      if (this._list.length == 0) {\n        return this.baseColor.saturate(this.saturation);\n      } else {\n        return this._list[this._list.length - 1].saturate(this.saturation);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Generates modifiers for color, based on what step and pass.\r\n   *\r\n   * @param hsl   Curren HSL value of the color to modify\r\n   * @param base  The modifiers that were before modification to use as a base\r\n   * @param step  Current step\r\n   * @param pass  Current pass\r\n   */\n\n  ColorSet.prototype.applyStepOptions = function (hsl, base, step, pass) {\n    // Process lightness\n    hsl.l = base.lightness + (this.stepOptions.lightness || 0) * step + (this.passOptions.lightness || 0) * pass;\n\n    if (this.wrap) {\n      if (hsl.l > 1) {\n        hsl.l = hsl.l - Math.floor(hsl.l);\n      } else if (hsl.l < 0) {\n        hsl.l = -(hsl.l - Math.floor(hsl.l));\n      }\n\n      hsl.l = $utils.fitNumberRelative(hsl.l, this.minLightness, this.maxLightness);\n    } else {\n      if (hsl.l > 1) {\n        hsl.l = 1;\n      } else if (hsl.l < 0) {\n        hsl.l = 0;\n      }\n\n      hsl.l = $utils.fitNumber(hsl.l, this.minLightness, this.maxLightness);\n    }\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  ColorSet.prototype.processConfig = function (config) {\n    if (config) {\n      // Cast colors\n      if ($type.hasValue(config.list) && $type.isArray(config.list)) {\n        for (var i = 0, len = config.list.length; i < len; i++) {\n          if (!(config.list[i] instanceof Color)) {\n            config.list[i] = color(config.list[i]);\n          }\n        }\n      }\n\n      if ($type.hasValue(config.baseColor) && !(config.baseColor instanceof Color)) {\n        config.baseColor = color(config.baseColor);\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return ColorSet;\n}(BaseObject);\n\nexport { ColorSet };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ColorSet\"] = ColorSet;","map":{"version":3,"names":["__extends","BaseObject","Color","color","registry","$colors","$type","$utils","$math","ColorSet","_super","_this","call","_list","_currentStep","_startIndex","_currentPass","baseColor","r","g","b","stepOptions","passOptions","brighten","step","minColors","minLightness","maxLightness","shuffle","wrap","reuse","saturation","className","applyTheme","Object","defineProperty","prototype","get","generate","set","value","reset","enumerable","configurable","getReusableColor","index","length","list","tmpstep","Math","floor","next","max","saturate","getIndex","i","count","curColor","currentColor","hsl","rgbToHsl","getValue","rgb","hueStep","hasValue","hue","mods","lighten","h","lightness","l","s","hues","startIndex","push","sort","a","random","shift","applyStepOptions","c","hslToRgb","fitNumberRelative","fitNumber","base","pass","processConfig","config","isArray","len","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/ColorSet.js"],"sourcesContent":["/**\r\n * This module contains ColorSet object definition\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { Color, color } from \"./Color\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $colors from \"./Colors\";\r\nimport * as $type from \"./Type\";\r\nimport * as $utils from \"./Utils\";\r\nimport * as $math from \"./Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a set of colors. Can also generate colors according to set rules.\r\n *\r\n * @important\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nvar ColorSet = /** @class */ (function (_super) {\r\n    __extends(ColorSet, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ColorSet() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Holds the list of the colors in this set. (preset or auto-generated)\r\n         */\r\n        _this._list = [];\r\n        /**\r\n         * Current step in a color generator's cycle.\r\n         */\r\n        _this._currentStep = 0;\r\n        /**\r\n         * If set to non-zero value, the ColorSet will start iterating colors from\r\n         * that particular index, not the first color in the list.\r\n         */\r\n        _this._startIndex = 0;\r\n        /**\r\n         * Current pass in the color generator's cycle. Normally a generator would\r\n         * cycle through all available hue range, then repeat it, alternating other\r\n         * color properties, to generate distinctive colors.\r\n         */\r\n        _this._currentPass = 0;\r\n        /**\r\n         * A base color. If there are no colors pre-set in the color list, ColorSet\r\n         * will use this color as a base when generating new ones, applying\r\n         * `stepOptions` and `passOptions` to this base color.\r\n         */\r\n        _this.baseColor = new Color({\r\n            r: 103,\r\n            g: 183,\r\n            b: 220\r\n        });\r\n        /**\r\n         * Modifications to apply with each new generated color.\r\n         */\r\n        _this.stepOptions = {};\r\n        /**\r\n         * Modifications to apply on top of `stepOptions` for each \"pass\" of the\r\n         * color generation.\r\n         *\r\n         * A \"pass\" is when ColorSet generates `minColors` number of colors.\r\n         */\r\n        _this.passOptions = {\r\n            brighten: -0.2\r\n        };\r\n        /**\r\n         * An index increment to use when iterating through color list.\r\n         *\r\n         * Default is 1, which means returning each and every color.\r\n         *\r\n         * Setting it to a bigger number will make ColorSet `next()` iterator skip\r\n         * some colors.\r\n         *\r\n         * E.g. setting to 2, will return every second color in the list.\r\n         *\r\n         * This is useful, when the color list has colors that are too close each\r\n         * other for contrast.\r\n         *\r\n         * However, having bigger number will mean that `next()` iterator will go\r\n         * through the list quicker, and the generator will kick sooner.\r\n         */\r\n        _this.step = 1;\r\n        /**\r\n         * A number of colors to generate in one \"pass\".\r\n         *\r\n         * This setting can be automatically overridden, if ColorSet has a list of\r\n         * pre-set colors. In such case ColorSet will generate exactly the same\r\n         * number of colors with each pass as there were colors in original set.\r\n         */\r\n        _this.minColors = 20;\r\n        /**\r\n         * Do not let the \"lightness\" of generated color to fall below this\r\n         * threshold.\r\n         */\r\n        _this.minLightness = 0.2;\r\n        /**\r\n         * Do not let the \"lightness\" of generated color to get above this threshold.\r\n         */\r\n        _this.maxLightness = 0.9;\r\n        /**\r\n         * Randomly shuffle generated colors.\r\n         */\r\n        _this.shuffle = false;\r\n        /**\r\n         * When colors are generated, based on `stepOptions`, each generated color\r\n         * gets either lighter or darker.\r\n         *\r\n         * If this is set to `true`, color generator will switch to opposing spectrum\r\n         * when reaching `minLightness` or `maxLightness`.\r\n         *\r\n         * E.g. if we start off with a red color, then gradually generate lighter\r\n         * colors through rose shades, then switch back to dark red and gradually\r\n         * increase the lightness of it until it reaches the starting red.\r\n         *\r\n         * If set to `false` it will stop there and cap lightness at whatever level\r\n         * we hit `minLightness` or `maxLightness`, which may result in a number of\r\n         * the same colors.\r\n         */\r\n        _this.wrap = true;\r\n        /**\r\n         * Re-use same colors in the pre-set list, when ColorSet runs out of colors,\r\n         * rather than start generating new ones.\r\n         */\r\n        _this.reuse = false;\r\n        /**\r\n         * Saturation of colors. This will change saturation of all colors of color\r\n         * set.\r\n         *\r\n         * It is recommended to set this in theme, as changing it at run time won't\r\n         * make the items to redraw and change color.\r\n         */\r\n        _this.saturation = 1;\r\n        _this.className = \"ColorSet\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ColorSet.prototype, \"list\", {\r\n        /**\r\n         * Returns current list of colors.\r\n         *\r\n         * If there are none, a new list of colors is generated, based on various\r\n         * ColorSet settings.\r\n         *\r\n         * @return Color list\r\n         */\r\n        get: function () {\r\n            if (!this._list) {\r\n                this.generate(this.minColors);\r\n            }\r\n            return this._list;\r\n        },\r\n        /**\r\n         * Sets a list of pre-defined colors to use for the iterator.\r\n         *\r\n         * @param value Color list\r\n         */\r\n        set: function (value) {\r\n            this._list = value;\r\n            this.reset();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Gets reusable color.\r\n     *\r\n     * @param   index  Index of color\r\n     * @return         Color\r\n     */\r\n    ColorSet.prototype.getReusableColor = function (index) {\r\n        if (this._list.length == 0) {\r\n            this.generate(1);\r\n            return this.list[0];\r\n        }\r\n        else {\r\n            var tmpstep = index - (Math.floor(index / this._list.length) * this.list.length);\r\n            return this.list[tmpstep];\r\n        }\r\n    };\r\n    /**\r\n     * Returns next color in the list using internal iterator counter.\r\n     *\r\n     * If `step` is set to something other than 1, it may return other color than\r\n     * exact next one in the list.\r\n     *\r\n     * @return Color\r\n     */\r\n    ColorSet.prototype.next = function () {\r\n        var color;\r\n        if (this.list.length <= this._currentStep) {\r\n            if (this.reuse) {\r\n                color = this.getReusableColor(this._currentStep);\r\n            }\r\n            else {\r\n                this.generate($math.max(this.minColors, this._currentStep + 1));\r\n                color = this.list[this._currentStep];\r\n            }\r\n        }\r\n        else {\r\n            color = this.list[this._currentStep];\r\n        }\r\n        this._currentStep += this.step;\r\n        return color.saturate(this.saturation);\r\n    };\r\n    /**\r\n     * Returns a color at specific index in the list.\r\n     *\r\n     * @param i  Index\r\n     * @return Color\r\n     */\r\n    ColorSet.prototype.getIndex = function (i) {\r\n        var color;\r\n        if (this.list.length <= i) {\r\n            if (this.reuse) {\r\n                color = this.getReusableColor(i);\r\n            }\r\n            else {\r\n                this.generate(this.minColors);\r\n                color = this.getIndex(i);\r\n            }\r\n        }\r\n        else {\r\n            color = this.list[i];\r\n        }\r\n        return color.saturate(this.saturation);\r\n    };\r\n    /**\r\n     * Resets internal iterator.\r\n     *\r\n     * Calling `next()` after this will return the very first color in the color\r\n     * list, even if it was already returned before.\r\n     */\r\n    ColorSet.prototype.reset = function () {\r\n        this._currentStep = this._startIndex;\r\n    };\r\n    Object.defineProperty(ColorSet.prototype, \"currentStep\", {\r\n        /**\r\n         * @return Step\r\n         */\r\n        get: function () {\r\n            return this._currentStep;\r\n        },\r\n        /**\r\n         * Sets current color iteration. You can use this property to skip some\r\n         * colors from iteration. E.g. setting it to `10` will skip first ten\r\n         * colors.\r\n         *\r\n         * Please note that the number is zero-based.\r\n         *\r\n         * @param value  Step\r\n         */\r\n        set: function (value) {\r\n            this._currentStep = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColorSet.prototype, \"startIndex\", {\r\n        /**\r\n         * @return Index\r\n         */\r\n        get: function () {\r\n            return this._startIndex;\r\n        },\r\n        /**\r\n         * If set to non-zero value, the ColorSet will start iterating colors from\r\n         * that particular index, not the first color in the list.\r\n         *\r\n         * @default 0\r\n         * @since 4.4.9\r\n         * @param  value  Index\r\n         */\r\n        set: function (value) {\r\n            this._startIndex = value;\r\n            this.reset();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Generates colors based on the various ColorSet settings.\r\n     *\r\n     * @param count Number of colors to generate\r\n     */\r\n    ColorSet.prototype.generate = function (count) {\r\n        // Init\r\n        var curColor = this.currentColor;\r\n        var hsl = $colors.rgbToHsl($type.getValue(curColor.rgb));\r\n        var hueStep = $type.hasValue(this.stepOptions.hue) ? this.stepOptions.hue : 1 / count;\r\n        var mods = {\r\n            brighten: 0,\r\n            lighten: 0,\r\n            hue: hsl.h,\r\n            lightness: hsl.l,\r\n            saturation: hsl.s\r\n        };\r\n        // Generate list of hues, and shuffle them\r\n        var hues = [];\r\n        var startIndex = this.list.length == 0 ? 0 : 1;\r\n        if (this.reuse) {\r\n            for (var i = startIndex; i <= count; i++) {\r\n                hues.push($colors.rgbToHsl($type.getValue(this._list[i].rgb)).h);\r\n            }\r\n        }\r\n        else {\r\n            for (var i = startIndex; i <= count; i++) {\r\n                var h = hsl.h + hueStep * i;\r\n                if (this.wrap && (h > 1)) {\r\n                    h -= 1;\r\n                }\r\n                hues.push(h);\r\n            }\r\n        }\r\n        // Shuffle colors randomly\r\n        if (this.shuffle) {\r\n            hues.sort(function (a, b) {\r\n                return Math.random() - 0.5;\r\n            });\r\n        }\r\n        // Generate colors by rotating hue\r\n        for (var i = 0; i < count; i++) {\r\n            // Update hue\r\n            if (this.reuse) {\r\n                hsl = $colors.rgbToHsl($type.getValue(this._list[i].rgb));\r\n            }\r\n            else {\r\n                hsl.h = hues.shift();\r\n            }\r\n            // Apply HSL mods\r\n            this.applyStepOptions(hsl, mods, i, this._currentPass);\r\n            // Convert back to Color\r\n            var c = color($colors.hslToRgb(hsl));\r\n            // Apply regular color mods\r\n            var brighten = (this.stepOptions.brighten || 0) * i + (this.passOptions.brighten || 0) * this._currentPass;\r\n            if (brighten != 0) {\r\n                if (this.wrap) {\r\n                    brighten = $utils.fitNumberRelative(brighten, this.minLightness, this.maxLightness);\r\n                }\r\n                else {\r\n                    brighten = $utils.fitNumber(brighten, this.minLightness, this.maxLightness);\r\n                }\r\n                c = c.brighten(brighten);\r\n            }\r\n            var lighten = (this.stepOptions.lighten || 0) * i + (this.passOptions.lighten || 0) * this._currentPass;\r\n            if (lighten != 0) {\r\n                if (this.wrap) {\r\n                    lighten = $utils.fitNumberRelative(lighten, this.minLightness, this.maxLightness);\r\n                }\r\n                else {\r\n                    lighten = $utils.fitNumber(lighten, this.minLightness, this.maxLightness);\r\n                }\r\n                c = c.lighten(lighten);\r\n            }\r\n            this._list.push(c);\r\n        }\r\n        this._currentPass++;\r\n    };\r\n    Object.defineProperty(ColorSet.prototype, \"currentColor\", {\r\n        /**\r\n         * Returns current last color. It's either the last color in the list of\r\n         * colors, or `baseColor` if list is empty.\r\n         *\r\n         * @return Color\r\n         */\r\n        get: function () {\r\n            if (this._list.length == 0) {\r\n                return this.baseColor.saturate(this.saturation);\r\n            }\r\n            else {\r\n                return this._list[this._list.length - 1].saturate(this.saturation);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Generates modifiers for color, based on what step and pass.\r\n     *\r\n     * @param hsl   Curren HSL value of the color to modify\r\n     * @param base  The modifiers that were before modification to use as a base\r\n     * @param step  Current step\r\n     * @param pass  Current pass\r\n     */\r\n    ColorSet.prototype.applyStepOptions = function (hsl, base, step, pass) {\r\n        // Process lightness\r\n        hsl.l = base.lightness + (this.stepOptions.lightness || 0) * step + (this.passOptions.lightness || 0) * pass;\r\n        if (this.wrap) {\r\n            if (hsl.l > 1) {\r\n                hsl.l = hsl.l - Math.floor(hsl.l);\r\n            }\r\n            else if (hsl.l < 0) {\r\n                hsl.l = -(hsl.l - Math.floor(hsl.l));\r\n            }\r\n            hsl.l = $utils.fitNumberRelative(hsl.l, this.minLightness, this.maxLightness);\r\n        }\r\n        else {\r\n            if (hsl.l > 1) {\r\n                hsl.l = 1;\r\n            }\r\n            else if (hsl.l < 0) {\r\n                hsl.l = 0;\r\n            }\r\n            hsl.l = $utils.fitNumber(hsl.l, this.minLightness, this.maxLightness);\r\n        }\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    ColorSet.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Cast colors\r\n            if ($type.hasValue(config.list) && $type.isArray(config.list)) {\r\n                for (var i = 0, len = config.list.length; i < len; i++) {\r\n                    if (!(config.list[i] instanceof Color)) {\r\n                        config.list[i] = color(config.list[i]);\r\n                    }\r\n                }\r\n            }\r\n            if ($type.hasValue(config.baseColor) && !(config.baseColor instanceof Color)) {\r\n                config.baseColor = color(config.baseColor);\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return ColorSet;\r\n}(BaseObject));\r\nexport { ColorSet };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColorSet\"] = ColorSet;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}