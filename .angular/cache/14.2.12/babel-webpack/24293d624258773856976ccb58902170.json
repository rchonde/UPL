{"ast":null,"code":"import * as $math from \"./Math\";\nimport * as $type from \"./Type\";\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Searches `array` for `value`.\r\n *\r\n * Returns -1 if not found.\r\n *\r\n * @param array  Source array\r\n * @param value  Value to search\r\n * @returns Index\r\n */\n\nexport function indexOf(array, value) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    // TODO handle NaN\n    if (array[i] === value) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\r\n * Calls `test` for each element in `array`.\r\n *\r\n * If `test` returns `true` then it immediately returns `true`.\r\n *\r\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\r\n *\r\n * @param array  Source array\r\n * @param test   Function which is called on each element\r\n * @returns Whether `test` returned true or not\r\n */\n\nexport function any(array, test) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (test(array[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\r\n * Calls `fn` function for every member of array and returns a new array out\r\n * of all outputs.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n * @returns New array\r\n */\n\nexport function map(array, fn) {\n  var length = array.length;\n  var output = new Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    output[i] = fn(array[i], i);\n  }\n\n  return output;\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function each(array, fn) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    fn(array[i], i);\n  }\n}\n/**\r\n * Iterates through all items in array in reverse order and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function eachReverse(array, fn) {\n  var i = array.length;\n\n  while (i--) {\n    fn(array[i], i);\n  }\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * If `fn` call evaluates to `false`, further iteration is cancelled.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function eachContinue(array, fn) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (!fn(array[i], i)) {\n      break;\n    }\n  }\n}\n/**\r\n * Shifts an item at `index` towards beginning of the array.\r\n *\r\n * @param array  Source array\r\n * @param index  Target element index\r\n */\n\nexport function shiftLeft(array, index) {\n  var length = array.length;\n\n  for (var i = index; i < length; ++i) {\n    array[i - index] = array[i];\n  }\n\n  array.length = length - index;\n}\n/**\r\n * Returns the last item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\n\nexport function last(array) {\n  var length = array.length;\n  return length ? array[length - 1] : undefined;\n}\n/**\r\n * Returns the first item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\n\nexport function first(array) {\n  return array[0];\n}\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * Caps `index` to be between `0` and `array.length`\r\n *\r\n * @param array    Source array\r\n * @param element  Item to insert\r\n * @param array    Index to insert item at\r\n */\n\nexport function insert(array, element, index) {\n  //if (array) {\n  index = $math.fitToRange(index, 0, array.length);\n  array.splice(index, 0, element); //}\n}\n/**\r\n * Removes all copies of `element` from `array` (if they exist) and then\r\n * inserts `element` at `index`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item\r\n * @param array    Index to move item to\r\n */\n\nexport function setIndex(array, element, index) {\n  remove(array, element);\n  insert(array, element, index);\n}\n/**\r\n * Pushes all of the elements from `input` into `array`.\r\n *\r\n * @param array  Output array\r\n * @param input  Input array\r\n */\n\nexport function pushAll(array, input) {\n  var length = input.length;\n\n  for (var i = 0; i < length; ++i) {\n    array.push(input[i]);\n  }\n}\n/**\r\n * Removes `element` from `array`.\r\n *\r\n * If there are multiple copies of `element`, they are all removed.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n */\n\nexport function remove(array, element) {\n  var found = false;\n  var index = array.indexOf(element);\n\n  if (index !== -1) {\n    found = true;\n    array.splice(index, 1);\n    var length_1 = array.length;\n\n    while (index < length_1) {\n      // TODO handle NaN\n      if (array[index] === element) {\n        array.splice(index, 1);\n        --length_1;\n      } else {\n        ++index;\n      }\n    }\n  }\n\n  return found;\n}\n/**\r\n * Adds an `element` to `array`.\r\n *\r\n * If array already contains and item like this, it is removed before adding\r\n * it again.\r\n *\r\n * Optionally `toIndex` can be specified to add element at specific index.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to move item to\r\n */\n\nexport function move(array, element, toIndex) {\n  // @todo this implementation must be the same as the List.moveValue method\n  // @todo don't do anything if the desired index is the same as the current index\n  var index = indexOf(array, element); // @todo remove all old values rather than only the first ?\n\n  if (index !== -1) {\n    removeIndex(array, index);\n  }\n\n  if (toIndex == null) {\n    array.push(element);\n  } else {\n    insertIndex(array, toIndex, element);\n  }\n}\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to add item at\r\n */\n\nexport function add(array, element, index) {\n  // Append to the end if index is not set\n  if (!$type.isNumber(index)) {\n    array.push(element);\n  } // Add to the beginning of array if index is 0\n  else if (index === 0) {\n    array.unshift(element);\n  } // Add to indicated place if index is set\n  else {\n    array.splice(index, 0, element);\n  }\n}\n/**\r\n * Removes `element` from `array` (if it exists) and then inserts `element` at\r\n * `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n * @param array    Index to move item to\r\n */\n\nexport function replace(array, element, index) {\n  // check if exists\n  var ind = array.indexOf(element); // remove if exists\n\n  if (ind !== -1) {\n    array.splice(ind, 1);\n  } // add to end if index is not set\n\n\n  if (!$type.isNumber(index)) {\n    array.push(element);\n  } // add to indicated place if index is set\n  else {\n    array.splice(index, 0, element);\n  }\n}\n/**\r\n * Wraps `input` in an array, if it isn't already an array.\r\n *\r\n * @param input  Source value\r\n * @return An array\r\n */\n\nexport function toArray(input) {\n  if (Array.isArray(input)) {\n    return input;\n  } else {\n    return [input];\n  }\n}\n/**\r\n * Returns `true` if `element` exists in `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to search for\r\n * @returns Item in array?\r\n */\n\nexport function has(array, element) {\n  return indexOf(array, element) !== -1;\n}\n/**\r\n * Returns a shallow copy of `array`.\r\n *\r\n * @param array  Source array\r\n * @returns Copy of the array\r\n */\n\nexport function copy(array) {\n  var length = array.length; // It's faster to create the array with a pre-defined length\n\n  var output = new Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    // Because the array has a pre-defined length, we have to assign rather than push\n    // This is also faster than pushing\n    output[i] = array[i];\n  }\n\n  return output;\n}\n/**\r\n * Returns a copy of `array` which contains all the elements between `start`\r\n * and `end`. (including `start` and excluding `end`)\r\n *\r\n * If `end` is not provided, it defaults to `array.length`.\r\n *\r\n * @param array  Source array\r\n * @param start  Start index\r\n * @param end    End index\r\n * @returns Part of the array\r\n */\n\nexport function slice(array, start, end) {\n  if (end === void 0) {\n    end = array.length;\n  }\n\n  var output = new Array(end - start);\n\n  for (var i = start; i < end; ++i) {\n    output[i - start] = array[i];\n  }\n\n  return output;\n}\n/**\r\n * Inserts a value into array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n * @param value  Value to insert\r\n */\n\nexport function insertIndex(array, index, value) {\n  array.splice(index, 0, value);\n}\n/**\r\n * Removes a value from array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n */\n\nexport function removeIndex(array, index) {\n  array.splice(index, 1);\n}\n/**\r\n * Orders an array using specific `ordering` function and returns index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @param value     Value to search for\r\n * @returns Result of the search\r\n */\n\nexport function getSortedIndex(array, ordering, value) {\n  var start = 0;\n  var end = array.length;\n  var found = false;\n\n  while (start < end) {\n    // TODO is this faster/slower than using Math.floor ?\n    var pivot = start + end >> 1;\n    var order = ordering(value, array[pivot]); // less\n\n    if (order < 0) {\n      end = pivot; // equal\n    } else if (order === 0) {\n      found = true;\n      start = pivot + 1; // more\n    } else {\n      start = pivot + 1;\n    }\n  }\n\n  return {\n    found: found,\n    index: found ? start - 1 : start\n  };\n}\n/**\r\n * Searches the array using custom function and returns index of the item if\r\n * found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns -1.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\n\nexport function findIndex(array, matches) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (matches(array[i], i)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\n\nexport function find(array, matches) {\n  var index = findIndex(array, matches);\n\n  if (index !== -1) {\n    return array[index];\n  }\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function shuffle(array) {\n  // https://stackoverflow.com/a/2450976/449477\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n}\nexport function keepIf(array, keep) {\n  var length = array.length;\n  var i = 0;\n\n  while (i < length) {\n    if (keep(array[i])) {\n      ++i;\n    } else {\n      array.splice(i, 1);\n      --length;\n    }\n  }\n}","map":{"version":3,"names":["$math","$type","indexOf","array","value","length","i","any","test","map","fn","output","Array","each","eachReverse","eachContinue","shiftLeft","index","last","undefined","first","insert","element","fitToRange","splice","setIndex","remove","pushAll","input","push","found","length_1","move","toIndex","removeIndex","insertIndex","add","isNumber","unshift","replace","ind","toArray","isArray","has","copy","slice","start","end","getSortedIndex","ordering","pivot","order","findIndex","matches","find","shuffle","currentIndex","temporaryValue","randomIndex","Math","floor","random","keepIf","keep"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js"],"sourcesContent":["import * as $math from \"./Math\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Searches `array` for `value`.\r\n *\r\n * Returns -1 if not found.\r\n *\r\n * @param array  Source array\r\n * @param value  Value to search\r\n * @returns Index\r\n */\r\nexport function indexOf(array, value) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        // TODO handle NaN\r\n        if (array[i] === value) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Calls `test` for each element in `array`.\r\n *\r\n * If `test` returns `true` then it immediately returns `true`.\r\n *\r\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\r\n *\r\n * @param array  Source array\r\n * @param test   Function which is called on each element\r\n * @returns Whether `test` returned true or not\r\n */\r\nexport function any(array, test) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        if (test(array[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Calls `fn` function for every member of array and returns a new array out\r\n * of all outputs.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n * @returns New array\r\n */\r\nexport function map(array, fn) {\r\n    var length = array.length;\r\n    var output = new Array(length);\r\n    for (var i = 0; i < length; ++i) {\r\n        output[i] = fn(array[i], i);\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function each(array, fn) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        fn(array[i], i);\r\n    }\r\n}\r\n/**\r\n * Iterates through all items in array in reverse order and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function eachReverse(array, fn) {\r\n    var i = array.length;\r\n    while (i--) {\r\n        fn(array[i], i);\r\n    }\r\n}\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * If `fn` call evaluates to `false`, further iteration is cancelled.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function eachContinue(array, fn) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        if (!fn(array[i], i)) {\r\n            break;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Shifts an item at `index` towards beginning of the array.\r\n *\r\n * @param array  Source array\r\n * @param index  Target element index\r\n */\r\nexport function shiftLeft(array, index) {\r\n    var length = array.length;\r\n    for (var i = index; i < length; ++i) {\r\n        array[i - index] = array[i];\r\n    }\r\n    array.length = length - index;\r\n}\r\n/**\r\n * Returns the last item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\r\nexport function last(array) {\r\n    var length = array.length;\r\n    return length ? array[length - 1] : undefined;\r\n}\r\n/**\r\n * Returns the first item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\r\nexport function first(array) {\r\n    return array[0];\r\n}\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * Caps `index` to be between `0` and `array.length`\r\n *\r\n * @param array    Source array\r\n * @param element  Item to insert\r\n * @param array    Index to insert item at\r\n */\r\nexport function insert(array, element, index) {\r\n    //if (array) {\r\n    index = $math.fitToRange(index, 0, array.length);\r\n    array.splice(index, 0, element);\r\n    //}\r\n}\r\n/**\r\n * Removes all copies of `element` from `array` (if they exist) and then\r\n * inserts `element` at `index`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item\r\n * @param array    Index to move item to\r\n */\r\nexport function setIndex(array, element, index) {\r\n    remove(array, element);\r\n    insert(array, element, index);\r\n}\r\n/**\r\n * Pushes all of the elements from `input` into `array`.\r\n *\r\n * @param array  Output array\r\n * @param input  Input array\r\n */\r\nexport function pushAll(array, input) {\r\n    var length = input.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        array.push(input[i]);\r\n    }\r\n}\r\n/**\r\n * Removes `element` from `array`.\r\n *\r\n * If there are multiple copies of `element`, they are all removed.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n */\r\nexport function remove(array, element) {\r\n    var found = false;\r\n    var index = array.indexOf(element);\r\n    if (index !== -1) {\r\n        found = true;\r\n        array.splice(index, 1);\r\n        var length_1 = array.length;\r\n        while (index < length_1) {\r\n            // TODO handle NaN\r\n            if (array[index] === element) {\r\n                array.splice(index, 1);\r\n                --length_1;\r\n            }\r\n            else {\r\n                ++index;\r\n            }\r\n        }\r\n    }\r\n    return found;\r\n}\r\n/**\r\n * Adds an `element` to `array`.\r\n *\r\n * If array already contains and item like this, it is removed before adding\r\n * it again.\r\n *\r\n * Optionally `toIndex` can be specified to add element at specific index.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to move item to\r\n */\r\nexport function move(array, element, toIndex) {\r\n    // @todo this implementation must be the same as the List.moveValue method\r\n    // @todo don't do anything if the desired index is the same as the current index\r\n    var index = indexOf(array, element);\r\n    // @todo remove all old values rather than only the first ?\r\n    if (index !== -1) {\r\n        removeIndex(array, index);\r\n    }\r\n    if (toIndex == null) {\r\n        array.push(element);\r\n    }\r\n    else {\r\n        insertIndex(array, toIndex, element);\r\n    }\r\n}\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to add item at\r\n */\r\nexport function add(array, element, index) {\r\n    // Append to the end if index is not set\r\n    if (!$type.isNumber(index)) {\r\n        array.push(element);\r\n    }\r\n    // Add to the beginning of array if index is 0\r\n    else if (index === 0) {\r\n        array.unshift(element);\r\n    }\r\n    // Add to indicated place if index is set\r\n    else {\r\n        array.splice(index, 0, element);\r\n    }\r\n}\r\n/**\r\n * Removes `element` from `array` (if it exists) and then inserts `element` at\r\n * `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n * @param array    Index to move item to\r\n */\r\nexport function replace(array, element, index) {\r\n    // check if exists\r\n    var ind = array.indexOf(element);\r\n    // remove if exists\r\n    if (ind !== -1) {\r\n        array.splice(ind, 1);\r\n    }\r\n    // add to end if index is not set\r\n    if (!$type.isNumber(index)) {\r\n        array.push(element);\r\n    }\r\n    // add to indicated place if index is set\r\n    else {\r\n        array.splice(index, 0, element);\r\n    }\r\n}\r\n/**\r\n * Wraps `input` in an array, if it isn't already an array.\r\n *\r\n * @param input  Source value\r\n * @return An array\r\n */\r\nexport function toArray(input) {\r\n    if (Array.isArray(input)) {\r\n        return input;\r\n    }\r\n    else {\r\n        return [input];\r\n    }\r\n}\r\n/**\r\n * Returns `true` if `element` exists in `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to search for\r\n * @returns Item in array?\r\n */\r\nexport function has(array, element) {\r\n    return indexOf(array, element) !== -1;\r\n}\r\n/**\r\n * Returns a shallow copy of `array`.\r\n *\r\n * @param array  Source array\r\n * @returns Copy of the array\r\n */\r\nexport function copy(array) {\r\n    var length = array.length;\r\n    // It's faster to create the array with a pre-defined length\r\n    var output = new Array(length);\r\n    for (var i = 0; i < length; ++i) {\r\n        // Because the array has a pre-defined length, we have to assign rather than push\r\n        // This is also faster than pushing\r\n        output[i] = array[i];\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Returns a copy of `array` which contains all the elements between `start`\r\n * and `end`. (including `start` and excluding `end`)\r\n *\r\n * If `end` is not provided, it defaults to `array.length`.\r\n *\r\n * @param array  Source array\r\n * @param start  Start index\r\n * @param end    End index\r\n * @returns Part of the array\r\n */\r\nexport function slice(array, start, end) {\r\n    if (end === void 0) { end = array.length; }\r\n    var output = new Array(end - start);\r\n    for (var i = start; i < end; ++i) {\r\n        output[i - start] = array[i];\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Inserts a value into array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n * @param value  Value to insert\r\n */\r\nexport function insertIndex(array, index, value) {\r\n    array.splice(index, 0, value);\r\n}\r\n/**\r\n * Removes a value from array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n */\r\nexport function removeIndex(array, index) {\r\n    array.splice(index, 1);\r\n}\r\n/**\r\n * Orders an array using specific `ordering` function and returns index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @param value     Value to search for\r\n * @returns Result of the search\r\n */\r\nexport function getSortedIndex(array, ordering, value) {\r\n    var start = 0;\r\n    var end = array.length;\r\n    var found = false;\r\n    while (start < end) {\r\n        // TODO is this faster/slower than using Math.floor ?\r\n        var pivot = (start + end) >> 1;\r\n        var order = ordering(value, array[pivot]);\r\n        // less\r\n        if (order < 0) {\r\n            end = pivot;\r\n            // equal\r\n        }\r\n        else if (order === 0) {\r\n            found = true;\r\n            start = pivot + 1;\r\n            // more\r\n        }\r\n        else {\r\n            start = pivot + 1;\r\n        }\r\n    }\r\n    return {\r\n        found: found,\r\n        index: (found ? start - 1 : start)\r\n    };\r\n}\r\n/**\r\n * Searches the array using custom function and returns index of the item if\r\n * found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns -1.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\r\nexport function findIndex(array, matches) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        if (matches(array[i], i)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\r\nexport function find(array, matches) {\r\n    var index = findIndex(array, matches);\r\n    if (index !== -1) {\r\n        return array[index];\r\n    }\r\n}\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function shuffle(array) {\r\n    // https://stackoverflow.com/a/2450976/449477\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n}\r\nexport function keepIf(array, keep) {\r\n    var length = array.length;\r\n    var i = 0;\r\n    while (i < length) {\r\n        if (keep(array[i])) {\r\n            ++i;\r\n        }\r\n        else {\r\n            array.splice(i, 1);\r\n            --length;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}