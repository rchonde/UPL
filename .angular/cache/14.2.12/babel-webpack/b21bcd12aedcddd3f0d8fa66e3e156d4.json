{"ast":null,"code":"/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\n\nvar FunnelSlice =\n/** @class */\nfunction (_super) {\n  __extends(FunnelSlice, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FunnelSlice() {\n    var _this = _super.call(this) || this;\n\n    _this.slice = _this.createChild(Sprite);\n    _this.slice.shouldClone = false;\n\n    _this.slice.setElement(_this.paper.add(\"path\"));\n\n    _this.slice.isMeasured = false;\n    _this.orientation = \"vertical\";\n    _this.bottomWidth = percent(100);\n    _this.topWidth = percent(100);\n    _this.isMeasured = false;\n    _this.width = 10;\n    _this.height = 10;\n    _this.expandDistance = 0;\n    _this.className = \"FunnelSlice\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   */\n\n\n  FunnelSlice.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var pt = this.pixelPaddingTop;\n    var pb = this.pixelPaddingBottom;\n    var pr = this.pixelPaddingRight;\n    var pl = this.pixelPaddingLeft;\n    var w = this.pixelWidth - pr - pl;\n    var h = this.pixelHeight - pt - pb;\n    var ed = this.expandDistance;\n    var path = \"\";\n\n    if (this.orientation == \"vertical\") {\n      var tw = $utils.relativeToValue(this.topWidth, w);\n      var bw = $utils.relativeToValue(this.bottomWidth, w);\n      var tl = {\n        x: (w - tw) / 2 + pl,\n        y: pt\n      };\n      var tr = {\n        x: (w + tw) / 2 + pl,\n        y: pt\n      };\n      var br = {\n        x: (w + bw) / 2 + pl,\n        y: pt + h\n      };\n      var bl = {\n        x: (w - bw) / 2 + pl,\n        y: pt + h\n      };\n      var cpr = {\n        x: tr.x + (br.x - tr.x) / 2 + ed * h,\n        y: tr.y + 0.5 * h\n      };\n      var cpl = {\n        x: tl.x + (bl.x - tl.x) / 2 - ed * h,\n        y: tl.y + 0.5 * h\n      };\n      var qp1 = $path.lineTo(br);\n      var qp2 = $path.lineTo(tl);\n\n      if (ed != 0) {\n        qp1 = $path.quadraticCurveTo(br, cpr);\n        qp2 = $path.quadraticCurveTo(tl, cpl);\n      }\n\n      path = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\n      this.tickPoint = {\n        x: tr.x + (br.x - tr.x) / 2,\n        y: tr.y + (br.y - tr.y) / 2\n      };\n    } else {\n      var tw = $utils.relativeToValue(this.topWidth, h);\n      var bw = $utils.relativeToValue(this.bottomWidth, h);\n      var tt = {\n        x: pl,\n        y: (h - tw) / 2 + pt\n      };\n      var tb = {\n        x: pl,\n        y: (h + tw) / 2 + pt\n      };\n      var bt = {\n        x: pl + w,\n        y: (h - bw) / 2 + pt\n      };\n      var bb = {\n        x: pl + w,\n        y: (h + bw) / 2 + pt\n      };\n      var cpr = {\n        y: tt.y + (bt.y - tt.y) / 2 - ed * w,\n        x: tt.x + 0.5 * w\n      };\n      var cpl = {\n        y: tb.y + (bb.y - tb.y) / 2 + ed * w,\n        x: tb.x + 0.5 * w\n      };\n      var qp1 = $path.lineTo(bt);\n      var qp2 = $path.lineTo(tb);\n\n      if (ed != 0) {\n        qp1 = $path.quadraticCurveTo(bt, cpr);\n        qp2 = $path.quadraticCurveTo(tb, cpl);\n      }\n\n      path = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\n      this.tickPoint = {\n        y: tb.y + (bb.y - tb.y) / 2,\n        x: tb.x + (bb.x - tb.x) / 2\n      };\n    }\n\n    this.slice.path = path;\n    this.invalidateLayout();\n  };\n\n  FunnelSlice.prototype.getPoint = function (locationX, locationY) {\n    var pt = this.pixelPaddingTop;\n    var pb = this.pixelPaddingBottom;\n    var pr = this.pixelPaddingRight;\n    var pl = this.pixelPaddingLeft;\n    var w = this.pixelWidth - pr - pl;\n    var h = this.pixelHeight - pt - pb;\n\n    if (this.orientation == \"vertical\") {\n      var tw = $utils.relativeToValue(this.topWidth, w);\n      var bw = $utils.relativeToValue(this.bottomWidth, w);\n      var tl = {\n        x: (w - tw) / 2 + pl,\n        y: pt\n      };\n      var tr = {\n        x: (w + tw) / 2 + pl,\n        y: pt\n      };\n      var br = {\n        x: (w + bw) / 2 + pl,\n        y: pt + h\n      };\n      var bl = {\n        x: (w - bw) / 2 + pl,\n        y: pt + h\n      };\n      var mlx = tl.x + (bl.x - tl.x) * locationY;\n      var mrx = tr.x + (br.x - tr.x) * locationY;\n      return {\n        x: mlx + (mrx - mlx) * locationX,\n        y: tr.y + (br.y - tr.y) * locationY\n      };\n    } else {\n      var tw = $utils.relativeToValue(this.topWidth, h);\n      var bw = $utils.relativeToValue(this.bottomWidth, h);\n      var tt = {\n        x: pl,\n        y: (h - tw) / 2 + pt\n      };\n      var tb = {\n        x: pl,\n        y: (h + tw) / 2 + pt\n      };\n      var bt = {\n        x: pl + w,\n        y: (h - bw) / 2 + pt\n      };\n      var bb = {\n        x: pl + w,\n        y: (h + bw) / 2 + pt\n      };\n      var mty = tt.y + (bt.y - tt.y) * locationX;\n      var mby = tb.y + (bb.y - tb.y) * locationX;\n      return {\n        y: mty + (mby - mty) * locationY,\n        x: tt.x + (bt.x - tt.x) * locationX\n      };\n    }\n  };\n\n  Object.defineProperty(FunnelSlice.prototype, \"bottomWidth\", {\n    /**\r\n     * @return bottom width\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"bottomWidth\");\n    },\n\n    /**\r\n     * Bottom width in pixels or percent.\r\n     *\r\n     * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n     * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n     * becomes read-only as it will be automatically reset by series.\r\n     *\r\n     * @param value  Bottom width\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelSlice.prototype, \"topWidth\", {\n    /**\r\n     * @return Top width\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"topWidth\");\n    },\n\n    /**\r\n     * Top width in pixels or percent.\r\n     *\r\n     * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n     * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n     * becomes read-only as it will be automatically reset by series.\r\n     *\r\n     * @param value  Top width\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"topWidth\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelSlice.prototype, \"orientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n\n    /**\r\n     * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n     *\r\n     * IMPORTANT: this setting might be used to set orintation if you use slice\r\n     * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n     * becomes read-only as it will be automatically reset by series.\r\n     *\r\n     * @param value  Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"orientation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FunnelSlice.prototype, \"expandDistance\", {\n    /**\r\n     * @return expandDistance\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"expandDistance\");\n    },\n\n    /**\r\n     * A relative distance slice's sides should be bent to. It's relative to the\r\n     * height of the slice.\r\n     *\r\n     * Zero (default) will mean the sides will be perfectly straight.\r\n     *\r\n     * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n     *\r\n     * Negative values will make them bend inwards.\r\n     *\r\n     * @default 0\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"expandDistance\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all parameters from another [[Sprite]].\r\n   *\r\n   * @param source Source Sprite\r\n   */\n\n  FunnelSlice.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (this.slice) {\n      this.slice.copyFrom(source.slice);\n    }\n  };\n\n  return FunnelSlice;\n}(Container);\n\nexport { FunnelSlice };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;","map":{"version":3,"names":["__extends","Container","Sprite","registry","percent","$utils","$path","FunnelSlice","_super","_this","call","slice","createChild","shouldClone","setElement","paper","add","isMeasured","orientation","bottomWidth","topWidth","width","height","expandDistance","className","applyTheme","prototype","draw","pt","pixelPaddingTop","pb","pixelPaddingBottom","pr","pixelPaddingRight","pl","pixelPaddingLeft","w","pixelWidth","h","pixelHeight","ed","path","tw","relativeToValue","bw","tl","x","y","tr","br","bl","cpr","cpl","qp1","lineTo","qp2","quadraticCurveTo","moveTo","tickPoint","tt","tb","bt","bb","invalidateLayout","getPoint","locationX","locationY","mlx","mrx","mty","mby","Object","defineProperty","get","getPropertyValue","set","value","setPercentProperty","enumerable","configurable","setPropertyValue","copyFrom","source","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/elements/FunnelSlice.js"],"sourcesContent":["/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nvar FunnelSlice = /** @class */ (function (_super) {\r\n    __extends(FunnelSlice, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FunnelSlice() {\r\n        var _this = _super.call(this) || this;\r\n        _this.slice = _this.createChild(Sprite);\r\n        _this.slice.shouldClone = false;\r\n        _this.slice.setElement(_this.paper.add(\"path\"));\r\n        _this.slice.isMeasured = false;\r\n        _this.orientation = \"vertical\";\r\n        _this.bottomWidth = percent(100);\r\n        _this.topWidth = percent(100);\r\n        _this.isMeasured = false;\r\n        _this.width = 10;\r\n        _this.height = 10;\r\n        _this.expandDistance = 0;\r\n        _this.className = \"FunnelSlice\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     */\r\n    FunnelSlice.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var pt = this.pixelPaddingTop;\r\n        var pb = this.pixelPaddingBottom;\r\n        var pr = this.pixelPaddingRight;\r\n        var pl = this.pixelPaddingLeft;\r\n        var w = this.pixelWidth - pr - pl;\r\n        var h = this.pixelHeight - pt - pb;\r\n        var ed = this.expandDistance;\r\n        var path = \"\";\r\n        if (this.orientation == \"vertical\") {\r\n            var tw = $utils.relativeToValue(this.topWidth, w);\r\n            var bw = $utils.relativeToValue(this.bottomWidth, w);\r\n            var tl = { x: (w - tw) / 2 + pl, y: pt };\r\n            var tr = { x: (w + tw) / 2 + pl, y: pt };\r\n            var br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n            var bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n            var cpr = { x: tr.x + (br.x - tr.x) / 2 + ed * h, y: tr.y + 0.5 * h };\r\n            var cpl = { x: tl.x + (bl.x - tl.x) / 2 - ed * h, y: tl.y + 0.5 * h };\r\n            var qp1 = $path.lineTo(br);\r\n            var qp2 = $path.lineTo(tl);\r\n            if (ed != 0) {\r\n                qp1 = $path.quadraticCurveTo(br, cpr);\r\n                qp2 = $path.quadraticCurveTo(tl, cpl);\r\n            }\r\n            path = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\r\n            this.tickPoint = { x: tr.x + (br.x - tr.x) / 2, y: tr.y + (br.y - tr.y) / 2 };\r\n        }\r\n        else {\r\n            var tw = $utils.relativeToValue(this.topWidth, h);\r\n            var bw = $utils.relativeToValue(this.bottomWidth, h);\r\n            var tt = { x: pl, y: (h - tw) / 2 + pt };\r\n            var tb = { x: pl, y: (h + tw) / 2 + pt };\r\n            var bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n            var bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n            var cpr = { y: tt.y + (bt.y - tt.y) / 2 - ed * w, x: tt.x + 0.5 * w };\r\n            var cpl = { y: tb.y + (bb.y - tb.y) / 2 + ed * w, x: tb.x + 0.5 * w };\r\n            var qp1 = $path.lineTo(bt);\r\n            var qp2 = $path.lineTo(tb);\r\n            if (ed != 0) {\r\n                qp1 = $path.quadraticCurveTo(bt, cpr);\r\n                qp2 = $path.quadraticCurveTo(tb, cpl);\r\n            }\r\n            path = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\r\n            this.tickPoint = { y: tb.y + (bb.y - tb.y) / 2, x: tb.x + (bb.x - tb.x) / 2 };\r\n        }\r\n        this.slice.path = path;\r\n        this.invalidateLayout();\r\n    };\r\n    FunnelSlice.prototype.getPoint = function (locationX, locationY) {\r\n        var pt = this.pixelPaddingTop;\r\n        var pb = this.pixelPaddingBottom;\r\n        var pr = this.pixelPaddingRight;\r\n        var pl = this.pixelPaddingLeft;\r\n        var w = this.pixelWidth - pr - pl;\r\n        var h = this.pixelHeight - pt - pb;\r\n        if (this.orientation == \"vertical\") {\r\n            var tw = $utils.relativeToValue(this.topWidth, w);\r\n            var bw = $utils.relativeToValue(this.bottomWidth, w);\r\n            var tl = { x: (w - tw) / 2 + pl, y: pt };\r\n            var tr = { x: (w + tw) / 2 + pl, y: pt };\r\n            var br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n            var bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n            var mlx = tl.x + (bl.x - tl.x) * locationY;\r\n            var mrx = tr.x + (br.x - tr.x) * locationY;\r\n            return { x: mlx + (mrx - mlx) * locationX, y: tr.y + (br.y - tr.y) * locationY };\r\n        }\r\n        else {\r\n            var tw = $utils.relativeToValue(this.topWidth, h);\r\n            var bw = $utils.relativeToValue(this.bottomWidth, h);\r\n            var tt = { x: pl, y: (h - tw) / 2 + pt };\r\n            var tb = { x: pl, y: (h + tw) / 2 + pt };\r\n            var bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n            var bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n            var mty = tt.y + (bt.y - tt.y) * locationX;\r\n            var mby = tb.y + (bb.y - tb.y) * locationX;\r\n            return { y: mty + (mby - mty) * locationY, x: tt.x + (bt.x - tt.x) * locationX };\r\n        }\r\n    };\r\n    Object.defineProperty(FunnelSlice.prototype, \"bottomWidth\", {\r\n        /**\r\n         * @return bottom width\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"bottomWidth\");\r\n        },\r\n        /**\r\n         * Bottom width in pixels or percent.\r\n         *\r\n         * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n         * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n         * becomes read-only as it will be automatically reset by series.\r\n         *\r\n         * @param value  Bottom width\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelSlice.prototype, \"topWidth\", {\r\n        /**\r\n         * @return Top width\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"topWidth\");\r\n        },\r\n        /**\r\n         * Top width in pixels or percent.\r\n         *\r\n         * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n         * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n         * becomes read-only as it will be automatically reset by series.\r\n         *\r\n         * @param value  Top width\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"topWidth\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelSlice.prototype, \"orientation\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n         *\r\n         * IMPORTANT: this setting might be used to set orintation if you use slice\r\n         * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n         * becomes read-only as it will be automatically reset by series.\r\n         *\r\n         * @param value  Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"orientation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelSlice.prototype, \"expandDistance\", {\r\n        /**\r\n         * @return expandDistance\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"expandDistance\");\r\n        },\r\n        /**\r\n         * A relative distance slice's sides should be bent to. It's relative to the\r\n         * height of the slice.\r\n         *\r\n         * Zero (default) will mean the sides will be perfectly straight.\r\n         *\r\n         * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n         *\r\n         * Negative values will make them bend inwards.\r\n         *\r\n         * @default 0\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"expandDistance\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all parameters from another [[Sprite]].\r\n     *\r\n     * @param source Source Sprite\r\n     */\r\n    FunnelSlice.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.slice) {\r\n            this.slice.copyFrom(source.slice);\r\n        }\r\n    };\r\n    return FunnelSlice;\r\n}(Container));\r\nexport { FunnelSlice };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}