{"ast":null,"code":"/**\r\n * Handles date and time formatting\r\n */\nimport { __extends } from \"tslib\";\nimport { Language } from \"../utils/Language\";\nimport { BaseObject } from \"../Base\";\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\nimport { registry } from \"../Registry\";\nimport * as $strings from \"../utils/Strings\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $type from \"../utils/Type\";\nimport * as $time from \"../utils/Time\";\n/**\r\n * Handles date and time formatting.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n * @todo Better type casting of passed in date?\r\n * @todo Quarter support?\r\n * @todo When parsing named months make the search case-insensitive\r\n * @todo Escape a.m./p.m. properly when used in RegEx\r\n */\n\nvar DateFormatter =\n/** @class */\nfunction (_super) {\n  __extends(DateFormatter, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function DateFormatter() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Date format.\r\n     */\n\n\n    _this._dateFormat = \"yyyy-MM-dd\";\n    /**\r\n     * Input date format.\r\n     */\n\n    _this._inputDateFormat = \"yyyy-MM-dd\";\n    /**\r\n     * Assume UTC time zone.\r\n     */\n\n    _this._utc = false;\n    /**\r\n     * If `timezone` is set, this will hold minute fraction of the timezone.\r\n     *\r\n     * @readonly\r\n     * @ignore\r\n     */\n\n    _this.timezoneMinutes = 0;\n    /**\r\n     * First day of week.\r\n     *\r\n     * 0 - Sunday\r\n     * 1 - Monday\r\n     *\r\n     * Etc.\r\n     */\n\n    _this._firstDayOfWeek = 1;\n    /**\r\n     * A list of month names.\r\n     */\n\n    _this.months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    /**\r\n     * A list of short month names.\r\n     */\n\n    _this.monthsShort = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May(short)\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    /**\r\n     * A list of weekday names.\r\n     */\n\n    _this.weekdays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    /**\r\n     * A list of short weekday names.\r\n     */\n\n    _this.weekdaysShort = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    /**\r\n     * Output format to produce. If the format calls for applying color to the\r\n     * formatted value, this setting will determine what markup to use: SVG or\r\n     * HTML.\r\n     *\r\n     * Available options: svg, html.\r\n     *\r\n     * @default \"svg\"\r\n     */\n\n    _this._outputFormat = \"svg\";\n    /**\r\n     * Should the first letter of the formatted date be capitalized?\r\n     *\r\n     * @default true\r\n     */\n\n    _this.capitalize = true;\n    _this.className = \"DateFormatter\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(DateFormatter.prototype, \"language\", {\n    /**\r\n     * @return Language\r\n     */\n    get: function () {\n      return this._language;\n    },\n\n    /**\r\n     * A reference to [[Language]] object.\r\n     *\r\n     * @param  value  Language\r\n     */\n    set: function (value) {\n      this._language = value;\n      this.dateFormat = this._language.translate(\"_date\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Formats the date value according to specified format.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n   * @param source  Date value\r\n   * @param format  Format\r\n   * @return Formatted date string\r\n   */\n\n  DateFormatter.prototype.format = function (source, format, applyTimezone) {\n    // No language?\n    if (!this.language) {\n      if (this.sprite) {\n        this.language = this.sprite.language;\n      } else {\n        this.language = new Language();\n      }\n    } // No format passed in or it's empty\n\n\n    if (typeof format === \"undefined\" || format === \"\") {\n      format = this._dateFormat;\n    } // Init return value\n\n\n    var formatted; // Do casting if required\n    // This will take care of timestamps as well as Date objects\n\n    var date;\n\n    if ($type.isString(source)) {\n      // If it's a string, let's try parsing it using our own functionality\n      date = this.parse(source);\n    } else {\n      date = $utils.anyToDate(source);\n    } // Is it a built-in format or Intl.DateTimeFormat\n\n\n    if ($type.isObject(format)) {\n      try {\n        if (this.intlLocales) {\n          return new Intl.DateTimeFormat(this.intlLocales, format).format(date);\n        } else {\n          return new Intl.DateTimeFormat(undefined, format).format(date);\n        }\n      } catch (e) {\n        return \"Invalid\";\n      }\n    } else {\n      // Clean format\n      format = $utils.cleanFormat(format); // get format info (it will also deal with parser caching)\n\n      var info = this.parseFormat(format); // Should we apply custom time zone?\n\n      if ($type.hasValue(this.timezoneOffset)) {\n        date.setMinutes(date.getMinutes() + date.getTimezoneOffset() - this.timezoneOffset);\n      } else if ($type.hasValue(this.timezone) && applyTimezone !== false) {\n        date = $time.setTimezone(date, this.timezone);\n      } // Check if it's a valid date\n\n\n      if (!$type.isNumber(date.getTime())) {\n        return this.language.translate(\"Invalid date\");\n      } // Apply format\n\n\n      formatted = this.applyFormat(date, info, this.language); // Capitalize\n\n      if (this.capitalize) {\n        formatted = formatted.replace(/^.{1}/, formatted.substr(0, 1).toUpperCase());\n      }\n    } // We're done\n\n\n    return formatted;\n  };\n  /**\r\n   * Parses format into structured infromation.\r\n   *\r\n   * @param format Format template\r\n   */\n\n\n  DateFormatter.prototype.parseFormat = function (format) {\n    // Check cache\n    var cached = this.getCache(format);\n\n    if ($type.hasValue(cached)) {\n      return cached;\n    } // Init format parse info holder\n\n\n    var info = {\n      \"template\": \"\",\n      \"parts\": []\n    }; // Let TextFormatter split into chunks\n\n    var chunks = getTextFormatter().chunk(format, true);\n\n    for (var i = 0; i < chunks.length; i++) {\n      var chunk = chunks[i];\n\n      if (chunk.type === \"value\") {\n        // Just \"Date\"?\n        if (chunk.text.match(/^date$/i) && $type.isString(this._dateFormat)) {\n          chunk.text = this._dateFormat;\n        } // Find all possible parts\n\n\n        var matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g); // Found?\n\n        if (matches) {\n          // Populate template\n          for (var x = 0; x < matches.length; x++) {\n            info.parts.push(matches[x]);\n            chunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\n          }\n        }\n      } // Apply to template\n\n\n      info.template += chunk.text;\n    } // Apply style formatting\n    //info.template = getTextFormatter().format(info.template, this.outputFormat);\n    // Save cache\n\n\n    this.setCache(format, info);\n    return info;\n  };\n  /**\r\n   * Applies format to Date.\r\n   *\r\n   * @param date      Date object\r\n   * @param info      Parsed format information\r\n   * @param language  Language\r\n   * @return Formatted date string\r\n   */\n\n\n  DateFormatter.prototype.applyFormat = function (date, info, language) {\n    // Init return value\n    var res = info.template; // Get values\n\n    var fullYear,\n        month,\n        weekday,\n        day,\n        hours,\n        minutes,\n        seconds,\n        milliseconds,\n        offset = date.getTimezoneOffset(),\n        timestamp = date.getTime();\n\n    if (this.utc) {\n      fullYear = date.getUTCFullYear();\n      month = date.getUTCMonth();\n      weekday = date.getUTCDay();\n      day = date.getUTCDate();\n      hours = date.getUTCHours();\n      minutes = date.getUTCMinutes();\n      seconds = date.getUTCSeconds();\n      milliseconds = date.getUTCMilliseconds();\n    } else {\n      fullYear = date.getFullYear();\n      month = date.getMonth();\n      weekday = date.getDay();\n      day = date.getDate();\n      hours = date.getHours();\n      minutes = date.getMinutes();\n      seconds = date.getSeconds();\n      milliseconds = date.getMilliseconds();\n    } // Go through each part and format/replace it in template\n\n\n    for (var i = 0, len = info.parts.length; i < len; i++) {\n      var value = \"\";\n\n      switch (info.parts[i]) {\n        case \"G\":\n          value = language.translate(fullYear < 0 ? \"_era_bc\" : \"_era_ad\");\n          break;\n\n        case \"yyyy\":\n          value = Math.abs(fullYear).toString();\n\n          if (fullYear < 0) {\n            value += language.translate(\"_era_bc\");\n          }\n\n          break;\n\n        case \"yyy\":\n        case \"yy\":\n        case \"y\":\n          value = Math.abs(fullYear).toString().substr(-info.parts[i].length);\n\n          if (fullYear < 0) {\n            value += language.translate(\"_era_bc\");\n          }\n\n          break;\n\n        case \"YYYY\":\n        case \"YYY\":\n        case \"YY\":\n        case \"Y\":\n          var week = $utils.getWeek(date);\n          var year = fullYear;\n\n          if (week == 1 && weekday > 4) {\n            year--;\n          }\n\n          if (info.parts[i] == \"YYYY\") {\n            value = Math.abs(year).toString();\n          } else {\n            value = Math.abs(year).toString().substr(-info.parts[i].length);\n          }\n\n          if (year < 0) {\n            value += language.translate(\"_era_bc\");\n          }\n\n          break;\n\n        case \"u\":\n          // @todo\n          break;\n\n        case \"q\":\n          value = \"\" + Math.ceil((date.getMonth() + 1) / 3);\n          break;\n\n        case \"MMMMM\":\n          value = language.translate(this.months[month]).substr(0, 1);\n          break;\n\n        case \"MMMM\":\n          value = language.translate(this.months[month]);\n          break;\n\n        case \"MMM\":\n          value = language.translate(this.monthsShort[month]);\n          break;\n\n        case \"MM\":\n          value = $utils.padString(month + 1, 2, \"0\");\n          break;\n\n        case \"M\":\n          value = (month + 1).toString();\n          break;\n\n        case \"ww\":\n          value = $utils.padString($utils.getWeek(date, this.utc), 2, \"0\");\n          break;\n\n        case \"w\":\n          value = $utils.getWeek(date, this.utc).toString();\n          break;\n\n        case \"W\":\n          value = $utils.getMonthWeek(date, this.utc).toString();\n          break;\n\n        case \"dd\":\n          value = $utils.padString(day, 2, \"0\");\n          break;\n\n        case \"d\":\n          value = day.toString();\n          break;\n\n        case \"DD\":\n        case \"DDD\":\n          value = $utils.padString($utils.getYearDay(date, this.utc).toString(), info.parts[i].length, \"0\");\n          break;\n\n        case \"D\":\n          value = $utils.getYearDay(date, this.utc).toString();\n          break;\n\n        case \"F\":\n          // @todo\n          break;\n\n        case \"g\":\n          // @todo\n          break;\n\n        case \"t\":\n          value = language.translateFunc(\"_dateOrd\").call(this, day);\n          break;\n\n        case \"E\":\n          value = (weekday || 7).toString();\n          break;\n\n        case \"EE\":\n          value = $utils.padString((weekday || 7).toString(), 2, \"0\");\n          break;\n\n        case \"EEE\":\n        case \"eee\":\n          value = language.translate(this.weekdaysShort[weekday]);\n          break;\n\n        case \"EEEE\":\n        case \"eeee\":\n          value = language.translate(this.weekdays[weekday]);\n          break;\n\n        case \"EEEEE\":\n        case \"eeeee\":\n          value = language.translate(this.weekdays[weekday]).substr(0, 1);\n          break;\n\n        case \"e\":\n        case \"ee\":\n          value = (weekday - this.firstDayOfWeek + 1).toString();\n\n          if (info.parts[i] == \"ee\") {\n            value = $utils.padString(value, 2, \"0\");\n          }\n\n          break;\n\n        case \"a\":\n          if (hours >= 12) {\n            value = language.translate(\"PM\");\n          } else {\n            value = language.translate(\"AM\");\n          }\n\n          break;\n\n        case \"aa\":\n          if (hours >= 12) {\n            value = language.translate(\"P.M.\");\n          } else {\n            value = language.translate(\"A.M.\");\n          }\n\n          break;\n\n        case \"aaa\":\n          if (hours >= 12) {\n            value = language.translate(\"P\");\n          } else {\n            value = language.translate(\"A\");\n          }\n\n          break;\n\n        case \"h\":\n          value = $utils.get12Hours(hours).toString();\n          break;\n\n        case \"hh\":\n          value = $utils.padString($utils.get12Hours(hours), 2, \"0\");\n          break;\n\n        case \"H\":\n          value = hours.toString();\n          break;\n\n        case \"HH\":\n          value = $utils.padString(hours, 2, \"0\");\n          break;\n\n        case \"K\":\n          value = $utils.get12Hours(hours, 0).toString();\n          break;\n\n        case \"KK\":\n          value = $utils.padString($utils.get12Hours(hours, 0), 2, \"0\");\n          break;\n\n        case \"k\":\n          value = (hours + 1).toString();\n          break;\n\n        case \"kk\":\n          value = $utils.padString(hours + 1, 2, \"0\");\n          break;\n\n        case \"m\":\n          value = minutes.toString();\n          break;\n\n        case \"mm\":\n          value = $utils.padString(minutes, 2, \"0\");\n          break;\n\n        case \"s\":\n          value = seconds.toString();\n          break;\n\n        case \"ss\":\n          value = $utils.padString(seconds, 2, \"0\");\n          break;\n\n        case \"S\":\n        case \"SS\":\n        case \"SSS\":\n          value = Math.round(milliseconds / 1000 * Math.pow(10, info.parts[i].length)).toString();\n          break;\n\n        case \"x\":\n          value = timestamp.toString();\n          break;\n\n        case \"n\":\n        case \"nn\":\n        case \"nnn\":\n          value = $utils.padString(milliseconds, info.parts[i].length, \"0\");\n          break;\n\n        case \"z\":\n          value = $utils.getTimeZone(date, false, false, this.utc);\n          break;\n\n        case \"zz\":\n          value = $utils.getTimeZone(date, true, false, this.utc);\n          break;\n\n        case \"zzz\":\n          value = $utils.getTimeZone(date, false, true, this.utc);\n          break;\n\n        case \"zzzz\":\n          value = $utils.getTimeZone(date, true, true, this.utc);\n          break;\n\n        case \"Z\":\n        case \"ZZ\":\n          var tz = Math.abs(offset) / 60;\n          var tzh = Math.floor(tz);\n          var tzm = tz * 60 - tzh * 60;\n\n          if (this.utc) {\n            tzh = 0;\n            tzm = 0;\n          }\n\n          if (info.parts[i] == \"Z\") {\n            value = \"GMT\";\n            value += offset > 0 ? \"-\" : \"+\";\n            value += $utils.padString(tzh, 2) + \":\" + $utils.padString(tzm, 2);\n          } else {\n            value = offset > 0 ? \"-\" : \"+\";\n            value += $utils.padString(tzh, 2) + $utils.padString(tzm, 2);\n          }\n\n          break;\n\n        case \"i\":\n          value = date.toISOString();\n          break;\n\n        case \"I\":\n          value = date.toUTCString();\n          break;\n      }\n\n      res = res.replace($strings.PLACEHOLDER, value);\n    }\n\n    return res;\n  };\n  /**\r\n   * Parses any input value into Date object.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/#Parsing_Dates} Tutorial on date/time parsing\r\n   * @param source  Source value\r\n   * @param format  Source format\r\n   * @return Date object\r\n   */\n\n\n  DateFormatter.prototype.parse = function (source, format) {\n    // Format set?\n    if (!$type.hasValue(format)) {\n      format = this.inputDateFormat;\n    } // Is it already a Date\n\n\n    if (source instanceof Date) {\n      return source;\n    } // Is it a numeric timestamp\n\n\n    if (typeof source === \"number\") {\n      return new Date(source);\n    } // No? Let's check if it's string, and try converting to it if nec\n\n\n    if (typeof source !== \"string\") {\n      source = source.toString();\n    } // no language?\n\n\n    if (!this.language) {\n      if (this.sprite) {\n        this.language = this.sprite.language;\n      } else {\n        this.language = new Language();\n      }\n    } // Init return value\n\n\n    var res; // Init RegEx for parsing\n\n    var reg = \"\"; // Clean format\n\n    format = $utils.cleanFormat(format); // Clip format to length of the source string\n\n    format = format.substr(0, source.length); // Parse format\n\n    var info = this.parseFormat(format); // Init parsed items holder\n\n    var parsedIndexes = {\n      \"year\": -1,\n      \"year3\": -1,\n      \"year2\": -1,\n      \"year1\": -1,\n      \"month\": -1,\n      \"monthShort\": -1,\n      \"monthLong\": -1,\n      \"weekdayShort\": -1,\n      \"weekdayLong\": -1,\n      \"day\": -1,\n      \"yearDay\": -1,\n      \"week\": -1,\n      \"hourBase0\": -1,\n      \"hour12Base0\": -1,\n      \"hourBase1\": -1,\n      \"hour12Base1\": -1,\n      \"minute\": -1,\n      \"second\": -1,\n      \"millisecond\": -1,\n      \"millisecondDigits\": -1,\n      \"am\": -1,\n      \"zone\": -1,\n      \"timestamp\": -1,\n      \"iso\": -1\n    }; // Init values\n\n    var resValues = {\n      \"year\": 1970,\n      \"month\": 0,\n      \"day\": 1,\n      \"hour\": 0,\n      \"minute\": 0,\n      \"second\": 0,\n      \"millisecond\": 0,\n      \"timestamp\": null,\n      \"offset\": 0,\n      \"utc\": this.utc\n    }; // Index adjuster\n\n    var indexAdjust = 0,\n        index = 0; // Iterate through all of the parts\n\n    for (var i = 0; i < info.parts.length; i++) {\n      // Set current match index\n      index = i + indexAdjust + 1;\n\n      switch (info.parts[i]) {\n        case \"yyyy\":\n        case \"YYYY\":\n          reg += \"([0-9]{4})\";\n          parsedIndexes.year = index;\n          break;\n\n        case \"yyy\":\n        case \"YYY\":\n          reg += \"([0-9]{3})\";\n          parsedIndexes.year3 = index;\n          break;\n\n        case \"yy\":\n        case \"YY\":\n          reg += \"([0-9]{2})\";\n          parsedIndexes.year2 = index;\n          break;\n\n        case \"y\":\n        case \"Y\":\n          reg += \"([0-9]{1})\";\n          parsedIndexes.year1 = index;\n          break;\n\n        case \"MMMM\":\n          reg += \"(\" + this.getStringList(this.months).join(\"|\") + \")\";\n          parsedIndexes.monthLong = index;\n          break;\n\n        case \"MMM\":\n          reg += \"(\" + this.getStringList(this.monthsShort).join(\"|\") + \")\";\n          parsedIndexes.monthShort = index;\n          break;\n\n        case \"MM\":\n        case \"M\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.month = index;\n          break;\n\n        case \"ww\":\n        case \"w\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.week = index;\n          break;\n\n        case \"dd\":\n        case \"d\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.day = index;\n          break;\n\n        case \"DDD\":\n        case \"DD\":\n        case \"D\":\n          reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n          parsedIndexes.yearDay = index;\n          break;\n\n        case \"dddd\":\n          reg += \"(\" + this.getStringList(this.weekdays).join(\"|\") + \")\";\n          parsedIndexes.weekdayLong = index;\n          break;\n\n        case \"ddd\":\n          reg += \"(\" + this.getStringList(this.weekdaysShort).join(\"|\") + \")\";\n          parsedIndexes.weekdayShort = index;\n          break;\n\n        case \"aaa\":\n        case \"aa\":\n        case \"a\":\n          // TODO: fix (escape regex)\n          reg += \"(\" + this.getStringList([\"AM\", \"PM\", \"A\\.M\\.\", \"P\\.M\\.\", \"A\", \"P\"]).join(\"|\") + \")\";\n          parsedIndexes.am = index;\n          break;\n\n        case \"hh\":\n        case \"h\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hour12Base1 = index;\n          break;\n\n        case \"HH\":\n        case \"H\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hourBase0 = index;\n          break;\n\n        case \"KK\":\n        case \"K\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hour12Base0 = index;\n          break;\n\n        case \"kk\":\n        case \"k\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hourBase1 = index;\n          break;\n\n        case \"mm\":\n        case \"m\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.minute = index;\n          break;\n\n        case \"ss\":\n        case \"s\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.second = index;\n          break;\n\n        case \"SSS\":\n        case \"SS\":\n        case \"S\":\n          reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n          parsedIndexes.millisecond = index;\n          parsedIndexes.millisecondDigits = info.parts[i].length;\n          break;\n\n        case \"nnn\":\n        case \"nn\":\n        case \"n\":\n          reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n          parsedIndexes.millisecond = index;\n          break;\n\n        case \"x\":\n          reg += \"([0-9]{1,})\";\n          parsedIndexes.timestamp = index;\n          break;\n\n        case \"Z\":\n          reg += \"GMT([-+]+[0-9]{2}:[0-9]{2})\";\n          parsedIndexes.zone = index;\n          break;\n\n        case \"ZZ\":\n          reg += \"([\\\\-+]+[0-9]{2}[0-9]{2})\";\n          parsedIndexes.zone = index;\n          break;\n\n        case \"i\":\n          reg += \"([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\\.?([0-9]{0,3})([zZ]|[+\\-][0-9]{2}:?[0-9]{2}|$)\";\n          parsedIndexes.iso = index;\n          indexAdjust += 7;\n          break;\n\n        case \"G\":\n        case \"YYYY\":\n        case \"YYY\":\n        case \"YY\":\n        case \"Y\":\n        case \"MMMMM\":\n        case \"W\":\n        case \"EEEEE\":\n        case \"EEEE\":\n        case \"EEE\":\n        case \"EE\":\n        case \"E\":\n        case \"eeeee\":\n        case \"eeee\":\n        case \"eee\":\n        case \"ee\":\n        case \"e\":\n        case \"zzzz\":\n        case \"zzz\":\n        case \"zz\":\n        case \"z\":\n        case \"t\":\n          // Ignore\n          indexAdjust--;\n          break;\n      }\n\n      reg += \"[^0-9]*\";\n    } // Try matching\n\n\n    var regex = new RegExp(reg);\n    var matches = source.match(regex);\n\n    if (matches) {\n      // Populate the date object\n      // Full year\n      if (parsedIndexes.year > -1) {\n        resValues.year = parseInt(matches[parsedIndexes.year]);\n      } // 3-digit year\n\n\n      if (parsedIndexes.year3 > -1) {\n        var val = parseInt(matches[parsedIndexes.year3]);\n        val += 1000;\n        resValues.year = val;\n      } // 2-digit year\n\n\n      if (parsedIndexes.year2 > -1) {\n        var val = parseInt(matches[parsedIndexes.year2]);\n\n        if (val > 50) {\n          val += 1000;\n        } else {\n          val += 2000;\n        }\n\n        resValues.year = val;\n      } // 1-digit year\n\n\n      if (parsedIndexes.year1 > -1) {\n        var val = parseInt(matches[parsedIndexes.year1]);\n        val = Math.floor(new Date().getFullYear() / 10) * 10 + val;\n        resValues.year = val;\n      } // Full month\n\n\n      if (parsedIndexes.monthLong > -1) {\n        resValues.month = this.resolveMonth(matches[parsedIndexes.monthLong]);\n      } // Short month\n\n\n      if (parsedIndexes.monthShort > -1) {\n        resValues.month = this.resolveShortMonth(matches[parsedIndexes.monthShort]);\n      } // Numeric month\n\n\n      if (parsedIndexes.month > -1) {\n        resValues.month = parseInt(matches[parsedIndexes.month]) - 1;\n      } // Weekday\n      // @todo\n      // Week\n\n\n      if (parsedIndexes.week > -1 && parsedIndexes.day === -1) {\n        // We parse weeks ONLY if day is not explicitly set\n        // TODO: this needs work\n        // (but maybe later - I can hardly imagine anyone passing their dates in weeks)\n        resValues.month = 0;\n        resValues.day = $utils.getDayFromWeek(parseInt(matches[parsedIndexes.week]), resValues.year, 1, this.utc);\n      } // Day\n\n\n      if (parsedIndexes.day > -1) {\n        resValues.day = parseInt(matches[parsedIndexes.day]);\n      } // Year day\n\n\n      if (parsedIndexes.yearDay > -1) {\n        resValues.month = 0;\n        resValues.day = parseInt(matches[parsedIndexes.yearDay]);\n      } // 24 Hour (0-23)\n\n\n      if (parsedIndexes.hourBase0 > -1) {\n        resValues.hour = parseInt(matches[parsedIndexes.hourBase0]);\n      } // 24 Hour (1-24)\n\n\n      if (parsedIndexes.hourBase1 > -1) {\n        resValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;\n      } // 12 Hour (0-11)\n\n\n      if (parsedIndexes.hour12Base0 > -1) {\n        var val = parseInt(matches[parsedIndexes.hour12Base0]);\n\n        if (val == 11) {\n          val = 0;\n        }\n\n        if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {\n          val += 12;\n        }\n\n        resValues.hour = val;\n      } // 12 Hour (1-12)\n\n\n      if (parsedIndexes.hour12Base1 > -1) {\n        var val = parseInt(matches[parsedIndexes.hour12Base1]);\n\n        if (val == 12) {\n          val = 0;\n        }\n\n        if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {\n          val += 12;\n        }\n\n        resValues.hour = val;\n      } // Minute\n\n\n      if (parsedIndexes.minute > -1) {\n        resValues.minute = parseInt(matches[parsedIndexes.minute]);\n      } // Second\n\n\n      if (parsedIndexes.second > -1) {\n        resValues.second = parseInt(matches[parsedIndexes.second]);\n      } // Millisecond\n\n\n      if (parsedIndexes.millisecond > -1) {\n        var val = parseInt(matches[parsedIndexes.millisecond]);\n\n        if (parsedIndexes.millisecondDigits == 2) {\n          val *= 10;\n        } else if (parsedIndexes.millisecondDigits == 1) {\n          val *= 100;\n        }\n\n        resValues.millisecond = val;\n      } // Timestamp\n\n\n      if (parsedIndexes.timestamp > -1) {\n        resValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);\n        var ts = new Date(resValues.timestamp);\n        resValues.year = ts.getUTCFullYear();\n        resValues.month = ts.getUTCMonth();\n        resValues.day = ts.getUTCDate();\n        resValues.hour = ts.getUTCHours();\n        resValues.minute = ts.getUTCMinutes();\n        resValues.second = ts.getUTCSeconds();\n        resValues.millisecond = ts.getUTCMilliseconds();\n      } // Adjust time zone\n\n\n      if (parsedIndexes.zone > -1) {\n        resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.zone]);\n      } // ISO\n\n\n      if (parsedIndexes.iso > -1) {\n        resValues.year = $type.toNumber(matches[parsedIndexes.iso + 0]);\n        resValues.month = $type.toNumber(matches[parsedIndexes.iso + 1]) - 1;\n        resValues.day = $type.toNumber(matches[parsedIndexes.iso + 2]);\n        resValues.hour = $type.toNumber(matches[parsedIndexes.iso + 3]);\n        resValues.minute = $type.toNumber(matches[parsedIndexes.iso + 4]);\n        resValues.second = $type.toNumber(matches[parsedIndexes.iso + 5]);\n        resValues.millisecond = $type.toNumber(matches[parsedIndexes.iso + 6]);\n\n        if (matches[parsedIndexes.iso + 7] == \"Z\" || matches[parsedIndexes.iso + 7] == \"z\") {\n          resValues.utc = true;\n        } else if (matches[parsedIndexes.iso + 7] != \"\") {\n          resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.iso + 7]);\n        }\n      } // Create Date object\n\n\n      if (resValues.utc) {\n        res = new Date(Date.UTC(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute, resValues.second, resValues.millisecond));\n      } else {\n        res = new Date(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute + resValues.offset, resValues.second, resValues.millisecond);\n      }\n    } else {\n      // Didn't match anything\n      // Let's try dropping it into Date constructor and hope for the best\n      res = new Date(source);\n    }\n\n    return res;\n  };\n\n  DateFormatter.prototype.resolveTimezoneOffset = function (date, zone) {\n    var value = zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/);\n\n    if (value) {\n      var match = $type.getValue(zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/));\n      var dir = match[1];\n      var hour = match[2];\n      var minute = match[3];\n      var offset = parseInt(hour) * 60 + parseInt(minute); // Adjust offset\n      // Making it negative does not seem to make sense, but it's right\n      // because of how JavaScript calculates GMT offsets\n\n      if (dir == \"+\") {\n        offset *= -1;\n      } // Check the difference in offset\n\n\n      var originalOffset = (date || new Date()).getTimezoneOffset();\n      var diff = offset - originalOffset;\n      return diff;\n    }\n\n    return 0;\n  };\n  /**\r\n   * Resolves month name (i.e. \"December\") into a month number (11).\r\n   *\r\n   * @param value  Month name\r\n   * @return Month number\r\n   */\n\n\n  DateFormatter.prototype.resolveMonth = function (value) {\n    // Let's try English first\n    var month = this.months.indexOf(value);\n\n    if (month > -1) {\n      return month;\n    } // Try the translation\n\n\n    if (this.language && !this.language.isDefault()) {\n      month = this.language.translateAll(this.months).indexOf(value);\n\n      if (month > -1) {\n        return month;\n      }\n    }\n\n    return 0;\n  };\n  /**\r\n   * Resolves short month name (i.e. \"Dec\") into a month number.\r\n   *\r\n   * @param value  Short month name\r\n   * @return Month number\r\n   */\n\n\n  DateFormatter.prototype.resolveShortMonth = function (value) {\n    // Let's try English first\n    var month = this.monthsShort.indexOf(value);\n\n    if (month > -1) {\n      return month;\n    } // Maybe long month (workaround for May)\n\n\n    month = this.months.indexOf(value);\n\n    if (month > -1) {\n      return month;\n    } // Try the translation\n\n\n    if (this.language && !this.language.isDefault()) {\n      month = this.language.translateAll(this.monthsShort).indexOf(value);\n\n      if (month > -1) {\n        return month;\n      }\n    }\n\n    return 0;\n  };\n  /**\r\n   * Checks if passed in string represents AM/PM notation in many of its\r\n   * versions.\r\n   *\r\n   * @param value  Source string\r\n   * @return Is it AM/PM?\r\n   */\n\n\n  DateFormatter.prototype.isAm = function (value) {\n    var list = this.getStringList([\"AM\", \"A.M.\", \"A\"]);\n    return list.indexOf(value.toUpperCase()) > -1;\n  };\n  /**\r\n   * Invalidates related [[Sprite]] causing it to redraw.\r\n   */\n\n\n  DateFormatter.prototype.invalidateSprite = function () {\n    if (this.sprite) {\n      this.sprite.invalidate();\n    }\n  };\n  /**\r\n   * Translates list of strings.\r\n   *\r\n   * @param list  Source strings\r\n   * @return Translated strings\r\n   */\n\n\n  DateFormatter.prototype.getStringList = function (list) {\n    var res = [];\n\n    for (var i = 0; i < list.length; i++) {\n      // translate?\n      if (this.language) {\n        res.push($utils.escapeForRgex(this.language.translate(list[i])));\n      } else {\n        res.push($utils.escapeForRgex(list[i]));\n      }\n    }\n\n    return res;\n  };\n\n  Object.defineProperty(DateFormatter.prototype, \"dateFormat\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function () {\n      return this._dateFormat;\n    },\n\n    /**\r\n     * Date format to use.\r\n     *\r\n     * If format is not supplied in-line in the string, this setting will be\r\n     * used.\r\n     *\r\n     * @default \"yyyy-MM-dd\"\r\n     * @param value Date format\r\n     */\n    set: function (value) {\n      this._dateFormat = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"inputDateFormat\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function () {\n      return this._inputDateFormat;\n    },\n\n    /**\r\n     * Date format to use when parsing dates.\r\n     *\r\n     * @default \"yyyy-MM-dd\"\r\n     * @param value Date format\r\n     */\n    set: function (value) {\n      this._inputDateFormat = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"intlLocales\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function () {\n      return this._intlLocales;\n    },\n\n    /**\r\n     * Locales if you are using date formats in `Intl.DateTimeFormatOptions` syntax.\r\n     *\r\n     * @param value Locales\r\n     */\n    set: function (value) {\n      this._intlLocales = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"utc\", {\n    /**\r\n     * @return Use UTC?\r\n     */\n    get: function () {\n      return this._utc;\n    },\n\n    /**\r\n     * Should formatter use UTC functions?\r\n     *\r\n     * If UTC is used, all date/time values will be independent on client's\r\n     * time zone.\r\n     *\r\n     * @param value Use UTC?\r\n     */\n    set: function (value) {\n      this._utc = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"timezoneOffset\", {\n    /**\r\n     * @return Offset (minutes)\r\n     */\n    get: function () {\n      return this._timezoneOffset;\n    },\n\n    /**\r\n     * If set, will apply specific offset in minutes before formatting the date\r\n     * text.\r\n     *\r\n     * The value is a number of minutes from target time zone to UTC.\r\n     *\r\n     * E.g. `300` will recalculate Dates in \"GMT-5\" time zone.\r\n     *\r\n     * @param  value  Offset (minutes)\r\n     */\n    set: function (value) {\n      if (this._timezoneOffset != value) {\n        this._timezoneOffset = value;\n        this.invalidateSprite();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"timezone\", {\n    /**\r\n     * @return Timezone\r\n     */\n    get: function () {\n      return this._timezone;\n    },\n\n    /**\r\n     * If set, will format date/time in specific time zone.\r\n     *\r\n     * The value should be named time zone, e.g.:\r\n     * `\"America/Vancouver\"`, `\"Australia/Sydney\"`, `\"UTC\"`.\r\n     *\r\n     * @since 4.10.1\r\n     * @param  value  Timezone\r\n     */\n    set: function (value) {\n      if (this._timezone != value) {\n        this._timezone = value;\n        this.timezoneMinutes = $time.getTimezoneMinutes(value);\n        this.invalidateSprite();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"firstDayOfWeek\", {\n    /**\r\n     * @return First day of week\r\n     */\n    get: function () {\n      return this._firstDayOfWeek;\n    },\n\n    /**\r\n     * First day of the week:\r\n     *\r\n     * * 0 - Sunday\r\n     * * 1 - Monday\r\n     * * 2 - Tuesday\r\n     *\r\n     * Etc.\r\n     *\r\n     * @param value First day of week\r\n     */\n    set: function (value) {\n      this._firstDayOfWeek = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"outputFormat\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Format\r\n     */\n    get: function () {\n      return this._outputFormat;\n    },\n\n    /**\r\n     * Output format for the formatted date.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Format\r\n     */\n    set: function (value) {\n      this._outputFormat = value.toLowerCase();\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DateFormatter;\n}(BaseObject);\n\nexport { DateFormatter };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"DateFormatter\"] = DateFormatter;","map":{"version":3,"names":["__extends","Language","BaseObject","getTextFormatter","registry","$strings","$utils","$type","$time","DateFormatter","_super","_this","call","_dateFormat","_inputDateFormat","_utc","timezoneMinutes","_firstDayOfWeek","months","monthsShort","weekdays","weekdaysShort","_outputFormat","capitalize","className","applyTheme","Object","defineProperty","prototype","get","_language","set","value","dateFormat","translate","enumerable","configurable","format","source","applyTimezone","language","sprite","formatted","date","isString","parse","anyToDate","isObject","intlLocales","Intl","DateTimeFormat","undefined","e","cleanFormat","info","parseFormat","hasValue","timezoneOffset","setMinutes","getMinutes","getTimezoneOffset","timezone","setTimezone","isNumber","getTime","applyFormat","replace","substr","toUpperCase","cached","getCache","chunks","chunk","i","length","type","text","match","matches","x","parts","push","PLACEHOLDER","template","setCache","res","fullYear","month","weekday","day","hours","minutes","seconds","milliseconds","offset","timestamp","utc","getUTCFullYear","getUTCMonth","getUTCDay","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getFullYear","getMonth","getDay","getDate","getHours","getSeconds","getMilliseconds","len","Math","abs","toString","week","getWeek","year","ceil","padString","getMonthWeek","getYearDay","translateFunc","firstDayOfWeek","get12Hours","round","pow","getTimeZone","tz","tzh","floor","tzm","toISOString","toUTCString","inputDateFormat","Date","reg","parsedIndexes","resValues","indexAdjust","index","year3","year2","year1","getStringList","join","monthLong","monthShort","yearDay","weekdayLong","weekdayShort","am","hour12Base1","hourBase0","hour12Base0","hourBase1","minute","second","millisecond","millisecondDigits","zone","iso","regex","RegExp","parseInt","val","resolveMonth","resolveShortMonth","getDayFromWeek","hour","isAm","ts","resolveTimezoneOffset","toNumber","UTC","getValue","dir","originalOffset","diff","indexOf","isDefault","translateAll","list","invalidateSprite","invalidate","escapeForRgex","_intlLocales","_timezoneOffset","_timezone","getTimezoneMinutes","toLowerCase","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/formatters/DateFormatter.js"],"sourcesContent":["/**\r\n * Handles date and time formatting\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { BaseObject } from \"../Base\";\r\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $time from \"../utils/Time\";\r\n/**\r\n * Handles date and time formatting.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n * @todo Better type casting of passed in date?\r\n * @todo Quarter support?\r\n * @todo When parsing named months make the search case-insensitive\r\n * @todo Escape a.m./p.m. properly when used in RegEx\r\n */\r\nvar DateFormatter = /** @class */ (function (_super) {\r\n    __extends(DateFormatter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DateFormatter() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Date format.\r\n         */\r\n        _this._dateFormat = \"yyyy-MM-dd\";\r\n        /**\r\n         * Input date format.\r\n         */\r\n        _this._inputDateFormat = \"yyyy-MM-dd\";\r\n        /**\r\n         * Assume UTC time zone.\r\n         */\r\n        _this._utc = false;\r\n        /**\r\n         * If `timezone` is set, this will hold minute fraction of the timezone.\r\n         *\r\n         * @readonly\r\n         * @ignore\r\n         */\r\n        _this.timezoneMinutes = 0;\r\n        /**\r\n         * First day of week.\r\n         *\r\n         * 0 - Sunday\r\n         * 1 - Monday\r\n         *\r\n         * Etc.\r\n         */\r\n        _this._firstDayOfWeek = 1;\r\n        /**\r\n         * A list of month names.\r\n         */\r\n        _this.months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        /**\r\n         * A list of short month names.\r\n         */\r\n        _this.monthsShort = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May(short)\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n        /**\r\n         * A list of weekday names.\r\n         */\r\n        _this.weekdays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        /**\r\n         * A list of short weekday names.\r\n         */\r\n        _this.weekdaysShort = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n        /**\r\n         * Output format to produce. If the format calls for applying color to the\r\n         * formatted value, this setting will determine what markup to use: SVG or\r\n         * HTML.\r\n         *\r\n         * Available options: svg, html.\r\n         *\r\n         * @default \"svg\"\r\n         */\r\n        _this._outputFormat = \"svg\";\r\n        /**\r\n         * Should the first letter of the formatted date be capitalized?\r\n         *\r\n         * @default true\r\n         */\r\n        _this.capitalize = true;\r\n        _this.className = \"DateFormatter\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DateFormatter.prototype, \"language\", {\r\n        /**\r\n         * @return Language\r\n         */\r\n        get: function () {\r\n            return this._language;\r\n        },\r\n        /**\r\n         * A reference to [[Language]] object.\r\n         *\r\n         * @param  value  Language\r\n         */\r\n        set: function (value) {\r\n            this._language = value;\r\n            this.dateFormat = this._language.translate(\"_date\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Formats the date value according to specified format.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n     * @param source  Date value\r\n     * @param format  Format\r\n     * @return Formatted date string\r\n     */\r\n    DateFormatter.prototype.format = function (source, format, applyTimezone) {\r\n        // No language?\r\n        if (!this.language) {\r\n            if (this.sprite) {\r\n                this.language = this.sprite.language;\r\n            }\r\n            else {\r\n                this.language = new Language();\r\n            }\r\n        }\r\n        // No format passed in or it's empty\r\n        if (typeof format === \"undefined\" || format === \"\") {\r\n            format = this._dateFormat;\r\n        }\r\n        // Init return value\r\n        var formatted;\r\n        // Do casting if required\r\n        // This will take care of timestamps as well as Date objects\r\n        var date;\r\n        if ($type.isString(source)) {\r\n            // If it's a string, let's try parsing it using our own functionality\r\n            date = this.parse(source);\r\n        }\r\n        else {\r\n            date = $utils.anyToDate(source);\r\n        }\r\n        // Is it a built-in format or Intl.DateTimeFormat\r\n        if ($type.isObject(format)) {\r\n            try {\r\n                if (this.intlLocales) {\r\n                    return new Intl.DateTimeFormat(this.intlLocales, format).format(date);\r\n                }\r\n                else {\r\n                    return new Intl.DateTimeFormat(undefined, format).format(date);\r\n                }\r\n            }\r\n            catch (e) {\r\n                return \"Invalid\";\r\n            }\r\n        }\r\n        else {\r\n            // Clean format\r\n            format = $utils.cleanFormat(format);\r\n            // get format info (it will also deal with parser caching)\r\n            var info = this.parseFormat(format);\r\n            // Should we apply custom time zone?\r\n            if ($type.hasValue(this.timezoneOffset)) {\r\n                date.setMinutes(date.getMinutes() + date.getTimezoneOffset() - this.timezoneOffset);\r\n            }\r\n            else if ($type.hasValue(this.timezone) && applyTimezone !== false) {\r\n                date = $time.setTimezone(date, this.timezone);\r\n            }\r\n            // Check if it's a valid date\r\n            if (!$type.isNumber(date.getTime())) {\r\n                return this.language.translate(\"Invalid date\");\r\n            }\r\n            // Apply format\r\n            formatted = this.applyFormat(date, info, this.language);\r\n            // Capitalize\r\n            if (this.capitalize) {\r\n                formatted = formatted.replace(/^.{1}/, formatted.substr(0, 1).toUpperCase());\r\n            }\r\n        }\r\n        // We're done\r\n        return formatted;\r\n    };\r\n    /**\r\n     * Parses format into structured infromation.\r\n     *\r\n     * @param format Format template\r\n     */\r\n    DateFormatter.prototype.parseFormat = function (format) {\r\n        // Check cache\r\n        var cached = this.getCache(format);\r\n        if ($type.hasValue(cached)) {\r\n            return cached;\r\n        }\r\n        // Init format parse info holder\r\n        var info = {\r\n            \"template\": \"\",\r\n            \"parts\": []\r\n        };\r\n        // Let TextFormatter split into chunks\r\n        var chunks = getTextFormatter().chunk(format, true);\r\n        for (var i = 0; i < chunks.length; i++) {\r\n            var chunk = chunks[i];\r\n            if (chunk.type === \"value\") {\r\n                // Just \"Date\"?\r\n                if (chunk.text.match(/^date$/i) && $type.isString(this._dateFormat)) {\r\n                    chunk.text = this._dateFormat;\r\n                }\r\n                // Find all possible parts\r\n                var matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);\r\n                // Found?\r\n                if (matches) {\r\n                    // Populate template\r\n                    for (var x = 0; x < matches.length; x++) {\r\n                        info.parts.push(matches[x]);\r\n                        chunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\r\n                    }\r\n                }\r\n            }\r\n            // Apply to template\r\n            info.template += chunk.text;\r\n        }\r\n        // Apply style formatting\r\n        //info.template = getTextFormatter().format(info.template, this.outputFormat);\r\n        // Save cache\r\n        this.setCache(format, info);\r\n        return info;\r\n    };\r\n    /**\r\n     * Applies format to Date.\r\n     *\r\n     * @param date      Date object\r\n     * @param info      Parsed format information\r\n     * @param language  Language\r\n     * @return Formatted date string\r\n     */\r\n    DateFormatter.prototype.applyFormat = function (date, info, language) {\r\n        // Init return value\r\n        var res = info.template;\r\n        // Get values\r\n        var fullYear, month, weekday, day, hours, minutes, seconds, milliseconds, offset = date.getTimezoneOffset(), timestamp = date.getTime();\r\n        if (this.utc) {\r\n            fullYear = date.getUTCFullYear();\r\n            month = date.getUTCMonth();\r\n            weekday = date.getUTCDay();\r\n            day = date.getUTCDate();\r\n            hours = date.getUTCHours();\r\n            minutes = date.getUTCMinutes();\r\n            seconds = date.getUTCSeconds();\r\n            milliseconds = date.getUTCMilliseconds();\r\n        }\r\n        else {\r\n            fullYear = date.getFullYear();\r\n            month = date.getMonth();\r\n            weekday = date.getDay();\r\n            day = date.getDate();\r\n            hours = date.getHours();\r\n            minutes = date.getMinutes();\r\n            seconds = date.getSeconds();\r\n            milliseconds = date.getMilliseconds();\r\n        }\r\n        // Go through each part and format/replace it in template\r\n        for (var i = 0, len = info.parts.length; i < len; i++) {\r\n            var value = \"\";\r\n            switch (info.parts[i]) {\r\n                case \"G\":\r\n                    value = language.translate(fullYear < 0\r\n                        ? \"_era_bc\"\r\n                        : \"_era_ad\");\r\n                    break;\r\n                case \"yyyy\":\r\n                    value = Math.abs(fullYear).toString();\r\n                    if (fullYear < 0) {\r\n                        value += language.translate(\"_era_bc\");\r\n                    }\r\n                    break;\r\n                case \"yyy\":\r\n                case \"yy\":\r\n                case \"y\":\r\n                    value = Math.abs(fullYear).toString().substr(-info.parts[i].length);\r\n                    if (fullYear < 0) {\r\n                        value += language.translate(\"_era_bc\");\r\n                    }\r\n                    break;\r\n                case \"YYYY\":\r\n                case \"YYY\":\r\n                case \"YY\":\r\n                case \"Y\":\r\n                    var week = $utils.getWeek(date);\r\n                    var year = fullYear;\r\n                    if (week == 1 && (weekday > 4)) {\r\n                        year--;\r\n                    }\r\n                    if (info.parts[i] == \"YYYY\") {\r\n                        value = Math.abs(year).toString();\r\n                    }\r\n                    else {\r\n                        value = Math.abs(year).toString().substr(-info.parts[i].length);\r\n                    }\r\n                    if (year < 0) {\r\n                        value += language.translate(\"_era_bc\");\r\n                    }\r\n                    break;\r\n                case \"u\":\r\n                    // @todo\r\n                    break;\r\n                case \"q\":\r\n                    value = \"\" + Math.ceil((date.getMonth() + 1) / 3);\r\n                    break;\r\n                case \"MMMMM\":\r\n                    value = language.translate(this.months[month]).substr(0, 1);\r\n                    break;\r\n                case \"MMMM\":\r\n                    value = language.translate(this.months[month]);\r\n                    break;\r\n                case \"MMM\":\r\n                    value = language.translate(this.monthsShort[month]);\r\n                    break;\r\n                case \"MM\":\r\n                    value = $utils.padString(month + 1, 2, \"0\");\r\n                    break;\r\n                case \"M\":\r\n                    value = (month + 1).toString();\r\n                    break;\r\n                case \"ww\":\r\n                    value = $utils.padString($utils.getWeek(date, this.utc), 2, \"0\");\r\n                    break;\r\n                case \"w\":\r\n                    value = $utils.getWeek(date, this.utc).toString();\r\n                    break;\r\n                case \"W\":\r\n                    value = $utils.getMonthWeek(date, this.utc).toString();\r\n                    break;\r\n                case \"dd\":\r\n                    value = $utils.padString(day, 2, \"0\");\r\n                    break;\r\n                case \"d\":\r\n                    value = day.toString();\r\n                    break;\r\n                case \"DD\":\r\n                case \"DDD\":\r\n                    value = $utils.padString($utils.getYearDay(date, this.utc).toString(), info.parts[i].length, \"0\");\r\n                    break;\r\n                case \"D\":\r\n                    value = $utils.getYearDay(date, this.utc).toString();\r\n                    break;\r\n                case \"F\":\r\n                    // @todo\r\n                    break;\r\n                case \"g\":\r\n                    // @todo\r\n                    break;\r\n                case \"t\":\r\n                    value = language.translateFunc(\"_dateOrd\").call(this, day);\r\n                    break;\r\n                case \"E\":\r\n                    value = (weekday || 7).toString();\r\n                    break;\r\n                case \"EE\":\r\n                    value = $utils.padString((weekday || 7).toString(), 2, \"0\");\r\n                    break;\r\n                case \"EEE\":\r\n                case \"eee\":\r\n                    value = language.translate(this.weekdaysShort[weekday]);\r\n                    break;\r\n                case \"EEEE\":\r\n                case \"eeee\":\r\n                    value = language.translate(this.weekdays[weekday]);\r\n                    break;\r\n                case \"EEEEE\":\r\n                case \"eeeee\":\r\n                    value = language.translate(this.weekdays[weekday]).substr(0, 1);\r\n                    break;\r\n                case \"e\":\r\n                case \"ee\":\r\n                    value = (weekday - this.firstDayOfWeek + 1).toString();\r\n                    if (info.parts[i] == \"ee\") {\r\n                        value = $utils.padString(value, 2, \"0\");\r\n                    }\r\n                    break;\r\n                case \"a\":\r\n                    if (hours >= 12) {\r\n                        value = language.translate(\"PM\");\r\n                    }\r\n                    else {\r\n                        value = language.translate(\"AM\");\r\n                    }\r\n                    break;\r\n                case \"aa\":\r\n                    if (hours >= 12) {\r\n                        value = language.translate(\"P.M.\");\r\n                    }\r\n                    else {\r\n                        value = language.translate(\"A.M.\");\r\n                    }\r\n                    break;\r\n                case \"aaa\":\r\n                    if (hours >= 12) {\r\n                        value = language.translate(\"P\");\r\n                    }\r\n                    else {\r\n                        value = language.translate(\"A\");\r\n                    }\r\n                    break;\r\n                case \"h\":\r\n                    value = $utils.get12Hours(hours).toString();\r\n                    break;\r\n                case \"hh\":\r\n                    value = $utils.padString($utils.get12Hours(hours), 2, \"0\");\r\n                    break;\r\n                case \"H\":\r\n                    value = hours.toString();\r\n                    break;\r\n                case \"HH\":\r\n                    value = $utils.padString(hours, 2, \"0\");\r\n                    break;\r\n                case \"K\":\r\n                    value = $utils.get12Hours(hours, 0).toString();\r\n                    break;\r\n                case \"KK\":\r\n                    value = $utils.padString($utils.get12Hours(hours, 0), 2, \"0\");\r\n                    break;\r\n                case \"k\":\r\n                    value = (hours + 1).toString();\r\n                    break;\r\n                case \"kk\":\r\n                    value = $utils.padString(hours + 1, 2, \"0\");\r\n                    break;\r\n                case \"m\":\r\n                    value = minutes.toString();\r\n                    break;\r\n                case \"mm\":\r\n                    value = $utils.padString(minutes, 2, \"0\");\r\n                    break;\r\n                case \"s\":\r\n                    value = seconds.toString();\r\n                    break;\r\n                case \"ss\":\r\n                    value = $utils.padString(seconds, 2, \"0\");\r\n                    break;\r\n                case \"S\":\r\n                case \"SS\":\r\n                case \"SSS\":\r\n                    value = Math.round((milliseconds / 1000) * Math.pow(10, info.parts[i].length)).toString();\r\n                    break;\r\n                case \"x\":\r\n                    value = timestamp.toString();\r\n                    break;\r\n                case \"n\":\r\n                case \"nn\":\r\n                case \"nnn\":\r\n                    value = $utils.padString(milliseconds, info.parts[i].length, \"0\");\r\n                    break;\r\n                case \"z\":\r\n                    value = $utils.getTimeZone(date, false, false, this.utc);\r\n                    break;\r\n                case \"zz\":\r\n                    value = $utils.getTimeZone(date, true, false, this.utc);\r\n                    break;\r\n                case \"zzz\":\r\n                    value = $utils.getTimeZone(date, false, true, this.utc);\r\n                    break;\r\n                case \"zzzz\":\r\n                    value = $utils.getTimeZone(date, true, true, this.utc);\r\n                    break;\r\n                case \"Z\":\r\n                case \"ZZ\":\r\n                    var tz = Math.abs(offset) / 60;\r\n                    var tzh = Math.floor(tz);\r\n                    var tzm = tz * 60 - tzh * 60;\r\n                    if (this.utc) {\r\n                        tzh = 0;\r\n                        tzm = 0;\r\n                    }\r\n                    if (info.parts[i] == \"Z\") {\r\n                        value = \"GMT\";\r\n                        value += offset > 0 ? \"-\" : \"+\";\r\n                        value += $utils.padString(tzh, 2) + \":\" + $utils.padString(tzm, 2);\r\n                    }\r\n                    else {\r\n                        value = offset > 0 ? \"-\" : \"+\";\r\n                        value += $utils.padString(tzh, 2) + $utils.padString(tzm, 2);\r\n                    }\r\n                    break;\r\n                case \"i\":\r\n                    value = date.toISOString();\r\n                    break;\r\n                case \"I\":\r\n                    value = date.toUTCString();\r\n                    break;\r\n            }\r\n            res = res.replace($strings.PLACEHOLDER, value);\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Parses any input value into Date object.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/#Parsing_Dates} Tutorial on date/time parsing\r\n     * @param source  Source value\r\n     * @param format  Source format\r\n     * @return Date object\r\n     */\r\n    DateFormatter.prototype.parse = function (source, format) {\r\n        // Format set?\r\n        if (!$type.hasValue(format)) {\r\n            format = this.inputDateFormat;\r\n        }\r\n        // Is it already a Date\r\n        if (source instanceof Date) {\r\n            return source;\r\n        }\r\n        // Is it a numeric timestamp\r\n        if (typeof source === \"number\") {\r\n            return new Date(source);\r\n        }\r\n        // No? Let's check if it's string, and try converting to it if nec\r\n        if (typeof source !== \"string\") {\r\n            source = source.toString();\r\n        }\r\n        // no language?\r\n        if (!this.language) {\r\n            if (this.sprite) {\r\n                this.language = this.sprite.language;\r\n            }\r\n            else {\r\n                this.language = new Language;\r\n            }\r\n        }\r\n        // Init return value\r\n        var res;\r\n        // Init RegEx for parsing\r\n        var reg = \"\";\r\n        // Clean format\r\n        format = $utils.cleanFormat(format);\r\n        // Clip format to length of the source string\r\n        format = format.substr(0, source.length);\r\n        // Parse format\r\n        var info = this.parseFormat(format);\r\n        // Init parsed items holder\r\n        var parsedIndexes = {\r\n            \"year\": -1,\r\n            \"year3\": -1,\r\n            \"year2\": -1,\r\n            \"year1\": -1,\r\n            \"month\": -1,\r\n            \"monthShort\": -1,\r\n            \"monthLong\": -1,\r\n            \"weekdayShort\": -1,\r\n            \"weekdayLong\": -1,\r\n            \"day\": -1,\r\n            \"yearDay\": -1,\r\n            \"week\": -1,\r\n            \"hourBase0\": -1,\r\n            \"hour12Base0\": -1,\r\n            \"hourBase1\": -1,\r\n            \"hour12Base1\": -1,\r\n            \"minute\": -1,\r\n            \"second\": -1,\r\n            \"millisecond\": -1,\r\n            \"millisecondDigits\": -1,\r\n            \"am\": -1,\r\n            \"zone\": -1,\r\n            \"timestamp\": -1,\r\n            \"iso\": -1\r\n        };\r\n        // Init values\r\n        var resValues = {\r\n            \"year\": 1970,\r\n            \"month\": 0,\r\n            \"day\": 1,\r\n            \"hour\": 0,\r\n            \"minute\": 0,\r\n            \"second\": 0,\r\n            \"millisecond\": 0,\r\n            \"timestamp\": null,\r\n            \"offset\": 0,\r\n            \"utc\": this.utc\r\n        };\r\n        // Index adjuster\r\n        var indexAdjust = 0, index = 0;\r\n        // Iterate through all of the parts\r\n        for (var i = 0; i < info.parts.length; i++) {\r\n            // Set current match index\r\n            index = i + indexAdjust + 1;\r\n            switch (info.parts[i]) {\r\n                case \"yyyy\":\r\n                case \"YYYY\":\r\n                    reg += \"([0-9]{4})\";\r\n                    parsedIndexes.year = index;\r\n                    break;\r\n                case \"yyy\":\r\n                case \"YYY\":\r\n                    reg += \"([0-9]{3})\";\r\n                    parsedIndexes.year3 = index;\r\n                    break;\r\n                case \"yy\":\r\n                case \"YY\":\r\n                    reg += \"([0-9]{2})\";\r\n                    parsedIndexes.year2 = index;\r\n                    break;\r\n                case \"y\":\r\n                case \"Y\":\r\n                    reg += \"([0-9]{1})\";\r\n                    parsedIndexes.year1 = index;\r\n                    break;\r\n                case \"MMMM\":\r\n                    reg += \"(\" + this.getStringList(this.months).join(\"|\") + \")\";\r\n                    parsedIndexes.monthLong = index;\r\n                    break;\r\n                case \"MMM\":\r\n                    reg += \"(\" + this.getStringList(this.monthsShort).join(\"|\") + \")\";\r\n                    parsedIndexes.monthShort = index;\r\n                    break;\r\n                case \"MM\":\r\n                case \"M\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.month = index;\r\n                    break;\r\n                case \"ww\":\r\n                case \"w\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.week = index;\r\n                    break;\r\n                case \"dd\":\r\n                case \"d\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.day = index;\r\n                    break;\r\n                case \"DDD\":\r\n                case \"DD\":\r\n                case \"D\":\r\n                    reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.yearDay = index;\r\n                    break;\r\n                case \"dddd\":\r\n                    reg += \"(\" + this.getStringList(this.weekdays).join(\"|\") + \")\";\r\n                    parsedIndexes.weekdayLong = index;\r\n                    break;\r\n                case \"ddd\":\r\n                    reg += \"(\" + this.getStringList(this.weekdaysShort).join(\"|\") + \")\";\r\n                    parsedIndexes.weekdayShort = index;\r\n                    break;\r\n                case \"aaa\":\r\n                case \"aa\":\r\n                case \"a\":\r\n                    // TODO: fix (escape regex)\r\n                    reg += \"(\" + this.getStringList([\"AM\", \"PM\", \"A\\.M\\.\", \"P\\.M\\.\", \"A\", \"P\"]).join(\"|\") + \")\";\r\n                    parsedIndexes.am = index;\r\n                    break;\r\n                case \"hh\":\r\n                case \"h\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.hour12Base1 = index;\r\n                    break;\r\n                case \"HH\":\r\n                case \"H\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.hourBase0 = index;\r\n                    break;\r\n                case \"KK\":\r\n                case \"K\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.hour12Base0 = index;\r\n                    break;\r\n                case \"kk\":\r\n                case \"k\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.hourBase1 = index;\r\n                    break;\r\n                case \"mm\":\r\n                case \"m\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.minute = index;\r\n                    break;\r\n                case \"ss\":\r\n                case \"s\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.second = index;\r\n                    break;\r\n                case \"SSS\":\r\n                case \"SS\":\r\n                case \"S\":\r\n                    reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.millisecond = index;\r\n                    parsedIndexes.millisecondDigits = info.parts[i].length;\r\n                    break;\r\n                case \"nnn\":\r\n                case \"nn\":\r\n                case \"n\":\r\n                    reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.millisecond = index;\r\n                    break;\r\n                case \"x\":\r\n                    reg += \"([0-9]{1,})\";\r\n                    parsedIndexes.timestamp = index;\r\n                    break;\r\n                case \"Z\":\r\n                    reg += \"GMT([-+]+[0-9]{2}:[0-9]{2})\";\r\n                    parsedIndexes.zone = index;\r\n                    break;\r\n                case \"ZZ\":\r\n                    reg += \"([\\\\-+]+[0-9]{2}[0-9]{2})\";\r\n                    parsedIndexes.zone = index;\r\n                    break;\r\n                case \"i\":\r\n                    reg += \"([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\\.?([0-9]{0,3})([zZ]|[+\\-][0-9]{2}:?[0-9]{2}|$)\";\r\n                    parsedIndexes.iso = index;\r\n                    indexAdjust += 7;\r\n                    break;\r\n                case \"G\":\r\n                case \"YYYY\":\r\n                case \"YYY\":\r\n                case \"YY\":\r\n                case \"Y\":\r\n                case \"MMMMM\":\r\n                case \"W\":\r\n                case \"EEEEE\":\r\n                case \"EEEE\":\r\n                case \"EEE\":\r\n                case \"EE\":\r\n                case \"E\":\r\n                case \"eeeee\":\r\n                case \"eeee\":\r\n                case \"eee\":\r\n                case \"ee\":\r\n                case \"e\":\r\n                case \"zzzz\":\r\n                case \"zzz\":\r\n                case \"zz\":\r\n                case \"z\":\r\n                case \"t\":\r\n                    // Ignore\r\n                    indexAdjust--;\r\n                    break;\r\n            }\r\n            reg += \"[^0-9]*\";\r\n        }\r\n        // Try matching\r\n        var regex = new RegExp(reg);\r\n        var matches = source.match(regex);\r\n        if (matches) {\r\n            // Populate the date object\r\n            // Full year\r\n            if (parsedIndexes.year > -1) {\r\n                resValues.year = parseInt(matches[parsedIndexes.year]);\r\n            }\r\n            // 3-digit year\r\n            if (parsedIndexes.year3 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.year3]);\r\n                val += 1000;\r\n                resValues.year = val;\r\n            }\r\n            // 2-digit year\r\n            if (parsedIndexes.year2 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.year2]);\r\n                if (val > 50) {\r\n                    val += 1000;\r\n                }\r\n                else {\r\n                    val += 2000;\r\n                }\r\n                resValues.year = val;\r\n            }\r\n            // 1-digit year\r\n            if (parsedIndexes.year1 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.year1]);\r\n                val = Math.floor((new Date().getFullYear()) / 10) * 10 + val;\r\n                resValues.year = val;\r\n            }\r\n            // Full month\r\n            if (parsedIndexes.monthLong > -1) {\r\n                resValues.month = this.resolveMonth(matches[parsedIndexes.monthLong]);\r\n            }\r\n            // Short month\r\n            if (parsedIndexes.monthShort > -1) {\r\n                resValues.month = this.resolveShortMonth(matches[parsedIndexes.monthShort]);\r\n            }\r\n            // Numeric month\r\n            if (parsedIndexes.month > -1) {\r\n                resValues.month = parseInt(matches[parsedIndexes.month]) - 1;\r\n            }\r\n            // Weekday\r\n            // @todo\r\n            // Week\r\n            if ((parsedIndexes.week > -1) && (parsedIndexes.day === -1)) {\r\n                // We parse weeks ONLY if day is not explicitly set\r\n                // TODO: this needs work\r\n                // (but maybe later - I can hardly imagine anyone passing their dates in weeks)\r\n                resValues.month = 0;\r\n                resValues.day = $utils.getDayFromWeek(parseInt(matches[parsedIndexes.week]), resValues.year, 1, this.utc);\r\n            }\r\n            // Day\r\n            if (parsedIndexes.day > -1) {\r\n                resValues.day = parseInt(matches[parsedIndexes.day]);\r\n            }\r\n            // Year day\r\n            if (parsedIndexes.yearDay > -1) {\r\n                resValues.month = 0;\r\n                resValues.day = parseInt(matches[parsedIndexes.yearDay]);\r\n            }\r\n            // 24 Hour (0-23)\r\n            if (parsedIndexes.hourBase0 > -1) {\r\n                resValues.hour = parseInt(matches[parsedIndexes.hourBase0]);\r\n            }\r\n            // 24 Hour (1-24)\r\n            if (parsedIndexes.hourBase1 > -1) {\r\n                resValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;\r\n            }\r\n            // 12 Hour (0-11)\r\n            if (parsedIndexes.hour12Base0 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.hour12Base0]);\r\n                if (val == 11) {\r\n                    val = 0;\r\n                }\r\n                if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {\r\n                    val += 12;\r\n                }\r\n                resValues.hour = val;\r\n            }\r\n            // 12 Hour (1-12)\r\n            if (parsedIndexes.hour12Base1 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.hour12Base1]);\r\n                if (val == 12) {\r\n                    val = 0;\r\n                }\r\n                if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {\r\n                    val += 12;\r\n                }\r\n                resValues.hour = val;\r\n            }\r\n            // Minute\r\n            if (parsedIndexes.minute > -1) {\r\n                resValues.minute = parseInt(matches[parsedIndexes.minute]);\r\n            }\r\n            // Second\r\n            if (parsedIndexes.second > -1) {\r\n                resValues.second = parseInt(matches[parsedIndexes.second]);\r\n            }\r\n            // Millisecond\r\n            if (parsedIndexes.millisecond > -1) {\r\n                var val = parseInt(matches[parsedIndexes.millisecond]);\r\n                if (parsedIndexes.millisecondDigits == 2) {\r\n                    val *= 10;\r\n                }\r\n                else if (parsedIndexes.millisecondDigits == 1) {\r\n                    val *= 100;\r\n                }\r\n                resValues.millisecond = val;\r\n            }\r\n            // Timestamp\r\n            if (parsedIndexes.timestamp > -1) {\r\n                resValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);\r\n                var ts = new Date(resValues.timestamp);\r\n                resValues.year = ts.getUTCFullYear();\r\n                resValues.month = ts.getUTCMonth();\r\n                resValues.day = ts.getUTCDate();\r\n                resValues.hour = ts.getUTCHours();\r\n                resValues.minute = ts.getUTCMinutes();\r\n                resValues.second = ts.getUTCSeconds();\r\n                resValues.millisecond = ts.getUTCMilliseconds();\r\n            }\r\n            // Adjust time zone\r\n            if (parsedIndexes.zone > -1) {\r\n                resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.zone]);\r\n            }\r\n            // ISO\r\n            if (parsedIndexes.iso > -1) {\r\n                resValues.year = $type.toNumber(matches[parsedIndexes.iso + 0]);\r\n                resValues.month = $type.toNumber(matches[parsedIndexes.iso + 1]) - 1;\r\n                resValues.day = $type.toNumber(matches[parsedIndexes.iso + 2]);\r\n                resValues.hour = $type.toNumber(matches[parsedIndexes.iso + 3]);\r\n                resValues.minute = $type.toNumber(matches[parsedIndexes.iso + 4]);\r\n                resValues.second = $type.toNumber(matches[parsedIndexes.iso + 5]);\r\n                resValues.millisecond = $type.toNumber(matches[parsedIndexes.iso + 6]);\r\n                if (matches[parsedIndexes.iso + 7] == \"Z\" || matches[parsedIndexes.iso + 7] == \"z\") {\r\n                    resValues.utc = true;\r\n                }\r\n                else if (matches[parsedIndexes.iso + 7] != \"\") {\r\n                    resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.iso + 7]);\r\n                }\r\n            }\r\n            // Create Date object\r\n            if (resValues.utc) {\r\n                res = new Date(Date.UTC(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute, resValues.second, resValues.millisecond));\r\n            }\r\n            else {\r\n                res = new Date(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute + resValues.offset, resValues.second, resValues.millisecond);\r\n            }\r\n        }\r\n        else {\r\n            // Didn't match anything\r\n            // Let's try dropping it into Date constructor and hope for the best\r\n            res = new Date(source);\r\n        }\r\n        return res;\r\n    };\r\n    DateFormatter.prototype.resolveTimezoneOffset = function (date, zone) {\r\n        var value = zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/);\r\n        if (value) {\r\n            var match = $type.getValue(zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/));\r\n            var dir = match[1];\r\n            var hour = match[2];\r\n            var minute = match[3];\r\n            var offset = parseInt(hour) * 60 + parseInt(minute);\r\n            // Adjust offset\r\n            // Making it negative does not seem to make sense, but it's right\r\n            // because of how JavaScript calculates GMT offsets\r\n            if (dir == \"+\") {\r\n                offset *= -1;\r\n            }\r\n            // Check the difference in offset\r\n            var originalOffset = (date || new Date()).getTimezoneOffset();\r\n            var diff = offset - originalOffset;\r\n            return diff;\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Resolves month name (i.e. \"December\") into a month number (11).\r\n     *\r\n     * @param value  Month name\r\n     * @return Month number\r\n     */\r\n    DateFormatter.prototype.resolveMonth = function (value) {\r\n        // Let's try English first\r\n        var month = this.months.indexOf(value);\r\n        if (month > -1) {\r\n            return month;\r\n        }\r\n        // Try the translation\r\n        if (this.language && !this.language.isDefault()) {\r\n            month = this.language.translateAll(this.months).indexOf(value);\r\n            if (month > -1) {\r\n                return month;\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Resolves short month name (i.e. \"Dec\") into a month number.\r\n     *\r\n     * @param value  Short month name\r\n     * @return Month number\r\n     */\r\n    DateFormatter.prototype.resolveShortMonth = function (value) {\r\n        // Let's try English first\r\n        var month = this.monthsShort.indexOf(value);\r\n        if (month > -1) {\r\n            return month;\r\n        }\r\n        // Maybe long month (workaround for May)\r\n        month = this.months.indexOf(value);\r\n        if (month > -1) {\r\n            return month;\r\n        }\r\n        // Try the translation\r\n        if (this.language && !this.language.isDefault()) {\r\n            month = this.language.translateAll(this.monthsShort).indexOf(value);\r\n            if (month > -1) {\r\n                return month;\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Checks if passed in string represents AM/PM notation in many of its\r\n     * versions.\r\n     *\r\n     * @param value  Source string\r\n     * @return Is it AM/PM?\r\n     */\r\n    DateFormatter.prototype.isAm = function (value) {\r\n        var list = this.getStringList([\"AM\", \"A.M.\", \"A\"]);\r\n        return list.indexOf(value.toUpperCase()) > -1;\r\n    };\r\n    /**\r\n     * Invalidates related [[Sprite]] causing it to redraw.\r\n     */\r\n    DateFormatter.prototype.invalidateSprite = function () {\r\n        if (this.sprite) {\r\n            this.sprite.invalidate();\r\n        }\r\n    };\r\n    /**\r\n     * Translates list of strings.\r\n     *\r\n     * @param list  Source strings\r\n     * @return Translated strings\r\n     */\r\n    DateFormatter.prototype.getStringList = function (list) {\r\n        var res = [];\r\n        for (var i = 0; i < list.length; i++) {\r\n            // translate?\r\n            if (this.language) {\r\n                res.push($utils.escapeForRgex(this.language.translate(list[i])));\r\n            }\r\n            else {\r\n                res.push($utils.escapeForRgex(list[i]));\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    Object.defineProperty(DateFormatter.prototype, \"dateFormat\", {\r\n        /**\r\n         * @return Date format\r\n         */\r\n        get: function () {\r\n            return this._dateFormat;\r\n        },\r\n        /**\r\n         * Date format to use.\r\n         *\r\n         * If format is not supplied in-line in the string, this setting will be\r\n         * used.\r\n         *\r\n         * @default \"yyyy-MM-dd\"\r\n         * @param value Date format\r\n         */\r\n        set: function (value) {\r\n            this._dateFormat = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"inputDateFormat\", {\r\n        /**\r\n         * @return Date format\r\n         */\r\n        get: function () {\r\n            return this._inputDateFormat;\r\n        },\r\n        /**\r\n         * Date format to use when parsing dates.\r\n         *\r\n         * @default \"yyyy-MM-dd\"\r\n         * @param value Date format\r\n         */\r\n        set: function (value) {\r\n            this._inputDateFormat = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"intlLocales\", {\r\n        /**\r\n         * @return Date format\r\n         */\r\n        get: function () {\r\n            return this._intlLocales;\r\n        },\r\n        /**\r\n         * Locales if you are using date formats in `Intl.DateTimeFormatOptions` syntax.\r\n         *\r\n         * @param value Locales\r\n         */\r\n        set: function (value) {\r\n            this._intlLocales = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"utc\", {\r\n        /**\r\n         * @return Use UTC?\r\n         */\r\n        get: function () {\r\n            return this._utc;\r\n        },\r\n        /**\r\n         * Should formatter use UTC functions?\r\n         *\r\n         * If UTC is used, all date/time values will be independent on client's\r\n         * time zone.\r\n         *\r\n         * @param value Use UTC?\r\n         */\r\n        set: function (value) {\r\n            this._utc = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"timezoneOffset\", {\r\n        /**\r\n         * @return Offset (minutes)\r\n         */\r\n        get: function () {\r\n            return this._timezoneOffset;\r\n        },\r\n        /**\r\n         * If set, will apply specific offset in minutes before formatting the date\r\n         * text.\r\n         *\r\n         * The value is a number of minutes from target time zone to UTC.\r\n         *\r\n         * E.g. `300` will recalculate Dates in \"GMT-5\" time zone.\r\n         *\r\n         * @param  value  Offset (minutes)\r\n         */\r\n        set: function (value) {\r\n            if (this._timezoneOffset != value) {\r\n                this._timezoneOffset = value;\r\n                this.invalidateSprite();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"timezone\", {\r\n        /**\r\n         * @return Timezone\r\n         */\r\n        get: function () {\r\n            return this._timezone;\r\n        },\r\n        /**\r\n         * If set, will format date/time in specific time zone.\r\n         *\r\n         * The value should be named time zone, e.g.:\r\n         * `\"America/Vancouver\"`, `\"Australia/Sydney\"`, `\"UTC\"`.\r\n         *\r\n         * @since 4.10.1\r\n         * @param  value  Timezone\r\n         */\r\n        set: function (value) {\r\n            if (this._timezone != value) {\r\n                this._timezone = value;\r\n                this.timezoneMinutes = $time.getTimezoneMinutes(value);\r\n                this.invalidateSprite();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"firstDayOfWeek\", {\r\n        /**\r\n         * @return First day of week\r\n         */\r\n        get: function () {\r\n            return this._firstDayOfWeek;\r\n        },\r\n        /**\r\n         * First day of the week:\r\n         *\r\n         * * 0 - Sunday\r\n         * * 1 - Monday\r\n         * * 2 - Tuesday\r\n         *\r\n         * Etc.\r\n         *\r\n         * @param value First day of week\r\n         */\r\n        set: function (value) {\r\n            this._firstDayOfWeek = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"outputFormat\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Format\r\n         */\r\n        get: function () {\r\n            return this._outputFormat;\r\n        },\r\n        /**\r\n         * Output format for the formatted date.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Format\r\n         */\r\n        set: function (value) {\r\n            this._outputFormat = value.toLowerCase();\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DateFormatter;\r\n}(BaseObject));\r\nexport { DateFormatter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateFormatter\"] = DateFormatter;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}