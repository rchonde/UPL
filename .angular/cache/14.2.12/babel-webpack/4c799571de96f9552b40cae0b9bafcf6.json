{"ast":null,"code":"/**\r\n * DurationAxis module\r\n */\nimport { __extends, __values } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ValueAxis, ValueAxisDataItem } from \"./ValueAxis\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar DurationAxisDataItem =\n/** @class */\nfunction (_super) {\n  __extends(DurationAxisDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function DurationAxisDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"DurationAxisDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return DurationAxisDataItem;\n}(ValueAxisDataItem);\n\nexport { DurationAxisDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar DurationAxis =\n/** @class */\nfunction (_super) {\n  __extends(DurationAxis, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function DurationAxis() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A base unit (granularity) of data.\r\n     *\r\n     * Used to indicate what are the base units of your data.\r\n     */\n\n\n    _this._baseUnit = \"second\";\n    _this.className = \"DurationAxis\";\n\n    _this.setPropertyValue(\"maxZoomFactor\", 1000000); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Formats the value according to axis' own [[DurationFormatter]].\r\n   *\r\n   * @param value  Source value\r\n   * @return Formatted value\r\n   */\n\n\n  DurationAxis.prototype.formatLabel = function (value, format) {\n    return this.durationFormatter.format(value, format || this.axisDurationFormat);\n  };\n  /**\r\n   * Adjusts actual min and max scale values so that the axis starts and ends\r\n   * at \"nice\" values, unless `strictMinMax` is set.\r\n   *\r\n   * The `difference` can be something else than `max - min`, because of the\r\n   * axis breaks.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param min        [description]\r\n   * @param max        [description]\r\n   * @param difference [description]\r\n   * @param gridCount  [description]\r\n   * @param strictMode [description]\r\n   * @return [description]\r\n   */\n\n\n  DurationAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\n    var e_1, _a;\n\n    var minMaxStep;\n    var timeUnit = this.baseUnit; // we don't allow to go to smaller units, setting so to avoid invalidation\n\n    this.setPropertyValue(\"maxPrecision\", 0);\n\n    if (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\n      // will fail if 0\n      if (gridCount <= 1) {\n        gridCount = 1;\n      }\n\n      gridCount = Math.round(gridCount);\n      var initialMin = min;\n      var initialMax = max; // in case min and max is the same, use max\n\n      if (difference === 0) {\n        difference = Math.abs(max);\n      }\n\n      var step = difference / gridCount;\n      var divisors = [60, 30, 20, 15, 10, 2, 1];\n      var realDivisor = 1;\n\n      if (timeUnit == \"hour\") {\n        divisors = [24, 12, 6, 4, 2, 1];\n      }\n\n      try {\n        for (var divisors_1 = __values(divisors), divisors_1_1 = divisors_1.next(); !divisors_1_1.done; divisors_1_1 = divisors_1.next()) {\n          var divisor = divisors_1_1.value;\n\n          if (difference / divisor > gridCount) {\n            realDivisor = divisor;\n            break;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (divisors_1_1 && !divisors_1_1.done && (_a = divisors_1.return)) _a.call(divisors_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      var count = Math.ceil((max - min) / realDivisor / gridCount);\n      var exponent = Math.log(Math.abs(count)) * Math.LOG10E;\n      var power = Math.pow(10, Math.floor(exponent)) / 10;\n      var reducedCount = count / power; // find closest to divisor\n\n      var closest = $math.closest(divisors, reducedCount);\n      count = closest * power;\n      step = realDivisor * count; // TODO can this be removed ?\n\n      this.durationFormatter.getValueUnit(step, this.baseUnit);\n      min = Math.floor(min / step) * step;\n      max = Math.ceil(max / step) * step;\n\n      if (strictMode) {\n        min -= step;\n\n        if (min < 0 && initialMin >= 0) {\n          min = 0;\n        }\n\n        max += step;\n\n        if (max > 0 && initialMax <= 0) {\n          max = 0;\n        }\n      }\n\n      minMaxStep = {\n        min: min,\n        max: max,\n        step: step\n      };\n    } else {\n      minMaxStep = _super.prototype.adjustMinMax.call(this, min, max, difference, gridCount, strictMode);\n    } // choose duration formatter based on step\n\n\n    this.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\n    return minMaxStep;\n  };\n\n  Object.defineProperty(DurationAxis.prototype, \"tooltipDurationFormat\", {\n    /**\r\n     * @return Duration format for axis labels\r\n     */\n    get: function () {\n      return this._tooltipDurationFormat;\n    },\n\n    /**\r\n     * A special duration format to apply axis tooltips.\r\n     *\r\n     * Will use same format as for labels, if not set.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n     * @param value  Duration format for axis labels\r\n     */\n    set: function (value) {\n      this._tooltipDurationFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns text to show in a axis tooltip, based on specific position within\r\n   * axis.\r\n   *\r\n   * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n   * chart, or explicitly for this Axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (px)\r\n   * @return Label (numeric value)\r\n   */\n\n  DurationAxis.prototype.getTooltipText = function (position) {\n    var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\n    var valueStr = this.formatLabel(value, this.tooltipDurationFormat);\n\n    if (!this._adapterO) {\n      return valueStr;\n    } else {\n      return this._adapterO.apply(\"getTooltipText\", valueStr);\n    }\n  };\n\n  Object.defineProperty(DurationAxis.prototype, \"baseUnit\", {\n    /**\r\n     * @return Base unit\r\n     */\n    get: function () {\n      return this._baseUnit;\n    },\n\n    /**\r\n     * A base unit (granularity) of data.\r\n     *\r\n     * Used to indicate what are the base units of your data.\r\n     *\r\n     * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n     * \"day\", \"week\", \"month\", \"year\".\r\n     *\r\n     * @default \"second\"\r\n     * @param timeUnit\r\n     */\n    set: function (timeUnit) {\n      if (this._baseUnit != timeUnit) {\n        this._baseUnit = timeUnit;\n        this.durationFormatter.baseUnit = timeUnit;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related data from a different instance of Axis.\r\n   *\r\n   * @param source Source Axis\r\n   */\n\n  DurationAxis.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.baseUnit = source.baseUnit;\n  };\n\n  return DurationAxis;\n}(ValueAxis);\n\nexport { DurationAxis };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;","map":{"version":3,"names":["__extends","__values","ValueAxis","ValueAxisDataItem","registry","$math","DurationAxisDataItem","_super","_this","call","className","applyTheme","DurationAxis","_baseUnit","setPropertyValue","prototype","formatLabel","value","format","durationFormatter","axisDurationFormat","adjustMinMax","min","max","difference","gridCount","strictMode","e_1","_a","minMaxStep","timeUnit","baseUnit","Math","round","initialMin","initialMax","abs","step","divisors","realDivisor","divisors_1","divisors_1_1","next","done","divisor","e_1_1","error","return","count","ceil","exponent","log","LOG10E","power","pow","floor","reducedCount","closest","getValueUnit","getFormat","Object","defineProperty","get","_tooltipDurationFormat","set","enumerable","configurable","getTooltipText","position","positionToValue","_stepDecimalPlaces","valueStr","tooltipDurationFormat","_adapterO","apply","invalidate","copyFrom","source","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/axes/DurationAxis.js"],"sourcesContent":["/**\r\n * DurationAxis module\r\n */\r\nimport { __extends, __values } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar DurationAxisDataItem = /** @class */ (function (_super) {\r\n    __extends(DurationAxisDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DurationAxisDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"DurationAxisDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return DurationAxisDataItem;\r\n}(ValueAxisDataItem));\r\nexport { DurationAxisDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar DurationAxis = /** @class */ (function (_super) {\r\n    __extends(DurationAxis, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DurationAxis() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A base unit (granularity) of data.\r\n         *\r\n         * Used to indicate what are the base units of your data.\r\n         */\r\n        _this._baseUnit = \"second\";\r\n        _this.className = \"DurationAxis\";\r\n        _this.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Formats the value according to axis' own [[DurationFormatter]].\r\n     *\r\n     * @param value  Source value\r\n     * @return Formatted value\r\n     */\r\n    DurationAxis.prototype.formatLabel = function (value, format) {\r\n        return this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n    };\r\n    /**\r\n     * Adjusts actual min and max scale values so that the axis starts and ends\r\n     * at \"nice\" values, unless `strictMinMax` is set.\r\n     *\r\n     * The `difference` can be something else than `max - min`, because of the\r\n     * axis breaks.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param min        [description]\r\n     * @param max        [description]\r\n     * @param difference [description]\r\n     * @param gridCount  [description]\r\n     * @param strictMode [description]\r\n     * @return [description]\r\n     */\r\n    DurationAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\r\n        var e_1, _a;\r\n        var minMaxStep;\r\n        var timeUnit = this.baseUnit;\r\n        // we don't allow to go to smaller units, setting so to avoid invalidation\r\n        this.setPropertyValue(\"maxPrecision\", 0);\r\n        if (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n            // will fail if 0\r\n            if (gridCount <= 1) {\r\n                gridCount = 1;\r\n            }\r\n            gridCount = Math.round(gridCount);\r\n            var initialMin = min;\r\n            var initialMax = max;\r\n            // in case min and max is the same, use max\r\n            if (difference === 0) {\r\n                difference = Math.abs(max);\r\n            }\r\n            var step = difference / gridCount;\r\n            var divisors = [60, 30, 20, 15, 10, 2, 1];\r\n            var realDivisor = 1;\r\n            if (timeUnit == \"hour\") {\r\n                divisors = [24, 12, 6, 4, 2, 1];\r\n            }\r\n            try {\r\n                for (var divisors_1 = __values(divisors), divisors_1_1 = divisors_1.next(); !divisors_1_1.done; divisors_1_1 = divisors_1.next()) {\r\n                    var divisor = divisors_1_1.value;\r\n                    if (difference / divisor > gridCount) {\r\n                        realDivisor = divisor;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (divisors_1_1 && !divisors_1_1.done && (_a = divisors_1.return)) _a.call(divisors_1);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n            var count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n            var exponent = Math.log(Math.abs(count)) * Math.LOG10E;\r\n            var power = Math.pow(10, Math.floor(exponent)) / 10;\r\n            var reducedCount = count / power;\r\n            // find closest to divisor\r\n            var closest = $math.closest(divisors, reducedCount);\r\n            count = closest * power;\r\n            step = realDivisor * count;\r\n            // TODO can this be removed ?\r\n            this.durationFormatter.getValueUnit(step, this.baseUnit);\r\n            min = Math.floor(min / step) * step;\r\n            max = Math.ceil(max / step) * step;\r\n            if (strictMode) {\r\n                min -= step;\r\n                if (min < 0 && initialMin >= 0) {\r\n                    min = 0;\r\n                }\r\n                max += step;\r\n                if (max > 0 && initialMax <= 0) {\r\n                    max = 0;\r\n                }\r\n            }\r\n            minMaxStep = { min: min, max: max, step: step };\r\n        }\r\n        else {\r\n            minMaxStep = _super.prototype.adjustMinMax.call(this, min, max, difference, gridCount, strictMode);\r\n        }\r\n        // choose duration formatter based on step\r\n        this.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n        return minMaxStep;\r\n    };\r\n    Object.defineProperty(DurationAxis.prototype, \"tooltipDurationFormat\", {\r\n        /**\r\n         * @return Duration format for axis labels\r\n         */\r\n        get: function () {\r\n            return this._tooltipDurationFormat;\r\n        },\r\n        /**\r\n         * A special duration format to apply axis tooltips.\r\n         *\r\n         * Will use same format as for labels, if not set.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n         * @param value  Duration format for axis labels\r\n         */\r\n        set: function (value) {\r\n            this._tooltipDurationFormat = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns text to show in a axis tooltip, based on specific position within\r\n     * axis.\r\n     *\r\n     * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n     * chart, or explicitly for this Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param position  Position (px)\r\n     * @return Label (numeric value)\r\n     */\r\n    DurationAxis.prototype.getTooltipText = function (position) {\r\n        var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n        var valueStr = this.formatLabel(value, this.tooltipDurationFormat);\r\n        if (!this._adapterO) {\r\n            return valueStr;\r\n        }\r\n        else {\r\n            return this._adapterO.apply(\"getTooltipText\", valueStr);\r\n        }\r\n    };\r\n    Object.defineProperty(DurationAxis.prototype, \"baseUnit\", {\r\n        /**\r\n         * @return Base unit\r\n         */\r\n        get: function () {\r\n            return this._baseUnit;\r\n        },\r\n        /**\r\n         * A base unit (granularity) of data.\r\n         *\r\n         * Used to indicate what are the base units of your data.\r\n         *\r\n         * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n         * \"day\", \"week\", \"month\", \"year\".\r\n         *\r\n         * @default \"second\"\r\n         * @param timeUnit\r\n         */\r\n        set: function (timeUnit) {\r\n            if (this._baseUnit != timeUnit) {\r\n                this._baseUnit = timeUnit;\r\n                this.durationFormatter.baseUnit = timeUnit;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all properties and related data from a different instance of Axis.\r\n     *\r\n     * @param source Source Axis\r\n     */\r\n    DurationAxis.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.baseUnit = source.baseUnit;\r\n    };\r\n    return DurationAxis;\r\n}(ValueAxis));\r\nexport { DurationAxis };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,EAAoBC,iBAApB,QAA6C,aAA7C;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,oBAAoB;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACxDP,SAAS,CAACM,oBAAD,EAAuBC,MAAvB,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,oBAAT,GAAgC;IAC5B,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;IACAD,KAAK,CAACE,SAAN,GAAkB,sBAAlB;;IACAF,KAAK,CAACG,UAAN;;IACA,OAAOH,KAAP;EACH;;EACD,OAAOF,oBAAP;AACH,CAZyC,CAYxCH,iBAZwC,CAA1C;;AAaA,SAASG,oBAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIM,YAAY;AAAG;AAAe,UAAUL,MAAV,EAAkB;EAChDP,SAAS,CAACY,YAAD,EAAeL,MAAf,CAAT;EACA;AACJ;AACA;;;EACI,SAASK,YAAT,GAAwB;IACpB,IAAIJ,KAAK,GACT;IACAD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAFrB;IAGA;AACR;AACA;AACA;AACA;;;IACQD,KAAK,CAACK,SAAN,GAAkB,QAAlB;IACAL,KAAK,CAACE,SAAN,GAAkB,cAAlB;;IACAF,KAAK,CAACM,gBAAN,CAAuB,eAAvB,EAAwC,OAAxC,EAXoB,CAYpB;;;IACAN,KAAK,CAACG,UAAN;;IACA,OAAOH,KAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACII,YA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"},"metadata":{},"sourceType":"module"}