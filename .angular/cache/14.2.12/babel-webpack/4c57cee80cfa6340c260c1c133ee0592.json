{"ast":null,"code":"/**\n * This class helps us to emulate python's generators, sorta.\n */\nvar IterResult =\n/** @class */\nfunction () {\n  function IterResult(method, args) {\n    this.minDate = null;\n    this.maxDate = null;\n    this._result = [];\n    this.total = 0;\n    this.method = method;\n    this.args = args;\n\n    if (method === 'between') {\n      this.maxDate = args.inc ? args.before : new Date(args.before.getTime() - 1);\n      this.minDate = args.inc ? args.after : new Date(args.after.getTime() + 1);\n    } else if (method === 'before') {\n      this.maxDate = args.inc ? args.dt : new Date(args.dt.getTime() - 1);\n    } else if (method === 'after') {\n      this.minDate = args.inc ? args.dt : new Date(args.dt.getTime() + 1);\n    }\n  }\n  /**\n   * Possibly adds a date into the result.\n   *\n   * @param {Date} date - the date isn't necessarly added to the result\n   * list (if it is too late/too early)\n   * @return {Boolean} true if it makes sense to continue the iteration\n   * false if we're done.\n   */\n\n\n  IterResult.prototype.accept = function (date) {\n    ++this.total;\n    var tooEarly = this.minDate && date < this.minDate;\n    var tooLate = this.maxDate && date > this.maxDate;\n\n    if (this.method === 'between') {\n      if (tooEarly) return true;\n      if (tooLate) return false;\n    } else if (this.method === 'before') {\n      if (tooLate) return false;\n    } else if (this.method === 'after') {\n      if (tooEarly) return true;\n      this.add(date);\n      return false;\n    }\n\n    return this.add(date);\n  };\n  /**\n   *\n   * @param {Date} date that is part of the result.\n   * @return {Boolean} whether we are interested in more values.\n   */\n\n\n  IterResult.prototype.add = function (date) {\n    this._result.push(date);\n\n    return true;\n  };\n  /**\n   * 'before' and 'after' return only one date, whereas 'all'\n   * and 'between' an array.\n   *\n   * @return {Date,Array?}\n   */\n\n\n  IterResult.prototype.getValue = function () {\n    var res = this._result;\n\n    switch (this.method) {\n      case 'all':\n      case 'between':\n        return res;\n\n      case 'before':\n      case 'after':\n      default:\n        return res.length ? res[res.length - 1] : null;\n    }\n  };\n\n  IterResult.prototype.clone = function () {\n    return new IterResult(this.method, this.args);\n  };\n\n  return IterResult;\n}();\n\nexport default IterResult;","map":{"version":3,"names":["IterResult","method","args","minDate","maxDate","_result","total","inc","before","Date","getTime","after","dt","prototype","accept","date","tooEarly","tooLate","add","push","getValue","res","length","clone"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/rrule/dist/esm/iterresult.js"],"sourcesContent":["/**\n * This class helps us to emulate python's generators, sorta.\n */\nvar IterResult = /** @class */ (function () {\n    function IterResult(method, args) {\n        this.minDate = null;\n        this.maxDate = null;\n        this._result = [];\n        this.total = 0;\n        this.method = method;\n        this.args = args;\n        if (method === 'between') {\n            this.maxDate = args.inc\n                ? args.before\n                : new Date(args.before.getTime() - 1);\n            this.minDate = args.inc ? args.after : new Date(args.after.getTime() + 1);\n        }\n        else if (method === 'before') {\n            this.maxDate = args.inc ? args.dt : new Date(args.dt.getTime() - 1);\n        }\n        else if (method === 'after') {\n            this.minDate = args.inc ? args.dt : new Date(args.dt.getTime() + 1);\n        }\n    }\n    /**\n     * Possibly adds a date into the result.\n     *\n     * @param {Date} date - the date isn't necessarly added to the result\n     * list (if it is too late/too early)\n     * @return {Boolean} true if it makes sense to continue the iteration\n     * false if we're done.\n     */\n    IterResult.prototype.accept = function (date) {\n        ++this.total;\n        var tooEarly = this.minDate && date < this.minDate;\n        var tooLate = this.maxDate && date > this.maxDate;\n        if (this.method === 'between') {\n            if (tooEarly)\n                return true;\n            if (tooLate)\n                return false;\n        }\n        else if (this.method === 'before') {\n            if (tooLate)\n                return false;\n        }\n        else if (this.method === 'after') {\n            if (tooEarly)\n                return true;\n            this.add(date);\n            return false;\n        }\n        return this.add(date);\n    };\n    /**\n     *\n     * @param {Date} date that is part of the result.\n     * @return {Boolean} whether we are interested in more values.\n     */\n    IterResult.prototype.add = function (date) {\n        this._result.push(date);\n        return true;\n    };\n    /**\n     * 'before' and 'after' return only one date, whereas 'all'\n     * and 'between' an array.\n     *\n     * @return {Date,Array?}\n     */\n    IterResult.prototype.getValue = function () {\n        var res = this._result;\n        switch (this.method) {\n            case 'all':\n            case 'between':\n                return res;\n            case 'before':\n            case 'after':\n            default:\n                return (res.length ? res[res.length - 1] : null);\n        }\n    };\n    IterResult.prototype.clone = function () {\n        return new IterResult(this.method, this.args);\n    };\n    return IterResult;\n}());\nexport default IterResult;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}