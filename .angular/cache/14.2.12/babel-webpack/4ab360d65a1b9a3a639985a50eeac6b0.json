{"ast":null,"code":"/**\r\n * Cursor module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\nimport { registry } from \"../../core/Registry\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $dom from \"../../core/utils/DOM\";\nimport { system } from \"../../core/System\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\n\nvar Cursor =\n/** @class */\nfunction (_super) {\n  __extends(Cursor, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Cursor() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Current cursor position during selection.\r\n     *\r\n     * @todo Better description\r\n     */\n\n\n    _this.point = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * Specifies the rules when cursor needs to be moved or hidden.\r\n     */\n\n    _this._stick = \"none\";\n    _this.className = \"Cursor\"; // Set defaults\n\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.shouldClone = false;\n\n    _this.hide(0);\n\n    _this.trackable = true;\n    _this.clickable = true;\n    _this.isMeasured = false; // Add events on body to trigger down and up events (to start zooming or\n    // selection)\n\n    var interaction = getInteraction();\n\n    _this._disposers.push(interaction.body.events.on(\"down\", _this.handleCursorDown, _this));\n\n    _this._disposers.push(interaction.body.events.on(\"up\", _this.handleCursorUp, _this));\n\n    _this._disposers.push(interaction.body.events.on(\"track\", _this.handleCursorMove, _this)); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Handle pointer movement in document and update cursor position as needed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Event\r\n   */\n\n\n  Cursor.prototype.handleCursorMove = function (event) {\n    if (!this.interactionsEnabled || this.interactions.isTouchProtected && event.touch) {\n      return;\n    }\n\n    if ((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\" || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\n      // We want to let zoom/pan continue even if cursor is outside chart area\n      if (!this.isHidden || !this.isHiding) {\n        this.hide();\n      }\n\n      return;\n    }\n\n    var local = $utils.documentPointToSprite(event.pointer.point, this);\n\n    if (this._stick == \"hard\" && this._stickPoint) {\n      local = this._stickPoint;\n    }\n\n    if (this._stick == \"soft\" && this._stickPoint) {\n      if (!this.fitsToBounds(local)) {\n        local = this._stickPoint;\n      }\n    }\n\n    if (this._adapterO) {\n      this._adapterO.apply(\"cursorPoint\", local);\n    }\n\n    this.triggerMove(local);\n    return local;\n  };\n  /**\r\n   * Hides actual SVG elements and handles hiding animations.\r\n   *\r\n   * @param duration  Fade out duration (ms)\r\n   * @return Fade out duration (ms)\r\n   * @ignore\r\n   */\n\n\n  Cursor.prototype.hideReal = function (duration) {\n    if ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\n      return;\n    }\n\n    return _super.prototype.hideReal.call(this, duration);\n  };\n  /**\r\n   * Places the cursor at specific point.\r\n   *\r\n   * The second parameter has following options:\r\n   *\r\n   * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n   * it either moves to a new place (if pointer over plot area) or is hidden.\r\n   *\r\n   * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n   * outside chart, but will move to a new place whe plot area is hovered or\r\n   * touched.\r\n   *\r\n   * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n   * another `triggerMove()` call.\r\n   *\r\n   * The third parameter - `force` (since `4.9.5`) - if set to `true` will\r\n   * make cursor execute all of the actions associated with cursor move,\r\n   * including line redraws, tooltip updates, etc. Useful when underlying\r\n   * chart data is dynamically being updated.\r\n   *\r\n   * @param point  Point to place cursor at\r\n   * @param stick  Level of cursor stickiness to the place\r\n   * @param force  Force cursor move\r\n   */\n\n\n  Cursor.prototype.triggerMove = function (point, stick, force) {\n    point.x = $math.round(point.x, 1);\n    point.y = $math.round(point.y, 1);\n\n    if (stick) {\n      this._stick = stick;\n    }\n\n    if (stick == \"hard\" || stick == \"soft\") {\n      this._stickPoint = point;\n    }\n\n    this.triggerMoveReal(point, force);\n  };\n  /**\r\n   * Places the cursor at specific point.\r\n   *\r\n   * @param point Point to place cursor at\r\n   */\n\n\n  Cursor.prototype.triggerMoveReal = function (point, force) {\n    if (this.point.x != point.x || this.point.y != point.y || force) {\n      this.point = point;\n      this.invalidatePosition(); // hide cursor if it's out of bounds\n\n      if (this.fitsToBounds(point)) {\n        this.show(0);\n      } else {\n        // unless we are selecting (mouse is down)\n        if (!this.downPoint) {\n          this.hide(0);\n        }\n      }\n\n      if (this.visible) {\n        this.getPositions();\n        this.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\n      }\n    }\n  };\n  /**\r\n   * Simulates pressing down (click/touch) action by a cursor.\r\n   *\r\n   * @param point               Point of action\r\n   */\n\n\n  Cursor.prototype.triggerDown = function (point) {\n    this.triggerDownReal(point);\n  };\n  /**\r\n   * Simulates pressing down (click/touch) action by a cursor.\r\n   *\r\n   * @param point               Point of action\r\n   */\n\n\n  Cursor.prototype.triggerDownReal = function (point) {\n    switch (this._generalBehavior) {\n      case \"zoom\":\n        this.dispatchImmediately(\"zoomstarted\");\n        break;\n\n      case \"select\":\n        this.dispatchImmediately(\"selectstarted\");\n        break;\n\n      case \"pan\":\n        this.dispatchImmediately(\"panstarted\");\n        getInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\n        break;\n    }\n  };\n  /**\r\n   * Simulates the action of release of the mouse down / touch.\r\n   *\r\n   * @param point               Point of action\r\n   */\n\n\n  Cursor.prototype.triggerUp = function (point) {\n    this.triggerUpReal(point);\n  };\n  /**\r\n   * Simulates the action of release of the mouse down / touch.\r\n   *\r\n   * @param point               Point of action\r\n   */\n\n\n  Cursor.prototype.triggerUpReal = function (point) {\n    system.requestFrame();\n    this.updatePoint(this.upPoint);\n    var interaction = getInteraction();\n\n    if ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\n      switch (this._generalBehavior) {\n        case \"zoom\":\n          this.dispatch(\"zoomended\");\n          break;\n\n        case \"select\":\n          this.dispatch(\"selectended\");\n          break;\n\n        case \"pan\":\n          this.dispatch(\"panended\");\n          interaction.setGlobalStyle(MouseCursorStyle.default);\n          break;\n      }\n\n      this.downPoint = undefined;\n      this.updateSelection();\n    }\n    /*\r\n    else {\r\n        \r\n        if(this._generalBehavior == \"select\"){\r\n            this.dispatchImmediately(\"selectended\");\r\n        }\r\n        this.dispatchImmediately(\"behaviorcanceled\");\r\n        interaction.setGlobalStyle(MouseCursorStyle.default);\r\n        this.downPoint = undefined;\r\n    }*/\n\n  };\n  /**\r\n   * Updates selection dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Cursor.prototype.updateSelection = function () {};\n  /**\r\n   * Updates cursors current positions.\r\n   */\n\n\n  Cursor.prototype.getPositions = function () {\n    // positions are used by axes or series\n    this.xPosition = this.point.x / this.innerWidth;\n    this.yPosition = 1 - this.point.y / this.innerHeight;\n  };\n  /**\r\n   * Handles pointer down event so we can start zoom or selection.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original event\r\n   */\n\n\n  Cursor.prototype.handleCursorDown = function (event) {\n    if (!this.interactionsEnabled || this.interactions.isTouchProtected && event.touch || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\n      return;\n    } // Initiate blur so that whatever focused element on the page is unselected\n\n\n    $dom.blur(); // Get local point\n\n    var local = $utils.documentPointToSprite(event.pointer.point, this);\n\n    if (this._stick == \"hard\" && this._stickPoint) {\n      local = this._stickPoint;\n    }\n\n    if (this._adapterO) {\n      this._adapterO.apply(\"cursorPoint\", local);\n    }\n\n    if (!this.fitsToBounds(local)) {\n      return;\n    }\n\n    this._downPointOrig = {\n      x: local.x,\n      y: local.y\n    }; // We need to cancel the event to prevent gestures on touch devices\n\n    if (event.event.cancelable && this.shouldPreventGestures(event.touch) && this.fitsToBounds(local)) {\n      event.event.preventDefault();\n    } // Make this happen\n\n\n    this.triggerMove(local);\n    this.triggerDown(local);\n  };\n  /**\r\n   * Determines whether Cursor should prevent default action on move.\r\n   *\r\n   * Child classes should override this as necessary.\r\n   *\r\n   * @return Prevent default?\r\n   */\n\n\n  Cursor.prototype.shouldPreventGestures = function (touch) {\n    return true;\n  };\n  /**\r\n   * Updates the coordinates of where pointer down event occurred\r\n   * (was pressed).\r\n   */\n\n\n  Cursor.prototype.updatePoint = function (point) {};\n  /**\r\n   * Handles pointer up event - finishes zoom or selection action.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original event\r\n   */\n\n\n  Cursor.prototype.handleCursorUp = function (event) {\n    if (!this.interactionsEnabled) {\n      return;\n    }\n\n    if (!this.downPoint && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\n      return;\n    }\n\n    var local = $utils.documentPointToSprite(event.pointer.point, this);\n\n    if (this._adapterO) {\n      this._adapterO.apply(\"cursorPoint\", local);\n    }\n\n    if (!this.downPoint || !this.fitsToBounds(this.downPoint)) {\n      return;\n    }\n\n    if (this._stick == \"hard\" && this._stickPoint) {\n      local = this._stickPoint;\n    }\n\n    this._upPointOrig = {\n      x: local.x,\n      y: local.y\n    };\n    this.triggerMove(local);\n    this.triggerUp(local);\n  };\n\n  Object.defineProperty(Cursor.prototype, \"chart\", {\n    /**\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart;\n    },\n\n    /**\r\n     * A reference to a [[Chart]] the cursor belongs to.\r\n     *\r\n     * @param value  Chart\r\n     */\n    set: function (value) {\n      this._chart = value;\n\n      if ($type.hasValue(this._chart.plotContainer)) {\n        getInteraction().lockElement(this._chart.plotContainer.interactions);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Cursor;\n}(Container);\n\nexport { Cursor };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Cursor\"] = Cursor;","map":{"version":3,"names":["__extends","Container","getInteraction","registry","percent","MouseCursorStyle","$math","$utils","$type","$dom","system","Cursor","_super","_this","call","point","x","y","_stick","className","width","height","shouldClone","hide","trackable","clickable","isMeasured","interaction","_disposers","push","body","events","on","handleCursorDown","handleCursorUp","handleCursorMove","applyTheme","prototype","event","interactionsEnabled","interactions","isTouchProtected","touch","_generalBehavior","downPoint","isLocalElement","pointer","paper","svg","uid","isHidden","isHiding","local","documentPointToSprite","_stickPoint","fitsToBounds","_adapterO","apply","triggerMove","hideReal","duration","stick","force","round","triggerMoveReal","invalidatePosition","show","visible","getPositions","dispatch","triggerDown","triggerDownReal","dispatchImmediately","setGlobalStyle","grabbing","triggerUp","triggerUpReal","requestFrame","updatePoint","upPoint","getDistance","_upPointOrig","_downPointOrig","getHitOption","default","undefined","updateSelection","xPosition","innerWidth","yPosition","innerHeight","blur","cancelable","shouldPreventGestures","preventDefault","Object","defineProperty","get","_chart","set","value","hasValue","plotContainer","lockElement","enumerable","configurable","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/cursors/Cursor.js"],"sourcesContent":["/**\r\n * Cursor module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $dom from \"../../core/utils/DOM\";\r\nimport { system } from \"../../core/System\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nvar Cursor = /** @class */ (function (_super) {\r\n    __extends(Cursor, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Cursor() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Current cursor position during selection.\r\n         *\r\n         * @todo Better description\r\n         */\r\n        _this.point = { x: 0, y: 0 };\r\n        /**\r\n         * Specifies the rules when cursor needs to be moved or hidden.\r\n         */\r\n        _this._stick = \"none\";\r\n        _this.className = \"Cursor\";\r\n        // Set defaults\r\n        _this.width = percent(100);\r\n        _this.height = percent(100);\r\n        _this.shouldClone = false;\r\n        _this.hide(0);\r\n        _this.trackable = true;\r\n        _this.clickable = true;\r\n        _this.isMeasured = false;\r\n        // Add events on body to trigger down and up events (to start zooming or\r\n        // selection)\r\n        var interaction = getInteraction();\r\n        _this._disposers.push(interaction.body.events.on(\"down\", _this.handleCursorDown, _this));\r\n        _this._disposers.push(interaction.body.events.on(\"up\", _this.handleCursorUp, _this));\r\n        _this._disposers.push(interaction.body.events.on(\"track\", _this.handleCursorMove, _this));\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Handle pointer movement in document and update cursor position as needed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Event\r\n     */\r\n    Cursor.prototype.handleCursorMove = function (event) {\r\n        if (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch)) {\r\n            return;\r\n        }\r\n        if (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n            // We want to let zoom/pan continue even if cursor is outside chart area\r\n            if (!this.isHidden || !this.isHiding) {\r\n                this.hide();\r\n            }\r\n            return;\r\n        }\r\n        var local = $utils.documentPointToSprite(event.pointer.point, this);\r\n        if (this._stick == \"hard\" && this._stickPoint) {\r\n            local = this._stickPoint;\r\n        }\r\n        if (this._stick == \"soft\" && this._stickPoint) {\r\n            if (!this.fitsToBounds(local)) {\r\n                local = this._stickPoint;\r\n            }\r\n        }\r\n        if (this._adapterO) {\r\n            this._adapterO.apply(\"cursorPoint\", local);\r\n        }\r\n        this.triggerMove(local);\r\n        return local;\r\n    };\r\n    /**\r\n     * Hides actual SVG elements and handles hiding animations.\r\n     *\r\n     * @param duration  Fade out duration (ms)\r\n     * @return Fade out duration (ms)\r\n     * @ignore\r\n     */\r\n    Cursor.prototype.hideReal = function (duration) {\r\n        if ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n            return;\r\n        }\r\n        return _super.prototype.hideReal.call(this, duration);\r\n    };\r\n    /**\r\n     * Places the cursor at specific point.\r\n     *\r\n     * The second parameter has following options:\r\n     *\r\n     * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n     * it either moves to a new place (if pointer over plot area) or is hidden.\r\n     *\r\n     * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n     * outside chart, but will move to a new place whe plot area is hovered or\r\n     * touched.\r\n     *\r\n     * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n     * another `triggerMove()` call.\r\n     *\r\n     * The third parameter - `force` (since `4.9.5`) - if set to `true` will\r\n     * make cursor execute all of the actions associated with cursor move,\r\n     * including line redraws, tooltip updates, etc. Useful when underlying\r\n     * chart data is dynamically being updated.\r\n     *\r\n     * @param point  Point to place cursor at\r\n     * @param stick  Level of cursor stickiness to the place\r\n     * @param force  Force cursor move\r\n     */\r\n    Cursor.prototype.triggerMove = function (point, stick, force) {\r\n        point.x = $math.round(point.x, 1);\r\n        point.y = $math.round(point.y, 1);\r\n        if (stick) {\r\n            this._stick = stick;\r\n        }\r\n        if (stick == \"hard\" || stick == \"soft\") {\r\n            this._stickPoint = point;\r\n        }\r\n        this.triggerMoveReal(point, force);\r\n    };\r\n    /**\r\n     * Places the cursor at specific point.\r\n     *\r\n     * @param point Point to place cursor at\r\n     */\r\n    Cursor.prototype.triggerMoveReal = function (point, force) {\r\n        if (this.point.x != point.x || this.point.y != point.y || force) {\r\n            this.point = point;\r\n            this.invalidatePosition();\r\n            // hide cursor if it's out of bounds\r\n            if (this.fitsToBounds(point)) {\r\n                this.show(0);\r\n            }\r\n            else {\r\n                // unless we are selecting (mouse is down)\r\n                if (!this.downPoint) {\r\n                    this.hide(0);\r\n                }\r\n            }\r\n            if (this.visible) {\r\n                this.getPositions();\r\n                this.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Simulates pressing down (click/touch) action by a cursor.\r\n     *\r\n     * @param point               Point of action\r\n     */\r\n    Cursor.prototype.triggerDown = function (point) {\r\n        this.triggerDownReal(point);\r\n    };\r\n    /**\r\n     * Simulates pressing down (click/touch) action by a cursor.\r\n     *\r\n     * @param point               Point of action\r\n     */\r\n    Cursor.prototype.triggerDownReal = function (point) {\r\n        switch (this._generalBehavior) {\r\n            case \"zoom\":\r\n                this.dispatchImmediately(\"zoomstarted\");\r\n                break;\r\n            case \"select\":\r\n                this.dispatchImmediately(\"selectstarted\");\r\n                break;\r\n            case \"pan\":\r\n                this.dispatchImmediately(\"panstarted\");\r\n                getInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Simulates the action of release of the mouse down / touch.\r\n     *\r\n     * @param point               Point of action\r\n     */\r\n    Cursor.prototype.triggerUp = function (point) {\r\n        this.triggerUpReal(point);\r\n    };\r\n    /**\r\n     * Simulates the action of release of the mouse down / touch.\r\n     *\r\n     * @param point               Point of action\r\n     */\r\n    Cursor.prototype.triggerUpReal = function (point) {\r\n        system.requestFrame();\r\n        this.updatePoint(this.upPoint);\r\n        var interaction = getInteraction();\r\n        if ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n            switch (this._generalBehavior) {\r\n                case \"zoom\":\r\n                    this.dispatch(\"zoomended\");\r\n                    break;\r\n                case \"select\":\r\n                    this.dispatch(\"selectended\");\r\n                    break;\r\n                case \"pan\":\r\n                    this.dispatch(\"panended\");\r\n                    interaction.setGlobalStyle(MouseCursorStyle.default);\r\n                    break;\r\n            }\r\n            this.downPoint = undefined;\r\n            this.updateSelection();\r\n        }\r\n        /*\r\n        else {\r\n            \r\n            if(this._generalBehavior == \"select\"){\r\n                this.dispatchImmediately(\"selectended\");\r\n            }\r\n            this.dispatchImmediately(\"behaviorcanceled\");\r\n            interaction.setGlobalStyle(MouseCursorStyle.default);\r\n            this.downPoint = undefined;\r\n        }*/\r\n    };\r\n    /**\r\n     * Updates selection dimensions on size change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Cursor.prototype.updateSelection = function () {\r\n    };\r\n    /**\r\n     * Updates cursors current positions.\r\n     */\r\n    Cursor.prototype.getPositions = function () {\r\n        // positions are used by axes or series\r\n        this.xPosition = this.point.x / this.innerWidth;\r\n        this.yPosition = 1 - this.point.y / this.innerHeight;\r\n    };\r\n    /**\r\n     * Handles pointer down event so we can start zoom or selection.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Original event\r\n     */\r\n    Cursor.prototype.handleCursorDown = function (event) {\r\n        if (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch) || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n            return;\r\n        }\r\n        // Initiate blur so that whatever focused element on the page is unselected\r\n        $dom.blur();\r\n        // Get local point\r\n        var local = $utils.documentPointToSprite(event.pointer.point, this);\r\n        if (this._stick == \"hard\" && this._stickPoint) {\r\n            local = this._stickPoint;\r\n        }\r\n        if (this._adapterO) {\r\n            this._adapterO.apply(\"cursorPoint\", local);\r\n        }\r\n        if (!this.fitsToBounds(local)) {\r\n            return;\r\n        }\r\n        this._downPointOrig = { x: local.x, y: local.y };\r\n        // We need to cancel the event to prevent gestures on touch devices\r\n        if (event.event.cancelable && this.shouldPreventGestures(event.touch) && this.fitsToBounds(local)) {\r\n            event.event.preventDefault();\r\n        }\r\n        // Make this happen\r\n        this.triggerMove(local);\r\n        this.triggerDown(local);\r\n    };\r\n    /**\r\n     * Determines whether Cursor should prevent default action on move.\r\n     *\r\n     * Child classes should override this as necessary.\r\n     *\r\n     * @return Prevent default?\r\n     */\r\n    Cursor.prototype.shouldPreventGestures = function (touch) {\r\n        return true;\r\n    };\r\n    /**\r\n     * Updates the coordinates of where pointer down event occurred\r\n     * (was pressed).\r\n     */\r\n    Cursor.prototype.updatePoint = function (point) {\r\n    };\r\n    /**\r\n     * Handles pointer up event - finishes zoom or selection action.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Original event\r\n     */\r\n    Cursor.prototype.handleCursorUp = function (event) {\r\n        if (!this.interactionsEnabled) {\r\n            return;\r\n        }\r\n        if (!this.downPoint && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n            return;\r\n        }\r\n        var local = $utils.documentPointToSprite(event.pointer.point, this);\r\n        if (this._adapterO) {\r\n            this._adapterO.apply(\"cursorPoint\", local);\r\n        }\r\n        if (!this.downPoint || !this.fitsToBounds(this.downPoint)) {\r\n            return;\r\n        }\r\n        if (this._stick == \"hard\" && this._stickPoint) {\r\n            local = this._stickPoint;\r\n        }\r\n        this._upPointOrig = { x: local.x, y: local.y };\r\n        this.triggerMove(local);\r\n        this.triggerUp(local);\r\n    };\r\n    Object.defineProperty(Cursor.prototype, \"chart\", {\r\n        /**\r\n         * @return Chart\r\n         */\r\n        get: function () {\r\n            return this._chart;\r\n        },\r\n        /**\r\n         * A reference to a [[Chart]] the cursor belongs to.\r\n         *\r\n         * @param value  Chart\r\n         */\r\n        set: function (value) {\r\n            this._chart = value;\r\n            if ($type.hasValue(this._chart.plotContainer)) {\r\n                getInteraction().lockElement(this._chart.plotContainer.interactions);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Cursor;\r\n}(Container));\r\nexport { Cursor };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}