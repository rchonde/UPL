{"ast":null,"code":"/**\r\n * Functionality for drawing simple ClockHands\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\n\nvar ClockHand =\n/** @class */\nfunction (_super) {\n  __extends(ClockHand, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ClockHand() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * An Axis hand is related to.\r\n     */\n\n\n    _this._axis = new MutableValueDisposer();\n    _this.className = \"ClockHand\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.fill = interfaceColors.getFor(\"alternativeBackground\");\n    _this.stroke = _this.fill;\n    var pin = new Circle();\n    pin.radius = 5;\n    _this.pin = pin;\n    _this.isMeasured = false;\n    _this.startWidth = 5;\n    _this.endWidth = 1;\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.radius = percent(100);\n    _this.innerRadius = percent(0);\n    var hand = new Trapezoid();\n    _this.hand = hand;\n\n    _this._disposers.push(_this._axis); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Re(validates) the clock hand, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ClockHand.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    var hand = this.hand;\n    hand.width = this.pixelWidth;\n    var h = Math.max(this.startWidth, this.endWidth);\n    hand.height = h;\n    hand.leftSide = percent(this.startWidth / h * 100);\n    hand.rightSide = percent(this.endWidth / h * 100);\n\n    if (this.axis) {\n      var renderer = this.axis.renderer;\n      var x0 = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\n      var x1 = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\n      hand.x = x0;\n      hand.y = -h / 2;\n      hand.width = x1 - x0;\n    }\n  };\n\n  Object.defineProperty(ClockHand.prototype, \"pin\", {\n    /**\r\n     * @return Pin element\r\n     */\n    get: function () {\n      return this._pin;\n    },\n\n    /**\r\n     * A circle element used as hand's base. (pin)\r\n     *\r\n     * @param pin  Pin element\r\n     */\n    set: function (pin) {\n      if (this._pin) {\n        this.removeDispose(this._pin);\n      }\n\n      if (pin) {\n        this._pin = pin;\n        pin.parent = this;\n\n        this._disposers.push(pin);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"hand\", {\n    /**\r\n     * @return Hand element\r\n     */\n    get: function () {\n      return this._hand;\n    },\n\n    /**\r\n     * A trapezoid shape used for hand itself.\r\n     *\r\n     * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n     * `endWidth` properties.\r\n     *\r\n     * Set `endWidth` to 1 (px) to make it pointy.\r\n     *\r\n     * @param hand  Hand element\r\n     */\n    set: function (hand) {\n      if (this._hand) {\n        this.removeDispose(this._hand);\n      }\n\n      if (hand) {\n        this._hand = hand;\n        hand.parent = this;\n\n        this._disposers.push(hand);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"radius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Radius of the hand's outer end. (tip)\r\n     *\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(0)\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"innerRadius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Radius of the hand's inner end. (base)\r\n     *\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(0)\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"startWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startWidth\");\n    },\n\n    /**\r\n     * Width, in pixels, of the clock hand's inner end. (base)\r\n     *\r\n     * @default 5\r\n     * @param value  Width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"endWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endWidth\");\n    },\n\n    /**\r\n     * Width, in pixels, of the clock hand's outer end. (tip)\r\n     *\r\n     * @default 1\r\n     * @param value  Width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"rotationDirection\", {\n    /**\r\n     * @return rotationDirection\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"rotationDirection\");\n    },\n\n    /**\r\n     * Rotation direction\r\n     *\r\n     * @default any\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"rotationDirection\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves clock hand to particular value.\r\n   *\r\n   * If `duration` is set to a number in milliseconds, the hand will move\r\n   * to the new position gracefully, rather than jumping rigth to it.\r\n   *\r\n   * Alternatively, you can also set `value` directly.\r\n   *\r\n   * @param value     New value\r\n   * @param duration  Animation duration (ms)\r\n   * @param easing  Animation easing function\r\n   */\n\n  ClockHand.prototype.showValue = function (value, duration, easing) {\n    this._value = value;\n\n    if (value != undefined) {\n      if (!$type.isNumber(duration)) {\n        duration = 0;\n      }\n\n      if (this.axis) {\n        var renderer = this.axis.renderer;\n        var newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\n        var currentAngle = this.rotation;\n\n        if (this.rotationDirection == \"clockWise\") {\n          if (newAngle < currentAngle) {\n            this.rotation = currentAngle - 360;\n          }\n        }\n\n        if (this.rotationDirection == \"counterClockWise\") {\n          if (newAngle > currentAngle) {\n            this.rotation = currentAngle + 360;\n          }\n        }\n\n        this.animate({\n          property: \"rotation\",\n          to: newAngle\n        }, duration, easing);\n      }\n    }\n  };\n\n  Object.defineProperty(ClockHand.prototype, \"currentPosition\", {\n    /**\r\n     * Returns hand's relative position on axis\r\n     */\n    get: function () {\n      if (this.axis) {\n        var renderer = this.axis.renderer;\n        return renderer.angleToPosition(this.rotation);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this._value;\n    },\n\n    /**\r\n     * A current value clock hand is pointing to.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.showValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"axis\", {\n    /**\r\n     * @return Axis\r\n     */\n    get: function () {\n      return this._axis.get();\n    },\n\n    /**\r\n     * An Axis clock hand is associated with.\r\n     *\r\n     * Hand's `value` relates to values on the Axis.\r\n     *\r\n     * @param axis  Axis\r\n     */\n    set: function (axis) {\n      if (this.axis != axis) {\n        this._axis.set(axis, new MultiDisposer([axis.events.on(\"datavalidated\", this.updateValue, this, false), axis.events.on(\"datarangechanged\", this.updateValue, this, false), axis.events.on(\"dataitemsvalidated\", this.updateValue, this, false), axis.events.on(\"propertychanged\", this.invalidate, this, false)]));\n      }\n\n      if (axis) {\n        var chart = axis.chart;\n\n        if (chart) {\n          this.rotation = chart.startAngle;\n        }\n      }\n\n      this.parent = axis.renderer;\n      this.zIndex = 5;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Triggers `value` accessor, so that Hand animates to new position, in case\r\n   * value has changed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  ClockHand.prototype.updateValue = function () {\n    this.value = this.value;\n  };\n  /**\r\n  * Processes JSON-based config before it is applied to the object.\r\n  *\r\n  * @ignore Exclude from docs\r\n  * @param config  Config\r\n  */\n\n\n  ClockHand.prototype.processConfig = function (config) {\n    if (config) {\n      // Connect clock hands with axes\n      if ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\n        config.axis = this.map.getKey(config.axis);\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return ClockHand;\n}(Container);\n\nexport { ClockHand };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;","map":{"version":3,"names":["__extends","Container","Circle","Trapezoid","MutableValueDisposer","MultiDisposer","percent","registry","InterfaceColorSet","$utils","$type","ClockHand","_super","_this","call","_axis","className","interfaceColors","fill","getFor","stroke","pin","radius","isMeasured","startWidth","endWidth","width","height","innerRadius","hand","_disposers","push","applyTheme","prototype","validate","pixelWidth","h","Math","max","leftSide","rightSide","axis","renderer","x0","relativeRadiusToValue","pixelRadius","x1","x","y","Object","defineProperty","get","_pin","set","removeDispose","parent","enumerable","configurable","_hand","getPropertyValue","value","setPercentProperty","setPropertyValue","showValue","duration","easing","_value","undefined","isNumber","newAngle","positionToAngle","anyToPosition","currentAngle","rotation","rotationDirection","animate","property","to","angleToPosition","events","on","updateValue","invalidate","chart","startAngle","zIndex","processConfig","config","hasValue","isString","map","hasKey","getKey","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/elements/ClockHand.js"],"sourcesContent":["/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nvar ClockHand = /** @class */ (function (_super) {\r\n    __extends(ClockHand, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ClockHand() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * An Axis hand is related to.\r\n         */\r\n        _this._axis = new MutableValueDisposer();\r\n        _this.className = \"ClockHand\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        _this.stroke = _this.fill;\r\n        var pin = new Circle();\r\n        pin.radius = 5;\r\n        _this.pin = pin;\r\n        _this.isMeasured = false;\r\n        _this.startWidth = 5;\r\n        _this.endWidth = 1;\r\n        _this.width = percent(100);\r\n        _this.height = percent(100);\r\n        _this.radius = percent(100);\r\n        _this.innerRadius = percent(0);\r\n        var hand = new Trapezoid();\r\n        _this.hand = hand;\r\n        _this._disposers.push(_this._axis);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Re(validates) the clock hand, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ClockHand.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        var hand = this.hand;\r\n        hand.width = this.pixelWidth;\r\n        var h = Math.max(this.startWidth, this.endWidth);\r\n        hand.height = h;\r\n        hand.leftSide = percent(this.startWidth / h * 100);\r\n        hand.rightSide = percent(this.endWidth / h * 100);\r\n        if (this.axis) {\r\n            var renderer = this.axis.renderer;\r\n            var x0 = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n            var x1 = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n            hand.x = x0;\r\n            hand.y = -h / 2;\r\n            hand.width = x1 - x0;\r\n        }\r\n    };\r\n    Object.defineProperty(ClockHand.prototype, \"pin\", {\r\n        /**\r\n         * @return Pin element\r\n         */\r\n        get: function () {\r\n            return this._pin;\r\n        },\r\n        /**\r\n         * A circle element used as hand's base. (pin)\r\n         *\r\n         * @param pin  Pin element\r\n         */\r\n        set: function (pin) {\r\n            if (this._pin) {\r\n                this.removeDispose(this._pin);\r\n            }\r\n            if (pin) {\r\n                this._pin = pin;\r\n                pin.parent = this;\r\n                this._disposers.push(pin);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"hand\", {\r\n        /**\r\n         * @return Hand element\r\n         */\r\n        get: function () {\r\n            return this._hand;\r\n        },\r\n        /**\r\n         * A trapezoid shape used for hand itself.\r\n         *\r\n         * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n         * `endWidth` properties.\r\n         *\r\n         * Set `endWidth` to 1 (px) to make it pointy.\r\n         *\r\n         * @param hand  Hand element\r\n         */\r\n        set: function (hand) {\r\n            if (this._hand) {\r\n                this.removeDispose(this._hand);\r\n            }\r\n            if (hand) {\r\n                this._hand = hand;\r\n                hand.parent = this;\r\n                this._disposers.push(hand);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"radius\", {\r\n        /**\r\n         * @return Radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Radius of the hand's outer end. (tip)\r\n         *\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(0)\r\n         * @param value  Radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Radius of the hand's inner end. (base)\r\n         *\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(0)\r\n         * @param value  Radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"startWidth\", {\r\n        /**\r\n         * @return Width (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startWidth\");\r\n        },\r\n        /**\r\n         * Width, in pixels, of the clock hand's inner end. (base)\r\n         *\r\n         * @default 5\r\n         * @param value  Width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startWidth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"endWidth\", {\r\n        /**\r\n         * @return Width (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endWidth\");\r\n        },\r\n        /**\r\n         * Width, in pixels, of the clock hand's outer end. (tip)\r\n         *\r\n         * @default 1\r\n         * @param value  Width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endWidth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"rotationDirection\", {\r\n        /**\r\n         * @return rotationDirection\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"rotationDirection\");\r\n        },\r\n        /**\r\n         * Rotation direction\r\n         *\r\n         * @default any\r\n         * @param value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"rotationDirection\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Moves clock hand to particular value.\r\n     *\r\n     * If `duration` is set to a number in milliseconds, the hand will move\r\n     * to the new position gracefully, rather than jumping rigth to it.\r\n     *\r\n     * Alternatively, you can also set `value` directly.\r\n     *\r\n     * @param value     New value\r\n     * @param duration  Animation duration (ms)\r\n     * @param easing  Animation easing function\r\n     */\r\n    ClockHand.prototype.showValue = function (value, duration, easing) {\r\n        this._value = value;\r\n        if (value != undefined) {\r\n            if (!$type.isNumber(duration)) {\r\n                duration = 0;\r\n            }\r\n            if (this.axis) {\r\n                var renderer = this.axis.renderer;\r\n                var newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n                var currentAngle = this.rotation;\r\n                if (this.rotationDirection == \"clockWise\") {\r\n                    if (newAngle < currentAngle) {\r\n                        this.rotation = currentAngle - 360;\r\n                    }\r\n                }\r\n                if (this.rotationDirection == \"counterClockWise\") {\r\n                    if (newAngle > currentAngle) {\r\n                        this.rotation = currentAngle + 360;\r\n                    }\r\n                }\r\n                this.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(ClockHand.prototype, \"currentPosition\", {\r\n        /**\r\n         * Returns hand's relative position on axis\r\n         */\r\n        get: function () {\r\n            if (this.axis) {\r\n                var renderer = this.axis.renderer;\r\n                return renderer.angleToPosition(this.rotation);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"value\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        /**\r\n         * A current value clock hand is pointing to.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.showValue(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"axis\", {\r\n        /**\r\n         * @return Axis\r\n         */\r\n        get: function () {\r\n            return this._axis.get();\r\n        },\r\n        /**\r\n         * An Axis clock hand is associated with.\r\n         *\r\n         * Hand's `value` relates to values on the Axis.\r\n         *\r\n         * @param axis  Axis\r\n         */\r\n        set: function (axis) {\r\n            if (this.axis != axis) {\r\n                this._axis.set(axis, new MultiDisposer([\r\n                    axis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n                    axis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n                    axis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n                    axis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n                ]));\r\n            }\r\n            if (axis) {\r\n                var chart = axis.chart;\r\n                if (chart) {\r\n                    this.rotation = chart.startAngle;\r\n                }\r\n            }\r\n            this.parent = axis.renderer;\r\n            this.zIndex = 5;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Triggers `value` accessor, so that Hand animates to new position, in case\r\n     * value has changed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ClockHand.prototype.updateValue = function () {\r\n        this.value = this.value;\r\n    };\r\n    /**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n    ClockHand.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Connect clock hands with axes\r\n            if ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n                config.axis = this.map.getKey(config.axis);\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return ClockHand;\r\n}(Container));\r\nexport { ClockHand };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}