{"ast":null,"code":"/**\r\n * Axis break module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { WavedLine } from \"../../core/elements/WavedLine\";\nimport { List } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Base class to define \"breaks\" on axes.\r\n *\r\n * @see {@link IAxisBreakEvents} for a list of available events\r\n * @see {@link IAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar AxisBreak =\n/** @class */\nfunction (_super) {\n  __extends(AxisBreak, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function AxisBreak() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Reference to parent Axis.\r\n     */\n\n\n    _this._axis = new MutableValueDisposer();\n    /**\r\n     * A list of axis data items which fall within this break.\r\n     */\n\n    _this.dataItems = new List();\n    _this.className = \"AxisBreak\"; // Set defaults\n\n    _this.breakSize = 0.01;\n    _this.marginLeft = -5;\n    _this.marginRight = -5;\n    _this.marginTop = -5;\n    _this.marginBottom = -5;\n    var interfaceColors = new InterfaceColorSet(); // Create elements\n    // (these won't be used actually, just for setting properties)\n\n    var fillShape = new WavedLine();\n    fillShape.fill = interfaceColors.getFor(\"background\");\n    fillShape.stroke = color();\n    fillShape.fillOpacity = 0.9;\n    fillShape.zIndex = 0;\n    _this._fillShape = fillShape;\n    var startLine = new WavedLine();\n    startLine.fill = color();\n    startLine.stroke = interfaceColors.getFor(\"grid\");\n    startLine.strokeOpacity = 0.3;\n    startLine.zIndex = 1;\n    _this._startLine = startLine;\n    var endLine = new WavedLine();\n    endLine.fill = color();\n    endLine.stroke = color(\"#000000\"); // interfaceColors.getFor(\"grid\");\n\n    endLine.strokeOpacity = 0.3;\n    endLine.zIndex = 2;\n    _this._endLine = endLine;\n\n    _this._disposers.push(_this._axis); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  AxisBreak.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    if (this._fillShape) {\n      this._fillShape.dispose();\n    }\n\n    if (this._startLine) {\n      this._startLine.dispose();\n    }\n\n    if (this._endLine) {\n      this._endLine.dispose();\n    }\n  };\n\n  Object.defineProperty(AxisBreak.prototype, \"startLine\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._startLine;\n    },\n\n    /**\r\n     * An element used for the starting line of the break.\r\n     *\r\n     * @param sprite  Element\r\n     */\n    set: function (sprite) {\n      if (this._startLine) {\n        this._startLine.dispose();\n      }\n\n      this._startLine = sprite;\n      this.addBreakSprite(sprite);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endLine\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._endLine;\n    },\n\n    /**\r\n     * An element used for the end line of the break.\r\n     *\r\n     * @param sprite Element\r\n     */\n    set: function (sprite) {\n      if (this._endLine) {\n        this._endLine.dispose();\n      }\n\n      this._endLine = sprite;\n      this.addBreakSprite(sprite);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"fillShape\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._fillShape;\n    },\n\n    /**\r\n     * An element used for fill of the break.\r\n     *\r\n     * @param sprite Element\r\n     */\n    set: function (sprite) {\n      if (this._fillShape) {\n        this._fillShape.dispose();\n      }\n\n      this._fillShape = sprite;\n      this.addBreakSprite(sprite);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds a break element (e.g. lines, fill) to the break, which is\r\n   * [[Container]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprite Element to add\r\n   */\n\n  AxisBreak.prototype.addBreakSprite = function (sprite) {\n    sprite.parent = this;\n    sprite.isMeasured = false;\n\n    this._disposers.push(sprite);\n  };\n\n  Object.defineProperty(AxisBreak.prototype, \"axis\", {\n    /**\r\n     * @return Axis\r\n     */\n    get: function () {\n      return this._axis.get();\n    },\n\n    /**\r\n     * An Axis this Break is associated with.\r\n     *\r\n     * @param axis  Axis\r\n     */\n    set: function (axis) {\n      if (this._axis.get() !== axis) {\n        this._axis.set(axis, axis.renderer.gridContainer.events.on(\"transformed\", this.invalidate, this, false));\n\n        axis.renderer.createBreakSprites(this); // this can't go to copyFrom, as axis is set later\n\n        var breakTemplate = axis.axisBreaks.template;\n        this.startLine.copyFrom(breakTemplate.startLine);\n        this.endLine.copyFrom(breakTemplate.endLine);\n        this.fillShape.copyFrom(breakTemplate.fillShape);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"breakSize\", {\n    /**\r\n     * @return Relative axis break\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"breakSize\");\n    },\n\n    /**\r\n     * A size of the break relative to the actual size of the scope break spans.\r\n     *\r\n     * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n     * would be 100 pixels, the break would be 10 pixels wide.\r\n     *\r\n     * 0 means the break will completely collapse and hide the values.\r\n     * 1 means break would be not collapse at all, which would make it\r\n     * effectively useless.\r\n     *\r\n     * @default 0.01\r\n     * @param value  Relative axis break\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"breakSize\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"startPoint\", {\n    /**\r\n     * Returns pixel coordinates of axis break's start.\r\n     *\r\n     * @return Start point\r\n     */\n    get: function () {\n      var renderer = this.axis.renderer;\n\n      if (renderer) {\n        return renderer.positionToPoint(this.startPosition);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endPoint\", {\n    /**\r\n     * Returns pixel coordinates of axis break's end.\r\n     *\r\n     * @return End point\r\n     */\n    get: function () {\n      var renderer = this.axis.renderer;\n\n      if (renderer) {\n        return renderer.positionToPoint(this.endPosition);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"startPosition\", {\n    /**\r\n     * Returns a relative position at which axis break starts.\r\n     *\r\n     * This is a calculated position, meaning it shows relative position of the\r\n     * break after break is applied.\r\n     *\r\n     * @return Start position\r\n     */\n    get: function () {\n      return;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endPosition\", {\n    /**\r\n     * Returns a relative position at which axis break ends.\r\n     *\r\n     * This is a calculated position, meaning it shows relative position of the\r\n     * break after break is applied.\r\n     *\r\n     * @return End position\r\n     */\n    get: function () {\n      return;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Draws the axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  AxisBreak.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (this.axis) {\n      var renderer = this.axis.renderer;\n      renderer.updateBreakElement(this);\n    }\n  };\n\n  Object.defineProperty(AxisBreak.prototype, \"startValue\", {\n    /**\r\n     * @return Starting value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startValue\");\n    },\n\n    /**\r\n     * A starting value for the break.\r\n     *\r\n     * @param value  Starting value\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"startValue\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endValue\", {\n    /**\r\n     * @return End value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endValue\");\n    },\n\n    /**\r\n     * An end value for the break.\r\n     *\r\n     * @param value  End value\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"endValue\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisBreak;\n}(Container);\n\nexport { AxisBreak };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisBreak\"] = AxisBreak;","map":{"version":3,"names":["__extends","Container","MutableValueDisposer","WavedLine","List","registry","color","InterfaceColorSet","AxisBreak","_super","_this","call","_axis","dataItems","className","breakSize","marginLeft","marginRight","marginTop","marginBottom","interfaceColors","fillShape","fill","getFor","stroke","fillOpacity","zIndex","_fillShape","startLine","strokeOpacity","_startLine","endLine","_endLine","_disposers","push","applyTheme","prototype","dispose","Object","defineProperty","get","set","sprite","addBreakSprite","enumerable","configurable","parent","isMeasured","axis","renderer","gridContainer","events","on","invalidate","createBreakSprites","breakTemplate","axisBreaks","template","copyFrom","getPropertyValue","value","setPropertyValue","invalidateSeries","positionToPoint","startPosition","endPosition","draw","updateBreakElement","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisBreak.js"],"sourcesContent":["/**\r\n * Axis break module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Base class to define \"breaks\" on axes.\r\n *\r\n * @see {@link IAxisBreakEvents} for a list of available events\r\n * @see {@link IAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar AxisBreak = /** @class */ (function (_super) {\r\n    __extends(AxisBreak, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function AxisBreak() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Reference to parent Axis.\r\n         */\r\n        _this._axis = new MutableValueDisposer();\r\n        /**\r\n         * A list of axis data items which fall within this break.\r\n         */\r\n        _this.dataItems = new List();\r\n        _this.className = \"AxisBreak\";\r\n        // Set defaults\r\n        _this.breakSize = 0.01;\r\n        _this.marginLeft = -5;\r\n        _this.marginRight = -5;\r\n        _this.marginTop = -5;\r\n        _this.marginBottom = -5;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Create elements\r\n        // (these won't be used actually, just for setting properties)\r\n        var fillShape = new WavedLine();\r\n        fillShape.fill = interfaceColors.getFor(\"background\");\r\n        fillShape.stroke = color();\r\n        fillShape.fillOpacity = 0.9;\r\n        fillShape.zIndex = 0;\r\n        _this._fillShape = fillShape;\r\n        var startLine = new WavedLine();\r\n        startLine.fill = color();\r\n        startLine.stroke = interfaceColors.getFor(\"grid\");\r\n        startLine.strokeOpacity = 0.3;\r\n        startLine.zIndex = 1;\r\n        _this._startLine = startLine;\r\n        var endLine = new WavedLine();\r\n        endLine.fill = color();\r\n        endLine.stroke = color(\"#000000\"); // interfaceColors.getFor(\"grid\");\r\n        endLine.strokeOpacity = 0.3;\r\n        endLine.zIndex = 2;\r\n        _this._endLine = endLine;\r\n        _this._disposers.push(_this._axis);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    AxisBreak.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        if (this._fillShape) {\r\n            this._fillShape.dispose();\r\n        }\r\n        if (this._startLine) {\r\n            this._startLine.dispose();\r\n        }\r\n        if (this._endLine) {\r\n            this._endLine.dispose();\r\n        }\r\n    };\r\n    Object.defineProperty(AxisBreak.prototype, \"startLine\", {\r\n        /**\r\n         * @return Element\r\n         */\r\n        get: function () {\r\n            return this._startLine;\r\n        },\r\n        /**\r\n         * An element used for the starting line of the break.\r\n         *\r\n         * @param sprite  Element\r\n         */\r\n        set: function (sprite) {\r\n            if (this._startLine) {\r\n                this._startLine.dispose();\r\n            }\r\n            this._startLine = sprite;\r\n            this.addBreakSprite(sprite);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"endLine\", {\r\n        /**\r\n         * @return Element\r\n         */\r\n        get: function () {\r\n            return this._endLine;\r\n        },\r\n        /**\r\n         * An element used for the end line of the break.\r\n         *\r\n         * @param sprite Element\r\n         */\r\n        set: function (sprite) {\r\n            if (this._endLine) {\r\n                this._endLine.dispose();\r\n            }\r\n            this._endLine = sprite;\r\n            this.addBreakSprite(sprite);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"fillShape\", {\r\n        /**\r\n         * @return Element\r\n         */\r\n        get: function () {\r\n            return this._fillShape;\r\n        },\r\n        /**\r\n         * An element used for fill of the break.\r\n         *\r\n         * @param sprite Element\r\n         */\r\n        set: function (sprite) {\r\n            if (this._fillShape) {\r\n                this._fillShape.dispose();\r\n            }\r\n            this._fillShape = sprite;\r\n            this.addBreakSprite(sprite);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds a break element (e.g. lines, fill) to the break, which is\r\n     * [[Container]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param sprite Element to add\r\n     */\r\n    AxisBreak.prototype.addBreakSprite = function (sprite) {\r\n        sprite.parent = this;\r\n        sprite.isMeasured = false;\r\n        this._disposers.push(sprite);\r\n    };\r\n    Object.defineProperty(AxisBreak.prototype, \"axis\", {\r\n        /**\r\n         * @return Axis\r\n         */\r\n        get: function () {\r\n            return this._axis.get();\r\n        },\r\n        /**\r\n         * An Axis this Break is associated with.\r\n         *\r\n         * @param axis  Axis\r\n         */\r\n        set: function (axis) {\r\n            if (this._axis.get() !== axis) {\r\n                this._axis.set(axis, axis.renderer.gridContainer.events.on(\"transformed\", this.invalidate, this, false));\r\n                axis.renderer.createBreakSprites(this);\r\n                // this can't go to copyFrom, as axis is set later\r\n                var breakTemplate = axis.axisBreaks.template;\r\n                this.startLine.copyFrom(breakTemplate.startLine);\r\n                this.endLine.copyFrom(breakTemplate.endLine);\r\n                this.fillShape.copyFrom(breakTemplate.fillShape);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"breakSize\", {\r\n        /**\r\n         * @return Relative axis break\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"breakSize\");\r\n        },\r\n        /**\r\n         * A size of the break relative to the actual size of the scope break spans.\r\n         *\r\n         * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n         * would be 100 pixels, the break would be 10 pixels wide.\r\n         *\r\n         * 0 means the break will completely collapse and hide the values.\r\n         * 1 means break would be not collapse at all, which would make it\r\n         * effectively useless.\r\n         *\r\n         * @default 0.01\r\n         * @param value  Relative axis break\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"breakSize\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"startPoint\", {\r\n        /**\r\n         * Returns pixel coordinates of axis break's start.\r\n         *\r\n         * @return Start point\r\n         */\r\n        get: function () {\r\n            var renderer = this.axis.renderer;\r\n            if (renderer) {\r\n                return renderer.positionToPoint(this.startPosition);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"endPoint\", {\r\n        /**\r\n         * Returns pixel coordinates of axis break's end.\r\n         *\r\n         * @return End point\r\n         */\r\n        get: function () {\r\n            var renderer = this.axis.renderer;\r\n            if (renderer) {\r\n                return renderer.positionToPoint(this.endPosition);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"startPosition\", {\r\n        /**\r\n         * Returns a relative position at which axis break starts.\r\n         *\r\n         * This is a calculated position, meaning it shows relative position of the\r\n         * break after break is applied.\r\n         *\r\n         * @return Start position\r\n         */\r\n        get: function () {\r\n            return;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"endPosition\", {\r\n        /**\r\n         * Returns a relative position at which axis break ends.\r\n         *\r\n         * This is a calculated position, meaning it shows relative position of the\r\n         * break after break is applied.\r\n         *\r\n         * @return End position\r\n         */\r\n        get: function () {\r\n            return;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Draws the axis break.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisBreak.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this.axis) {\r\n            var renderer = this.axis.renderer;\r\n            renderer.updateBreakElement(this);\r\n        }\r\n    };\r\n    Object.defineProperty(AxisBreak.prototype, \"startValue\", {\r\n        /**\r\n         * @return Starting value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startValue\");\r\n        },\r\n        /**\r\n         * A starting value for the break.\r\n         *\r\n         * @param value  Starting value\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"startValue\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"endValue\", {\r\n        /**\r\n         * @return End value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endValue\");\r\n        },\r\n        /**\r\n         * An end value for the break.\r\n         *\r\n         * @param value  End value\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"endValue\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return AxisBreak;\r\n}(Container));\r\nexport { AxisBreak };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisBreak\"] = AxisBreak;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}