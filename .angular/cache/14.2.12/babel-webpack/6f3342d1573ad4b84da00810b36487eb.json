{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Pattern } from \"./Pattern\";\nimport { registry } from \"../../Registry\";\nimport * as $path from \"../../rendering/Path\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Line pattern.\r\n */\n\nvar LinePattern =\n/** @class */\nfunction (_super) {\n  __extends(LinePattern, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function LinePattern() {\n    var _this = _super.call(this) || this;\n\n    _this.properties[\"gap\"] = 0;\n    _this._line = _this.paper.add(\"path\");\n\n    _this.addElement(_this._line);\n\n    return _this;\n  }\n  /**\r\n   * Draws the pattern.\r\n   */\n\n\n  LinePattern.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (Math.round(this.rotation / 90) != this.rotation / 90) {\n      this.properties[\"shapeRendering\"] = \"auto\";\n    }\n\n    if (this._line) {\n      var w = this.width;\n      var h = this.height;\n      var path = \"\";\n\n      if (!this.gap) {\n        if (Math.round(this.rotation / 90) != this.rotation / 90) {\n          path = $path.moveTo({\n            x: -w,\n            y: h / 2\n          }) + $path.lineTo({\n            x: w * 2,\n            y: h / 2\n          });\n          this.properties[\"rotationX\"] = this.width / 2;\n          this.properties[\"rotationY\"] = this.height / 2;\n        } else {\n          path = $path.moveTo({\n            x: 0,\n            y: 0\n          }) + $path.lineTo({\n            x: w,\n            y: 0\n          });\n        }\n      } else {\n        var step = this.gap + this.strokeWidth;\n        var count = this.height / step;\n\n        for (var i = -count / 2; i < count * 1.5; i++) {\n          if (Math.round(this.rotation / 90) != this.rotation / 90) {\n            path += $path.moveTo({\n              x: -w,\n              y: (i + 0.5) * step\n            }) + $path.lineTo({\n              x: w * 2,\n              y: (i + 0.5) * step\n            });\n            this.properties[\"rotationX\"] = this.width / 2;\n            this.properties[\"rotationY\"] = this.height / 2;\n          } else {\n            path += $path.moveTo({\n              x: -w,\n              y: i * step\n            }) + $path.lineTo({\n              x: w * 2,\n              y: i * step\n            });\n          }\n        }\n      }\n\n      this._line.attr({\n        \"d\": path\n      });\n    }\n  };\n\n  Object.defineProperty(LinePattern.prototype, \"gap\", {\n    /**\r\n     * @return gap\r\n     */\n    get: function () {\n      return this.properties[\"gap\"];\n    },\n\n    /**\r\n     * Number of pixels between pattern lines.\r\n     *\r\n     * The pattern will automatically draw required number of lines to fill\r\n     * pattern area maintaining `gap` distance between them.\r\n     *\r\n     * 0 (zero) means only single line will be drawn.\r\n     *\r\n     * @default 0\r\n     * @since 4.7.7\r\n     */\n    set: function (value) {\n      this.properties[\"gap\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return LinePattern;\n}(Pattern);\n\nexport { LinePattern };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"LinePattern\"] = LinePattern;","map":{"version":3,"names":["__extends","Pattern","registry","$path","LinePattern","_super","_this","call","properties","_line","paper","add","addElement","prototype","draw","Math","round","rotation","w","width","h","height","path","gap","moveTo","x","y","lineTo","step","strokeWidth","count","i","attr","Object","defineProperty","get","set","value","enumerable","configurable","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinePattern.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern } from \"./Pattern\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $path from \"../../rendering/Path\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Line pattern.\r\n */\r\nvar LinePattern = /** @class */ (function (_super) {\r\n    __extends(LinePattern, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LinePattern() {\r\n        var _this = _super.call(this) || this;\r\n        _this.properties[\"gap\"] = 0;\r\n        _this._line = _this.paper.add(\"path\");\r\n        _this.addElement(_this._line);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the pattern.\r\n     */\r\n    LinePattern.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n            this.properties[\"shapeRendering\"] = \"auto\";\r\n        }\r\n        if (this._line) {\r\n            var w = this.width;\r\n            var h = this.height;\r\n            var path = \"\";\r\n            if (!this.gap) {\r\n                if (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n                    path = $path.moveTo({ x: -w, y: h / 2 }) + $path.lineTo({ x: w * 2, y: h / 2 });\r\n                    this.properties[\"rotationX\"] = this.width / 2;\r\n                    this.properties[\"rotationY\"] = this.height / 2;\r\n                }\r\n                else {\r\n                    path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n                }\r\n            }\r\n            else {\r\n                var step = this.gap + this.strokeWidth;\r\n                var count = this.height / step;\r\n                for (var i = -count / 2; i < count * 1.5; i++) {\r\n                    if (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n                        path += $path.moveTo({ x: -w, y: (i + 0.5) * step }) + $path.lineTo({ x: w * 2, y: (i + 0.5) * step });\r\n                        this.properties[\"rotationX\"] = this.width / 2;\r\n                        this.properties[\"rotationY\"] = this.height / 2;\r\n                    }\r\n                    else {\r\n                        path += $path.moveTo({ x: -w, y: i * step }) + $path.lineTo({ x: w * 2, y: i * step });\r\n                    }\r\n                }\r\n            }\r\n            this._line.attr({ \"d\": path });\r\n        }\r\n    };\r\n    Object.defineProperty(LinePattern.prototype, \"gap\", {\r\n        /**\r\n         * @return gap\r\n         */\r\n        get: function () {\r\n            return this.properties[\"gap\"];\r\n        },\r\n        /**\r\n         * Number of pixels between pattern lines.\r\n         *\r\n         * The pattern will automatically draw required number of lines to fill\r\n         * pattern area maintaining `gap` distance between them.\r\n         *\r\n         * 0 (zero) means only single line will be drawn.\r\n         *\r\n         * @default 0\r\n         * @since 4.7.7\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"gap\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return LinePattern;\r\n}(Pattern));\r\nexport { LinePattern };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LinePattern\"] = LinePattern;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}