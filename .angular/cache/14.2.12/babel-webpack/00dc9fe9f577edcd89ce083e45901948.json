{"ast":null,"code":"/**\r\n * Functionality related simulating of dragging of elements using keyboard.\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { getInteraction } from \"./Interaction\";\nimport { system } from \"../System\";\nimport * as $array from \"../utils/Array\";\n/**\r\n * [[InteractionKeyboardObject]] is used to simulate dragging of the `draggable`\r\n * element using keyboard arrows.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nvar InteractionKeyboardObject =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param io An InteractionObject\r\n   */\n  function InteractionKeyboardObject(io, ev) {\n    /**\r\n     * Indicates if this object has already been deleted. Any\r\n     * destruction/disposal code should take this into account when deciding\r\n     * wheter to run potentially costly disposal operations if they already have\r\n     * been run.\r\n     */\n    this._disposed = false;\n    /**\r\n     * Indicates direction of current horizontal movement.\r\n     *\r\n     * 0 - not moving horizontally\r\n     * 1 - moving right\r\n     * -1 - moving left\r\n     */\n\n    this.directionX = 0;\n    /**\r\n     * Indicates direction of current vertical movement.\r\n     *\r\n     * 0 - not moving vertically\r\n     * 1 - moving down\r\n     * -1 - moving up\r\n     */\n\n    this.directionY = 0;\n    this.interaction = io;\n    this.keyboardEvent = ev;\n    this._startedOn = new Date().getTime();\n    getInteraction().processDragStart(io);\n    system.animations.push(this);\n    this.update();\n  }\n  /**\r\n   * It's an update method which is called by the system if\r\n   * [[InteractionObject]] is used as animation.\r\n   *\r\n   * This will update coordinates of the element based on the movement\r\n   * directions.\r\n   */\n\n\n  InteractionKeyboardObject.prototype.update = function () {\n    // Init and get settings\n    var io = this.interaction;\n    var speed = getInteraction().getKeyboardOption(io, \"speed\"),\n        accelleration = getInteraction().getKeyboardOption(io, \"accelleration\"),\n        accellerationDelay = getInteraction().getKeyboardOption(io, \"accellerationDelay\"),\n        shift = {\n      x: 0,\n      y: 0\n    }; // If SHIFT key is pressed we slash speed by half and disable accelleration\n\n    if (this.keyboardEvent.shiftKey) {\n      speed *= 0.5;\n      accelleration = 1;\n    } // If CTRL is pressed we increase speed by x2\n    else if (this.keyboardEvent.ctrlKey) {\n      speed *= 2;\n    } // Get elapsed time\n\n\n    var ms = new Date().getTime() - this._startedOn;\n\n    var accelleratedMs = ms - accellerationDelay; // Add accellerated movement\n\n    if (accelleration > 0 && accelleratedMs > 0) {\n      var accellerationFactor = ms / accellerationDelay;\n      ms = accellerationDelay;\n      shift.x += this.directionX * (speed * accelleration * accellerationFactor * accelleratedMs);\n      shift.y += this.directionY * (speed * accelleration * accellerationFactor * accelleratedMs);\n    } // Calculate position\n\n\n    shift.x += this.directionX * (speed * ms);\n    shift.y += this.directionY * (speed * ms); // Simulate move on Interaction\n\n    getInteraction().handleTransformMove(io, shift, {\n      x: 0,\n      y: 0\n    }, this.keyboardEvent, true, false);\n  };\n  /**\r\n   * Returns if this object has been already been disposed.\r\n   *\r\n   * @return Is disposed?\r\n   */\n\n\n  InteractionKeyboardObject.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Disposes this object. Removes from system animations.\r\n   */\n\n\n  InteractionKeyboardObject.prototype.dispose = function () {\n    if (!this._disposed) {\n      getInteraction().processDragStop(this.interaction);\n      $array.remove(system.animations, this);\n    }\n  };\n\n  return InteractionKeyboardObject;\n}();\n\nexport { InteractionKeyboardObject };","map":{"version":3,"names":["getInteraction","system","$array","InteractionKeyboardObject","io","ev","_disposed","directionX","directionY","interaction","keyboardEvent","_startedOn","Date","getTime","processDragStart","animations","push","update","prototype","speed","getKeyboardOption","accelleration","accellerationDelay","shift","x","y","shiftKey","ctrlKey","ms","accelleratedMs","accellerationFactor","handleTransformMove","isDisposed","dispose","processDragStop","remove"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionKeyboardObject.js"],"sourcesContent":["/**\r\n * Functionality related simulating of dragging of elements using keyboard.\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { getInteraction } from \"./Interaction\";\r\nimport { system } from \"../System\";\r\nimport * as $array from \"../utils/Array\";\r\n/**\r\n * [[InteractionKeyboardObject]] is used to simulate dragging of the `draggable`\r\n * element using keyboard arrows.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar InteractionKeyboardObject = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param io An InteractionObject\r\n     */\r\n    function InteractionKeyboardObject(io, ev) {\r\n        /**\r\n         * Indicates if this object has already been deleted. Any\r\n         * destruction/disposal code should take this into account when deciding\r\n         * wheter to run potentially costly disposal operations if they already have\r\n         * been run.\r\n         */\r\n        this._disposed = false;\r\n        /**\r\n         * Indicates direction of current horizontal movement.\r\n         *\r\n         * 0 - not moving horizontally\r\n         * 1 - moving right\r\n         * -1 - moving left\r\n         */\r\n        this.directionX = 0;\r\n        /**\r\n         * Indicates direction of current vertical movement.\r\n         *\r\n         * 0 - not moving vertically\r\n         * 1 - moving down\r\n         * -1 - moving up\r\n         */\r\n        this.directionY = 0;\r\n        this.interaction = io;\r\n        this.keyboardEvent = ev;\r\n        this._startedOn = new Date().getTime();\r\n        getInteraction().processDragStart(io);\r\n        system.animations.push(this);\r\n        this.update();\r\n    }\r\n    /**\r\n     * It's an update method which is called by the system if\r\n     * [[InteractionObject]] is used as animation.\r\n     *\r\n     * This will update coordinates of the element based on the movement\r\n     * directions.\r\n     */\r\n    InteractionKeyboardObject.prototype.update = function () {\r\n        // Init and get settings\r\n        var io = this.interaction;\r\n        var speed = getInteraction().getKeyboardOption(io, \"speed\"), accelleration = getInteraction().getKeyboardOption(io, \"accelleration\"), accellerationDelay = getInteraction().getKeyboardOption(io, \"accellerationDelay\"), shift = {\r\n            x: 0,\r\n            y: 0\r\n        };\r\n        // If SHIFT key is pressed we slash speed by half and disable accelleration\r\n        if (this.keyboardEvent.shiftKey) {\r\n            speed *= 0.5;\r\n            accelleration = 1;\r\n        }\r\n        // If CTRL is pressed we increase speed by x2\r\n        else if (this.keyboardEvent.ctrlKey) {\r\n            speed *= 2;\r\n        }\r\n        // Get elapsed time\r\n        var ms = new Date().getTime() - this._startedOn;\r\n        var accelleratedMs = ms - accellerationDelay;\r\n        // Add accellerated movement\r\n        if ((accelleration > 0) && (accelleratedMs > 0)) {\r\n            var accellerationFactor = ms / accellerationDelay;\r\n            ms = accellerationDelay;\r\n            shift.x += this.directionX * (speed * accelleration * accellerationFactor * accelleratedMs);\r\n            shift.y += this.directionY * (speed * accelleration * accellerationFactor * accelleratedMs);\r\n        }\r\n        // Calculate position\r\n        shift.x += this.directionX * (speed * ms);\r\n        shift.y += this.directionY * (speed * ms);\r\n        // Simulate move on Interaction\r\n        getInteraction().handleTransformMove(io, shift, { x: 0, y: 0 }, this.keyboardEvent, true, false);\r\n    };\r\n    /**\r\n     * Returns if this object has been already been disposed.\r\n     *\r\n     * @return Is disposed?\r\n     */\r\n    InteractionKeyboardObject.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Disposes this object. Removes from system animations.\r\n     */\r\n    InteractionKeyboardObject.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            getInteraction().processDragStop(this.interaction);\r\n            $array.remove(system.animations, this);\r\n        }\r\n    };\r\n    return InteractionKeyboardObject;\r\n}());\r\nexport { InteractionKeyboardObject };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}