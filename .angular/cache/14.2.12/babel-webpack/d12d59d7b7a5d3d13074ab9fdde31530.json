{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_scrolling.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { getWindow } from \"../../core/utils/window\";\nimport { VirtualScrollController, subscribeToExternalScrollers } from \"./ui.grid_core.virtual_scrolling_core\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { each } from \"../../core/utils/iterator\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport LoadIndicator from \"../load_indicator\";\nimport browser from \"../../core/utils/browser\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport { isElementInDom } from \"../../core/utils/dom\";\nimport { isDefined } from \"../../core/utils/type\";\nvar BOTTOM_LOAD_PANEL_CLASS = \"bottom-load-panel\";\nvar TABLE_CONTENT_CLASS = \"table-content\";\nvar GROUP_SPACE_CLASS = \"group-space\";\nvar CONTENT_CLASS = \"content\";\nvar FREESPACE_CLASS = \"dx-freespace-row\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\nvar ROW_INSERTED = \"dx-row-inserted\";\nvar SCROLLING_MODE_INFINITE = \"infinite\";\nvar SCROLLING_MODE_VIRTUAL = \"virtual\";\nvar LOAD_TIMEOUT = 300;\nvar LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\nvar VISIBLE_PAGE_INDEX = \"paging.pageIndex\";\n\nvar isVirtualMode = function (that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_VIRTUAL;\n};\n\nvar isAppendMode = function (that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE;\n};\n\nvar isVirtualPaging = function (that) {\n  return isVirtualMode(that) || isAppendMode(that);\n};\n\nvar _correctCount = function (items, count, fromEnd, isItemCountableFunc) {\n  for (var i = 0; i < count + 1; i++) {\n    var item = items[fromEnd ? items.length - 1 - i : i];\n\n    if (item && !isItemCountableFunc(item, i === count, fromEnd)) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\nvar isItemCountableByDataSource = function (item, dataSource) {\n  return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && dataSource.isGroupItemCountable(item.data);\n};\n\nvar updateItemIndices = function (items) {\n  items.forEach(function (item, index) {\n    item.rowIndex = index;\n  });\n  return items;\n};\n\nvar VirtualScrollingDataSourceAdapterExtender = function () {\n  var _updateLoading = function (that) {\n    var beginPageIndex = that._virtualScrollController.beginPageIndex(-1);\n\n    if (isVirtualMode(that)) {\n      if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {\n        if (!that._isLoading) {\n          that._isLoading = true;\n          that.loadingChanged.fire(true);\n        }\n      } else if (that._isLoading) {\n        that._isLoading = false;\n        that.loadingChanged.fire(false);\n      }\n    }\n  };\n\n  var result = {\n    init: function () {\n      this.callBase.apply(this, arguments);\n      this._items = [];\n      this._totalCount = -1;\n      this._isLoaded = true;\n      this._loadPageCount = 1;\n      this._virtualScrollController = new VirtualScrollController(this.component, this._getVirtualScrollDataOptions());\n    },\n    _getVirtualScrollDataOptions: function () {\n      var that = this;\n      return {\n        pageSize: function () {\n          return that.pageSize();\n        },\n        totalItemsCount: function () {\n          return that.totalItemsCount();\n        },\n        hasKnownLastPage: function () {\n          return that.hasKnownLastPage();\n        },\n        pageIndex: function (index) {\n          return that._dataSource.pageIndex(index);\n        },\n        isLoading: function () {\n          return that._dataSource.isLoading() && !that.isCustomLoading();\n        },\n        pageCount: function () {\n          return that.pageCount();\n        },\n        load: function () {\n          return that._dataSource.load();\n        },\n        updateLoading: function () {\n          _updateLoading(that);\n        },\n        itemsCount: function () {\n          return that.itemsCount(true);\n        },\n        items: function () {\n          return that._dataSource.items();\n        },\n        viewportItems: function (items) {\n          if (items) {\n            that._items = items;\n          }\n\n          return that._items;\n        },\n        onChanged: function (e) {\n          that.changed.fire(e);\n        },\n        changingDuration: function (e) {\n          if (that.isLoading()) {\n            return LOAD_TIMEOUT;\n          }\n\n          return that._renderTime || 0;\n        }\n      };\n    },\n    _handleLoadingChanged: function (isLoading) {\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        this.callBase.apply(this, arguments);\n        return;\n      }\n\n      if (!isVirtualMode(this) || this._isLoadingAll) {\n        this._isLoading = isLoading;\n        this.callBase.apply(this, arguments);\n      }\n\n      if (isLoading) {\n        this._startLoadTime = new Date();\n      } else {\n        this._startLoadTime = void 0;\n      }\n    },\n    _handleLoadError: function () {\n      if (false !== this.option(LEGACY_SCROLLING_MODE)) {\n        this._isLoading = false;\n        this.loadingChanged.fire(false);\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _handleDataChanged: function (e) {\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        this._items = this._dataSource.items().slice();\n        this._totalCount = this._dataSourceTotalCount(true);\n        this.callBase.apply(this, arguments);\n        return;\n      }\n\n      var callBase = this.callBase.bind(this);\n\n      this._virtualScrollController.handleDataChanged(callBase, e);\n    },\n    _customizeRemoteOperations: function (options, operationTypes) {\n      var newMode = false === this.option(LEGACY_SCROLLING_MODE);\n      var renderAsync = this.option(\"scrolling.renderAsync\");\n\n      if (!isDefined(renderAsync)) {\n        renderAsync = this._renderTime >= this.option(\"scrolling.renderingThreshold\");\n      }\n\n      if ((isVirtualMode(this) || isAppendMode(this) && newMode) && !operationTypes.reload && (operationTypes.skip || newMode) && !renderAsync) {\n        options.delay = void 0;\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    items: function () {\n      return this._items;\n    },\n    _dataSourceTotalCount: function (isBase) {\n      return false === this.option(LEGACY_SCROLLING_MODE) && isVirtualMode(this) && !isBase ? this._totalCount : this.callBase();\n    },\n    itemsCount: function (isBase) {\n      if (isBase || false === this.option(LEGACY_SCROLLING_MODE)) {\n        return this.callBase();\n      }\n\n      return this._virtualScrollController.itemsCount();\n    },\n    load: function (loadOptions) {\n      if (false === this.option(LEGACY_SCROLLING_MODE) || loadOptions) {\n        return this.callBase(loadOptions);\n      }\n\n      return this._virtualScrollController.load();\n    },\n    isLoading: function () {\n      return false === this.option(LEGACY_SCROLLING_MODE) ? this._dataSource.isLoading() : this._isLoading;\n    },\n    isLoaded: function () {\n      return this._dataSource.isLoaded() && this._isLoaded;\n    },\n    resetPagesCache: function (isLiveUpdate) {\n      if (!isLiveUpdate) {\n        this._virtualScrollController.reset(true);\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _changeRowExpandCore: function () {\n      var result = this.callBase.apply(this, arguments);\n\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        return result;\n      }\n\n      this.resetPagesCache();\n\n      _updateLoading(this);\n\n      return result;\n    },\n    reload: function () {\n      this._dataSource.pageIndex(this.pageIndex());\n\n      var virtualScrollController = this._virtualScrollController;\n\n      if (false !== this.option(LEGACY_SCROLLING_MODE) && virtualScrollController) {\n        var d = new Deferred();\n        this.callBase.apply(this, arguments).done(function (r) {\n          var delayDeferred = virtualScrollController.getDelayDeferred();\n\n          if (delayDeferred) {\n            delayDeferred.done(d.resolve).fail(d.reject);\n          } else {\n            d.resolve(r);\n          }\n        }).fail(d.reject);\n        return d;\n      } else {\n        return this.callBase.apply(this, arguments);\n      }\n    },\n    refresh: function (options, operationTypes) {\n      if (false !== this.option(LEGACY_SCROLLING_MODE)) {\n        var storeLoadOptions = options.storeLoadOptions;\n        var dataSource = this._dataSource;\n\n        if (operationTypes.reload) {\n          this._virtualScrollController.reset();\n\n          dataSource.items().length = 0;\n          this._isLoaded = false;\n\n          _updateLoading(this);\n\n          this._isLoaded = true;\n\n          if (isAppendMode(this)) {\n            this.pageIndex(0);\n            dataSource.pageIndex(0);\n            storeLoadOptions.pageIndex = 0;\n            options.pageIndex = 0;\n            storeLoadOptions.skip = 0;\n          } else {\n            dataSource.pageIndex(this.pageIndex());\n\n            if (dataSource.paginate()) {\n              options.pageIndex = this.pageIndex();\n              storeLoadOptions.skip = this.pageIndex() * this.pageSize();\n            }\n          }\n        } else if (isAppendMode(this) && storeLoadOptions.skip && this._totalCountCorrection < 0) {\n          storeLoadOptions.skip += this._totalCountCorrection;\n        }\n      }\n\n      return this.callBase.apply(this, arguments);\n    },\n    dispose: function () {\n      this._virtualScrollController.dispose();\n\n      this.callBase.apply(this, arguments);\n    },\n    loadPageCount: function (count) {\n      if (!isDefined(count)) {\n        return this._loadPageCount;\n      }\n\n      this._loadPageCount = count;\n    },\n    _handleDataLoading: function (options) {\n      var loadPageCount = this.loadPageCount();\n      var pageSize = this.pageSize();\n      var newMode = false === this.option(LEGACY_SCROLLING_MODE);\n      var storeLoadOptions = options.storeLoadOptions;\n      var takeIsDefined = isDefined(storeLoadOptions.take);\n      options.loadPageCount = loadPageCount;\n\n      if (!options.isCustomLoading && newMode && takeIsDefined && loadPageCount > 1 && pageSize > 0) {\n        storeLoadOptions.take = loadPageCount * pageSize;\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _loadPageSize: function () {\n      return this.callBase.apply(this, arguments) * this.loadPageCount();\n    }\n  };\n  [\"beginPageIndex\", \"endPageIndex\", \"pageIndex\"].forEach(function (name) {\n    result[name] = function () {\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        var dataSource = this._dataSource;\n        return dataSource.pageIndex.apply(dataSource, arguments);\n      }\n\n      var virtualScrollController = this._virtualScrollController;\n      return virtualScrollController[name].apply(virtualScrollController, arguments);\n    };\n  });\n  [\"virtualItemsCount\", \"getContentOffset\", \"getVirtualContentSize\", \"setContentItemSizes\", \"setViewportPosition\", \"getViewportItemIndex\", \"setViewportItemIndex\", \"getItemIndexByPosition\", \"viewportSize\", \"viewportItemSize\", \"getItemSize\", \"getItemSizes\", \"loadIfNeed\"].forEach(function (name) {\n    result[name] = function () {\n      var virtualScrollController = this._virtualScrollController;\n      return virtualScrollController[name].apply(virtualScrollController, arguments);\n    };\n  });\n  return result;\n}();\n\nvar VirtualScrollingRowsViewExtender = function () {\n  var removeEmptyRows = function ($emptyRows, className) {\n    var tBodies = $emptyRows.toArray().map(row => $(row).parent(\".\" + className).get(0)).filter(row => row);\n\n    if (tBodies.length) {\n      $emptyRows = $(tBodies);\n    }\n\n    var rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;\n\n    for (var i = 0; i < rowCount; i++) {\n      $emptyRows.eq(i).remove();\n    }\n  };\n\n  return {\n    init: function () {\n      var _dataController$state;\n\n      var dataController = this.getController(\"data\");\n      this.callBase();\n      dataController.pageChanged.add(pageIndex => {\n        var scrollTop = this._scrollTop;\n        this.scrollToPage(null !== pageIndex && void 0 !== pageIndex ? pageIndex : dataController.pageIndex());\n\n        if (false === this.option(LEGACY_SCROLLING_MODE) && this._scrollTop === scrollTop) {\n          dataController.updateViewport();\n        }\n      });\n      dataController.dataSourceChanged.add(() => {\n        !this._scrollTop && this._scrollToCurrentPageOnResize();\n      });\n      null === (_dataController$state = dataController.stateLoaded) || void 0 === _dataController$state ? void 0 : _dataController$state.add(() => {\n        this._scrollToCurrentPageOnResize();\n      });\n\n      this._scrollToCurrentPageOnResize();\n    },\n    _scrollToCurrentPageOnResize: function () {\n      var dataController = this.getController(\"data\");\n\n      if (dataController.pageIndex() > 0) {\n        var resizeHandler = () => {\n          this.resizeCompleted.remove(resizeHandler);\n          this.scrollToPage(dataController.pageIndex());\n        };\n\n        this.resizeCompleted.add(resizeHandler);\n      }\n    },\n    scrollToPage: function (pageIndex) {\n      var dataController = this._dataController;\n      var pageSize = dataController ? dataController.pageSize() : 0;\n      var scrollPosition;\n\n      if (isVirtualMode(this) || isAppendMode(this)) {\n        var itemSize = dataController.getItemSize();\n        var itemSizes = dataController.getItemSizes();\n        var itemIndex = pageIndex * pageSize;\n        scrollPosition = itemIndex * itemSize;\n\n        for (var index in itemSizes) {\n          if (index < itemIndex) {\n            scrollPosition += itemSizes[index] - itemSize;\n          }\n        }\n      } else {\n        scrollPosition = 0;\n      }\n\n      this.scrollTo({\n        y: scrollPosition,\n        x: this._scrollLeft\n      });\n    },\n    renderDelayedTemplates: function (e) {\n      this._waitAsyncTemplates(e).done(() => {\n        this._updateContentPosition(true);\n      });\n\n      this.callBase.apply(this, arguments);\n    },\n    _renderCore: function (e) {\n      var startRenderTime = new Date();\n      var deferred = this.callBase.apply(this, arguments);\n      var dataSource = this._dataController._dataSource;\n\n      if (dataSource && e) {\n        var itemCount = e.items ? e.items.length : 20;\n        var viewportSize = this._dataController.viewportSize() || 20;\n\n        if (gridCoreUtils.isVirtualRowRendering(this) && itemCount > 0 && false !== this.option(LEGACY_SCROLLING_MODE)) {\n          dataSource._renderTime = (new Date() - startRenderTime) * viewportSize / itemCount;\n        } else {\n          dataSource._renderTime = new Date() - startRenderTime;\n        }\n      }\n\n      return deferred;\n    },\n    _getRowElements: function (tableElement) {\n      var $rows = this.callBase(tableElement);\n      return $rows && $rows.not(\".\" + VIRTUAL_ROW_CLASS);\n    },\n    _removeRowsElements: function (contentTable, removeCount, changeType) {\n      var rowElements = this._getRowElements(contentTable).toArray();\n\n      if (\"append\" === changeType) {\n        rowElements = rowElements.slice(0, removeCount);\n      } else {\n        rowElements = rowElements.slice(-removeCount);\n      }\n\n      var errorHandlingController = this.getController(\"errorHandling\");\n      rowElements.map(rowElement => {\n        var $rowElement = $(rowElement);\n        errorHandlingController && errorHandlingController.removeErrorRow($rowElement.next());\n        $rowElement.remove();\n      });\n    },\n    _updateContent: function (tableElement, change) {\n      var $freeSpaceRowElements;\n\n      var contentElement = this._findContentElement();\n\n      var changeType = change && change.changeType;\n      var d = Deferred();\n      var contentTable = contentElement.children().first();\n\n      if (\"append\" === changeType || \"prepend\" === changeType) {\n        this._waitAsyncTemplates(change).done(() => {\n          var $tBodies = this._getBodies(tableElement);\n\n          if (1 === $tBodies.length) {\n            this._getBodies(contentTable)[\"append\" === changeType ? \"append\" : \"prepend\"]($tBodies.children());\n          } else {\n            $tBodies[\"append\" === changeType ? \"appendTo\" : \"prependTo\"](contentTable);\n          }\n\n          tableElement.remove();\n          $freeSpaceRowElements = this._getFreeSpaceRowElements(contentTable);\n          removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);\n\n          if (change.removeCount) {\n            this._removeRowsElements(contentTable, change.removeCount, changeType);\n          }\n\n          this._restoreErrorRow(contentTable);\n\n          d.resolve();\n        }).fail(d.reject);\n      } else {\n        this.callBase.apply(this, arguments).done(() => {\n          if (\"update\" === changeType) {\n            this._restoreErrorRow(contentTable);\n          }\n\n          d.resolve();\n        }).fail(d.reject);\n      }\n\n      return d.promise().done(() => {\n        this._updateBottomLoading();\n      });\n    },\n    _addVirtualRow: function ($table, isFixed, location, position) {\n      if (!position) {\n        return;\n      }\n\n      var $virtualRow = this._createEmptyRow(VIRTUAL_ROW_CLASS, isFixed, position);\n\n      $virtualRow = this._wrapRowIfNeed($table, $virtualRow);\n\n      this._appendEmptyRow($table, $virtualRow, location);\n    },\n    _updateContentItemSizes: function () {\n      var rowHeights = this._getRowHeights();\n\n      var correctedRowHeights = this._correctRowHeights(rowHeights);\n\n      this._dataController.setContentItemSizes(correctedRowHeights);\n    },\n    _updateViewportSize: function (viewportHeight, scrollTop) {\n      if (!isDefined(viewportHeight)) {\n        viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow());\n      }\n\n      this._dataController.viewportHeight(viewportHeight, scrollTop);\n    },\n    _getRowHeights: function () {\n      var _this$getController, _this$getController$i;\n\n      var isPopupEditMode = null === (_this$getController = this.getController(\"editing\")) || void 0 === _this$getController ? void 0 : null === (_this$getController$i = _this$getController.isPopupEditMode) || void 0 === _this$getController$i ? void 0 : _this$getController$i.call(_this$getController);\n\n      var rowElements = this._getRowElements(this._tableElement).toArray();\n\n      if (isPopupEditMode) {\n        rowElements = rowElements.filter(row => !$(row).hasClass(ROW_INSERTED));\n      }\n\n      return rowElements.map(row => getBoundingRect(row).height);\n    },\n    _correctRowHeights: function (rowHeights) {\n      var dataController = this._dataController;\n      var dataSource = dataController._dataSource;\n      var correctedRowHeights = [];\n      var visibleRows = dataController.getVisibleRows();\n      var itemSize = 0;\n      var firstCountableItem = true;\n      var lastLoadIndex = -1;\n\n      for (var i = 0; i < rowHeights.length; i++) {\n        var currentItem = visibleRows[i];\n\n        if (!isDefined(currentItem)) {\n          continue;\n        }\n\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\n          if (lastLoadIndex >= 0 && lastLoadIndex !== currentItem.loadIndex) {\n            correctedRowHeights.push(itemSize);\n            itemSize = 0;\n          }\n\n          lastLoadIndex = currentItem.loadIndex;\n        } else if (isItemCountableByDataSource(currentItem, dataSource)) {\n          if (firstCountableItem) {\n            firstCountableItem = false;\n          } else {\n            correctedRowHeights.push(itemSize);\n            itemSize = 0;\n          }\n        }\n\n        itemSize += rowHeights[i];\n      }\n\n      itemSize > 0 && correctedRowHeights.push(itemSize);\n      return correctedRowHeights;\n    },\n    _updateContentPosition: function (isRender) {\n      var dataController = this._dataController;\n      var rowHeight = this._rowHeight || 20;\n      dataController.viewportItemSize(rowHeight);\n\n      if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\n        if (!isRender) {\n          this._updateContentItemSizes();\n        }\n\n        var top = dataController.getContentOffset(\"begin\");\n        var bottom = dataController.getContentOffset(\"end\");\n        var $tables = this.getTableElements();\n        var $virtualRows = $tables.children(\"tbody\").children(\".\" + VIRTUAL_ROW_CLASS);\n        removeEmptyRows($virtualRows, VIRTUAL_ROW_CLASS);\n        $tables.each((index, element) => {\n          var isFixed = index > 0;\n          var prevFixed = this._isFixedTableRendering;\n          this._isFixedTableRendering = isFixed;\n\n          this._addVirtualRow($(element), isFixed, \"top\", top);\n\n          this._addVirtualRow($(element), isFixed, \"bottom\", bottom);\n\n          this._isFixedTableRendering = prevFixed;\n        });\n      }\n    },\n    _isTableLinesDisplaysCorrect: function (table) {\n      var hasColumnLines = table.find(\".\" + COLUMN_LINES_CLASS).length > 0;\n      return hasColumnLines === this.option(\"showColumnLines\");\n    },\n    _isColumnElementsEqual: function ($columns, $virtualColumns) {\n      var result = $columns.length === $virtualColumns.length;\n\n      if (result) {\n        each($columns, function (index, element) {\n          if (element.style.width !== $virtualColumns[index].style.width) {\n            result = false;\n            return result;\n          }\n        });\n      }\n\n      return result;\n    },\n    _getCellClasses: function (column) {\n      var classes = [];\n      var cssClass = column.cssClass;\n      var isExpandColumn = \"expand\" === column.command;\n      cssClass && classes.push(cssClass);\n      isExpandColumn && classes.push(this.addWidgetPrefix(GROUP_SPACE_CLASS));\n      return classes;\n    },\n    _findBottomLoadPanel: function ($contentElement) {\n      var $element = $contentElement || this.element();\n      var $bottomLoadPanel = $element && $element.find(\".\" + this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS));\n\n      if ($bottomLoadPanel && $bottomLoadPanel.length) {\n        return $bottomLoadPanel;\n      }\n    },\n    _updateBottomLoading: function () {\n      var virtualMode = isVirtualMode(this);\n      var appendMode = isAppendMode(this);\n      var showBottomLoading = !this._dataController.hasKnownLastPage() && this._dataController.isLoaded() && (virtualMode || appendMode);\n\n      var $contentElement = this._findContentElement();\n\n      var bottomLoadPanelElement = this._findBottomLoadPanel($contentElement);\n\n      if (showBottomLoading) {\n        if (!bottomLoadPanelElement) {\n          $(\"<div>\").addClass(this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS)).append(this._createComponent($(\"<div>\"), LoadIndicator).$element()).appendTo($contentElement);\n        }\n      } else if (bottomLoadPanelElement) {\n        bottomLoadPanelElement.remove();\n      }\n    },\n    _handleScroll: function (e) {\n      var legacyScrollingMode = true === this.option(LEGACY_SCROLLING_MODE);\n      var zeroTopPosition = 0 === e.scrollOffset.top;\n      var isScrollTopChanged = this._scrollTop !== e.scrollOffset.top;\n\n      if ((isScrollTopChanged || e.forceUpdateScrollPosition) && (this._hasHeight || !legacyScrollingMode && zeroTopPosition) && this._rowHeight) {\n        this._scrollTop = e.scrollOffset.top;\n\n        if (isVirtualMode(this) && false === this.option(LEGACY_SCROLLING_MODE)) {\n          this._updateContentItemSizes();\n\n          this._updateViewportSize(null, this._scrollTop);\n        }\n\n        this._dataController.setViewportPosition(e.scrollOffset.top);\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _needUpdateRowHeight: function (itemsCount) {\n      return this.callBase.apply(this, arguments) || itemsCount > 0 && isAppendMode(this) && !gridCoreUtils.isVirtualRowRendering(this);\n    },\n    _updateRowHeight: function () {\n      this.callBase.apply(this, arguments);\n\n      if (this._rowHeight) {\n        this._updateContentPosition();\n\n        var viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow());\n        var dataController = this._dataController;\n\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\n          this._updateViewportSize(viewportHeight);\n\n          dataController.updateViewport();\n        } else {\n          dataController.viewportSize(Math.ceil(viewportHeight / this._rowHeight));\n        }\n      }\n    },\n    updateFreeSpaceRowHeight: function () {\n      var result = this.callBase.apply(this, arguments);\n\n      if (result) {\n        this._updateContentPosition();\n      }\n\n      return result;\n    },\n    setLoading: function (isLoading, messageText) {\n      var dataController = this._dataController;\n      var hasBottomLoadPanel = dataController.pageIndex() > 0 && dataController.isLoaded() && !!this._findBottomLoadPanel();\n\n      if (false === this.option(LEGACY_SCROLLING_MODE) && isLoading && dataController.isViewportChanging()) {\n        return;\n      }\n\n      if (hasBottomLoadPanel) {\n        isLoading = false;\n      }\n\n      this.callBase.call(this, isLoading, messageText);\n    },\n    _resizeCore: function () {\n      var that = this;\n      var $element = that.element();\n      that.callBase();\n\n      if (that.component.$element() && !that._windowScroll && isElementInDom($element)) {\n        that._windowScroll = subscribeToExternalScrollers($element, function (scrollPos) {\n          if (!that._hasHeight && that._rowHeight) {\n            that._dataController.setViewportPosition(scrollPos);\n          }\n        }, that.component.$element());\n        that.on(\"disposing\", function () {\n          that._windowScroll.dispose();\n        });\n      }\n\n      if (false !== this.option(LEGACY_SCROLLING_MODE)) {\n        that.loadIfNeed();\n      }\n    },\n    loadIfNeed: function () {\n      var _dataController$loadI;\n\n      var dataController = this._dataController;\n      null === dataController || void 0 === dataController ? void 0 : null === (_dataController$loadI = dataController.loadIfNeed) || void 0 === _dataController$loadI ? void 0 : _dataController$loadI.call(dataController);\n    },\n    setColumnWidths: function (widths) {\n      var scrollable = this.getScrollable();\n      var $content;\n      this.callBase.apply(this, arguments);\n\n      if (\"virtual\" === this.option(\"scrolling.mode\")) {\n        $content = scrollable ? $(scrollable.content()) : this.element();\n        this.callBase(widths, $content.children(\".\" + this.addWidgetPrefix(CONTENT_CLASS)).children(\":not(.\" + this.addWidgetPrefix(TABLE_CONTENT_CLASS) + \")\"));\n      }\n    },\n    _restoreErrorRow: function () {\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        var errorHandling = this.getController(\"errorHandling\");\n        null === errorHandling || void 0 === errorHandling ? void 0 : errorHandling.removeErrorRow();\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    dispose: function () {\n      clearTimeout(this._scrollTimeoutID);\n      this.callBase();\n    }\n  };\n}();\n\nexport var virtualScrollingModule = {\n  defaultOptions: function () {\n    return {\n      scrolling: {\n        timeout: 300,\n        updateTimeout: 300,\n        minTimeout: 0,\n        renderingThreshold: 100,\n        removeInvisiblePages: true,\n        rowPageSize: 5,\n        prerenderedRowChunkSize: 1,\n        mode: \"standard\",\n        preloadEnabled: false,\n        rowRenderingMode: \"standard\",\n        loadTwoPagesOnStart: false,\n        legacyMode: false,\n        prerenderedRowCount: 1\n      }\n    };\n  },\n  extenders: {\n    dataSourceAdapter: VirtualScrollingDataSourceAdapterExtender,\n    controllers: {\n      data: function () {\n        var members = {\n          _refreshDataSource: function () {\n            var baseResult = this.callBase.apply(this, arguments) || new Deferred().resolve().promise();\n            baseResult.done(this.initVirtualRows.bind(this));\n            return baseResult;\n          },\n          _loadDataSource: function () {\n            if (this._rowsScrollController && isVirtualPaging(this)) {\n              var _this$_dataSource;\n\n              var {\n                loadPageCount: loadPageCount\n              } = isDefined(this._loadViewportParams) ? this.getLoadPageParams() : {};\n              loadPageCount >= 1 && (null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.loadPageCount(loadPageCount));\n            }\n\n            return this.callBase.apply(this, arguments);\n          },\n          getRowPageSize: function () {\n            var rowPageSize = this.option(\"scrolling.rowPageSize\");\n            var pageSize = this.pageSize();\n            return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize;\n          },\n          reload: function () {\n            var rowsScrollController = this._rowsScrollController || this._dataSource;\n            var itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();\n            var result = this.callBase.apply(this, arguments);\n            return result && result.done(() => {\n              if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\n                var rowIndexOffset = this.getRowIndexOffset();\n                var rowIndex = Math.floor(itemIndex) - rowIndexOffset;\n                var component = this.component;\n                var scrollable = component.getScrollable && component.getScrollable();\n                var isSortingOperation = this.dataSource().operationTypes().sorting;\n\n                if (scrollable && !isSortingOperation && rowIndex >= 0) {\n                  var rowElement = component.getRowElement(rowIndex);\n                  var $rowElement = rowElement && rowElement[0] && $(rowElement[0]);\n                  var top = $rowElement && $rowElement.position().top;\n                  var isChromeLatest = browser.chrome && browser.version >= 91;\n                  var allowedTopOffset = browser.mozilla || isChromeLatest ? 1 : 0;\n\n                  if (top > allowedTopOffset) {\n                    top = Math.round(top + getOuterHeight($rowElement) * (itemIndex % 1));\n                    scrollable.scrollTo({\n                      y: top\n                    });\n                  }\n                }\n              }\n            });\n          },\n          initVirtualRows: function () {\n            var virtualRowsRendering = gridCoreUtils.isVirtualRowRendering(this);\n            this._allItems = null;\n            this._loadViewportParams = null;\n\n            if (\"virtual\" !== this.option(\"scrolling.mode\") && true !== virtualRowsRendering || false === virtualRowsRendering || false !== this.option(LEGACY_SCROLLING_MODE) && !this.option(\"scrolling.rowPageSize\")) {\n              this._visibleItems = null;\n              this._rowsScrollController = null;\n              return;\n            }\n\n            var pageIndex = !isVirtualMode(this) && this.pageIndex() >= this.pageCount() ? this.pageCount() - 1 : this.pageIndex();\n            this._rowPageIndex = Math.ceil(pageIndex * this.pageSize() / this.getRowPageSize());\n            this._visibleItems = false === this.option(LEGACY_SCROLLING_MODE) ? null : [];\n            this._viewportChanging = false;\n            this._needUpdateViewportAfterLoading = false;\n\n            if (!this._rowsScrollController) {\n              this._rowsScrollController = new VirtualScrollController(this.component, this._getRowsScrollDataOptions(), true);\n\n              this._rowsScrollController.positionChanged.add(() => {\n                var _this$_dataSource2;\n\n                if (false === this.option(LEGACY_SCROLLING_MODE)) {\n                  this._viewportChanging = true;\n                  this.loadViewport();\n                  this._viewportChanging = false;\n                  return;\n                }\n\n                null === (_this$_dataSource2 = this._dataSource) || void 0 === _this$_dataSource2 ? void 0 : _this$_dataSource2.setViewportItemIndex(this._rowsScrollController.getViewportItemIndex());\n              });\n            }\n\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              this._updateLoadViewportParams();\n            }\n\n            if (this.isLoaded() && false !== this.option(LEGACY_SCROLLING_MODE)) {\n              this._rowsScrollController.load();\n            }\n          },\n          isViewportChanging: function () {\n            return this._viewportChanging;\n          },\n          _getRowsScrollDataOptions: function () {\n            var that = this;\n\n            var isItemCountable = function (item) {\n              return isItemCountableByDataSource(item, that._dataSource);\n            };\n\n            return {\n              pageSize: function () {\n                return that.getRowPageSize();\n              },\n              loadedOffset: function () {\n                var _that$_dataSource;\n\n                return isVirtualMode(that) && (null === (_that$_dataSource = that._dataSource) || void 0 === _that$_dataSource ? void 0 : _that$_dataSource.lastLoadOptions().skip) || 0;\n              },\n              loadedItemCount: function () {\n                return that._itemCount;\n              },\n              totalItemsCount: function () {\n                if (isVirtualPaging(that)) {\n                  return that.totalItemsCount();\n                }\n\n                return false === that.option(LEGACY_SCROLLING_MODE) ? that._itemCount : that._items.filter(isItemCountable).length;\n              },\n              hasKnownLastPage: function () {\n                return false === that.option(LEGACY_SCROLLING_MODE) ? that.hasKnownLastPage() : true;\n              },\n              pageIndex: function (index) {\n                if (void 0 !== index) {\n                  that._rowPageIndex = index;\n                }\n\n                return that._rowPageIndex;\n              },\n              isLoading: function () {\n                return that.isLoading();\n              },\n              pageCount: function () {\n                var pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());\n                return pageCount ? pageCount : 1;\n              },\n              load: function () {\n                if (that._rowsScrollController.pageIndex() >= this.pageCount()) {\n                  that._rowPageIndex = this.pageCount() - 1;\n\n                  that._rowsScrollController.pageIndex(that._rowPageIndex);\n                }\n\n                if (!this.items().length && this.totalItemsCount()) {\n                  return;\n                }\n\n                that._rowsScrollController.handleDataChanged(change => {\n                  change = change || {};\n                  change.changeType = change.changeType || \"refresh\";\n                  change.items = change.items || that._visibleItems;\n\n                  that._visibleItems.forEach((item, index) => {\n                    item.rowIndex = index;\n                  });\n\n                  that._fireChanged(change);\n                });\n              },\n              updateLoading: function () {},\n              itemsCount: function () {\n                return this.items(true).length;\n              },\n              correctCount: function (items, count, fromEnd) {\n                return _correctCount(items, count, fromEnd, (item, isNextAfterLast, fromEnd) => {\n                  if (item.isNewRow) {\n                    return isNextAfterLast && !fromEnd;\n                  }\n\n                  if (isNextAfterLast && fromEnd) {\n                    return !item.isNewRow;\n                  }\n\n                  return isItemCountable(item);\n                });\n              },\n              items: function (countableOnly) {\n                var result = that._items;\n\n                if (that.option(LEGACY_SCROLLING_MODE)) {\n                  var dataSource = that.dataSource();\n                  var virtualItemsCount = null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount();\n                  var begin = virtualItemsCount ? virtualItemsCount.begin : 0;\n                  var rowPageSize = that.getRowPageSize();\n                  var skip = that._rowPageIndex * rowPageSize - begin;\n                  var take = rowPageSize;\n\n                  if (skip < 0) {\n                    return [];\n                  }\n\n                  if (skip) {\n                    skip = this.correctCount(result, skip);\n                    result = result.slice(skip);\n                  }\n\n                  if (take) {\n                    take = this.correctCount(result, take);\n                    result = result.slice(0, take);\n                  }\n                }\n\n                return countableOnly ? result.filter(isItemCountable) : result;\n              },\n              viewportItems: function (items) {\n                if (items && false !== that.option(LEGACY_SCROLLING_MODE)) {\n                  that._visibleItems = items;\n                }\n\n                return that._visibleItems;\n              },\n              onChanged: function () {},\n              changingDuration: function (e) {\n                var dataSource = that.dataSource();\n\n                if (null !== dataSource && void 0 !== dataSource && dataSource.isLoading() && false !== that.option(LEGACY_SCROLLING_MODE)) {\n                  return LOAD_TIMEOUT;\n                }\n\n                return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0;\n              }\n            };\n          },\n          _updateItemsCore: function (change) {\n            var delta = this.getRowIndexDelta();\n            this.callBase.apply(this, arguments);\n\n            if (false === this.option(LEGACY_SCROLLING_MODE) && gridCoreUtils.isVirtualRowRendering(this)) {\n              if (\"update\" === change.changeType && 0 === change.rowIndices.length && change.cancelEmptyChanges) {\n                change.cancel = true;\n              }\n\n              return;\n            }\n\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              var visibleItems = this._visibleItems;\n              var isRefresh = \"refresh\" === change.changeType || change.isLiveUpdate;\n\n              if (\"append\" === change.changeType && change.items && !change.items.length) {\n                return;\n              }\n\n              if (isRefresh || \"append\" === change.changeType || \"prepend\" === change.changeType) {\n                change.cancel = true;\n                isRefresh && rowsScrollController.reset(true);\n                rowsScrollController.load();\n              } else {\n                if (\"update\" === change.changeType) {\n                  change.rowIndices.forEach((rowIndex, index) => {\n                    var changeType = change.changeTypes[index];\n                    var newItem = change.items[index];\n\n                    if (\"update\" === changeType) {\n                      visibleItems[rowIndex] = newItem;\n                    } else if (\"insert\" === changeType) {\n                      visibleItems.splice(rowIndex, 0, newItem);\n                    } else if (\"remove\" === changeType) {\n                      visibleItems.splice(rowIndex, 1);\n                    }\n                  });\n                } else {\n                  visibleItems.forEach((item, index) => {\n                    visibleItems[index] = this._items[index + delta] || visibleItems[index];\n                  });\n                  change.items = visibleItems;\n                }\n\n                updateItemIndices(visibleItems);\n              }\n            }\n          },\n          _updateLoadViewportParams: function () {\n            var viewportParams = this._rowsScrollController.getViewportParams();\n\n            var pageSize = this.pageSize();\n\n            if (viewportParams && !isVirtualPaging(this) && pageSize > 0) {\n              var pageOffset = this.pageIndex() * pageSize;\n              viewportParams.skip += pageOffset;\n            }\n\n            this._loadViewportParams = viewportParams;\n          },\n          _processItems: function (items) {\n            var newItems = this.callBase.apply(this, arguments);\n\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              var _dataSource$lastLoadO;\n\n              var dataSource = this._dataSource;\n              var currentIndex = null !== (_dataSource$lastLoadO = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().skip) && void 0 !== _dataSource$lastLoadO ? _dataSource$lastLoadO : 0;\n              var prevCountable;\n              var prevRowType;\n              var isPrevRowNew;\n              var wasCountableItem = false;\n              newItems.forEach(item => {\n                var rowType = item.rowType;\n                var itemCountable = isItemCountableByDataSource(item, dataSource);\n                var isNextGroupItem = \"group\" === rowType && (prevCountable || itemCountable || \"group\" !== prevRowType && currentIndex > 0);\n                var isNextDataItem = \"data\" === rowType && itemCountable && (prevCountable || \"group\" !== prevRowType);\n\n                if (!item.isNewRow && isDefined(prevCountable)) {\n                  var isPrevNewRowFirst = isPrevRowNew && !wasCountableItem;\n\n                  if ((isNextGroupItem || isNextDataItem) && !isPrevNewRowFirst) {\n                    currentIndex++;\n                  }\n                }\n\n                if (isNextGroupItem || isNextDataItem) {\n                  wasCountableItem = true;\n                }\n\n                item.loadIndex = currentIndex;\n                prevCountable = itemCountable;\n                prevRowType = rowType;\n                isPrevRowNew = item.isNewRow;\n              });\n            }\n\n            return newItems;\n          },\n          _afterProcessItems: function (items) {\n            this._itemCount = items.filter(item => isItemCountableByDataSource(item, this._dataSource)).length;\n\n            if (isDefined(this._loadViewportParams)) {\n              this._updateLoadViewportParams();\n\n              var result = items;\n              this._allItems = items;\n\n              if (items.length) {\n                var {\n                  skipForCurrentPage: skipForCurrentPage\n                } = this.getLoadPageParams(true);\n                var skip = items[0].loadIndex + skipForCurrentPage;\n                var take = this._loadViewportParams.take;\n                result = items.filter(it => {\n                  var isNewRowOnStart = it.isNewRow && it.loadIndex >= skip - 1;\n                  var isNewRowInEmptyData = it.isNewRow && it.loadIndex === skip && 0 === take;\n                  var isLoadIndexGreaterStart = it.loadIndex >= skip || isNewRowOnStart;\n                  var isLoadIndexLessEnd = it.loadIndex < skip + take || isNewRowInEmptyData;\n                  return isLoadIndexGreaterStart && isLoadIndexLessEnd;\n                });\n              }\n\n              return result;\n            }\n\n            return this.callBase.apply(this, arguments);\n          },\n          _applyChange: function (change) {\n            var that = this;\n            var items = change.items;\n            var changeType = change.changeType;\n            var removeCount = change.removeCount;\n\n            if (removeCount) {\n              var fromEnd = \"prepend\" === changeType;\n              removeCount = _correctCount(that._items, removeCount, fromEnd, function (item, isNextAfterLast) {\n                return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast);\n              });\n              change.removeCount = removeCount;\n            }\n\n            switch (changeType) {\n              case \"prepend\":\n                that._items.unshift.apply(that._items, items);\n\n                if (removeCount) {\n                  that._items.splice(-removeCount);\n                }\n\n                break;\n\n              case \"append\":\n                that._items.push.apply(that._items, items);\n\n                if (removeCount) {\n                  that._items.splice(0, removeCount);\n                }\n\n                break;\n\n              default:\n                that.callBase(change);\n            }\n          },\n          items: function (allItems) {\n            return allItems ? this._allItems || this._items : this._visibleItems || this._items;\n          },\n          getRowIndexDelta: function () {\n            var delta = 0;\n\n            if (this.option(LEGACY_SCROLLING_MODE)) {\n              var visibleItems = this._visibleItems;\n\n              if (visibleItems && visibleItems[0]) {\n                delta = this._items.indexOf(visibleItems[0]);\n              }\n            }\n\n            return delta < 0 ? 0 : delta;\n          },\n          getRowIndexOffset: function (byLoadedRows) {\n            var offset = 0;\n            var dataSource = this.dataSource();\n            var rowsScrollController = this._rowsScrollController;\n            var newMode = false === this.option(LEGACY_SCROLLING_MODE);\n            var virtualPaging = isVirtualPaging(this);\n\n            if (rowsScrollController && !byLoadedRows) {\n              if (newMode && isDefined(this._loadViewportParams)) {\n                var {\n                  skipForCurrentPage: skipForCurrentPage,\n                  pageIndex: pageIndex\n                } = this.getLoadPageParams(true);\n                var items = this.items(true);\n                offset = virtualPaging ? pageIndex * this.pageSize() : 0;\n\n                if (items.length) {\n                  var firstLoadIndex = items[0].loadIndex;\n                  offset += items.filter(item => item.loadIndex < firstLoadIndex + skipForCurrentPage).length;\n                }\n              } else {\n                offset = rowsScrollController.beginPageIndex() * rowsScrollController.pageSize();\n              }\n            } else if (virtualPaging && newMode && dataSource) {\n              var _dataSource$lastLoadO2;\n\n              offset = null !== (_dataSource$lastLoadO2 = dataSource.lastLoadOptions().skip) && void 0 !== _dataSource$lastLoadO2 ? _dataSource$lastLoadO2 : 0;\n            } else if (isVirtualMode(this) && dataSource) {\n              offset = dataSource.beginPageIndex() * dataSource.pageSize();\n            }\n\n            return offset;\n          },\n          getDataIndex: function (change) {\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              return this.getRowIndexOffset(true);\n            }\n\n            return this.callBase.apply(this, arguments);\n          },\n          viewportSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportSize.apply(rowsScrollController, arguments);\n\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              return result;\n            }\n\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportSize.apply(dataSource, arguments);\n          },\n          viewportHeight: function (height, scrollTop) {\n            var _this$_rowsScrollCont;\n\n            null === (_this$_rowsScrollCont = this._rowsScrollController) || void 0 === _this$_rowsScrollCont ? void 0 : _this$_rowsScrollCont.viewportHeight(height, scrollTop);\n          },\n          viewportItemSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);\n\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              return result;\n            }\n\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportItemSize.apply(dataSource, arguments);\n          },\n          setViewportPosition: function () {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            this._isPaging = false;\n\n            if (rowsScrollController) {\n              rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments);\n            } else {\n              null === dataSource || void 0 === dataSource ? void 0 : dataSource.setViewportPosition.apply(dataSource, arguments);\n            }\n          },\n          setContentItemSizes: function (sizes) {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.setContentItemSizes(sizes);\n\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              return result;\n            }\n\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.setContentItemSizes(sizes);\n          },\n          getPreloadedRowCount: function () {\n            var preloadCount = this.option(\"scrolling.preloadedRowCount\");\n            var preloadEnabled = this.option(\"scrolling.preloadEnabled\");\n\n            if (isDefined(preloadCount)) {\n              return preloadCount;\n            }\n\n            var viewportSize = this.viewportSize();\n            return preloadEnabled ? 2 * viewportSize : viewportSize;\n          },\n          getLoadPageParams: function (byLoadedPage) {\n            var _this$_dataSource3, _this$_dataSource4;\n\n            var pageSize = this.pageSize();\n            var viewportParams = this._loadViewportParams;\n            var lastLoadOptions = null === (_this$_dataSource3 = this._dataSource) || void 0 === _this$_dataSource3 ? void 0 : _this$_dataSource3.lastLoadOptions();\n            var loadedPageIndex = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.pageIndex) || 0;\n            var loadedTake = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.take) || 0;\n\n            var isScrollingBack = this._rowsScrollController.isScrollingBack();\n\n            var topPreloadCount = isScrollingBack ? this.getPreloadedRowCount() : 0;\n            var bottomPreloadCount = isScrollingBack ? 0 : this.getPreloadedRowCount();\n            var totalCountCorrection = (null === (_this$_dataSource4 = this._dataSource) || void 0 === _this$_dataSource4 ? void 0 : _this$_dataSource4.totalCountCorrection()) || 0;\n            var skipWithPreload = Math.max(0, viewportParams.skip - topPreloadCount);\n            var pageIndex = byLoadedPage ? loadedPageIndex : Math.floor(pageSize ? skipWithPreload / pageSize : 0);\n            var pageOffset = pageIndex * pageSize;\n            var skipForCurrentPage = viewportParams.skip - pageOffset;\n            var loadingTake = viewportParams.take + skipForCurrentPage + bottomPreloadCount - totalCountCorrection;\n            var take = byLoadedPage ? loadedTake : loadingTake;\n            var loadPageCount = Math.ceil(pageSize ? take / pageSize : 0);\n            return {\n              pageIndex: pageIndex,\n              loadPageCount: Math.max(1, loadPageCount),\n              skipForCurrentPage: Math.max(0, skipForCurrentPage)\n            };\n          },\n          _updateVisiblePageIndex: function (currentPageIndex) {\n            if (!this._rowsScrollController) {\n              return;\n            }\n\n            if (isDefined(currentPageIndex)) {\n              this._silentOption(VISIBLE_PAGE_INDEX, currentPageIndex);\n\n              this.pageChanged.fire();\n              return;\n            }\n\n            var viewPortItemIndex = this._rowsScrollController.getViewportItemIndex();\n\n            var newPageIndex = Math.floor(viewPortItemIndex / this.pageSize());\n\n            if (this.pageIndex() !== newPageIndex) {\n              this._silentOption(VISIBLE_PAGE_INDEX, newPageIndex);\n\n              this.updateItems({\n                changeType: \"pageIndex\"\n              });\n            }\n          },\n          _getChangedLoadParams: function () {\n            var loadedPageParams = this.getLoadPageParams(true);\n            var {\n              pageIndex: pageIndex,\n              loadPageCount: loadPageCount\n            } = this.getLoadPageParams();\n\n            var pageIndexIsValid = this._pageIndexIsValid(pageIndex);\n\n            var result = null;\n\n            if (!this._isLoading && pageIndexIsValid && (pageIndex !== loadedPageParams.pageIndex || loadPageCount !== loadedPageParams.loadPageCount)) {\n              result = {\n                pageIndex: pageIndex,\n                loadPageCount: loadPageCount\n              };\n            }\n\n            return result;\n          },\n          _pageIndexIsValid: function (pageIndex) {\n            var result = true;\n\n            if (isAppendMode(this) && this.hasKnownLastPage() || isVirtualMode(this)) {\n              result = pageIndex * this.pageSize() < this.totalItemsCount();\n            }\n\n            return result;\n          },\n          _loadItems: function (checkLoading, viewportIsFilled) {\n            var _dataSourceAdapter$lo, _dataSourceAdapter$pa;\n\n            var virtualPaging = isVirtualPaging(this);\n            var dataSourceAdapter = this._dataSource;\n\n            var changedParams = this._getChangedLoadParams();\n\n            var currentLoadPageCount = null !== (_dataSourceAdapter$lo = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.loadPageCount()) && void 0 !== _dataSourceAdapter$lo ? _dataSourceAdapter$lo : 0;\n            var lastRequiredItemCount = this.pageSize() * currentLoadPageCount;\n            var currentPageIndex = null !== (_dataSourceAdapter$pa = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.pageIndex()) && void 0 !== _dataSourceAdapter$pa ? _dataSourceAdapter$pa : 0;\n            var pageIndexNotChanged = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) === currentPageIndex;\n            var allLoadedInAppendMode = isAppendMode(this) && this.totalItemsCount() < lastRequiredItemCount;\n            var isRepaintMode = \"repaint\" === this.option(\"editing.refreshMode\");\n            var pageIndexIncreased = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) > currentPageIndex;\n            var result = false;\n\n            if (!dataSourceAdapter || virtualPaging && checkLoading && (isRepaintMode && viewportIsFilled || pageIndexIncreased || pageIndexNotChanged && allLoadedInAppendMode)) {\n              return result;\n            }\n\n            if (virtualPaging && this._isLoading) {\n              this._needUpdateViewportAfterLoading = true;\n            }\n\n            if (virtualPaging && changedParams) {\n              result = true;\n              dataSourceAdapter.pageIndex(changedParams.pageIndex);\n              dataSourceAdapter.loadPageCount(changedParams.loadPageCount);\n              this._repaintChangesOnly = true;\n              this._needUpdateDimensions = true;\n              var viewportChanging = this._viewportChanging;\n              this.load().always(() => {\n                this._repaintChangesOnly = void 0;\n                this._needUpdateDimensions = void 0;\n              }).done(() => {\n                var isLastPage = this.pageCount() > 0 && this.pageIndex() === this.pageCount() - 1;\n                (viewportChanging || isLastPage) && this._updateVisiblePageIndex();\n\n                if (this._needUpdateViewportAfterLoading) {\n                  this._needUpdateViewportAfterLoading = false;\n                  this.loadViewport({\n                    checkLoadedParamsOnly: true\n                  });\n                }\n              });\n            }\n\n            return result;\n          },\n          loadViewport: function (params) {\n            var {\n              checkLoadedParamsOnly: checkLoadedParamsOnly,\n              checkLoading: checkLoading,\n              viewportIsNotFilled: viewportIsNotFilled\n            } = null !== params && void 0 !== params ? params : {};\n            var virtualPaging = isVirtualPaging(this);\n\n            if (virtualPaging || gridCoreUtils.isVirtualRowRendering(this)) {\n              this._updateLoadViewportParams();\n\n              var loadingItemsStarted = this._loadItems(checkLoading, !viewportIsNotFilled);\n\n              if (!loadingItemsStarted && !(this._isLoading && checkLoading) && !checkLoadedParamsOnly) {\n                this.updateItems({\n                  repaintChangesOnly: true,\n                  needUpdateDimensions: true,\n                  useProcessedItemsCache: true,\n                  cancelEmptyChanges: true\n                });\n              }\n            }\n          },\n          updateViewport: function () {\n            var _this$_loadViewportPa, _this$_loadViewportPa2;\n\n            var viewportSize = this.viewportSize();\n            var itemCount = this.items().length;\n            var viewportIsNotFilled = viewportSize > itemCount;\n            var currentTake = null !== (_this$_loadViewportPa = null === (_this$_loadViewportPa2 = this._loadViewportParams) || void 0 === _this$_loadViewportPa2 ? void 0 : _this$_loadViewportPa2.take) && void 0 !== _this$_loadViewportPa ? _this$_loadViewportPa : 0;\n            var rowsScrollController = this._rowsScrollController;\n            var newTake = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.getViewportParams().take;\n            (viewportIsNotFilled || currentTake < newTake) && !this._isPaging && itemCount && this.loadViewport({\n              checkLoading: true,\n              viewportIsNotFilled: viewportIsNotFilled\n            });\n          },\n          loadIfNeed: function () {\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              return;\n            }\n\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.loadIfNeed();\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.loadIfNeed();\n          },\n          getItemSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getItemSize.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getItemSize.apply(dataSource, arguments);\n          },\n          getItemSizes: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getItemSizes.apply(dataSource, arguments);\n          },\n          getContentOffset: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getContentOffset.apply(dataSource, arguments);\n          },\n          refresh: function (options) {\n            var dataSource = this._dataSource;\n\n            if (dataSource && options && options.load && isAppendMode(this)) {\n              dataSource.resetCurrentTotalCount();\n            }\n\n            return this.callBase.apply(this, arguments);\n          },\n          dispose: function () {\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.dispose();\n            this.callBase.apply(this, arguments);\n          },\n          topItemIndex: function () {\n            var _this$_loadViewportPa3;\n\n            return null === (_this$_loadViewportPa3 = this._loadViewportParams) || void 0 === _this$_loadViewportPa3 ? void 0 : _this$_loadViewportPa3.skip;\n          },\n          bottomItemIndex: function () {\n            var viewportParams = this._loadViewportParams;\n            return viewportParams && viewportParams.skip + viewportParams.take;\n          },\n          virtualItemsCount: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.virtualItemsCount.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount.apply(dataSource, arguments);\n          },\n          pageIndex: function (_pageIndex) {\n            var virtualPaging = isVirtualPaging(this);\n            var rowsScrollController = this._rowsScrollController;\n\n            if (false === this.option(LEGACY_SCROLLING_MODE) && virtualPaging && rowsScrollController) {\n              if (void 0 === _pageIndex) {\n                var _this$option;\n\n                return null !== (_this$option = this.option(VISIBLE_PAGE_INDEX)) && void 0 !== _this$option ? _this$option : 0;\n              }\n            }\n\n            return this.callBase.apply(this, arguments);\n          },\n          _fireChanged: function (e) {\n            this.callBase.apply(this, arguments);\n            var {\n              operationTypes: operationTypes\n            } = e;\n\n            if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this) && operationTypes) {\n              var {\n                fullReload: fullReload,\n                pageIndex: pageIndex\n              } = operationTypes;\n\n              if (e.isDataChanged && !fullReload && pageIndex) {\n                this._updateVisiblePageIndex(this._dataSource.pageIndex());\n              }\n            }\n          },\n          _getPagingOptionValue: function (optionName) {\n            var result = this.callBase.apply(this, arguments);\n\n            if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\n              result = this[optionName]();\n            }\n\n            return result;\n          },\n          isEmpty: function () {\n            return false === this.option(LEGACY_SCROLLING_MODE) ? !this.items(true).length : this.callBase(this, arguments);\n          },\n          isLastPageLoaded: function () {\n            var result = false;\n\n            if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\n              var {\n                pageIndex: pageIndex,\n                loadPageCount: loadPageCount\n              } = this.getLoadPageParams(true);\n              var pageCount = this.pageCount();\n              result = pageIndex + loadPageCount >= pageCount;\n            } else {\n              result = this.callBase.apply(this, arguments);\n            }\n\n            return result;\n          },\n          reset: function () {\n            this._itemCount = 0;\n            this._allItems = null;\n            this.callBase.apply(this, arguments);\n          },\n          _applyFilter: function () {\n            var _this$_dataSource5;\n\n            null === (_this$_dataSource5 = this._dataSource) || void 0 === _this$_dataSource5 ? void 0 : _this$_dataSource5.loadPageCount(1);\n            this.callBase.apply(this, arguments);\n          }\n        };\n        gridCoreUtils.proxyMethod(members, \"getVirtualContentSize\");\n        gridCoreUtils.proxyMethod(members, \"setViewportItemIndex\");\n        return members;\n      }(),\n      resizing: {\n        _updateMasterDataGridCore: function (masterDataGrid) {\n          return when(this.callBase.apply(this, arguments)).done(masterDataGridUpdated => {\n            var isNewVirtualMode = isVirtualMode(masterDataGrid) && false === masterDataGrid.option(LEGACY_SCROLLING_MODE);\n\n            if (!masterDataGridUpdated && isNewVirtualMode) {\n              var scrollable = masterDataGrid.getScrollable();\n\n              if (scrollable) {\n                masterDataGrid.updateDimensions();\n              }\n            }\n          });\n        },\n        resize: function () {\n          var that = this;\n          var callBase = that.callBase;\n          var result;\n\n          if (isVirtualMode(that) || gridCoreUtils.isVirtualRowRendering(that)) {\n            clearTimeout(that._resizeTimeout);\n            var diff = new Date() - that._lastTime;\n            var updateTimeout = that.option(\"scrolling.updateTimeout\");\n\n            if (that._lastTime && diff < updateTimeout) {\n              result = new Deferred();\n              that._resizeTimeout = setTimeout(function () {\n                callBase.apply(that).done(result.resolve).fail(result.reject);\n                that._lastTime = new Date();\n              }, updateTimeout);\n              that._lastTime = new Date();\n            } else {\n              result = callBase.apply(that);\n\n              if (that._dataController.isLoaded()) {\n                that._lastTime = new Date();\n              }\n            }\n          } else {\n            result = callBase.apply(that);\n          }\n\n          return result;\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._resizeTimeout);\n        }\n      }\n    },\n    views: {\n      rowsView: VirtualScrollingRowsViewExtender\n    }\n  }\n};","map":{"version":3,"names":["getOuterHeight","$","getWindow","VirtualScrollController","subscribeToExternalScrollers","gridCoreUtils","each","when","Deferred","LoadIndicator","browser","getBoundingRect","isElementInDom","isDefined","BOTTOM_LOAD_PANEL_CLASS","TABLE_CONTENT_CLASS","GROUP_SPACE_CLASS","CONTENT_CLASS","FREESPACE_CLASS","COLUMN_LINES_CLASS","VIRTUAL_ROW_CLASS","ROW_INSERTED","SCROLLING_MODE_INFINITE","SCROLLING_MODE_VIRTUAL","LOAD_TIMEOUT","LEGACY_SCROLLING_MODE","VISIBLE_PAGE_INDEX","isVirtualMode","that","option","isAppendMode","isVirtualPaging","_correctCount","items","count","fromEnd","isItemCountableFunc","i","item","length","isItemCountableByDataSource","dataSource","rowType","isNewRow","isGroupItemCountable","data","updateItemIndices","forEach","index","rowIndex","VirtualScrollingDataSourceAdapterExtender","_updateLoading","beginPageIndex","_virtualScrollController","viewportSize","getViewportItemIndex","pageSize","itemsCount","_dataSource","isLoading","_isLoading","loadingChanged","fire","result","init","callBase","apply","arguments","_items","_totalCount","_isLoaded","_loadPageCount","component","_getVirtualScrollDataOptions","totalItemsCount","hasKnownLastPage","pageIndex","isCustomLoading","pageCount","load","updateLoading","viewportItems","onChanged","e","changed","changingDuration","_renderTime","_handleLoadingChanged","_isLoadingAll","_startLoadTime","Date","_handleLoadError","_handleDataChanged","slice","_dataSourceTotalCount","bind","handleDataChanged","_customizeRemoteOperations","options","operationTypes","newMode","renderAsync","reload","skip","delay","isBase","loadOptions","isLoaded","resetPagesCache","isLiveUpdate","reset","_changeRowExpandCore","virtualScrollController","d","done","r","delayDeferred","getDelayDeferred","resolve","fail","reject","refresh","storeLoadOptions","paginate","_totalCountCorrection","dispose","loadPageCount","_handleDataLoading","takeIsDefined","take","_loadPageSize","name","VirtualScrollingRowsViewExtender","removeEmptyRows","$emptyRows","className","tBodies","toArray","map","row","parent","get","filter","rowCount","eq","remove","_dataController$state","dataController","getController","pageChanged","add","scrollTop","_scrollTop","scrollToPage","updateViewport","dataSourceChanged","_scrollToCurrentPageOnResize","stateLoaded","resizeHandler","resizeCompleted","_dataController","scrollPosition","itemSize","getItemSize","itemSizes","getItemSizes","itemIndex","scrollTo","y","x","_scrollLeft","renderDelayedTemplates","_waitAsyncTemplates","_updateContentPosition","_renderCore","startRenderTime","deferred","itemCount","isVirtualRowRendering","_getRowElements","tableElement","$rows","not","_removeRowsElements","contentTable","removeCount","changeType","rowElements","errorHandlingController","rowElement","$rowElement","removeErrorRow","next","_updateContent","change","$freeSpaceRowElements","contentElement","_findContentElement","children","first","$tBodies","_getBodies","_getFreeSpaceRowElements","_restoreErrorRow","promise","_updateBottomLoading","_addVirtualRow","$table","isFixed","location","position","$virtualRow","_createEmptyRow","_wrapRowIfNeed","_appendEmptyRow","_updateContentItemSizes","rowHeights","_getRowHeights","correctedRowHeights","_correctRowHeights","setContentItemSizes","_updateViewportSize","viewportHeight","_hasHeight","element","_this$getController","_this$getController$i","isPopupEditMode","call","_tableElement","hasClass","height","visibleRows","getVisibleRows","firstCountableItem","lastLoadIndex","currentItem","loadIndex","push","isRender","rowHeight","_rowHeight","viewportItemSize","top","getContentOffset","bottom","$tables","getTableElements","$virtualRows","prevFixed","_isFixedTableRendering","_isTableLinesDisplaysCorrect","table","hasColumnLines","find","_isColumnElementsEqual","$columns","$virtualColumns","style","width","_getCellClasses","column","classes","cssClass","isExpandColumn","command","addWidgetPrefix","_findBottomLoadPanel","$contentElement","$element","$bottomLoadPanel","virtualMode","appendMode","showBottomLoading","bottomLoadPanelElement","addClass","append","_createComponent","appendTo","_handleScroll","legacyScrollingMode","zeroTopPosition","scrollOffset","isScrollTopChanged","forceUpdateScrollPosition","setViewportPosition","_needUpdateRowHeight","_updateRowHeight","Math","ceil","updateFreeSpaceRowHeight","setLoading","messageText","hasBottomLoadPanel","isViewportChanging","_resizeCore","_windowScroll","scrollPos","on","loadIfNeed","_dataController$loadI","setColumnWidths","widths","scrollable","getScrollable","$content","content","errorHandling","clearTimeout","_scrollTimeoutID","virtualScrollingModule","defaultOptions","scrolling","timeout","updateTimeout","minTimeout","renderingThreshold","removeInvisiblePages","rowPageSize","prerenderedRowChunkSize","mode","preloadEnabled","rowRenderingMode","loadTwoPagesOnStart","legacyMode","prerenderedRowCount","extenders","dataSourceAdapter","controllers","members","_refreshDataSource","baseResult","initVirtualRows","_loadDataSource","_rowsScrollController","_this$_dataSource","_loadViewportParams","getLoadPageParams","getRowPageSize","rowsScrollController","getItemIndexByPosition","rowIndexOffset","getRowIndexOffset","floor","isSortingOperation","sorting","getRowElement","isChromeLatest","chrome","version","allowedTopOffset","mozilla","round","virtualRowsRendering","_allItems","_visibleItems","_rowPageIndex","_viewportChanging","_needUpdateViewportAfterLoading","_getRowsScrollDataOptions","positionChanged","_this$_dataSource2","loadViewport","setViewportItemIndex","_updateLoadViewportParams","isItemCountable","loadedOffset","_that$_dataSource","lastLoadOptions","loadedItemCount","_itemCount","_fireChanged","correctCount","isNextAfterLast","countableOnly","virtualItemsCount","begin","_updateItemsCore","delta","getRowIndexDelta","rowIndices","cancelEmptyChanges","cancel","visibleItems","isRefresh","changeTypes","newItem","splice","viewportParams","getViewportParams","pageOffset","_processItems","newItems","_dataSource$lastLoadO","currentIndex","prevCountable","prevRowType","isPrevRowNew","wasCountableItem","itemCountable","isNextGroupItem","isNextDataItem","isPrevNewRowFirst","_afterProcessItems","skipForCurrentPage","it","isNewRowOnStart","isNewRowInEmptyData","isLoadIndexGreaterStart","isLoadIndexLessEnd","_applyChange","unshift","allItems","indexOf","byLoadedRows","offset","virtualPaging","firstLoadIndex","_dataSource$lastLoadO2","getDataIndex","_this$_rowsScrollCont","_isPaging","sizes","getPreloadedRowCount","preloadCount","byLoadedPage","_this$_dataSource3","_this$_dataSource4","loadedPageIndex","loadedTake","isScrollingBack","topPreloadCount","bottomPreloadCount","totalCountCorrection","skipWithPreload","max","loadingTake","_updateVisiblePageIndex","currentPageIndex","_silentOption","viewPortItemIndex","newPageIndex","updateItems","_getChangedLoadParams","loadedPageParams","pageIndexIsValid","_pageIndexIsValid","_loadItems","checkLoading","viewportIsFilled","_dataSourceAdapter$lo","_dataSourceAdapter$pa","changedParams","currentLoadPageCount","lastRequiredItemCount","pageIndexNotChanged","allLoadedInAppendMode","isRepaintMode","pageIndexIncreased","_repaintChangesOnly","_needUpdateDimensions","viewportChanging","always","isLastPage","checkLoadedParamsOnly","params","viewportIsNotFilled","loadingItemsStarted","repaintChangesOnly","needUpdateDimensions","useProcessedItemsCache","_this$_loadViewportPa","_this$_loadViewportPa2","currentTake","newTake","resetCurrentTotalCount","topItemIndex","_this$_loadViewportPa3","bottomItemIndex","_pageIndex","_this$option","fullReload","isDataChanged","_getPagingOptionValue","optionName","isEmpty","isLastPageLoaded","_applyFilter","_this$_dataSource5","proxyMethod","resizing","_updateMasterDataGridCore","masterDataGrid","masterDataGridUpdated","isNewVirtualMode","updateDimensions","resize","_resizeTimeout","diff","_lastTime","setTimeout","views","rowsView"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_scrolling.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_scrolling.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getOuterHeight\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    getWindow\r\n} from \"../../core/utils/window\";\r\nimport {\r\n    VirtualScrollController,\r\n    subscribeToExternalScrollers\r\n} from \"./ui.grid_core.virtual_scrolling_core\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport LoadIndicator from \"../load_indicator\";\r\nimport browser from \"../../core/utils/browser\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../core/utils/position\";\r\nimport {\r\n    isElementInDom\r\n} from \"../../core/utils/dom\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nvar BOTTOM_LOAD_PANEL_CLASS = \"bottom-load-panel\";\r\nvar TABLE_CONTENT_CLASS = \"table-content\";\r\nvar GROUP_SPACE_CLASS = \"group-space\";\r\nvar CONTENT_CLASS = \"content\";\r\nvar FREESPACE_CLASS = \"dx-freespace-row\";\r\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\r\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\r\nvar ROW_INSERTED = \"dx-row-inserted\";\r\nvar SCROLLING_MODE_INFINITE = \"infinite\";\r\nvar SCROLLING_MODE_VIRTUAL = \"virtual\";\r\nvar LOAD_TIMEOUT = 300;\r\nvar LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\r\nvar VISIBLE_PAGE_INDEX = \"paging.pageIndex\";\r\nvar isVirtualMode = function(that) {\r\n    return that.option(\"scrolling.mode\") === SCROLLING_MODE_VIRTUAL\r\n};\r\nvar isAppendMode = function(that) {\r\n    return that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE\r\n};\r\nvar isVirtualPaging = function(that) {\r\n    return isVirtualMode(that) || isAppendMode(that)\r\n};\r\nvar _correctCount = function(items, count, fromEnd, isItemCountableFunc) {\r\n    for (var i = 0; i < count + 1; i++) {\r\n        var item = items[fromEnd ? items.length - 1 - i : i];\r\n        if (item && !isItemCountableFunc(item, i === count, fromEnd)) {\r\n            count++\r\n        }\r\n    }\r\n    return count\r\n};\r\nvar isItemCountableByDataSource = function(item, dataSource) {\r\n    return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && dataSource.isGroupItemCountable(item.data)\r\n};\r\nvar updateItemIndices = function(items) {\r\n    items.forEach((function(item, index) {\r\n        item.rowIndex = index\r\n    }));\r\n    return items\r\n};\r\nvar VirtualScrollingDataSourceAdapterExtender = function() {\r\n    var _updateLoading = function(that) {\r\n        var beginPageIndex = that._virtualScrollController.beginPageIndex(-1);\r\n        if (isVirtualMode(that)) {\r\n            if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {\r\n                if (!that._isLoading) {\r\n                    that._isLoading = true;\r\n                    that.loadingChanged.fire(true)\r\n                }\r\n            } else if (that._isLoading) {\r\n                that._isLoading = false;\r\n                that.loadingChanged.fire(false)\r\n            }\r\n        }\r\n    };\r\n    var result = {\r\n        init: function() {\r\n            this.callBase.apply(this, arguments);\r\n            this._items = [];\r\n            this._totalCount = -1;\r\n            this._isLoaded = true;\r\n            this._loadPageCount = 1;\r\n            this._virtualScrollController = new VirtualScrollController(this.component, this._getVirtualScrollDataOptions())\r\n        },\r\n        _getVirtualScrollDataOptions: function() {\r\n            var that = this;\r\n            return {\r\n                pageSize: function() {\r\n                    return that.pageSize()\r\n                },\r\n                totalItemsCount: function() {\r\n                    return that.totalItemsCount()\r\n                },\r\n                hasKnownLastPage: function() {\r\n                    return that.hasKnownLastPage()\r\n                },\r\n                pageIndex: function(index) {\r\n                    return that._dataSource.pageIndex(index)\r\n                },\r\n                isLoading: function() {\r\n                    return that._dataSource.isLoading() && !that.isCustomLoading()\r\n                },\r\n                pageCount: function() {\r\n                    return that.pageCount()\r\n                },\r\n                load: function() {\r\n                    return that._dataSource.load()\r\n                },\r\n                updateLoading: function() {\r\n                    _updateLoading(that)\r\n                },\r\n                itemsCount: function() {\r\n                    return that.itemsCount(true)\r\n                },\r\n                items: function() {\r\n                    return that._dataSource.items()\r\n                },\r\n                viewportItems: function(items) {\r\n                    if (items) {\r\n                        that._items = items\r\n                    }\r\n                    return that._items\r\n                },\r\n                onChanged: function(e) {\r\n                    that.changed.fire(e)\r\n                },\r\n                changingDuration: function(e) {\r\n                    if (that.isLoading()) {\r\n                        return LOAD_TIMEOUT\r\n                    }\r\n                    return that._renderTime || 0\r\n                }\r\n            }\r\n        },\r\n        _handleLoadingChanged: function(isLoading) {\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                this.callBase.apply(this, arguments);\r\n                return\r\n            }\r\n            if (!isVirtualMode(this) || this._isLoadingAll) {\r\n                this._isLoading = isLoading;\r\n                this.callBase.apply(this, arguments)\r\n            }\r\n            if (isLoading) {\r\n                this._startLoadTime = new Date\r\n            } else {\r\n                this._startLoadTime = void 0\r\n            }\r\n        },\r\n        _handleLoadError: function() {\r\n            if (false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                this._isLoading = false;\r\n                this.loadingChanged.fire(false)\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _handleDataChanged: function(e) {\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                this._items = this._dataSource.items().slice();\r\n                this._totalCount = this._dataSourceTotalCount(true);\r\n                this.callBase.apply(this, arguments);\r\n                return\r\n            }\r\n            var callBase = this.callBase.bind(this);\r\n            this._virtualScrollController.handleDataChanged(callBase, e)\r\n        },\r\n        _customizeRemoteOperations: function(options, operationTypes) {\r\n            var newMode = false === this.option(LEGACY_SCROLLING_MODE);\r\n            var renderAsync = this.option(\"scrolling.renderAsync\");\r\n            if (!isDefined(renderAsync)) {\r\n                renderAsync = this._renderTime >= this.option(\"scrolling.renderingThreshold\")\r\n            }\r\n            if ((isVirtualMode(this) || isAppendMode(this) && newMode) && !operationTypes.reload && (operationTypes.skip || newMode) && !renderAsync) {\r\n                options.delay = void 0\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        items: function() {\r\n            return this._items\r\n        },\r\n        _dataSourceTotalCount: function(isBase) {\r\n            return false === this.option(LEGACY_SCROLLING_MODE) && isVirtualMode(this) && !isBase ? this._totalCount : this.callBase()\r\n        },\r\n        itemsCount: function(isBase) {\r\n            if (isBase || false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                return this.callBase()\r\n            }\r\n            return this._virtualScrollController.itemsCount()\r\n        },\r\n        load: function(loadOptions) {\r\n            if (false === this.option(LEGACY_SCROLLING_MODE) || loadOptions) {\r\n                return this.callBase(loadOptions)\r\n            }\r\n            return this._virtualScrollController.load()\r\n        },\r\n        isLoading: function() {\r\n            return false === this.option(LEGACY_SCROLLING_MODE) ? this._dataSource.isLoading() : this._isLoading\r\n        },\r\n        isLoaded: function() {\r\n            return this._dataSource.isLoaded() && this._isLoaded\r\n        },\r\n        resetPagesCache: function(isLiveUpdate) {\r\n            if (!isLiveUpdate) {\r\n                this._virtualScrollController.reset(true)\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _changeRowExpandCore: function() {\r\n            var result = this.callBase.apply(this, arguments);\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                return result\r\n            }\r\n            this.resetPagesCache();\r\n            _updateLoading(this);\r\n            return result\r\n        },\r\n        reload: function() {\r\n            this._dataSource.pageIndex(this.pageIndex());\r\n            var virtualScrollController = this._virtualScrollController;\r\n            if (false !== this.option(LEGACY_SCROLLING_MODE) && virtualScrollController) {\r\n                var d = new Deferred;\r\n                this.callBase.apply(this, arguments).done((function(r) {\r\n                    var delayDeferred = virtualScrollController.getDelayDeferred();\r\n                    if (delayDeferred) {\r\n                        delayDeferred.done(d.resolve).fail(d.reject)\r\n                    } else {\r\n                        d.resolve(r)\r\n                    }\r\n                })).fail(d.reject);\r\n                return d\r\n            } else {\r\n                return this.callBase.apply(this, arguments)\r\n            }\r\n        },\r\n        refresh: function(options, operationTypes) {\r\n            if (false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                var storeLoadOptions = options.storeLoadOptions;\r\n                var dataSource = this._dataSource;\r\n                if (operationTypes.reload) {\r\n                    this._virtualScrollController.reset();\r\n                    dataSource.items().length = 0;\r\n                    this._isLoaded = false;\r\n                    _updateLoading(this);\r\n                    this._isLoaded = true;\r\n                    if (isAppendMode(this)) {\r\n                        this.pageIndex(0);\r\n                        dataSource.pageIndex(0);\r\n                        storeLoadOptions.pageIndex = 0;\r\n                        options.pageIndex = 0;\r\n                        storeLoadOptions.skip = 0\r\n                    } else {\r\n                        dataSource.pageIndex(this.pageIndex());\r\n                        if (dataSource.paginate()) {\r\n                            options.pageIndex = this.pageIndex();\r\n                            storeLoadOptions.skip = this.pageIndex() * this.pageSize()\r\n                        }\r\n                    }\r\n                } else if (isAppendMode(this) && storeLoadOptions.skip && this._totalCountCorrection < 0) {\r\n                    storeLoadOptions.skip += this._totalCountCorrection\r\n                }\r\n            }\r\n            return this.callBase.apply(this, arguments)\r\n        },\r\n        dispose: function() {\r\n            this._virtualScrollController.dispose();\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        loadPageCount: function(count) {\r\n            if (!isDefined(count)) {\r\n                return this._loadPageCount\r\n            }\r\n            this._loadPageCount = count\r\n        },\r\n        _handleDataLoading: function(options) {\r\n            var loadPageCount = this.loadPageCount();\r\n            var pageSize = this.pageSize();\r\n            var newMode = false === this.option(LEGACY_SCROLLING_MODE);\r\n            var storeLoadOptions = options.storeLoadOptions;\r\n            var takeIsDefined = isDefined(storeLoadOptions.take);\r\n            options.loadPageCount = loadPageCount;\r\n            if (!options.isCustomLoading && newMode && takeIsDefined && loadPageCount > 1 && pageSize > 0) {\r\n                storeLoadOptions.take = loadPageCount * pageSize\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _loadPageSize: function() {\r\n            return this.callBase.apply(this, arguments) * this.loadPageCount()\r\n        }\r\n    };\r\n    [\"beginPageIndex\", \"endPageIndex\", \"pageIndex\"].forEach((function(name) {\r\n        result[name] = function() {\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                var dataSource = this._dataSource;\r\n                return dataSource.pageIndex.apply(dataSource, arguments)\r\n            }\r\n            var virtualScrollController = this._virtualScrollController;\r\n            return virtualScrollController[name].apply(virtualScrollController, arguments)\r\n        }\r\n    }));\r\n    [\"virtualItemsCount\", \"getContentOffset\", \"getVirtualContentSize\", \"setContentItemSizes\", \"setViewportPosition\", \"getViewportItemIndex\", \"setViewportItemIndex\", \"getItemIndexByPosition\", \"viewportSize\", \"viewportItemSize\", \"getItemSize\", \"getItemSizes\", \"loadIfNeed\"].forEach((function(name) {\r\n        result[name] = function() {\r\n            var virtualScrollController = this._virtualScrollController;\r\n            return virtualScrollController[name].apply(virtualScrollController, arguments)\r\n        }\r\n    }));\r\n    return result\r\n}();\r\nvar VirtualScrollingRowsViewExtender = function() {\r\n    var removeEmptyRows = function($emptyRows, className) {\r\n        var tBodies = $emptyRows.toArray().map(row => $(row).parent(\".\" + className).get(0)).filter(row => row);\r\n        if (tBodies.length) {\r\n            $emptyRows = $(tBodies)\r\n        }\r\n        var rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;\r\n        for (var i = 0; i < rowCount; i++) {\r\n            $emptyRows.eq(i).remove()\r\n        }\r\n    };\r\n    return {\r\n        init: function() {\r\n            var _dataController$state;\r\n            var dataController = this.getController(\"data\");\r\n            this.callBase();\r\n            dataController.pageChanged.add(pageIndex => {\r\n                var scrollTop = this._scrollTop;\r\n                this.scrollToPage(null !== pageIndex && void 0 !== pageIndex ? pageIndex : dataController.pageIndex());\r\n                if (false === this.option(LEGACY_SCROLLING_MODE) && this._scrollTop === scrollTop) {\r\n                    dataController.updateViewport()\r\n                }\r\n            });\r\n            dataController.dataSourceChanged.add(() => {\r\n                !this._scrollTop && this._scrollToCurrentPageOnResize()\r\n            });\r\n            null === (_dataController$state = dataController.stateLoaded) || void 0 === _dataController$state ? void 0 : _dataController$state.add(() => {\r\n                this._scrollToCurrentPageOnResize()\r\n            });\r\n            this._scrollToCurrentPageOnResize()\r\n        },\r\n        _scrollToCurrentPageOnResize: function() {\r\n            var dataController = this.getController(\"data\");\r\n            if (dataController.pageIndex() > 0) {\r\n                var resizeHandler = () => {\r\n                    this.resizeCompleted.remove(resizeHandler);\r\n                    this.scrollToPage(dataController.pageIndex())\r\n                };\r\n                this.resizeCompleted.add(resizeHandler)\r\n            }\r\n        },\r\n        scrollToPage: function(pageIndex) {\r\n            var dataController = this._dataController;\r\n            var pageSize = dataController ? dataController.pageSize() : 0;\r\n            var scrollPosition;\r\n            if (isVirtualMode(this) || isAppendMode(this)) {\r\n                var itemSize = dataController.getItemSize();\r\n                var itemSizes = dataController.getItemSizes();\r\n                var itemIndex = pageIndex * pageSize;\r\n                scrollPosition = itemIndex * itemSize;\r\n                for (var index in itemSizes) {\r\n                    if (index < itemIndex) {\r\n                        scrollPosition += itemSizes[index] - itemSize\r\n                    }\r\n                }\r\n            } else {\r\n                scrollPosition = 0\r\n            }\r\n            this.scrollTo({\r\n                y: scrollPosition,\r\n                x: this._scrollLeft\r\n            })\r\n        },\r\n        renderDelayedTemplates: function(e) {\r\n            this._waitAsyncTemplates(e).done(() => {\r\n                this._updateContentPosition(true)\r\n            });\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _renderCore: function(e) {\r\n            var startRenderTime = new Date;\r\n            var deferred = this.callBase.apply(this, arguments);\r\n            var dataSource = this._dataController._dataSource;\r\n            if (dataSource && e) {\r\n                var itemCount = e.items ? e.items.length : 20;\r\n                var viewportSize = this._dataController.viewportSize() || 20;\r\n                if (gridCoreUtils.isVirtualRowRendering(this) && itemCount > 0 && false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                    dataSource._renderTime = (new Date - startRenderTime) * viewportSize / itemCount\r\n                } else {\r\n                    dataSource._renderTime = new Date - startRenderTime\r\n                }\r\n            }\r\n            return deferred\r\n        },\r\n        _getRowElements: function(tableElement) {\r\n            var $rows = this.callBase(tableElement);\r\n            return $rows && $rows.not(\".\" + VIRTUAL_ROW_CLASS)\r\n        },\r\n        _removeRowsElements: function(contentTable, removeCount, changeType) {\r\n            var rowElements = this._getRowElements(contentTable).toArray();\r\n            if (\"append\" === changeType) {\r\n                rowElements = rowElements.slice(0, removeCount)\r\n            } else {\r\n                rowElements = rowElements.slice(-removeCount)\r\n            }\r\n            var errorHandlingController = this.getController(\"errorHandling\");\r\n            rowElements.map(rowElement => {\r\n                var $rowElement = $(rowElement);\r\n                errorHandlingController && errorHandlingController.removeErrorRow($rowElement.next());\r\n                $rowElement.remove()\r\n            })\r\n        },\r\n        _updateContent: function(tableElement, change) {\r\n            var $freeSpaceRowElements;\r\n            var contentElement = this._findContentElement();\r\n            var changeType = change && change.changeType;\r\n            var d = Deferred();\r\n            var contentTable = contentElement.children().first();\r\n            if (\"append\" === changeType || \"prepend\" === changeType) {\r\n                this._waitAsyncTemplates(change).done(() => {\r\n                    var $tBodies = this._getBodies(tableElement);\r\n                    if (1 === $tBodies.length) {\r\n                        this._getBodies(contentTable)[\"append\" === changeType ? \"append\" : \"prepend\"]($tBodies.children())\r\n                    } else {\r\n                        $tBodies[\"append\" === changeType ? \"appendTo\" : \"prependTo\"](contentTable)\r\n                    }\r\n                    tableElement.remove();\r\n                    $freeSpaceRowElements = this._getFreeSpaceRowElements(contentTable);\r\n                    removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);\r\n                    if (change.removeCount) {\r\n                        this._removeRowsElements(contentTable, change.removeCount, changeType)\r\n                    }\r\n                    this._restoreErrorRow(contentTable);\r\n                    d.resolve()\r\n                }).fail(d.reject)\r\n            } else {\r\n                this.callBase.apply(this, arguments).done(() => {\r\n                    if (\"update\" === changeType) {\r\n                        this._restoreErrorRow(contentTable)\r\n                    }\r\n                    d.resolve()\r\n                }).fail(d.reject)\r\n            }\r\n            return d.promise().done(() => {\r\n                this._updateBottomLoading()\r\n            })\r\n        },\r\n        _addVirtualRow: function($table, isFixed, location, position) {\r\n            if (!position) {\r\n                return\r\n            }\r\n            var $virtualRow = this._createEmptyRow(VIRTUAL_ROW_CLASS, isFixed, position);\r\n            $virtualRow = this._wrapRowIfNeed($table, $virtualRow);\r\n            this._appendEmptyRow($table, $virtualRow, location)\r\n        },\r\n        _updateContentItemSizes: function() {\r\n            var rowHeights = this._getRowHeights();\r\n            var correctedRowHeights = this._correctRowHeights(rowHeights);\r\n            this._dataController.setContentItemSizes(correctedRowHeights)\r\n        },\r\n        _updateViewportSize: function(viewportHeight, scrollTop) {\r\n            if (!isDefined(viewportHeight)) {\r\n                viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow())\r\n            }\r\n            this._dataController.viewportHeight(viewportHeight, scrollTop)\r\n        },\r\n        _getRowHeights: function() {\r\n            var _this$getController, _this$getController$i;\r\n            var isPopupEditMode = null === (_this$getController = this.getController(\"editing\")) || void 0 === _this$getController ? void 0 : null === (_this$getController$i = _this$getController.isPopupEditMode) || void 0 === _this$getController$i ? void 0 : _this$getController$i.call(_this$getController);\r\n            var rowElements = this._getRowElements(this._tableElement).toArray();\r\n            if (isPopupEditMode) {\r\n                rowElements = rowElements.filter(row => !$(row).hasClass(ROW_INSERTED))\r\n            }\r\n            return rowElements.map(row => getBoundingRect(row).height)\r\n        },\r\n        _correctRowHeights: function(rowHeights) {\r\n            var dataController = this._dataController;\r\n            var dataSource = dataController._dataSource;\r\n            var correctedRowHeights = [];\r\n            var visibleRows = dataController.getVisibleRows();\r\n            var itemSize = 0;\r\n            var firstCountableItem = true;\r\n            var lastLoadIndex = -1;\r\n            for (var i = 0; i < rowHeights.length; i++) {\r\n                var currentItem = visibleRows[i];\r\n                if (!isDefined(currentItem)) {\r\n                    continue\r\n                }\r\n                if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                    if (lastLoadIndex >= 0 && lastLoadIndex !== currentItem.loadIndex) {\r\n                        correctedRowHeights.push(itemSize);\r\n                        itemSize = 0\r\n                    }\r\n                    lastLoadIndex = currentItem.loadIndex\r\n                } else if (isItemCountableByDataSource(currentItem, dataSource)) {\r\n                    if (firstCountableItem) {\r\n                        firstCountableItem = false\r\n                    } else {\r\n                        correctedRowHeights.push(itemSize);\r\n                        itemSize = 0\r\n                    }\r\n                }\r\n                itemSize += rowHeights[i]\r\n            }\r\n            itemSize > 0 && correctedRowHeights.push(itemSize);\r\n            return correctedRowHeights\r\n        },\r\n        _updateContentPosition: function(isRender) {\r\n            var dataController = this._dataController;\r\n            var rowHeight = this._rowHeight || 20;\r\n            dataController.viewportItemSize(rowHeight);\r\n            if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\r\n                if (!isRender) {\r\n                    this._updateContentItemSizes()\r\n                }\r\n                var top = dataController.getContentOffset(\"begin\");\r\n                var bottom = dataController.getContentOffset(\"end\");\r\n                var $tables = this.getTableElements();\r\n                var $virtualRows = $tables.children(\"tbody\").children(\".\" + VIRTUAL_ROW_CLASS);\r\n                removeEmptyRows($virtualRows, VIRTUAL_ROW_CLASS);\r\n                $tables.each((index, element) => {\r\n                    var isFixed = index > 0;\r\n                    var prevFixed = this._isFixedTableRendering;\r\n                    this._isFixedTableRendering = isFixed;\r\n                    this._addVirtualRow($(element), isFixed, \"top\", top);\r\n                    this._addVirtualRow($(element), isFixed, \"bottom\", bottom);\r\n                    this._isFixedTableRendering = prevFixed\r\n                })\r\n            }\r\n        },\r\n        _isTableLinesDisplaysCorrect: function(table) {\r\n            var hasColumnLines = table.find(\".\" + COLUMN_LINES_CLASS).length > 0;\r\n            return hasColumnLines === this.option(\"showColumnLines\")\r\n        },\r\n        _isColumnElementsEqual: function($columns, $virtualColumns) {\r\n            var result = $columns.length === $virtualColumns.length;\r\n            if (result) {\r\n                each($columns, (function(index, element) {\r\n                    if (element.style.width !== $virtualColumns[index].style.width) {\r\n                        result = false;\r\n                        return result\r\n                    }\r\n                }))\r\n            }\r\n            return result\r\n        },\r\n        _getCellClasses: function(column) {\r\n            var classes = [];\r\n            var cssClass = column.cssClass;\r\n            var isExpandColumn = \"expand\" === column.command;\r\n            cssClass && classes.push(cssClass);\r\n            isExpandColumn && classes.push(this.addWidgetPrefix(GROUP_SPACE_CLASS));\r\n            return classes\r\n        },\r\n        _findBottomLoadPanel: function($contentElement) {\r\n            var $element = $contentElement || this.element();\r\n            var $bottomLoadPanel = $element && $element.find(\".\" + this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS));\r\n            if ($bottomLoadPanel && $bottomLoadPanel.length) {\r\n                return $bottomLoadPanel\r\n            }\r\n        },\r\n        _updateBottomLoading: function() {\r\n            var virtualMode = isVirtualMode(this);\r\n            var appendMode = isAppendMode(this);\r\n            var showBottomLoading = !this._dataController.hasKnownLastPage() && this._dataController.isLoaded() && (virtualMode || appendMode);\r\n            var $contentElement = this._findContentElement();\r\n            var bottomLoadPanelElement = this._findBottomLoadPanel($contentElement);\r\n            if (showBottomLoading) {\r\n                if (!bottomLoadPanelElement) {\r\n                    $(\"<div>\").addClass(this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS)).append(this._createComponent($(\"<div>\"), LoadIndicator).$element()).appendTo($contentElement)\r\n                }\r\n            } else if (bottomLoadPanelElement) {\r\n                bottomLoadPanelElement.remove()\r\n            }\r\n        },\r\n        _handleScroll: function(e) {\r\n            var legacyScrollingMode = true === this.option(LEGACY_SCROLLING_MODE);\r\n            var zeroTopPosition = 0 === e.scrollOffset.top;\r\n            var isScrollTopChanged = this._scrollTop !== e.scrollOffset.top;\r\n            if ((isScrollTopChanged || e.forceUpdateScrollPosition) && (this._hasHeight || !legacyScrollingMode && zeroTopPosition) && this._rowHeight) {\r\n                this._scrollTop = e.scrollOffset.top;\r\n                if (isVirtualMode(this) && false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                    this._updateContentItemSizes();\r\n                    this._updateViewportSize(null, this._scrollTop)\r\n                }\r\n                this._dataController.setViewportPosition(e.scrollOffset.top)\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _needUpdateRowHeight: function(itemsCount) {\r\n            return this.callBase.apply(this, arguments) || itemsCount > 0 && isAppendMode(this) && !gridCoreUtils.isVirtualRowRendering(this)\r\n        },\r\n        _updateRowHeight: function() {\r\n            this.callBase.apply(this, arguments);\r\n            if (this._rowHeight) {\r\n                this._updateContentPosition();\r\n                var viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow());\r\n                var dataController = this._dataController;\r\n                if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                    this._updateViewportSize(viewportHeight);\r\n                    dataController.updateViewport()\r\n                } else {\r\n                    dataController.viewportSize(Math.ceil(viewportHeight / this._rowHeight))\r\n                }\r\n            }\r\n        },\r\n        updateFreeSpaceRowHeight: function() {\r\n            var result = this.callBase.apply(this, arguments);\r\n            if (result) {\r\n                this._updateContentPosition()\r\n            }\r\n            return result\r\n        },\r\n        setLoading: function(isLoading, messageText) {\r\n            var dataController = this._dataController;\r\n            var hasBottomLoadPanel = dataController.pageIndex() > 0 && dataController.isLoaded() && !!this._findBottomLoadPanel();\r\n            if (false === this.option(LEGACY_SCROLLING_MODE) && isLoading && dataController.isViewportChanging()) {\r\n                return\r\n            }\r\n            if (hasBottomLoadPanel) {\r\n                isLoading = false\r\n            }\r\n            this.callBase.call(this, isLoading, messageText)\r\n        },\r\n        _resizeCore: function() {\r\n            var that = this;\r\n            var $element = that.element();\r\n            that.callBase();\r\n            if (that.component.$element() && !that._windowScroll && isElementInDom($element)) {\r\n                that._windowScroll = subscribeToExternalScrollers($element, (function(scrollPos) {\r\n                    if (!that._hasHeight && that._rowHeight) {\r\n                        that._dataController.setViewportPosition(scrollPos)\r\n                    }\r\n                }), that.component.$element());\r\n                that.on(\"disposing\", (function() {\r\n                    that._windowScroll.dispose()\r\n                }))\r\n            }\r\n            if (false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                that.loadIfNeed()\r\n            }\r\n        },\r\n        loadIfNeed: function() {\r\n            var _dataController$loadI;\r\n            var dataController = this._dataController;\r\n            null === dataController || void 0 === dataController ? void 0 : null === (_dataController$loadI = dataController.loadIfNeed) || void 0 === _dataController$loadI ? void 0 : _dataController$loadI.call(dataController)\r\n        },\r\n        setColumnWidths: function(widths) {\r\n            var scrollable = this.getScrollable();\r\n            var $content;\r\n            this.callBase.apply(this, arguments);\r\n            if (\"virtual\" === this.option(\"scrolling.mode\")) {\r\n                $content = scrollable ? $(scrollable.content()) : this.element();\r\n                this.callBase(widths, $content.children(\".\" + this.addWidgetPrefix(CONTENT_CLASS)).children(\":not(.\" + this.addWidgetPrefix(TABLE_CONTENT_CLASS) + \")\"))\r\n            }\r\n        },\r\n        _restoreErrorRow: function() {\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                var errorHandling = this.getController(\"errorHandling\");\r\n                null === errorHandling || void 0 === errorHandling ? void 0 : errorHandling.removeErrorRow()\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        dispose: function() {\r\n            clearTimeout(this._scrollTimeoutID);\r\n            this.callBase()\r\n        }\r\n    }\r\n}();\r\nexport var virtualScrollingModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            scrolling: {\r\n                timeout: 300,\r\n                updateTimeout: 300,\r\n                minTimeout: 0,\r\n                renderingThreshold: 100,\r\n                removeInvisiblePages: true,\r\n                rowPageSize: 5,\r\n                prerenderedRowChunkSize: 1,\r\n                mode: \"standard\",\r\n                preloadEnabled: false,\r\n                rowRenderingMode: \"standard\",\r\n                loadTwoPagesOnStart: false,\r\n                legacyMode: false,\r\n                prerenderedRowCount: 1\r\n            }\r\n        }\r\n    },\r\n    extenders: {\r\n        dataSourceAdapter: VirtualScrollingDataSourceAdapterExtender,\r\n        controllers: {\r\n            data: function() {\r\n                var members = {\r\n                    _refreshDataSource: function() {\r\n                        var baseResult = this.callBase.apply(this, arguments) || (new Deferred).resolve().promise();\r\n                        baseResult.done(this.initVirtualRows.bind(this));\r\n                        return baseResult\r\n                    },\r\n                    _loadDataSource: function() {\r\n                        if (this._rowsScrollController && isVirtualPaging(this)) {\r\n                            var _this$_dataSource;\r\n                            var {\r\n                                loadPageCount: loadPageCount\r\n                            } = isDefined(this._loadViewportParams) ? this.getLoadPageParams() : {};\r\n                            loadPageCount >= 1 && (null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.loadPageCount(loadPageCount))\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    getRowPageSize: function() {\r\n                        var rowPageSize = this.option(\"scrolling.rowPageSize\");\r\n                        var pageSize = this.pageSize();\r\n                        return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize\r\n                    },\r\n                    reload: function() {\r\n                        var rowsScrollController = this._rowsScrollController || this._dataSource;\r\n                        var itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();\r\n                        var result = this.callBase.apply(this, arguments);\r\n                        return result && result.done(() => {\r\n                            if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\r\n                                var rowIndexOffset = this.getRowIndexOffset();\r\n                                var rowIndex = Math.floor(itemIndex) - rowIndexOffset;\r\n                                var component = this.component;\r\n                                var scrollable = component.getScrollable && component.getScrollable();\r\n                                var isSortingOperation = this.dataSource().operationTypes().sorting;\r\n                                if (scrollable && !isSortingOperation && rowIndex >= 0) {\r\n                                    var rowElement = component.getRowElement(rowIndex);\r\n                                    var $rowElement = rowElement && rowElement[0] && $(rowElement[0]);\r\n                                    var top = $rowElement && $rowElement.position().top;\r\n                                    var isChromeLatest = browser.chrome && browser.version >= 91;\r\n                                    var allowedTopOffset = browser.mozilla || isChromeLatest ? 1 : 0;\r\n                                    if (top > allowedTopOffset) {\r\n                                        top = Math.round(top + getOuterHeight($rowElement) * (itemIndex % 1));\r\n                                        scrollable.scrollTo({\r\n                                            y: top\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    },\r\n                    initVirtualRows: function() {\r\n                        var virtualRowsRendering = gridCoreUtils.isVirtualRowRendering(this);\r\n                        this._allItems = null;\r\n                        this._loadViewportParams = null;\r\n                        if (\"virtual\" !== this.option(\"scrolling.mode\") && true !== virtualRowsRendering || false === virtualRowsRendering || false !== this.option(LEGACY_SCROLLING_MODE) && !this.option(\"scrolling.rowPageSize\")) {\r\n                            this._visibleItems = null;\r\n                            this._rowsScrollController = null;\r\n                            return\r\n                        }\r\n                        var pageIndex = !isVirtualMode(this) && this.pageIndex() >= this.pageCount() ? this.pageCount() - 1 : this.pageIndex();\r\n                        this._rowPageIndex = Math.ceil(pageIndex * this.pageSize() / this.getRowPageSize());\r\n                        this._visibleItems = false === this.option(LEGACY_SCROLLING_MODE) ? null : [];\r\n                        this._viewportChanging = false;\r\n                        this._needUpdateViewportAfterLoading = false;\r\n                        if (!this._rowsScrollController) {\r\n                            this._rowsScrollController = new VirtualScrollController(this.component, this._getRowsScrollDataOptions(), true);\r\n                            this._rowsScrollController.positionChanged.add(() => {\r\n                                var _this$_dataSource2;\r\n                                if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                                    this._viewportChanging = true;\r\n                                    this.loadViewport();\r\n                                    this._viewportChanging = false;\r\n                                    return\r\n                                }\r\n                                null === (_this$_dataSource2 = this._dataSource) || void 0 === _this$_dataSource2 ? void 0 : _this$_dataSource2.setViewportItemIndex(this._rowsScrollController.getViewportItemIndex())\r\n                            })\r\n                        }\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            this._updateLoadViewportParams()\r\n                        }\r\n                        if (this.isLoaded() && false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                            this._rowsScrollController.load()\r\n                        }\r\n                    },\r\n                    isViewportChanging: function() {\r\n                        return this._viewportChanging\r\n                    },\r\n                    _getRowsScrollDataOptions: function() {\r\n                        var that = this;\r\n                        var isItemCountable = function(item) {\r\n                            return isItemCountableByDataSource(item, that._dataSource)\r\n                        };\r\n                        return {\r\n                            pageSize: function() {\r\n                                return that.getRowPageSize()\r\n                            },\r\n                            loadedOffset: function() {\r\n                                var _that$_dataSource;\r\n                                return isVirtualMode(that) && (null === (_that$_dataSource = that._dataSource) || void 0 === _that$_dataSource ? void 0 : _that$_dataSource.lastLoadOptions().skip) || 0\r\n                            },\r\n                            loadedItemCount: function() {\r\n                                return that._itemCount\r\n                            },\r\n                            totalItemsCount: function() {\r\n                                if (isVirtualPaging(that)) {\r\n                                    return that.totalItemsCount()\r\n                                }\r\n                                return false === that.option(LEGACY_SCROLLING_MODE) ? that._itemCount : that._items.filter(isItemCountable).length\r\n                            },\r\n                            hasKnownLastPage: function() {\r\n                                return false === that.option(LEGACY_SCROLLING_MODE) ? that.hasKnownLastPage() : true\r\n                            },\r\n                            pageIndex: function(index) {\r\n                                if (void 0 !== index) {\r\n                                    that._rowPageIndex = index\r\n                                }\r\n                                return that._rowPageIndex\r\n                            },\r\n                            isLoading: function() {\r\n                                return that.isLoading()\r\n                            },\r\n                            pageCount: function() {\r\n                                var pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());\r\n                                return pageCount ? pageCount : 1\r\n                            },\r\n                            load: function() {\r\n                                if (that._rowsScrollController.pageIndex() >= this.pageCount()) {\r\n                                    that._rowPageIndex = this.pageCount() - 1;\r\n                                    that._rowsScrollController.pageIndex(that._rowPageIndex)\r\n                                }\r\n                                if (!this.items().length && this.totalItemsCount()) {\r\n                                    return\r\n                                }\r\n                                that._rowsScrollController.handleDataChanged(change => {\r\n                                    change = change || {};\r\n                                    change.changeType = change.changeType || \"refresh\";\r\n                                    change.items = change.items || that._visibleItems;\r\n                                    that._visibleItems.forEach((item, index) => {\r\n                                        item.rowIndex = index\r\n                                    });\r\n                                    that._fireChanged(change)\r\n                                })\r\n                            },\r\n                            updateLoading: function() {},\r\n                            itemsCount: function() {\r\n                                return this.items(true).length\r\n                            },\r\n                            correctCount: function(items, count, fromEnd) {\r\n                                return _correctCount(items, count, fromEnd, (item, isNextAfterLast, fromEnd) => {\r\n                                    if (item.isNewRow) {\r\n                                        return isNextAfterLast && !fromEnd\r\n                                    }\r\n                                    if (isNextAfterLast && fromEnd) {\r\n                                        return !item.isNewRow\r\n                                    }\r\n                                    return isItemCountable(item)\r\n                                })\r\n                            },\r\n                            items: function(countableOnly) {\r\n                                var result = that._items;\r\n                                if (that.option(LEGACY_SCROLLING_MODE)) {\r\n                                    var dataSource = that.dataSource();\r\n                                    var virtualItemsCount = null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount();\r\n                                    var begin = virtualItemsCount ? virtualItemsCount.begin : 0;\r\n                                    var rowPageSize = that.getRowPageSize();\r\n                                    var skip = that._rowPageIndex * rowPageSize - begin;\r\n                                    var take = rowPageSize;\r\n                                    if (skip < 0) {\r\n                                        return []\r\n                                    }\r\n                                    if (skip) {\r\n                                        skip = this.correctCount(result, skip);\r\n                                        result = result.slice(skip)\r\n                                    }\r\n                                    if (take) {\r\n                                        take = this.correctCount(result, take);\r\n                                        result = result.slice(0, take)\r\n                                    }\r\n                                }\r\n                                return countableOnly ? result.filter(isItemCountable) : result\r\n                            },\r\n                            viewportItems: function(items) {\r\n                                if (items && false !== that.option(LEGACY_SCROLLING_MODE)) {\r\n                                    that._visibleItems = items\r\n                                }\r\n                                return that._visibleItems\r\n                            },\r\n                            onChanged: function() {},\r\n                            changingDuration: function(e) {\r\n                                var dataSource = that.dataSource();\r\n                                if (null !== dataSource && void 0 !== dataSource && dataSource.isLoading() && false !== that.option(LEGACY_SCROLLING_MODE)) {\r\n                                    return LOAD_TIMEOUT\r\n                                }\r\n                                return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0\r\n                            }\r\n                        }\r\n                    },\r\n                    _updateItemsCore: function(change) {\r\n                        var delta = this.getRowIndexDelta();\r\n                        this.callBase.apply(this, arguments);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE) && gridCoreUtils.isVirtualRowRendering(this)) {\r\n                            if (\"update\" === change.changeType && 0 === change.rowIndices.length && change.cancelEmptyChanges) {\r\n                                change.cancel = true\r\n                            }\r\n                            return\r\n                        }\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            var visibleItems = this._visibleItems;\r\n                            var isRefresh = \"refresh\" === change.changeType || change.isLiveUpdate;\r\n                            if (\"append\" === change.changeType && change.items && !change.items.length) {\r\n                                return\r\n                            }\r\n                            if (isRefresh || \"append\" === change.changeType || \"prepend\" === change.changeType) {\r\n                                change.cancel = true;\r\n                                isRefresh && rowsScrollController.reset(true);\r\n                                rowsScrollController.load()\r\n                            } else {\r\n                                if (\"update\" === change.changeType) {\r\n                                    change.rowIndices.forEach((rowIndex, index) => {\r\n                                        var changeType = change.changeTypes[index];\r\n                                        var newItem = change.items[index];\r\n                                        if (\"update\" === changeType) {\r\n                                            visibleItems[rowIndex] = newItem\r\n                                        } else if (\"insert\" === changeType) {\r\n                                            visibleItems.splice(rowIndex, 0, newItem)\r\n                                        } else if (\"remove\" === changeType) {\r\n                                            visibleItems.splice(rowIndex, 1)\r\n                                        }\r\n                                    })\r\n                                } else {\r\n                                    visibleItems.forEach((item, index) => {\r\n                                        visibleItems[index] = this._items[index + delta] || visibleItems[index]\r\n                                    });\r\n                                    change.items = visibleItems\r\n                                }\r\n                                updateItemIndices(visibleItems)\r\n                            }\r\n                        }\r\n                    },\r\n                    _updateLoadViewportParams: function() {\r\n                        var viewportParams = this._rowsScrollController.getViewportParams();\r\n                        var pageSize = this.pageSize();\r\n                        if (viewportParams && !isVirtualPaging(this) && pageSize > 0) {\r\n                            var pageOffset = this.pageIndex() * pageSize;\r\n                            viewportParams.skip += pageOffset\r\n                        }\r\n                        this._loadViewportParams = viewportParams\r\n                    },\r\n                    _processItems: function(items) {\r\n                        var newItems = this.callBase.apply(this, arguments);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            var _dataSource$lastLoadO;\r\n                            var dataSource = this._dataSource;\r\n                            var currentIndex = null !== (_dataSource$lastLoadO = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().skip) && void 0 !== _dataSource$lastLoadO ? _dataSource$lastLoadO : 0;\r\n                            var prevCountable;\r\n                            var prevRowType;\r\n                            var isPrevRowNew;\r\n                            var wasCountableItem = false;\r\n                            newItems.forEach(item => {\r\n                                var rowType = item.rowType;\r\n                                var itemCountable = isItemCountableByDataSource(item, dataSource);\r\n                                var isNextGroupItem = \"group\" === rowType && (prevCountable || itemCountable || \"group\" !== prevRowType && currentIndex > 0);\r\n                                var isNextDataItem = \"data\" === rowType && itemCountable && (prevCountable || \"group\" !== prevRowType);\r\n                                if (!item.isNewRow && isDefined(prevCountable)) {\r\n                                    var isPrevNewRowFirst = isPrevRowNew && !wasCountableItem;\r\n                                    if ((isNextGroupItem || isNextDataItem) && !isPrevNewRowFirst) {\r\n                                        currentIndex++\r\n                                    }\r\n                                }\r\n                                if (isNextGroupItem || isNextDataItem) {\r\n                                    wasCountableItem = true\r\n                                }\r\n                                item.loadIndex = currentIndex;\r\n                                prevCountable = itemCountable;\r\n                                prevRowType = rowType;\r\n                                isPrevRowNew = item.isNewRow\r\n                            })\r\n                        }\r\n                        return newItems\r\n                    },\r\n                    _afterProcessItems: function(items) {\r\n                        this._itemCount = items.filter(item => isItemCountableByDataSource(item, this._dataSource)).length;\r\n                        if (isDefined(this._loadViewportParams)) {\r\n                            this._updateLoadViewportParams();\r\n                            var result = items;\r\n                            this._allItems = items;\r\n                            if (items.length) {\r\n                                var {\r\n                                    skipForCurrentPage: skipForCurrentPage\r\n                                } = this.getLoadPageParams(true);\r\n                                var skip = items[0].loadIndex + skipForCurrentPage;\r\n                                var take = this._loadViewportParams.take;\r\n                                result = items.filter(it => {\r\n                                    var isNewRowOnStart = it.isNewRow && it.loadIndex >= skip - 1;\r\n                                    var isNewRowInEmptyData = it.isNewRow && it.loadIndex === skip && 0 === take;\r\n                                    var isLoadIndexGreaterStart = it.loadIndex >= skip || isNewRowOnStart;\r\n                                    var isLoadIndexLessEnd = it.loadIndex < skip + take || isNewRowInEmptyData;\r\n                                    return isLoadIndexGreaterStart && isLoadIndexLessEnd\r\n                                })\r\n                            }\r\n                            return result\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    _applyChange: function(change) {\r\n                        var that = this;\r\n                        var items = change.items;\r\n                        var changeType = change.changeType;\r\n                        var removeCount = change.removeCount;\r\n                        if (removeCount) {\r\n                            var fromEnd = \"prepend\" === changeType;\r\n                            removeCount = _correctCount(that._items, removeCount, fromEnd, (function(item, isNextAfterLast) {\r\n                                return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast)\r\n                            }));\r\n                            change.removeCount = removeCount\r\n                        }\r\n                        switch (changeType) {\r\n                            case \"prepend\":\r\n                                that._items.unshift.apply(that._items, items);\r\n                                if (removeCount) {\r\n                                    that._items.splice(-removeCount)\r\n                                }\r\n                                break;\r\n                            case \"append\":\r\n                                that._items.push.apply(that._items, items);\r\n                                if (removeCount) {\r\n                                    that._items.splice(0, removeCount)\r\n                                }\r\n                                break;\r\n                            default:\r\n                                that.callBase(change)\r\n                        }\r\n                    },\r\n                    items: function(allItems) {\r\n                        return allItems ? this._allItems || this._items : this._visibleItems || this._items\r\n                    },\r\n                    getRowIndexDelta: function() {\r\n                        var delta = 0;\r\n                        if (this.option(LEGACY_SCROLLING_MODE)) {\r\n                            var visibleItems = this._visibleItems;\r\n                            if (visibleItems && visibleItems[0]) {\r\n                                delta = this._items.indexOf(visibleItems[0])\r\n                            }\r\n                        }\r\n                        return delta < 0 ? 0 : delta\r\n                    },\r\n                    getRowIndexOffset: function(byLoadedRows) {\r\n                        var offset = 0;\r\n                        var dataSource = this.dataSource();\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var newMode = false === this.option(LEGACY_SCROLLING_MODE);\r\n                        var virtualPaging = isVirtualPaging(this);\r\n                        if (rowsScrollController && !byLoadedRows) {\r\n                            if (newMode && isDefined(this._loadViewportParams)) {\r\n                                var {\r\n                                    skipForCurrentPage: skipForCurrentPage,\r\n                                    pageIndex: pageIndex\r\n                                } = this.getLoadPageParams(true);\r\n                                var items = this.items(true);\r\n                                offset = virtualPaging ? pageIndex * this.pageSize() : 0;\r\n                                if (items.length) {\r\n                                    var firstLoadIndex = items[0].loadIndex;\r\n                                    offset += items.filter(item => item.loadIndex < firstLoadIndex + skipForCurrentPage).length\r\n                                }\r\n                            } else {\r\n                                offset = rowsScrollController.beginPageIndex() * rowsScrollController.pageSize()\r\n                            }\r\n                        } else if (virtualPaging && newMode && dataSource) {\r\n                            var _dataSource$lastLoadO2;\r\n                            offset = null !== (_dataSource$lastLoadO2 = dataSource.lastLoadOptions().skip) && void 0 !== _dataSource$lastLoadO2 ? _dataSource$lastLoadO2 : 0\r\n                        } else if (isVirtualMode(this) && dataSource) {\r\n                            offset = dataSource.beginPageIndex() * dataSource.pageSize()\r\n                        }\r\n                        return offset\r\n                    },\r\n                    getDataIndex: function(change) {\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            return this.getRowIndexOffset(true)\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    viewportSize: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportSize.apply(rowsScrollController, arguments);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            return result\r\n                        }\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportSize.apply(dataSource, arguments)\r\n                    },\r\n                    viewportHeight: function(height, scrollTop) {\r\n                        var _this$_rowsScrollCont;\r\n                        null === (_this$_rowsScrollCont = this._rowsScrollController) || void 0 === _this$_rowsScrollCont ? void 0 : _this$_rowsScrollCont.viewportHeight(height, scrollTop)\r\n                    },\r\n                    viewportItemSize: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            return result\r\n                        }\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportItemSize.apply(dataSource, arguments)\r\n                    },\r\n                    setViewportPosition: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        this._isPaging = false;\r\n                        if (rowsScrollController) {\r\n                            rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments)\r\n                        } else {\r\n                            null === dataSource || void 0 === dataSource ? void 0 : dataSource.setViewportPosition.apply(dataSource, arguments)\r\n                        }\r\n                    },\r\n                    setContentItemSizes: function(sizes) {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.setContentItemSizes(sizes);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            return result\r\n                        }\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.setContentItemSizes(sizes)\r\n                    },\r\n                    getPreloadedRowCount: function() {\r\n                        var preloadCount = this.option(\"scrolling.preloadedRowCount\");\r\n                        var preloadEnabled = this.option(\"scrolling.preloadEnabled\");\r\n                        if (isDefined(preloadCount)) {\r\n                            return preloadCount\r\n                        }\r\n                        var viewportSize = this.viewportSize();\r\n                        return preloadEnabled ? 2 * viewportSize : viewportSize\r\n                    },\r\n                    getLoadPageParams: function(byLoadedPage) {\r\n                        var _this$_dataSource3, _this$_dataSource4;\r\n                        var pageSize = this.pageSize();\r\n                        var viewportParams = this._loadViewportParams;\r\n                        var lastLoadOptions = null === (_this$_dataSource3 = this._dataSource) || void 0 === _this$_dataSource3 ? void 0 : _this$_dataSource3.lastLoadOptions();\r\n                        var loadedPageIndex = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.pageIndex) || 0;\r\n                        var loadedTake = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.take) || 0;\r\n                        var isScrollingBack = this._rowsScrollController.isScrollingBack();\r\n                        var topPreloadCount = isScrollingBack ? this.getPreloadedRowCount() : 0;\r\n                        var bottomPreloadCount = isScrollingBack ? 0 : this.getPreloadedRowCount();\r\n                        var totalCountCorrection = (null === (_this$_dataSource4 = this._dataSource) || void 0 === _this$_dataSource4 ? void 0 : _this$_dataSource4.totalCountCorrection()) || 0;\r\n                        var skipWithPreload = Math.max(0, viewportParams.skip - topPreloadCount);\r\n                        var pageIndex = byLoadedPage ? loadedPageIndex : Math.floor(pageSize ? skipWithPreload / pageSize : 0);\r\n                        var pageOffset = pageIndex * pageSize;\r\n                        var skipForCurrentPage = viewportParams.skip - pageOffset;\r\n                        var loadingTake = viewportParams.take + skipForCurrentPage + bottomPreloadCount - totalCountCorrection;\r\n                        var take = byLoadedPage ? loadedTake : loadingTake;\r\n                        var loadPageCount = Math.ceil(pageSize ? take / pageSize : 0);\r\n                        return {\r\n                            pageIndex: pageIndex,\r\n                            loadPageCount: Math.max(1, loadPageCount),\r\n                            skipForCurrentPage: Math.max(0, skipForCurrentPage)\r\n                        }\r\n                    },\r\n                    _updateVisiblePageIndex: function(currentPageIndex) {\r\n                        if (!this._rowsScrollController) {\r\n                            return\r\n                        }\r\n                        if (isDefined(currentPageIndex)) {\r\n                            this._silentOption(VISIBLE_PAGE_INDEX, currentPageIndex);\r\n                            this.pageChanged.fire();\r\n                            return\r\n                        }\r\n                        var viewPortItemIndex = this._rowsScrollController.getViewportItemIndex();\r\n                        var newPageIndex = Math.floor(viewPortItemIndex / this.pageSize());\r\n                        if (this.pageIndex() !== newPageIndex) {\r\n                            this._silentOption(VISIBLE_PAGE_INDEX, newPageIndex);\r\n                            this.updateItems({\r\n                                changeType: \"pageIndex\"\r\n                            })\r\n                        }\r\n                    },\r\n                    _getChangedLoadParams: function() {\r\n                        var loadedPageParams = this.getLoadPageParams(true);\r\n                        var {\r\n                            pageIndex: pageIndex,\r\n                            loadPageCount: loadPageCount\r\n                        } = this.getLoadPageParams();\r\n                        var pageIndexIsValid = this._pageIndexIsValid(pageIndex);\r\n                        var result = null;\r\n                        if (!this._isLoading && pageIndexIsValid && (pageIndex !== loadedPageParams.pageIndex || loadPageCount !== loadedPageParams.loadPageCount)) {\r\n                            result = {\r\n                                pageIndex: pageIndex,\r\n                                loadPageCount: loadPageCount\r\n                            }\r\n                        }\r\n                        return result\r\n                    },\r\n                    _pageIndexIsValid: function(pageIndex) {\r\n                        var result = true;\r\n                        if (isAppendMode(this) && this.hasKnownLastPage() || isVirtualMode(this)) {\r\n                            result = pageIndex * this.pageSize() < this.totalItemsCount()\r\n                        }\r\n                        return result\r\n                    },\r\n                    _loadItems: function(checkLoading, viewportIsFilled) {\r\n                        var _dataSourceAdapter$lo, _dataSourceAdapter$pa;\r\n                        var virtualPaging = isVirtualPaging(this);\r\n                        var dataSourceAdapter = this._dataSource;\r\n                        var changedParams = this._getChangedLoadParams();\r\n                        var currentLoadPageCount = null !== (_dataSourceAdapter$lo = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.loadPageCount()) && void 0 !== _dataSourceAdapter$lo ? _dataSourceAdapter$lo : 0;\r\n                        var lastRequiredItemCount = this.pageSize() * currentLoadPageCount;\r\n                        var currentPageIndex = null !== (_dataSourceAdapter$pa = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.pageIndex()) && void 0 !== _dataSourceAdapter$pa ? _dataSourceAdapter$pa : 0;\r\n                        var pageIndexNotChanged = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) === currentPageIndex;\r\n                        var allLoadedInAppendMode = isAppendMode(this) && this.totalItemsCount() < lastRequiredItemCount;\r\n                        var isRepaintMode = \"repaint\" === this.option(\"editing.refreshMode\");\r\n                        var pageIndexIncreased = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) > currentPageIndex;\r\n                        var result = false;\r\n                        if (!dataSourceAdapter || virtualPaging && checkLoading && (isRepaintMode && viewportIsFilled || pageIndexIncreased || pageIndexNotChanged && allLoadedInAppendMode)) {\r\n                            return result\r\n                        }\r\n                        if (virtualPaging && this._isLoading) {\r\n                            this._needUpdateViewportAfterLoading = true\r\n                        }\r\n                        if (virtualPaging && changedParams) {\r\n                            result = true;\r\n                            dataSourceAdapter.pageIndex(changedParams.pageIndex);\r\n                            dataSourceAdapter.loadPageCount(changedParams.loadPageCount);\r\n                            this._repaintChangesOnly = true;\r\n                            this._needUpdateDimensions = true;\r\n                            var viewportChanging = this._viewportChanging;\r\n                            this.load().always(() => {\r\n                                this._repaintChangesOnly = void 0;\r\n                                this._needUpdateDimensions = void 0\r\n                            }).done(() => {\r\n                                var isLastPage = this.pageCount() > 0 && this.pageIndex() === this.pageCount() - 1;\r\n                                (viewportChanging || isLastPage) && this._updateVisiblePageIndex();\r\n                                if (this._needUpdateViewportAfterLoading) {\r\n                                    this._needUpdateViewportAfterLoading = false;\r\n                                    this.loadViewport({\r\n                                        checkLoadedParamsOnly: true\r\n                                    })\r\n                                }\r\n                            })\r\n                        }\r\n                        return result\r\n                    },\r\n                    loadViewport: function(params) {\r\n                        var {\r\n                            checkLoadedParamsOnly: checkLoadedParamsOnly,\r\n                            checkLoading: checkLoading,\r\n                            viewportIsNotFilled: viewportIsNotFilled\r\n                        } = null !== params && void 0 !== params ? params : {};\r\n                        var virtualPaging = isVirtualPaging(this);\r\n                        if (virtualPaging || gridCoreUtils.isVirtualRowRendering(this)) {\r\n                            this._updateLoadViewportParams();\r\n                            var loadingItemsStarted = this._loadItems(checkLoading, !viewportIsNotFilled);\r\n                            if (!loadingItemsStarted && !(this._isLoading && checkLoading) && !checkLoadedParamsOnly) {\r\n                                this.updateItems({\r\n                                    repaintChangesOnly: true,\r\n                                    needUpdateDimensions: true,\r\n                                    useProcessedItemsCache: true,\r\n                                    cancelEmptyChanges: true\r\n                                })\r\n                            }\r\n                        }\r\n                    },\r\n                    updateViewport: function() {\r\n                        var _this$_loadViewportPa, _this$_loadViewportPa2;\r\n                        var viewportSize = this.viewportSize();\r\n                        var itemCount = this.items().length;\r\n                        var viewportIsNotFilled = viewportSize > itemCount;\r\n                        var currentTake = null !== (_this$_loadViewportPa = null === (_this$_loadViewportPa2 = this._loadViewportParams) || void 0 === _this$_loadViewportPa2 ? void 0 : _this$_loadViewportPa2.take) && void 0 !== _this$_loadViewportPa ? _this$_loadViewportPa : 0;\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var newTake = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.getViewportParams().take;\r\n                        (viewportIsNotFilled || currentTake < newTake) && !this._isPaging && itemCount && this.loadViewport({\r\n                            checkLoading: true,\r\n                            viewportIsNotFilled: viewportIsNotFilled\r\n                        })\r\n                    },\r\n                    loadIfNeed: function() {\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            return\r\n                        }\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        rowsScrollController && rowsScrollController.loadIfNeed();\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.loadIfNeed()\r\n                    },\r\n                    getItemSize: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.getItemSize.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.getItemSize.apply(dataSource, arguments)\r\n                    },\r\n                    getItemSizes: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.getItemSizes.apply(dataSource, arguments)\r\n                    },\r\n                    getContentOffset: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.getContentOffset.apply(dataSource, arguments)\r\n                    },\r\n                    refresh: function(options) {\r\n                        var dataSource = this._dataSource;\r\n                        if (dataSource && options && options.load && isAppendMode(this)) {\r\n                            dataSource.resetCurrentTotalCount()\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    dispose: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        rowsScrollController && rowsScrollController.dispose();\r\n                        this.callBase.apply(this, arguments)\r\n                    },\r\n                    topItemIndex: function() {\r\n                        var _this$_loadViewportPa3;\r\n                        return null === (_this$_loadViewportPa3 = this._loadViewportParams) || void 0 === _this$_loadViewportPa3 ? void 0 : _this$_loadViewportPa3.skip\r\n                    },\r\n                    bottomItemIndex: function() {\r\n                        var viewportParams = this._loadViewportParams;\r\n                        return viewportParams && viewportParams.skip + viewportParams.take\r\n                    },\r\n                    virtualItemsCount: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.virtualItemsCount.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount.apply(dataSource, arguments)\r\n                    },\r\n                    pageIndex: function(_pageIndex) {\r\n                        var virtualPaging = isVirtualPaging(this);\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE) && virtualPaging && rowsScrollController) {\r\n                            if (void 0 === _pageIndex) {\r\n                                var _this$option;\r\n                                return null !== (_this$option = this.option(VISIBLE_PAGE_INDEX)) && void 0 !== _this$option ? _this$option : 0\r\n                            }\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    _fireChanged: function(e) {\r\n                        this.callBase.apply(this, arguments);\r\n                        var {\r\n                            operationTypes: operationTypes\r\n                        } = e;\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this) && operationTypes) {\r\n                            var {\r\n                                fullReload: fullReload,\r\n                                pageIndex: pageIndex\r\n                            } = operationTypes;\r\n                            if (e.isDataChanged && !fullReload && pageIndex) {\r\n                                this._updateVisiblePageIndex(this._dataSource.pageIndex())\r\n                            }\r\n                        }\r\n                    },\r\n                    _getPagingOptionValue: function(optionName) {\r\n                        var result = this.callBase.apply(this, arguments);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\r\n                            result = this[optionName]()\r\n                        }\r\n                        return result\r\n                    },\r\n                    isEmpty: function() {\r\n                        return false === this.option(LEGACY_SCROLLING_MODE) ? !this.items(true).length : this.callBase(this, arguments)\r\n                    },\r\n                    isLastPageLoaded: function() {\r\n                        var result = false;\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\r\n                            var {\r\n                                pageIndex: pageIndex,\r\n                                loadPageCount: loadPageCount\r\n                            } = this.getLoadPageParams(true);\r\n                            var pageCount = this.pageCount();\r\n                            result = pageIndex + loadPageCount >= pageCount\r\n                        } else {\r\n                            result = this.callBase.apply(this, arguments)\r\n                        }\r\n                        return result\r\n                    },\r\n                    reset: function() {\r\n                        this._itemCount = 0;\r\n                        this._allItems = null;\r\n                        this.callBase.apply(this, arguments)\r\n                    },\r\n                    _applyFilter: function() {\r\n                        var _this$_dataSource5;\r\n                        null === (_this$_dataSource5 = this._dataSource) || void 0 === _this$_dataSource5 ? void 0 : _this$_dataSource5.loadPageCount(1);\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                };\r\n                gridCoreUtils.proxyMethod(members, \"getVirtualContentSize\");\r\n                gridCoreUtils.proxyMethod(members, \"setViewportItemIndex\");\r\n                return members\r\n            }(),\r\n            resizing: {\r\n                _updateMasterDataGridCore: function(masterDataGrid) {\r\n                    return when(this.callBase.apply(this, arguments)).done(masterDataGridUpdated => {\r\n                        var isNewVirtualMode = isVirtualMode(masterDataGrid) && false === masterDataGrid.option(LEGACY_SCROLLING_MODE);\r\n                        if (!masterDataGridUpdated && isNewVirtualMode) {\r\n                            var scrollable = masterDataGrid.getScrollable();\r\n                            if (scrollable) {\r\n                                masterDataGrid.updateDimensions()\r\n                            }\r\n                        }\r\n                    })\r\n                },\r\n                resize: function() {\r\n                    var that = this;\r\n                    var callBase = that.callBase;\r\n                    var result;\r\n                    if (isVirtualMode(that) || gridCoreUtils.isVirtualRowRendering(that)) {\r\n                        clearTimeout(that._resizeTimeout);\r\n                        var diff = new Date - that._lastTime;\r\n                        var updateTimeout = that.option(\"scrolling.updateTimeout\");\r\n                        if (that._lastTime && diff < updateTimeout) {\r\n                            result = new Deferred;\r\n                            that._resizeTimeout = setTimeout((function() {\r\n                                callBase.apply(that).done(result.resolve).fail(result.reject);\r\n                                that._lastTime = new Date\r\n                            }), updateTimeout);\r\n                            that._lastTime = new Date\r\n                        } else {\r\n                            result = callBase.apply(that);\r\n                            if (that._dataController.isLoaded()) {\r\n                                that._lastTime = new Date\r\n                            }\r\n                        }\r\n                    } else {\r\n                        result = callBase.apply(that)\r\n                    }\r\n                    return result\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._resizeTimeout)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: VirtualScrollingRowsViewExtender\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}