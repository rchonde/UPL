{"ast":null,"code":"/**\r\n * Interaction Object module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { InteractionObjectEventDispatcher } from \"./InteractionObjectEvents\";\nimport { BaseObjectEvents } from \"../Base\";\nimport { List } from \"../utils/List\";\nimport { Dictionary, DictionaryDisposer } from \"../utils/Dictionary\";\nimport { getInteraction } from \"./Interaction\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * Re-exports\r\n */\n\nexport { InteractionObjectEventDispatcher };\n/**\r\n * Interaction object represents an object that is subject for any kind of\r\n * interaction with it with any input devices: mouse, touch or keyboard.\r\n *\r\n * Any DOM element can be wrapped into an Internaction object which in turn\r\n * enables attaching various interaction events to it, such as: hit, drag,\r\n * swipe, etc.\r\n *\r\n * To create an [[InteractionObject]] out of a [[Sprite]], use:\r\n * `interaction.getInteractionFromSprite(sprite: Sprite)`\r\n *\r\n * To create an [[InteractionObject]] out of a a regular element:\r\n * `interaction.getInteraction(element: HTMLElement)`\r\n */\n\nvar InteractionObject =\n/** @class */\nfunction (_super) {\n  __extends(InteractionObject, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function InteractionObject(element) {\n    var _this = _super.call(this) || this;\n    /**\r\n     * @ignore\r\n     * An [[EventDispatcher]] instance which holds events for this object\r\n     */\n\n\n    _this._eventDispatcher = new InteractionObjectEventDispatcher(_this);\n    /**\r\n     * Collection of Disposers for various events. (so that those get disposed\r\n     * when the whole InteractionObject is disposed)\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.eventDisposers = new Dictionary();\n    /**\r\n     * A [[Dictionary]] that holds temporarily replaced original style values for\r\n     * HTML element, so that they can be restored when the functionality that\r\n     * replaced them is done.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.replacedStyles = new Dictionary();\n    _this._clickable = false;\n    _this._contextMenuDisabled = false;\n    _this._hoverable = false;\n    _this._trackable = false;\n    _this._draggable = false;\n    _this._swipeable = false;\n    _this._resizable = false;\n    _this._wheelable = false;\n    _this._inert = false;\n    /**\r\n     * Is element currently hovered?\r\n     */\n\n    _this._isHover = false;\n    /**\r\n     * Was this element hovered via pointer or is it just \"pretenting\" to be\r\n     * hovered.\r\n     *\r\n     * @ignore\r\n     */\n\n    _this.isRealHover = false;\n    /**\r\n     * Is the element hovered by touch pointer?\r\n     */\n\n    _this._isHoverByTouch = false;\n    /**\r\n     * Has element got any pointers currently pressing down on it?\r\n     */\n\n    _this._isDown = false;\n    /**\r\n     * Does element have focus?\r\n     */\n\n    _this._isFocused = false;\n    /**\r\n     * Is element currently protected from touch interactions?\r\n     */\n\n    _this._isTouchProtected = false;\n    /**\r\n     * Options used for inertia functionality.\r\n     */\n\n    _this._inertiaOptions = new Dictionary();\n    /**\r\n     * A collection of different inertia types, currently playing out.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.inertias = new Dictionary();\n    /**\r\n     * Click/tap options.\r\n     */\n\n    _this._hitOptions = {};\n    /**\r\n     * Hover options.\r\n     */\n\n    _this._hoverOptions = {};\n    /**\r\n     * Swipe gesture options.\r\n     */\n\n    _this._swipeOptions = {};\n    /**\r\n     * Keyboard options.\r\n     */\n\n    _this._keyboardOptions = {};\n    /**\r\n     * Mouse options.\r\n     */\n\n    _this._mouseOptions = {};\n    /**\r\n     * Cursor options.\r\n     */\n\n    _this._cursorOptions = {\n      \"defaultStyle\": [{\n        \"property\": \"cursor\",\n        \"value\": \"default\"\n      }]\n    };\n\n    _this._disposers.push(_this._eventDispatcher);\n\n    _this._element = element;\n    _this.className = \"InteractionObject\";\n\n    _this._disposers.push(new DictionaryDisposer(_this.inertias));\n\n    _this._disposers.push(new DictionaryDisposer(_this.eventDisposers));\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  ;\n  Object.defineProperty(InteractionObject.prototype, \"events\", {\n    /**\r\n     * An [[EventDispatcher]] instance which holds events for this object\r\n     */\n    get: function () {\n      return this._eventDispatcher;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isHover\", {\n    /**\r\n     * @return Hovered?\r\n     */\n    get: function () {\n      return this._isHover;\n    },\n\n    /**\r\n     * Indicates if this element is currently hovered.\r\n     *\r\n     * @param value Hovered?\r\n     */\n    set: function (value) {\n      if (this.isHover != value) {\n        this._isHover = value;\n\n        if (value) {\n          getInteraction().overObjects.moveValue(this);\n        } else {\n          this.isRealHover = false;\n          getInteraction().overObjects.removeValue(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isHoverByTouch\", {\n    /**\r\n     * @return Hovered?\r\n     */\n    get: function () {\n      return this._isHoverByTouch;\n    },\n\n    /**\r\n     * Indicates if this element is currently hovered.\r\n     *\r\n     * @param value Hovered?\r\n     */\n    set: function (value) {\n      if (this.isHoverByTouch != value) {\n        this._isHoverByTouch = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"overPointers\", {\n    /**\r\n     * A list of pointers currently over the element.\r\n     *\r\n     * @see {@link Pointer}\r\n     * @return List if pointers currently hovering the element\r\n     */\n    get: function () {\n      if (!this._overPointers) {\n        this._overPointers = new List();\n      }\n\n      return this._overPointers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isDown\", {\n    /**\r\n     * @return Has down pointers?\r\n     */\n    get: function () {\n      return this._isDown;\n    },\n\n    /**\r\n     * Indicates if this element has currently any pointers pressing on it.\r\n     *\r\n     * @param value Has down pointers?\r\n     */\n    set: function (value) {\n      if (this.isDown != value) {\n        this._isDown = value;\n\n        if (value) {\n          getInteraction().downObjects.moveValue(this);\n        } else {\n          getInteraction().downObjects.removeValue(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"downPointers\", {\n    /**\r\n     * A list of pointers currently pressing down on this element.\r\n     *\r\n     * @see {@link Pointer}\r\n     * @return List of down pointers\r\n     */\n    get: function () {\n      if (!this._downPointers) {\n        this._downPointers = new List();\n      }\n\n      return this._downPointers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isFocused\", {\n    /**\r\n     * @return Focused?\r\n     */\n    get: function () {\n      return this._isFocused;\n    },\n\n    /**\r\n     * Indicates if this element is currently focused.\r\n     *\r\n     * @param value Focused?\r\n     */\n    set: function (value) {\n      if (this.isFocused != value) {\n        this._isFocused = value;\n\n        if (value) {\n          getInteraction().focusedObject = this;\n        } else {\n          getInteraction().focusedObject = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isTouchProtected\", {\n    /**\r\n     * @ignore\r\n     * @return Touch protected?\r\n     */\n    get: function () {\n      return this._isTouchProtected;\n    },\n\n    /**\r\n     * Indicates if this element is currently being protected from touch actions.\r\n     *\r\n     * @ignore\r\n     * @param value Touch protected?\r\n     */\n    set: function (value) {\n      if (this._isTouchProtected != value) {\n        this._isTouchProtected = value;\n\n        if (value) {\n          getInteraction().unprepElement(this);\n        } else if (this.draggable || this.swipeable || this.trackable || this.resizable) {\n          getInteraction().prepElement(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"clickable\", {\n    /**\r\n     * @return Clickable?\r\n     */\n    get: function () {\n      return this._clickable;\n    },\n\n    /**\r\n     * Is element clickable? Clickable elements will generate \"hit\" events when\r\n     * clicked or tapped.\r\n     *\r\n     * @param value Clickable?\r\n     */\n    set: function (value) {\n      if (this._clickable !== value) {\n        this._clickable = value;\n        getInteraction().processClickable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"contextMenuDisabled\", {\n    /**\r\n     * @return Context menu disabled?\r\n     */\n    get: function () {\n      return this._contextMenuDisabled;\n    },\n\n    /**\r\n     * Should element prevent context menu to be displayed, e.g. when\r\n     * right-clicked?\r\n     *\r\n     * @default false\r\n     * @param value Context menu disabled?\r\n     */\n    set: function (value) {\n      if (this._contextMenuDisabled !== value) {\n        this._contextMenuDisabled = value;\n        getInteraction().processContextMenu(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"hoverable\", {\n    /**\r\n     * @return Hoverable?\r\n     */\n    get: function () {\n      return this._hoverable;\n    },\n\n    /**\r\n     * Indicates if element should generate hover events.\r\n     *\r\n     * @param value Hoverable?\r\n     */\n    set: function (value) {\n      if (this._hoverable !== value) {\n        this._hoverable = value;\n        getInteraction().processHoverable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"trackable\", {\n    /**\r\n     * @return Track pointer?\r\n     */\n    get: function () {\n      return this._trackable;\n    },\n\n    /**\r\n     * Indicates if pointer movement over element should be tracked.\r\n     *\r\n     * @param value Track pointer?\r\n     */\n    set: function (value) {\n      if (this._trackable !== value) {\n        this._trackable = value;\n        getInteraction().processTrackable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"draggable\", {\n    /**\r\n     * @return Draggable?\r\n     */\n    get: function () {\n      return this._draggable;\n    },\n\n    /**\r\n     * Indicates if element can be dragged. (moved)\r\n     *\r\n     * @param value Draggable?\r\n     */\n    set: function (value) {\n      if (this._draggable !== value) {\n        this._draggable = value;\n        getInteraction().processDraggable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"swipeable\", {\n    /**\r\n     * @return Track swipe?\r\n     */\n    get: function () {\n      return this._swipeable;\n    },\n\n    /**\r\n     * Indicates whether element should react to swipe gesture.\r\n     *\r\n     * @param value Track swipe?\r\n     */\n    set: function (value) {\n      if (this._swipeable !== value) {\n        this._swipeable = value;\n        getInteraction().processSwipeable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"resizable\", {\n    /**\r\n     * @return Resizeble?\r\n     */\n    get: function () {\n      return this._resizable;\n    },\n\n    /**\r\n     * Indicates if element can be resized.\r\n     *\r\n     * @param value Resizeable?\r\n     */\n    set: function (value) {\n      if (this._resizable !== value) {\n        this._resizable = value;\n        getInteraction().processResizable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"wheelable\", {\n    /**\r\n     * @return Track wheel?\r\n     */\n    get: function () {\n      return this._wheelable;\n    },\n\n    /**\r\n     * Indicates whether track moouse wheel rotation over element.\r\n     *\r\n     * @param value Track wheel?\r\n     */\n    set: function (value) {\n      if (this._wheelable !== value) {\n        this._wheelable = value;\n        getInteraction().processWheelable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"inert\", {\n    /**\r\n     * @return Inert?\r\n     */\n    get: function () {\n      return this._inert;\n    },\n\n    /**\r\n     * Indicates if element is inert, i.e. if it should carry movement momentum\r\n     * after it is dragged and released.\r\n     *\r\n     * @param value Inert?\r\n     */\n    set: function (value) {\n      if (this._inert !== value) {\n        this._inert = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"focusable\", {\n    /**\r\n     * @return Focusable?\r\n     */\n    get: function () {\n      return this._focusable;\n    },\n\n    /**\r\n     * Indicates if element can gain focus.\r\n     *\r\n     * @param value Focusable?\r\n     */\n    set: function (value) {\n      if (this._focusable !== value) {\n        this._focusable = value;\n\n        if (this._focusable && this.tabindex == -1) {\n          this._tabindex = 1;\n        }\n\n        getInteraction().processFocusable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"tabindex\", {\n    /**\r\n     * @return Tab index\r\n     */\n    get: function () {\n      return $type.getValueDefault(this._tabindex, -1);\n    },\n\n    /**\r\n     * Element's tab index.\r\n     *\r\n     * @param value Tab index\r\n     */\n    set: function (value) {\n      if (this._tabindex !== value) {\n        this._tabindex = value;\n\n        if (value > -1) {\n          this.focusable = true;\n        }\n\n        getInteraction().processFocusable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"element\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._element;\n    },\n\n    /**\r\n     * A DOM element associated with this element.\r\n     *\r\n     * @param element Element\r\n     */\n    set: function (element) {\n      this._element = element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"originalPosition\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Position.\r\n     */\n    get: function () {\n      return this._originalPosition || {\n        x: 0,\n        y: 0\n      };\n    },\n\n    /**\r\n     * Element's original position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Position\r\n     */\n    set: function (value) {\n      this._originalPosition = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"originalScale\", {\n    /**\r\n     * @return Scale\r\n     */\n    get: function () {\n      return $type.getValueDefault(this._originalScale, 1);\n    },\n\n    /**\r\n     * Element's original scale.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Scale\r\n     */\n    set: function (value) {\n      if (this._originalScale !== value) {\n        this._originalScale = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"originalAngle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      return $type.getValueDefault(this._originalAngle, 0);\n    },\n\n    /**\r\n     * Element's original angle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Angle\r\n     */\n    set: function (value) {\n      if (this._originalAngle !== value) {\n        this._originalAngle = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"inertiaOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"inertiaOptions\", this._inertiaOptions);\n      } else {\n        return this._inertiaOptions;\n      }\n    },\n\n    /**\r\n     * Inertia options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._inertiaOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"hitOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"hitOptions\", this._hitOptions);\n      } else {\n        return this._hitOptions;\n      }\n    },\n\n    /**\r\n     * Hit options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._hitOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"hoverOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"hoverOptions\", this._hoverOptions);\n      } else {\n        return this._hoverOptions;\n      }\n    },\n\n    /**\r\n     * Hover options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._hoverOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"swipeOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"swipeOptions\", this._swipeOptions);\n      } else {\n        return this._swipeOptions;\n      }\n    },\n\n    /**\r\n     * Swipe options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._swipeOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"keyboardOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"keyboardOptions\", this._keyboardOptions);\n      } else {\n        return this._keyboardOptions;\n      }\n    },\n\n    /**\r\n     * Keyboard options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._keyboardOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"mouseOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"mouseOptions\", this._mouseOptions);\n      } else {\n        return this._mouseOptions;\n      }\n    },\n\n    /**\r\n     * Mouse options.\r\n     *\r\n     * Enables controlling options related to the mouse, for example sensitivity\r\n     * of its mouse wheel.\r\n     *\r\n     * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n     * speed:\r\n     *\r\n     * ```TypeScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"plotContainer\": {\r\n     *     \"mouseOptions\": {\r\n     *       \"sensitivity\": 0.5\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @since 4.5.14\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._mouseOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"cursorOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"cursorOptions\", this._cursorOptions);\n      } else {\n        return this._cursorOptions;\n      }\n    },\n\n    /**\r\n     * Cursor options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._cursorOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related assets from another object of the same\r\n   * type.\r\n   *\r\n   * @param source Source object\r\n   */\n\n  InteractionObject.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.inertiaOptions = source.inertiaOptions;\n    this.hitOptions = source.hitOptions;\n    this.hoverOptions = source.hoverOptions;\n    this.swipeOptions = source.swipeOptions;\n    this.keyboardOptions = source.keyboardOptions;\n    this.cursorOptions = source.cursorOptions;\n    this.contextMenuDisabled = source.contextMenuDisabled;\n    getInteraction().applyCursorOverStyle(this);\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  InteractionObject.prototype.setEventDisposer = function (key, value, f) {\n    var disposer = this.eventDisposers.getKey(key);\n\n    if (value) {\n      if (disposer == null) {\n        this.eventDisposers.setKey(key, f());\n      }\n    } else {\n      if (disposer != null) {\n        disposer.dispose();\n        this.eventDisposers.removeKey(key);\n      }\n    }\n  };\n  /**\r\n   * Disposes object.\r\n   */\n\n\n  InteractionObject.prototype.dispose = function () {\n    _super.prototype.dispose.call(this); // Remove from all interaction registries\n\n\n    var interaction = getInteraction();\n    interaction.overObjects.removeValue(this);\n    interaction.downObjects.removeValue(this);\n    interaction.trackedObjects.removeValue(this);\n    interaction.transformedObjects.removeValue(this); // Unlock document wheel\n\n    if (this.isHover && this.wheelable) {\n      interaction.unlockWheel();\n    }\n\n    if (interaction.focusedObject === this) {\n      interaction.focusedObject = undefined;\n    }\n  };\n\n  return InteractionObject;\n}(BaseObjectEvents);\n\nexport { InteractionObject };","map":{"version":3,"names":["__extends","InteractionObjectEventDispatcher","BaseObjectEvents","List","Dictionary","DictionaryDisposer","getInteraction","$type","InteractionObject","_super","element","_this","call","_eventDispatcher","eventDisposers","replacedStyles","_clickable","_contextMenuDisabled","_hoverable","_trackable","_draggable","_swipeable","_resizable","_wheelable","_inert","_isHover","isRealHover","_isHoverByTouch","_isDown","_isFocused","_isTouchProtected","_inertiaOptions","inertias","_hitOptions","_hoverOptions","_swipeOptions","_keyboardOptions","_mouseOptions","_cursorOptions","_disposers","push","_element","className","applyTheme","Object","defineProperty","prototype","get","enumerable","configurable","set","value","isHover","overObjects","moveValue","removeValue","isHoverByTouch","_overPointers","isDown","downObjects","_downPointers","isFocused","focusedObject","undefined","unprepElement","draggable","swipeable","trackable","resizable","prepElement","processClickable","processContextMenu","processHoverable","processTrackable","processDraggable","processSwipeable","processResizable","processWheelable","_focusable","tabindex","_tabindex","processFocusable","getValueDefault","focusable","_originalPosition","x","y","_originalScale","_originalAngle","sprite","_adapterO","apply","copyFrom","source","inertiaOptions","hitOptions","hoverOptions","swipeOptions","keyboardOptions","cursorOptions","contextMenuDisabled","applyCursorOverStyle","setEventDisposer","key","f","disposer","getKey","setKey","dispose","removeKey","interaction","trackedObjects","transformedObjects","wheelable","unlockWheel"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionObject.js"],"sourcesContent":["/**\r\n * Interaction Object module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { InteractionObjectEventDispatcher } from \"./InteractionObjectEvents\";\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { List } from \"../utils/List\";\r\nimport { Dictionary, DictionaryDisposer } from \"../utils/Dictionary\";\r\nimport { getInteraction } from \"./Interaction\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * Re-exports\r\n */\r\nexport { InteractionObjectEventDispatcher };\r\n/**\r\n * Interaction object represents an object that is subject for any kind of\r\n * interaction with it with any input devices: mouse, touch or keyboard.\r\n *\r\n * Any DOM element can be wrapped into an Internaction object which in turn\r\n * enables attaching various interaction events to it, such as: hit, drag,\r\n * swipe, etc.\r\n *\r\n * To create an [[InteractionObject]] out of a [[Sprite]], use:\r\n * `interaction.getInteractionFromSprite(sprite: Sprite)`\r\n *\r\n * To create an [[InteractionObject]] out of a a regular element:\r\n * `interaction.getInteraction(element: HTMLElement)`\r\n */\r\nvar InteractionObject = /** @class */ (function (_super) {\r\n    __extends(InteractionObject, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function InteractionObject(element) {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * @ignore\r\n         * An [[EventDispatcher]] instance which holds events for this object\r\n         */\r\n        _this._eventDispatcher = new InteractionObjectEventDispatcher(_this);\r\n        /**\r\n         * Collection of Disposers for various events. (so that those get disposed\r\n         * when the whole InteractionObject is disposed)\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.eventDisposers = new Dictionary();\r\n        /**\r\n         * A [[Dictionary]] that holds temporarily replaced original style values for\r\n         * HTML element, so that they can be restored when the functionality that\r\n         * replaced them is done.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.replacedStyles = new Dictionary();\r\n        _this._clickable = false;\r\n        _this._contextMenuDisabled = false;\r\n        _this._hoverable = false;\r\n        _this._trackable = false;\r\n        _this._draggable = false;\r\n        _this._swipeable = false;\r\n        _this._resizable = false;\r\n        _this._wheelable = false;\r\n        _this._inert = false;\r\n        /**\r\n         * Is element currently hovered?\r\n         */\r\n        _this._isHover = false;\r\n        /**\r\n         * Was this element hovered via pointer or is it just \"pretenting\" to be\r\n         * hovered.\r\n         *\r\n         * @ignore\r\n         */\r\n        _this.isRealHover = false;\r\n        /**\r\n         * Is the element hovered by touch pointer?\r\n         */\r\n        _this._isHoverByTouch = false;\r\n        /**\r\n         * Has element got any pointers currently pressing down on it?\r\n         */\r\n        _this._isDown = false;\r\n        /**\r\n         * Does element have focus?\r\n         */\r\n        _this._isFocused = false;\r\n        /**\r\n         * Is element currently protected from touch interactions?\r\n         */\r\n        _this._isTouchProtected = false;\r\n        /**\r\n         * Options used for inertia functionality.\r\n         */\r\n        _this._inertiaOptions = new Dictionary();\r\n        /**\r\n         * A collection of different inertia types, currently playing out.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.inertias = new Dictionary();\r\n        /**\r\n         * Click/tap options.\r\n         */\r\n        _this._hitOptions = {};\r\n        /**\r\n         * Hover options.\r\n         */\r\n        _this._hoverOptions = {};\r\n        /**\r\n         * Swipe gesture options.\r\n         */\r\n        _this._swipeOptions = {};\r\n        /**\r\n         * Keyboard options.\r\n         */\r\n        _this._keyboardOptions = {};\r\n        /**\r\n         * Mouse options.\r\n         */\r\n        _this._mouseOptions = {};\r\n        /**\r\n         * Cursor options.\r\n         */\r\n        _this._cursorOptions = {\r\n            \"defaultStyle\": [{\r\n                    \"property\": \"cursor\",\r\n                    \"value\": \"default\"\r\n                }]\r\n        };\r\n        _this._disposers.push(_this._eventDispatcher);\r\n        _this._element = element;\r\n        _this.className = \"InteractionObject\";\r\n        _this._disposers.push(new DictionaryDisposer(_this.inertias));\r\n        _this._disposers.push(new DictionaryDisposer(_this.eventDisposers));\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    ;\r\n    Object.defineProperty(InteractionObject.prototype, \"events\", {\r\n        /**\r\n         * An [[EventDispatcher]] instance which holds events for this object\r\n         */\r\n        get: function () {\r\n            return this._eventDispatcher;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"isHover\", {\r\n        /**\r\n         * @return Hovered?\r\n         */\r\n        get: function () {\r\n            return this._isHover;\r\n        },\r\n        /**\r\n         * Indicates if this element is currently hovered.\r\n         *\r\n         * @param value Hovered?\r\n         */\r\n        set: function (value) {\r\n            if (this.isHover != value) {\r\n                this._isHover = value;\r\n                if (value) {\r\n                    getInteraction().overObjects.moveValue(this);\r\n                }\r\n                else {\r\n                    this.isRealHover = false;\r\n                    getInteraction().overObjects.removeValue(this);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"isHoverByTouch\", {\r\n        /**\r\n         * @return Hovered?\r\n         */\r\n        get: function () {\r\n            return this._isHoverByTouch;\r\n        },\r\n        /**\r\n         * Indicates if this element is currently hovered.\r\n         *\r\n         * @param value Hovered?\r\n         */\r\n        set: function (value) {\r\n            if (this.isHoverByTouch != value) {\r\n                this._isHoverByTouch = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"overPointers\", {\r\n        /**\r\n         * A list of pointers currently over the element.\r\n         *\r\n         * @see {@link Pointer}\r\n         * @return List if pointers currently hovering the element\r\n         */\r\n        get: function () {\r\n            if (!this._overPointers) {\r\n                this._overPointers = new List();\r\n            }\r\n            return this._overPointers;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"isDown\", {\r\n        /**\r\n         * @return Has down pointers?\r\n         */\r\n        get: function () {\r\n            return this._isDown;\r\n        },\r\n        /**\r\n         * Indicates if this element has currently any pointers pressing on it.\r\n         *\r\n         * @param value Has down pointers?\r\n         */\r\n        set: function (value) {\r\n            if (this.isDown != value) {\r\n                this._isDown = value;\r\n                if (value) {\r\n                    getInteraction().downObjects.moveValue(this);\r\n                }\r\n                else {\r\n                    getInteraction().downObjects.removeValue(this);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"downPointers\", {\r\n        /**\r\n         * A list of pointers currently pressing down on this element.\r\n         *\r\n         * @see {@link Pointer}\r\n         * @return List of down pointers\r\n         */\r\n        get: function () {\r\n            if (!this._downPointers) {\r\n                this._downPointers = new List();\r\n            }\r\n            return this._downPointers;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"isFocused\", {\r\n        /**\r\n         * @return Focused?\r\n         */\r\n        get: function () {\r\n            return this._isFocused;\r\n        },\r\n        /**\r\n         * Indicates if this element is currently focused.\r\n         *\r\n         * @param value Focused?\r\n         */\r\n        set: function (value) {\r\n            if (this.isFocused != value) {\r\n                this._isFocused = value;\r\n                if (value) {\r\n                    getInteraction().focusedObject = this;\r\n                }\r\n                else {\r\n                    getInteraction().focusedObject = undefined;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"isTouchProtected\", {\r\n        /**\r\n         * @ignore\r\n         * @return Touch protected?\r\n         */\r\n        get: function () {\r\n            return this._isTouchProtected;\r\n        },\r\n        /**\r\n         * Indicates if this element is currently being protected from touch actions.\r\n         *\r\n         * @ignore\r\n         * @param value Touch protected?\r\n         */\r\n        set: function (value) {\r\n            if (this._isTouchProtected != value) {\r\n                this._isTouchProtected = value;\r\n                if (value) {\r\n                    getInteraction().unprepElement(this);\r\n                }\r\n                else if (this.draggable || this.swipeable || this.trackable || this.resizable) {\r\n                    getInteraction().prepElement(this);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"clickable\", {\r\n        /**\r\n         * @return Clickable?\r\n         */\r\n        get: function () {\r\n            return this._clickable;\r\n        },\r\n        /**\r\n         * Is element clickable? Clickable elements will generate \"hit\" events when\r\n         * clicked or tapped.\r\n         *\r\n         * @param value Clickable?\r\n         */\r\n        set: function (value) {\r\n            if (this._clickable !== value) {\r\n                this._clickable = value;\r\n                getInteraction().processClickable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"contextMenuDisabled\", {\r\n        /**\r\n         * @return Context menu disabled?\r\n         */\r\n        get: function () {\r\n            return this._contextMenuDisabled;\r\n        },\r\n        /**\r\n         * Should element prevent context menu to be displayed, e.g. when\r\n         * right-clicked?\r\n         *\r\n         * @default false\r\n         * @param value Context menu disabled?\r\n         */\r\n        set: function (value) {\r\n            if (this._contextMenuDisabled !== value) {\r\n                this._contextMenuDisabled = value;\r\n                getInteraction().processContextMenu(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"hoverable\", {\r\n        /**\r\n         * @return Hoverable?\r\n         */\r\n        get: function () {\r\n            return this._hoverable;\r\n        },\r\n        /**\r\n         * Indicates if element should generate hover events.\r\n         *\r\n         * @param value Hoverable?\r\n         */\r\n        set: function (value) {\r\n            if (this._hoverable !== value) {\r\n                this._hoverable = value;\r\n                getInteraction().processHoverable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"trackable\", {\r\n        /**\r\n         * @return Track pointer?\r\n         */\r\n        get: function () {\r\n            return this._trackable;\r\n        },\r\n        /**\r\n         * Indicates if pointer movement over element should be tracked.\r\n         *\r\n         * @param value Track pointer?\r\n         */\r\n        set: function (value) {\r\n            if (this._trackable !== value) {\r\n                this._trackable = value;\r\n                getInteraction().processTrackable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"draggable\", {\r\n        /**\r\n         * @return Draggable?\r\n         */\r\n        get: function () {\r\n            return this._draggable;\r\n        },\r\n        /**\r\n         * Indicates if element can be dragged. (moved)\r\n         *\r\n         * @param value Draggable?\r\n         */\r\n        set: function (value) {\r\n            if (this._draggable !== value) {\r\n                this._draggable = value;\r\n                getInteraction().processDraggable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"swipeable\", {\r\n        /**\r\n         * @return Track swipe?\r\n         */\r\n        get: function () {\r\n            return this._swipeable;\r\n        },\r\n        /**\r\n         * Indicates whether element should react to swipe gesture.\r\n         *\r\n         * @param value Track swipe?\r\n         */\r\n        set: function (value) {\r\n            if (this._swipeable !== value) {\r\n                this._swipeable = value;\r\n                getInteraction().processSwipeable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"resizable\", {\r\n        /**\r\n         * @return Resizeble?\r\n         */\r\n        get: function () {\r\n            return this._resizable;\r\n        },\r\n        /**\r\n         * Indicates if element can be resized.\r\n         *\r\n         * @param value Resizeable?\r\n         */\r\n        set: function (value) {\r\n            if (this._resizable !== value) {\r\n                this._resizable = value;\r\n                getInteraction().processResizable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"wheelable\", {\r\n        /**\r\n         * @return Track wheel?\r\n         */\r\n        get: function () {\r\n            return this._wheelable;\r\n        },\r\n        /**\r\n         * Indicates whether track moouse wheel rotation over element.\r\n         *\r\n         * @param value Track wheel?\r\n         */\r\n        set: function (value) {\r\n            if (this._wheelable !== value) {\r\n                this._wheelable = value;\r\n                getInteraction().processWheelable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"inert\", {\r\n        /**\r\n         * @return Inert?\r\n         */\r\n        get: function () {\r\n            return this._inert;\r\n        },\r\n        /**\r\n         * Indicates if element is inert, i.e. if it should carry movement momentum\r\n         * after it is dragged and released.\r\n         *\r\n         * @param value Inert?\r\n         */\r\n        set: function (value) {\r\n            if (this._inert !== value) {\r\n                this._inert = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"focusable\", {\r\n        /**\r\n         * @return Focusable?\r\n         */\r\n        get: function () {\r\n            return this._focusable;\r\n        },\r\n        /**\r\n         * Indicates if element can gain focus.\r\n         *\r\n         * @param value Focusable?\r\n         */\r\n        set: function (value) {\r\n            if (this._focusable !== value) {\r\n                this._focusable = value;\r\n                if (this._focusable && this.tabindex == -1) {\r\n                    this._tabindex = 1;\r\n                }\r\n                getInteraction().processFocusable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"tabindex\", {\r\n        /**\r\n         * @return Tab index\r\n         */\r\n        get: function () {\r\n            return $type.getValueDefault(this._tabindex, -1);\r\n        },\r\n        /**\r\n         * Element's tab index.\r\n         *\r\n         * @param value Tab index\r\n         */\r\n        set: function (value) {\r\n            if (this._tabindex !== value) {\r\n                this._tabindex = value;\r\n                if (value > -1) {\r\n                    this.focusable = true;\r\n                }\r\n                getInteraction().processFocusable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"element\", {\r\n        /**\r\n         * @return Element\r\n         */\r\n        get: function () {\r\n            return this._element;\r\n        },\r\n        /**\r\n         * A DOM element associated with this element.\r\n         *\r\n         * @param element Element\r\n         */\r\n        set: function (element) {\r\n            this._element = element;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"originalPosition\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Position.\r\n         */\r\n        get: function () {\r\n            return this._originalPosition || { x: 0, y: 0 };\r\n        },\r\n        /**\r\n         * Element's original position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Position\r\n         */\r\n        set: function (value) {\r\n            this._originalPosition = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"originalScale\", {\r\n        /**\r\n         * @return Scale\r\n         */\r\n        get: function () {\r\n            return $type.getValueDefault(this._originalScale, 1);\r\n        },\r\n        /**\r\n         * Element's original scale.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Scale\r\n         */\r\n        set: function (value) {\r\n            if (this._originalScale !== value) {\r\n                this._originalScale = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"originalAngle\", {\r\n        /**\r\n         * @return Angle\r\n         */\r\n        get: function () {\r\n            return $type.getValueDefault(this._originalAngle, 0);\r\n        },\r\n        /**\r\n         * Element's original angle.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Angle\r\n         */\r\n        set: function (value) {\r\n            if (this._originalAngle !== value) {\r\n                this._originalAngle = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"inertiaOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite && this.sprite._adapterO) {\r\n                return this.sprite._adapterO.apply(\"inertiaOptions\", this._inertiaOptions);\r\n            }\r\n            else {\r\n                return this._inertiaOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Inertia options.\r\n         *\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._inertiaOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"hitOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite && this.sprite._adapterO) {\r\n                return this.sprite._adapterO.apply(\"hitOptions\", this._hitOptions);\r\n            }\r\n            else {\r\n                return this._hitOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Hit options.\r\n         *\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._hitOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"hoverOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite && this.sprite._adapterO) {\r\n                return this.sprite._adapterO.apply(\"hoverOptions\", this._hoverOptions);\r\n            }\r\n            else {\r\n                return this._hoverOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Hover options.\r\n         *\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._hoverOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"swipeOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite && this.sprite._adapterO) {\r\n                return this.sprite._adapterO.apply(\"swipeOptions\", this._swipeOptions);\r\n            }\r\n            else {\r\n                return this._swipeOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Swipe options.\r\n         *\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._swipeOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"keyboardOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite && this.sprite._adapterO) {\r\n                return this.sprite._adapterO.apply(\"keyboardOptions\", this._keyboardOptions);\r\n            }\r\n            else {\r\n                return this._keyboardOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Keyboard options.\r\n         *\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._keyboardOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"mouseOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite && this.sprite._adapterO) {\r\n                return this.sprite._adapterO.apply(\"mouseOptions\", this._mouseOptions);\r\n            }\r\n            else {\r\n                return this._mouseOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Mouse options.\r\n         *\r\n         * Enables controlling options related to the mouse, for example sensitivity\r\n         * of its mouse wheel.\r\n         *\r\n         * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n         * speed:\r\n         *\r\n         * ```TypeScript\r\n         * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"plotContainer\": {\r\n         *     \"mouseOptions\": {\r\n         *       \"sensitivity\": 0.5\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * @since 4.5.14\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._mouseOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"cursorOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite && this.sprite._adapterO) {\r\n                return this.sprite._adapterO.apply(\"cursorOptions\", this._cursorOptions);\r\n            }\r\n            else {\r\n                return this._cursorOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Cursor options.\r\n         *\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._cursorOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all properties and related assets from another object of the same\r\n     * type.\r\n     *\r\n     * @param source Source object\r\n     */\r\n    InteractionObject.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.inertiaOptions = source.inertiaOptions;\r\n        this.hitOptions = source.hitOptions;\r\n        this.hoverOptions = source.hoverOptions;\r\n        this.swipeOptions = source.swipeOptions;\r\n        this.keyboardOptions = source.keyboardOptions;\r\n        this.cursorOptions = source.cursorOptions;\r\n        this.contextMenuDisabled = source.contextMenuDisabled;\r\n        getInteraction().applyCursorOverStyle(this);\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     */\r\n    InteractionObject.prototype.setEventDisposer = function (key, value, f) {\r\n        var disposer = this.eventDisposers.getKey(key);\r\n        if (value) {\r\n            if (disposer == null) {\r\n                this.eventDisposers.setKey(key, f());\r\n            }\r\n        }\r\n        else {\r\n            if (disposer != null) {\r\n                disposer.dispose();\r\n                this.eventDisposers.removeKey(key);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Disposes object.\r\n     */\r\n    InteractionObject.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        // Remove from all interaction registries\r\n        var interaction = getInteraction();\r\n        interaction.overObjects.removeValue(this);\r\n        interaction.downObjects.removeValue(this);\r\n        interaction.trackedObjects.removeValue(this);\r\n        interaction.transformedObjects.removeValue(this);\r\n        // Unlock document wheel\r\n        if (this.isHover && this.wheelable) {\r\n            interaction.unlockWheel();\r\n        }\r\n        if (interaction.focusedObject === this) {\r\n            interaction.focusedObject = undefined;\r\n        }\r\n    };\r\n    return InteractionObject;\r\n}(BaseObjectEvents));\r\nexport { InteractionObject };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}