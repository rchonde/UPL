{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.focus.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport core from \"./ui.grid_core.modules\";\nimport { each } from \"../../core/utils/iterator\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { isDefined, isBoolean } from \"../../core/utils/type\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nvar ROW_FOCUSED_CLASS = \"dx-row-focused\";\nvar FOCUSED_ROW_SELECTOR = \".dx-row.\" + ROW_FOCUSED_CLASS;\nvar TABLE_POSTFIX_CLASS = \"table\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar FocusController = core.ViewController.inherit(function () {\n  var members = {\n    init: function () {\n      this._dataController = this.getController(\"data\");\n      this._keyboardController = this.getController(\"keyboardNavigation\");\n      this.component._optionsByReference.focusedRowKey = true;\n    },\n    optionChanged: function (args) {\n      if (\"focusedRowIndex\" === args.name) {\n        var focusedRowKey = this.option(\"focusedRowKey\");\n\n        this._focusRowByIndex(args.value);\n\n        this._triggerFocusedRowChangedIfNeed(focusedRowKey, args.value);\n\n        args.handled = true;\n      } else if (\"focusedRowKey\" === args.name) {\n        args.handled = true;\n\n        if (Array.isArray(args.value) && JSON.stringify(args.value) === JSON.stringify(args.previousValue)) {\n          return;\n        }\n\n        var focusedRowIndex = this.option(\"focusedRowIndex\");\n\n        this._focusRowByKey(args.value);\n\n        this._triggerFocusedRowChangedIfNeed(args.value, focusedRowIndex);\n      } else if (\"focusedColumnIndex\" === args.name) {\n        args.handled = true;\n      } else if (\"focusedRowEnabled\" === args.name) {\n        args.handled = true;\n      } else if (\"autoNavigateToFocusedRow\" === args.name) {\n        args.handled = true;\n      } else {\n        this.callBase(args);\n      }\n    },\n    _triggerFocusedRowChangedIfNeed: function (focusedRowKey, focusedRowIndex) {\n      var focusedRowIndexByKey = this.getFocusedRowIndexByKey(focusedRowKey);\n\n      if (focusedRowIndex === focusedRowIndexByKey) {\n        var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\n\n        if (rowIndex >= 0) {\n          var $rowElement = $(this.getView(\"rowsView\").getRowElement(rowIndex));\n\n          this.getController(\"keyboardNavigation\")._fireFocusedRowChanged($rowElement, focusedRowIndex);\n        }\n      }\n    },\n    isAutoNavigateToFocusedRow: function () {\n      return \"infinite\" !== this.option(\"scrolling.mode\") && this.option(\"autoNavigateToFocusedRow\");\n    },\n    _focusRowByIndex: function (index, operationTypes) {\n      if (!this.option(\"focusedRowEnabled\")) {\n        return;\n      }\n\n      index = void 0 !== index ? index : this.option(\"focusedRowIndex\");\n\n      if (index < 0) {\n        if (this.isAutoNavigateToFocusedRow()) {\n          this._resetFocusedRow();\n        }\n      } else {\n        this._focusRowByIndexCore(index, operationTypes);\n      }\n    },\n    _focusRowByIndexCore: function (index, operationTypes) {\n      var dataController = this.getController(\"data\");\n      var pageSize = dataController.pageSize();\n\n      var setKeyByIndex = () => {\n        if (this._isValidFocusedRowIndex(index)) {\n          var rowIndex = index - dataController.getRowIndexOffset(true);\n\n          if (!operationTypes || operationTypes.paging && !operationTypes.filtering) {\n            var lastItemIndex = dataController._getLastItemIndex();\n\n            rowIndex = Math.min(rowIndex, lastItemIndex);\n          }\n\n          var focusedRowKey = dataController.getKeyByRowIndex(rowIndex, true);\n\n          if (isDefined(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {\n            this.option(\"focusedRowKey\", focusedRowKey);\n          }\n        }\n      };\n\n      if (pageSize >= 0) {\n        if (!this._isLocalRowIndex(index)) {\n          var pageIndex = Math.floor(index / dataController.pageSize());\n          when(dataController.pageIndex(pageIndex), dataController.waitReady()).done(() => {\n            setKeyByIndex();\n          });\n        } else {\n          setKeyByIndex();\n        }\n      }\n    },\n\n    _isLocalRowIndex(index) {\n      var dataController = this.getController(\"data\");\n\n      var isVirtualScrolling = this.getController(\"keyboardNavigation\")._isVirtualScrolling();\n\n      if (isVirtualScrolling) {\n        var pageIndex = Math.floor(index / dataController.pageSize());\n        var virtualItems = dataController.virtualItemsCount();\n        var virtualItemsBegin = virtualItems ? virtualItems.begin : -1;\n        var visibleRowsCount = dataController.getVisibleRows().length + dataController.getRowIndexOffset();\n        var visiblePagesCount = Math.ceil(visibleRowsCount / dataController.pageSize());\n        return virtualItemsBegin <= index && visiblePagesCount > pageIndex;\n      }\n\n      return true;\n    },\n\n    _setFocusedRowKeyByIndex: function (index) {\n      var dataController = this.getController(\"data\");\n\n      if (this._isValidFocusedRowIndex(index)) {\n        var rowIndex = Math.min(index - dataController.getRowIndexOffset(), dataController.items().length - 1);\n        var focusedRowKey = dataController.getKeyByRowIndex(rowIndex);\n\n        if (isDefined(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {\n          this.option(\"focusedRowKey\", focusedRowKey);\n        }\n      }\n    },\n    _focusRowByKey: function (key) {\n      if (!isDefined(key)) {\n        this._resetFocusedRow();\n      } else {\n        this._navigateToRow(key, true);\n      }\n    },\n    _resetFocusedRow: function () {\n      var focusedRowKey = this.option(\"focusedRowKey\");\n      var isFocusedRowKeyDefined = isDefined(focusedRowKey);\n\n      if (!isFocusedRowKeyDefined && this.option(\"focusedRowIndex\") < 0) {\n        return;\n      }\n\n      var keyboardController = this.getController(\"keyboardNavigation\");\n\n      if (isFocusedRowKeyDefined) {\n        this.option(\"focusedRowKey\", null);\n      }\n\n      keyboardController.setFocusedRowIndex(-1);\n      this.option(\"focusedRowIndex\", -1);\n      this.getController(\"data\").updateItems({\n        changeType: \"updateFocusedRow\",\n        focusedRowKey: null\n      });\n\n      keyboardController._fireFocusedRowChanged(void 0, -1);\n    },\n    _isValidFocusedRowIndex: function (rowIndex) {\n      var dataController = this.getController(\"data\");\n      var row = dataController.getVisibleRows()[rowIndex];\n      return !row || \"data\" === row.rowType || \"group\" === row.rowType;\n    },\n    publicMethods: function () {\n      return [\"navigateToRow\", \"isRowFocused\"];\n    },\n    navigateToRow: function (key) {\n      if (!this.isAutoNavigateToFocusedRow()) {\n        this.option(\"focusedRowIndex\", -1);\n      }\n\n      return this._navigateToRow(key);\n    },\n    _navigateToRow: function (key, needFocusRow) {\n      var that = this;\n      var dataController = that.getController(\"data\");\n      var isAutoNavigate = that.isAutoNavigateToFocusedRow();\n      var d = new Deferred();\n\n      if (void 0 === key || !dataController.dataSource()) {\n        return d.reject().promise();\n      }\n\n      var rowIndexByKey = that.getFocusedRowIndexByKey(key);\n\n      if (!isAutoNavigate && needFocusRow || rowIndexByKey >= 0) {\n        that._navigateTo(key, d, needFocusRow);\n      } else {\n        dataController.getPageIndexByKey(key).done(function (pageIndex) {\n          if (pageIndex < 0) {\n            d.resolve(-1);\n            return;\n          }\n\n          if (pageIndex === dataController.pageIndex()) {\n            dataController.reload().done(function () {\n              if (that.isRowFocused(key) && dataController.getRowIndexByKey(key) >= 0) {\n                d.resolve(that.getFocusedRowIndexByKey(key));\n              } else {\n                that._navigateTo(key, d, needFocusRow);\n              }\n            }).fail(d.reject);\n          } else {\n            dataController.pageIndex(pageIndex).done(function () {\n              that._navigateTo(key, d, needFocusRow);\n            }).fail(d.reject);\n          }\n        }).fail(d.reject);\n      }\n\n      return d.promise();\n    },\n    _navigateTo: function (key, deferred, needFocusRow) {\n      var visibleRowIndex = this.getController(\"data\").getRowIndexByKey(key);\n      var isVirtualRowRenderingMode = gridCoreUtils.isVirtualRowRendering(this);\n      var isAutoNavigate = this.isAutoNavigateToFocusedRow();\n\n      if (isAutoNavigate && isVirtualRowRenderingMode && visibleRowIndex < 0) {\n        this._navigateToVirtualRow(key, deferred, needFocusRow);\n      } else {\n        this._navigateToVisibleRow(key, deferred, needFocusRow);\n      }\n    },\n    _navigateToVisibleRow: function (key, deferred, needFocusRow) {\n      if (needFocusRow) {\n        this._triggerUpdateFocusedRow(key, deferred);\n      } else {\n        var focusedRowIndex = this.getFocusedRowIndexByKey(key);\n        this.getView(\"rowsView\").scrollToRowElement(key, deferred).done(function () {\n          deferred.resolve(focusedRowIndex);\n        });\n      }\n    },\n    _navigateToVirtualRow: function (key, deferred, needFocusRow) {\n      var that = this;\n      var dataController = this.getController(\"data\");\n      var rowsScrollController = dataController._rowsScrollController;\n      var rowIndex = gridCoreUtils.getIndexByKey(key, dataController.items(true));\n      var scrollable = that.getView(\"rowsView\").getScrollable();\n\n      if (rowsScrollController && scrollable && rowIndex >= 0) {\n        var focusedRowIndex = rowIndex + dataController.getRowIndexOffset(true);\n        var offset = rowsScrollController.getItemOffset(focusedRowIndex);\n        that.component.on(\"contentReady\", function triggerUpdateFocusedRow() {\n          that.component.off(\"contentReady\", triggerUpdateFocusedRow);\n\n          if (needFocusRow) {\n            that._triggerUpdateFocusedRow(key, deferred);\n          } else {\n            deferred.resolve(focusedRowIndex);\n          }\n        });\n        this.getView(\"rowsView\").scrollTopPosition(offset);\n      } else {\n        deferred.resolve(-1);\n      }\n    },\n    _triggerUpdateFocusedRow: function (key, deferred) {\n      var dataController = this.getController(\"data\");\n      var focusedRowIndex = this.getFocusedRowIndexByKey(key);\n\n      if (this._isValidFocusedRowIndex(focusedRowIndex)) {\n        var d;\n\n        if (this.option(\"focusedRowEnabled\")) {\n          dataController.updateItems({\n            changeType: \"updateFocusedRow\",\n            focusedRowKey: key\n          });\n        } else {\n          d = this.getView(\"rowsView\").scrollToRowElement(key);\n        }\n\n        when(d).done(() => {\n          this.getController(\"keyboardNavigation\").setFocusedRowIndex(focusedRowIndex);\n          deferred && deferred.resolve(focusedRowIndex);\n        });\n      } else {\n        deferred && deferred.resolve(-1);\n      }\n    },\n    getFocusedRowIndexByKey: function (key) {\n      var dataController = this.getController(\"data\");\n      var loadedRowIndex = dataController.getRowIndexByKey(key, true);\n      return loadedRowIndex >= 0 ? loadedRowIndex + dataController.getRowIndexOffset(true) : -1;\n    },\n    _focusRowByKeyOrIndex: function () {\n      var focusedRowKey = this.option(\"focusedRowKey\");\n      var currentFocusedRowIndex = this.option(\"focusedRowIndex\");\n      var keyboardController = this.getController(\"keyboardNavigation\");\n      var dataController = this.getController(\"data\");\n\n      if (isDefined(focusedRowKey)) {\n        var visibleRowIndex = dataController.getRowIndexByKey(focusedRowKey);\n\n        if (visibleRowIndex >= 0) {\n          if (keyboardController._isVirtualScrolling()) {\n            currentFocusedRowIndex = visibleRowIndex + dataController.getRowIndexOffset();\n          }\n\n          keyboardController.setFocusedRowIndex(currentFocusedRowIndex);\n\n          this._triggerUpdateFocusedRow(focusedRowKey);\n        } else {\n          this._navigateToRow(focusedRowKey, true).done(focusedRowIndex => {\n            if (currentFocusedRowIndex >= 0 && focusedRowIndex < 0) {\n              this._focusRowByIndex();\n            } else if (currentFocusedRowIndex < 0 && focusedRowIndex >= 0) {\n              keyboardController.setFocusedRowIndex(focusedRowIndex);\n            }\n          });\n        }\n      } else if (currentFocusedRowIndex >= 0) {\n        this.getController(\"focus\")._focusRowByIndex(currentFocusedRowIndex);\n      }\n    },\n    isRowFocused: function (key) {\n      var focusedRowKey = this.option(\"focusedRowKey\");\n\n      if (isDefined(focusedRowKey)) {\n        return equalByValue(key, this.option(\"focusedRowKey\"));\n      }\n    },\n    updateFocusedRow: function (change) {\n      var that = this;\n\n      var focusedRowIndex = that._dataController.getRowIndexByKey(change.focusedRowKey);\n\n      var rowsView = that.getView(\"rowsView\");\n      var $tableElement;\n      var $mainRow;\n      each(rowsView.getTableElements(), function (index, element) {\n        var isMainTable = 0 === index;\n        $tableElement = $(element);\n\n        that._clearPreviousFocusedRow($tableElement, focusedRowIndex);\n\n        var $row = that._prepareFocusedRow({\n          changedItem: that._dataController.getVisibleRows()[focusedRowIndex],\n          $tableElement: $tableElement,\n          focusedRowIndex: focusedRowIndex\n        });\n\n        if (isMainTable) {\n          $mainRow = $row;\n        }\n      });\n      $mainRow && rowsView.scrollToElementVertically($mainRow);\n    },\n    _clearPreviousFocusedRow: function ($tableElement, focusedRowIndex) {\n      var $prevRowFocusedElement = $tableElement.find(FOCUSED_ROW_SELECTOR).filter((_, focusedRow) => {\n        var $focusedRowTable = $(focusedRow).closest(\".\".concat(this.addWidgetPrefix(TABLE_POSTFIX_CLASS)));\n        return $tableElement.is($focusedRowTable);\n      });\n      $prevRowFocusedElement.removeClass(ROW_FOCUSED_CLASS).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabindex\");\n      $prevRowFocusedElement.children(\"td\").removeAttr(\"tabindex\");\n\n      if (0 !== focusedRowIndex) {\n        var $firstRow = $(this.getView(\"rowsView\").getRowElement(0));\n        $firstRow.removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabIndex\");\n      }\n    },\n    _prepareFocusedRow: function (options) {\n      var $row;\n      var changedItem = options.changedItem;\n\n      if (changedItem && (\"data\" === changedItem.rowType || \"group\" === changedItem.rowType)) {\n        var focusedRowIndex = options.focusedRowIndex;\n        var $tableElement = options.$tableElement;\n        var tabIndex = this.option(\"tabindex\") || 0;\n        var rowsView = this.getView(\"rowsView\");\n        $row = $(rowsView._getRowElements($tableElement).eq(focusedRowIndex));\n        $row.addClass(ROW_FOCUSED_CLASS).attr(\"tabindex\", tabIndex);\n      }\n\n      return $row;\n    }\n  };\n  return members;\n}());\nexport var focusModule = {\n  defaultOptions: function () {\n    return {\n      focusedRowEnabled: false,\n      autoNavigateToFocusedRow: true,\n      focusedRowKey: null,\n      focusedRowIndex: -1,\n      focusedColumnIndex: -1\n    };\n  },\n  controllers: {\n    focus: FocusController\n  },\n  extenders: {\n    controllers: {\n      keyboardNavigation: {\n        init: function () {\n          var rowIndex = this.option(\"focusedRowIndex\");\n          var columnIndex = this.option(\"focusedColumnIndex\");\n          this.createAction(\"onFocusedRowChanging\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedRowChanged\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedCellChanging\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.createAction(\"onFocusedCellChanged\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          });\n          this.callBase();\n          this.setRowFocusType();\n          this._focusedCellPosition = {};\n\n          if (isDefined(rowIndex) && rowIndex >= 0) {\n            this._focusedCellPosition.rowIndex = rowIndex;\n          }\n\n          if (isDefined(columnIndex) && columnIndex >= 0) {\n            this._focusedCellPosition.columnIndex = columnIndex;\n          }\n        },\n        setFocusedRowIndex: function (rowIndex) {\n          var dataController = this.getController(\"data\");\n          this.callBase(rowIndex);\n          var visibleRowIndex = rowIndex - dataController.getRowIndexOffset();\n          var visibleRow = dataController.getVisibleRows()[visibleRowIndex];\n\n          if (!visibleRow || !visibleRow.isNewRow) {\n            this.option(\"focusedRowIndex\", rowIndex);\n          }\n        },\n        setFocusedColumnIndex: function (columnIndex) {\n          this.callBase(columnIndex);\n          this.option(\"focusedColumnIndex\", columnIndex);\n        },\n        _escapeKeyHandler: function (eventArgs, isEditing) {\n          if (isEditing || !this.option(\"focusedRowEnabled\")) {\n            this.callBase(eventArgs, isEditing);\n            return;\n          }\n\n          if (this.isCellFocusType()) {\n            this.setRowFocusType();\n\n            this._focus(this._getCellElementFromTarget(eventArgs.originalEvent.target), true);\n          }\n        },\n        _updateFocusedCellPosition: function ($cell, direction) {\n          var prevRowIndex = this.option(\"focusedRowIndex\");\n          var prevColumnIndex = this.option(\"focusedColumnIndex\");\n          var position = this.callBase($cell, direction);\n\n          if (position && position.columnIndex >= 0) {\n            this._fireFocusedCellChanged($cell, prevColumnIndex, prevRowIndex);\n          }\n        }\n      },\n      editorFactory: {\n        renderFocusOverlay: function ($element, hideBorder) {\n          var keyboardController = this.getController(\"keyboardNavigation\");\n          var focusedRowEnabled = this.option(\"focusedRowEnabled\");\n          var editingController = this.getController(\"editing\");\n          var $cell;\n\n          if (!focusedRowEnabled || !(null !== keyboardController && void 0 !== keyboardController && keyboardController.isRowFocusType()) || editingController.isEditing()) {\n            this.callBase($element, hideBorder);\n          } else if (focusedRowEnabled) {\n            var isRowElement = \"row\" === keyboardController._getElementType($element);\n\n            if (isRowElement && !$element.hasClass(ROW_FOCUSED_CLASS)) {\n              $cell = keyboardController.getFirstValidCellInRow($element);\n              keyboardController.focus($cell);\n            }\n          }\n        }\n      },\n      columns: {\n        getSortDataSourceParameters: function (_, sortByKey) {\n          var result = this.callBase.apply(this, arguments);\n          var dataController = this.getController(\"data\");\n          var dataSource = dataController._dataSource;\n          var store = dataController.store();\n          var key = store && store.key();\n          var remoteOperations = dataSource && dataSource.remoteOperations() || {};\n          var isLocalOperations = Object.keys(remoteOperations).every(operationName => !remoteOperations[operationName]);\n\n          if (key && (this.option(\"focusedRowEnabled\") && false !== this.getController(\"focus\").isAutoNavigateToFocusedRow() || sortByKey)) {\n            key = Array.isArray(key) ? key : [key];\n            var notSortedKeys = key.filter(key => !this.columnOption(key, \"sortOrder\"));\n\n            if (notSortedKeys.length) {\n              result = result || [];\n\n              if (isLocalOperations) {\n                result.push({\n                  selector: dataSource.getDataIndexGetter(),\n                  desc: false\n                });\n              } else {\n                notSortedKeys.forEach(notSortedKey => result.push({\n                  selector: notSortedKey,\n                  desc: false\n                }));\n              }\n            }\n          }\n\n          return result;\n        }\n      },\n      data: {\n        _applyChange: function (change) {\n          if (change && \"updateFocusedRow\" === change.changeType) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _fireChanged: function (e) {\n          this.callBase(e);\n\n          if (this.option(\"focusedRowEnabled\") && this._dataSource) {\n            var isPartialUpdate = \"update\" === e.changeType && e.repaintChangesOnly;\n            var isPartialUpdateWithDeleting = isPartialUpdate && e.changeTypes && e.changeTypes.indexOf(\"remove\") >= 0;\n\n            if (\"refresh\" === e.changeType && e.items.length || isPartialUpdateWithDeleting) {\n              this._updatePageIndexes();\n\n              this.processUpdateFocusedRow(e);\n            } else if (\"append\" === e.changeType || \"prepend\" === e.changeType) {\n              this._updatePageIndexes();\n            } else if (\"update\" === e.changeType && e.repaintChangesOnly) {\n              this.processUpdateFocusedRow(e);\n            }\n          }\n        },\n        _updatePageIndexes: function () {\n          var prevRenderingPageIndex = this._lastRenderingPageIndex || 0;\n          var renderingPageIndex = this._rowsScrollController ? this._rowsScrollController.pageIndex() : 0;\n          this._lastRenderingPageIndex = renderingPageIndex;\n          this._isPagingByRendering = renderingPageIndex !== prevRenderingPageIndex;\n        },\n        isPagingByRendering: function () {\n          return this._isPagingByRendering;\n        },\n        processUpdateFocusedRow: function (e) {\n          var operationTypes = e.operationTypes || {};\n          var focusController = this.getController(\"focus\");\n          var {\n            reload: reload,\n            fullReload: fullReload\n          } = operationTypes;\n          var keyboardController = this.getController(\"keyboardNavigation\");\n\n          var isVirtualScrolling = keyboardController._isVirtualScrolling();\n\n          var focusedRowKey = this.option(\"focusedRowKey\");\n          var isAutoNavigate = focusController.isAutoNavigateToFocusedRow();\n\n          if (reload && !fullReload && isDefined(focusedRowKey)) {\n            focusController._navigateToRow(focusedRowKey, true).done(function (focusedRowIndex) {\n              if (focusedRowIndex < 0) {\n                focusController._focusRowByIndex(void 0, operationTypes);\n              }\n            });\n          } else if (operationTypes.paging && !isVirtualScrolling) {\n            if (isAutoNavigate) {\n              var rowIndexByKey = this.getRowIndexByKey(focusedRowKey);\n              var isValidRowIndexByKey = rowIndexByKey >= 0;\n              var focusedRowIndex = this.option(\"focusedRowIndex\");\n              var needFocusRowByIndex = focusedRowIndex >= 0 && (focusedRowIndex === rowIndexByKey || !isValidRowIndexByKey);\n\n              if (needFocusRowByIndex) {\n                focusController._focusRowByIndex(void 0, operationTypes);\n              }\n            } else if (this.getRowIndexByKey(focusedRowKey) < 0) {\n              this.option(\"focusedRowIndex\", -1);\n            }\n          } else if (operationTypes.fullReload) {\n            focusController._focusRowByKeyOrIndex();\n          }\n        },\n        getPageIndexByKey: function (key) {\n          var that = this;\n          var d = new Deferred();\n          that.getGlobalRowIndexByKey(key).done(function (globalIndex) {\n            d.resolve(globalIndex >= 0 ? Math.floor(globalIndex / that.pageSize()) : -1);\n          }).fail(d.reject);\n          return d.promise();\n        },\n        getGlobalRowIndexByKey: function (key) {\n          if (this._dataSource.group()) {\n            return this._calculateGlobalRowIndexByGroupedData(key);\n          }\n\n          return this._calculateGlobalRowIndexByFlatData(key);\n        },\n        _calculateGlobalRowIndexByFlatData: function (key, groupFilter, useGroup) {\n          var that = this;\n          var deferred = new Deferred();\n          var dataSource = that._dataSource;\n\n          if (Array.isArray(key)) {\n            return deferred.resolve(-1).promise();\n          }\n\n          var filter = that._generateFilterByKey(key);\n\n          dataSource.load({\n            filter: that._concatWithCombinedFilter(filter),\n            skip: 0,\n            take: 1\n          }).done(function (data) {\n            if (data.length > 0) {\n              filter = that._generateOperationFilterByKey(key, data[0], useGroup);\n              dataSource.load({\n                filter: that._concatWithCombinedFilter(filter, groupFilter),\n                skip: 0,\n                take: 1,\n                requireTotalCount: true\n              }).done(function (_, extra) {\n                deferred.resolve(extra.totalCount);\n              });\n            } else {\n              deferred.resolve(-1);\n            }\n          });\n          return deferred.promise();\n        },\n        _concatWithCombinedFilter: function (filter, groupFilter) {\n          var combinedFilter = this.getCombinedFilter();\n          return gridCoreUtils.combineFilters([filter, combinedFilter, groupFilter]);\n        },\n        _generateBooleanFilter: function (selector, value, sortInfo) {\n          var result;\n\n          if (false === value) {\n            result = [selector, \"=\", sortInfo.desc ? true : null];\n          } else if (true === value ? !sortInfo.desc : sortInfo.desc) {\n            result = [selector, \"<>\", value];\n          }\n\n          return result;\n        },\n        _generateOperationFilterByKey: function (key, rowData, useGroup) {\n          var that = this;\n          var dataSource = that._dataSource;\n\n          var filter = that._generateFilterByKey(key, \"<\");\n\n          var sort = that._columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().filtering, true);\n\n          if (useGroup) {\n            var group = that._columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().filtering);\n\n            if (group) {\n              sort = sort ? group.concat(sort) : group;\n            }\n          }\n\n          if (sort) {\n            sort.slice().reverse().forEach(function (sortInfo) {\n              var selector = sortInfo.selector;\n              var getter;\n\n              if (\"function\" === typeof selector) {\n                getter = selector;\n              } else {\n                getter = that._columnsController.columnOption(selector, \"selector\");\n              }\n\n              var value = getter ? getter(rowData) : rowData[selector];\n              filter = [[selector, \"=\", value], \"and\", filter];\n\n              if (null === value || isBoolean(value)) {\n                var booleanFilter = that._generateBooleanFilter(selector, value, sortInfo);\n\n                if (booleanFilter) {\n                  filter = [booleanFilter, \"or\", filter];\n                }\n              } else {\n                var filterOperation = sortInfo.desc ? \">\" : \"<\";\n                var sortFilter;\n\n                if (sortInfo.compare) {\n                  sortFilter = data => {\n                    if (\"<\" === filterOperation) {\n                      return sortInfo.compare(value, getter(data)) >= 1;\n                    } else {\n                      return sortInfo.compare(value, getter(data)) <= -1;\n                    }\n                  };\n                } else {\n                  sortFilter = [selector, filterOperation, value];\n\n                  if (!sortInfo.desc) {\n                    sortFilter = [sortFilter, \"or\", [selector, \"=\", null]];\n                  }\n                }\n\n                filter = [sortFilter, \"or\", filter];\n              }\n            });\n          }\n\n          return filter;\n        },\n        _generateFilterByKey: function (key, operation) {\n          var dataSourceKey = this._dataSource.key();\n\n          var filter = [];\n\n          if (!operation) {\n            operation = \"=\";\n          }\n\n          if (Array.isArray(dataSourceKey)) {\n            for (var i = 0; i < dataSourceKey.length; ++i) {\n              var keyPart = key[dataSourceKey[i]];\n\n              if (keyPart) {\n                if (filter.length > 0) {\n                  filter.push(\"and\");\n                }\n\n                filter.push([dataSourceKey[i], operation, keyPart]);\n              }\n            }\n          } else {\n            filter = [dataSourceKey, operation, key];\n          }\n\n          return filter;\n        },\n        _getLastItemIndex: function () {\n          return this.items(true).length - 1;\n        }\n      },\n      editing: {\n        _deleteRowCore: function (rowIndex) {\n          var deferred = this.callBase.apply(this, arguments);\n          var dataController = this.getController(\"data\");\n          var rowKey = dataController.getKeyByRowIndex(rowIndex);\n          deferred.done(() => {\n            var rowIndex = dataController.getRowIndexByKey(rowKey);\n            var visibleRows = dataController.getVisibleRows();\n\n            if (-1 === rowIndex && !visibleRows.length) {\n              this.getController(\"focus\")._resetFocusedRow();\n            }\n          });\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (this.option(\"focusedRowEnabled\") && row) {\n            if (this.getController(\"focus\").isRowFocused(row.key)) {\n              $row.addClass(ROW_FOCUSED_CLASS);\n            }\n          }\n\n          return $row;\n        },\n        _checkRowKeys: function (options) {\n          this.callBase.apply(this, arguments);\n\n          if (this.option(\"focusedRowEnabled\") && this.option(\"dataSource\")) {\n            var store = this._dataController.store();\n\n            if (store && !store.key()) {\n              this._dataController.fireError(\"E1042\", \"Row focusing\");\n            }\n          }\n        },\n        _update: function (change) {\n          if (\"updateFocusedRow\" === change.changeType) {\n            if (this.option(\"focusedRowEnabled\")) {\n              this.getController(\"focus\").updateFocusedRow(change);\n            }\n          } else {\n            this.callBase(change);\n          }\n        },\n        updateFocusElementTabIndex: function ($cellElements, preventScroll) {\n          var rowIndex = this.getController(\"keyboardNavigation\").getVisibleRowIndex();\n\n          var row = this._dataController.getVisibleRows()[rowIndex];\n\n          if (this.option(\"focusedRowEnabled\") && !(null !== row && void 0 !== row && row.isNewRow)) {\n            this._setFocusedRowElementTabIndex(preventScroll);\n          } else {\n            this.callBase($cellElements);\n          }\n        },\n        _setFocusedRowElementTabIndex: function (preventScroll) {\n          var focusedRowKey = this.option(\"focusedRowKey\");\n          var tabIndex = this.option(\"tabIndex\") || 0;\n          var dataController = this._dataController;\n          var columnsController = this._columnsController;\n          var rowIndex = dataController.getRowIndexByKey(focusedRowKey);\n          var columnIndex = this.option(\"focusedColumnIndex\");\n\n          var $row = this._findRowElementForTabIndex();\n\n          if (!isDefined(this._scrollToFocusOnResize)) {\n            this._scrollToFocusOnResize = () => {\n              this.scrollToElementVertically(this._findRowElementForTabIndex());\n              this.resizeCompleted.remove(this._scrollToFocusOnResize);\n            };\n          }\n\n          $row.attr(\"tabIndex\", tabIndex);\n\n          if (rowIndex >= 0 && !preventScroll) {\n            if (columnIndex < 0) {\n              columnIndex = 0;\n            }\n\n            rowIndex += dataController.getRowIndexOffset();\n            columnIndex += columnsController.getColumnIndexOffset();\n            this.getController(\"keyboardNavigation\").setFocusedCellPosition(rowIndex, columnIndex);\n\n            if (this.getController(\"focus\").isAutoNavigateToFocusedRow()) {\n              var dataSource = dataController.dataSource();\n              var operationTypes = dataSource && dataSource.operationTypes();\n\n              if (operationTypes && !operationTypes.paging && !dataController.isPagingByRendering()) {\n                this.resizeCompleted.remove(this._scrollToFocusOnResize);\n                this.resizeCompleted.add(this._scrollToFocusOnResize);\n              }\n            }\n          }\n        },\n        _findRowElementForTabIndex: function () {\n          var focusedRowKey = this.option(\"focusedRowKey\");\n\n          var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\n\n          return $(this.getRowElement(rowIndex >= 0 ? rowIndex : 0));\n        },\n        scrollToRowElement: function (key) {\n          var rowIndex = this.getController(\"data\").getRowIndexByKey(key);\n          var $row = $(this.getRow(rowIndex));\n          return this.scrollToElementVertically($row);\n        },\n        scrollToElementVertically: function ($row) {\n          var scrollable = this.getScrollable();\n\n          if (scrollable && $row.length) {\n            var position = scrollable.getScrollElementPosition($row, \"vertical\");\n            return this.scrollTopPosition(position);\n          }\n\n          return new Deferred().resolve();\n        },\n        scrollTopPosition: function (scrollTop) {\n          var d = new Deferred();\n          var scrollable = this.getScrollable();\n\n          if (scrollable) {\n            var currentScrollTop = scrollable.scrollTop();\n\n            var scrollHandler = () => {\n              scrollable.off(\"scroll\", scrollHandler);\n              d.resolve();\n            };\n\n            if (scrollTop !== currentScrollTop) {\n              scrollable.on(\"scroll\", scrollHandler);\n\n              this._dataController.resetFilterApplying();\n\n              scrollable.scrollTo({\n                top: scrollTop\n              });\n              return d.promise();\n            }\n          }\n\n          return d.resolve();\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["$","core","each","gridCoreUtils","equalByValue","isDefined","isBoolean","Deferred","when","ROW_FOCUSED_CLASS","FOCUSED_ROW_SELECTOR","TABLE_POSTFIX_CLASS","CELL_FOCUS_DISABLED_CLASS","FocusController","ViewController","inherit","members","init","_dataController","getController","_keyboardController","component","_optionsByReference","focusedRowKey","optionChanged","args","name","option","_focusRowByIndex","value","_triggerFocusedRowChangedIfNeed","handled","Array","isArray","JSON","stringify","previousValue","focusedRowIndex","_focusRowByKey","callBase","focusedRowIndexByKey","getFocusedRowIndexByKey","rowIndex","getRowIndexByKey","$rowElement","getView","getRowElement","_fireFocusedRowChanged","isAutoNavigateToFocusedRow","index","operationTypes","_resetFocusedRow","_focusRowByIndexCore","dataController","pageSize","setKeyByIndex","_isValidFocusedRowIndex","getRowIndexOffset","paging","filtering","lastItemIndex","_getLastItemIndex","Math","min","getKeyByRowIndex","isRowFocused","_isLocalRowIndex","pageIndex","floor","waitReady","done","isVirtualScrolling","_isVirtualScrolling","virtualItems","virtualItemsCount","virtualItemsBegin","begin","visibleRowsCount","getVisibleRows","length","visiblePagesCount","ceil","_setFocusedRowKeyByIndex","items","key","_navigateToRow","isFocusedRowKeyDefined","keyboardController","setFocusedRowIndex","updateItems","changeType","row","rowType","publicMethods","navigateToRow","needFocusRow","that","isAutoNavigate","d","dataSource","reject","promise","rowIndexByKey","_navigateTo","getPageIndexByKey","resolve","reload","fail","deferred","visibleRowIndex","isVirtualRowRenderingMode","isVirtualRowRendering","_navigateToVirtualRow","_navigateToVisibleRow","_triggerUpdateFocusedRow","scrollToRowElement","rowsScrollController","_rowsScrollController","getIndexByKey","scrollable","getScrollable","offset","getItemOffset","on","triggerUpdateFocusedRow","off","scrollTopPosition","loadedRowIndex","_focusRowByKeyOrIndex","currentFocusedRowIndex","updateFocusedRow","change","rowsView","$tableElement","$mainRow","getTableElements","element","isMainTable","_clearPreviousFocusedRow","$row","_prepareFocusedRow","changedItem","scrollToElementVertically","$prevRowFocusedElement","find","filter","_","focusedRow","$focusedRowTable","closest","concat","addWidgetPrefix","is","removeClass","removeAttr","children","$firstRow","options","tabIndex","_getRowElements","eq","addClass","attr","focusModule","defaultOptions","focusedRowEnabled","autoNavigateToFocusedRow","focusedColumnIndex","controllers","focus","extenders","keyboardNavigation","columnIndex","createAction","excludeValidators","setRowFocusType","_focusedCellPosition","visibleRow","isNewRow","setFocusedColumnIndex","_escapeKeyHandler","eventArgs","isEditing","isCellFocusType","_focus","_getCellElementFromTarget","originalEvent","target","_updateFocusedCellPosition","$cell","direction","prevRowIndex","prevColumnIndex","position","_fireFocusedCellChanged","editorFactory","renderFocusOverlay","$element","hideBorder","editingController","isRowFocusType","isRowElement","_getElementType","hasClass","getFirstValidCellInRow","columns","getSortDataSourceParameters","sortByKey","result","apply","arguments","_dataSource","store","remoteOperations","isLocalOperations","Object","keys","every","operationName","notSortedKeys","columnOption","push","selector","getDataIndexGetter","desc","forEach","notSortedKey","data","_applyChange","_fireChanged","e","isPartialUpdate","repaintChangesOnly","isPartialUpdateWithDeleting","changeTypes","indexOf","_updatePageIndexes","processUpdateFocusedRow","prevRenderingPageIndex","_lastRenderingPageIndex","renderingPageIndex","_isPagingByRendering","isPagingByRendering","focusController","fullReload","isValidRowIndexByKey","needFocusRowByIndex","getGlobalRowIndexByKey","globalIndex","group","_calculateGlobalRowIndexByGroupedData","_calculateGlobalRowIndexByFlatData","groupFilter","useGroup","_generateFilterByKey","load","_concatWithCombinedFilter","skip","take","_generateOperationFilterByKey","requireTotalCount","extra","totalCount","combinedFilter","getCombinedFilter","combineFilters","_generateBooleanFilter","sortInfo","rowData","sort","_columnsController","getGroupDataSourceParameters","slice","reverse","getter","booleanFilter","filterOperation","sortFilter","compare","operation","dataSourceKey","i","keyPart","editing","_deleteRowCore","rowKey","visibleRows","views","_createRow","_checkRowKeys","fireError","_update","updateFocusElementTabIndex","$cellElements","preventScroll","getVisibleRowIndex","_setFocusedRowElementTabIndex","columnsController","_findRowElementForTabIndex","_scrollToFocusOnResize","resizeCompleted","remove","getColumnIndexOffset","setFocusedCellPosition","add","getRow","getScrollElementPosition","scrollTop","currentScrollTop","scrollHandler","resetFilterApplying","scrollTo","top"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.focus.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.focus.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport core from \"./ui.grid_core.modules\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    isDefined,\r\n    isBoolean\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../core/utils/deferred\";\r\nvar ROW_FOCUSED_CLASS = \"dx-row-focused\";\r\nvar FOCUSED_ROW_SELECTOR = \".dx-row.\" + ROW_FOCUSED_CLASS;\r\nvar TABLE_POSTFIX_CLASS = \"table\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar FocusController = core.ViewController.inherit(function() {\r\n    var members = {\r\n        init: function() {\r\n            this._dataController = this.getController(\"data\");\r\n            this._keyboardController = this.getController(\"keyboardNavigation\");\r\n            this.component._optionsByReference.focusedRowKey = true\r\n        },\r\n        optionChanged: function(args) {\r\n            if (\"focusedRowIndex\" === args.name) {\r\n                var focusedRowKey = this.option(\"focusedRowKey\");\r\n                this._focusRowByIndex(args.value);\r\n                this._triggerFocusedRowChangedIfNeed(focusedRowKey, args.value);\r\n                args.handled = true\r\n            } else if (\"focusedRowKey\" === args.name) {\r\n                args.handled = true;\r\n                if (Array.isArray(args.value) && JSON.stringify(args.value) === JSON.stringify(args.previousValue)) {\r\n                    return\r\n                }\r\n                var focusedRowIndex = this.option(\"focusedRowIndex\");\r\n                this._focusRowByKey(args.value);\r\n                this._triggerFocusedRowChangedIfNeed(args.value, focusedRowIndex)\r\n            } else if (\"focusedColumnIndex\" === args.name) {\r\n                args.handled = true\r\n            } else if (\"focusedRowEnabled\" === args.name) {\r\n                args.handled = true\r\n            } else if (\"autoNavigateToFocusedRow\" === args.name) {\r\n                args.handled = true\r\n            } else {\r\n                this.callBase(args)\r\n            }\r\n        },\r\n        _triggerFocusedRowChangedIfNeed: function(focusedRowKey, focusedRowIndex) {\r\n            var focusedRowIndexByKey = this.getFocusedRowIndexByKey(focusedRowKey);\r\n            if (focusedRowIndex === focusedRowIndexByKey) {\r\n                var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\r\n                if (rowIndex >= 0) {\r\n                    var $rowElement = $(this.getView(\"rowsView\").getRowElement(rowIndex));\r\n                    this.getController(\"keyboardNavigation\")._fireFocusedRowChanged($rowElement, focusedRowIndex)\r\n                }\r\n            }\r\n        },\r\n        isAutoNavigateToFocusedRow: function() {\r\n            return \"infinite\" !== this.option(\"scrolling.mode\") && this.option(\"autoNavigateToFocusedRow\")\r\n        },\r\n        _focusRowByIndex: function(index, operationTypes) {\r\n            if (!this.option(\"focusedRowEnabled\")) {\r\n                return\r\n            }\r\n            index = void 0 !== index ? index : this.option(\"focusedRowIndex\");\r\n            if (index < 0) {\r\n                if (this.isAutoNavigateToFocusedRow()) {\r\n                    this._resetFocusedRow()\r\n                }\r\n            } else {\r\n                this._focusRowByIndexCore(index, operationTypes)\r\n            }\r\n        },\r\n        _focusRowByIndexCore: function(index, operationTypes) {\r\n            var dataController = this.getController(\"data\");\r\n            var pageSize = dataController.pageSize();\r\n            var setKeyByIndex = () => {\r\n                if (this._isValidFocusedRowIndex(index)) {\r\n                    var rowIndex = index - dataController.getRowIndexOffset(true);\r\n                    if (!operationTypes || operationTypes.paging && !operationTypes.filtering) {\r\n                        var lastItemIndex = dataController._getLastItemIndex();\r\n                        rowIndex = Math.min(rowIndex, lastItemIndex)\r\n                    }\r\n                    var focusedRowKey = dataController.getKeyByRowIndex(rowIndex, true);\r\n                    if (isDefined(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {\r\n                        this.option(\"focusedRowKey\", focusedRowKey)\r\n                    }\r\n                }\r\n            };\r\n            if (pageSize >= 0) {\r\n                if (!this._isLocalRowIndex(index)) {\r\n                    var pageIndex = Math.floor(index / dataController.pageSize());\r\n                    when(dataController.pageIndex(pageIndex), dataController.waitReady()).done(() => {\r\n                        setKeyByIndex()\r\n                    })\r\n                } else {\r\n                    setKeyByIndex()\r\n                }\r\n            }\r\n        },\r\n        _isLocalRowIndex(index) {\r\n            var dataController = this.getController(\"data\");\r\n            var isVirtualScrolling = this.getController(\"keyboardNavigation\")._isVirtualScrolling();\r\n            if (isVirtualScrolling) {\r\n                var pageIndex = Math.floor(index / dataController.pageSize());\r\n                var virtualItems = dataController.virtualItemsCount();\r\n                var virtualItemsBegin = virtualItems ? virtualItems.begin : -1;\r\n                var visibleRowsCount = dataController.getVisibleRows().length + dataController.getRowIndexOffset();\r\n                var visiblePagesCount = Math.ceil(visibleRowsCount / dataController.pageSize());\r\n                return virtualItemsBegin <= index && visiblePagesCount > pageIndex\r\n            }\r\n            return true\r\n        },\r\n        _setFocusedRowKeyByIndex: function(index) {\r\n            var dataController = this.getController(\"data\");\r\n            if (this._isValidFocusedRowIndex(index)) {\r\n                var rowIndex = Math.min(index - dataController.getRowIndexOffset(), dataController.items().length - 1);\r\n                var focusedRowKey = dataController.getKeyByRowIndex(rowIndex);\r\n                if (isDefined(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {\r\n                    this.option(\"focusedRowKey\", focusedRowKey)\r\n                }\r\n            }\r\n        },\r\n        _focusRowByKey: function(key) {\r\n            if (!isDefined(key)) {\r\n                this._resetFocusedRow()\r\n            } else {\r\n                this._navigateToRow(key, true)\r\n            }\r\n        },\r\n        _resetFocusedRow: function() {\r\n            var focusedRowKey = this.option(\"focusedRowKey\");\r\n            var isFocusedRowKeyDefined = isDefined(focusedRowKey);\r\n            if (!isFocusedRowKeyDefined && this.option(\"focusedRowIndex\") < 0) {\r\n                return\r\n            }\r\n            var keyboardController = this.getController(\"keyboardNavigation\");\r\n            if (isFocusedRowKeyDefined) {\r\n                this.option(\"focusedRowKey\", null)\r\n            }\r\n            keyboardController.setFocusedRowIndex(-1);\r\n            this.option(\"focusedRowIndex\", -1);\r\n            this.getController(\"data\").updateItems({\r\n                changeType: \"updateFocusedRow\",\r\n                focusedRowKey: null\r\n            });\r\n            keyboardController._fireFocusedRowChanged(void 0, -1)\r\n        },\r\n        _isValidFocusedRowIndex: function(rowIndex) {\r\n            var dataController = this.getController(\"data\");\r\n            var row = dataController.getVisibleRows()[rowIndex];\r\n            return !row || \"data\" === row.rowType || \"group\" === row.rowType\r\n        },\r\n        publicMethods: function() {\r\n            return [\"navigateToRow\", \"isRowFocused\"]\r\n        },\r\n        navigateToRow: function(key) {\r\n            if (!this.isAutoNavigateToFocusedRow()) {\r\n                this.option(\"focusedRowIndex\", -1)\r\n            }\r\n            return this._navigateToRow(key)\r\n        },\r\n        _navigateToRow: function(key, needFocusRow) {\r\n            var that = this;\r\n            var dataController = that.getController(\"data\");\r\n            var isAutoNavigate = that.isAutoNavigateToFocusedRow();\r\n            var d = new Deferred;\r\n            if (void 0 === key || !dataController.dataSource()) {\r\n                return d.reject().promise()\r\n            }\r\n            var rowIndexByKey = that.getFocusedRowIndexByKey(key);\r\n            if (!isAutoNavigate && needFocusRow || rowIndexByKey >= 0) {\r\n                that._navigateTo(key, d, needFocusRow)\r\n            } else {\r\n                dataController.getPageIndexByKey(key).done((function(pageIndex) {\r\n                    if (pageIndex < 0) {\r\n                        d.resolve(-1);\r\n                        return\r\n                    }\r\n                    if (pageIndex === dataController.pageIndex()) {\r\n                        dataController.reload().done((function() {\r\n                            if (that.isRowFocused(key) && dataController.getRowIndexByKey(key) >= 0) {\r\n                                d.resolve(that.getFocusedRowIndexByKey(key))\r\n                            } else {\r\n                                that._navigateTo(key, d, needFocusRow)\r\n                            }\r\n                        })).fail(d.reject)\r\n                    } else {\r\n                        dataController.pageIndex(pageIndex).done((function() {\r\n                            that._navigateTo(key, d, needFocusRow)\r\n                        })).fail(d.reject)\r\n                    }\r\n                })).fail(d.reject)\r\n            }\r\n            return d.promise()\r\n        },\r\n        _navigateTo: function(key, deferred, needFocusRow) {\r\n            var visibleRowIndex = this.getController(\"data\").getRowIndexByKey(key);\r\n            var isVirtualRowRenderingMode = gridCoreUtils.isVirtualRowRendering(this);\r\n            var isAutoNavigate = this.isAutoNavigateToFocusedRow();\r\n            if (isAutoNavigate && isVirtualRowRenderingMode && visibleRowIndex < 0) {\r\n                this._navigateToVirtualRow(key, deferred, needFocusRow)\r\n            } else {\r\n                this._navigateToVisibleRow(key, deferred, needFocusRow)\r\n            }\r\n        },\r\n        _navigateToVisibleRow: function(key, deferred, needFocusRow) {\r\n            if (needFocusRow) {\r\n                this._triggerUpdateFocusedRow(key, deferred)\r\n            } else {\r\n                var focusedRowIndex = this.getFocusedRowIndexByKey(key);\r\n                this.getView(\"rowsView\").scrollToRowElement(key, deferred).done((function() {\r\n                    deferred.resolve(focusedRowIndex)\r\n                }))\r\n            }\r\n        },\r\n        _navigateToVirtualRow: function(key, deferred, needFocusRow) {\r\n            var that = this;\r\n            var dataController = this.getController(\"data\");\r\n            var rowsScrollController = dataController._rowsScrollController;\r\n            var rowIndex = gridCoreUtils.getIndexByKey(key, dataController.items(true));\r\n            var scrollable = that.getView(\"rowsView\").getScrollable();\r\n            if (rowsScrollController && scrollable && rowIndex >= 0) {\r\n                var focusedRowIndex = rowIndex + dataController.getRowIndexOffset(true);\r\n                var offset = rowsScrollController.getItemOffset(focusedRowIndex);\r\n                that.component.on(\"contentReady\", (function triggerUpdateFocusedRow() {\r\n                    that.component.off(\"contentReady\", triggerUpdateFocusedRow);\r\n                    if (needFocusRow) {\r\n                        that._triggerUpdateFocusedRow(key, deferred)\r\n                    } else {\r\n                        deferred.resolve(focusedRowIndex)\r\n                    }\r\n                }));\r\n                this.getView(\"rowsView\").scrollTopPosition(offset)\r\n            } else {\r\n                deferred.resolve(-1)\r\n            }\r\n        },\r\n        _triggerUpdateFocusedRow: function(key, deferred) {\r\n            var dataController = this.getController(\"data\");\r\n            var focusedRowIndex = this.getFocusedRowIndexByKey(key);\r\n            if (this._isValidFocusedRowIndex(focusedRowIndex)) {\r\n                var d;\r\n                if (this.option(\"focusedRowEnabled\")) {\r\n                    dataController.updateItems({\r\n                        changeType: \"updateFocusedRow\",\r\n                        focusedRowKey: key\r\n                    })\r\n                } else {\r\n                    d = this.getView(\"rowsView\").scrollToRowElement(key)\r\n                }\r\n                when(d).done(() => {\r\n                    this.getController(\"keyboardNavigation\").setFocusedRowIndex(focusedRowIndex);\r\n                    deferred && deferred.resolve(focusedRowIndex)\r\n                })\r\n            } else {\r\n                deferred && deferred.resolve(-1)\r\n            }\r\n        },\r\n        getFocusedRowIndexByKey: function(key) {\r\n            var dataController = this.getController(\"data\");\r\n            var loadedRowIndex = dataController.getRowIndexByKey(key, true);\r\n            return loadedRowIndex >= 0 ? loadedRowIndex + dataController.getRowIndexOffset(true) : -1\r\n        },\r\n        _focusRowByKeyOrIndex: function() {\r\n            var focusedRowKey = this.option(\"focusedRowKey\");\r\n            var currentFocusedRowIndex = this.option(\"focusedRowIndex\");\r\n            var keyboardController = this.getController(\"keyboardNavigation\");\r\n            var dataController = this.getController(\"data\");\r\n            if (isDefined(focusedRowKey)) {\r\n                var visibleRowIndex = dataController.getRowIndexByKey(focusedRowKey);\r\n                if (visibleRowIndex >= 0) {\r\n                    if (keyboardController._isVirtualScrolling()) {\r\n                        currentFocusedRowIndex = visibleRowIndex + dataController.getRowIndexOffset()\r\n                    }\r\n                    keyboardController.setFocusedRowIndex(currentFocusedRowIndex);\r\n                    this._triggerUpdateFocusedRow(focusedRowKey)\r\n                } else {\r\n                    this._navigateToRow(focusedRowKey, true).done(focusedRowIndex => {\r\n                        if (currentFocusedRowIndex >= 0 && focusedRowIndex < 0) {\r\n                            this._focusRowByIndex()\r\n                        } else if (currentFocusedRowIndex < 0 && focusedRowIndex >= 0) {\r\n                            keyboardController.setFocusedRowIndex(focusedRowIndex)\r\n                        }\r\n                    })\r\n                }\r\n            } else if (currentFocusedRowIndex >= 0) {\r\n                this.getController(\"focus\")._focusRowByIndex(currentFocusedRowIndex)\r\n            }\r\n        },\r\n        isRowFocused: function(key) {\r\n            var focusedRowKey = this.option(\"focusedRowKey\");\r\n            if (isDefined(focusedRowKey)) {\r\n                return equalByValue(key, this.option(\"focusedRowKey\"))\r\n            }\r\n        },\r\n        updateFocusedRow: function(change) {\r\n            var that = this;\r\n            var focusedRowIndex = that._dataController.getRowIndexByKey(change.focusedRowKey);\r\n            var rowsView = that.getView(\"rowsView\");\r\n            var $tableElement;\r\n            var $mainRow;\r\n            each(rowsView.getTableElements(), (function(index, element) {\r\n                var isMainTable = 0 === index;\r\n                $tableElement = $(element);\r\n                that._clearPreviousFocusedRow($tableElement, focusedRowIndex);\r\n                var $row = that._prepareFocusedRow({\r\n                    changedItem: that._dataController.getVisibleRows()[focusedRowIndex],\r\n                    $tableElement: $tableElement,\r\n                    focusedRowIndex: focusedRowIndex\r\n                });\r\n                if (isMainTable) {\r\n                    $mainRow = $row\r\n                }\r\n            }));\r\n            $mainRow && rowsView.scrollToElementVertically($mainRow)\r\n        },\r\n        _clearPreviousFocusedRow: function($tableElement, focusedRowIndex) {\r\n            var $prevRowFocusedElement = $tableElement.find(FOCUSED_ROW_SELECTOR).filter((_, focusedRow) => {\r\n                var $focusedRowTable = $(focusedRow).closest(\".\".concat(this.addWidgetPrefix(TABLE_POSTFIX_CLASS)));\r\n                return $tableElement.is($focusedRowTable)\r\n            });\r\n            $prevRowFocusedElement.removeClass(ROW_FOCUSED_CLASS).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabindex\");\r\n            $prevRowFocusedElement.children(\"td\").removeAttr(\"tabindex\");\r\n            if (0 !== focusedRowIndex) {\r\n                var $firstRow = $(this.getView(\"rowsView\").getRowElement(0));\r\n                $firstRow.removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr(\"tabIndex\")\r\n            }\r\n        },\r\n        _prepareFocusedRow: function(options) {\r\n            var $row;\r\n            var changedItem = options.changedItem;\r\n            if (changedItem && (\"data\" === changedItem.rowType || \"group\" === changedItem.rowType)) {\r\n                var focusedRowIndex = options.focusedRowIndex;\r\n                var $tableElement = options.$tableElement;\r\n                var tabIndex = this.option(\"tabindex\") || 0;\r\n                var rowsView = this.getView(\"rowsView\");\r\n                $row = $(rowsView._getRowElements($tableElement).eq(focusedRowIndex));\r\n                $row.addClass(ROW_FOCUSED_CLASS).attr(\"tabindex\", tabIndex)\r\n            }\r\n            return $row\r\n        }\r\n    };\r\n    return members\r\n}());\r\nexport var focusModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            focusedRowEnabled: false,\r\n            autoNavigateToFocusedRow: true,\r\n            focusedRowKey: null,\r\n            focusedRowIndex: -1,\r\n            focusedColumnIndex: -1\r\n        }\r\n    },\r\n    controllers: {\r\n        focus: FocusController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            keyboardNavigation: {\r\n                init: function() {\r\n                    var rowIndex = this.option(\"focusedRowIndex\");\r\n                    var columnIndex = this.option(\"focusedColumnIndex\");\r\n                    this.createAction(\"onFocusedRowChanging\", {\r\n                        excludeValidators: [\"disabled\", \"readOnly\"]\r\n                    });\r\n                    this.createAction(\"onFocusedRowChanged\", {\r\n                        excludeValidators: [\"disabled\", \"readOnly\"]\r\n                    });\r\n                    this.createAction(\"onFocusedCellChanging\", {\r\n                        excludeValidators: [\"disabled\", \"readOnly\"]\r\n                    });\r\n                    this.createAction(\"onFocusedCellChanged\", {\r\n                        excludeValidators: [\"disabled\", \"readOnly\"]\r\n                    });\r\n                    this.callBase();\r\n                    this.setRowFocusType();\r\n                    this._focusedCellPosition = {};\r\n                    if (isDefined(rowIndex) && rowIndex >= 0) {\r\n                        this._focusedCellPosition.rowIndex = rowIndex\r\n                    }\r\n                    if (isDefined(columnIndex) && columnIndex >= 0) {\r\n                        this._focusedCellPosition.columnIndex = columnIndex\r\n                    }\r\n                },\r\n                setFocusedRowIndex: function(rowIndex) {\r\n                    var dataController = this.getController(\"data\");\r\n                    this.callBase(rowIndex);\r\n                    var visibleRowIndex = rowIndex - dataController.getRowIndexOffset();\r\n                    var visibleRow = dataController.getVisibleRows()[visibleRowIndex];\r\n                    if (!visibleRow || !visibleRow.isNewRow) {\r\n                        this.option(\"focusedRowIndex\", rowIndex)\r\n                    }\r\n                },\r\n                setFocusedColumnIndex: function(columnIndex) {\r\n                    this.callBase(columnIndex);\r\n                    this.option(\"focusedColumnIndex\", columnIndex)\r\n                },\r\n                _escapeKeyHandler: function(eventArgs, isEditing) {\r\n                    if (isEditing || !this.option(\"focusedRowEnabled\")) {\r\n                        this.callBase(eventArgs, isEditing);\r\n                        return\r\n                    }\r\n                    if (this.isCellFocusType()) {\r\n                        this.setRowFocusType();\r\n                        this._focus(this._getCellElementFromTarget(eventArgs.originalEvent.target), true)\r\n                    }\r\n                },\r\n                _updateFocusedCellPosition: function($cell, direction) {\r\n                    var prevRowIndex = this.option(\"focusedRowIndex\");\r\n                    var prevColumnIndex = this.option(\"focusedColumnIndex\");\r\n                    var position = this.callBase($cell, direction);\r\n                    if (position && position.columnIndex >= 0) {\r\n                        this._fireFocusedCellChanged($cell, prevColumnIndex, prevRowIndex)\r\n                    }\r\n                }\r\n            },\r\n            editorFactory: {\r\n                renderFocusOverlay: function($element, hideBorder) {\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var focusedRowEnabled = this.option(\"focusedRowEnabled\");\r\n                    var editingController = this.getController(\"editing\");\r\n                    var $cell;\r\n                    if (!focusedRowEnabled || !(null !== keyboardController && void 0 !== keyboardController && keyboardController.isRowFocusType()) || editingController.isEditing()) {\r\n                        this.callBase($element, hideBorder)\r\n                    } else if (focusedRowEnabled) {\r\n                        var isRowElement = \"row\" === keyboardController._getElementType($element);\r\n                        if (isRowElement && !$element.hasClass(ROW_FOCUSED_CLASS)) {\r\n                            $cell = keyboardController.getFirstValidCellInRow($element);\r\n                            keyboardController.focus($cell)\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            columns: {\r\n                getSortDataSourceParameters: function(_, sortByKey) {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    var dataController = this.getController(\"data\");\r\n                    var dataSource = dataController._dataSource;\r\n                    var store = dataController.store();\r\n                    var key = store && store.key();\r\n                    var remoteOperations = dataSource && dataSource.remoteOperations() || {};\r\n                    var isLocalOperations = Object.keys(remoteOperations).every(operationName => !remoteOperations[operationName]);\r\n                    if (key && (this.option(\"focusedRowEnabled\") && false !== this.getController(\"focus\").isAutoNavigateToFocusedRow() || sortByKey)) {\r\n                        key = Array.isArray(key) ? key : [key];\r\n                        var notSortedKeys = key.filter(key => !this.columnOption(key, \"sortOrder\"));\r\n                        if (notSortedKeys.length) {\r\n                            result = result || [];\r\n                            if (isLocalOperations) {\r\n                                result.push({\r\n                                    selector: dataSource.getDataIndexGetter(),\r\n                                    desc: false\r\n                                })\r\n                            } else {\r\n                                notSortedKeys.forEach(notSortedKey => result.push({\r\n                                    selector: notSortedKey,\r\n                                    desc: false\r\n                                }))\r\n                            }\r\n                        }\r\n                    }\r\n                    return result\r\n                }\r\n            },\r\n            data: {\r\n                _applyChange: function(change) {\r\n                    if (change && \"updateFocusedRow\" === change.changeType) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _fireChanged: function(e) {\r\n                    this.callBase(e);\r\n                    if (this.option(\"focusedRowEnabled\") && this._dataSource) {\r\n                        var isPartialUpdate = \"update\" === e.changeType && e.repaintChangesOnly;\r\n                        var isPartialUpdateWithDeleting = isPartialUpdate && e.changeTypes && e.changeTypes.indexOf(\"remove\") >= 0;\r\n                        if (\"refresh\" === e.changeType && e.items.length || isPartialUpdateWithDeleting) {\r\n                            this._updatePageIndexes();\r\n                            this.processUpdateFocusedRow(e)\r\n                        } else if (\"append\" === e.changeType || \"prepend\" === e.changeType) {\r\n                            this._updatePageIndexes()\r\n                        } else if (\"update\" === e.changeType && e.repaintChangesOnly) {\r\n                            this.processUpdateFocusedRow(e)\r\n                        }\r\n                    }\r\n                },\r\n                _updatePageIndexes: function() {\r\n                    var prevRenderingPageIndex = this._lastRenderingPageIndex || 0;\r\n                    var renderingPageIndex = this._rowsScrollController ? this._rowsScrollController.pageIndex() : 0;\r\n                    this._lastRenderingPageIndex = renderingPageIndex;\r\n                    this._isPagingByRendering = renderingPageIndex !== prevRenderingPageIndex\r\n                },\r\n                isPagingByRendering: function() {\r\n                    return this._isPagingByRendering\r\n                },\r\n                processUpdateFocusedRow: function(e) {\r\n                    var operationTypes = e.operationTypes || {};\r\n                    var focusController = this.getController(\"focus\");\r\n                    var {\r\n                        reload: reload,\r\n                        fullReload: fullReload\r\n                    } = operationTypes;\r\n                    var keyboardController = this.getController(\"keyboardNavigation\");\r\n                    var isVirtualScrolling = keyboardController._isVirtualScrolling();\r\n                    var focusedRowKey = this.option(\"focusedRowKey\");\r\n                    var isAutoNavigate = focusController.isAutoNavigateToFocusedRow();\r\n                    if (reload && !fullReload && isDefined(focusedRowKey)) {\r\n                        focusController._navigateToRow(focusedRowKey, true).done((function(focusedRowIndex) {\r\n                            if (focusedRowIndex < 0) {\r\n                                focusController._focusRowByIndex(void 0, operationTypes)\r\n                            }\r\n                        }))\r\n                    } else if (operationTypes.paging && !isVirtualScrolling) {\r\n                        if (isAutoNavigate) {\r\n                            var rowIndexByKey = this.getRowIndexByKey(focusedRowKey);\r\n                            var isValidRowIndexByKey = rowIndexByKey >= 0;\r\n                            var focusedRowIndex = this.option(\"focusedRowIndex\");\r\n                            var needFocusRowByIndex = focusedRowIndex >= 0 && (focusedRowIndex === rowIndexByKey || !isValidRowIndexByKey);\r\n                            if (needFocusRowByIndex) {\r\n                                focusController._focusRowByIndex(void 0, operationTypes)\r\n                            }\r\n                        } else if (this.getRowIndexByKey(focusedRowKey) < 0) {\r\n                            this.option(\"focusedRowIndex\", -1)\r\n                        }\r\n                    } else if (operationTypes.fullReload) {\r\n                        focusController._focusRowByKeyOrIndex()\r\n                    }\r\n                },\r\n                getPageIndexByKey: function(key) {\r\n                    var that = this;\r\n                    var d = new Deferred;\r\n                    that.getGlobalRowIndexByKey(key).done((function(globalIndex) {\r\n                        d.resolve(globalIndex >= 0 ? Math.floor(globalIndex / that.pageSize()) : -1)\r\n                    })).fail(d.reject);\r\n                    return d.promise()\r\n                },\r\n                getGlobalRowIndexByKey: function(key) {\r\n                    if (this._dataSource.group()) {\r\n                        return this._calculateGlobalRowIndexByGroupedData(key)\r\n                    }\r\n                    return this._calculateGlobalRowIndexByFlatData(key)\r\n                },\r\n                _calculateGlobalRowIndexByFlatData: function(key, groupFilter, useGroup) {\r\n                    var that = this;\r\n                    var deferred = new Deferred;\r\n                    var dataSource = that._dataSource;\r\n                    if (Array.isArray(key)) {\r\n                        return deferred.resolve(-1).promise()\r\n                    }\r\n                    var filter = that._generateFilterByKey(key);\r\n                    dataSource.load({\r\n                        filter: that._concatWithCombinedFilter(filter),\r\n                        skip: 0,\r\n                        take: 1\r\n                    }).done((function(data) {\r\n                        if (data.length > 0) {\r\n                            filter = that._generateOperationFilterByKey(key, data[0], useGroup);\r\n                            dataSource.load({\r\n                                filter: that._concatWithCombinedFilter(filter, groupFilter),\r\n                                skip: 0,\r\n                                take: 1,\r\n                                requireTotalCount: true\r\n                            }).done((function(_, extra) {\r\n                                deferred.resolve(extra.totalCount)\r\n                            }))\r\n                        } else {\r\n                            deferred.resolve(-1)\r\n                        }\r\n                    }));\r\n                    return deferred.promise()\r\n                },\r\n                _concatWithCombinedFilter: function(filter, groupFilter) {\r\n                    var combinedFilter = this.getCombinedFilter();\r\n                    return gridCoreUtils.combineFilters([filter, combinedFilter, groupFilter])\r\n                },\r\n                _generateBooleanFilter: function(selector, value, sortInfo) {\r\n                    var result;\r\n                    if (false === value) {\r\n                        result = [selector, \"=\", sortInfo.desc ? true : null]\r\n                    } else if (true === value ? !sortInfo.desc : sortInfo.desc) {\r\n                        result = [selector, \"<>\", value]\r\n                    }\r\n                    return result\r\n                },\r\n                _generateOperationFilterByKey: function(key, rowData, useGroup) {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var filter = that._generateFilterByKey(key, \"<\");\r\n                    var sort = that._columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().filtering, true);\r\n                    if (useGroup) {\r\n                        var group = that._columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().filtering);\r\n                        if (group) {\r\n                            sort = sort ? group.concat(sort) : group\r\n                        }\r\n                    }\r\n                    if (sort) {\r\n                        sort.slice().reverse().forEach((function(sortInfo) {\r\n                            var selector = sortInfo.selector;\r\n                            var getter;\r\n                            if (\"function\" === typeof selector) {\r\n                                getter = selector\r\n                            } else {\r\n                                getter = that._columnsController.columnOption(selector, \"selector\")\r\n                            }\r\n                            var value = getter ? getter(rowData) : rowData[selector];\r\n                            filter = [\r\n                                [selector, \"=\", value], \"and\", filter\r\n                            ];\r\n                            if (null === value || isBoolean(value)) {\r\n                                var booleanFilter = that._generateBooleanFilter(selector, value, sortInfo);\r\n                                if (booleanFilter) {\r\n                                    filter = [booleanFilter, \"or\", filter]\r\n                                }\r\n                            } else {\r\n                                var filterOperation = sortInfo.desc ? \">\" : \"<\";\r\n                                var sortFilter;\r\n                                if (sortInfo.compare) {\r\n                                    sortFilter = data => {\r\n                                        if (\"<\" === filterOperation) {\r\n                                            return sortInfo.compare(value, getter(data)) >= 1\r\n                                        } else {\r\n                                            return sortInfo.compare(value, getter(data)) <= -1\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    sortFilter = [selector, filterOperation, value];\r\n                                    if (!sortInfo.desc) {\r\n                                        sortFilter = [sortFilter, \"or\", [selector, \"=\", null]]\r\n                                    }\r\n                                }\r\n                                filter = [sortFilter, \"or\", filter]\r\n                            }\r\n                        }))\r\n                    }\r\n                    return filter\r\n                },\r\n                _generateFilterByKey: function(key, operation) {\r\n                    var dataSourceKey = this._dataSource.key();\r\n                    var filter = [];\r\n                    if (!operation) {\r\n                        operation = \"=\"\r\n                    }\r\n                    if (Array.isArray(dataSourceKey)) {\r\n                        for (var i = 0; i < dataSourceKey.length; ++i) {\r\n                            var keyPart = key[dataSourceKey[i]];\r\n                            if (keyPart) {\r\n                                if (filter.length > 0) {\r\n                                    filter.push(\"and\")\r\n                                }\r\n                                filter.push([dataSourceKey[i], operation, keyPart])\r\n                            }\r\n                        }\r\n                    } else {\r\n                        filter = [dataSourceKey, operation, key]\r\n                    }\r\n                    return filter\r\n                },\r\n                _getLastItemIndex: function() {\r\n                    return this.items(true).length - 1\r\n                }\r\n            },\r\n            editing: {\r\n                _deleteRowCore: function(rowIndex) {\r\n                    var deferred = this.callBase.apply(this, arguments);\r\n                    var dataController = this.getController(\"data\");\r\n                    var rowKey = dataController.getKeyByRowIndex(rowIndex);\r\n                    deferred.done(() => {\r\n                        var rowIndex = dataController.getRowIndexByKey(rowKey);\r\n                        var visibleRows = dataController.getVisibleRows();\r\n                        if (-1 === rowIndex && !visibleRows.length) {\r\n                            this.getController(\"focus\")._resetFocusedRow()\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (this.option(\"focusedRowEnabled\") && row) {\r\n                        if (this.getController(\"focus\").isRowFocused(row.key)) {\r\n                            $row.addClass(ROW_FOCUSED_CLASS)\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _checkRowKeys: function(options) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (this.option(\"focusedRowEnabled\") && this.option(\"dataSource\")) {\r\n                        var store = this._dataController.store();\r\n                        if (store && !store.key()) {\r\n                            this._dataController.fireError(\"E1042\", \"Row focusing\")\r\n                        }\r\n                    }\r\n                },\r\n                _update: function(change) {\r\n                    if (\"updateFocusedRow\" === change.changeType) {\r\n                        if (this.option(\"focusedRowEnabled\")) {\r\n                            this.getController(\"focus\").updateFocusedRow(change)\r\n                        }\r\n                    } else {\r\n                        this.callBase(change)\r\n                    }\r\n                },\r\n                updateFocusElementTabIndex: function($cellElements, preventScroll) {\r\n                    var rowIndex = this.getController(\"keyboardNavigation\").getVisibleRowIndex();\r\n                    var row = this._dataController.getVisibleRows()[rowIndex];\r\n                    if (this.option(\"focusedRowEnabled\") && !(null !== row && void 0 !== row && row.isNewRow)) {\r\n                        this._setFocusedRowElementTabIndex(preventScroll)\r\n                    } else {\r\n                        this.callBase($cellElements)\r\n                    }\r\n                },\r\n                _setFocusedRowElementTabIndex: function(preventScroll) {\r\n                    var focusedRowKey = this.option(\"focusedRowKey\");\r\n                    var tabIndex = this.option(\"tabIndex\") || 0;\r\n                    var dataController = this._dataController;\r\n                    var columnsController = this._columnsController;\r\n                    var rowIndex = dataController.getRowIndexByKey(focusedRowKey);\r\n                    var columnIndex = this.option(\"focusedColumnIndex\");\r\n                    var $row = this._findRowElementForTabIndex();\r\n                    if (!isDefined(this._scrollToFocusOnResize)) {\r\n                        this._scrollToFocusOnResize = () => {\r\n                            this.scrollToElementVertically(this._findRowElementForTabIndex());\r\n                            this.resizeCompleted.remove(this._scrollToFocusOnResize)\r\n                        }\r\n                    }\r\n                    $row.attr(\"tabIndex\", tabIndex);\r\n                    if (rowIndex >= 0 && !preventScroll) {\r\n                        if (columnIndex < 0) {\r\n                            columnIndex = 0\r\n                        }\r\n                        rowIndex += dataController.getRowIndexOffset();\r\n                        columnIndex += columnsController.getColumnIndexOffset();\r\n                        this.getController(\"keyboardNavigation\").setFocusedCellPosition(rowIndex, columnIndex);\r\n                        if (this.getController(\"focus\").isAutoNavigateToFocusedRow()) {\r\n                            var dataSource = dataController.dataSource();\r\n                            var operationTypes = dataSource && dataSource.operationTypes();\r\n                            if (operationTypes && !operationTypes.paging && !dataController.isPagingByRendering()) {\r\n                                this.resizeCompleted.remove(this._scrollToFocusOnResize);\r\n                                this.resizeCompleted.add(this._scrollToFocusOnResize)\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _findRowElementForTabIndex: function() {\r\n                    var focusedRowKey = this.option(\"focusedRowKey\");\r\n                    var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);\r\n                    return $(this.getRowElement(rowIndex >= 0 ? rowIndex : 0))\r\n                },\r\n                scrollToRowElement: function(key) {\r\n                    var rowIndex = this.getController(\"data\").getRowIndexByKey(key);\r\n                    var $row = $(this.getRow(rowIndex));\r\n                    return this.scrollToElementVertically($row)\r\n                },\r\n                scrollToElementVertically: function($row) {\r\n                    var scrollable = this.getScrollable();\r\n                    if (scrollable && $row.length) {\r\n                        var position = scrollable.getScrollElementPosition($row, \"vertical\");\r\n                        return this.scrollTopPosition(position)\r\n                    }\r\n                    return (new Deferred).resolve()\r\n                },\r\n                scrollTopPosition: function(scrollTop) {\r\n                    var d = new Deferred;\r\n                    var scrollable = this.getScrollable();\r\n                    if (scrollable) {\r\n                        var currentScrollTop = scrollable.scrollTop();\r\n                        var scrollHandler = () => {\r\n                            scrollable.off(\"scroll\", scrollHandler);\r\n                            d.resolve()\r\n                        };\r\n                        if (scrollTop !== currentScrollTop) {\r\n                            scrollable.on(\"scroll\", scrollHandler);\r\n                            this._dataController.resetFilterApplying();\r\n                            scrollable.scrollTo({\r\n                                top: scrollTop\r\n                            });\r\n                            return d.promise()\r\n                        }\r\n                    }\r\n                    return d.resolve()\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}