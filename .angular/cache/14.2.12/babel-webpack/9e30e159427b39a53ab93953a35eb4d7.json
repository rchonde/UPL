{"ast":null,"code":"/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../Base\";\nimport { registry } from \"../Registry\";\nimport { color } from \"./Color\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n *\r\n * The main difference from the basic [[ColorSet]] is that instead of sequenced\r\n * colors, it uses a concept of named colors.\r\n *\r\n * This way, every element in the UI can extract an exact color theme author\r\n * meant for the specific purpose, like strokes, backgrounds, etc.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\n\nvar InterfaceColorSet =\n/** @class */\nfunction (_super) {\n  __extends(InterfaceColorSet, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function InterfaceColorSet() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Maps the list of purposes (like \"stroke\") to an index of color of the\r\n     * color set.\r\n     */\n\n\n    _this._purposes = {\n      stroke: color(\"#e5e5e5\"),\n      fill: color(\"#f3f3f3\"),\n      primaryButton: color(\"#6794dc\"),\n      primaryButtonHover: color(\"#6771dc\"),\n      primaryButtonDown: color(\"#68dc75\"),\n      primaryButtonActive: color(\"#68dc75\"),\n      primaryButtonText: color(\"#FFFFFF\"),\n      primaryButtonStroke: color(\"#FFFFFF\"),\n      secondaryButton: color(\"#d9d9d9\"),\n      secondaryButtonHover: color(\"#d9d9d9\").brighten(-0.25),\n      secondaryButtonDown: color(\"#d9d9d9\").brighten(-0.35),\n      secondaryButtonActive: color(\"#d9d9d9\").brighten(0.35),\n      secondaryButtonText: color(\"#000000\"),\n      secondaryButtonStroke: color(\"#FFFFFF\"),\n      grid: color(\"#000000\"),\n      background: color(\"#ffffff\"),\n      alternativeBackground: color(\"#000000\"),\n      text: color(\"#000000\"),\n      alternativeText: color(\"#FFFFFF\"),\n      disabledBackground: color(\"#999999\"),\n      positive: color(\"#67dc75\"),\n      negative: color(\"#dc6788\")\n    };\n    _this.className = \"InterfaceColorSet\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  InterfaceColorSet.prototype.debug = function () {};\n  /**\r\n   * Returns a color to be used for the specific purpose.\r\n   *\r\n   * ```TypeScript\r\n   * let uicolors = new am4core.InterfaceColorSet();\r\n   * console.log(uicolors.getFor(\"stroke\"));\r\n   * ```\r\n   * ```JavaScript\r\n   * var uicolors = new am4core.InterfaceColorSet();\r\n   * console.log(uicolors.getFor(\"stroke\"));\r\n   * ```\r\n   *\r\n   * @param purpose  Color use purpuse\r\n   * @return Color\r\n   */\n\n\n  InterfaceColorSet.prototype.getFor = function (purpose) {\n    return this._purposes[purpose];\n  };\n  /**\r\n   * Sets color to be used for the specific purpose.\r\n   *\r\n   * @param purpose  Color use purpose\r\n   * @param color    Color\r\n   */\n\n\n  InterfaceColorSet.prototype.setFor = function (purpose, color) {\n    this._purposes[purpose] = color;\n  };\n\n  return InterfaceColorSet;\n}(BaseObject);\n\nexport { InterfaceColorSet };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"InterfaceColorSet\"] = InterfaceColorSet;","map":{"version":3,"names":["__extends","BaseObject","registry","color","InterfaceColorSet","_super","_this","call","_purposes","stroke","fill","primaryButton","primaryButtonHover","primaryButtonDown","primaryButtonActive","primaryButtonText","primaryButtonStroke","secondaryButton","secondaryButtonHover","brighten","secondaryButtonDown","secondaryButtonActive","secondaryButtonText","secondaryButtonStroke","grid","background","alternativeBackground","text","alternativeText","disabledBackground","positive","negative","className","applyTheme","prototype","debug","getFor","purpose","setFor","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js"],"sourcesContent":["/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { registry } from \"../Registry\";\r\nimport { color } from \"./Color\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n *\r\n * The main difference from the basic [[ColorSet]] is that instead of sequenced\r\n * colors, it uses a concept of named colors.\r\n *\r\n * This way, every element in the UI can extract an exact color theme author\r\n * meant for the specific purpose, like strokes, backgrounds, etc.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nvar InterfaceColorSet = /** @class */ (function (_super) {\r\n    __extends(InterfaceColorSet, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function InterfaceColorSet() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Maps the list of purposes (like \"stroke\") to an index of color of the\r\n         * color set.\r\n         */\r\n        _this._purposes = {\r\n            stroke: color(\"#e5e5e5\"),\r\n            fill: color(\"#f3f3f3\"),\r\n            primaryButton: color(\"#6794dc\"),\r\n            primaryButtonHover: color(\"#6771dc\"),\r\n            primaryButtonDown: color(\"#68dc75\"),\r\n            primaryButtonActive: color(\"#68dc75\"),\r\n            primaryButtonText: color(\"#FFFFFF\"),\r\n            primaryButtonStroke: color(\"#FFFFFF\"),\r\n            secondaryButton: color(\"#d9d9d9\"),\r\n            secondaryButtonHover: color(\"#d9d9d9\").brighten(-0.25),\r\n            secondaryButtonDown: color(\"#d9d9d9\").brighten(-0.35),\r\n            secondaryButtonActive: color(\"#d9d9d9\").brighten(0.35),\r\n            secondaryButtonText: color(\"#000000\"),\r\n            secondaryButtonStroke: color(\"#FFFFFF\"),\r\n            grid: color(\"#000000\"),\r\n            background: color(\"#ffffff\"),\r\n            alternativeBackground: color(\"#000000\"),\r\n            text: color(\"#000000\"),\r\n            alternativeText: color(\"#FFFFFF\"),\r\n            disabledBackground: color(\"#999999\"),\r\n            positive: color(\"#67dc75\"),\r\n            negative: color(\"#dc6788\")\r\n        };\r\n        _this.className = \"InterfaceColorSet\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    InterfaceColorSet.prototype.debug = function () { };\r\n    /**\r\n     * Returns a color to be used for the specific purpose.\r\n     *\r\n     * ```TypeScript\r\n     * let uicolors = new am4core.InterfaceColorSet();\r\n     * console.log(uicolors.getFor(\"stroke\"));\r\n     * ```\r\n     * ```JavaScript\r\n     * var uicolors = new am4core.InterfaceColorSet();\r\n     * console.log(uicolors.getFor(\"stroke\"));\r\n     * ```\r\n     *\r\n     * @param purpose  Color use purpuse\r\n     * @return Color\r\n     */\r\n    InterfaceColorSet.prototype.getFor = function (purpose) {\r\n        return this._purposes[purpose];\r\n    };\r\n    /**\r\n     * Sets color to be used for the specific purpose.\r\n     *\r\n     * @param purpose  Color use purpose\r\n     * @param color    Color\r\n     */\r\n    InterfaceColorSet.prototype.setFor = function (purpose, color) {\r\n        this._purposes[purpose] = color;\r\n    };\r\n    return InterfaceColorSet;\r\n}(BaseObject));\r\nexport { InterfaceColorSet };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"InterfaceColorSet\"] = InterfaceColorSet;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}