{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\n\nvar AxisRendererX3D =\n/** @class */\nfunction (_super) {\n  __extends(AxisRendererX3D, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRendererX3D() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A related chart.\r\n     *\r\n     * @todo Description\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"AxisRendererX3D\";\n\n    _this._disposers.push(_this._chart);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererX3D.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n\n    if (grid.element) {\n      var dx = this.chart.dx3D || 0;\n      var dy = this.chart.dy3D || 0;\n      var h = this.getHeight();\n      grid.path = $path.moveTo({\n        x: dx,\n        y: dy\n      }) + $path.lineTo({\n        x: dx,\n        y: h + dy\n      }) + $path.lineTo({\n        x: 0,\n        y: h\n      });\n    }\n\n    this.positionItem(grid, point);\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererX3D.prototype.updateBaseGridElement = function () {\n    _super.prototype.updateBaseGridElement.call(this);\n\n    var h = this.getHeight();\n    var dx = this.chart.dx3D || 0;\n    var dy = this.chart.dy3D || 0;\n    this.baseGrid.path = $path.moveTo({\n      x: dx,\n      y: dy\n    }) + $path.lineTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: h\n    });\n  };\n\n  Object.defineProperty(AxisRendererX3D.prototype, \"chart\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n\n    /**\r\n     * Chart, associated with the Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Chart\r\n     */\n    set: function (chart) {\n      if (chart) {\n        this._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Invoked when 3D-related settings change, like depth or angle.\r\n   *\r\n   * @param event Event\r\n   */\n\n  AxisRendererX3D.prototype.handle3DChanged = function (event) {\n    if (event.property == \"depth\" || event.property == \"angle\") {\n      this.invalidate();\n    }\n  };\n\n  return AxisRendererX3D;\n}(AxisRendererX);\n\nexport { AxisRendererX3D };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;","map":{"version":3,"names":["__extends","AxisRendererX","MutableValueDisposer","registry","$path","AxisRendererX3D","_super","_this","call","_chart","className","_disposers","push","applyTheme","prototype","updateGridElement","grid","position","endPosition","location","point","positionToPoint","element","dx","chart","dx3D","dy","dy3D","h","getHeight","path","moveTo","x","y","lineTo","positionItem","toggleVisibility","updateBaseGridElement","baseGrid","Object","defineProperty","get","set","events","on","handle3DChanged","enumerable","configurable","event","property","invalidate","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererX3D.js"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nvar AxisRendererX3D = /** @class */ (function (_super) {\r\n    __extends(AxisRendererX3D, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param axis Related axis\r\n     */\r\n    function AxisRendererX3D() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A related chart.\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._chart = new MutableValueDisposer();\r\n        _this.className = \"AxisRendererX3D\";\r\n        _this._disposers.push(_this._chart);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param grid         Grid element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererX3D.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        if (grid.element) {\r\n            var dx = this.chart.dx3D || 0;\r\n            var dy = this.chart.dy3D || 0;\r\n            var h = this.getHeight();\r\n            grid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n        }\r\n        this.positionItem(grid, point);\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions the base grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererX3D.prototype.updateBaseGridElement = function () {\r\n        _super.prototype.updateBaseGridElement.call(this);\r\n        var h = this.getHeight();\r\n        var dx = this.chart.dx3D || 0;\r\n        var dy = this.chart.dy3D || 0;\r\n        this.baseGrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n    };\r\n    Object.defineProperty(AxisRendererX3D.prototype, \"chart\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Chart\r\n         */\r\n        get: function () {\r\n            return this._chart.get();\r\n        },\r\n        /**\r\n         * Chart, associated with the Axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Chart\r\n         */\r\n        set: function (chart) {\r\n            if (chart) {\r\n                this._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Invoked when 3D-related settings change, like depth or angle.\r\n     *\r\n     * @param event Event\r\n     */\r\n    AxisRendererX3D.prototype.handle3DChanged = function (event) {\r\n        if (event.property == \"depth\" || event.property == \"angle\") {\r\n            this.invalidate();\r\n        }\r\n    };\r\n    return AxisRendererX3D;\r\n}(AxisRendererX));\r\nexport { AxisRendererX3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}