{"ast":null,"code":"/**\r\n * Paper class just like the white sheet of pressed fiber it draws its name\r\n * inspiration from is used as a starting point to start a drawing.\r\n *\r\n * Before we can start adding elements (drawing) we need to take out a new sheet\r\n * of paper, or in this instance create a blank SVG element.\r\n *\r\n * This class creates such element, as well as implements methods needed to\r\n * start adding elements to it.\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AMElement } from \"./AMElement\";\nimport { Group } from \"./Group\";\nimport { SVGContainer } from \"./SVGContainer\";\nimport * as $dom from \"../utils/DOM\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Paper class which when instantiated will create an SVG element as well as\r\n * some of the sub-elements like `<desc>`, `<defs>`.\r\n *\r\n * Use its methods like `addGroup` and `append` to add elements to the paper.\r\n */\n\nvar Paper =\n/** @class */\nfunction () {\n  /**\r\n   * Creates main `<svg>` container and related elements.\r\n   *\r\n   * @param container A reference to HTML element to create `<svg>` in\r\n   */\n  function Paper(container, id) {\n    // Store container reference\n    this.container = container;\n    this.id = id; // Create SVG element\n\n    var svg = document.createElementNS($dom.SVGNS, \"svg\");\n    svg.setAttribute(\"version\", \"1.1\");\n    svg.setAttributeNS($dom.XMLNS, \"xmlns\", $dom.SVGNS);\n    svg.setAttributeNS($dom.XMLNS, \"xmlns:xlink\", $dom.XLINK);\n    svg.setAttribute(\"role\", \"group\");\n    this.container.appendChild(svg); // Add description\n    //let desc: SVGElement = <SVGElement>document.createElementNS($dom.SVGNS, \"desc\");\n    //desc.appendChild(document.createTextNode(\"JavaScript chart by amCharts\"));\n    //svg.appendChild(desc);\n    // Add defs\n\n    this.defs = document.createElementNS($dom.SVGNS, \"defs\");\n    svg.appendChild(this.defs); // Set width and height to fit container\n\n    svg.style.width = \"100%\";\n    svg.style.height = \"100%\";\n    svg.style.overflow = \"visible\"; // Store variable\n\n    this.svg = svg;\n  }\n  /**\r\n   * Creates and returns a new element. Does not attach it to Paper yet.\r\n   *\r\n   * @param elementName  Element name\r\n   * @return New element\r\n   */\n\n\n  Paper.prototype.add = function (elementName) {\n    return new AMElement(elementName);\n  };\n  /**\r\n   * Creates and returns a new Group element. Does not attach it to Paper.\r\n   *\r\n   * @param groupName  Element name\r\n   * @return New Group\r\n   */\n\n\n  Paper.prototype.addGroup = function (groupName) {\n    return new Group(groupName);\n  };\n  /**\r\n   * Appends an element to Paper.\r\n   *\r\n   * @param element Element to append\r\n   */\n\n\n  Paper.prototype.append = function (element) {\n    if (element) {\n      this.svg.appendChild(element.node);\n    }\n  };\n  /**\r\n   * Appends an element to `<defs>` block of the Paper.\r\n   *\r\n   * @param element  Element\r\n   */\n\n\n  Paper.prototype.appendDef = function (element) {\n    if (element) {\n      this.defs.appendChild(element.node);\n    }\n  };\n  /**\r\n   * Creates and returns new `<foreignObject>` element. Does not append it to\r\n   * Paper.\r\n   *\r\n   * @return A foreignObject element\r\n   */\n\n\n  Paper.prototype.foreignObject = function () {\n    var element = new AMElement(\"foreignObject\"); //this.append(element);\n\n    return element;\n  };\n  /**\r\n   * Checks if browser supports `<foreignObject>` elements.\r\n   *\r\n   * @return Supports `foreignObject`?\r\n   */\n\n\n  Paper.prototype.supportsForeignObject = function () {\n    return document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#Extensibility\", \"1.1\");\n  };\n\n  return Paper;\n}();\n\nexport { Paper };\nvar ghostPaper = null;\n/**\r\n * A [[Paper]] instance to create elements, that are not yet ready to be\r\n * placed in visible DOM.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport function getGhostPaper() {\n  if (ghostPaper === null) {\n    // ghost is used to draw elements while real paper is not yet created or Sprite doesn't know parent yet\n    var ghostDiv = document.createElement(\"div\");\n    ghostDiv.hidden = true;\n    ghostDiv.style.width = \"1px\";\n    ghostDiv.style.height = \"1px\";\n    ghostDiv.style.position = \"absolute\";\n    ghostDiv.style.zIndex = \"-1000000\";\n    document.body.appendChild(ghostDiv);\n    var ghostSvgContainer = new SVGContainer(ghostDiv, true);\n    ghostPaper = new Paper(ghostSvgContainer.SVGContainer, \"ghost\");\n  }\n\n  return ghostPaper;\n}","map":{"version":3,"names":["AMElement","Group","SVGContainer","$dom","Paper","container","id","svg","document","createElementNS","SVGNS","setAttribute","setAttributeNS","XMLNS","XLINK","appendChild","defs","style","width","height","overflow","prototype","add","elementName","addGroup","groupName","append","element","node","appendDef","foreignObject","supportsForeignObject","implementation","hasFeature","ghostPaper","getGhostPaper","ghostDiv","createElement","hidden","position","zIndex","body","ghostSvgContainer"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/rendering/Paper.js"],"sourcesContent":["/**\r\n * Paper class just like the white sheet of pressed fiber it draws its name\r\n * inspiration from is used as a starting point to start a drawing.\r\n *\r\n * Before we can start adding elements (drawing) we need to take out a new sheet\r\n * of paper, or in this instance create a blank SVG element.\r\n *\r\n * This class creates such element, as well as implements methods needed to\r\n * start adding elements to it.\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AMElement } from \"./AMElement\";\r\nimport { Group } from \"./Group\";\r\nimport { SVGContainer } from \"./SVGContainer\";\r\nimport * as $dom from \"../utils/DOM\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Paper class which when instantiated will create an SVG element as well as\r\n * some of the sub-elements like `<desc>`, `<defs>`.\r\n *\r\n * Use its methods like `addGroup` and `append` to add elements to the paper.\r\n */\r\nvar Paper = /** @class */ (function () {\r\n    /**\r\n     * Creates main `<svg>` container and related elements.\r\n     *\r\n     * @param container A reference to HTML element to create `<svg>` in\r\n     */\r\n    function Paper(container, id) {\r\n        // Store container reference\r\n        this.container = container;\r\n        this.id = id;\r\n        // Create SVG element\r\n        var svg = document.createElementNS($dom.SVGNS, \"svg\");\r\n        svg.setAttribute(\"version\", \"1.1\");\r\n        svg.setAttributeNS($dom.XMLNS, \"xmlns\", $dom.SVGNS);\r\n        svg.setAttributeNS($dom.XMLNS, \"xmlns:xlink\", $dom.XLINK);\r\n        svg.setAttribute(\"role\", \"group\");\r\n        this.container.appendChild(svg);\r\n        // Add description\r\n        //let desc: SVGElement = <SVGElement>document.createElementNS($dom.SVGNS, \"desc\");\r\n        //desc.appendChild(document.createTextNode(\"JavaScript chart by amCharts\"));\r\n        //svg.appendChild(desc);\r\n        // Add defs\r\n        this.defs = document.createElementNS($dom.SVGNS, \"defs\");\r\n        svg.appendChild(this.defs);\r\n        // Set width and height to fit container\r\n        svg.style.width = \"100%\";\r\n        svg.style.height = \"100%\";\r\n        svg.style.overflow = \"visible\";\r\n        // Store variable\r\n        this.svg = svg;\r\n    }\r\n    /**\r\n     * Creates and returns a new element. Does not attach it to Paper yet.\r\n     *\r\n     * @param elementName  Element name\r\n     * @return New element\r\n     */\r\n    Paper.prototype.add = function (elementName) {\r\n        return new AMElement(elementName);\r\n    };\r\n    /**\r\n     * Creates and returns a new Group element. Does not attach it to Paper.\r\n     *\r\n     * @param groupName  Element name\r\n     * @return New Group\r\n     */\r\n    Paper.prototype.addGroup = function (groupName) {\r\n        return new Group(groupName);\r\n    };\r\n    /**\r\n     * Appends an element to Paper.\r\n     *\r\n     * @param element Element to append\r\n     */\r\n    Paper.prototype.append = function (element) {\r\n        if (element) {\r\n            this.svg.appendChild(element.node);\r\n        }\r\n    };\r\n    /**\r\n     * Appends an element to `<defs>` block of the Paper.\r\n     *\r\n     * @param element  Element\r\n     */\r\n    Paper.prototype.appendDef = function (element) {\r\n        if (element) {\r\n            this.defs.appendChild(element.node);\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns new `<foreignObject>` element. Does not append it to\r\n     * Paper.\r\n     *\r\n     * @return A foreignObject element\r\n     */\r\n    Paper.prototype.foreignObject = function () {\r\n        var element = new AMElement(\"foreignObject\");\r\n        //this.append(element);\r\n        return element;\r\n    };\r\n    /**\r\n     * Checks if browser supports `<foreignObject>` elements.\r\n     *\r\n     * @return Supports `foreignObject`?\r\n     */\r\n    Paper.prototype.supportsForeignObject = function () {\r\n        return document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#Extensibility\", \"1.1\");\r\n    };\r\n    return Paper;\r\n}());\r\nexport { Paper };\r\nvar ghostPaper = null;\r\n/**\r\n * A [[Paper]] instance to create elements, that are not yet ready to be\r\n * placed in visible DOM.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport function getGhostPaper() {\r\n    if (ghostPaper === null) {\r\n        // ghost is used to draw elements while real paper is not yet created or Sprite doesn't know parent yet\r\n        var ghostDiv = document.createElement(\"div\");\r\n        ghostDiv.hidden = true;\r\n        ghostDiv.style.width = \"1px\";\r\n        ghostDiv.style.height = \"1px\";\r\n        ghostDiv.style.position = \"absolute\";\r\n        ghostDiv.style.zIndex = \"-1000000\";\r\n        document.body.appendChild(ghostDiv);\r\n        var ghostSvgContainer = new SVGContainer(ghostDiv, true);\r\n        ghostPaper = new Paper(ghostSvgContainer.SVGContainer, \"ghost\");\r\n    }\r\n    return ghostPaper;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}