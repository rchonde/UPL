{"ast":null,"code":"/**\r\n * A module defining functionality for axis grid elements.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Displays an axis grid line.\r\n *\r\n * @see {@link IGridEvents} for a list of available events\r\n * @see {@link IGridAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the grid, also with 3d charts we might need some additional elements\r\n * @important\r\n */\n\nvar Grid =\n/** @class */\nfunction (_super) {\n  __extends(Grid, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Grid() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Grid\";\n    _this.element = _this.paper.add(\"path\");\n    _this.location = 0.5;\n    _this.isMeasured = false;\n    _this.above = false;\n    var interfaceColors = new InterfaceColorSet();\n    _this.stroke = interfaceColors.getFor(\"grid\");\n    _this.pixelPerfect = true;\n    _this.strokeOpacity = 0.15;\n    _this.fill = color(); // \"none\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(Grid.prototype, \"location\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"location\");\n    },\n\n    /**\r\n     * Location within axis cell to place grid line on.\r\n     *\r\n     * * 0 - start\r\n     * * 0.5 - middle\r\n     * * 1 - end\r\n     *\r\n     * @param value  Location (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"location\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Grid.prototype, \"above\", {\n    /**\r\n     * @return Draw above series?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"above\");\n    },\n\n    /**\r\n     * Normally fill goes below series. Set this to `true` to go above.\r\n     *\r\n     * @default false\r\n     * @since 4.5.9\r\n     * @param  value  Draw above series?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"above\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Grid.prototype.setDisabled = function (value) {\n    var changed = _super.prototype.setDisabled.call(this, value);\n\n    if (this.axis) {\n      this.axis.invalidateDataItems();\n    }\n\n    return changed;\n  };\n\n  return Grid;\n}(Sprite);\n\nexport { Grid };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Grid\"] = Grid;\n/**\r\n * Add default responsive rules\r\n */\n\n/**\r\n * Disable grid on smaller charts\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function (target, stateId) {\n    if (target instanceof Grid) {\n      var state = target.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});","map":{"version":3,"names":["__extends","Sprite","registry","color","InterfaceColorSet","defaultRules","ResponsiveBreakpoints","Grid","_super","_this","call","className","element","paper","add","location","isMeasured","above","interfaceColors","stroke","getFor","pixelPerfect","strokeOpacity","fill","applyTheme","Object","defineProperty","prototype","get","getPropertyValue","set","value","setPropertyValue","enumerable","configurable","setDisabled","changed","axis","invalidateDataItems","registeredClasses","push","relevant","maybeXS","state","target","stateId","states","create","properties","disabled"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/axes/Grid.js"],"sourcesContent":["/**\r\n * A module defining functionality for axis grid elements.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Displays an axis grid line.\r\n *\r\n * @see {@link IGridEvents} for a list of available events\r\n * @see {@link IGridAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the grid, also with 3d charts we might need some additional elements\r\n * @important\r\n */\r\nvar Grid = /** @class */ (function (_super) {\r\n    __extends(Grid, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Grid() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Grid\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.location = 0.5;\r\n        _this.isMeasured = false;\r\n        _this.above = false;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.stroke = interfaceColors.getFor(\"grid\");\r\n        _this.pixelPerfect = true;\r\n        _this.strokeOpacity = 0.15;\r\n        _this.fill = color(); // \"none\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Grid.prototype, \"location\", {\r\n        /**\r\n         * @return Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"location\");\r\n        },\r\n        /**\r\n         * Location within axis cell to place grid line on.\r\n         *\r\n         * * 0 - start\r\n         * * 0.5 - middle\r\n         * * 1 - end\r\n         *\r\n         * @param value  Location (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"location\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Grid.prototype, \"above\", {\r\n        /**\r\n         * @return Draw above series?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"above\");\r\n        },\r\n        /**\r\n         * Normally fill goes below series. Set this to `true` to go above.\r\n         *\r\n         * @default false\r\n         * @since 4.5.9\r\n         * @param  value  Draw above series?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"above\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    Grid.prototype.setDisabled = function (value) {\r\n        var changed = _super.prototype.setDisabled.call(this, value);\r\n        if (this.axis) {\r\n            this.axis.invalidateDataItems();\r\n        }\r\n        return changed;\r\n    };\r\n    return Grid;\r\n}(Sprite));\r\nexport { Grid };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Grid\"] = Grid;\r\n/**\r\n * Add default responsive rules\r\n */\r\n/**\r\n * Disable grid on smaller charts\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.maybeXS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof Grid) {\r\n            var state = target.states.create(stateId);\r\n            state.properties.disabled = true;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,SAASC,iBAAT,QAAkC,oCAAlC;AACA,SAASC,YAAT,EAAuBC,qBAAvB,QAAoD,6BAApD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,IAAI;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACxCR,SAAS,CAACO,IAAD,EAAOC,MAAP,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,IAAT,GAAgB;IACZ,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;IACAD,KAAK,CAACE,SAAN,GAAkB,MAAlB;IACAF,KAAK,CAACG,OAAN,GAAgBH,KAAK,CAACI,KAAN,CAAYC,GAAZ,CAAgB,MAAhB,CAAhB;IACAL,KAAK,CAACM,QAAN,GAAiB,GAAjB;IACAN,KAAK,CAACO,UAAN,GAAmB,KAAnB;IACAP,KAAK,CAACQ,KAAN,GAAc,KAAd;IACA,IAAIC,eAAe,GAAG,IAAId,iBAAJ,EAAtB;IACAK,KAAK,CAACU,MAAN,GAAeD,eAAe,CAACE,MAAhB,CAAuB,MAAvB,CAAf;IACAX,KAAK,CAACY,YAAN,GAAqB,IAArB;IACAZ,KAAK,CAACa,aAAN,GAAsB,IAAtB;IACAb,KAAK,CAACc,IAAN,GAAapB,KAAK,EAAlB,CAXY,CAWU;;IACtBM,KAAK,CAACe,UAAN;;IACA,OAAOf,KAAP;EACH;;EACDgB,MAAM,CAACC,cAAP,CAAsBnB,IAAI,CAACoB,SAA3B,EAAsC,UAAtC,EAAkD;IAC9C;AACR;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,KAAKC,gBAAL,CAAsB,UAAtB,CAAP;IACH,CAN6C;;IAO9C;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKC,gBAAL,CAAsB,UAAtB,EAAkCD,KAAlC,EAAyC,IAAzC;IACH,CAlB6C;IAmB9CE,UAAU,EAAE,IAnBkC;IAoB9CC,YAAY,EAAE;EApBgC,CAAlD;EAsBAT,MAAM,CAACC,cAAP,CAAsBnB,IAAI,CAACoB,SAA3B,EAAsC,OAAtC,EAA+C;IAC3C;AACR;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,KAAKC,gBAAL,CAAsB,OAAtB,CAAP;IACH,CAN0C;;IAO3C;AACR;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKC,gBAAL,CAAsB,OAAtB,EAA+BD,KAA/B,EAAsC,IAAtC;IACH,CAhB0C;IAiB3CE,UAAU,EAAE,IAjB+B;IAkB3CC,YAAY,EAAE;EAlB6B,CAA/C;EAoBA;AACJ;AACA;;EACI3B,IAAI,CAACoB,SAAL,CAAeQ,WAAf,GAA6B,UAAUJ,KAAV,EAAiB;IAC1C,IAAIK,OAAO,GAAG5B,MAAM,CAACmB,SAAP,CAAiBQ,WAAjB,CAA6BzB,IAA7B,CAAkC,IAAlC,EAAwCqB,KAAxC,CAAd;;IACA,IAAI,KAAKM,IAAT,EAAe;MACX,KAAKA,IAAL,CAAUC,mBAAV;IACH;;IACD,OAAOF,OAAP;EACH,CAND;;EAOA,OAAO7B,IAAP;AACH,CAzEyB,CAyExBN,MAzEwB,CAA1B;;AA0EA,SAASM,IAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACAL,QAAQ,CAACqC,iBAAT,CAA2B,MAA3B,IAAqChC,IAArC;AACA;AACA;AACA;;AACA;AACA;AACA;;AACAF,YAAY,CAACmC,IAAb,CAAkB;EACdC,QAAQ,EAAEnC,qBAAqB,CAACoC,OADlB;EAEdC,KAAK,EAAE,UAAUC,MAAV,EAAkBC,OAAlB,EAA2B;IAC9B,IAAID,MAAM,YAAYrC,IAAtB,EAA4B;MACxB,IAAIoC,KAAK,GAAGC,MAAM,CAACE,MAAP,CAAcC,MAAd,CAAqBF,OAArB,CAAZ;MACAF,KAAK,CAACK,UAAN,CAAiBC,QAAjB,GAA4B,IAA5B;MACA,OAAON,KAAP;IACH;;IACD,OAAO,IAAP;EACH;AATa,CAAlB"},"metadata":{},"sourceType":"module"}