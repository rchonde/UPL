{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/tree_list/ui.tree_list.grid_view.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport treeListCore from \"./ui.tree_list.core\";\nimport { gridViewModule } from \"../grid_core/ui.grid_core.grid_view\";\nimport { deferRender, deferUpdate } from \"../../core/utils/common\";\nvar GridView = gridViewModule.views.gridView.inherit({\n  _getWidgetAriaLabel: function () {\n    return \"dxTreeList-ariaTreeList\";\n  },\n  _getTableRoleName: function () {\n    return \"treegrid\";\n  }\n});\ntreeListCore.registerModule(\"gridView\", {\n  defaultOptions: gridViewModule.defaultOptions,\n  controllers: gridViewModule.controllers,\n  views: {\n    gridView: GridView\n  },\n  extenders: {\n    controllers: {\n      resizing: {\n        _synchronizeColumns: function () {\n          var wordWrap = this.option(\"wordWrapEnabled\");\n\n          if (wordWrap) {\n            this._toggleContentMinHeight(true);\n          }\n\n          this.callBase(arguments);\n\n          if (wordWrap) {\n            deferUpdate(() => {\n              deferRender(() => {\n                deferUpdate(() => {\n                  this._toggleContentMinHeight(false);\n                });\n              });\n            });\n          }\n        },\n        _toggleBestFitMode: function (isBestFit) {\n          this.callBase(isBestFit);\n\n          var $rowsTable = this._rowsView.getTableElement();\n\n          $rowsTable.find(\".dx-treelist-cell-expandable\").toggleClass(this.addWidgetPrefix(\"best-fit\"), isBestFit);\n        }\n      }\n    }\n  }\n});","map":{"version":3,"names":["treeListCore","gridViewModule","deferRender","deferUpdate","GridView","views","gridView","inherit","_getWidgetAriaLabel","_getTableRoleName","registerModule","defaultOptions","controllers","extenders","resizing","_synchronizeColumns","wordWrap","option","_toggleContentMinHeight","callBase","arguments","_toggleBestFitMode","isBestFit","$rowsTable","_rowsView","getTableElement","find","toggleClass","addWidgetPrefix"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/devextreme/esm/ui/tree_list/ui.tree_list.grid_view.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/tree_list/ui.tree_list.grid_view.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport treeListCore from \"./ui.tree_list.core\";\r\nimport {\r\n    gridViewModule\r\n} from \"../grid_core/ui.grid_core.grid_view\";\r\nimport {\r\n    deferRender,\r\n    deferUpdate\r\n} from \"../../core/utils/common\";\r\nvar GridView = gridViewModule.views.gridView.inherit({\r\n    _getWidgetAriaLabel: function() {\r\n        return \"dxTreeList-ariaTreeList\"\r\n    },\r\n    _getTableRoleName: function() {\r\n        return \"treegrid\"\r\n    }\r\n});\r\ntreeListCore.registerModule(\"gridView\", {\r\n    defaultOptions: gridViewModule.defaultOptions,\r\n    controllers: gridViewModule.controllers,\r\n    views: {\r\n        gridView: GridView\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            resizing: {\r\n                _synchronizeColumns: function() {\r\n                    var wordWrap = this.option(\"wordWrapEnabled\");\r\n                    if (wordWrap) {\r\n                        this._toggleContentMinHeight(true)\r\n                    }\r\n                    this.callBase(arguments);\r\n                    if (wordWrap) {\r\n                        deferUpdate(() => {\r\n                            deferRender(() => {\r\n                                deferUpdate(() => {\r\n                                    this._toggleContentMinHeight(false)\r\n                                })\r\n                            })\r\n                        })\r\n                    }\r\n                },\r\n                _toggleBestFitMode: function(isBestFit) {\r\n                    this.callBase(isBestFit);\r\n                    var $rowsTable = this._rowsView.getTableElement();\r\n                    $rowsTable.find(\".dx-treelist-cell-expandable\").toggleClass(this.addWidgetPrefix(\"best-fit\"), isBestFit)\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,SACIC,cADJ,QAEO,qCAFP;AAGA,SACIC,WADJ,EAEIC,WAFJ,QAGO,yBAHP;AAIA,IAAIC,QAAQ,GAAGH,cAAc,CAACI,KAAf,CAAqBC,QAArB,CAA8BC,OAA9B,CAAsC;EACjDC,mBAAmB,EAAE,YAAW;IAC5B,OAAO,yBAAP;EACH,CAHgD;EAIjDC,iBAAiB,EAAE,YAAW;IAC1B,OAAO,UAAP;EACH;AANgD,CAAtC,CAAf;AAQAT,YAAY,CAACU,cAAb,CAA4B,UAA5B,EAAwC;EACpCC,cAAc,EAAEV,cAAc,CAACU,cADK;EAEpCC,WAAW,EAAEX,cAAc,CAACW,WAFQ;EAGpCP,KAAK,EAAE;IACHC,QAAQ,EAAEF;EADP,CAH6B;EAMpCS,SAAS,EAAE;IACPD,WAAW,EAAE;MACTE,QAAQ,EAAE;QACNC,mBAAmB,EAAE,YAAW;UAC5B,IAAIC,QAAQ,GAAG,KAAKC,MAAL,CAAY,iBAAZ,CAAf;;UACA,IAAID,QAAJ,EAAc;YACV,KAAKE,uBAAL,CAA6B,IAA7B;UACH;;UACD,KAAKC,QAAL,CAAcC,SAAd;;UACA,IAAIJ,QAAJ,EAAc;YACVb,WAAW,CAAC,MAAM;cACdD,WAAW,CAAC,MAAM;gBACdC,WAAW,CAAC,MAAM;kBACd,KAAKe,uBAAL,CAA6B,KAA7B;gBACH,CAFU,CAAX;cAGH,CAJU,CAAX;YAKH,CANU,CAAX;UAOH;QACJ,CAhBK;QAiBNG,kBAAkB,EAAE,UAASC,SAAT,EAAoB;UACpC,KAAKH,QAAL,CAAcG,SAAd;;UACA,IAAIC,UAAU,GAAG,KAAKC,SAAL,CAAeC,eAAf,EAAjB;;UACAF,UAAU,CAACG,IAAX,CAAgB,8BAAhB,EAAgDC,WAAhD,CAA4D,KAAKC,eAAL,CAAqB,UAArB,CAA5D,EAA8FN,SAA9F;QACH;MArBK;IADD;EADN;AANyB,CAAxC"},"metadata":{},"sourceType":"module"}