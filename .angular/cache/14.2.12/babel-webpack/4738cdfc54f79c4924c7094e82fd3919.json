{"ast":null,"code":"/**\r\n * SankeyNode module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { FlowDiagramNode } from \"./FlowDiagramNode\";\nimport { LabelBullet } from \"./LabelBullet\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar SankeyNode =\n/** @class */\nfunction (_super) {\n  __extends(SankeyNode, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SankeyNode() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * [nextInCoord description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n\n    _this.nextInCoord = 0;\n    /**\r\n     * [nextOutCoord description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this.nextOutCoord = 0;\n    _this.className = \"SankeyNode\";\n    _this.width = 10;\n    _this.height = 10;\n\n    var nameLabel = _this.createChild(LabelBullet);\n\n    nameLabel.shouldClone = false; //@should we auto update these locations if position is changed?\n\n    nameLabel.locationX = 1;\n    nameLabel.locationY = 0.5;\n    nameLabel.label.text = \"{name}\"; //nameLabel.label.textElement.hideOversized = false;\n\n    nameLabel.width = 150;\n    nameLabel.height = 150;\n    nameLabel.label.horizontalCenter = \"left\";\n    nameLabel.label.padding(0, 5, 0, 5);\n    _this.nameLabel = nameLabel;\n\n    var valueLabel = _this.createChild(LabelBullet);\n\n    valueLabel.shouldClone = false;\n    valueLabel.label.hideOversized = false;\n    valueLabel.locationX = 0.5;\n    valueLabel.locationY = 0.5;\n    valueLabel.width = 150;\n    valueLabel.height = 150; //valueLabel.label.text = \"{value}\";\n\n    valueLabel.label.horizontalCenter = \"middle\";\n    _this.valueLabel = valueLabel;\n    var hiddenState = _this.hiddenState;\n    hiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\n    hiddenState.properties.opacity = 0.5;\n    hiddenState.properties.visible = true;\n\n    _this.background.hiddenState.copyFrom(hiddenState);\n\n    return _this;\n  }\n  /**\r\n   * Invalidates all links, attached to this node.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  SankeyNode.prototype.invalidateLinks = function () {\n    var _this = this;\n\n    _super.prototype.invalidateLinks.call(this);\n\n    this.nextInCoord = 0;\n    this.nextOutCoord = 0;\n    var chart = this.chart;\n\n    if (chart) {\n      var orientation_1 = chart.orientation;\n\n      if (this._incomingSorted) {\n        $iter.each(this._incomingSorted, function (dataItem) {\n          var link = dataItem.link;\n          var value = dataItem.getWorkingValue(\"value\");\n\n          if ($type.isNumber(value)) {\n            link.parent = _this.chart.linksContainer;\n            var x = void 0;\n            var y = void 0;\n            var angle = void 0;\n\n            if (orientation_1 == \"horizontal\") {\n              x = _this.pixelX + _this.dx;\n              y = _this.nextInCoord + _this.pixelY + _this.dy;\n              angle = 0;\n            } else {\n              y = _this.pixelY + _this.dy;\n              x = _this.nextInCoord + _this.pixelX + _this.dx;\n              angle = 90;\n            }\n\n            link.endX = x;\n            link.endY = y;\n            link.startAngle = angle;\n            link.endAngle = angle;\n            link.gradient.rotation = angle;\n            link.linkWidth = value * chart.valueHeight;\n\n            if (!dataItem.fromNode) {\n              if (orientation_1 == \"horizontal\") {\n                link.maxWidth = 200;\n                link.startX = _this.pixelX + _this.dx - link.maxWidth;\n                link.startY = link.endY;\n              } else {\n                link.maxHeight = 200;\n                link.startX = link.endX;\n                link.startY = _this.pixelY + _this.dy - link.maxHeight;\n              } // TODO is this needed ?\n\n\n              $utils.used(link.gradient);\n              link.fill = dataItem.toNode.color;\n              var stop_1 = link.gradient.stops.getIndex(0);\n\n              if (stop_1) {\n                if (link.colorMode == \"gradient\") {\n                  stop_1.color = _this.color;\n                }\n\n                stop_1.opacity = 0;\n                link.fill = link.gradient;\n                link.stroke = link.gradient;\n                link.gradient.validate();\n              }\n            } //link.validate();\n\n\n            _this.nextInCoord += link.linkWidth;\n          }\n        });\n      }\n\n      if (this._outgoingSorted) {\n        $iter.each(this._outgoingSorted, function (dataItem) {\n          var link = dataItem.link;\n          link.parent = _this.chart.linksContainer;\n          var value = dataItem.getWorkingValue(\"value\");\n\n          if ($type.isNumber(value)) {\n            var x = void 0;\n            var y = void 0;\n            var angle = void 0;\n\n            if (orientation_1 == \"horizontal\") {\n              angle = 0;\n              x = _this.pixelX + _this.pixelWidth + _this.dx - 1;\n              y = _this.nextOutCoord + _this.pixelY + _this.dy;\n            } else {\n              angle = 90;\n              x = _this.nextOutCoord + _this.pixelX + _this.dx;\n              y = _this.pixelY + _this.pixelHeight + _this.dy - 1;\n            }\n\n            link.startX = x;\n            link.startY = y;\n            link.startAngle = angle;\n            link.endAngle = angle;\n            link.gradient.rotation = angle;\n            link.linkWidth = value * _this.chart.valueHeight;\n\n            if (!dataItem.toNode) {\n              if (orientation_1 == \"horizontal\") {\n                link.maxWidth = 200;\n                link.endX = _this.pixelX + link.maxWidth + _this.dx;\n                link.endY = link.startY;\n              } else {\n                link.maxHeight = 200;\n                link.endX = link.startX;\n                link.endY = _this.pixelY + link.maxHeight + _this.dy;\n              }\n\n              link.opacity = _this.opacity;\n              var stop_2 = link.gradient.stops.getIndex(1);\n\n              if (stop_2) {\n                if (link.colorMode == \"gradient\") {\n                  stop_2.color = _this.color;\n                }\n\n                stop_2.opacity = 0;\n                link.fill = link.gradient;\n                link.stroke = link.gradient;\n                link.gradient.validate();\n              }\n            } //link.validate();\n\n\n            _this.nextOutCoord += link.linkWidth;\n          }\n        });\n      }\n    }\n\n    this.positionBullet(this.nameLabel);\n    this.positionBullet(this.valueLabel);\n  };\n  /**\r\n   * Positions the bullet so it is centered within the node element.\r\n   *\r\n   * @param bullet  Target bullet\r\n   */\n\n\n  SankeyNode.prototype.positionBullet = function (bullet) {\n    if (bullet) {\n      bullet.x = this.measuredWidth * bullet.locationX;\n      bullet.y = this.measuredHeight * bullet.locationY;\n    }\n  };\n\n  Object.defineProperty(SankeyNode.prototype, \"level\", {\n    /**\r\n     * @return Level\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"level\");\n    },\n\n    /**\r\n     * A level node is displayed at. (0 - ...)\r\n     *\r\n     * Levels are measured from left to right.\r\n     *\r\n     * The nodes in the left-most column will have `level = 0`.\r\n     *\r\n     * Nodes in second column - `level = 1`, etc.\r\n     *\r\n     * @param value  Level\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"level\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties and labels from another [[SankeyNode]].\r\n   *\r\n   * @param source  Source node\r\n   */\n\n  SankeyNode.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.nameLabel.copyFrom(source.nameLabel);\n    this.valueLabel.copyFrom(source.valueLabel);\n  };\n\n  return SankeyNode;\n}(FlowDiagramNode);\n\nexport { SankeyNode };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;","map":{"version":3,"names":["__extends","FlowDiagramNode","LabelBullet","registry","InterfaceColorSet","$iter","$type","$utils","SankeyNode","_super","_this","call","nextInCoord","nextOutCoord","className","width","height","nameLabel","createChild","shouldClone","locationX","locationY","label","text","horizontalCenter","padding","valueLabel","hideOversized","hiddenState","properties","fill","getFor","opacity","visible","background","copyFrom","prototype","invalidateLinks","chart","orientation_1","orientation","_incomingSorted","each","dataItem","link","value","getWorkingValue","isNumber","parent","linksContainer","x","y","angle","pixelX","dx","pixelY","dy","endX","endY","startAngle","endAngle","gradient","rotation","linkWidth","valueHeight","fromNode","maxWidth","startX","startY","maxHeight","used","toNode","color","stop_1","stops","getIndex","colorMode","stroke","validate","_outgoingSorted","pixelWidth","pixelHeight","stop_2","positionBullet","bullet","measuredWidth","measuredHeight","Object","defineProperty","get","getPropertyValue","set","setPropertyValue","enumerable","configurable","source","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/elements/SankeyNode.js"],"sourcesContent":["/**\r\n * SankeyNode module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode } from \"./FlowDiagramNode\";\r\nimport { LabelBullet } from \"./LabelBullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar SankeyNode = /** @class */ (function (_super) {\r\n    __extends(SankeyNode, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SankeyNode() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * [nextInCoord description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.nextInCoord = 0;\r\n        /**\r\n         * [nextOutCoord description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.nextOutCoord = 0;\r\n        _this.className = \"SankeyNode\";\r\n        _this.width = 10;\r\n        _this.height = 10;\r\n        var nameLabel = _this.createChild(LabelBullet);\r\n        nameLabel.shouldClone = false;\r\n        //@should we auto update these locations if position is changed?\r\n        nameLabel.locationX = 1;\r\n        nameLabel.locationY = 0.5;\r\n        nameLabel.label.text = \"{name}\";\r\n        //nameLabel.label.textElement.hideOversized = false;\r\n        nameLabel.width = 150;\r\n        nameLabel.height = 150;\r\n        nameLabel.label.horizontalCenter = \"left\";\r\n        nameLabel.label.padding(0, 5, 0, 5);\r\n        _this.nameLabel = nameLabel;\r\n        var valueLabel = _this.createChild(LabelBullet);\r\n        valueLabel.shouldClone = false;\r\n        valueLabel.label.hideOversized = false;\r\n        valueLabel.locationX = 0.5;\r\n        valueLabel.locationY = 0.5;\r\n        valueLabel.width = 150;\r\n        valueLabel.height = 150;\r\n        //valueLabel.label.text = \"{value}\";\r\n        valueLabel.label.horizontalCenter = \"middle\";\r\n        _this.valueLabel = valueLabel;\r\n        var hiddenState = _this.hiddenState;\r\n        hiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n        hiddenState.properties.opacity = 0.5;\r\n        hiddenState.properties.visible = true;\r\n        _this.background.hiddenState.copyFrom(hiddenState);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Invalidates all links, attached to this node.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SankeyNode.prototype.invalidateLinks = function () {\r\n        var _this = this;\r\n        _super.prototype.invalidateLinks.call(this);\r\n        this.nextInCoord = 0;\r\n        this.nextOutCoord = 0;\r\n        var chart = this.chart;\r\n        if (chart) {\r\n            var orientation_1 = chart.orientation;\r\n            if (this._incomingSorted) {\r\n                $iter.each(this._incomingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    var value = dataItem.getWorkingValue(\"value\");\r\n                    if ($type.isNumber(value)) {\r\n                        link.parent = _this.chart.linksContainer;\r\n                        var x = void 0;\r\n                        var y = void 0;\r\n                        var angle = void 0;\r\n                        if (orientation_1 == \"horizontal\") {\r\n                            x = _this.pixelX + _this.dx;\r\n                            y = _this.nextInCoord + _this.pixelY + _this.dy;\r\n                            angle = 0;\r\n                        }\r\n                        else {\r\n                            y = _this.pixelY + _this.dy;\r\n                            x = _this.nextInCoord + _this.pixelX + _this.dx;\r\n                            angle = 90;\r\n                        }\r\n                        link.endX = x;\r\n                        link.endY = y;\r\n                        link.startAngle = angle;\r\n                        link.endAngle = angle;\r\n                        link.gradient.rotation = angle;\r\n                        link.linkWidth = value * chart.valueHeight;\r\n                        if (!dataItem.fromNode) {\r\n                            if (orientation_1 == \"horizontal\") {\r\n                                link.maxWidth = 200;\r\n                                link.startX = _this.pixelX + _this.dx - link.maxWidth;\r\n                                link.startY = link.endY;\r\n                            }\r\n                            else {\r\n                                link.maxHeight = 200;\r\n                                link.startX = link.endX;\r\n                                link.startY = _this.pixelY + _this.dy - link.maxHeight;\r\n                            }\r\n                            // TODO is this needed ?\r\n                            $utils.used(link.gradient);\r\n                            link.fill = dataItem.toNode.color;\r\n                            var stop_1 = link.gradient.stops.getIndex(0);\r\n                            if (stop_1) {\r\n                                if (link.colorMode == \"gradient\") {\r\n                                    stop_1.color = _this.color;\r\n                                }\r\n                                stop_1.opacity = 0;\r\n                                link.fill = link.gradient;\r\n                                link.stroke = link.gradient;\r\n                                link.gradient.validate();\r\n                            }\r\n                        }\r\n                        //link.validate();\r\n                        _this.nextInCoord += link.linkWidth;\r\n                    }\r\n                });\r\n            }\r\n            if (this._outgoingSorted) {\r\n                $iter.each(this._outgoingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    link.parent = _this.chart.linksContainer;\r\n                    var value = dataItem.getWorkingValue(\"value\");\r\n                    if ($type.isNumber(value)) {\r\n                        var x = void 0;\r\n                        var y = void 0;\r\n                        var angle = void 0;\r\n                        if (orientation_1 == \"horizontal\") {\r\n                            angle = 0;\r\n                            x = _this.pixelX + _this.pixelWidth + _this.dx - 1;\r\n                            y = _this.nextOutCoord + _this.pixelY + _this.dy;\r\n                        }\r\n                        else {\r\n                            angle = 90;\r\n                            x = _this.nextOutCoord + _this.pixelX + _this.dx;\r\n                            y = _this.pixelY + _this.pixelHeight + _this.dy - 1;\r\n                        }\r\n                        link.startX = x;\r\n                        link.startY = y;\r\n                        link.startAngle = angle;\r\n                        link.endAngle = angle;\r\n                        link.gradient.rotation = angle;\r\n                        link.linkWidth = value * _this.chart.valueHeight;\r\n                        if (!dataItem.toNode) {\r\n                            if (orientation_1 == \"horizontal\") {\r\n                                link.maxWidth = 200;\r\n                                link.endX = _this.pixelX + link.maxWidth + _this.dx;\r\n                                link.endY = link.startY;\r\n                            }\r\n                            else {\r\n                                link.maxHeight = 200;\r\n                                link.endX = link.startX;\r\n                                link.endY = _this.pixelY + link.maxHeight + _this.dy;\r\n                            }\r\n                            link.opacity = _this.opacity;\r\n                            var stop_2 = link.gradient.stops.getIndex(1);\r\n                            if (stop_2) {\r\n                                if (link.colorMode == \"gradient\") {\r\n                                    stop_2.color = _this.color;\r\n                                }\r\n                                stop_2.opacity = 0;\r\n                                link.fill = link.gradient;\r\n                                link.stroke = link.gradient;\r\n                                link.gradient.validate();\r\n                            }\r\n                        }\r\n                        //link.validate();\r\n                        _this.nextOutCoord += link.linkWidth;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        this.positionBullet(this.nameLabel);\r\n        this.positionBullet(this.valueLabel);\r\n    };\r\n    /**\r\n     * Positions the bullet so it is centered within the node element.\r\n     *\r\n     * @param bullet  Target bullet\r\n     */\r\n    SankeyNode.prototype.positionBullet = function (bullet) {\r\n        if (bullet) {\r\n            bullet.x = this.measuredWidth * bullet.locationX;\r\n            bullet.y = this.measuredHeight * bullet.locationY;\r\n        }\r\n    };\r\n    Object.defineProperty(SankeyNode.prototype, \"level\", {\r\n        /**\r\n         * @return Level\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"level\");\r\n        },\r\n        /**\r\n         * A level node is displayed at. (0 - ...)\r\n         *\r\n         * Levels are measured from left to right.\r\n         *\r\n         * The nodes in the left-most column will have `level = 0`.\r\n         *\r\n         * Nodes in second column - `level = 1`, etc.\r\n         *\r\n         * @param value  Level\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"level\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies properties and labels from another [[SankeyNode]].\r\n     *\r\n     * @param source  Source node\r\n     */\r\n    SankeyNode.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.nameLabel.copyFrom(source.nameLabel);\r\n        this.valueLabel.copyFrom(source.valueLabel);\r\n    };\r\n    return SankeyNode;\r\n}(FlowDiagramNode));\r\nexport { SankeyNode };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}