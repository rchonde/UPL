{"ast":null,"code":"/**\r\n * XY Chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\nimport { Container } from \"../../core/Container\";\nimport { List, ListDisposer } from \"../../core/utils/List\";\nimport { Color } from \"../../core/utils/Color\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { DateAxis } from \"../axes/DateAxis\";\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\nimport { XYSeries } from \"../series/XYSeries\";\nimport { Disposer } from \"../../core/utils/Disposer\";\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $number from \"../../core/utils/Number\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar XYChartDataItem =\n/** @class */\nfunction (_super) {\n  __extends(XYChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"XYChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return XYChartDataItem;\n}(SerialChartDataItem);\n\nexport { XYChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\n\nvar XYChart =\n/** @class */\nfunction (_super) {\n  __extends(XYChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYChart() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Defines the type of horizontal axis rederer.\r\n     */\n\n\n    _this._axisRendererX = AxisRendererX;\n    /**\r\n     * Defines the type of vertical axis rederer.\r\n     */\n\n    _this._axisRendererY = AxisRendererY;\n    /**\r\n     * @ignore\r\n     */\n\n    _this._seriesPoints = [];\n    _this.className = \"XYChart\"; // Set defaults\n    //this.margin(10, 10, 10, 10);\n\n    _this.maskBullets = true;\n    _this.arrangeTooltips = true; // Create main chart container\n\n    var chartContainer = _this.chartContainer;\n    chartContainer.layout = \"vertical\";\n\n    _this.padding(15, 15, 15, 15); // Create top axes container\n\n\n    var topAxesCont = chartContainer.createChild(Container);\n    topAxesCont.shouldClone = false;\n    topAxesCont.layout = \"vertical\";\n    topAxesCont.width = percent(100);\n    topAxesCont.zIndex = 1;\n    _this.topAxesContainer = topAxesCont; // Create vertical axes and plot area container\n    // Plot area and vertical axes share the whole width of the chart,\n    // so we need to put then into a separate container so that layouting\n    // engine takes care of the positioning\n\n    var yAxesAndPlotCont = chartContainer.createChild(Container);\n    yAxesAndPlotCont.shouldClone = false;\n    yAxesAndPlotCont.layout = \"horizontal\";\n    yAxesAndPlotCont.width = percent(100);\n    yAxesAndPlotCont.height = percent(100);\n    yAxesAndPlotCont.zIndex = 0;\n    _this.yAxesAndPlotContainer = yAxesAndPlotCont; // Create a container for bottom axes\n\n    var bottomAxesCont = chartContainer.createChild(Container);\n    bottomAxesCont.shouldClone = false;\n    bottomAxesCont.width = percent(100);\n    bottomAxesCont.layout = \"vertical\";\n    bottomAxesCont.zIndex = 1;\n    _this.bottomAxesContainer = bottomAxesCont; // Create a container for left-side axes\n\n    var leftAxesCont = yAxesAndPlotCont.createChild(Container);\n    leftAxesCont.shouldClone = false;\n    leftAxesCont.layout = \"horizontal\";\n    leftAxesCont.height = percent(100);\n    leftAxesCont.contentAlign = \"right\";\n    leftAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\n    leftAxesCont.zIndex = 1;\n    _this.leftAxesContainer = leftAxesCont; // Create a container for plot area\n\n    var plotCont = yAxesAndPlotCont.createChild(Container);\n    plotCont.shouldClone = false;\n    plotCont.height = percent(100);\n    plotCont.width = percent(100); // Create transparend background for plot container so that hover works\n    // on all of it\n\n    plotCont.background.fillOpacity = 0;\n    _this.plotContainer = plotCont; // must go below plot container\n\n    _this.mouseWheelBehavior = \"none\";\n    _this._cursorContainer = plotCont; // Create a container for right-side axes\n\n    var rightAxesCont = yAxesAndPlotCont.createChild(Container);\n    rightAxesCont.shouldClone = false;\n    rightAxesCont.layout = \"horizontal\";\n    rightAxesCont.height = percent(100);\n    rightAxesCont.zIndex = 1;\n    rightAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\n    _this.rightAxesContainer = rightAxesCont;\n    _this.seriesContainer.parent = plotCont;\n    _this.bulletsContainer.parent = plotCont;\n    var zoomOutButton = plotCont.createChild(ZoomOutButton);\n    zoomOutButton.shouldClone = false;\n    zoomOutButton.align = \"right\";\n    zoomOutButton.valign = \"top\";\n    zoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\n    zoomOutButton.marginTop = 5;\n    zoomOutButton.marginRight = 5;\n    zoomOutButton.hide(0);\n    _this.zoomOutButton = zoomOutButton; // Create a container for bullets\n\n    var axisBulletsContainer = _this.plotContainer.createChild(Container);\n\n    axisBulletsContainer.shouldClone = false;\n    axisBulletsContainer.width = percent(100);\n    axisBulletsContainer.height = percent(100);\n    axisBulletsContainer.isMeasured = false;\n    axisBulletsContainer.zIndex = 4;\n    axisBulletsContainer.layout = \"none\";\n    _this.axisBulletsContainer = axisBulletsContainer;\n    _this._bulletMask = _this.plotContainer;\n\n    _this.events.on(\"beforedatavalidated\", function () {\n      _this.series.each(function (series) {\n        series.dataGrouped = false;\n        series._baseInterval = {};\n      });\n    }, _this, false); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  XYChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    this.zoomOutButton.exportable = false; // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"X/Y chart\");\n    }\n  };\n  /**\r\n   * Draws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    this.seriesContainer.toFront();\n    this.bulletsContainer.toFront();\n\n    if (this.maskBullets) {\n      this.bulletsContainer.mask = this._bulletMask;\n    }\n\n    this.updateSeriesLegend();\n  };\n  /**\r\n   * Triggers a redrawing of all chart's series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.updatePlotElements = function () {\n    $iter.each(this.series.iterator(), function (series) {\n      series.invalidate();\n    });\n  };\n  /**\r\n   * Triggers data (re)validation which in turn can cause a redraw of the\r\n   * whole chart or just aprticular series / elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.validateData = function () {\n    // tell axes that data changed\n    if (this._parseDataFrom == 0) {\n      $iter.each(this.xAxes.iterator(), function (axis) {\n        axis.dataChangeUpdate();\n      });\n      $iter.each(this.yAxes.iterator(), function (axis) {\n        axis.dataChangeUpdate();\n      });\n      $iter.each(this.series.iterator(), function (series) {\n        series.dataChangeUpdate();\n      });\n    }\n\n    _super.prototype.validateData.call(this);\n  };\n  /**\r\n   * Updates margins for horizontal axes based on settings and available space.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.updateXAxesMargins = function () {\n    var leftAxesWidth = this.leftAxesContainer.measuredWidth;\n    var rightAxesWidth = this.rightAxesContainer.measuredWidth;\n    var bottomAxesCont = this.bottomAxesContainer;\n\n    if (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\n      bottomAxesCont.paddingLeft = leftAxesWidth;\n      bottomAxesCont.paddingRight = rightAxesWidth;\n    }\n\n    var topAxesCont = this.topAxesContainer;\n\n    if (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\n      topAxesCont.paddingLeft = leftAxesWidth;\n      topAxesCont.paddingRight = rightAxesWidth;\n    }\n  };\n  /**\r\n   * Triggers a re-initialization of this element.\r\n   *\r\n   * Will result in complete redrawing of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.reinit = function () {\n    _super.prototype.reinit.call(this);\n\n    this.series.each(function (series) {\n      series.appeared = false;\n    });\n  };\n  /**\r\n   * Triggers an update on the horizontal axis when one of its properties\r\n   * change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event object\r\n   */\n\n\n  XYChart.prototype.handleXAxisChange = function (event) {\n    this.updateXAxis(event.target);\n  };\n  /**\r\n   * Triggers an update on the vertical axis when one of its properties\r\n   * change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event object\r\n   */\n\n\n  XYChart.prototype.handleYAxisChange = function (event) {\n    this.updateYAxis(event.target);\n  };\n  /**\r\n   * Sets up a new horizontal (X) axis when it is added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Axis insert event\r\n   */\n\n\n  XYChart.prototype.processXAxis = function (event) {\n    var axis = event.newValue;\n    axis.chart = this;\n\n    if (!axis.renderer) {\n      axis.renderer = new this._axisRendererX();\n      axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\n    }\n\n    axis.axisLetter = \"X\";\n    axis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false); //axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\n    // Although axis does not use data directly, we set dataProvider here\n    // (but not add to chart data users) to hold up rendering before data\n    // is parsed (system handles this)\n\n    axis.dataProvider = this;\n    this.updateXAxis(axis.renderer);\n    this.processAxis(axis);\n  };\n  /**\r\n   * Sets up a new vertical (Y) axis when it is added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Axis insert event\r\n   */\n\n\n  XYChart.prototype.processYAxis = function (event) {\n    var axis = event.newValue;\n    axis.chart = this;\n\n    if (!axis.renderer) {\n      axis.renderer = new this._axisRendererY();\n      axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\n    }\n\n    axis.axisLetter = \"Y\";\n    axis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false); //axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\n    // Although axis does not use data directly, we set dataProvider here\n    // (but not add to chart data users) to hold up rendering before data\n    // is parsed (system handles this)\n\n    axis.dataProvider = this;\n    this.updateYAxis(axis.renderer);\n    this.processAxis(axis);\n  };\n  /**\r\n   * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n   * value range changes.\r\n   */\n\n\n  XYChart.prototype.handleXAxisRangeChange = function () {\n    var range = this.getCommonAxisRange(this.xAxes);\n\n    if (this.scrollbarX) {\n      this.zoomAxes(this.xAxes, range, true);\n    }\n\n    this.toggleZoomOutButton();\n    this.updateScrollbar(this.scrollbarX, range);\n  };\n  /**\r\n   * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n   * zoomed out or not.\r\n   */\n\n\n  XYChart.prototype.toggleZoomOutButton = function () {\n    if (this.zoomOutButton) {\n      var show_1 = false;\n      $iter.eachContinue(this.xAxes.iterator(), function (axis) {\n        if (axis.toggleZoomOutButton) {\n          if (axis.maxZoomCount > 0) {\n            var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\n\n            if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\n              show_1 = true;\n              return false;\n            }\n          } else {\n            if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\n              show_1 = true;\n              return false;\n            }\n          }\n        }\n\n        return true;\n      });\n      $iter.eachContinue(this.yAxes.iterator(), function (axis) {\n        if (axis.toggleZoomOutButton) {\n          if (axis.maxZoomCount > 0) {\n            var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\n\n            if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\n              show_1 = true;\n              return false;\n            }\n          } else {\n            if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\n              show_1 = true;\n              return false;\n            }\n          }\n\n          return true;\n        }\n      });\n\n      if (!this.seriesAppeared) {\n        show_1 = false;\n      }\n\n      if (show_1) {\n        this.zoomOutButton.show();\n      } else {\n        this.zoomOutButton.hide();\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   * moved this check to a separate method so that we could override it in TreeMapSeries\r\n   */\n\n\n  XYChart.prototype.seriesAppeared = function () {\n    var appeared = false;\n    $iter.each(this.series.iterator(), function (series) {\n      if (!series.appeared) {\n        appeared = false;\n        return false;\n      }\n    });\n    return appeared;\n  };\n  /**\r\n   * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n   * value range changes.\r\n   */\n\n\n  XYChart.prototype.handleYAxisRangeChange = function () {\n    var range = this.getCommonAxisRange(this.yAxes);\n\n    if (this.scrollbarY) {\n      this.zoomAxes(this.yAxes, range, true);\n    }\n\n    this.toggleZoomOutButton();\n    this.updateScrollbar(this.scrollbarY, range);\n  };\n  /**\r\n   * Updates a relative scrollbar whenever data range of the axis changes.\r\n   *\r\n   * @param scrollbar  Scrollbar instance\r\n   * @param range      New data (values) range of the axis\r\n   */\n\n\n  XYChart.prototype.updateScrollbar = function (scrollbar, range) {\n    if (scrollbar) {\n      scrollbar.skipRangeEvents();\n      scrollbar.start = range.start;\n      scrollbar.end = range.end;\n    }\n  };\n  /**\r\n   * Returns a common range of values between a list of axes.\r\n   *\r\n   * This is used to synchronize the zoom between multiple axes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axes  A list of axes\r\n   * @return Common value range\r\n   */\n\n\n  XYChart.prototype.getCommonAxisRange = function (axes) {\n    var start;\n    var end;\n    axes.each(function (axis) {\n      if (!axis.zoomable || axis instanceof ValueAxis && axis.syncWithAxis) {} else {\n        var axisStart = axis.start;\n        var axisEnd = axis.end;\n\n        if (axis.renderer.inversed) {\n          axisStart = 1 - axis.end;\n          axisEnd = 1 - axis.start;\n        }\n\n        if (!$type.isNumber(start) || axisStart < start) {\n          start = axisStart;\n        }\n\n        if (!$type.isNumber(end) || axisEnd > end) {\n          end = axisEnd;\n        }\n      }\n    });\n    return {\n      start: start,\n      end: end\n    };\n  };\n  /**\r\n   * Triggers (re)rendering of the horizontal (X) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   */\n\n\n  XYChart.prototype.updateXAxis = function (renderer) {\n    var axis = renderer.axis;\n\n    if (renderer.opposite) {\n      axis.parent = this.topAxesContainer;\n      axis.toFront();\n    } else {\n      axis.parent = this.bottomAxesContainer;\n      axis.toBack();\n    }\n\n    if (axis.renderer) {\n      axis.renderer.processRenderer();\n    }\n  };\n  /**\r\n   * Triggers (re)rendering of the vertical (Y) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   */\n\n\n  XYChart.prototype.updateYAxis = function (renderer) {\n    var axis = renderer.axis;\n\n    if (renderer.opposite) {\n      axis.parent = this.rightAxesContainer;\n      axis.toBack();\n    } else {\n      axis.parent = this.leftAxesContainer;\n      axis.toFront();\n    }\n\n    if (axis.renderer) {\n      axis.renderer.processRenderer();\n    }\n  };\n  /**\r\n   * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n   * and containers for placement.\r\n   *\r\n   * @param axis  Axis\r\n   */\n\n\n  XYChart.prototype.processAxis = function (axis) {\n    var _this = this; // Value axis does not use data directly, only category axis does\n\n\n    if (axis instanceof CategoryAxis) {\n      this._dataUsers.moveValue(axis);\n    }\n\n    var renderer = axis.renderer;\n    renderer.gridContainer.parent = this.plotContainer;\n    renderer.gridContainer.toBack();\n    renderer.breakContainer.parent = this.plotContainer;\n    renderer.breakContainer.toFront();\n    renderer.breakContainer.zIndex = 10;\n    axis.addDisposer(new Disposer(function () {\n      _this.dataUsers.removeValue(axis);\n    }));\n    renderer.bulletsContainer.parent = this.axisBulletsContainer;\n\n    this._disposers.push(axis.events.on(\"positionchanged\", function () {\n      var point = $utils.spritePointToSprite({\n        x: 0,\n        y: 0\n      }, axis, _this.axisBulletsContainer);\n\n      if (axis.renderer instanceof AxisRendererY) {\n        renderer.bulletsContainer.y = point.y;\n      }\n\n      if (axis.renderer instanceof AxisRendererX) {\n        renderer.bulletsContainer.x = point.x;\n      }\n    }, undefined, false));\n\n    this.plotContainer.events.on(\"maxsizechanged\", function () {\n      if (_this.inited) {\n        axis.invalidateDataItems();\n\n        _this.updateSeriesMasks();\n      }\n    }, axis, false);\n  };\n  /**\r\n   * This is done because for some reason IE doesn't change mask if path of a\r\n   * mask changes.\r\n   */\n\n\n  XYChart.prototype.updateSeriesMasks = function () {\n    if ($utils.isIE()) {\n      this.series.each(function (series) {\n        var mask = series.mainContainer.mask;\n        series.mainContainer.mask = undefined;\n        series.mainContainer.mask = mask;\n      });\n    }\n  };\n\n  XYChart.prototype.handleSeriesRemoved = function (event) {\n    var series = event.oldValue;\n\n    if (series) {\n      if (series.xAxis) {\n        series.xAxis.series.removeValue(series);\n        series.xAxis.invalidateProcessedData();\n      }\n\n      if (series.yAxis) {\n        series.yAxis.series.removeValue(series);\n        series.yAxis.invalidateProcessedData();\n      } // otherwise extremes won't change\n\n\n      this.series.each(function (series) {\n        series.resetExtremes();\n      });\n    }\n\n    _super.prototype.handleSeriesRemoved.call(this, event);\n  };\n\n  Object.defineProperty(XYChart.prototype, \"xAxes\", {\n    /**\r\n     * A list of horizontal (X) axes.\r\n     *\r\n     * @return List of axes\r\n     */\n    get: function () {\n      if (!this._xAxes) {\n        this._xAxes = new List();\n\n        this._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\n\n        this._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\n\n        this._disposers.push(new ListDisposer(this._xAxes, false));\n      }\n\n      return this._xAxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  XYChart.prototype.handleAxisRemoval = function (event) {\n    var axis = event.oldValue;\n    this.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\n\n    if (axis.autoDispose) {\n      axis.dispose();\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"yAxes\", {\n    /**\r\n     * A list of vertical (Y) axes.\r\n     *\r\n     * @return List of axes\r\n     */\n    get: function () {\n      if (!this._yAxes) {\n        this._yAxes = new List();\n\n        this._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\n\n        this._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\n\n        this._disposers.push(new ListDisposer(this._yAxes, false));\n      }\n\n      return this._yAxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates a new [[XYSeries]] object with required parameters when it is\r\n   * added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n  XYChart.prototype.handleSeriesAdded = function (event) {\n    try {\n      _super.prototype.handleSeriesAdded.call(this, event);\n\n      var series = event.newValue;\n\n      if (this.xAxes.length == 0 || this.yAxes.length == 0) {\n        registry.removeFromInvalidComponents(series);\n        series.dataInvalid = false;\n      }\n\n      $utils.used(series.xAxis); // this is enough to get axis, handled in getter\n\n      $utils.used(series.yAxis); // this is enough to get axis, handled in getter\n\n      series.maskBullets = series.maskBullets;\n\n      if (series.fill == undefined) {\n        if (this.patterns) {\n          if (!$type.hasValue(series.stroke)) {\n            series.stroke = this.colors.next();\n          }\n\n          series.fill = this.patterns.next();\n\n          if ($type.hasValue(series.fillOpacity)) {\n            series.fill.backgroundOpacity = series.fillOpacity;\n          }\n\n          if (series.stroke instanceof Color) {\n            series.fill.stroke = series.stroke;\n            series.fill.fill = series.stroke;\n          }\n        } else {\n          series.fill = this.colors.next();\n        }\n      }\n\n      if (!$type.hasValue(series.stroke)) {\n        series.stroke = series.fill;\n      }\n    } catch (e) {\n      this.raiseCriticalError(e);\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"cursor\", {\n    /**\r\n     * @return Cursor\r\n     */\n    get: function () {\n      return this._cursor;\n    },\n\n    /**\r\n     * Chart's [[Cursor]].\r\n     *\r\n     * @param cursor  Cursor\r\n     */\n    set: function (cursor) {\n      if (this._cursor != cursor) {\n        if (this._cursor) {\n          this.removeDispose(this._cursor);\n        }\n\n        this._cursor = cursor;\n\n        if (cursor) {\n          // TODO this is wrong, fix it\n          this._disposers.push(cursor);\n\n          cursor.chart = this;\n          cursor.shouldClone = false;\n          cursor.parent = this._cursorContainer;\n          cursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\n          cursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\n          cursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\n          cursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\n          cursor.events.on(\"panning\", this.handleCursorPanning, this, false);\n          cursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\n          cursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\n          cursor.events.on(\"hidden\", this.handleHideCursor, this, false);\n          cursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\n\n          if (this.tapToActivate) {\n            // We need this in order to setup cursor properly\n            this.setTapToActivate(this.tapToActivate);\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Performs tasks when the cursor's position changes, e.g. shows proper\r\n   * tooltips on axes and series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  XYChart.prototype.handleCursorPositionChange = function () {\n    var cursor = this.cursor;\n\n    if (cursor.visible && !cursor.isHiding) {\n      var xPosition_1 = this.cursor.xPosition;\n      var yPosition_1 = this.cursor.yPosition;\n      this.showSeriesTooltip({\n        x: xPosition_1,\n        y: yPosition_1\n      });\n      var exceptAxes_1 = [];\n      var snapToSeries = cursor.snapToSeries;\n\n      if (snapToSeries && !cursor.downPoint) {\n        if (snapToSeries instanceof XYSeries) {\n          snapToSeries = [snapToSeries];\n        }\n\n        var dataItems_1 = [];\n        $array.each(snapToSeries, function (snpSeries) {\n          if (!snpSeries.isHidden && !snpSeries.isHiding) {\n            var xAxis = snpSeries.xAxis;\n            var yAxis = snpSeries.yAxis;\n\n            if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\n              snpSeries.dataItems.each(function (dataItem) {\n                dataItems_1.push(dataItem);\n              });\n              $array.move(exceptAxes_1, snpSeries.yAxis);\n              $array.move(exceptAxes_1, snpSeries.xAxis);\n            } else {\n              if (snpSeries.baseAxis == snpSeries.xAxis) {\n                $array.move(exceptAxes_1, snpSeries.yAxis);\n                dataItems_1.push(xAxis.getSeriesDataItem(snpSeries, xAxis.toAxisPosition(xPosition_1), true));\n              }\n\n              if (snpSeries.baseAxis == snpSeries.yAxis) {\n                $array.move(exceptAxes_1, snpSeries.xAxis);\n                dataItems_1.push(yAxis.getSeriesDataItem(snpSeries, yAxis.toAxisPosition(yPosition_1), true));\n              }\n            }\n          }\n        });\n        var closestDataItem_1 = this.getClosest(dataItems_1, xPosition_1, yPosition_1);\n\n        if (closestDataItem_1) {\n          this.series.each(function (series) {\n            var closestSeries = closestDataItem_1.component;\n\n            if (series != closestSeries) {\n              series.hideTooltip();\n\n              if (series.xAxis != closestSeries.xAxis) {\n                series.xAxis.hideTooltip();\n                exceptAxes_1.push(series.xAxis);\n              }\n\n              if (series.yAxis != closestSeries.yAxis) {\n                series.yAxis.hideTooltip();\n                exceptAxes_1.push(series.yAxis);\n              }\n            }\n          });\n          closestDataItem_1.component.showTooltipAtDataItem(closestDataItem_1);\n          cursor.handleSnap(closestDataItem_1.component);\n        }\n      } //}\n\n\n      this._seriesPoints = [];\n\n      if (this._cursorXPosition != xPosition_1) {\n        this.showAxisTooltip(this.xAxes, xPosition_1, exceptAxes_1);\n      }\n\n      if (this._cursorYPosition != yPosition_1) {\n        this.showAxisTooltip(this.yAxes, yPosition_1, exceptAxes_1);\n      }\n\n      if (this.arrangeTooltips) {\n        this.sortSeriesTooltips(this._seriesPoints);\n      }\n\n      if (this.legend) {\n        this.legend.afterDraw();\n      }\n    }\n  };\n  /**\r\n   * Finds closest data item to position out of the array of items.\r\n   *\r\n   * @since 4.9.29\r\n   * @param   dataItems  Array of items\r\n   * @param              xPosition X position\r\n   * @param              yPosition Y position\r\n   * @return             Data item\r\n   */\n\n\n  XYChart.prototype.getClosest = function (dataItems, xPosition, yPosition) {\n    var minDistance = Infinity;\n    var closestDataItem;\n    $array.eachContinue(dataItems, function (dataItem) {\n      if (dataItem) {\n        var xAxis = dataItem.component.xAxis;\n        var yAxis = dataItem.component.yAxis;\n        var xPos = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.toAxisPosition(xPosition)));\n        var yPos = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.toAxisPosition(yPosition)));\n        var xField = dataItem.component.xField;\n        var yField = dataItem.component.yField;\n\n        if (xAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(xField))) {\n          return true;\n        }\n\n        if (yAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(yField))) {\n          return true;\n        }\n\n        var dxPosition = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\")));\n        var dyPosition = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.getPositionY(dataItem, yField, dataItem.locations[yField], \"valueY\")));\n        var distance = Math.sqrt(Math.pow(xPos - dxPosition, 2) + Math.pow(yPos - dyPosition, 2));\n\n        if (distance < minDistance) {\n          minDistance = distance;\n          closestDataItem = dataItem;\n        }\n\n        return true;\n      }\n    });\n    return closestDataItem;\n  };\n  /**\r\n   * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.handleHideCursor = function () {\n    this.hideObjectTooltip(this.xAxes);\n    this.hideObjectTooltip(this.yAxes);\n    this.hideObjectTooltip(this.series);\n    this._cursorXPosition = undefined;\n    this._cursorYPosition = undefined;\n    this.updateSeriesLegend();\n  };\n  /**\r\n   * Updates values for each series' legend item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYChart.prototype.updateSeriesLegend = function () {\n    $iter.each(this.series.iterator(), function (series) {\n      series.updateLegendValue();\n    });\n  };\n  /**\r\n   * Hides a tooltip for a list of objects.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprites  A list of sprites to hide tooltip for\r\n   */\n\n\n  XYChart.prototype.hideObjectTooltip = function (sprites) {\n    $iter.each(sprites.iterator(), function (sprite) {\n      if (sprite.cursorTooltipEnabled) {\n        sprite.hideTooltip(0);\n      }\n    });\n  };\n  /**\r\n   * Shows a tooltip for all chart's series, using specific coordinates as a\r\n   * reference point.\r\n   *\r\n   * The tooltip might be shown at different coordinates depending on the\r\n   * actual data point's position, overlapping with other tooltips, etc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Reference point\r\n   */\n\n\n  XYChart.prototype.showSeriesTooltip = function (position) {\n    var _this = this;\n\n    if (!position) {\n      this.series.each(function (series) {\n        series.hideTooltip();\n      });\n      return;\n    }\n\n    var seriesPoints = [];\n    this.series.each(function (series) {\n      //if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\n      if (series.xAxis instanceof DateAxis && series.xAxis.snapTooltip || series.yAxis instanceof DateAxis && series.yAxis.snapTooltip) {// void\n      } else {\n        var point = series.showTooltipAtPosition(position.x, position.y);\n\n        if (point) {\n          series.tooltip.setBounds($utils.spriteRectToSvg({\n            x: 0,\n            y: 0,\n            width: _this.pixelWidth,\n            height: _this.pixelHeight\n          }, _this));\n          seriesPoints.push({\n            series: series,\n            point: point\n          });\n        }\n      } //}\n\n    });\n\n    if (this.arrangeTooltips) {\n      this.sortSeriesTooltips(seriesPoints);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.sortSeriesTooltips = function (seriesPoints) {\n    if (seriesPoints.length > 0) {\n      var cursor_1 = this.cursor;\n\n      if (cursor_1 && $type.isNumber(cursor_1.maxTooltipDistance)) {\n        var cursorPoint_1 = $utils.spritePointToSvg({\n          x: cursor_1.point.x,\n          y: cursor_1.point.y\n        }, cursor_1);\n        var nearestSeries_1;\n        var nearestPoint_1;\n        var smallestDistance_1 = Infinity;\n        $array.each(seriesPoints, function (seriesPoint) {\n          var series = seriesPoint.series;\n          var fixedPoint = seriesPoint.point;\n\n          if (fixedPoint) {\n            var point = {\n              x: fixedPoint.x,\n              y: fixedPoint.y\n            };\n            var distance = Math.abs($math.getDistance(point, cursorPoint_1));\n\n            if (distance < smallestDistance_1) {\n              nearestPoint_1 = point;\n              smallestDistance_1 = distance;\n              nearestSeries_1 = series;\n            }\n          }\n        });\n        var newSeriesPoints_1 = [];\n\n        if (nearestSeries_1) {\n          $array.each(seriesPoints, function (seriesPoint) {\n            if (Math.abs($math.getDistance(seriesPoint.point, nearestPoint_1)) <= Math.abs(cursor_1.maxTooltipDistance)) {\n              newSeriesPoints_1.push({\n                series: seriesPoint.series,\n                point: seriesPoint.point\n              });\n            } else {\n              var tooltipDataItem = seriesPoint.series.tooltipDataItem;\n\n              if (tooltipDataItem) {\n                $array.each(tooltipDataItem.sprites, function (sprite) {\n                  sprite.isHover = false;\n                  sprite.handleOutReal(); // to avoid flicker\n                });\n              }\n\n              seriesPoint.series.hideTooltip(0);\n            }\n          });\n\n          if (cursor_1.maxTooltipDistance < 0) {\n            if (newSeriesPoints_1.length > 0) {\n              $array.each(newSeriesPoints_1, function (np) {\n                if (nearestSeries_1 != np.series) {\n                  np.series.hideTooltip(0);\n                }\n              });\n            }\n\n            newSeriesPoints_1 = [{\n              series: nearestSeries_1,\n              point: nearestPoint_1\n            }];\n          }\n        }\n\n        seriesPoints = newSeriesPoints_1;\n      }\n\n      var topLeft_1 = $utils.spritePointToSvg({\n        x: -0.5,\n        y: -0.5\n      }, this.plotContainer);\n      var bottomRight_1 = $utils.spritePointToSvg({\n        x: this.plotContainer.pixelWidth + 0.5,\n        y: this.plotContainer.pixelHeight + 0.5\n      }, this.plotContainer);\n      var sum_1 = 0;\n      var filteredSeriesPoints_1 = [];\n      $array.each(seriesPoints, function (seriesPoint) {\n        var point = seriesPoint.point;\n\n        if (point && $math.isInRectangle(point, {\n          x: topLeft_1.x,\n          y: topLeft_1.y,\n          width: bottomRight_1.x - topLeft_1.x,\n          height: bottomRight_1.y - topLeft_1.y\n        })) {\n          filteredSeriesPoints_1.push({\n            point: point,\n            series: seriesPoint.series\n          });\n          sum_1 += point.y;\n        }\n      });\n      seriesPoints = filteredSeriesPoints_1;\n      var firstSeries = this.series.getIndex(0);\n      var inversed = false;\n\n      if (firstSeries && firstSeries.yAxis && firstSeries.yAxis.renderer.inversed) {\n        inversed = true;\n      }\n\n      if (inversed) {\n        seriesPoints.sort(function (a, b) {\n          return $number.order(a.point.y, b.point.y);\n        });\n      } else {\n        seriesPoints.sort(function (a, b) {\n          return $number.order(b.point.y, a.point.y);\n        });\n        seriesPoints.reverse();\n      }\n\n      var averageY = sum_1 / seriesPoints.length;\n      var maxY = $utils.svgPointToDocument({\n        x: 0,\n        y: 0\n      }, this.svgContainer.SVGContainer).y;\n\n      if (seriesPoints.length > 0) {\n        var top_1 = topLeft_1.y;\n        var bottom = bottomRight_1.y; // TODO is this needed ?\n\n        $utils.spritePointToDocument({\n          x: 0,\n          y: top_1\n        }, this);\n        var dropped = false;\n\n        if (averageY > top_1 + (bottom - top_1) / 2) {\n          var nextHeight = bottom;\n\n          for (var i = seriesPoints.length - 1; i >= 0; i--) {\n            var series = seriesPoints[i].series;\n            var tooltip = series.tooltip;\n            var pointY = seriesPoints[i].point.y;\n            tooltip.setBounds({\n              x: 0,\n              y: -maxY,\n              width: this.pixelWidth,\n              height: nextHeight + maxY\n            });\n\n            if (tooltip.invalid) {\n              tooltip.validate();\n            }\n\n            tooltip.toBack();\n            nextHeight = $utils.spritePointToSvg({\n              x: 0,\n              y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop\n            }, tooltip).y;\n\n            if (nextHeight < -maxY) {\n              dropped = true;\n              break;\n            }\n          }\n        }\n\n        if (averageY <= top_1 + (bottom - top_1) / 2 || dropped) {\n          var nextY = top_1;\n\n          for (var i = 0, len = seriesPoints.length; i < len; i++) {\n            var series = seriesPoints[i].series;\n            var pointY = seriesPoints[i].point.y;\n            var tooltip = series.tooltip;\n            tooltip.setBounds({\n              x: 0,\n              y: nextY,\n              width: this.pixelWidth,\n              height: bottom\n            });\n\n            if (tooltip.invalid) {\n              tooltip.validate();\n            }\n\n            tooltip.toBack();\n            nextY = $utils.spritePointToSvg({\n              x: 0,\n              y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom\n            }, tooltip).y;\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Shows tooltips for a list of axes at specific position.\r\n   *\r\n   * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n   * vertical axes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axes      List of axes to show tooltip on\r\n   * @param position  Position (px)\r\n   */\n\n\n  XYChart.prototype.showAxisTooltip = function (axes, position, except) {\n    var _this = this;\n\n    $iter.each(axes.iterator(), function (axis) {\n      if (!except || except.indexOf(axis) == -1) {\n        if (_this.dataItems.length > 0 || axis.dataItems.length > 0) {\n          axis.showTooltipAtPosition(position);\n        }\n      }\n    });\n  };\n  /**\r\n   * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n   *\r\n   * @param axis   Axis\r\n   * @param range  Range\r\n   * @return Modified range\r\n   */\n\n\n  XYChart.prototype.getUpdatedRange = function (axis, range) {\n    if (!axis) {\n      return;\n    }\n\n    var start;\n    var end;\n    var inversed = axis.renderer.inversed;\n\n    if (inversed) {\n      $math.invertRange(range);\n      start = 1 - axis.end;\n      end = 1 - axis.start;\n    } else {\n      start = axis.start;\n      end = axis.end;\n    }\n\n    var difference = end - start;\n    return {\n      start: start + range.start * difference,\n      end: start + range.end * difference\n    };\n  };\n  /**\r\n   * Performs zoom and other operations when user finishes zooming using chart\r\n   * cursor, e.g. zooms axes.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorZoomEnd = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n\n    if (behavior == \"zoomX\" || behavior == \"zoomXY\") {\n      var xRange = cursor.xRange;\n\n      if (xRange && this.xAxes.length > 0) {\n        xRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\n        xRange.priority = \"start\";\n        this.zoomAxes(this.xAxes, xRange);\n      }\n    }\n\n    if (behavior == \"zoomY\" || behavior == \"zoomXY\") {\n      var yRange = cursor.yRange;\n\n      if (yRange && this.yAxes.length > 0) {\n        yRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\n        yRange.priority = \"start\";\n        this.zoomAxes(this.yAxes, yRange);\n      }\n    }\n\n    this.handleHideCursor();\n  };\n  /**\r\n   * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorPanStart = function (event) {\n    var xAxis = this.xAxes.getIndex(0);\n\n    if (xAxis) {\n      this._panStartXRange = {\n        start: xAxis.start,\n        end: xAxis.end\n      };\n\n      if (xAxis.renderer.inversed) {\n        this._panStartXRange = $math.invertRange(this._panStartXRange);\n      }\n    }\n\n    var yAxis = this.yAxes.getIndex(0);\n\n    if (yAxis) {\n      this._panStartYRange = {\n        start: yAxis.start,\n        end: yAxis.end\n      };\n\n      if (yAxis.renderer.inversed) {\n        this._panStartYRange = $math.invertRange(this._panStartYRange);\n      }\n    }\n  };\n  /**\r\n   * Performs zoom and other operations when user ends panning\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorPanEnd = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n\n    if (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\n      var panEndRange = this._panEndXRange;\n      var panStartRange = this._panStartXRange;\n      var delta = 0;\n\n      if (panEndRange.start < 0) {\n        delta = panEndRange.start;\n      }\n\n      if (panStartRange.end > 1) {\n        if (panEndRange.end > panStartRange.end) {\n          delta = panEndRange.end - panStartRange.end;\n        }\n      } else if (panEndRange.end > 1) {\n        delta = panEndRange.end - 1;\n      }\n\n      this.zoomAxes(this.xAxes, {\n        start: panEndRange.start - delta,\n        end: panEndRange.end - delta\n      }, false, cursor.snapOnPan);\n      this._panEndXRange = undefined;\n      this._panStartXRange = undefined;\n    }\n\n    if (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\n      var panEndRange = this._panEndYRange;\n      var delta = 0;\n\n      if (panEndRange.start < 0) {\n        delta = panEndRange.start;\n      }\n\n      if (panEndRange.end > 1) {\n        delta = panEndRange.end - 1;\n      }\n\n      this.zoomAxes(this.yAxes, {\n        start: panEndRange.start - delta,\n        end: panEndRange.end - delta\n      }, false, cursor.snapOnPan);\n      this._panEndYRange = undefined;\n      this._panStartYRange = undefined;\n    }\n  };\n\n  XYChart.prototype.handleCursorCanceled = function () {\n    this._panEndXRange = undefined;\n    this._panStartXRange = undefined;\n  };\n  /**\r\n   * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorPanning = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n    var maxPanOut = cursor.maxPanOut;\n\n    if (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\n      var panStartRange = this._panStartXRange;\n      var range = cursor.xRange;\n      var axisRange = this.getCommonAxisRange(this.xAxes);\n      var difference = panStartRange.end - panStartRange.start;\n      var delta = range.start * (axisRange.end - axisRange.start);\n      var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\n      var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\n\n      if (newStart <= 0) {\n        newEnd = newStart + difference;\n      }\n\n      if (newEnd >= 1) {\n        newStart = newEnd - difference;\n      }\n\n      var newRange = {\n        start: newStart,\n        end: newEnd\n      };\n      this._panEndXRange = newRange;\n      this.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\n    }\n\n    if (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\n      var panStartRange = this._panStartYRange;\n      var range = cursor.yRange;\n      var axisRange = this.getCommonAxisRange(this.yAxes);\n      var difference = panStartRange.end - panStartRange.start;\n      var delta = range.start * (axisRange.end - axisRange.start);\n      var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\n      var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\n\n      if (newStart <= 0) {\n        newEnd = newStart + difference;\n      }\n\n      if (newEnd >= 1) {\n        newStart = newEnd - difference;\n      }\n\n      var newRange = {\n        start: newStart,\n        end: newEnd\n      };\n      this._panEndYRange = newRange;\n      this.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\n    }\n\n    this.handleHideCursor();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.handleYAxisSet = function (series) {};\n  /**\r\n   * Performs zoom and other operations when user starts zooming using chart\r\n   * cursor, e.g. zooms axes.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n\n\n  XYChart.prototype.handleCursorZoomStart = function (event) {// Nothing here\n    // This method is here only as a \"placeholder\" for extending classes to\n    // override if necessary\n  };\n\n  Object.defineProperty(XYChart.prototype, \"scrollbarX\", {\n    /**\r\n     * @return Scrollbar\r\n     */\n    get: function () {\n      return this._scrollbarX;\n    },\n\n    /**\r\n     * Horizontal (X) scrollbar.\r\n     *\r\n     * @param scrollbar Scrollbar\r\n     */\n    set: function (scrollbar) {\n      var _this = this;\n\n      if (this._scrollbarX) {\n        this.removeDispose(this._scrollbarX);\n      }\n\n      this._scrollbarX = scrollbar;\n\n      if (scrollbar) {\n        this._disposers.push(scrollbar);\n\n        scrollbar.parent = this.topAxesContainer;\n        scrollbar.shouldClone = false;\n        scrollbar.startGrip.exportable = false;\n        scrollbar.endGrip.exportable = false;\n        scrollbar.toBack();\n        scrollbar.orientation = \"horizontal\";\n        scrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\n        this.events.on(\"datavalidated\", function () {\n          return scrollbar.updateThumb(false);\n        }, this, false); // accessibility related\n\n        scrollbar.adapter.add(\"positionValue\", function (arg) {\n          var xAxis = _this.xAxes.getIndex(0);\n\n          if (xAxis) {\n            arg.value = xAxis.getPositionLabel(xAxis.renderer.inversed ? 1 - arg.position : arg.position);\n          }\n\n          return arg;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"scrollbarY\", {\n    /**\r\n     * @return Scrollbar\r\n     */\n    get: function () {\n      return this._scrollbarY;\n    },\n\n    /**\r\n     * Vertical (Y) scrollbar.\r\n     *\r\n     * @param scrollbar Scrollbar\r\n     */\n    set: function (scrollbar) {\n      var _this = this;\n\n      if (this._scrollbarY) {\n        this.removeDispose(this._scrollbarY);\n      }\n\n      this._scrollbarY = scrollbar;\n\n      if (scrollbar) {\n        this._disposers.push(scrollbar);\n\n        scrollbar.parent = this.rightAxesContainer;\n        scrollbar.startGrip.exportable = false;\n        scrollbar.shouldClone = false;\n        scrollbar.endGrip.exportable = false;\n        scrollbar.toFront();\n        scrollbar.orientation = \"vertical\";\n        scrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\n        this.events.on(\"datavalidated\", function () {\n          return scrollbar.updateThumb(false);\n        }, this, false); // accessibility related\n\n        scrollbar.adapter.add(\"positionValue\", function (arg) {\n          var yAxis = _this.yAxes.getIndex(0);\n\n          if (yAxis) {\n            arg.value = yAxis.getPositionLabel(arg.position);\n          }\n\n          return arg;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n   * on it changes.\r\n   *\r\n   * @param event Scrollbar range change event\r\n   */\n\n  XYChart.prototype.handleXScrollbarChange = function (event) {\n    if (this.inited) {\n      var scrollbar = event.target;\n      var range = scrollbar.range;\n\n      if (range.start == 0) {\n        range.priority = \"start\";\n      }\n\n      if (range.end == 1) {\n        range.priority = \"end\";\n      }\n\n      range = this.zoomAxes(this.xAxes, range);\n      scrollbar.fixRange(range);\n    }\n  };\n  /**\r\n   * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n   * on it changes.\r\n   *\r\n   * @param event Scrollbar range change event\r\n   */\n\n\n  XYChart.prototype.handleYScrollbarChange = function (event) {\n    if (this.inited) {\n      var scrollbar = event.target;\n      var range = scrollbar.range;\n\n      if (range.end == 1) {\n        range.priority = \"end\";\n      }\n\n      if (range.start == 0) {\n        range.priority = \"start\";\n      }\n\n      range = this.zoomAxes(this.yAxes, range);\n      scrollbar.fixRange(range);\n    }\n  };\n  /**\r\n   * Zooms axes that are affected by to specific relative range.\r\n   *\r\n   * @param axes       List of axes to zoom\r\n   * @param range      Range of values to zoom to (0-1)\r\n   * @param instantly  If set to `true` will skip zooming animation\r\n   * @return Recalculated range that is common to all involved axes\r\n   */\n\n\n  XYChart.prototype.zoomAxes = function (axes, range, instantly, round, declination, stop) {\n    var realRange = {\n      start: 0,\n      end: 1\n    };\n    this.showSeriesTooltip(); // hides\n\n    var originalRange = range;\n\n    if (!this.dataInvalid) {\n      $iter.each(axes.iterator(), function (axis) {\n        var maxZoomFactor = axis.maxZoomFactor;\n\n        if ($type.isNumber(axis.minZoomCount)) {\n          maxZoomFactor = maxZoomFactor / axis.minZoomCount;\n        }\n\n        if (stop && 1 / (range.end - range.start) >= maxZoomFactor) {// void\n        } else {\n          if (axis.zoomable) {\n            if (axis.renderer.inversed) {\n              range = $math.invertRange(originalRange);\n            } else {\n              range = originalRange;\n            }\n\n            axis.hideTooltip(0);\n\n            if (round) {\n              //let diff = range.end - range.start;\n              if (axis instanceof CategoryAxis) {\n                var cellWidth = axis.getCellEndPosition(0) - axis.getCellStartPosition(0);\n                range.start = axis.roundPosition(range.start + cellWidth / 2 - axis.startLocation * cellWidth, axis.startLocation);\n                range.end = axis.roundPosition(range.end - cellWidth / 2 + (1 - axis.endLocation) * cellWidth, axis.endLocation);\n              } else {\n                var d = 0.0001;\n                range.start = axis.roundPosition(range.start + d, 0, axis.startLocation);\n                range.end = axis.roundPosition(range.end + d, 0, axis.endLocation);\n              }\n            }\n\n            var axisRange = axis.zoom(range, instantly, instantly, declination);\n\n            if (axis.renderer.inversed) {\n              axisRange = $math.invertRange(axisRange);\n            }\n\n            realRange = axisRange;\n          }\n        }\n      });\n    }\n\n    return realRange;\n  };\n\n  Object.defineProperty(XYChart.prototype, \"maskBullets\", {\n    /**\r\n     * @return Mask bullet container?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maskBullets\");\n    },\n\n    /**\r\n     * Indicates if bullet container is masked.\r\n     *\r\n     * If it is set to `true`, any bullets that do not fit into bullet container\r\n     * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n     * of the plot area so they are not cut off.\r\n     *\r\n     * @param value Mask bullet container?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maskBullets\", value, true) && this.bulletsContainer) {\n        if (value) {\n          this.bulletsContainer.mask = this._bulletMask;\n        } else {\n          this.bulletsContainer.mask = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"arrangeTooltips\", {\n    /**\r\n     * @return Arrange tooltips?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"arrangeTooltips\");\n    },\n\n    /**\r\n     * Indicates if chart should arrange series tooltips so that they would not\r\n     * overlap.\r\n     *\r\n     * If set to `true` (default), the chart will adjust vertical positions of\r\n     * all simultaneously shown tooltips to avoid overlapping.\r\n     *\r\n     * However, if you have a vertically-arranged chart, it might not make sense,\r\n     * because tooltips would most probably not be aligned horizontally. In this\r\n     * case it would probably be a good idea to set this setting to `false`.\r\n     *\r\n     * @default true\r\n     * @param value Arrange tooltips?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"arrangeTooltips\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles mouse wheel event.\r\n   *\r\n   * @param event  Original event\r\n   */\n\n  XYChart.prototype.handleWheel = function (event) {\n    var plotContainer = this.plotContainer;\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\n    var shift = event.shift.y;\n    this.handleWheelReal(shift, this.mouseWheelBehavior, plotPoint);\n  };\n  /**\r\n   * Handles mouse wheel event.\r\n   *\r\n   * @param event  Original event\r\n   */\n\n\n  XYChart.prototype.handleHorizontalWheel = function (event) {\n    var plotContainer = this.plotContainer;\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\n    this.handleWheelReal(event.shift.x, this.horizontalMouseWheelBehavior, plotPoint);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.handleWheelReal = function (shift, mouseWheelBehavior, plotPoint) {\n    if (shift != 0) {\n      var plotContainer = this.plotContainer;\n      var rangeX = this.getCommonAxisRange(this.xAxes);\n      var rangeY = this.getCommonAxisRange(this.yAxes);\n      var shiftStep = .1;\n      var maxPanOut = 0;\n\n      if (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\n        var xAxis = this.xAxes.getIndex(0);\n        var round = false;\n        var singleItemStep = shiftStep;\n\n        if (xAxis instanceof CategoryAxis) {\n          singleItemStep = .5 / ((rangeX.end - rangeX.start) * xAxis.dataItems.length);\n          round = true;\n        }\n\n        shiftStep = Math.max(0.2, singleItemStep);\n        var differenceX = rangeX.end - rangeX.start;\n        var newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100 * (rangeX.end - rangeX.start));\n        var newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (rangeX.end - rangeX.start), 1 + maxPanOut);\n\n        if (newStartX <= 0) {\n          newEndX = newStartX + differenceX;\n        }\n\n        if (newEndX >= 1) {\n          newStartX = newEndX - differenceX;\n        }\n\n        this.zoomAxes(this.xAxes, {\n          start: newStartX,\n          end: newEndX\n        }, undefined, round);\n      }\n\n      if (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\n        var yAxis = this.yAxes.getIndex(0);\n        var singleItemStep = shiftStep;\n        var round = false;\n\n        if (yAxis instanceof CategoryAxis) {\n          singleItemStep = .5 / ((rangeX.end - rangeX.start) * yAxis.dataItems.length);\n          round = true;\n        }\n\n        shiftStep = Math.max(0.2, singleItemStep);\n        shift *= -1;\n        var differenceY = rangeY.end - rangeY.start;\n        var newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100 * (rangeY.end - rangeY.start));\n        var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * (rangeY.end - rangeY.start), 1 + maxPanOut);\n\n        if (newStartY <= 0) {\n          newEndY = newStartY + differenceY;\n        }\n\n        if (newEndY >= 1) {\n          newStartY = newEndY - differenceY;\n        }\n\n        this.zoomAxes(this.yAxes, {\n          start: newStartY,\n          end: newEndY\n        }, undefined, round);\n      }\n\n      if (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\n        var locationX = plotPoint.x / plotContainer.maxWidth;\n        var location2X = this.xAxes.getIndex(0).toAxisPosition(locationX);\n        var newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * (rangeX.end - rangeX.start) * shift / 100 * locationX);\n        newStartX = Math.min(newStartX, location2X);\n        var newEndX = Math.min(rangeX.end + shiftStep * (rangeX.end - rangeX.start) * shift / 100 * (1 - locationX), 1 + maxPanOut);\n        newEndX = Math.max(newEndX, location2X);\n        this.zoomAxes(this.xAxes, {\n          start: newStartX,\n          end: newEndX\n        }, undefined);\n      }\n\n      if (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\n        var locationY = plotPoint.y / plotContainer.maxHeight;\n        var location2Y = this.yAxes.getIndex(0).toAxisPosition(locationY);\n        var newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * (rangeY.end - rangeY.start) * shift / 100 * (1 - locationY));\n        newStartY = Math.min(newStartY, location2Y);\n        var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY * (rangeY.end - rangeY.start), 1 + maxPanOut);\n        newEndY = Math.max(newEndY, location2Y);\n        this.zoomAxes(this.yAxes, {\n          start: newStartY,\n          end: newEndY\n        }, undefined);\n      }\n    }\n  };\n\n  Object.defineProperty(XYChart.prototype, \"mouseWheelBehavior\", {\n    /**\r\n     * @return Mouse wheel behavior\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"mouseWheelBehavior\");\n    },\n\n    /**\r\n     * Specifies action for when mouse wheel is used when over the chart.\r\n     *\r\n     * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`,`\"panXY\"`, `\"none\"` (default).\r\n     *\r\n     * You can control sensitivity of wheel zooming via `mouseOptions`.\r\n     *\r\n     * @default \"none\"\r\n     * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n     * @param mouse wheel behavior\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\n        if (value != \"none\") {\n          this._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\n\n          this._disposers.push(this._mouseWheelDisposer);\n        } else {\n          if (this._mouseWheelDisposer) {\n            this.plotContainer.wheelable = false;\n            this.plotContainer.hoverable = false;\n\n            this._mouseWheelDisposer.dispose();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"horizontalMouseWheelBehavior\", {\n    /**\r\n     * @return Horizontal mouse wheel behavior\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"horizontalMouseWheelBehavior\");\n    },\n\n    /**\r\n     * Specifies action for when horizontal mouse wheel is used when over the chart.\r\n     *\r\n     * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n     *\r\n     * @default \"none\"\r\n     * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n     * @param mouse wheel behavior\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"horizontalMouseWheelBehavior\", value)) {\n        if (value != \"none\") {\n          this._mouseWheelDisposer2 = this.plotContainer.events.on(\"wheel\", this.handleHorizontalWheel, this, false);\n\n          this._disposers.push(this._mouseWheelDisposer2);\n        } else {\n          if (this._mouseWheelDisposer2) {\n            this.plotContainer.wheelable = false;\n            this.plotContainer.hoverable = false;\n\n            this._mouseWheelDisposer2.dispose();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @param fields  Array of date fields\r\n   * @return Array of date fields populated with chart's date fields\r\n   */\n\n  XYChart.prototype.dataSourceDateFields = function (fields) {\n    var _this = this; // Process parent\n\n\n    fields = _super.prototype.dataSourceDateFields.call(this, fields); // Check if we have any series with date-fields\n\n    $iter.each(this.series.iterator(), function (series) {\n      fields = _this.populateDataSourceFields(fields, series.dataFields, [\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]);\n    });\n    return fields;\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @param value  Array of number fields\r\n   * @return Array of number fields populated with chart's number fields\r\n   */\n\n\n  XYChart.prototype.dataSourceNumberFields = function (fields) {\n    var _this = this;\n\n    fields = _super.prototype.dataSourceDateFields.call(this, fields); // Check if we have any series with date-fields\n\n    $iter.each(this.series.iterator(), function (series) {\n      fields = _this.populateDataSourceFields(fields, series.dataFields, [\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]);\n    });\n    return fields;\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  XYChart.prototype.processConfig = function (config) {\n    if (config) {\n      // Save axis ranges for later processing\n      var xAxes = [];\n      var yAxes = []; // Set up axes\n\n      if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\n        for (var i = 0, len = config.xAxes.length; i < len; i++) {\n          if (!config.xAxes[i].type) {\n            throw Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\n          } else if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\n            // Maybe convert string dates?\n            for (var x = 0, len_1 = config.xAxes[i][\"axisRanges\"].length; x < len_1; x++) {\n              var range = config.xAxes[i][\"axisRanges\"][x];\n\n              if ($type.hasValue(range.date) && $type.isString(range.date)) {\n                range.date = this.dateFormatter.parse(range.date);\n              }\n\n              if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\n                range.endDate = this.dateFormatter.parse(range.endDate);\n              }\n            }\n\n            xAxes.push({\n              axisRanges: config.xAxes[i][\"axisRanges\"],\n              index: i\n            });\n            delete config.xAxes[i][\"axisRanges\"];\n          }\n        }\n      }\n\n      if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\n        for (var i = 0, len = config.yAxes.length; i < len; i++) {\n          if (!config.yAxes[i].type) {\n            throw Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\n          } else if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\n            // Maybe convert string dates?\n            for (var x = 0, len_2 = config.yAxes[i][\"axisRanges\"].length; x < len_2; x++) {\n              var range = config.yAxes[i][\"axisRanges\"][x];\n\n              if ($type.hasValue(range.date) && $type.isString(range.date)) {\n                range.date = this.dateFormatter.parse(range.date);\n              }\n\n              if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\n                range.endDate = this.dateFormatter.parse(range.endDate);\n              }\n            }\n\n            yAxes.push({\n              axisRanges: config.yAxes[i][\"axisRanges\"],\n              index: i\n            });\n            delete config.yAxes[i][\"axisRanges\"];\n          }\n        }\n      } // Set up series\n\n\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          config.series[i].type = config.series[i].type || \"LineSeries\";\n        }\n      } // Set up cursor\n\n\n      if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\n        config.cursor.type = \"XYCursor\";\n      } // Set up scrollbars\n\n\n      if ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\n        config.scrollbarX.type = \"Scrollbar\";\n      }\n\n      if ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\n        config.scrollbarY.type = \"Scrollbar\";\n      }\n\n      _super.prototype.processConfig.call(this, config); // Finish up with ranges.\n      // We need to do this here because series are processed last in JSON\n      // config. Therefore their respective objects are not yet are available\n      // when axis (and respectively their ranges) are being processed.\n\n\n      if (yAxes.length) {\n        for (var i = 0, len = yAxes.length; i < len; i++) {\n          this.yAxes.getIndex(yAxes[i].index).config = {\n            axisRanges: yAxes[i].axisRanges\n          };\n        }\n      }\n\n      if (xAxes.length) {\n        for (var i = 0, len = xAxes.length; i < len; i++) {\n          this.xAxes.getIndex(xAxes[i].index).config = {\n            axisRanges: xAxes[i].axisRanges\n          };\n        }\n      }\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n\n\n  XYChart.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } // Must come last\n    else if (a == \"scrollbarX\") {\n      return 1;\n    } else if (b == \"scrollbarX\") {\n      return -1;\n    } else if (a == \"scrollbarY\") {\n      return 1;\n    } else if (b == \"scrollbarY\") {\n      return -1;\n    } else if (a == \"cursor\") {\n      return 1;\n    } else if (b == \"cursor\") {\n      return -1;\n    } else if (a == \"series\") {\n      return 1;\n    } else if (b == \"series\") {\n      return -1;\n    } else {\n      return _super.prototype.configOrder.call(this, a, b);\n    }\n  };\n  /**\r\n   * Creates a new Series of type suitable for this chart.\r\n   *\r\n   * @return New series\r\n   */\n\n\n  XYChart.prototype.createSeries = function () {\n    return new XYSeries();\n  };\n\n  Object.defineProperty(XYChart.prototype, \"zoomOutButton\", {\n    /**\r\n     * @return Zoom out button\r\n     */\n    get: function () {\n      return this._zoomOutButton;\n    },\n\n    /**\r\n     * A [[Button]] element that is used for zooming out the chart.\r\n     *\r\n     * This button appears only when chart is zoomed in, and disappears\r\n     * autoamatically when it is zoome dout.\r\n     *\r\n     * @param button  Zoom out button\r\n     */\n    set: function (button) {\n      var _this = this;\n\n      this._zoomOutButton = button;\n\n      if (button) {\n        button.events.on(\"hit\", function () {\n          _this.zoomAxes(_this.xAxes, {\n            start: 0,\n            end: 1\n          });\n\n          _this.zoomAxes(_this.yAxes, {\n            start: 0,\n            end: 1\n          });\n        }, undefined, false);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all parameters from another [[XYChart]].\r\n   *\r\n   * @param source Source XYChart\r\n   */\n\n  XYChart.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    source.xAxes.each(function (axis) {\n      var a = _this.xAxes.push(axis.clone());\n\n      a.chart = _this;\n      a.renderer.chart = _this;\n    });\n    source.yAxes.each(function (axis) {\n      var a = _this.yAxes.push(axis.clone());\n\n      a.renderer.chart = _this;\n      a.chart = _this;\n    }); //this.xAxes.copyFrom(source.xAxes);\n    //this.yAxes.copyFrom(source.yAxes);\n\n    _super.prototype.copyFrom.call(this, source); //this.zoomOutButton.copyFrom(source.zoomOutButton);\n\n\n    if (source.cursor) {\n      this.cursor = source.cursor.clone();\n    }\n\n    if (source.scrollbarX) {\n      this.scrollbarX = source.scrollbarX.clone();\n    }\n\n    if (source.scrollbarY) {\n      this.scrollbarY = source.scrollbarY.clone();\n    } //@todo copy all container properties\n\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    var scrollbarX = this.scrollbarX;\n\n    if (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\n      scrollbarX.scrollbarChart.disposeData();\n    }\n\n    var scrollbarY = this.scrollbarY;\n\n    if (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\n      scrollbarY.scrollbarChart.disposeData();\n    }\n\n    this.xAxes.each(function (axis) {\n      if (axis instanceof CategoryAxis) {\n        axis.disposeData();\n      }\n    });\n    this.yAxes.each(function (axis) {\n      if (axis instanceof CategoryAxis) {\n        axis.disposeData();\n      }\n    });\n  };\n  /**\r\n   * Adds one or several (array) of data items to the existing data.\r\n   *\r\n   * @param rawDataItem One or many raw data item objects\r\n   */\n\n\n  XYChart.prototype.addData = function (rawDataItem, removeCount) {\n    if (this.scrollbarX instanceof XYChartScrollbar) {\n      this.addScrollbarData(this.scrollbarX, removeCount);\n    }\n\n    if (this.scrollbarY instanceof XYChartScrollbar) {\n      this.addScrollbarData(this.scrollbarY, removeCount);\n    }\n\n    _super.prototype.addData.call(this, rawDataItem, removeCount);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.addScrollbarData = function (scrollbar, removeCount) {\n    var chart = scrollbar.scrollbarChart;\n    chart._parseDataFrom = chart.data.length;\n    chart.invalidateData();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChart.prototype.removeScrollbarData = function (scrollbar, removeCount) {\n    var chart = scrollbar.scrollbarChart;\n\n    if ($type.isNumber(removeCount)) {\n      while (removeCount > 0) {\n        var dataItem = this.dataItems.getIndex(0);\n\n        if (dataItem) {\n          chart.dataItems.remove(dataItem);\n        }\n\n        chart.dataUsers.each(function (dataUser) {\n          var dataItem = dataUser.dataItems.getIndex(0);\n\n          if (dataItem) {\n            dataUser.dataItems.remove(dataItem);\n          }\n        });\n        chart._parseDataFrom--;\n        removeCount--;\n      }\n\n      chart.invalidateData();\n    }\n  };\n  /**\r\n   * Removes elements from the beginning of data\r\n   *\r\n   * @param count number of elements to remove\r\n   */\n\n\n  XYChart.prototype.removeData = function (count) {\n    if (this.scrollbarX instanceof XYChartScrollbar) {\n      this.removeScrollbarData(this.scrollbarX, count);\n    }\n\n    if (this.scrollbarY instanceof XYChartScrollbar) {\n      this.removeScrollbarData(this.scrollbarY, count);\n    }\n\n    _super.prototype.removeData.call(this, count);\n  };\n  /**\r\n   * @param  value  Tap to activate?\r\n   */\n\n\n  XYChart.prototype.setTapToActivate = function (value) {\n    _super.prototype.setTapToActivate.call(this, value);\n\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = value;\n      this.plotContainer.interactions.isTouchProtected = value;\n    }\n  };\n\n  XYChart.prototype.handleTapToActivate = function () {\n    _super.prototype.handleTapToActivate.call(this);\n\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = false;\n      this.plotContainer.interactions.isTouchProtected = false;\n    }\n  };\n\n  XYChart.prototype.handleTapToActivateDeactivation = function () {\n    _super.prototype.handleTapToActivateDeactivation.call(this);\n\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = true;\n      this.plotContainer.interactions.isTouchProtected = true;\n    }\n  };\n\n  return XYChart;\n}(SerialChart);\n\nexport { XYChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"XYChart\"] = XYChart;\n/**\r\n * Add default responsive rules\r\n */\n\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function (target, stateId) {\n    if (target instanceof XYChart && target.scrollbarX) {\n      var state = target.states.create(stateId);\n      var sbstate = target.scrollbarX.states.create(stateId);\n      sbstate.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function (target, stateId) {\n    if (target instanceof XYChart && target.scrollbarY) {\n      var state = target.states.create(stateId);\n      var sbstate = target.scrollbarY.states.create(stateId);\n      sbstate.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});","map":{"version":3,"names":["__extends","SerialChart","SerialChartDataItem","Container","List","ListDisposer","Color","ValueAxis","DateAxis","AxisRendererX","AxisRendererY","CategoryAxis","XYSeries","Disposer","ZoomOutButton","percent","registry","XYChartScrollbar","$math","$iter","$type","$utils","$array","$number","defaultRules","ResponsiveBreakpoints","XYChartDataItem","_super","_this","call","className","applyTheme","XYChart","_axisRendererX","_axisRendererY","_seriesPoints","maskBullets","arrangeTooltips","chartContainer","layout","padding","topAxesCont","createChild","shouldClone","width","zIndex","topAxesContainer","yAxesAndPlotCont","height","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","events","on","updateXAxesMargins","leftAxesContainer","plotCont","background","fillOpacity","plotContainer","mouseWheelBehavior","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","parent","bulletsContainer","zoomOutButton","align","valign","Number","MAX_SAFE_INTEGER","marginTop","marginRight","hide","axisBulletsContainer","isMeasured","_bulletMask","series","each","dataGrouped","_baseInterval","prototype","applyInternalDefaults","exportable","hasValue","readerTitle","language","translate","draw","toFront","mask","updateSeriesLegend","updatePlotElements","iterator","invalidate","validateData","_parseDataFrom","xAxes","axis","dataChangeUpdate","yAxes","leftAxesWidth","measuredWidth","rightAxesWidth","paddingLeft","paddingRight","reinit","appeared","handleXAxisChange","event","updateXAxis","target","handleYAxisChange","updateYAxis","processXAxis","newValue","chart","renderer","observe","axisLetter","handleXAxisRangeChange","dataProvider","processAxis","processYAxis","handleYAxisRangeChange","range","getCommonAxisRange","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","eachContinue","maxZoomCount","minZoomFactor","maxZoomFactor","round","end","start","seriesAppeared","show","scrollbarY","scrollbar","skipRangeEvents","axes","zoomable","syncWithAxis","axisStart","axisEnd","inversed","isNumber","opposite","toBack","processRenderer","_dataUsers","moveValue","gridContainer","breakContainer","addDisposer","dataUsers","removeValue","_disposers","push","point","spritePointToSprite","x","y","undefined","inited","invalidateDataItems","updateSeriesMasks","isIE","mainContainer","handleSeriesRemoved","oldValue","xAxis","invalidateProcessedData","yAxis","resetExtremes","Object","defineProperty","get","_xAxes","handleAxisRemoval","enumerable","configurable","autoDispose","dispose","_yAxes","handleSeriesAdded","length","removeFromInvalidComponents","dataInvalid","used","fill","patterns","stroke","colors","next","backgroundOpacity","e","raiseCriticalError","_cursor","set","cursor","removeDispose","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","tapToActivate","setTapToActivate","visible","isHiding","xPosition_1","xPosition","yPosition_1","yPosition","showSeriesTooltip","exceptAxes_1","snapToSeries","downPoint","dataItems_1","snpSeries","isHidden","dataItems","dataItem","move","baseAxis","getSeriesDataItem","toAxisPosition","closestDataItem_1","getClosest","closestSeries","component","hideTooltip","showTooltipAtDataItem","handleSnap","_cursorXPosition","showAxisTooltip","_cursorYPosition","sortSeriesTooltips","legend","afterDraw","minDistance","Infinity","closestDataItem","xPos","positionToCoordinate","toGlobalPosition","yPos","xField","yField","getValue","dxPosition","getPositionX","locations","dyPosition","getPositionY","distance","Math","sqrt","pow","hideObjectTooltip","updateLegendValue","sprites","sprite","cursorTooltipEnabled","position","seriesPoints","snapTooltip","showTooltipAtPosition","tooltip","setBounds","spriteRectToSvg","pixelWidth","pixelHeight","cursor_1","maxTooltipDistance","cursorPoint_1","spritePointToSvg","nearestSeries_1","nearestPoint_1","smallestDistance_1","seriesPoint","fixedPoint","abs","getDistance","newSeriesPoints_1","tooltipDataItem","isHover","handleOutReal","np","topLeft_1","bottomRight_1","sum_1","filteredSeriesPoints_1","isInRectangle","firstSeries","getIndex","sort","a","b","order","reverse","averageY","maxY","svgPointToDocument","svgContainer","SVGContainer","top_1","bottom","spritePointToDocument","dropped","nextHeight","i","pointY","invalid","validate","label","pixelY","pixelMarginTop","nextY","len","measuredHeight","pixelMarginBottom","except","indexOf","getUpdatedRange","invertRange","difference","behavior","xRange","priority","yRange","_panStartXRange","_panStartYRange","_panEndXRange","panEndRange","panStartRange","delta","snapOnPan","_panEndYRange","maxPanOut","axisRange","newStart","max","newEnd","min","newRange","handleYAxisSet","_scrollbarX","startGrip","endGrip","orientation","handleXScrollbarChange","updateThumb","adapter","add","arg","value","getPositionLabel","_scrollbarY","handleYScrollbarChange","fixRange","instantly","declination","stop","realRange","originalRange","minZoomCount","cellWidth","getCellEndPosition","getCellStartPosition","roundPosition","startLocation","endLocation","d","zoom","getPropertyValue","setPropertyValue","handleWheel","svgPoint","documentPointToSvg","htmlContainer","cssScale","plotPoint","svgPointToSprite","shift","handleWheelReal","handleHorizontalWheel","horizontalMouseWheelBehavior","rangeX","rangeY","shiftStep","singleItemStep","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","locationX","maxWidth","location2X","locationY","maxHeight","location2Y","_mouseWheelDisposer","wheelable","hoverable","_mouseWheelDisposer2","dataSourceDateFields","fields","populateDataSourceFields","dataFields","dataSourceNumberFields","processConfig","config","isArray","type","Error","len_1","date","isString","dateFormatter","parse","endDate","axisRanges","index","len_2","configOrder","createSeries","_zoomOutButton","button","copyFrom","source","clone","disposeData","scrollbarChart","addData","rawDataItem","removeCount","addScrollbarData","data","invalidateData","removeScrollbarData","remove","dataUser","removeData","count","interactions","isTouchProtected","handleTapToActivate","handleTapToActivateDeactivation","registeredClasses","relevant","maybeXS","state","stateId","states","create","sbstate","properties","disabled"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/types/XYChart.js"],"sourcesContent":["/**\r\n * XY Chart module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List, ListDisposer } from \"../../core/utils/List\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar XYChartDataItem = /** @class */ (function (_super) {\r\n    __extends(XYChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"XYChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return XYChartDataItem;\r\n}(SerialChartDataItem));\r\nexport { XYChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nvar XYChart = /** @class */ (function (_super) {\r\n    __extends(XYChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Defines the type of horizontal axis rederer.\r\n         */\r\n        _this._axisRendererX = AxisRendererX;\r\n        /**\r\n         * Defines the type of vertical axis rederer.\r\n         */\r\n        _this._axisRendererY = AxisRendererY;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this._seriesPoints = [];\r\n        _this.className = \"XYChart\";\r\n        // Set defaults\r\n        //this.margin(10, 10, 10, 10);\r\n        _this.maskBullets = true;\r\n        _this.arrangeTooltips = true;\r\n        // Create main chart container\r\n        var chartContainer = _this.chartContainer;\r\n        chartContainer.layout = \"vertical\";\r\n        _this.padding(15, 15, 15, 15);\r\n        // Create top axes container\r\n        var topAxesCont = chartContainer.createChild(Container);\r\n        topAxesCont.shouldClone = false;\r\n        topAxesCont.layout = \"vertical\";\r\n        topAxesCont.width = percent(100);\r\n        topAxesCont.zIndex = 1;\r\n        _this.topAxesContainer = topAxesCont;\r\n        // Create vertical axes and plot area container\r\n        // Plot area and vertical axes share the whole width of the chart,\r\n        // so we need to put then into a separate container so that layouting\r\n        // engine takes care of the positioning\r\n        var yAxesAndPlotCont = chartContainer.createChild(Container);\r\n        yAxesAndPlotCont.shouldClone = false;\r\n        yAxesAndPlotCont.layout = \"horizontal\";\r\n        yAxesAndPlotCont.width = percent(100);\r\n        yAxesAndPlotCont.height = percent(100);\r\n        yAxesAndPlotCont.zIndex = 0;\r\n        _this.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n        // Create a container for bottom axes\r\n        var bottomAxesCont = chartContainer.createChild(Container);\r\n        bottomAxesCont.shouldClone = false;\r\n        bottomAxesCont.width = percent(100);\r\n        bottomAxesCont.layout = \"vertical\";\r\n        bottomAxesCont.zIndex = 1;\r\n        _this.bottomAxesContainer = bottomAxesCont;\r\n        // Create a container for left-side axes\r\n        var leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n        leftAxesCont.shouldClone = false;\r\n        leftAxesCont.layout = \"horizontal\";\r\n        leftAxesCont.height = percent(100);\r\n        leftAxesCont.contentAlign = \"right\";\r\n        leftAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\r\n        leftAxesCont.zIndex = 1;\r\n        _this.leftAxesContainer = leftAxesCont;\r\n        // Create a container for plot area\r\n        var plotCont = yAxesAndPlotCont.createChild(Container);\r\n        plotCont.shouldClone = false;\r\n        plotCont.height = percent(100);\r\n        plotCont.width = percent(100);\r\n        // Create transparend background for plot container so that hover works\r\n        // on all of it\r\n        plotCont.background.fillOpacity = 0;\r\n        _this.plotContainer = plotCont;\r\n        // must go below plot container\r\n        _this.mouseWheelBehavior = \"none\";\r\n        _this._cursorContainer = plotCont;\r\n        // Create a container for right-side axes\r\n        var rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n        rightAxesCont.shouldClone = false;\r\n        rightAxesCont.layout = \"horizontal\";\r\n        rightAxesCont.height = percent(100);\r\n        rightAxesCont.zIndex = 1;\r\n        rightAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\r\n        _this.rightAxesContainer = rightAxesCont;\r\n        _this.seriesContainer.parent = plotCont;\r\n        _this.bulletsContainer.parent = plotCont;\r\n        var zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n        zoomOutButton.shouldClone = false;\r\n        zoomOutButton.align = \"right\";\r\n        zoomOutButton.valign = \"top\";\r\n        zoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n        zoomOutButton.marginTop = 5;\r\n        zoomOutButton.marginRight = 5;\r\n        zoomOutButton.hide(0);\r\n        _this.zoomOutButton = zoomOutButton;\r\n        // Create a container for bullets\r\n        var axisBulletsContainer = _this.plotContainer.createChild(Container);\r\n        axisBulletsContainer.shouldClone = false;\r\n        axisBulletsContainer.width = percent(100);\r\n        axisBulletsContainer.height = percent(100);\r\n        axisBulletsContainer.isMeasured = false;\r\n        axisBulletsContainer.zIndex = 4;\r\n        axisBulletsContainer.layout = \"none\";\r\n        _this.axisBulletsContainer = axisBulletsContainer;\r\n        _this._bulletMask = _this.plotContainer;\r\n        _this.events.on(\"beforedatavalidated\", function () {\r\n            _this.series.each(function (series) {\r\n                series.dataGrouped = false;\r\n                series._baseInterval = {};\r\n            });\r\n        }, _this, false);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    XYChart.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        this.zoomOutButton.exportable = false;\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"X/Y chart\");\r\n        }\r\n    };\r\n    /**\r\n     * Draws the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        this.seriesContainer.toFront();\r\n        this.bulletsContainer.toFront();\r\n        if (this.maskBullets) {\r\n            this.bulletsContainer.mask = this._bulletMask;\r\n        }\r\n        this.updateSeriesLegend();\r\n    };\r\n    /**\r\n     * Triggers a redrawing of all chart's series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.updatePlotElements = function () {\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            series.invalidate();\r\n        });\r\n    };\r\n    /**\r\n     * Triggers data (re)validation which in turn can cause a redraw of the\r\n     * whole chart or just aprticular series / elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.validateData = function () {\r\n        // tell axes that data changed\r\n        if (this._parseDataFrom == 0) {\r\n            $iter.each(this.xAxes.iterator(), function (axis) {\r\n                axis.dataChangeUpdate();\r\n            });\r\n            $iter.each(this.yAxes.iterator(), function (axis) {\r\n                axis.dataChangeUpdate();\r\n            });\r\n            $iter.each(this.series.iterator(), function (series) {\r\n                series.dataChangeUpdate();\r\n            });\r\n        }\r\n        _super.prototype.validateData.call(this);\r\n    };\r\n    /**\r\n     * Updates margins for horizontal axes based on settings and available space.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.updateXAxesMargins = function () {\r\n        var leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n        var rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n        var bottomAxesCont = this.bottomAxesContainer;\r\n        if (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n            bottomAxesCont.paddingLeft = leftAxesWidth;\r\n            bottomAxesCont.paddingRight = rightAxesWidth;\r\n        }\r\n        var topAxesCont = this.topAxesContainer;\r\n        if (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n            topAxesCont.paddingLeft = leftAxesWidth;\r\n            topAxesCont.paddingRight = rightAxesWidth;\r\n        }\r\n    };\r\n    /**\r\n     * Triggers a re-initialization of this element.\r\n     *\r\n     * Will result in complete redrawing of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.reinit = function () {\r\n        _super.prototype.reinit.call(this);\r\n        this.series.each(function (series) {\r\n            series.appeared = false;\r\n        });\r\n    };\r\n    /**\r\n     * Triggers an update on the horizontal axis when one of its properties\r\n     * change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event An event object\r\n     */\r\n    XYChart.prototype.handleXAxisChange = function (event) {\r\n        this.updateXAxis(event.target);\r\n    };\r\n    /**\r\n     * Triggers an update on the vertical axis when one of its properties\r\n     * change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event An event object\r\n     */\r\n    XYChart.prototype.handleYAxisChange = function (event) {\r\n        this.updateYAxis(event.target);\r\n    };\r\n    /**\r\n     * Sets up a new horizontal (X) axis when it is added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event  Axis insert event\r\n     */\r\n    XYChart.prototype.processXAxis = function (event) {\r\n        var axis = event.newValue;\r\n        axis.chart = this;\r\n        if (!axis.renderer) {\r\n            axis.renderer = new this._axisRendererX();\r\n            axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\r\n        }\r\n        axis.axisLetter = \"X\";\r\n        axis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false);\r\n        //axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n        // Although axis does not use data directly, we set dataProvider here\r\n        // (but not add to chart data users) to hold up rendering before data\r\n        // is parsed (system handles this)\r\n        axis.dataProvider = this;\r\n        this.updateXAxis(axis.renderer);\r\n        this.processAxis(axis);\r\n    };\r\n    /**\r\n     * Sets up a new vertical (Y) axis when it is added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Axis insert event\r\n     */\r\n    XYChart.prototype.processYAxis = function (event) {\r\n        var axis = event.newValue;\r\n        axis.chart = this;\r\n        if (!axis.renderer) {\r\n            axis.renderer = new this._axisRendererY();\r\n            axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\r\n        }\r\n        axis.axisLetter = \"Y\";\r\n        axis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false);\r\n        //axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n        // Although axis does not use data directly, we set dataProvider here\r\n        // (but not add to chart data users) to hold up rendering before data\r\n        // is parsed (system handles this)\r\n        axis.dataProvider = this;\r\n        this.updateYAxis(axis.renderer);\r\n        this.processAxis(axis);\r\n    };\r\n    /**\r\n     * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n     * value range changes.\r\n     */\r\n    XYChart.prototype.handleXAxisRangeChange = function () {\r\n        var range = this.getCommonAxisRange(this.xAxes);\r\n        if (this.scrollbarX) {\r\n            this.zoomAxes(this.xAxes, range, true);\r\n        }\r\n        this.toggleZoomOutButton();\r\n        this.updateScrollbar(this.scrollbarX, range);\r\n    };\r\n    /**\r\n     * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n     * zoomed out or not.\r\n     */\r\n    XYChart.prototype.toggleZoomOutButton = function () {\r\n        if (this.zoomOutButton) {\r\n            var show_1 = false;\r\n            $iter.eachContinue(this.xAxes.iterator(), function (axis) {\r\n                if (axis.toggleZoomOutButton) {\r\n                    if (axis.maxZoomCount > 0) {\r\n                        var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\r\n                        if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n                            show_1 = true;\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n                            show_1 = true;\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n            $iter.eachContinue(this.yAxes.iterator(), function (axis) {\r\n                if (axis.toggleZoomOutButton) {\r\n                    if (axis.maxZoomCount > 0) {\r\n                        var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\r\n                        if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n                            show_1 = true;\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n                            show_1 = true;\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n            });\r\n            if (!this.seriesAppeared) {\r\n                show_1 = false;\r\n            }\r\n            if (show_1) {\r\n                this.zoomOutButton.show();\r\n            }\r\n            else {\r\n                this.zoomOutButton.hide();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     * moved this check to a separate method so that we could override it in TreeMapSeries\r\n     */\r\n    XYChart.prototype.seriesAppeared = function () {\r\n        var appeared = false;\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (!series.appeared) {\r\n                appeared = false;\r\n                return false;\r\n            }\r\n        });\r\n        return appeared;\r\n    };\r\n    /**\r\n     * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n     * value range changes.\r\n     */\r\n    XYChart.prototype.handleYAxisRangeChange = function () {\r\n        var range = this.getCommonAxisRange(this.yAxes);\r\n        if (this.scrollbarY) {\r\n            this.zoomAxes(this.yAxes, range, true);\r\n        }\r\n        this.toggleZoomOutButton();\r\n        this.updateScrollbar(this.scrollbarY, range);\r\n    };\r\n    /**\r\n     * Updates a relative scrollbar whenever data range of the axis changes.\r\n     *\r\n     * @param scrollbar  Scrollbar instance\r\n     * @param range      New data (values) range of the axis\r\n     */\r\n    XYChart.prototype.updateScrollbar = function (scrollbar, range) {\r\n        if (scrollbar) {\r\n            scrollbar.skipRangeEvents();\r\n            scrollbar.start = range.start;\r\n            scrollbar.end = range.end;\r\n        }\r\n    };\r\n    /**\r\n     * Returns a common range of values between a list of axes.\r\n     *\r\n     * This is used to synchronize the zoom between multiple axes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axes  A list of axes\r\n     * @return Common value range\r\n     */\r\n    XYChart.prototype.getCommonAxisRange = function (axes) {\r\n        var start;\r\n        var end;\r\n        axes.each(function (axis) {\r\n            if (!axis.zoomable || (axis instanceof ValueAxis && axis.syncWithAxis)) {\r\n            }\r\n            else {\r\n                var axisStart = axis.start;\r\n                var axisEnd = axis.end;\r\n                if (axis.renderer.inversed) {\r\n                    axisStart = 1 - axis.end;\r\n                    axisEnd = 1 - axis.start;\r\n                }\r\n                if (!$type.isNumber(start) || (axisStart < start)) {\r\n                    start = axisStart;\r\n                }\r\n                if (!$type.isNumber(end) || (axisEnd > end)) {\r\n                    end = axisEnd;\r\n                }\r\n            }\r\n        });\r\n        return { start: start, end: end };\r\n    };\r\n    /**\r\n     * Triggers (re)rendering of the horizontal (X) axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axis  Axis\r\n     */\r\n    XYChart.prototype.updateXAxis = function (renderer) {\r\n        var axis = renderer.axis;\r\n        if (renderer.opposite) {\r\n            axis.parent = this.topAxesContainer;\r\n            axis.toFront();\r\n        }\r\n        else {\r\n            axis.parent = this.bottomAxesContainer;\r\n            axis.toBack();\r\n        }\r\n        if (axis.renderer) {\r\n            axis.renderer.processRenderer();\r\n        }\r\n    };\r\n    /**\r\n     * Triggers (re)rendering of the vertical (Y) axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axis  Axis\r\n     */\r\n    XYChart.prototype.updateYAxis = function (renderer) {\r\n        var axis = renderer.axis;\r\n        if (renderer.opposite) {\r\n            axis.parent = this.rightAxesContainer;\r\n            axis.toBack();\r\n        }\r\n        else {\r\n            axis.parent = this.leftAxesContainer;\r\n            axis.toFront();\r\n        }\r\n        if (axis.renderer) {\r\n            axis.renderer.processRenderer();\r\n        }\r\n    };\r\n    /**\r\n     * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n     * and containers for placement.\r\n     *\r\n     * @param axis  Axis\r\n     */\r\n    XYChart.prototype.processAxis = function (axis) {\r\n        var _this = this;\r\n        // Value axis does not use data directly, only category axis does\r\n        if (axis instanceof CategoryAxis) {\r\n            this._dataUsers.moveValue(axis);\r\n        }\r\n        var renderer = axis.renderer;\r\n        renderer.gridContainer.parent = this.plotContainer;\r\n        renderer.gridContainer.toBack();\r\n        renderer.breakContainer.parent = this.plotContainer;\r\n        renderer.breakContainer.toFront();\r\n        renderer.breakContainer.zIndex = 10;\r\n        axis.addDisposer(new Disposer(function () {\r\n            _this.dataUsers.removeValue(axis);\r\n        }));\r\n        renderer.bulletsContainer.parent = this.axisBulletsContainer;\r\n        this._disposers.push(axis.events.on(\"positionchanged\", function () {\r\n            var point = $utils.spritePointToSprite({ x: 0, y: 0 }, axis, _this.axisBulletsContainer);\r\n            if (axis.renderer instanceof AxisRendererY) {\r\n                renderer.bulletsContainer.y = point.y;\r\n            }\r\n            if (axis.renderer instanceof AxisRendererX) {\r\n                renderer.bulletsContainer.x = point.x;\r\n            }\r\n        }, undefined, false));\r\n        this.plotContainer.events.on(\"maxsizechanged\", function () {\r\n            if (_this.inited) {\r\n                axis.invalidateDataItems();\r\n                _this.updateSeriesMasks();\r\n            }\r\n        }, axis, false);\r\n    };\r\n    /**\r\n     * This is done because for some reason IE doesn't change mask if path of a\r\n     * mask changes.\r\n     */\r\n    XYChart.prototype.updateSeriesMasks = function () {\r\n        if ($utils.isIE()) {\r\n            this.series.each(function (series) {\r\n                var mask = series.mainContainer.mask;\r\n                series.mainContainer.mask = undefined;\r\n                series.mainContainer.mask = mask;\r\n            });\r\n        }\r\n    };\r\n    XYChart.prototype.handleSeriesRemoved = function (event) {\r\n        var series = event.oldValue;\r\n        if (series) {\r\n            if (series.xAxis) {\r\n                series.xAxis.series.removeValue(series);\r\n                series.xAxis.invalidateProcessedData();\r\n            }\r\n            if (series.yAxis) {\r\n                series.yAxis.series.removeValue(series);\r\n                series.yAxis.invalidateProcessedData();\r\n            }\r\n            // otherwise extremes won't change\r\n            this.series.each(function (series) {\r\n                series.resetExtremes();\r\n            });\r\n        }\r\n        _super.prototype.handleSeriesRemoved.call(this, event);\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"xAxes\", {\r\n        /**\r\n         * A list of horizontal (X) axes.\r\n         *\r\n         * @return List of axes\r\n         */\r\n        get: function () {\r\n            if (!this._xAxes) {\r\n                this._xAxes = new List();\r\n                this._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n                this._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n                this._disposers.push(new ListDisposer(this._xAxes, false));\r\n            }\r\n            return this._xAxes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.handleAxisRemoval = function (event) {\r\n        var axis = event.oldValue;\r\n        this.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n        if (axis.autoDispose) {\r\n            axis.dispose();\r\n        }\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"yAxes\", {\r\n        /**\r\n         * A list of vertical (Y) axes.\r\n         *\r\n         * @return List of axes\r\n         */\r\n        get: function () {\r\n            if (!this._yAxes) {\r\n                this._yAxes = new List();\r\n                this._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n                this._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n                this._disposers.push(new ListDisposer(this._yAxes, false));\r\n            }\r\n            return this._yAxes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Decorates a new [[XYSeries]] object with required parameters when it is\r\n     * added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event  Event\r\n     */\r\n    XYChart.prototype.handleSeriesAdded = function (event) {\r\n        try {\r\n            _super.prototype.handleSeriesAdded.call(this, event);\r\n            var series = event.newValue;\r\n            if (this.xAxes.length == 0 || this.yAxes.length == 0) {\r\n                registry.removeFromInvalidComponents(series);\r\n                series.dataInvalid = false;\r\n            }\r\n            $utils.used(series.xAxis); // this is enough to get axis, handled in getter\r\n            $utils.used(series.yAxis); // this is enough to get axis, handled in getter\r\n            series.maskBullets = series.maskBullets;\r\n            if (series.fill == undefined) {\r\n                if (this.patterns) {\r\n                    if (!$type.hasValue(series.stroke)) {\r\n                        series.stroke = this.colors.next();\r\n                    }\r\n                    series.fill = this.patterns.next();\r\n                    if ($type.hasValue(series.fillOpacity)) {\r\n                        series.fill.backgroundOpacity = series.fillOpacity;\r\n                    }\r\n                    if (series.stroke instanceof Color) {\r\n                        series.fill.stroke = series.stroke;\r\n                        series.fill.fill = series.stroke;\r\n                    }\r\n                }\r\n                else {\r\n                    series.fill = this.colors.next();\r\n                }\r\n            }\r\n            if (!$type.hasValue(series.stroke)) {\r\n                series.stroke = series.fill;\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.raiseCriticalError(e);\r\n        }\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"cursor\", {\r\n        /**\r\n         * @return Cursor\r\n         */\r\n        get: function () {\r\n            return this._cursor;\r\n        },\r\n        /**\r\n         * Chart's [[Cursor]].\r\n         *\r\n         * @param cursor  Cursor\r\n         */\r\n        set: function (cursor) {\r\n            if (this._cursor != cursor) {\r\n                if (this._cursor) {\r\n                    this.removeDispose(this._cursor);\r\n                }\r\n                this._cursor = cursor;\r\n                if (cursor) {\r\n                    // TODO this is wrong, fix it\r\n                    this._disposers.push(cursor);\r\n                    cursor.chart = this;\r\n                    cursor.shouldClone = false;\r\n                    cursor.parent = this._cursorContainer;\r\n                    cursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n                    cursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n                    cursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n                    cursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n                    cursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n                    cursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n                    cursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n                    cursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n                    cursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n                    if (this.tapToActivate) {\r\n                        // We need this in order to setup cursor properly\r\n                        this.setTapToActivate(this.tapToActivate);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Performs tasks when the cursor's position changes, e.g. shows proper\r\n     * tooltips on axes and series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.handleCursorPositionChange = function () {\r\n        var cursor = this.cursor;\r\n        if (cursor.visible && !cursor.isHiding) {\r\n            var xPosition_1 = this.cursor.xPosition;\r\n            var yPosition_1 = this.cursor.yPosition;\r\n            this.showSeriesTooltip({\r\n                x: xPosition_1,\r\n                y: yPosition_1\r\n            });\r\n            var exceptAxes_1 = [];\r\n            var snapToSeries = cursor.snapToSeries;\r\n            if (snapToSeries && !cursor.downPoint) {\r\n                if (snapToSeries instanceof XYSeries) {\r\n                    snapToSeries = [snapToSeries];\r\n                }\r\n                var dataItems_1 = [];\r\n                $array.each(snapToSeries, function (snpSeries) {\r\n                    if (!snpSeries.isHidden && !snpSeries.isHiding) {\r\n                        var xAxis = snpSeries.xAxis;\r\n                        var yAxis = snpSeries.yAxis;\r\n                        if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n                            snpSeries.dataItems.each(function (dataItem) {\r\n                                dataItems_1.push(dataItem);\r\n                            });\r\n                            $array.move(exceptAxes_1, snpSeries.yAxis);\r\n                            $array.move(exceptAxes_1, snpSeries.xAxis);\r\n                        }\r\n                        else {\r\n                            if (snpSeries.baseAxis == snpSeries.xAxis) {\r\n                                $array.move(exceptAxes_1, snpSeries.yAxis);\r\n                                dataItems_1.push(xAxis.getSeriesDataItem(snpSeries, xAxis.toAxisPosition(xPosition_1), true));\r\n                            }\r\n                            if (snpSeries.baseAxis == snpSeries.yAxis) {\r\n                                $array.move(exceptAxes_1, snpSeries.xAxis);\r\n                                dataItems_1.push(yAxis.getSeriesDataItem(snpSeries, yAxis.toAxisPosition(yPosition_1), true));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                var closestDataItem_1 = this.getClosest(dataItems_1, xPosition_1, yPosition_1);\r\n                if (closestDataItem_1) {\r\n                    this.series.each(function (series) {\r\n                        var closestSeries = closestDataItem_1.component;\r\n                        if (series != closestSeries) {\r\n                            series.hideTooltip();\r\n                            if (series.xAxis != closestSeries.xAxis) {\r\n                                series.xAxis.hideTooltip();\r\n                                exceptAxes_1.push(series.xAxis);\r\n                            }\r\n                            if (series.yAxis != closestSeries.yAxis) {\r\n                                series.yAxis.hideTooltip();\r\n                                exceptAxes_1.push(series.yAxis);\r\n                            }\r\n                        }\r\n                    });\r\n                    closestDataItem_1.component.showTooltipAtDataItem(closestDataItem_1);\r\n                    cursor.handleSnap(closestDataItem_1.component);\r\n                }\r\n            }\r\n            //}\r\n            this._seriesPoints = [];\r\n            if (this._cursorXPosition != xPosition_1) {\r\n                this.showAxisTooltip(this.xAxes, xPosition_1, exceptAxes_1);\r\n            }\r\n            if (this._cursorYPosition != yPosition_1) {\r\n                this.showAxisTooltip(this.yAxes, yPosition_1, exceptAxes_1);\r\n            }\r\n            if (this.arrangeTooltips) {\r\n                this.sortSeriesTooltips(this._seriesPoints);\r\n            }\r\n            if (this.legend) {\r\n                this.legend.afterDraw();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Finds closest data item to position out of the array of items.\r\n     *\r\n     * @since 4.9.29\r\n     * @param   dataItems  Array of items\r\n     * @param              xPosition X position\r\n     * @param              yPosition Y position\r\n     * @return             Data item\r\n     */\r\n    XYChart.prototype.getClosest = function (dataItems, xPosition, yPosition) {\r\n        var minDistance = Infinity;\r\n        var closestDataItem;\r\n        $array.eachContinue(dataItems, function (dataItem) {\r\n            if (dataItem) {\r\n                var xAxis = dataItem.component.xAxis;\r\n                var yAxis = dataItem.component.yAxis;\r\n                var xPos = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.toAxisPosition(xPosition)));\r\n                var yPos = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.toAxisPosition(yPosition)));\r\n                var xField = dataItem.component.xField;\r\n                var yField = dataItem.component.yField;\r\n                if (xAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(xField))) {\r\n                    return true;\r\n                }\r\n                if (yAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(yField))) {\r\n                    return true;\r\n                }\r\n                var dxPosition = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\")));\r\n                var dyPosition = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.getPositionY(dataItem, yField, dataItem.locations[yField], \"valueY\")));\r\n                var distance = Math.sqrt(Math.pow(xPos - dxPosition, 2) + Math.pow(yPos - dyPosition, 2));\r\n                if (distance < minDistance) {\r\n                    minDistance = distance;\r\n                    closestDataItem = dataItem;\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n        return closestDataItem;\r\n    };\r\n    /**\r\n     * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.handleHideCursor = function () {\r\n        this.hideObjectTooltip(this.xAxes);\r\n        this.hideObjectTooltip(this.yAxes);\r\n        this.hideObjectTooltip(this.series);\r\n        this._cursorXPosition = undefined;\r\n        this._cursorYPosition = undefined;\r\n        this.updateSeriesLegend();\r\n    };\r\n    /**\r\n     * Updates values for each series' legend item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.updateSeriesLegend = function () {\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            series.updateLegendValue();\r\n        });\r\n    };\r\n    /**\r\n     * Hides a tooltip for a list of objects.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param sprites  A list of sprites to hide tooltip for\r\n     */\r\n    XYChart.prototype.hideObjectTooltip = function (sprites) {\r\n        $iter.each(sprites.iterator(), function (sprite) {\r\n            if (sprite.cursorTooltipEnabled) {\r\n                sprite.hideTooltip(0);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Shows a tooltip for all chart's series, using specific coordinates as a\r\n     * reference point.\r\n     *\r\n     * The tooltip might be shown at different coordinates depending on the\r\n     * actual data point's position, overlapping with other tooltips, etc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param position  Reference point\r\n     */\r\n    XYChart.prototype.showSeriesTooltip = function (position) {\r\n        var _this = this;\r\n        if (!position) {\r\n            this.series.each(function (series) {\r\n                series.hideTooltip();\r\n            });\r\n            return;\r\n        }\r\n        var seriesPoints = [];\r\n        this.series.each(function (series) {\r\n            //if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n            if ((series.xAxis instanceof DateAxis && series.xAxis.snapTooltip) || (series.yAxis instanceof DateAxis && series.yAxis.snapTooltip)) {\r\n                // void\r\n            }\r\n            else {\r\n                var point = series.showTooltipAtPosition(position.x, position.y);\r\n                if (point) {\r\n                    series.tooltip.setBounds($utils.spriteRectToSvg({ x: 0, y: 0, width: _this.pixelWidth, height: _this.pixelHeight }, _this));\r\n                    seriesPoints.push({ series: series, point: point });\r\n                }\r\n            }\r\n            //}\r\n        });\r\n        if (this.arrangeTooltips) {\r\n            this.sortSeriesTooltips(seriesPoints);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.sortSeriesTooltips = function (seriesPoints) {\r\n        if (seriesPoints.length > 0) {\r\n            var cursor_1 = this.cursor;\r\n            if (cursor_1 && $type.isNumber(cursor_1.maxTooltipDistance)) {\r\n                var cursorPoint_1 = $utils.spritePointToSvg({ x: cursor_1.point.x, y: cursor_1.point.y }, cursor_1);\r\n                var nearestSeries_1;\r\n                var nearestPoint_1;\r\n                var smallestDistance_1 = Infinity;\r\n                $array.each(seriesPoints, function (seriesPoint) {\r\n                    var series = seriesPoint.series;\r\n                    var fixedPoint = seriesPoint.point;\r\n                    if (fixedPoint) {\r\n                        var point = { x: fixedPoint.x, y: fixedPoint.y };\r\n                        var distance = Math.abs($math.getDistance(point, cursorPoint_1));\r\n                        if (distance < smallestDistance_1) {\r\n                            nearestPoint_1 = point;\r\n                            smallestDistance_1 = distance;\r\n                            nearestSeries_1 = series;\r\n                        }\r\n                    }\r\n                });\r\n                var newSeriesPoints_1 = [];\r\n                if (nearestSeries_1) {\r\n                    $array.each(seriesPoints, function (seriesPoint) {\r\n                        if (Math.abs($math.getDistance(seriesPoint.point, nearestPoint_1)) <= Math.abs(cursor_1.maxTooltipDistance)) {\r\n                            newSeriesPoints_1.push({ series: seriesPoint.series, point: seriesPoint.point });\r\n                        }\r\n                        else {\r\n                            var tooltipDataItem = seriesPoint.series.tooltipDataItem;\r\n                            if (tooltipDataItem) {\r\n                                $array.each(tooltipDataItem.sprites, function (sprite) {\r\n                                    sprite.isHover = false;\r\n                                    sprite.handleOutReal(); // to avoid flicker\r\n                                });\r\n                            }\r\n                            seriesPoint.series.hideTooltip(0);\r\n                        }\r\n                    });\r\n                    if (cursor_1.maxTooltipDistance < 0) {\r\n                        if (newSeriesPoints_1.length > 0) {\r\n                            $array.each(newSeriesPoints_1, function (np) {\r\n                                if (nearestSeries_1 != np.series) {\r\n                                    np.series.hideTooltip(0);\r\n                                }\r\n                            });\r\n                        }\r\n                        newSeriesPoints_1 = [{ series: nearestSeries_1, point: nearestPoint_1 }];\r\n                    }\r\n                }\r\n                seriesPoints = newSeriesPoints_1;\r\n            }\r\n            var topLeft_1 = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n            var bottomRight_1 = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n            var sum_1 = 0;\r\n            var filteredSeriesPoints_1 = [];\r\n            $array.each(seriesPoints, function (seriesPoint) {\r\n                var point = seriesPoint.point;\r\n                if (point && $math.isInRectangle(point, { x: topLeft_1.x, y: topLeft_1.y, width: bottomRight_1.x - topLeft_1.x, height: bottomRight_1.y - topLeft_1.y })) {\r\n                    filteredSeriesPoints_1.push({ point: point, series: seriesPoint.series });\r\n                    sum_1 += point.y;\r\n                }\r\n            });\r\n            seriesPoints = filteredSeriesPoints_1;\r\n            var firstSeries = this.series.getIndex(0);\r\n            var inversed = false;\r\n            if (firstSeries && firstSeries.yAxis && firstSeries.yAxis.renderer.inversed) {\r\n                inversed = true;\r\n            }\r\n            if (inversed) {\r\n                seriesPoints.sort(function (a, b) { return $number.order(a.point.y, b.point.y); });\r\n            }\r\n            else {\r\n                seriesPoints.sort(function (a, b) { return $number.order(b.point.y, a.point.y); });\r\n                seriesPoints.reverse();\r\n            }\r\n            var averageY = sum_1 / seriesPoints.length;\r\n            var maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n            if (seriesPoints.length > 0) {\r\n                var top_1 = topLeft_1.y;\r\n                var bottom = bottomRight_1.y;\r\n                // TODO is this needed ?\r\n                $utils.spritePointToDocument({ x: 0, y: top_1 }, this);\r\n                var dropped = false;\r\n                if (averageY > top_1 + (bottom - top_1) / 2) {\r\n                    var nextHeight = bottom;\r\n                    for (var i = seriesPoints.length - 1; i >= 0; i--) {\r\n                        var series = seriesPoints[i].series;\r\n                        var tooltip = series.tooltip;\r\n                        var pointY = seriesPoints[i].point.y;\r\n                        tooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n                        if (tooltip.invalid) {\r\n                            tooltip.validate();\r\n                        }\r\n                        tooltip.toBack();\r\n                        nextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n                        if (nextHeight < -maxY) {\r\n                            dropped = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (averageY <= top_1 + (bottom - top_1) / 2 || dropped) {\r\n                    var nextY = top_1;\r\n                    for (var i = 0, len = seriesPoints.length; i < len; i++) {\r\n                        var series = seriesPoints[i].series;\r\n                        var pointY = seriesPoints[i].point.y;\r\n                        var tooltip = series.tooltip;\r\n                        tooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n                        if (tooltip.invalid) {\r\n                            tooltip.validate();\r\n                        }\r\n                        tooltip.toBack();\r\n                        nextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Shows tooltips for a list of axes at specific position.\r\n     *\r\n     * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n     * vertical axes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axes      List of axes to show tooltip on\r\n     * @param position  Position (px)\r\n     */\r\n    XYChart.prototype.showAxisTooltip = function (axes, position, except) {\r\n        var _this = this;\r\n        $iter.each(axes.iterator(), function (axis) {\r\n            if (!except || except.indexOf(axis) == -1) {\r\n                if (_this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n                    axis.showTooltipAtPosition(position);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n     *\r\n     * @param axis   Axis\r\n     * @param range  Range\r\n     * @return Modified range\r\n     */\r\n    XYChart.prototype.getUpdatedRange = function (axis, range) {\r\n        if (!axis) {\r\n            return;\r\n        }\r\n        var start;\r\n        var end;\r\n        var inversed = axis.renderer.inversed;\r\n        if (inversed) {\r\n            $math.invertRange(range);\r\n            start = 1 - axis.end;\r\n            end = 1 - axis.start;\r\n        }\r\n        else {\r\n            start = axis.start;\r\n            end = axis.end;\r\n        }\r\n        var difference = end - start;\r\n        return {\r\n            start: start + range.start * difference,\r\n            end: start + range.end * difference\r\n        };\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user finishes zooming using chart\r\n     * cursor, e.g. zooms axes.\r\n     *\r\n     * @param event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorZoomEnd = function (event) {\r\n        var cursor = this.cursor;\r\n        var behavior = cursor.behavior;\r\n        if (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n            var xRange = cursor.xRange;\r\n            if (xRange && this.xAxes.length > 0) {\r\n                xRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n                xRange.priority = \"start\";\r\n                this.zoomAxes(this.xAxes, xRange);\r\n            }\r\n        }\r\n        if (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n            var yRange = cursor.yRange;\r\n            if (yRange && this.yAxes.length > 0) {\r\n                yRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n                yRange.priority = \"start\";\r\n                this.zoomAxes(this.yAxes, yRange);\r\n            }\r\n        }\r\n        this.handleHideCursor();\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n     *\r\n     * @param event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorPanStart = function (event) {\r\n        var xAxis = this.xAxes.getIndex(0);\r\n        if (xAxis) {\r\n            this._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n            if (xAxis.renderer.inversed) {\r\n                this._panStartXRange = $math.invertRange(this._panStartXRange);\r\n            }\r\n        }\r\n        var yAxis = this.yAxes.getIndex(0);\r\n        if (yAxis) {\r\n            this._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n            if (yAxis.renderer.inversed) {\r\n                this._panStartYRange = $math.invertRange(this._panStartYRange);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user ends panning\r\n     *\r\n     * @param event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorPanEnd = function (event) {\r\n        var cursor = this.cursor;\r\n        var behavior = cursor.behavior;\r\n        if (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n            var panEndRange = this._panEndXRange;\r\n            var panStartRange = this._panStartXRange;\r\n            var delta = 0;\r\n            if (panEndRange.start < 0) {\r\n                delta = panEndRange.start;\r\n            }\r\n            if (panStartRange.end > 1) {\r\n                if (panEndRange.end > panStartRange.end) {\r\n                    delta = panEndRange.end - panStartRange.end;\r\n                }\r\n            }\r\n            else if (panEndRange.end > 1) {\r\n                delta = panEndRange.end - 1;\r\n            }\r\n            this.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n            this._panEndXRange = undefined;\r\n            this._panStartXRange = undefined;\r\n        }\r\n        if (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n            var panEndRange = this._panEndYRange;\r\n            var delta = 0;\r\n            if (panEndRange.start < 0) {\r\n                delta = panEndRange.start;\r\n            }\r\n            if (panEndRange.end > 1) {\r\n                delta = panEndRange.end - 1;\r\n            }\r\n            this.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n            this._panEndYRange = undefined;\r\n            this._panStartYRange = undefined;\r\n        }\r\n    };\r\n    XYChart.prototype.handleCursorCanceled = function () {\r\n        this._panEndXRange = undefined;\r\n        this._panStartXRange = undefined;\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n     *\r\n     * @param event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorPanning = function (event) {\r\n        var cursor = this.cursor;\r\n        var behavior = cursor.behavior;\r\n        var maxPanOut = cursor.maxPanOut;\r\n        if (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n            var panStartRange = this._panStartXRange;\r\n            var range = cursor.xRange;\r\n            var axisRange = this.getCommonAxisRange(this.xAxes);\r\n            var difference = (panStartRange.end - panStartRange.start);\r\n            var delta = range.start * (axisRange.end - axisRange.start);\r\n            var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n            var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n            if (newStart <= 0) {\r\n                newEnd = newStart + difference;\r\n            }\r\n            if (newEnd >= 1) {\r\n                newStart = newEnd - difference;\r\n            }\r\n            var newRange = {\r\n                start: newStart,\r\n                end: newEnd\r\n            };\r\n            this._panEndXRange = newRange;\r\n            this.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n        }\r\n        if (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n            var panStartRange = this._panStartYRange;\r\n            var range = cursor.yRange;\r\n            var axisRange = this.getCommonAxisRange(this.yAxes);\r\n            var difference = panStartRange.end - panStartRange.start;\r\n            var delta = range.start * (axisRange.end - axisRange.start);\r\n            var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n            var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n            if (newStart <= 0) {\r\n                newEnd = newStart + difference;\r\n            }\r\n            if (newEnd >= 1) {\r\n                newStart = newEnd - difference;\r\n            }\r\n            var newRange = {\r\n                start: newStart,\r\n                end: newEnd\r\n            };\r\n            this._panEndYRange = newRange;\r\n            this.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n        }\r\n        this.handleHideCursor();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.handleYAxisSet = function (series) {\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user starts zooming using chart\r\n     * cursor, e.g. zooms axes.\r\n     *\r\n     * @param event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorZoomStart = function (event) {\r\n        // Nothing here\r\n        // This method is here only as a \"placeholder\" for extending classes to\r\n        // override if necessary\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"scrollbarX\", {\r\n        /**\r\n         * @return Scrollbar\r\n         */\r\n        get: function () {\r\n            return this._scrollbarX;\r\n        },\r\n        /**\r\n         * Horizontal (X) scrollbar.\r\n         *\r\n         * @param scrollbar Scrollbar\r\n         */\r\n        set: function (scrollbar) {\r\n            var _this = this;\r\n            if (this._scrollbarX) {\r\n                this.removeDispose(this._scrollbarX);\r\n            }\r\n            this._scrollbarX = scrollbar;\r\n            if (scrollbar) {\r\n                this._disposers.push(scrollbar);\r\n                scrollbar.parent = this.topAxesContainer;\r\n                scrollbar.shouldClone = false;\r\n                scrollbar.startGrip.exportable = false;\r\n                scrollbar.endGrip.exportable = false;\r\n                scrollbar.toBack();\r\n                scrollbar.orientation = \"horizontal\";\r\n                scrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n                this.events.on(\"datavalidated\", function () { return scrollbar.updateThumb(false); }, this, false);\r\n                // accessibility related\r\n                scrollbar.adapter.add(\"positionValue\", function (arg) {\r\n                    var xAxis = _this.xAxes.getIndex(0);\r\n                    if (xAxis) {\r\n                        arg.value = xAxis.getPositionLabel(xAxis.renderer.inversed\r\n                            ? 1 - arg.position\r\n                            : arg.position);\r\n                    }\r\n                    return arg;\r\n                });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart.prototype, \"scrollbarY\", {\r\n        /**\r\n         * @return Scrollbar\r\n         */\r\n        get: function () {\r\n            return this._scrollbarY;\r\n        },\r\n        /**\r\n         * Vertical (Y) scrollbar.\r\n         *\r\n         * @param scrollbar Scrollbar\r\n         */\r\n        set: function (scrollbar) {\r\n            var _this = this;\r\n            if (this._scrollbarY) {\r\n                this.removeDispose(this._scrollbarY);\r\n            }\r\n            this._scrollbarY = scrollbar;\r\n            if (scrollbar) {\r\n                this._disposers.push(scrollbar);\r\n                scrollbar.parent = this.rightAxesContainer;\r\n                scrollbar.startGrip.exportable = false;\r\n                scrollbar.shouldClone = false;\r\n                scrollbar.endGrip.exportable = false;\r\n                scrollbar.toFront();\r\n                scrollbar.orientation = \"vertical\";\r\n                scrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n                this.events.on(\"datavalidated\", function () { return scrollbar.updateThumb(false); }, this, false);\r\n                // accessibility related\r\n                scrollbar.adapter.add(\"positionValue\", function (arg) {\r\n                    var yAxis = _this.yAxes.getIndex(0);\r\n                    if (yAxis) {\r\n                        arg.value = yAxis.getPositionLabel(arg.position);\r\n                    }\r\n                    return arg;\r\n                });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n     * on it changes.\r\n     *\r\n     * @param event Scrollbar range change event\r\n     */\r\n    XYChart.prototype.handleXScrollbarChange = function (event) {\r\n        if (this.inited) {\r\n            var scrollbar = event.target;\r\n            var range = scrollbar.range;\r\n            if (range.start == 0) {\r\n                range.priority = \"start\";\r\n            }\r\n            if (range.end == 1) {\r\n                range.priority = \"end\";\r\n            }\r\n            range = this.zoomAxes(this.xAxes, range);\r\n            scrollbar.fixRange(range);\r\n        }\r\n    };\r\n    /**\r\n     * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n     * on it changes.\r\n     *\r\n     * @param event Scrollbar range change event\r\n     */\r\n    XYChart.prototype.handleYScrollbarChange = function (event) {\r\n        if (this.inited) {\r\n            var scrollbar = event.target;\r\n            var range = scrollbar.range;\r\n            if (range.end == 1) {\r\n                range.priority = \"end\";\r\n            }\r\n            if (range.start == 0) {\r\n                range.priority = \"start\";\r\n            }\r\n            range = this.zoomAxes(this.yAxes, range);\r\n            scrollbar.fixRange(range);\r\n        }\r\n    };\r\n    /**\r\n     * Zooms axes that are affected by to specific relative range.\r\n     *\r\n     * @param axes       List of axes to zoom\r\n     * @param range      Range of values to zoom to (0-1)\r\n     * @param instantly  If set to `true` will skip zooming animation\r\n     * @return Recalculated range that is common to all involved axes\r\n     */\r\n    XYChart.prototype.zoomAxes = function (axes, range, instantly, round, declination, stop) {\r\n        var realRange = { start: 0, end: 1 };\r\n        this.showSeriesTooltip(); // hides\r\n        var originalRange = range;\r\n        if (!this.dataInvalid) {\r\n            $iter.each(axes.iterator(), function (axis) {\r\n                var maxZoomFactor = axis.maxZoomFactor;\r\n                if ($type.isNumber(axis.minZoomCount)) {\r\n                    maxZoomFactor = maxZoomFactor / axis.minZoomCount;\r\n                }\r\n                if (stop && 1 / (range.end - range.start) >= maxZoomFactor) {\r\n                    // void\r\n                }\r\n                else {\r\n                    if (axis.zoomable) {\r\n                        if (axis.renderer.inversed) {\r\n                            range = $math.invertRange(originalRange);\r\n                        }\r\n                        else {\r\n                            range = originalRange;\r\n                        }\r\n                        axis.hideTooltip(0);\r\n                        if (round) {\r\n                            //let diff = range.end - range.start;\r\n                            if (axis instanceof CategoryAxis) {\r\n                                var cellWidth = axis.getCellEndPosition(0) - axis.getCellStartPosition(0);\r\n                                range.start = axis.roundPosition(range.start + cellWidth / 2 - (axis.startLocation) * cellWidth, axis.startLocation);\r\n                                range.end = axis.roundPosition(range.end - cellWidth / 2 + (1 - axis.endLocation) * cellWidth, axis.endLocation);\r\n                            }\r\n                            else {\r\n                                var d = 0.0001;\r\n                                range.start = axis.roundPosition(range.start + d, 0, axis.startLocation);\r\n                                range.end = axis.roundPosition(range.end + d, 0, axis.endLocation);\r\n                            }\r\n                        }\r\n                        var axisRange = axis.zoom(range, instantly, instantly, declination);\r\n                        if (axis.renderer.inversed) {\r\n                            axisRange = $math.invertRange(axisRange);\r\n                        }\r\n                        realRange = axisRange;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return realRange;\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"maskBullets\", {\r\n        /**\r\n         * @return Mask bullet container?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maskBullets\");\r\n        },\r\n        /**\r\n         * Indicates if bullet container is masked.\r\n         *\r\n         * If it is set to `true`, any bullets that do not fit into bullet container\r\n         * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n         * of the plot area so they are not cut off.\r\n         *\r\n         * @param value Mask bullet container?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"maskBullets\", value, true) && this.bulletsContainer) {\r\n                if (value) {\r\n                    this.bulletsContainer.mask = this._bulletMask;\r\n                }\r\n                else {\r\n                    this.bulletsContainer.mask = undefined;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart.prototype, \"arrangeTooltips\", {\r\n        /**\r\n         * @return Arrange tooltips?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"arrangeTooltips\");\r\n        },\r\n        /**\r\n         * Indicates if chart should arrange series tooltips so that they would not\r\n         * overlap.\r\n         *\r\n         * If set to `true` (default), the chart will adjust vertical positions of\r\n         * all simultaneously shown tooltips to avoid overlapping.\r\n         *\r\n         * However, if you have a vertically-arranged chart, it might not make sense,\r\n         * because tooltips would most probably not be aligned horizontally. In this\r\n         * case it would probably be a good idea to set this setting to `false`.\r\n         *\r\n         * @default true\r\n         * @param value Arrange tooltips?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"arrangeTooltips\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles mouse wheel event.\r\n     *\r\n     * @param event  Original event\r\n     */\r\n    XYChart.prototype.handleWheel = function (event) {\r\n        var plotContainer = this.plotContainer;\r\n        var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n        var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n        var shift = event.shift.y;\r\n        this.handleWheelReal(shift, this.mouseWheelBehavior, plotPoint);\r\n    };\r\n    /**\r\n     * Handles mouse wheel event.\r\n     *\r\n     * @param event  Original event\r\n     */\r\n    XYChart.prototype.handleHorizontalWheel = function (event) {\r\n        var plotContainer = this.plotContainer;\r\n        var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n        var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n        this.handleWheelReal(event.shift.x, this.horizontalMouseWheelBehavior, plotPoint);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.handleWheelReal = function (shift, mouseWheelBehavior, plotPoint) {\r\n        if (shift != 0) {\r\n            var plotContainer = this.plotContainer;\r\n            var rangeX = this.getCommonAxisRange(this.xAxes);\r\n            var rangeY = this.getCommonAxisRange(this.yAxes);\r\n            var shiftStep = .1;\r\n            var maxPanOut = 0;\r\n            if (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n                var xAxis = this.xAxes.getIndex(0);\r\n                var round = false;\r\n                var singleItemStep = shiftStep;\r\n                if (xAxis instanceof CategoryAxis) {\r\n                    singleItemStep = .5 / ((rangeX.end - rangeX.start) * xAxis.dataItems.length);\r\n                    round = true;\r\n                }\r\n                shiftStep = Math.max(0.2, singleItemStep);\r\n                var differenceX = rangeX.end - rangeX.start;\r\n                var newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100 * (rangeX.end - rangeX.start));\r\n                var newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (rangeX.end - rangeX.start), 1 + maxPanOut);\r\n                if (newStartX <= 0) {\r\n                    newEndX = newStartX + differenceX;\r\n                }\r\n                if (newEndX >= 1) {\r\n                    newStartX = newEndX - differenceX;\r\n                }\r\n                this.zoomAxes(this.xAxes, { start: newStartX, end: newEndX }, undefined, round);\r\n            }\r\n            if (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n                var yAxis = this.yAxes.getIndex(0);\r\n                var singleItemStep = shiftStep;\r\n                var round = false;\r\n                if (yAxis instanceof CategoryAxis) {\r\n                    singleItemStep = .5 / ((rangeX.end - rangeX.start) * yAxis.dataItems.length);\r\n                    round = true;\r\n                }\r\n                shiftStep = Math.max(0.2, singleItemStep);\r\n                shift *= -1;\r\n                var differenceY = rangeY.end - rangeY.start;\r\n                var newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100 * (rangeY.end - rangeY.start));\r\n                var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n                if (newStartY <= 0) {\r\n                    newEndY = newStartY + differenceY;\r\n                }\r\n                if (newEndY >= 1) {\r\n                    newStartY = newEndY - differenceY;\r\n                }\r\n                this.zoomAxes(this.yAxes, { start: newStartY, end: newEndY }, undefined, round);\r\n            }\r\n            if (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n                var locationX = plotPoint.x / plotContainer.maxWidth;\r\n                var location2X = this.xAxes.getIndex(0).toAxisPosition(locationX);\r\n                var newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * (rangeX.end - rangeX.start) * shift / 100 * locationX);\r\n                newStartX = Math.min(newStartX, location2X);\r\n                var newEndX = Math.min(rangeX.end + shiftStep * (rangeX.end - rangeX.start) * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n                newEndX = Math.max(newEndX, location2X);\r\n                this.zoomAxes(this.xAxes, { start: newStartX, end: newEndX }, undefined);\r\n            }\r\n            if (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n                var locationY = plotPoint.y / plotContainer.maxHeight;\r\n                var location2Y = this.yAxes.getIndex(0).toAxisPosition(locationY);\r\n                var newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * (rangeY.end - rangeY.start) * shift / 100 * (1 - locationY));\r\n                newStartY = Math.min(newStartY, location2Y);\r\n                var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n                newEndY = Math.max(newEndY, location2Y);\r\n                this.zoomAxes(this.yAxes, { start: newStartY, end: newEndY }, undefined);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"mouseWheelBehavior\", {\r\n        /**\r\n         * @return Mouse wheel behavior\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"mouseWheelBehavior\");\r\n        },\r\n        /**\r\n         * Specifies action for when mouse wheel is used when over the chart.\r\n         *\r\n         * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`,`\"panXY\"`, `\"none\"` (default).\r\n         *\r\n         * You can control sensitivity of wheel zooming via `mouseOptions`.\r\n         *\r\n         * @default \"none\"\r\n         * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n         * @param mouse wheel behavior\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n                if (value != \"none\") {\r\n                    this._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n                    this._disposers.push(this._mouseWheelDisposer);\r\n                }\r\n                else {\r\n                    if (this._mouseWheelDisposer) {\r\n                        this.plotContainer.wheelable = false;\r\n                        this.plotContainer.hoverable = false;\r\n                        this._mouseWheelDisposer.dispose();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart.prototype, \"horizontalMouseWheelBehavior\", {\r\n        /**\r\n         * @return Horizontal mouse wheel behavior\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"horizontalMouseWheelBehavior\");\r\n        },\r\n        /**\r\n         * Specifies action for when horizontal mouse wheel is used when over the chart.\r\n         *\r\n         * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n         *\r\n         * @default \"none\"\r\n         * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n         * @param mouse wheel behavior\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"horizontalMouseWheelBehavior\", value)) {\r\n                if (value != \"none\") {\r\n                    this._mouseWheelDisposer2 = this.plotContainer.events.on(\"wheel\", this.handleHorizontalWheel, this, false);\r\n                    this._disposers.push(this._mouseWheelDisposer2);\r\n                }\r\n                else {\r\n                    if (this._mouseWheelDisposer2) {\r\n                        this.plotContainer.wheelable = false;\r\n                        this.plotContainer.hoverable = false;\r\n                        this._mouseWheelDisposer2.dispose();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n     * so that particular chart types can popuplate this setting with their\r\n     * own type-specific data fields so they are parsed properly.\r\n     *\r\n     * @param fields  Array of date fields\r\n     * @return Array of date fields populated with chart's date fields\r\n     */\r\n    XYChart.prototype.dataSourceDateFields = function (fields) {\r\n        var _this = this;\r\n        // Process parent\r\n        fields = _super.prototype.dataSourceDateFields.call(this, fields);\r\n        // Check if we have any series with date-fields\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            fields = _this.populateDataSourceFields(fields, series.dataFields, [\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]);\r\n        });\r\n        return fields;\r\n    };\r\n    /**\r\n     * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n     * so that particular chart types can popuplate this setting with their\r\n     * own type-specific data fields so they are parsed properly.\r\n     *\r\n     * @param value  Array of number fields\r\n     * @return Array of number fields populated with chart's number fields\r\n     */\r\n    XYChart.prototype.dataSourceNumberFields = function (fields) {\r\n        var _this = this;\r\n        fields = _super.prototype.dataSourceDateFields.call(this, fields);\r\n        // Check if we have any series with date-fields\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            fields = _this.populateDataSourceFields(fields, series.dataFields, [\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]);\r\n        });\r\n        return fields;\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    XYChart.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Save axis ranges for later processing\r\n            var xAxes = [];\r\n            var yAxes = [];\r\n            // Set up axes\r\n            if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n                for (var i = 0, len = config.xAxes.length; i < len; i++) {\r\n                    if (!config.xAxes[i].type) {\r\n                        throw Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n                    }\r\n                    else if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n                        // Maybe convert string dates?\r\n                        for (var x = 0, len_1 = config.xAxes[i][\"axisRanges\"].length; x < len_1; x++) {\r\n                            var range = config.xAxes[i][\"axisRanges\"][x];\r\n                            if ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n                                range.date = this.dateFormatter.parse(range.date);\r\n                            }\r\n                            if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n                                range.endDate = this.dateFormatter.parse(range.endDate);\r\n                            }\r\n                        }\r\n                        xAxes.push({\r\n                            axisRanges: config.xAxes[i][\"axisRanges\"],\r\n                            index: i\r\n                        });\r\n                        delete (config.xAxes[i][\"axisRanges\"]);\r\n                    }\r\n                }\r\n            }\r\n            if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n                for (var i = 0, len = config.yAxes.length; i < len; i++) {\r\n                    if (!config.yAxes[i].type) {\r\n                        throw Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n                    }\r\n                    else if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n                        // Maybe convert string dates?\r\n                        for (var x = 0, len_2 = config.yAxes[i][\"axisRanges\"].length; x < len_2; x++) {\r\n                            var range = config.yAxes[i][\"axisRanges\"][x];\r\n                            if ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n                                range.date = this.dateFormatter.parse(range.date);\r\n                            }\r\n                            if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n                                range.endDate = this.dateFormatter.parse(range.endDate);\r\n                            }\r\n                        }\r\n                        yAxes.push({\r\n                            axisRanges: config.yAxes[i][\"axisRanges\"],\r\n                            index: i\r\n                        });\r\n                        delete (config.yAxes[i][\"axisRanges\"]);\r\n                    }\r\n                }\r\n            }\r\n            // Set up series\r\n            if ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n                for (var i = 0, len = config.series.length; i < len; i++) {\r\n                    config.series[i].type = config.series[i].type || \"LineSeries\";\r\n                }\r\n            }\r\n            // Set up cursor\r\n            if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n                config.cursor.type = \"XYCursor\";\r\n            }\r\n            // Set up scrollbars\r\n            if ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n                config.scrollbarX.type = \"Scrollbar\";\r\n            }\r\n            if ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n                config.scrollbarY.type = \"Scrollbar\";\r\n            }\r\n            _super.prototype.processConfig.call(this, config);\r\n            // Finish up with ranges.\r\n            // We need to do this here because series are processed last in JSON\r\n            // config. Therefore their respective objects are not yet are available\r\n            // when axis (and respectively their ranges) are being processed.\r\n            if (yAxes.length) {\r\n                for (var i = 0, len = yAxes.length; i < len; i++) {\r\n                    this.yAxes.getIndex(yAxes[i].index).config = {\r\n                        axisRanges: yAxes[i].axisRanges\r\n                    };\r\n                }\r\n            }\r\n            if (xAxes.length) {\r\n                for (var i = 0, len = xAxes.length; i < len; i++) {\r\n                    this.xAxes.getIndex(xAxes[i].index).config = {\r\n                        axisRanges: xAxes[i].axisRanges\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This function is used to sort element's JSON config properties, so that\r\n     * some properties that absolutely need to be processed last, can be put at\r\n     * the end.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param a  Element 1\r\n     * @param b  Element 2\r\n     * @return Sorting number\r\n     */\r\n    XYChart.prototype.configOrder = function (a, b) {\r\n        if (a == b) {\r\n            return 0;\r\n        }\r\n        // Must come last\r\n        else if (a == \"scrollbarX\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"scrollbarX\") {\r\n            return -1;\r\n        }\r\n        else if (a == \"scrollbarY\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"scrollbarY\") {\r\n            return -1;\r\n        }\r\n        else if (a == \"cursor\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"cursor\") {\r\n            return -1;\r\n        }\r\n        else if (a == \"series\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"series\") {\r\n            return -1;\r\n        }\r\n        else {\r\n            return _super.prototype.configOrder.call(this, a, b);\r\n        }\r\n    };\r\n    /**\r\n     * Creates a new Series of type suitable for this chart.\r\n     *\r\n     * @return New series\r\n     */\r\n    XYChart.prototype.createSeries = function () {\r\n        return new XYSeries();\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"zoomOutButton\", {\r\n        /**\r\n         * @return Zoom out button\r\n         */\r\n        get: function () {\r\n            return this._zoomOutButton;\r\n        },\r\n        /**\r\n         * A [[Button]] element that is used for zooming out the chart.\r\n         *\r\n         * This button appears only when chart is zoomed in, and disappears\r\n         * autoamatically when it is zoome dout.\r\n         *\r\n         * @param button  Zoom out button\r\n         */\r\n        set: function (button) {\r\n            var _this = this;\r\n            this._zoomOutButton = button;\r\n            if (button) {\r\n                button.events.on(\"hit\", function () {\r\n                    _this.zoomAxes(_this.xAxes, { start: 0, end: 1 });\r\n                    _this.zoomAxes(_this.yAxes, { start: 0, end: 1 });\r\n                }, undefined, false);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all parameters from another [[XYChart]].\r\n     *\r\n     * @param source Source XYChart\r\n     */\r\n    XYChart.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        source.xAxes.each(function (axis) {\r\n            var a = _this.xAxes.push(axis.clone());\r\n            a.chart = _this;\r\n            a.renderer.chart = _this;\r\n        });\r\n        source.yAxes.each(function (axis) {\r\n            var a = _this.yAxes.push(axis.clone());\r\n            a.renderer.chart = _this;\r\n            a.chart = _this;\r\n        });\r\n        //this.xAxes.copyFrom(source.xAxes);\r\n        //this.yAxes.copyFrom(source.yAxes);\r\n        _super.prototype.copyFrom.call(this, source);\r\n        //this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n        if (source.cursor) {\r\n            this.cursor = source.cursor.clone();\r\n        }\r\n        if (source.scrollbarX) {\r\n            this.scrollbarX = source.scrollbarX.clone();\r\n        }\r\n        if (source.scrollbarY) {\r\n            this.scrollbarY = source.scrollbarY.clone();\r\n        }\r\n        //@todo copy all container properties\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        var scrollbarX = this.scrollbarX;\r\n        if (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n            scrollbarX.scrollbarChart.disposeData();\r\n        }\r\n        var scrollbarY = this.scrollbarY;\r\n        if (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n            scrollbarY.scrollbarChart.disposeData();\r\n        }\r\n        this.xAxes.each(function (axis) {\r\n            if (axis instanceof CategoryAxis) {\r\n                axis.disposeData();\r\n            }\r\n        });\r\n        this.yAxes.each(function (axis) {\r\n            if (axis instanceof CategoryAxis) {\r\n                axis.disposeData();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Adds one or several (array) of data items to the existing data.\r\n     *\r\n     * @param rawDataItem One or many raw data item objects\r\n     */\r\n    XYChart.prototype.addData = function (rawDataItem, removeCount) {\r\n        if (this.scrollbarX instanceof XYChartScrollbar) {\r\n            this.addScrollbarData(this.scrollbarX, removeCount);\r\n        }\r\n        if (this.scrollbarY instanceof XYChartScrollbar) {\r\n            this.addScrollbarData(this.scrollbarY, removeCount);\r\n        }\r\n        _super.prototype.addData.call(this, rawDataItem, removeCount);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.addScrollbarData = function (scrollbar, removeCount) {\r\n        var chart = scrollbar.scrollbarChart;\r\n        chart._parseDataFrom = chart.data.length;\r\n        chart.invalidateData();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.removeScrollbarData = function (scrollbar, removeCount) {\r\n        var chart = scrollbar.scrollbarChart;\r\n        if ($type.isNumber(removeCount)) {\r\n            while (removeCount > 0) {\r\n                var dataItem = this.dataItems.getIndex(0);\r\n                if (dataItem) {\r\n                    chart.dataItems.remove(dataItem);\r\n                }\r\n                chart.dataUsers.each(function (dataUser) {\r\n                    var dataItem = dataUser.dataItems.getIndex(0);\r\n                    if (dataItem) {\r\n                        dataUser.dataItems.remove(dataItem);\r\n                    }\r\n                });\r\n                chart._parseDataFrom--;\r\n                removeCount--;\r\n            }\r\n            chart.invalidateData();\r\n        }\r\n    };\r\n    /**\r\n     * Removes elements from the beginning of data\r\n     *\r\n     * @param count number of elements to remove\r\n     */\r\n    XYChart.prototype.removeData = function (count) {\r\n        if (this.scrollbarX instanceof XYChartScrollbar) {\r\n            this.removeScrollbarData(this.scrollbarX, count);\r\n        }\r\n        if (this.scrollbarY instanceof XYChartScrollbar) {\r\n            this.removeScrollbarData(this.scrollbarY, count);\r\n        }\r\n        _super.prototype.removeData.call(this, count);\r\n    };\r\n    /**\r\n     * @param  value  Tap to activate?\r\n     */\r\n    XYChart.prototype.setTapToActivate = function (value) {\r\n        _super.prototype.setTapToActivate.call(this, value);\r\n        if (this.cursor) {\r\n            this.cursor.interactions.isTouchProtected = value;\r\n            this.plotContainer.interactions.isTouchProtected = value;\r\n        }\r\n    };\r\n    XYChart.prototype.handleTapToActivate = function () {\r\n        _super.prototype.handleTapToActivate.call(this);\r\n        if (this.cursor) {\r\n            this.cursor.interactions.isTouchProtected = false;\r\n            this.plotContainer.interactions.isTouchProtected = false;\r\n        }\r\n    };\r\n    XYChart.prototype.handleTapToActivateDeactivation = function () {\r\n        _super.prototype.handleTapToActivateDeactivation.call(this);\r\n        if (this.cursor) {\r\n            this.cursor.interactions.isTouchProtected = true;\r\n            this.plotContainer.interactions.isTouchProtected = true;\r\n        }\r\n    };\r\n    return XYChart;\r\n}(SerialChart));\r\nexport { XYChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n/**\r\n * Add default responsive rules\r\n */\r\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.maybeXS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof XYChart && target.scrollbarX) {\r\n            var state = target.states.create(stateId);\r\n            var sbstate = target.scrollbarX.states.create(stateId);\r\n            sbstate.properties.disabled = true;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.maybeXS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof XYChart && target.scrollbarY) {\r\n            var state = target.states.create(stateId);\r\n            var sbstate = target.scrollbarY.states.create(stateId);\r\n            sbstate.properties.disabled = true;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,EAAsBC,mBAAtB,QAAiD,eAAjD;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,IAAT,EAAeC,YAAf,QAAmC,uBAAnC;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,yBAAzB;AACA,SAASC,YAAT,EAAuBC,qBAAvB,QAAoD,6BAApD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,eAAe;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACnD3B,SAAS,CAAC0B,eAAD,EAAkBC,MAAlB,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,eAAT,GAA2B;IACvB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;IACAD,KAAK,CAACE,SAAN,GAAkB,iBAAlB;;IACAF,KAAK,CAACG,UAAN;;IACA,OAAOH,KAAP;EACH;;EACD,OAAOF,eAAP;AACH,CAZoC,CAYnCxB,mBAZmC,CAArC;;AAaA,SAASwB,ee,UAAUL,MAAV,EAAkB;EAC3C3B,SAAS,CAACgC,OAAD,EAAUL,MAAV,CAAT;EACA;AACJ;AACA;;;EACI,SAASK,OAAT,GAAmB;IACf,IAAIJ,KAAK,GACT;IACAD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAFrB;IAGA;AACR;AACA;;;IACQD,KAAK,CAACK,cAAN,GAAuBxB,aAAvB;IACA;AACR;AACA;;IACQmB,KAAK,CAACM,cAAN,GAAuBxB,aAAvB;IACA;AACR;AACA;;IACQkB,KAAK,CAACO,aAAN,GAAsB,EAAtB;IACAP,KAAK,CAACE,SAAN,GAAkB,SAAlB,CAhBe,CAiBf;IACA;;IACAF,KAAK,CAACQ,WAAN,GAAoB,IAApB;IACAR,KAAK,CAACS,eAAN,GAAwB,IAAxB,CApBe,CAqBf;;IACA,IAAIC,cAAc,GAAGV,KAAK,CAACU,cAA3B;IACAA,cAAc,CAACC,MAAf,GAAwB,UAAxB;;IACAX,KAAK,CAACY,OAAN,CAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAxBe,CAyBf;;;IACA,IAAIC,WAAW,GAAGH,cAAc,CAACI,WAAf,CAA2BvC,SAA3B,CAAlB;IACAsC,WAAW,CAACE,WAAZ,GAA0B,KAA1B;IACAF,WAAW,CAACF,MAAZ,GAAqB,UAArB;IACAE,WAAW,CAACG,KAAZ,GAAoB7B,OAAO,CAAC,GAAD,CAA3B;IACA0B,WAAW,CAACI,MAAZ,GAAqB,CAArB;IACAjB,KAAK,CAACkB,gBAAN,GAAyBL,WAAzB,CA/Be,CAgCf;IACA;IACA;IACA;;IACA,IAAIM,gBAAgB,GAAGT,cAAc,CAACI,WAAf,CAA2BvC,SAA3B,CAAvB;IACA4C,gBAAgB,CAACJ,WAAjB,GAA+B,KAA/B;IACAI,gBAAgB,CAACR,MAAjB,GAA0B,YAA1B;IACAQ,gBAAgB,CAACH,KAAjB,GAAyB7B,OAAO,CAAC,GAAD,CAAhC;IACAgC,gBAAgB,CAACC,MAAjB,GAA0BjC,OAAO,CAAC,GAAD,CAAjC;IACAgC,gBAAgB,CAACF,MAAjB,GAA0B,CAA1B;IACAjB,KAAK,CAACqB,qBAAN,GAA8BF,gBAA9B,CA1Ce,CA2Cf;;IACA,IAAIG,cAAc,GAAGZ,cAAc,CAACI,WAAf,CAA2BvC,SAA3B,CAArB;IACA+C,cAAc,CAACP,WAAf,GAA6B,KAA7B;IACAO,cAAc,CAACN,KAAf,GAAuB7B,OAAO,CAAC,GAAD,CAA9B;IACAmC,cAAc,CAACX,MAAf,GAAwB,UAAxB;IACAW,cAAc,CAACL,MAAf,GAAwB,CAAxB;IACAjB,KAAK,CAACuB,mBAAN,GAA4BD,cAA5B,CAjDe,CAkDf;;IACA,IAAIE,YAAY,GAAGL,gBAAgB,CAACL,WAAjB,CAA6BvC,SAA7B,CAAnB;IACAiD,YAAY,CAACT,WAAb,GAA2B,KAA3B;IACAS,YAAY,CAACb,MAAb,GAAsB,YAAtB;IACAa,YAAY,CAACJ,MAAb,GAAsBjC,OAAO,CAAC,GAAD,CAA7B;IACAqC,YAAY,CAACC,YAAb,GAA4B,OAA5B;IACAD,YAAY,CAACE,MAAb,CAAoBC,EAApB,CAAuB,aAAvB,EAAsC3B,KAAK,CAAC4B,kBAA5C,EAAgE5B,KAAhE,EAAuE,KAAvE;IACAwB,YAAY,CAACP,MAAb,GAAsB,CAAtB;IACAjB,KAAK,CAAC6B,iBAAN,GAA0BL,YAA1B,CA1De,CA2Df;;IACA,IAAIM,QAAQ,GAAGX,gBAAgB,CAACL,WAAjB,CAA6BvC,SAA7B,CAAf;IACAuD,QAAQ,CAACf,WAAT,GAAuB,KAAvB;IACAe,QAAQ,CAACV,MAAT,GAAkBjC,OAAO,CAAC,GAAD,CAAzB;IACA2C,QAAQ,CAACd,KAAT,GAAiB7B,OAAO,CAAC,GAAD,CAAxB,CA/De,CAgEf;IACA;;IACA2C,QAAQ,CAACC,UAAT,CAAoBC,WAApB,GAAkC,CAAlC;IACAhC,KAAK,CAACiC,aAAN,GAAsBH,QAAtB,CAnEe,CAoEf;;IACA9B,KAAK,CAACkC,kBAAN,GAA2B,MAA3B;IACAlC,KAAK,CAACmC,gBAAN,GAAyBL,QAAzB,CAtEe,CAuEf;;IACA,IAAIM,aAAa,GAAGjB,gBAAgB,CAACL,WAAjB,CAA6BvC,SAA7B,CAApB;IACA6D,aAAa,CAACrB,WAAd,GAA4B,KAA5B;IACAqB,aAAa,CAACzB,MAAd,GAAuB,YAAvB;IACAyB,aAAa,CAAChB,MAAd,GAAuBjC,OAAO,CAAC,GAAD,CAA9B;IACAiD,aAAa,CAACnB,MAAd,GAAuB,CAAvB;IACAmB,aAAa,CAACV,MAAd,CAAqBC,EAArB,CAAwB,aAAxB,EAAuC3B,KAAK,CAAC4B,kBAA7C,EAAiE5B,KAAjE,EAAwE,KAAxE;IACAA,KAAK,CAACqC,kBAAN,GAA2BD,aAA3B;IACApC,KAAK,CAACsC,eAAN,CAAsBC,MAAtB,GAA+BT,QAA/B;IACA9B,KAAK,CAACwC,gBAAN,CAAuBD,MAAvB,GAAgCT,QAAhC;IACA,IAAIW,aAAa,GAAGX,QAAQ,CAAChB,WAAT,CAAqB5B,aAArB,CAApB;IACAuD,aAAa,CAAC1B,WAAd,GAA4B,KAA5B;IACA0B,aAAa,CAACC,KAAd,GAAsB,OAAtB;IACAD,aAAa,CAACE,MAAd,GAAuB,KAAvB;IACAF,aAAa,CAACxB,MAAd,GAAuB2B,MAAM,CAACC,gBAA9B;IACAJ,aAAa,CAACK,SAAd,GAA0B,CAA1B;IACAL,aAAa,CAACM,WAAd,GAA4B,CAA5B;IACAN,aAAa,CAACO,IAAd,CAAmB,CAAnB;IACAhD,KAAK,CAACyC,aAAN,GAAsBA,aAAtB,CAzFe,CA0Ff;;IACA,IAAIQ,oBAAoB,GAAGjD,KAAK,CAACiC,aAAN,CAAoBnB,WAApB,CAAgCvC,SAAhC,CAA3B;;IACA0E,oBAAoB,CAAClC,WAArB,GAAmC,KAAnC;IACAkC,oBAAoB,CAACjC,KAArB,GAA6B7B,OAAO,CAAC,GAAD,CAApC;IACA8D,oBAAoB,CAAC7B,MAArB,GAA8BjC,OAAO,CAAC,GAAD,CAArC;IACA8D,oBAAoB,CAACC,UAArB,GAAkC,KAAlC;IACAD,oBAAoB,CAAChC,MAArB,GAA8B,CAA9B;IACAgC,oBAAoB,CAACtC,MAArB,GAA8B,MAA9B;IACAX,KAAK,CAACiD,oBAAN,GAA6BA,oBAA7B;IACAjD,KAAK,CAACmD,WAAN,GAAoBnD,KAAK,CAACiC,aAA1B;;IACAjC,KAAK,CAAC0B,MAAN,CAAaC,EAAb,CAAgB,qBAAhB,EAAuC,YAAY;MAC/C3B,KAAK,CAACoD,MAAN,CAAaC,IAAb,CAAkB,UAAUD,MAAV,EAAkB;QAChCA,MAAM,CAACE,WAAP,GAAqB,KAArB;QACAF,MAAM,CAACG,aAAP,GAAuB,EAAvB;MACH,CAHD;IAIH,CALD,EAKGvD,KALH,EAKU,KALV,EApGe,CA0Gf;;;IACAA,KAAK,CAACG,UAAN;;IACA,OAAOH,KAAP;EACH;EACD;AACJ;AACA;AACA;;;EACII,OAAO,CAACoD,SAAR,CAAkBC,qBAAlB,GAA0C,YAAY;IAClD1D,MAAM,CAACyD,SAAP,CAAiBC,qBAAjB,CAAuCxD,IAAvC,CAA4C,IAA5C;;IACA,KAAKwC,aAAL,CAAmBiB,UAAnB,GAAgC,KAAhC,CAFkD,CAGlD;IACA;;IACA,IAAI,CAAClE,KAAK,CAACmE,QAAN,CAAe,KAAKC,WAApB,CAAL,EAAuC;MACnC,KAAKA,WAAL,GAAmB,KAAKC,QAAL,CAAcC,SAAd,CAAwB,WAAxB,CAAnB;IACH;EACJ,CARD;EASA;AACJ;AACA;AACA;AACA;;;EACI1D,OAAO,CAACoD,SAAR,CAAkBO,IAAlB,GAAyB,YAAY;IACjChE,MAAM,CAACyD,SAAP,CAAiBO,IAAjB,CAAsB9D,IAAtB,CAA2B,IAA3B;;IACA,KAAKqC,eAAL,CAAqB0B,OAArB;IACA,KAAKxB,gBAAL,CAAsBwB,OAAtB;;IACA,IAAI,KAAKxD,WAAT,EAAsB;MAClB,KAAKgC,gBAAL,CAAsByB,IAAtB,GAA6B,KAAKd,WAAlC;IACH;;IACD,KAAKe,kBAAL;EACH,CARD;EASA;AACJ;AACA;AACA;AACA;;;EACI9D,OAAO,CAACoD,SAAR,CAAkBW,kBAAlB,GAAuC,YAAY;IAC/C5E,KAAK,CAAC8D,IAAN,CAAW,KAAKD,MAAL,CAAYgB,QAAZ,EAAX,EAAmC,UAAUhB,MAAV,EAAkB;MACjDA,MAAM,CAACiB,UAAP;IACH,CAFD;EAGH,CAJD;EAKA;AACJ;AACA;AACA;AACA;AACA;;;EACIjE,OAAO,CAACoD,SAAR,CAAkBc,YAAlB,GAAiC,YAAY;IACzC;IACA,IAAI,KAAKC,cAAL,IAAuB,CAA3B,EAA8B;MAC1BhF,KAAK,CAAC8D,IAAN,CAAW,KAAKmB,KAAL,CAAWJ,QAAX,EAAX,EAAkC,UAAUK,IAAV,EAAgB;QAC9CA,IAAI,CAACC,gBAAL;MACH,CAFD;MAGAnF,KAAK,CAAC8D,IAAN,CAAW,KAAKsB,KAAL,CAAWP,QAAX,EAAX,EAAkC,UAAUK,IAAV,EAAgB;QAC9CA,IAAI,CAACC,gBAAL;MACH,CAFD;MAGAnF,KAAK,CAAC8D,IAAN,CAAW,KAAKD,MAAL,CAAYgB,QAAZ,EAAX,EAAmC,UAAUhB,MAAV,EAAkB;QACjDA,MAAM,CAACsB,gBAAP;MACH,CAFD;IAGH;;IACD3E,MAAM,CAACyD,SAAP,CAAiBc,YAAjB,CAA8BrE,IAA9B,CAAmC,IAAnC;EACH,CAdD;EAeA;AACJ;AACA;AACA;AACA;;;EACIG,OAAO,CAACoD,SAAR,CAAkB5B,kBAAlB,GAAuC,YAAY;IAC/C,IAAIgD,aAAa,GAAG,KAAK/C,iBAAL,CAAuBgD,aAA3C;IACA,IAAIC,cAAc,GAAG,KAAKzC,kBAAL,CAAwBwC,aAA7C;IACA,IAAIvD,cAAc,GAAG,KAAKC,mBAA1B;;IACA,IAAID,cAAc,CAACyD,WAAf,IAA8BH,aAA9B,IAA+CtD,cAAc,CAAC0D,YAAf,IAA+BF,cAAlF,EAAkG;MAC9FxD,cAAc,CAACyD,WAAf,GAA6BH,aAA7B;MACAtD,cAAc,CAAC0D,YAAf,GAA8BF,cAA9B;IACH;;IACD,IAAIjE,WAAW,GAAG,KAAKK,gBAAvB;;IACA,IAAIL,WAAW,CAACkE,WAAZ,IAA2BH,aAA3B,IAA4C/D,WAAW,CAACmE,YAAZ,IAA4BF,cAA5E,EAA4F;MACxFjE,WAAW,CAACkE,WAAZ,GAA0BH,aAA1B;MACA/D,WAAW,CAACmE,YAAZ,GAA2BF,cAA3B;IACH;EACJ,CAbD;EAcA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACI1E,OAAO,CAACoD,SAAR,CAAkByB,MAAlB,GAA2B,YAAY;IACnClF,MAAM,CAACyD,SAAP,CAAiByB,MAAjB,CAAwBhF,IAAxB,CAA6B,IAA7B;;IACA,KAAKmD,MAAL,CAAYC,IAAZ,CAAiB,UAAUD,MAAV,EAAkB;MAC/BA,MAAM,CAAC8B,QAAP,GAAkB,KAAlB;IACH,CAFD;EAGH,CALD;EAMA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACI9E,OAAO,CAACoD,SAAR,CAAkB2B,iBAAlB,GAAsC,UAAUC,KAAV,EAAiB;IACnD,KAAKC,WAAL,CAAiBD,KAAK,CAACE,MAAvB;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIlF,OAAO,CAACoD,SAAR,CAAkB+B,iBAAlB,GAAsC,UAAUH,KAAV,EAAiB;IACnD,KAAKI,WAAL,CAAiBJ,KAAK,CAACE,MAAvB;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;;;EACIlF,OAAO,CAACoD,SAAR,CAAkBiC,YAAlB,GAAiC,UAAUL,KAAV,EAAiB;IAC9C,IAAIX,IAAI,GAAGW,KAAK,CAACM,QAAjB;IACAjB,IAAI,CAACkB,KAAL,GAAa,IAAb;;IACA,IAAI,CAAClB,IAAI,CAACmB,QAAV,EAAoB;MAChBnB,IAAI,CAACmB,QAAL,GAAgB,IAAI,KAAKvF,cAAT,EAAhB;MACAoE,IAAI,CAACmB,QAAL,CAAcC,OAAd,CAAsB,CAAC,UAAD,EAAa,QAAb,EAAuB,UAAvB,EAAmC,iBAAnC,CAAtB,EAA6E,KAAKV,iBAAlF,EAAqG,IAArG,EAA2G,KAA3G;IACH;;IACDV,IAAI,CAACqB,UAAL,GAAkB,GAAlB;IACArB,IAAI,CAAC/C,MAAL,CAAYC,EAAZ,CAAe,iBAAf,EAAkC,KAAKoE,sBAAvC,EAA+D,IAA/D,EAAqE,KAArE,EAR8C,CAS9C;IACA;IACA;IACA;;IACAtB,IAAI,CAACuB,YAAL,GAAoB,IAApB;IACA,KAAKX,WAAL,CAAiBZ,IAAI,CAACmB,QAAtB;IACA,KAAKK,WAAL,CAAiBxB,IAAjB;EACH,CAhBD;EAiBA;AACJ;AACA;AACA;AACA;AACA;;;EACIrE,OAAO,CAACoD,SAAR,CAAkB0C,YAAlB,GAAiC,UAAUd,KAAV,EAAiB;IAC9C,IAAIX,IAAI,GAAGW,KAAK,CAACM,QAAjB;IACAjB,IAAI,CAACkB,KAAL,GAAa,IAAb;;IACA,IAAI,CAAClB,IAAI,CAACmB,QAAV,EAAoB;MAChBnB,IAAI,CAACmB,QAAL,GAAgB,IAAI,KAAKtF,cAAT,EAAhB;MACAmE,IAAI,CAACmB,QAAL,CAAcC,OAAd,CAAsB,CAAC,UAAD,EAAa,QAAb,EAAuB,UAAvB,EAAmC,iBAAnC,CAAtB,EAA6E,KAAKN,iBAAlF,EAAqG,IAArG,EAA2G,KAA3G;IACH;;IACDd,IAAI,CAACqB,UAAL,GAAkB,GAAlB;IACArB,IAAI,CAAC/C,MAAL,CAAYC,EAAZ,CAAe,iBAAf,EAAkC,KAAKwE,sBAAvC,EAA+D,IAA/D,EAAqE,KAArE,EAR8C,CAS9C;IACA;IACA;IACA;;IACA1B,IAAI,CAACuB,YAAL,GAAoB,IAApB;IACA,KAAKR,WAAL,CAAiBf,IAAI,CAACmB,QAAtB;IACA,KAAKK,WAAL,CAAiBxB,IAAjB;EACH,CAhBD;EAiBA;AACJ;AACA;AACA;;;EACIrE,OAAO,CAACoD,SAAR,CAAkBuC,sBAAlB,GAA2C,YAAY;IACnD,IAAIK,KAAK,GAAG,KAAKC,kBAAL,CAAwB,KAAK7B,KAA7B,CAAZ;;IACA,IAAI,KAAK8B,UAAT,EAAqB;MACjB,KAAKC,QAAL,CAAc,KAAK/B,KAAnB,EAA0B4B,KAA1B,EAAiC,IAAjC;IACH;;IACD,KAAKI,mBAAL;IACA,KAAKC,eAAL,CAAqB,KAAKH,UAA1B,EAAsCF,KAAtC;EACH,CAPD;EAQA;AACJ;AACA;AACA;;;EACIhG,OAAO,CAACoD,SAAR,CAAkBgD,mBAAlB,GAAwC,YAAY;IAChD,IAAI,KAAK/D,aAAT,EAAwB;MACpB,IAAIiE,MAAM,GAAG,KAAb;MACAnH,KAAK,CAACoH,YAAN,CAAmB,KAAKnC,KAAL,CAAWJ,QAAX,EAAnB,EAA0C,UAAUK,IAAV,EAAgB;QACtD,IAAIA,IAAI,CAAC+B,mBAAT,EAA8B;UAC1B,IAAI/B,IAAI,CAACmC,YAAL,GAAoB,CAAxB,EAA2B;YACvB,IAAIC,aAAa,GAAGpC,IAAI,CAACqC,aAAL,GAAqBrC,IAAI,CAACmC,YAA9C;;YACA,IAAItH,KAAK,CAACyH,KAAN,CAAYtC,IAAI,CAACuC,GAAL,GAAWvC,IAAI,CAACwC,KAA5B,EAAmC,CAAnC,IAAwC,IAAIJ,aAAhD,EAA+D;cAC3DH,MAAM,GAAG,IAAT;cACA,OAAO,KAAP;YACH;UACJ,CAND,MAOK;YACD,IAAIpH,KAAK,CAACyH,KAAN,CAAYtC,IAAI,CAACwC,KAAjB,EAAwB,CAAxB,IAA6B,CAA7B,IAAkC3H,KAAK,CAACyH,KAAN,CAAYtC,IAAI,CAACuC,GAAjB,EAAsB,CAAtB,IAA2B,CAAjE,EAAoE;cAChEN,MAAM,GAAG,IAAT;cACA,OAAO,KAAP;YACH;UACJ;QACJ;;QACD,OAAO,IAAP;MACH,CAjBD;MAkBAnH,KAAK,CAACoH,YAAN,CAAmB,KAAKhC,KAAL,CAAWP,QAAX,EAAnB,EAA0C,UAAUK,IAAV,EAAgB;QACtD,IAAIA,IAAI,CAAC+B,mBAAT,EAA8B;UAC1B,IAAI/B,IAAI,CAACmC,YAAL,GAAoB,CAAxB,EAA2B;YACvB,IAAIC,aAAa,GAAGpC,IAAI,CAACqC,aAAL,GAAqBrC,IAAI,CAACmC,YAA9C;;YACA,IAAItH,KAAK,CAACyH,KAAN,CAAYtC,IAAI,CAACuC,GAAL,GAAWvC,IAAI,CAACwC,KAA5B,EAAmC,CAAnC,IAAwC,IAAIJ,aAAhD,EAA+D;cAC3DH,MAAM,GAAG,IAAT;cACA,OAAO,KAAP;YACH;UACJ,CAND,MAOK;YACD,IAAIpH,KAAK,CAACyH,KAAN,CAAYtC,IAAI,CAACwC,KAAjB,EAAwB,CAAxB,IAA6B,CAA7B,IAAkC3H,KAAK,CAACyH,KAAN,CAAYtC,IAAI,CAACuC,GAAjB,EAAsB,CAAtB,IAA2B,CAAjE,EAAoE;cAChEN,MAAM,GAAG,IAAT;cACA,OAAO,KAAP;YACH;UACJ;;UACD,OAAO,IAAP;QACH;MACJ,CAjBD;;MAkBA,IAAI,CAAC,KAAKQ,cAAV,EAA0B;QACtBR,MAAM,GAAG,KAAT;MACH;;MACD,IAAIA,MAAJ,EAAY;QACR,KAAKjE,aAAL,CAAmB0E,IAAnB;MACH,CAFD,MAGK;QACD,KAAK1E,aAAL,CAAmBO,IAAnB;MACH;IACJ;EACJ,CAjDD;EAkDA;AACJ;AACA;AACA;;;EACI5C,OAAO,CAACoD,SAAR,CAAkB0D,cAAlB,GAAmC,YAAY;IAC3C,IAAIhC,QAAQ,GAAG,KAAf;IACA3F,KAAK,CAAC8D,IAAN,CAAW,KAAKD,MAAL,CAAYgB,QAAZ,EAAX,EAAmC,UAAUhB,MAAV,EAAkB;MACjD,IAAI,CAACA,MAAM,CAAC8B,QAAZ,EAAsB;QAClBA,QAAQ,GAAG,KAAX;QACA,OAAO,KAAP;MACH;IACJ,CALD;IAMA,OAAOA,QAAP;EACH,CATD;EAUA;AACJ;AACA;AACA;;;EACI9E,OAAO,CAACoD,SAAR,CAAkB2C,sBAAlB,GAA2C,YAAY;IACnD,IAAIC,KAAK,GAAG,KAAKC,kBAAL,CAAwB,KAAK1B,KAA7B,CAAZ;;IACA,IAAI,KAAKyC,UAAT,EAAqB;MACjB,KAAKb,QAAL,CAAc,KAAK5B,KAAnB,EAA0ByB,KAA1B,EAAiC,IAAjC;IACH;;IACD,KAAKI,mBAAL;IACA,KAAKC,eAAL,CAAqB,KAAKW,UAA1B,EAAsChB,KAAtC;EACH,CAPD;EAQA;AACJ;AACA;AACA;AACA;AACA;;;EACIhG,OAAO,CAACoD,SAAR,CAAkBiD,eAAlB,GAAoC,UAAUY,SAAV,EAAqBjB,KAArB,EAA4B;IAC5D,IAAIiB,SAAJ,EAAe;MACXA,SAAS,CAACC,eAAV;MACAD,SAAS,CAACJ,KAAV,GAAkBb,KAAK,CAACa,KAAxB;MACAI,SAAS,CAACL,GAAV,GAAgBZ,KAAK,CAACY,GAAtB;IACH;EACJ,CAND;EAOA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI5G,OAAO,CAACoD,SAAR,CAAkB6C,kBAAlB,GAAuC,UAAUkB,IAAV,EAAgB;IACnD,IAAIN,KAAJ;IACA,IAAID,GAAJ;IACAO,IAAI,CAAClE,IAAL,CAAU,UAAUoB,IAAV,EAAgB;MACtB,IAAI,CAACA,IAAI,CAAC+C,QAAN,IAAmB/C,IAAI,YAAY9F,SAAhB,IAA6B8F,IAAI,CAACgD,YAAzD,EAAwE,CACvE,CADD,MAEK;QACD,IAAIC,SAAS,GAAGjD,IAAI,CAACwC,KAArB;QACA,IAAIU,OAAO,GAAGlD,IAAI,CAACuC,GAAnB;;QACA,IAAIvC,IAAI,CAACmB,QAAL,CAAcgC,QAAlB,EAA4B;UACxBF,SAAS,GAAG,IAAIjD,IAAI,CAACuC,GAArB;UACAW,OAAO,GAAG,IAAIlD,IAAI,CAACwC,KAAnB;QACH;;QACD,IAAI,CAACzH,KAAK,CAACqI,QAAN,CAAeZ,KAAf,CAAD,IAA2BS,SAAS,GAAGT,KAA3C,EAAmD;UAC/CA,KAAK,GAAGS,SAAR;QACH;;QACD,IAAI,CAAClI,KAAK,CAACqI,QAAN,CAAeb,GAAf,CAAD,IAAyBW,OAAO,GAAGX,GAAvC,EAA6C;UACzCA,GAAG,GAAGW,OAAN;QACH;MACJ;IACJ,CAjBD;IAkBA,OAAO;MAAEV,KAAK,EAAEA,KAAT;MAAgBD,GAAG,EAAEA;IAArB,CAAP;EACH,CAtBD;EAuBA;AACJ;AACA;AACA;AACA;AACA;;;EACI5G,OAAO,CAACoD,SAAR,CAAkB6B,WAAlB,GAAgC,UAAUO,QAAV,EAAoB;IAChD,IAAInB,IAAI,GAAGmB,QAAQ,CAACnB,IAApB;;IACA,IAAImB,QAAQ,CAACkC,QAAb,EAAuB;MACnBrD,IAAI,CAAClC,MAAL,GAAc,KAAKrB,gBAAnB;MACAuD,IAAI,CAACT,OAAL;IACH,CAHD,MAIK;MACDS,IAAI,CAAClC,MAAL,GAAc,KAAKhB,mBAAnB;MACAkD,IAAI,CAACsD,MAAL;IACH;;IACD,IAAItD,IAAI,CAACmB,QAAT,EAAmB;MACfnB,IAAI,CAACmB,QAAL,CAAcoC,eAAd;IACH;EACJ,CAbD;EAcA;AACJ;AACA;AACA;AACA;AACA;;;EACI5H,OAAO,CAACoD,SAAR,CAAkBgC,WAAlB,GAAgC,UAAUI,QAAV,EAAoB;IAChD,IAAInB,IAAI,GAAGmB,QAAQ,CAACnB,IAApB;;IACA,IAAImB,QAAQ,CAACkC,QAAb,EAAuB;MACnBrD,IAAI,CAAClC,MAAL,GAAc,KAAKF,kBAAnB;MACAoC,IAAI,CAACsD,MAAL;IACH,CAHD,MAIK;MACDtD,IAAI,CAAClC,MAAL,GAAc,KAAKV,iBAAnB;MACA4C,IAAI,CAACT,OAAL;IACH;;IACD,IAAIS,IAAI,CAACmB,QAAT,EAAmB;MACfnB,IAAI,CAACmB,QAAL,CAAcoC,eAAd;IACH;EACJ,CAbD;EAcA;AACJ;AACA;AACA;AACA;AACA;;;EACI5H,OAAO,CAACoD,SAAR,CAAkByC,WAAlB,GAAgC,UAAUxB,IAAV,EAAgB;IAC5C,IAAIzE,KAAK,GAAG,IAAZ,CAD4C,CAE5C;;;IACA,IAAIyE,IAAI,YAAY1F,YAApB,EAAkC;MAC9B,KAAKkJ,UAAL,CAAgBC,SAAhB,CAA0BzD,IAA1B;IACH;;IACD,IAAImB,QAAQ,GAAGnB,IAAI,CAACmB,QAApB;IACAA,QAAQ,CAACuC,aAAT,CAAuB5F,MAAvB,GAAgC,KAAKN,aAArC;IACA2D,QAAQ,CAACuC,aAAT,CAAuBJ,MAAvB;IACAnC,QAAQ,CAACwC,cAAT,CAAwB7F,MAAxB,GAAiC,KAAKN,aAAtC;IACA2D,QAAQ,CAACwC,cAAT,CAAwBpE,OAAxB;IACA4B,QAAQ,CAACwC,cAAT,CAAwBnH,MAAxB,GAAiC,EAAjC;IACAwD,IAAI,CAAC4D,WAAL,CAAiB,IAAIpJ,QAAJ,CAAa,YAAY;MACtCe,KAAK,CAACsI,SAAN,CAAgBC,WAAhB,CAA4B9D,IAA5B;IACH,CAFgB,CAAjB;IAGAmB,QAAQ,CAACpD,gBAAT,CAA0BD,MAA1B,GAAmC,KAAKU,oBAAxC;;IACA,KAAKuF,UAAL,CAAgBC,IAAhB,CAAqBhE,IAAI,CAAC/C,MAAL,CAAYC,EAAZ,CAAe,iBAAf,EAAkC,YAAY;MAC/D,IAAI+G,KAAK,GAAGjJ,MAAM,CAACkJ,mBAAP,CAA2B;QAAEC,CAAC,EAAE,CAAL;QAAQC,CAAC,EAAE;MAAX,CAA3B,EAA2CpE,IAA3C,EAAiDzE,KAAK,CAACiD,oBAAvD,CAAZ;;MACA,IAAIwB,IAAI,CAACmB,QAAL,YAAyB9G,aAA7B,EAA4C;QACxC8G,QAAQ,CAACpD,gBAAT,CAA0BqG,CAA1B,GAA8BH,KAAK,CAACG,CAApC;MACH;;MACD,IAAIpE,IAAI,CAACmB,QAAL,YAAyB/G,aAA7B,EAA4C;QACxC+G,QAAQ,CAACpD,gBAAT,CAA0BoG,CAA1B,GAA8BF,KAAK,CAACE,CAApC;MACH;IACJ,CARoB,EAQlBE,SARkB,EAQP,KARO,CAArB;;IASA,KAAK7G,aAAL,CAAmBP,MAAnB,CAA0BC,EAA1B,CAA6B,gBAA7B,EAA+C,YAAY;MACvD,IAAI3B,KAAK,CAAC+I,MAAV,EAAkB;QACdtE,IAAI,CAACuE,mBAAL;;QACAhJ,KAAK,CAACiJ,iBAAN;MACH;IACJ,CALD,EAKGxE,IALH,EAKS,KALT;EAMH,CA/BD;EAgCA;AACJ;AACA;AACA;;;EACIrE,OAAO,CAACoD,SAAR,CAAkByF,iBAAlB,GAAsC,YAAY;IAC9C,IAAIxJ,MAAM,CAACyJ,IAAP,EAAJ,EAAmB;MACf,KAAK9F,MAAL,CAAYC,IAAZ,CAAiB,UAAUD,MAAV,EAAkB;QAC/B,IAAIa,IAAI,GAAGb,MAAM,CAAC+F,aAAP,CAAqBlF,IAAhC;QACAb,MAAM,CAAC+F,aAAP,CAAqBlF,IAArB,GAA4B6E,SAA5B;QACA1F,MAAM,CAAC+F,aAAP,CAAqBlF,IAArB,GAA4BA,IAA5B;MACH,CAJD;IAKH;EACJ,CARD;;EASA7D,OAAO,CAACoD,SAAR,CAAkB4F,mBAAlB,GAAwC,UAAUhE,KAAV,EAAiB;IACrD,IAAIhC,MAAM,GAAGgC,KAAK,CAACiE,QAAnB;;IACA,IAAIjG,MAAJ,EAAY;MACR,IAAIA,MAAM,CAACkG,KAAX,EAAkB;QACdlG,MAAM,CAACkG,KAAP,CAAalG,MAAb,CAAoBmF,WAApB,CAAgCnF,MAAhC;QACAA,MAAM,CAACkG,KAAP,CAAaC,uBAAb;MACH;;MACD,IAAInG,MAAM,CAACoG,KAAX,EAAkB;QACdpG,MAAM,CAACoG,KAAP,CAAapG,MAAb,CAAoBmF,WAApB,CAAgCnF,MAAhC;QACAA,MAAM,CAACoG,KAAP,CAAaD,uBAAb;MACH,CARO,CASR;;;MACA,KAAKnG,MAAL,CAAYC,IAAZ,CAAiB,UAAUD,MAAV,EAAkB;QAC/BA,MAAM,CAACqG,aAAP;MACH,CAFD;IAGH;;IACD1J,MAAM,CAACyD,SAAP,CAAiB4F,mBAAjB,CAAqCnJ,IAArC,CAA0C,IAA1C,EAAgDmF,KAAhD;EACH,CAjBD;;EAkBAsE,MAAM,CAACC,cAAP,CAAsBvJ,OAAO,CAACoD,SAA9B,EAAyC,OAAzC,EAAkD;IAC9C;AACR;AACA;AACA;AACA;IACQoG,GAAG,EAAE,YAAY;MACb,IAAI,CAAC,KAAKC,MAAV,EAAkB;QACd,KAAKA,MAAL,GAAc,IAAIrL,IAAJ,EAAd;;QACA,KAAKqL,MAAL,CAAYnI,MAAZ,CAAmBC,EAAnB,CAAsB,UAAtB,EAAkC,KAAK8D,YAAvC,EAAqD,IAArD,EAA2D,KAA3D;;QACA,KAAKoE,MAAL,CAAYnI,MAAZ,CAAmBC,EAAnB,CAAsB,SAAtB,EAAiC,KAAKmI,iBAAtC,EAAyD,IAAzD,EAA+D,KAA/D;;QACA,KAAKtB,UAAL,CAAgBC,IAAhB,CAAqB,IAAIhK,YAAJ,CAAiB,KAAKoL,MAAtB,EAA8B,KAA9B,CAArB;MACH;;MACD,OAAO,KAAKA,MAAZ;IACH,CAd6C;IAe9CE,UAAU,EAAE,IAfkC;IAgB9CC,YAAY,EAAE;EAhBgC,CAAlD;EAkBA;AACJ;AACA;;EACI5J,OAAO,CAACoD,SAAR,CAAkBsG,iBAAlB,GAAsC,UAAU1E,KAAV,EAAiB;IACnD,IAAIX,IAAI,GAAGW,KAAK,CAACiE,QAAjB;IACA,KAAKf,SAAL,CAAeC,WAAf,CAA2B9D,IAA3B,EAFmD,CAEjB;;IAClC,IAAIA,IAAI,CAACwF,WAAT,EAAsB;MAClBxF,IAAI,CAACyF,OAAL;IACH;EACJ,CAND;;EAOAR,MAAM,CAACC,cAAP,CAAsBvJ,OAAO,CAACoD,SAA9B,EAAyC,OAAzC,EAAkD;IAC9C;AACR;AACA;AACA;AACA;IACQoG,GAAG,EAAE,YAAY;MACb,IAAI,CAAC,KAAKO,MAAV,EAAkB;QACd,KAAKA,MAAL,GAAc,IAAI3L,IAAJ,EAAd;;QACA,KAAK2L,MAAL,CAAYzI,MAAZ,CAAmBC,EAAnB,CAAsB,UAAtB,EAAkC,KAAKuE,YAAvC,EAAqD,IAArD,EAA2D,KAA3D;;QACA,KAAKiE,MAAL,CAAYzI,MAAZ,CAAmBC,EAAnB,CAAsB,SAAtB,EAAiC,KAAKmI,iBAAtC,EAAyD,IAAzD,EAA+D,KAA/D;;QACA,KAAKtB,UAAL,CAAgBC,IAAhB,CAAqB,IAAIhK,YAAJ,CAAiB,KAAK0L,MAAtB,EAA8B,KAA9B,CAArB;MACH;;MACD,OAAO,KAAKA,MAAZ;IACH,CAd6C;IAe9CJ,UAAU,EAAE,IAfkC;IAgB9CC,YAAY,EAAE;EAhBgC,CAAlD;EAkBA;AACJ;AACA;AACA;AACA;AACA;AACA;;EACI5J,OAAO,CAACoD,SAAR,CAAkB4G,iBAAlB,GAAsC,UAAUhF,KAAV,EAAiB;IACnD,IAAI;MACArF,MAAM,CAACyD,SAAP,CAAiB4G,iBAAjB,CAAmCnK,IAAnC,CAAwC,IAAxC,EAA8CmF,KAA9C;;MACA,IAAIhC,MAAM,GAAGgC,KAAK,CAACM,QAAnB;;MACA,IAAI,KAAKlB,KAAL,CAAW6F,MAAX,IAAqB,CAArB,IAA0B,KAAK1F,KAAL,CAAW0F,MAAX,IAAqB,CAAnD,EAAsD;QAClDjL,QAAQ,CAACkL,2BAAT,CAAqClH,MAArC;QACAA,MAAM,CAACmH,WAAP,GAAqB,KAArB;MACH;;MACD9K,MAAM,CAAC+K,IAAP,CAAYpH,MAAM,CAACkG,KAAnB,EAPA,CAO2B;;MAC3B7J,MAAM,CAAC+K,IAAP,CAAYpH,MAAM,CAACoG,KAAnB,EARA,CAQ2B;;MAC3BpG,MAAM,CAAC5C,WAAP,GAAqB4C,MAAM,CAAC5C,WAA5B;;MACA,IAAI4C,MAAM,CAACqH,IAAP,IAAe3B,SAAnB,EAA8B;QAC1B,IAAI,KAAK4B,QAAT,EAAmB;UACf,IAAI,CAAClL,KAAK,CAACmE,QAAN,CAAeP,MAAM,CAACuH,MAAtB,CAAL,EAAoC;YAChCvH,MAAM,CAACuH,MAAP,GAAgB,KAAKC,MAAL,CAAYC,IAAZ,EAAhB;UACH;;UACDzH,MAAM,CAACqH,IAAP,GAAc,KAAKC,QAAL,CAAcG,IAAd,EAAd;;UACA,IAAIrL,KAAK,CAACmE,QAAN,CAAeP,MAAM,CAACpB,WAAtB,CAAJ,EAAwC;YACpCoB,MAAM,CAACqH,IAAP,CAAYK,iBAAZ,GAAgC1H,MAAM,CAACpB,WAAvC;UACH;;UACD,IAAIoB,MAAM,CAACuH,MAAP,YAAyBjM,KAA7B,EAAoC;YAChC0E,MAAM,CAACqH,IAAP,CAAYE,MAAZ,GAAqBvH,MAAM,CAACuH,MAA5B;YACAvH,MAAM,CAACqH,IAAP,CAAYA,IAAZ,GAAmBrH,MAAM,CAACuH,MAA1B;UACH;QACJ,CAZD,MAaK;UACDvH,MAAM,CAACqH,IAAP,GAAc,KAAKG,MAAL,CAAYC,IAAZ,EAAd;QACH;MACJ;;MACD,IAAI,CAACrL,KAAK,CAACmE,QAAN,CAAeP,MAAM,CAACuH,MAAtB,CAAL,EAAoC;QAChCvH,MAAM,CAACuH,MAAP,GAAgBvH,MAAM,CAACqH,IAAvB;MACH;IACJ,CA/BD,CAgCA,OAAOM,CAAP,EAAU;MACN,KAAKC,kBAAL,CAAwBD,CAAxB;IACH;EACJ,CApCD;;EAqCArB,MAAM,CAACC,cAAP,CAAsBvJ,OAAO,CAACoD,SAA9B,EAAyC,QAAzC,EAAmD;IAC/C;AACR;AACA;IACQoG,GAAG,EAAE,YAAY;MACb,OAAO,KAAKqB,OAAZ;IACH,CAN8C;;IAO/C;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUC,MAAV,EAAkB;MACnB,IAAI,KAAKF,OAAL,IAAgBE,MAApB,EAA4B;QACxB,IAAI,KAAKF,OAAT,EAAkB;UACd,KAAKG,aAAL,CAAmB,KAAKH,OAAxB;QACH;;QACD,KAAKA,OAAL,GAAeE,MAAf;;QACA,IAAIA,MAAJ,EAAY;UACR;UACA,KAAK3C,UAAL,CAAgBC,IAAhB,CAAqB0C,MAArB;;UACAA,MAAM,CAACxF,KAAP,GAAe,IAAf;UACAwF,MAAM,CAACpK,WAAP,GAAqB,KAArB;UACAoK,MAAM,CAAC5I,MAAP,GAAgB,KAAKJ,gBAArB;UACAgJ,MAAM,CAACzJ,MAAP,CAAcC,EAAd,CAAiB,uBAAjB,EAA0C,KAAK0J,0BAA/C,EAA2E,IAA3E,EAAiF,KAAjF;UACAF,MAAM,CAACzJ,MAAP,CAAcC,EAAd,CAAiB,aAAjB,EAAgC,KAAK2J,qBAArC,EAA4D,IAA5D,EAAkE,KAAlE;UACAH,MAAM,CAACzJ,MAAP,CAAcC,EAAd,CAAiB,WAAjB,EAA8B,KAAK4J,mBAAnC,EAAwD,IAAxD,EAA8D,KAA9D;UACAJ,MAAM,CAACzJ,MAAP,CAAcC,EAAd,CAAiB,YAAjB,EAA+B,KAAK6J,oBAApC,EAA0D,IAA1D,EAAgE,KAAhE;UACAL,MAAM,CAACzJ,MAAP,CAAcC,EAAd,CAAiB,SAAjB,EAA4B,KAAK8J,mBAAjC,EAAsD,IAAtD,EAA4D,KAA5D;UACAN,MAAM,CAACzJ,MAAP,CAAcC,EAAd,CAAiB,UAAjB,EAA6B,KAAK+J,kBAAlC,EAAsD,IAAtD,EAA4D,KAA5D;UACAP,MAAM,CAACzJ,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqC,KAAKgK,oBAA1C,EAAgE,IAAhE,EAAsE,KAAtE;UACAR,MAAM,CAACzJ,MAAP,CAAcC,EAAd,CAAiB,QAAjB,EAA2B,KAAKiK,gBAAhC,EAAkD,IAAlD,EAAwD,KAAxD;UACAT,MAAM,CAAClK,MAAP,GAAgB2B,MAAM,CAACC,gBAAP,GAA0B,CAA1C;;UACA,IAAI,KAAKgJ,aAAT,EAAwB;YACpB;YACA,KAAKC,gBAAL,CAAsB,KAAKD,aAA3B;UACH;QACJ;MACJ;IACJ,CAvC8C;IAwC/C9B,UAAU,EAAE,IAxCmC;IAyC/CC,YAAY,EAAE;EAzCiC,CAAnD;EA2CA;AACJ;AACA;AACA;AACA;AACA;;EACI5J,OAAO,CAACoD,SAAR,CAAkB6H,0BAAlB,GAA+C,YAAY;IACvD,IAAIF,MAAM,GAAG,KAAKA,MAAlB;;IACA,IAAIA,MAAM,CAACY,OAAP,IAAkB,CAACZ,MAAM,CAACa,QAA9B,EAAwC;MACpC,IAAIC,WAAW,GAAG,KAAKd,MAAL,CAAYe,SAA9B;MACA,IAAIC,WAAW,GAAG,KAAKhB,MAAL,CAAYiB,SAA9B;MACA,KAAKC,iBAAL,CAAuB;QACnBzD,CAAC,EAAEqD,WADgB;QAEnBpD,CAAC,EAAEsD;MAFgB,CAAvB;MAIA,IAAIG,YAAY,GAAG,EAAnB;MACA,IAAIC,YAAY,GAAGpB,MAAM,CAACoB,YAA1B;;MACA,IAAIA,YAAY,IAAI,CAACpB,MAAM,CAACqB,SAA5B,EAAuC;QACnC,IAAID,YAAY,YAAYvN,QAA5B,EAAsC;UAClCuN,YAAY,GAAG,CAACA,YAAD,CAAf;QACH;;QACD,IAAIE,WAAW,GAAG,EAAlB;QACA/M,MAAM,CAAC2D,IAAP,CAAYkJ,YAAZ,EAA0B,UAAUG,SAAV,EAAqB;UAC3C,IAAI,CAACA,SAAS,CAACC,QAAX,IAAuB,CAACD,SAAS,CAACV,QAAtC,EAAgD;YAC5C,IAAI1C,KAAK,GAAGoD,SAAS,CAACpD,KAAtB;YACA,IAAIE,KAAK,GAAGkD,SAAS,CAAClD,KAAtB;;YACA,IAAIF,KAAK,YAAY3K,SAAjB,IAA8B,EAAE2K,KAAK,YAAY1K,QAAnB,CAA9B,IAA8D4K,KAAK,YAAY7K,SAA/E,IAA4F,EAAE6K,KAAK,YAAY5K,QAAnB,CAAhG,EAA8H;cAC1H8N,SAAS,CAACE,SAAV,CAAoBvJ,IAApB,CAAyB,UAAUwJ,QAAV,EAAoB;gBACzCJ,WAAW,CAAChE,IAAZ,CAAiBoE,QAAjB;cACH,CAFD;cAGAnN,MAAM,CAACoN,IAAP,CAAYR,YAAZ,EAA0BI,SAAS,CAAClD,KAApC;cACA9J,MAAM,CAACoN,IAAP,CAAYR,YAAZ,EAA0BI,SAAS,CAACpD,KAApC;YACH,CAND,MAOK;cACD,IAAIoD,SAAS,CAACK,QAAV,IAAsBL,SAAS,CAACpD,KAApC,EAA2C;gBACvC5J,MAAM,CAACoN,IAAP,CAAYR,YAAZ,EAA0BI,SAAS,CAAClD,KAApC;gBACAiD,WAAW,CAAChE,IAAZ,CAAiBa,KAAK,CAAC0D,iBAAN,CAAwBN,SAAxB,EAAmCpD,KAAK,CAAC2D,cAAN,CAAqBhB,WAArB,CAAnC,EAAsE,IAAtE,CAAjB;cACH;;cACD,IAAIS,SAAS,CAACK,QAAV,IAAsBL,SAAS,CAAClD,KAApC,EAA2C;gBACvC9J,MAAM,CAACoN,IAAP,CAAYR,YAAZ,EAA0BI,SAAS,CAACpD,KAApC;gBACAmD,WAAW,CAAChE,IAAZ,CAAiBe,KAAK,CAACwD,iBAAN,CAAwBN,SAAxB,EAAmClD,KAAK,CAACyD,cAAN,CAAqBd,WAArB,CAAnC,EAAsE,IAAtE,CAAjB;cACH;YACJ;UACJ;QACJ,CAtBD;QAuBA,IAAIe,iBAAiB,GAAG,KAAKC,UAAL,CAAgBV,WAAhB,EAA6BR,WAA7B,EAA0CE,WAA1C,CAAxB;;QACA,IAAIe,iBAAJ,EAAuB;UACnB,KAAK9J,MAAL,CAAYC,IAAZ,CAAiB,UAAUD,MAAV,EAAkB;YAC/B,IAAIgK,aAAa,GAAGF,iBAAiB,CAACG,SAAtC;;YACA,IAAIjK,MAAM,IAAIgK,aAAd,EAA6B;cACzBhK,MAAM,CAACkK,WAAP;;cACA,IAAIlK,MAAM,CAACkG,KAAP,IAAgB8D,aAAa,CAAC9D,KAAlC,EAAyC;gBACrClG,MAAM,CAACkG,KAAP,CAAagE,WAAb;gBACAhB,YAAY,CAAC7D,IAAb,CAAkBrF,MAAM,CAACkG,KAAzB;cACH;;cACD,IAAIlG,MAAM,CAACoG,KAAP,IAAgB4D,aAAa,CAAC5D,KAAlC,EAAyC;gBACrCpG,MAAM,CAACoG,KAAP,CAAa8D,WAAb;gBACAhB,YAAY,CAAC7D,IAAb,CAAkBrF,MAAM,CAACoG,KAAzB;cACH;YACJ;UACJ,CAbD;UAcA0D,iBAAiB,CAACG,SAAlB,CAA4BE,qBAA5B,CAAkDL,iBAAlD;UACA/B,MAAM,CAACqC,UAAP,CAAkBN,iBAAiB,CAACG,SAApC;QACH;MACJ,CAxDmC,CAyDpC;;;MACA,KAAK9M,aAAL,GAAqB,EAArB;;MACA,IAAI,KAAKkN,gBAAL,IAAyBxB,WAA7B,EAA0C;QACtC,KAAKyB,eAAL,CAAqB,KAAKlJ,KAA1B,EAAiCyH,WAAjC,EAA8CK,YAA9C;MACH;;MACD,IAAI,KAAKqB,gBAAL,IAAyBxB,WAA7B,EAA0C;QACtC,KAAKuB,eAAL,CAAqB,KAAK/I,KAA1B,EAAiCwH,WAAjC,EAA8CG,YAA9C;MACH;;MACD,IAAI,KAAK7L,eAAT,EAA0B;QACtB,KAAKmN,kBAAL,CAAwB,KAAKrN,aAA7B;MACH;;MACD,IAAI,KAAKsN,MAAT,EAAiB;QACb,KAAKA,MAAL,CAAYC,SAAZ;MACH;IACJ;EACJ,CA1ED;EA2EA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI1N,OAAO,CAACoD,SAAR,CAAkB2J,UAAlB,GAA+B,UAAUP,SAAV,EAAqBV,SAArB,EAAgCE,SAAhC,EAA2C;IACtE,IAAI2B,WAAW,GAAGC,QAAlB;IACA,IAAIC,eAAJ;IACAvO,MAAM,CAACiH,YAAP,CAAoBiG,SAApB,EAA+B,UAAUC,QAAV,EAAoB;MAC/C,IAAIA,QAAJ,EAAc;QACV,IAAIvD,KAAK,GAAGuD,QAAQ,CAACQ,SAAT,CAAmB/D,KAA/B;QACA,IAAIE,KAAK,GAAGqD,QAAQ,CAACQ,SAAT,CAAmB7D,KAA/B;QACA,IAAI0E,IAAI,GAAG5E,KAAK,CAAC6E,oBAAN,CAA2B7E,KAAK,CAAC8E,gBAAN,CAAuB9E,KAAK,CAAC2D,cAAN,CAAqBf,SAArB,CAAvB,CAA3B,CAAX;QACA,IAAImC,IAAI,GAAG7E,KAAK,CAAC2E,oBAAN,CAA2B3E,KAAK,CAAC4E,gBAAN,CAAuB5E,KAAK,CAACyD,cAAN,CAAqBb,SAArB,CAAvB,CAA3B,CAAX;QACA,IAAIkC,MAAM,GAAGzB,QAAQ,CAACQ,SAAT,CAAmBiB,MAAhC;QACA,IAAIC,MAAM,GAAG1B,QAAQ,CAACQ,SAAT,CAAmBkB,MAAhC;;QACA,IAAIjF,KAAK,YAAY3K,SAAjB,IAA8B,CAACa,KAAK,CAACqI,QAAN,CAAegF,QAAQ,CAAC2B,QAAT,CAAkBF,MAAlB,CAAf,CAAnC,EAA8E;UAC1E,OAAO,IAAP;QACH;;QACD,IAAI9E,KAAK,YAAY7K,SAAjB,IAA8B,CAACa,KAAK,CAACqI,QAAN,CAAegF,QAAQ,CAAC2B,QAAT,CAAkBD,MAAlB,CAAf,CAAnC,EAA8E;UAC1E,OAAO,IAAP;QACH;;QACD,IAAIE,UAAU,GAAGnF,KAAK,CAAC6E,oBAAN,CAA2B7E,KAAK,CAAC8E,gBAAN,CAAuB9E,KAAK,CAACoF,YAAN,CAAmB7B,QAAnB,EAA6ByB,MAA7B,EAAqCzB,QAAQ,CAAC8B,SAAT,CAAmBL,MAAnB,CAArC,EAAiE,QAAjE,CAAvB,CAA3B,CAAjB;QACA,IAAIM,UAAU,GAAGpF,KAAK,CAAC2E,oBAAN,CAA2B3E,KAAK,CAAC4E,gBAAN,CAAuB5E,KAAK,CAACqF,YAAN,CAAmBhC,QAAnB,EAA6B0B,MAA7B,EAAqC1B,QAAQ,CAAC8B,SAAT,CAAmBJ,MAAnB,CAArC,EAAiE,QAAjE,CAAvB,CAA3B,CAAjB;QACA,IAAIO,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASf,IAAI,GAAGO,UAAhB,EAA4B,CAA5B,IAAiCM,IAAI,CAACE,GAAL,CAASZ,IAAI,GAAGO,UAAhB,EAA4B,CAA5B,CAA3C,CAAf;;QACA,IAAIE,QAAQ,GAAGf,WAAf,EAA4B;UACxBA,WAAW,GAAGe,QAAd;UACAb,eAAe,GAAGpB,QAAlB;QACH;;QACD,OAAO,IAAP;MACH;IACJ,CAvBD;IAwBA,OAAOoB,eAAP;EACH,CA5BD;EA6BA;AACJ;AACA;AACA;AACA;;;EACI7N,OAAO,CAACoD,SAAR,CAAkBoI,gBAAlB,GAAqC,YAAY;IAC7C,KAAKsD,iBAAL,CAAuB,KAAK1K,KAA5B;IACA,KAAK0K,iBAAL,CAAuB,KAAKvK,KAA5B;IACA,KAAKuK,iBAAL,CAAuB,KAAK9L,MAA5B;IACA,KAAKqK,gBAAL,GAAwB3E,SAAxB;IACA,KAAK6E,gBAAL,GAAwB7E,SAAxB;IACA,KAAK5E,kBAAL;EACH,CAPD;EAQA;AACJ;AACA;AACA;AACA;;;EACI9D,OAAO,CAACoD,SAAR,CAAkBU,kBAAlB,GAAuC,YAAY;IAC/C3E,KAAK,CAAC8D,IAAN,CAAW,KAAKD,MAAL,CAAYgB,QAAZ,EAAX,EAAmC,UAAUhB,MAAV,EAAkB;MACjDA,MAAM,CAAC+L,iBAAP;IACH,CAFD;EAGH,CAJD;EAKA;AACJ;AACA;AACA;AACA;AACA;;;EACI/O,OAAO,CAACoD,SAAR,CAAkB0L,iBAAlB,GAAsC,UAAUE,OAAV,EAAmB;IACrD7P,KAAK,CAAC8D,IAAN,CAAW+L,OAAO,CAAChL,QAAR,EAAX,EAA+B,UAAUiL,MAAV,EAAkB;MAC7C,IAAIA,MAAM,CAACC,oBAAX,EAAiC;QAC7BD,MAAM,CAAC/B,WAAP,CAAmB,CAAnB;MACH;IACJ,CAJD;EAKH,CAND;EAOA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIlN,OAAO,CAACoD,SAAR,CAAkB6I,iBAAlB,GAAsC,UAAUkD,QAAV,EAAoB;IACtD,IAAIvP,KAAK,GAAG,IAAZ;;IACA,IAAI,CAACuP,QAAL,EAAe;MACX,KAAKnM,MAAL,CAAYC,IAAZ,CAAiB,UAAUD,MAAV,EAAkB;QAC/BA,MAAM,CAACkK,WAAP;MACH,CAFD;MAGA;IACH;;IACD,IAAIkC,YAAY,GAAG,EAAnB;IACA,KAAKpM,MAAL,CAAYC,IAAZ,CAAiB,UAAUD,MAAV,EAAkB;MAC/B;MACA,IAAKA,MAAM,CAACkG,KAAP,YAAwB1K,QAAxB,IAAoCwE,MAAM,CAACkG,KAAP,CAAamG,WAAlD,IAAmErM,MAAM,CAACoG,KAAP,YAAwB5K,QAAxB,IAAoCwE,MAAM,CAACoG,KAAP,CAAaiG,WAAxH,EAAsI,CAClI;MACH,CAFD,MAGK;QACD,IAAI/G,KAAK,GAAGtF,MAAM,CAACsM,qBAAP,CAA6BH,QAAQ,CAAC3G,CAAtC,EAAyC2G,QAAQ,CAAC1G,CAAlD,CAAZ;;QACA,IAAIH,KAAJ,EAAW;UACPtF,MAAM,CAACuM,OAAP,CAAeC,SAAf,CAAyBnQ,MAAM,CAACoQ,eAAP,CAAuB;YAAEjH,CAAC,EAAE,CAAL;YAAQC,CAAC,EAAE,CAAX;YAAc7H,KAAK,EAAEhB,KAAK,CAAC8P,UAA3B;YAAuC1O,MAAM,EAAEpB,KAAK,CAAC+P;UAArD,CAAvB,EAA2F/P,KAA3F,CAAzB;UACAwP,YAAY,CAAC/G,IAAb,CAAkB;YAAErF,MAAM,EAAEA,MAAV;YAAkBsF,KAAK,EAAEA;UAAzB,CAAlB;QACH;MACJ,CAX8B,CAY/B;;IACH,CAbD;;IAcA,IAAI,KAAKjI,eAAT,EAA0B;MACtB,KAAKmN,kBAAL,CAAwB4B,YAAxB;IACH;EACJ,CA1BD;EA2BA;AACJ;AACA;;;EACIpP,OAAO,CAACoD,SAAR,CAAkBoK,kBAAlB,GAAuC,UAAU4B,YAAV,EAAwB;IAC3D,IAAIA,YAAY,CAACnF,MAAb,GAAsB,CAA1B,EAA6B;MACzB,IAAI2F,QAAQ,GAAG,KAAK7E,MAApB;;MACA,IAAI6E,QAAQ,IAAIxQ,KAAK,CAACqI,QAAN,CAAemI,QAAQ,CAACC,kBAAxB,CAAhB,EAA6D;QACzD,IAAIC,aAAa,GAAGzQ,MAAM,CAAC0Q,gBAAP,CAAwB;UAAEvH,CAAC,EAAEoH,QAAQ,CAACtH,KAAT,CAAeE,CAApB;UAAuBC,CAAC,EAAEmH,QAAQ,CAACtH,KAAT,CAAeG;QAAzC,CAAxB,EAAsEmH,QAAtE,CAApB;QACA,IAAII,eAAJ;QACA,IAAIC,cAAJ;QACA,IAAIC,kBAAkB,GAAGtC,QAAzB;QACAtO,MAAM,CAAC2D,IAAP,CAAYmM,YAAZ,EAA0B,UAAUe,WAAV,EAAuB;UAC7C,IAAInN,MAAM,GAAGmN,WAAW,CAACnN,MAAzB;UACA,IAAIoN,UAAU,GAAGD,WAAW,CAAC7H,KAA7B;;UACA,IAAI8H,UAAJ,EAAgB;YACZ,IAAI9H,KAAK,GAAG;cAAEE,CAAC,EAAE4H,UAAU,CAAC5H,CAAhB;cAAmBC,CAAC,EAAE2H,UAAU,CAAC3H;YAAjC,CAAZ;YACA,IAAIiG,QAAQ,GAAGC,IAAI,CAAC0B,GAAL,CAASnR,KAAK,CAACoR,WAAN,CAAkBhI,KAAlB,EAAyBwH,aAAzB,CAAT,CAAf;;YACA,IAAIpB,QAAQ,GAAGwB,kBAAf,EAAmC;cAC/BD,cAAc,GAAG3H,KAAjB;cACA4H,kBAAkB,GAAGxB,QAArB;cACAsB,eAAe,GAAGhN,MAAlB;YACH;UACJ;QACJ,CAZD;QAaA,IAAIuN,iBAAiB,GAAG,EAAxB;;QACA,IAAIP,eAAJ,EAAqB;UACjB1Q,MAAM,CAAC2D,IAAP,CAAYmM,YAAZ,EAA0B,UAAUe,WAAV,EAAuB;YAC7C,IAAIxB,IAAI,CAAC0B,GAAL,CAASnR,KAAK,CAACoR,WAAN,CAAkBH,WAAW,CAAC7H,KAA9B,EAAqC2H,cAArC,CAAT,KAAkEtB,IAAI,CAAC0B,GAAL,CAAST,QAAQ,CAACC,kBAAlB,CAAtE,EAA6G;cACzGU,iBAAiB,CAAClI,IAAlB,CAAuB;gBAAErF,MAAM,EAAEmN,WAAW,CAACnN,MAAtB;gBAA8BsF,KAAK,EAAE6H,WAAW,CAAC7H;cAAjD,CAAvB;YACH,CAFD,MAGK;cACD,IAAIkI,eAAe,GAAGL,WAAW,CAACnN,MAAZ,CAAmBwN,eAAzC;;cACA,IAAIA,eAAJ,EAAqB;gBACjBlR,MAAM,CAAC2D,IAAP,CAAYuN,eAAe,CAACxB,OAA5B,EAAqC,UAAUC,MAAV,EAAkB;kBACnDA,MAAM,CAACwB,OAAP,GAAiB,KAAjB;kBACAxB,MAAM,CAACyB,aAAP,GAFmD,CAE3B;gBAC3B,CAHD;cAIH;;cACDP,WAAW,CAACnN,MAAZ,CAAmBkK,WAAnB,CAA+B,CAA/B;YACH;UACJ,CAdD;;UAeA,IAAI0C,QAAQ,CAACC,kBAAT,GAA8B,CAAlC,EAAqC;YACjC,IAAIU,iBAAiB,CAACtG,MAAlB,GAA2B,CAA/B,EAAkC;cAC9B3K,MAAM,CAAC2D,IAAP,CAAYsN,iBAAZ,EAA+B,UAAUI,EAAV,EAAc;gBACzC,IAAIX,eAAe,IAAIW,EAAE,CAAC3N,MAA1B,EAAkC;kBAC9B2N,EAAE,CAAC3N,MAAH,CAAUkK,WAAV,CAAsB,CAAtB;gBACH;cACJ,CAJD;YAKH;;YACDqD,iBAAiB,GAAG,CAAC;cAAEvN,MAAM,EAAEgN,eAAV;cAA2B1H,KAAK,EAAE2H;YAAlC,CAAD,CAApB;UACH;QACJ;;QACDb,YAAY,GAAGmB,iBAAf;MACH;;MACD,IAAIK,SAAS,GAAGvR,MAAM,CAAC0Q,gBAAP,CAAwB;QAAEvH,CAAC,EAAE,CAAC,GAAN;QAAWC,CAAC,EAAE,CAAC;MAAf,CAAxB,EAA8C,KAAK5G,aAAnD,CAAhB;MACA,IAAIgP,aAAa,GAAGxR,MAAM,CAAC0Q,gBAAP,CAAwB;QAAEvH,CAAC,EAAE,KAAK3G,aAAL,CAAmB6N,UAAnB,GAAgC,GAArC;QAA0CjH,CAAC,EAAE,KAAK5G,aAAL,CAAmB8N,WAAnB,GAAiC;MAA9E,CAAxB,EAA6G,KAAK9N,aAAlH,CAApB;MACA,IAAIiP,KAAK,GAAG,CAAZ;MACA,IAAIC,sBAAsB,GAAG,EAA7B;MACAzR,MAAM,CAAC2D,IAAP,CAAYmM,YAAZ,EAA0B,UAAUe,WAAV,EAAuB;QAC7C,IAAI7H,KAAK,GAAG6H,WAAW,CAAC7H,KAAxB;;QACA,IAAIA,KAAK,IAAIpJ,KAAK,CAAC8R,aAAN,CAAoB1I,KAApB,EAA2B;UAAEE,CAAC,EAAEoI,SAAS,CAACpI,CAAf;UAAkBC,CAAC,EAAEmI,SAAS,CAACnI,CAA/B;UAAkC7H,KAAK,EAAEiQ,aAAa,CAACrI,CAAd,GAAkBoI,SAAS,CAACpI,CAArE;UAAwExH,MAAM,EAAE6P,aAAa,CAACpI,CAAd,GAAkBmI,SAAS,CAACnI;QAA5G,CAA3B,CAAb,EAA0J;UACtJsI,sBAAsB,CAAC1I,IAAvB,CAA4B;YAAEC,KAAK,EAAEA,KAAT;YAAgBtF,MAAM,EAAEmN,WAAW,CAACnN;UAApC,CAA5B;UACA8N,KAAK,IAAIxI,KAAK,CAACG,CAAf;QACH;MACJ,CAND;MAOA2G,YAAY,GAAG2B,sBAAf;MACA,IAAIE,WAAW,GAAG,KAAKjO,MAAL,CAAYkO,QAAZ,CAAqB,CAArB,CAAlB;MACA,IAAI1J,QAAQ,GAAG,KAAf;;MACA,IAAIyJ,WAAW,IAAIA,WAAW,CAAC7H,KAA3B,IAAoC6H,WAAW,CAAC7H,KAAZ,CAAkB5D,QAAlB,CAA2BgC,QAAnE,EAA6E;QACzEA,QAAQ,GAAG,IAAX;MACH;;MACD,IAAIA,QAAJ,EAAc;QACV4H,YAAY,CAAC+B,IAAb,CAAkB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;UAAE,OAAO9R,OAAO,CAAC+R,KAAR,CAAcF,CAAC,CAAC9I,KAAF,CAAQG,CAAtB,EAAyB4I,CAAC,CAAC/I,KAAF,CAAQG,CAAjC,CAAP;QAA6C,CAAjF;MACH,CAFD,MAGK;QACD2G,YAAY,CAAC+B,IAAb,CAAkB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;UAAE,OAAO9R,OAAO,CAAC+R,KAAR,CAAcD,CAAC,CAAC/I,KAAF,CAAQG,CAAtB,EAAyB2I,CAAC,CAAC9I,KAAF,CAAQG,CAAjC,CAAP;QAA6C,CAAjF;QACA2G,YAAY,CAACmC,OAAb;MACH;;MACD,IAAIC,QAAQ,GAAGV,KAAK,GAAG1B,YAAY,CAACnF,MAApC;MACA,IAAIwH,IAAI,GAAGpS,MAAM,CAACqS,kBAAP,CAA0B;QAAElJ,CAAC,EAAE,CAAL;QAAQC,CAAC,EAAE;MAAX,CAA1B,EAA0C,KAAKkJ,YAAL,CAAkBC,YAA5D,EAA0EnJ,CAArF;;MACA,IAAI2G,YAAY,CAACnF,MAAb,GAAsB,CAA1B,EAA6B;QACzB,IAAI4H,KAAK,GAAGjB,SAAS,CAACnI,CAAtB;QACA,IAAIqJ,MAAM,GAAGjB,aAAa,CAACpI,CAA3B,CAFyB,CAGzB;;QACApJ,MAAM,CAAC0S,qBAAP,CAA6B;UAAEvJ,CAAC,EAAE,CAAL;UAAQC,CAAC,EAAEoJ;QAAX,CAA7B,EAAiD,IAAjD;QACA,IAAIG,OAAO,GAAG,KAAd;;QACA,IAAIR,QAAQ,GAAGK,KAAK,GAAG,CAACC,MAAM,GAAGD,KAAV,IAAmB,CAA1C,EAA6C;UACzC,IAAII,UAAU,GAAGH,MAAjB;;UACA,KAAK,IAAII,CAAC,GAAG9C,YAAY,CAACnF,MAAb,GAAsB,CAAnC,EAAsCiI,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;YAC/C,IAAIlP,MAAM,GAAGoM,YAAY,CAAC8C,CAAD,CAAZ,CAAgBlP,MAA7B;YACA,IAAIuM,OAAO,GAAGvM,MAAM,CAACuM,OAArB;YACA,IAAI4C,MAAM,GAAG/C,YAAY,CAAC8C,CAAD,CAAZ,CAAgB5J,KAAhB,CAAsBG,CAAnC;YACA8G,OAAO,CAACC,SAAR,CAAkB;cAAEhH,CAAC,EAAE,CAAL;cAAQC,CAAC,EAAE,CAACgJ,IAAZ;cAAkB7Q,KAAK,EAAE,KAAK8O,UAA9B;cAA0C1O,MAAM,EAAEiR,UAAU,GAAGR;YAA/D,CAAlB;;YACA,IAAIlC,OAAO,CAAC6C,OAAZ,EAAqB;cACjB7C,OAAO,CAAC8C,QAAR;YACH;;YACD9C,OAAO,CAAC5H,MAAR;YACAsK,UAAU,GAAG5S,MAAM,CAAC0Q,gBAAP,CAAwB;cAAEvH,CAAC,EAAE,CAAL;cAAQC,CAAC,EAAE8G,OAAO,CAAC+C,KAAR,CAAcC,MAAd,GAAuBhD,OAAO,CAACgD,MAA/B,GAAwCJ,MAAxC,GAAiD5C,OAAO,CAACiD;YAApE,CAAxB,EAA8GjD,OAA9G,EAAuH9G,CAApI;;YACA,IAAIwJ,UAAU,GAAG,CAACR,IAAlB,EAAwB;cACpBO,OAAO,GAAG,IAAV;cACA;YACH;UACJ;QACJ;;QACD,IAAIR,QAAQ,IAAIK,KAAK,GAAG,CAACC,MAAM,GAAGD,KAAV,IAAmB,CAAvC,IAA4CG,OAAhD,EAAyD;UACrD,IAAIS,KAAK,GAAGZ,KAAZ;;UACA,KAAK,IAAIK,CAAC,GAAG,CAAR,EAAWQ,GAAG,GAAGtD,YAAY,CAACnF,MAAnC,EAA2CiI,CAAC,GAAGQ,GAA/C,EAAoDR,CAAC,EAArD,EAAyD;YACrD,IAAIlP,MAAM,GAAGoM,YAAY,CAAC8C,CAAD,CAAZ,CAAgBlP,MAA7B;YACA,IAAImP,MAAM,GAAG/C,YAAY,CAAC8C,CAAD,CAAZ,CAAgB5J,KAAhB,CAAsBG,CAAnC;YACA,IAAI8G,OAAO,GAAGvM,MAAM,CAACuM,OAArB;YACAA,OAAO,CAACC,SAAR,CAAkB;cAAEhH,CAAC,EAAE,CAAL;cAAQC,CAAC,EAAEgK,KAAX;cAAkB7R,KAAK,EAAE,KAAK8O,UAA9B;cAA0C1O,MAAM,EAAE8Q;YAAlD,CAAlB;;YACA,IAAIvC,OAAO,CAAC6C,OAAZ,EAAqB;cACjB7C,OAAO,CAAC8C,QAAR;YACH;;YACD9C,OAAO,CAAC5H,MAAR;YACA8K,KAAK,GAAGpT,MAAM,CAAC0Q,gBAAP,CAAwB;cAAEvH,CAAC,EAAE,CAAL;cAAQC,CAAC,EAAE8G,OAAO,CAAC+C,KAAR,CAAcC,MAAd,GAAuBhD,OAAO,CAAC+C,KAAR,CAAcK,cAArC,GAAsDpD,OAAO,CAACgD,MAA9D,GAAuEJ,MAAvE,GAAgF5C,OAAO,CAACqD;YAAnG,CAAxB,EAAgJrD,OAAhJ,EAAyJ9G,CAAjK;UACH;QACJ;MACJ;IACJ;EACJ,CArHD;EAsHA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIzI,OAAO,CAACoD,SAAR,CAAkBkK,eAAlB,GAAoC,UAAUnG,IAAV,EAAgBgI,QAAhB,EAA0B0D,MAA1B,EAAkC;IAClE,IAAIjT,KAAK,GAAG,IAAZ;;IACAT,KAAK,CAAC8D,IAAN,CAAWkE,IAAI,CAACnD,QAAL,EAAX,EAA4B,UAAUK,IAAV,EAAgB;MACxC,IAAI,CAACwO,MAAD,IAAWA,MAAM,CAACC,OAAP,CAAezO,IAAf,KAAwB,CAAC,CAAxC,EAA2C;QACvC,IAAIzE,KAAK,CAAC4M,SAAN,CAAgBvC,MAAhB,GAAyB,CAAzB,IAA8B5F,IAAI,CAACmI,SAAL,CAAevC,MAAf,GAAwB,CAA1D,EAA6D;UACzD5F,IAAI,CAACiL,qBAAL,CAA2BH,QAA3B;QACH;MACJ;IACJ,CAND;EAOH,CATD;EAUA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACInP,OAAO,CAACoD,SAAR,CAAkB2P,eAAlB,GAAoC,UAAU1O,IAAV,EAAgB2B,KAAhB,EAAuB;IACvD,IAAI,CAAC3B,IAAL,EAAW;MACP;IACH;;IACD,IAAIwC,KAAJ;IACA,IAAID,GAAJ;IACA,IAAIY,QAAQ,GAAGnD,IAAI,CAACmB,QAAL,CAAcgC,QAA7B;;IACA,IAAIA,QAAJ,EAAc;MACVtI,KAAK,CAAC8T,WAAN,CAAkBhN,KAAlB;MACAa,KAAK,GAAG,IAAIxC,IAAI,CAACuC,GAAjB;MACAA,GAAG,GAAG,IAAIvC,IAAI,CAACwC,KAAf;IACH,CAJD,MAKK;MACDA,KAAK,GAAGxC,IAAI,CAACwC,KAAb;MACAD,GAAG,GAAGvC,IAAI,CAACuC,GAAX;IACH;;IACD,IAAIqM,UAAU,GAAGrM,GAAG,GAAGC,KAAvB;IACA,OAAO;MACHA,KAAK,EAAEA,KAAK,GAAGb,KAAK,CAACa,KAAN,GAAcoM,UAD1B;MAEHrM,GAAG,EAAEC,KAAK,GAAGb,KAAK,CAACY,GAAN,GAAYqM;IAFtB,CAAP;EAIH,CArBD;EAsBA;AACJ;AACA;AACA;AACA;AACA;;;EACIjT,OAAO,CAACoD,SAAR,CAAkB+H,mBAAlB,GAAwC,UAAUnG,KAAV,EAAiB;IACrD,IAAI+F,MAAM,GAAG,KAAKA,MAAlB;IACA,IAAImI,QAAQ,GAAGnI,MAAM,CAACmI,QAAtB;;IACA,IAAIA,QAAQ,IAAI,OAAZ,IAAuBA,QAAQ,IAAI,QAAvC,EAAiD;MAC7C,IAAIC,MAAM,GAAGpI,MAAM,CAACoI,MAApB;;MACA,IAAIA,MAAM,IAAI,KAAK/O,KAAL,CAAW6F,MAAX,GAAoB,CAAlC,EAAqC;QACjCkJ,MAAM,GAAG,KAAKJ,eAAL,CAAqB,KAAK3O,KAAL,CAAW8M,QAAX,CAAoB,CAApB,CAArB,EAA6CiC,MAA7C,CAAT;QACAA,MAAM,CAACC,QAAP,GAAkB,OAAlB;QACA,KAAKjN,QAAL,CAAc,KAAK/B,KAAnB,EAA0B+O,MAA1B;MACH;IACJ;;IACD,IAAID,QAAQ,IAAI,OAAZ,IAAuBA,QAAQ,IAAI,QAAvC,EAAiD;MAC7C,IAAIG,MAAM,GAAGtI,MAAM,CAACsI,MAApB;;MACA,IAAIA,MAAM,IAAI,KAAK9O,KAAL,CAAW0F,MAAX,GAAoB,CAAlC,EAAqC;QACjCoJ,MAAM,GAAG,KAAKN,eAAL,CAAqB,KAAKxO,KAAL,CAAW2M,QAAX,CAAoB,CAApB,CAArB,EAA6CmC,MAA7C,CAAT;QACAA,MAAM,CAACD,QAAP,GAAkB,OAAlB;QACA,KAAKjN,QAAL,CAAc,KAAK5B,KAAnB,EAA0B8O,MAA1B;MACH;IACJ;;IACD,KAAK7H,gBAAL;EACH,CApBD;EAqBA;AACJ;AACA;AACA;AACA;;;EACIxL,OAAO,CAACoD,SAAR,CAAkBgI,oBAAlB,GAAyC,UAAUpG,KAAV,EAAiB;IACtD,IAAIkE,KAAK,GAAG,KAAK9E,KAAL,CAAW8M,QAAX,CAAoB,CAApB,CAAZ;;IACA,IAAIhI,KAAJ,EAAW;MACP,KAAKoK,eAAL,GAAuB;QAAEzM,KAAK,EAAEqC,KAAK,CAACrC,KAAf;QAAsBD,GAAG,EAAEsC,KAAK,CAACtC;MAAjC,CAAvB;;MACA,IAAIsC,KAAK,CAAC1D,QAAN,CAAegC,QAAnB,EAA6B;QACzB,KAAK8L,eAAL,GAAuBpU,KAAK,CAAC8T,WAAN,CAAkB,KAAKM,eAAvB,CAAvB;MACH;IACJ;;IACD,IAAIlK,KAAK,GAAG,KAAK7E,KAAL,CAAW2M,QAAX,CAAoB,CAApB,CAAZ;;IACA,IAAI9H,KAAJ,EAAW;MACP,KAAKmK,eAAL,GAAuB;QAAE1M,KAAK,EAAEuC,KAAK,CAACvC,KAAf;QAAsBD,GAAG,EAAEwC,KAAK,CAACxC;MAAjC,CAAvB;;MACA,IAAIwC,KAAK,CAAC5D,QAAN,CAAegC,QAAnB,EAA6B;QACzB,KAAK+L,eAAL,GAAuBrU,KAAK,CAAC8T,WAAN,CAAkB,KAAKO,eAAvB,CAAvB;MACH;IACJ;EACJ,CAfD;EAgBA;AACJ;AACA;AACA;AACA;;;EACIvT,OAAO,CAACoD,SAAR,CAAkBkI,kBAAlB,GAAuC,UAAUtG,KAAV,EAAiB;IACpD,IAAI+F,MAAM,GAAG,KAAKA,MAAlB;IACA,IAAImI,QAAQ,GAAGnI,MAAM,CAACmI,QAAtB;;IACA,IAAI,KAAKM,aAAL,KAAuBN,QAAQ,IAAI,MAAZ,IAAsBA,QAAQ,IAAI,OAAzD,CAAJ,EAAuE;MACnE,IAAIO,WAAW,GAAG,KAAKD,aAAvB;MACA,IAAIE,aAAa,GAAG,KAAKJ,eAAzB;MACA,IAAIK,KAAK,GAAG,CAAZ;;MACA,IAAIF,WAAW,CAAC5M,KAAZ,GAAoB,CAAxB,EAA2B;QACvB8M,KAAK,GAAGF,WAAW,CAAC5M,KAApB;MACH;;MACD,IAAI6M,aAAa,CAAC9M,GAAd,GAAoB,CAAxB,EAA2B;QACvB,IAAI6M,WAAW,CAAC7M,GAAZ,GAAkB8M,aAAa,CAAC9M,GAApC,EAAyC;UACrC+M,KAAK,GAAGF,WAAW,CAAC7M,GAAZ,GAAkB8M,aAAa,CAAC9M,GAAxC;QACH;MACJ,CAJD,MAKK,IAAI6M,WAAW,CAAC7M,GAAZ,GAAkB,CAAtB,EAAyB;QAC1B+M,KAAK,GAAGF,WAAW,CAAC7M,GAAZ,GAAkB,CAA1B;MACH;;MACD,KAAKT,QAAL,CAAc,KAAK/B,KAAnB,EAA0B;QAAEyC,KAAK,EAAE4M,WAAW,CAAC5M,KAAZ,GAAoB8M,KAA7B;QAAoC/M,GAAG,EAAE6M,WAAW,CAAC7M,GAAZ,GAAkB+M;MAA3D,CAA1B,EAA8F,KAA9F,EAAqG5I,MAAM,CAAC6I,SAA5G;MACA,KAAKJ,aAAL,GAAqB9K,SAArB;MACA,KAAK4K,eAAL,GAAuB5K,SAAvB;IACH;;IACD,IAAI,KAAKmL,aAAL,KAAuBX,QAAQ,IAAI,MAAZ,IAAsBA,QAAQ,IAAI,OAAzD,CAAJ,EAAuE;MACnE,IAAIO,WAAW,GAAG,KAAKI,aAAvB;MACA,IAAIF,KAAK,GAAG,CAAZ;;MACA,IAAIF,WAAW,CAAC5M,KAAZ,GAAoB,CAAxB,EAA2B;QACvB8M,KAAK,GAAGF,WAAW,CAAC5M,KAApB;MACH;;MACD,IAAI4M,WAAW,CAAC7M,GAAZ,GAAkB,CAAtB,EAAyB;QACrB+M,KAAK,GAAGF,WAAW,CAAC7M,GAAZ,GAAkB,CAA1B;MACH;;MACD,KAAKT,QAAL,CAAc,KAAK5B,KAAnB,EAA0B;QAAEsC,KAAK,EAAE4M,WAAW,CAAC5M,KAAZ,GAAoB8M,KAA7B;QAAoC/M,GAAG,EAAE6M,WAAW,CAAC7M,GAAZ,GAAkB+M;MAA3D,CAA1B,EAA8F,KAA9F,EAAqG5I,MAAM,CAAC6I,SAA5G;MACA,KAAKC,aAAL,GAAqBnL,SAArB;MACA,KAAK6K,eAAL,GAAuB7K,SAAvB;IACH;EACJ,CAnCD;;EAoCA1I,OAAO,CAACoD,SAAR,CAAkBmI,oBAAlB,GAAyC,YAAY;IACjD,KAAKiI,aAAL,GAAqB9K,SAArB;IACA,KAAK4K,eAAL,GAAuB5K,SAAvB;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;;;EACI1I,OAAO,CAACoD,SAAR,CAAkBiI,mBAAlB,GAAwC,UAAUrG,KAAV,EAAiB;IACrD,IAAI+F,MAAM,GAAG,KAAKA,MAAlB;IACA,IAAImI,QAAQ,GAAGnI,MAAM,CAACmI,QAAtB;IACA,IAAIY,SAAS,GAAG/I,MAAM,CAAC+I,SAAvB;;IACA,IAAI,KAAKR,eAAL,KAAyBJ,QAAQ,IAAI,MAAZ,IAAsBA,QAAQ,IAAI,OAA3D,CAAJ,EAAyE;MACrE,IAAIQ,aAAa,GAAG,KAAKJ,eAAzB;MACA,IAAItN,KAAK,GAAG+E,MAAM,CAACoI,MAAnB;MACA,IAAIY,SAAS,GAAG,KAAK9N,kBAAL,CAAwB,KAAK7B,KAA7B,CAAhB;MACA,IAAI6O,UAAU,GAAIS,aAAa,CAAC9M,GAAd,GAAoB8M,aAAa,CAAC7M,KAApD;MACA,IAAI8M,KAAK,GAAG3N,KAAK,CAACa,KAAN,IAAekN,SAAS,CAACnN,GAAV,GAAgBmN,SAAS,CAAClN,KAAzC,CAAZ;MACA,IAAImN,QAAQ,GAAGrF,IAAI,CAACsF,GAAL,CAAS,CAACH,SAAV,EAAqBH,KAAK,GAAGD,aAAa,CAAC7M,KAA3C,CAAf;MACA,IAAIqN,MAAM,GAAGvF,IAAI,CAACwF,GAAL,CAASR,KAAK,GAAGD,aAAa,CAAC9M,GAA/B,EAAoC,IAAIkN,SAAxC,CAAb;;MACA,IAAIE,QAAQ,IAAI,CAAhB,EAAmB;QACfE,MAAM,GAAGF,QAAQ,GAAGf,UAApB;MACH;;MACD,IAAIiB,MAAM,IAAI,CAAd,EAAiB;QACbF,QAAQ,GAAGE,MAAM,GAAGjB,UAApB;MACH;;MACD,IAAImB,QAAQ,GAAG;QACXvN,KAAK,EAAEmN,QADI;QAEXpN,GAAG,EAAEsN;MAFM,CAAf;MAIA,KAAKV,aAAL,GAAqBY,QAArB;MACA,KAAKjO,QAAL,CAAc,KAAK/B,KAAnB,EAA0BgQ,QAA1B,EAAoC,KAApC,EAA2C,KAA3C,EAAkDrJ,MAAM,CAAC+I,SAAzD;IACH;;IACD,IAAI,KAAKP,eAAL,KAAyBL,QAAQ,IAAI,MAAZ,IAAsBA,QAAQ,IAAI,OAA3D,CAAJ,EAAyE;MACrE,IAAIQ,aAAa,GAAG,KAAKH,eAAzB;MACA,IAAIvN,KAAK,GAAG+E,MAAM,CAACsI,MAAnB;MACA,IAAIU,SAAS,GAAG,KAAK9N,kBAAL,CAAwB,KAAK1B,KAA7B,CAAhB;MACA,IAAI0O,UAAU,GAAGS,aAAa,CAAC9M,GAAd,GAAoB8M,aAAa,CAAC7M,KAAnD;MACA,IAAI8M,KAAK,GAAG3N,KAAK,CAACa,KAAN,IAAekN,SAAS,CAACnN,GAAV,GAAgBmN,SAAS,CAAClN,KAAzC,CAAZ;MACA,IAAImN,QAAQ,GAAGrF,IAAI,CAACsF,GAAL,CAAS,CAACH,SAAV,EAAqBH,KAAK,GAAGD,aAAa,CAAC7M,KAA3C,CAAf;MACA,IAAIqN,MAAM,GAAGvF,IAAI,CAACwF,GAAL,CAASR,KAAK,GAAGD,aAAa,CAAC9M,GAA/B,EAAoC,IAAIkN,SAAxC,CAAb;;MACA,IAAIE,QAAQ,IAAI,CAAhB,EAAmB;QACfE,MAAM,GAAGF,QAAQ,GAAGf,UAApB;MACH;;MACD,IAAIiB,MAAM,IAAI,CAAd,EAAiB;QACbF,QAAQ,GAAGE,MAAM,GAAGjB,UAApB;MACH;;MACD,IAAImB,QAAQ,GAAG;QACXvN,KAAK,EAAEmN,QADI;QAEXpN,GAAG,EAAEsN;MAFM,CAAf;MAIA,KAAKL,aAAL,GAAqBO,QAArB;MACA,KAAKjO,QAAL,CAAc,KAAK5B,KAAnB,EAA0B6P,QAA1B,EAAoC,KAApC,EAA2C,KAA3C,EAAkDrJ,MAAM,CAAC+I,SAAzD;IACH;;IACD,KAAKtI,gBAAL;EACH,CA/CD;EAgDA;AACJ;AACA;;;EACIxL,OAAO,CAACoD,SAAR,CAAkBiR,cAAlB,GAAmC,UAAUrR,MAAV,EAAkB,CACpD,CADD;EAEA;AACJ;AACA;AACA;AACA;AACA;;;EACIhD,OAAO,CAACoD,SAAR,CAAkB8H,qBAAlB,GAA0C,UAAUlG,KAAV,EAAiB,CACvD;IACA;IACA;EACH,CAJD;;EAKAsE,MAAM,CAACC,cAAP,CAAsBvJ,OAAO,CAACoD,SAA9B,EAAyC,YAAzC,EAAuD;IACnD;AACR;AACA;IACQoG,GAAG,EAAE,YAAY;MACb,OAAO,KAAK8K,WAAZ;IACH,CANkD;;IAOnD;AACR;AACA;AACA;AACA;IACQxJ,GAAG,EAAE,UAAU7D,SAAV,EAAqB;MACtB,IAAIrH,KAAK,GAAG,IAAZ;;MACA,IAAI,KAAK0U,WAAT,EAAsB;QAClB,KAAKtJ,aAAL,CAAmB,KAAKsJ,WAAxB;MACH;;MACD,KAAKA,WAAL,GAAmBrN,SAAnB;;MACA,IAAIA,SAAJ,EAAe;QACX,KAAKmB,UAAL,CAAgBC,IAAhB,CAAqBpB,SAArB;;QACAA,SAAS,CAAC9E,MAAV,GAAmB,KAAKrB,gBAAxB;QACAmG,SAAS,CAACtG,WAAV,GAAwB,KAAxB;QACAsG,SAAS,CAACsN,SAAV,CAAoBjR,UAApB,GAAiC,KAAjC;QACA2D,SAAS,CAACuN,OAAV,CAAkBlR,UAAlB,GAA+B,KAA/B;QACA2D,SAAS,CAACU,MAAV;QACAV,SAAS,CAACwN,WAAV,GAAwB,YAAxB;QACAxN,SAAS,CAAC3F,MAAV,CAAiBC,EAAjB,CAAoB,cAApB,EAAoC,KAAKmT,sBAAzC,EAAiE,IAAjE,EAAuE,KAAvE;QACA,KAAKpT,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,YAAY;UAAE,OAAO0F,SAAS,CAAC0N,WAAV,CAAsB,KAAtB,CAAP;QAAsC,CAApF,EAAsF,IAAtF,EAA4F,KAA5F,EATW,CAUX;;QACA1N,SAAS,CAAC2N,OAAV,CAAkBC,GAAlB,CAAsB,eAAtB,EAAuC,UAAUC,GAAV,EAAe;UAClD,IAAI5L,KAAK,GAAGtJ,KAAK,CAACwE,KAAN,CAAY8M,QAAZ,CAAqB,CAArB,CAAZ;;UACA,IAAIhI,KAAJ,EAAW;YACP4L,GAAG,CAACC,KAAJ,GAAY7L,KAAK,CAAC8L,gBAAN,CAAuB9L,KAAK,CAAC1D,QAAN,CAAegC,QAAf,GAC7B,IAAIsN,GAAG,CAAC3F,QADqB,GAE7B2F,GAAG,CAAC3F,QAFE,CAAZ;UAGH;;UACD,OAAO2F,GAAP;QACH,CARD;MASH;IACJ,CAvCkD;IAwCnDnL,UAAU,EAAE,IAxCuC;IAyCnDC,YAAY,EAAE;EAzCqC,CAAvD;EA2CAN,MAAM,CAACC,cAAP,CAAsBvJ,OAAO,CAACoD,SAA9B,EAAyC,YAAzC,EAAuD;IACnD;AACR;AACA;IACQoG,GAAG,EAAE,YAAY;MACb,OAAO,KAAKyL,WAAZ;IACH,CANkD;;IAOnD;AACR;AACA;AACA;AACA;IACQnK,GAAG,EAAE,UAAU7D,SAAV,EAAqB;MACtB,IAAIrH,KAAK,GAAG,IAAZ;;MACA,IAAI,KAAKqV,WAAT,EAAsB;QAClB,KAAKjK,aAAL,CAAmB,KAAKiK,WAAxB;MACH;;MACD,KAAKA,WAAL,GAAmBhO,SAAnB;;MACA,IAAIA,SAAJ,EAAe;QACX,KAAKmB,UAAL,CAAgBC,IAAhB,CAAqBpB,SAArB;;QACAA,SAAS,CAAC9E,MAAV,GAAmB,KAAKF,kBAAxB;QACAgF,SAAS,CAACsN,SAAV,CAAoBjR,UAApB,GAAiC,KAAjC;QACA2D,SAAS,CAACtG,WAAV,GAAwB,KAAxB;QACAsG,SAAS,CAACuN,OAAV,CAAkBlR,UAAlB,GAA+B,KAA/B;QACA2D,SAAS,CAACrD,OAAV;QACAqD,SAAS,CAACwN,WAAV,GAAwB,UAAxB;QACAxN,SAAS,CAAC3F,MAAV,CAAiBC,EAAjB,CAAoB,cAApB,EAAoC,KAAK2T,sBAAzC,EAAiE,IAAjE,EAAuE,KAAvE;QACA,KAAK5T,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,YAAY;UAAE,OAAO0F,SAAS,CAAC0N,WAAV,CAAsB,KAAtB,CAAP;QAAsC,CAApF,EAAsF,IAAtF,EAA4F,KAA5F,EATW,CAUX;;QACA1N,SAAS,CAAC2N,OAAV,CAAkBC,GAAlB,CAAsB,eAAtB,EAAuC,UAAUC,GAAV,EAAe;UAClD,IAAI1L,KAAK,GAAGxJ,KAAK,CAAC2E,KAAN,CAAY2M,QAAZ,CAAqB,CAArB,CAAZ;;UACA,IAAI9H,KAAJ,EAAW;YACP0L,GAAG,CAACC,KAAJ,GAAY3L,KAAK,CAAC4L,gBAAN,CAAuBF,GAAG,CAAC3F,QAA3B,CAAZ;UACH;;UACD,OAAO2F,GAAP;QACH,CAND;MAOH;IACJ,CArCkD;IAsCnDnL,UAAU,EAAE,IAtCuC;IAuCnDC,YAAY,EAAE;EAvCqC,CAAvD;EAyCA;AACJ;AACA;AACA;AACA;AACA;;EACI5J,OAAO,CAACoD,SAAR,CAAkBsR,sBAAlB,GAA2C,UAAU1P,KAAV,EAAiB;IACxD,IAAI,KAAK2D,MAAT,EAAiB;MACb,IAAI1B,SAAS,GAAGjC,KAAK,CAACE,MAAtB;MACA,IAAIc,KAAK,GAAGiB,SAAS,CAACjB,KAAtB;;MACA,IAAIA,KAAK,CAACa,KAAN,IAAe,CAAnB,EAAsB;QAClBb,KAAK,CAACoN,QAAN,GAAiB,OAAjB;MACH;;MACD,IAAIpN,KAAK,CAACY,GAAN,IAAa,CAAjB,EAAoB;QAChBZ,KAAK,CAACoN,QAAN,GAAiB,KAAjB;MACH;;MACDpN,KAAK,GAAG,KAAKG,QAAL,CAAc,KAAK/B,KAAnB,EAA0B4B,KAA1B,CAAR;MACAiB,SAAS,CAACkO,QAAV,CAAmBnP,KAAnB;IACH;EACJ,CAbD;EAcA;AACJ;AACA;AACA;AACA;AACA;;;EACIhG,OAAO,CAACoD,SAAR,CAAkB8R,sBAAlB,GAA2C,UAAUlQ,KAAV,EAAiB;IACxD,IAAI,KAAK2D,MAAT,EAAiB;MACb,IAAI1B,SAAS,GAAGjC,KAAK,CAACE,MAAtB;MACA,IAAIc,KAAK,GAAGiB,SAAS,CAACjB,KAAtB;;MACA,IAAIA,KAAK,CAACY,GAAN,IAAa,CAAjB,EAAoB;QAChBZ,KAAK,CAACoN,QAAN,GAAiB,KAAjB;MACH;;MACD,IAAIpN,KAAK,CAACa,KAAN,IAAe,CAAnB,EAAsB;QAClBb,KAAK,CAACoN,QAAN,GAAiB,OAAjB;MACH;;MACDpN,KAAK,GAAG,KAAKG,QAAL,CAAc,KAAK5B,KAAnB,EAA0ByB,KAA1B,CAAR;MACAiB,SAAS,CAACkO,QAAV,CAAmBnP,KAAnB;IACH;EACJ,CAbD;EAcA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIhG,OAAO,CAACoD,SAAR,CAAkB+C,QAAlB,GAA6B,UAAUgB,IAAV,EAAgBnB,KAAhB,EAAuBoP,SAAvB,EAAkCzO,KAAlC,EAAyC0O,WAAzC,EAAsDC,IAAtD,EAA4D;IACrF,IAAIC,SAAS,GAAG;MAAE1O,KAAK,EAAE,CAAT;MAAYD,GAAG,EAAE;IAAjB,CAAhB;IACA,KAAKqF,iBAAL,GAFqF,CAE3D;;IAC1B,IAAIuJ,aAAa,GAAGxP,KAApB;;IACA,IAAI,CAAC,KAAKmE,WAAV,EAAuB;MACnBhL,KAAK,CAAC8D,IAAN,CAAWkE,IAAI,CAACnD,QAAL,EAAX,EAA4B,UAAUK,IAAV,EAAgB;QACxC,IAAIqC,aAAa,GAAGrC,IAAI,CAACqC,aAAzB;;QACA,IAAItH,KAAK,CAACqI,QAAN,CAAepD,IAAI,CAACoR,YAApB,CAAJ,EAAuC;UACnC/O,aAAa,GAAGA,aAAa,GAAGrC,IAAI,CAACoR,YAArC;QACH;;QACD,IAAIH,IAAI,IAAI,KAAKtP,KAAK,CAACY,GAAN,GAAYZ,KAAK,CAACa,KAAvB,KAAiCH,aAA7C,EAA4D,CACxD;QACH,CAFD,MAGK;UACD,IAAIrC,IAAI,CAAC+C,QAAT,EAAmB;YACf,IAAI/C,IAAI,CAACmB,QAAL,CAAcgC,QAAlB,EAA4B;cACxBxB,KAAK,GAAG9G,KAAK,CAAC8T,WAAN,CAAkBwC,aAAlB,CAAR;YACH,CAFD,MAGK;cACDxP,KAAK,GAAGwP,aAAR;YACH;;YACDnR,IAAI,CAAC6I,WAAL,CAAiB,CAAjB;;YACA,IAAIvG,KAAJ,EAAW;cACP;cACA,IAAItC,IAAI,YAAY1F,YAApB,EAAkC;gBAC9B,IAAI+W,SAAS,GAAGrR,IAAI,CAACsR,kBAAL,CAAwB,CAAxB,IAA6BtR,IAAI,CAACuR,oBAAL,CAA0B,CAA1B,CAA7C;gBACA5P,KAAK,CAACa,KAAN,GAAcxC,IAAI,CAACwR,aAAL,CAAmB7P,KAAK,CAACa,KAAN,GAAc6O,SAAS,GAAG,CAA1B,GAA+BrR,IAAI,CAACyR,aAAN,GAAuBJ,SAAxE,EAAmFrR,IAAI,CAACyR,aAAxF,CAAd;gBACA9P,KAAK,CAACY,GAAN,GAAYvC,IAAI,CAACwR,aAAL,CAAmB7P,KAAK,CAACY,GAAN,GAAY8O,SAAS,GAAG,CAAxB,GAA4B,CAAC,IAAIrR,IAAI,CAAC0R,WAAV,IAAyBL,SAAxE,EAAmFrR,IAAI,CAAC0R,WAAxF,CAAZ;cACH,CAJD,MAKK;gBACD,IAAIC,CAAC,GAAG,MAAR;gBACAhQ,KAAK,CAACa,KAAN,GAAcxC,IAAI,CAACwR,aAAL,CAAmB7P,KAAK,CAACa,KAAN,GAAcmP,CAAjC,EAAoC,CAApC,EAAuC3R,IAAI,CAACyR,aAA5C,CAAd;gBACA9P,KAAK,CAACY,GAAN,GAAYvC,IAAI,CAACwR,aAAL,CAAmB7P,KAAK,CAACY,GAAN,GAAYoP,CAA/B,EAAkC,CAAlC,EAAqC3R,IAAI,CAAC0R,WAA1C,CAAZ;cACH;YACJ;;YACD,IAAIhC,SAAS,GAAG1P,IAAI,CAAC4R,IAAL,CAAUjQ,KAAV,EAAiBoP,SAAjB,EAA4BA,SAA5B,EAAuCC,WAAvC,CAAhB;;YACA,IAAIhR,IAAI,CAACmB,QAAL,CAAcgC,QAAlB,EAA4B;cACxBuM,SAAS,GAAG7U,KAAK,CAAC8T,WAAN,CAAkBe,SAAlB,CAAZ;YACH;;YACDwB,SAAS,GAAGxB,SAAZ;UACH;QACJ;MACJ,CArCD;IAsCH;;IACD,OAAOwB,SAAP;EACH,CA7CD;;EA8CAjM,MAAM,CAACC,cAAP,CAAsBvJ,OAAO,CAACoD,SAA9B,EAAyC,aAAzC,EAAwD;IACpD;AACR;AACA;IACQoG,GAAG,EAAE,YAAY;MACb,OAAO,KAAK0M,gBAAL,CAAsB,aAAtB,CAAP;IACH,CANmD;;IAOpD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQpL,GAAG,EAAE,UAAUiK,KAAV,EAAiB;MAClB,IAAI,KAAKoB,gBAAL,CAAsB,aAAtB,EAAqCpB,KAArC,EAA4C,IAA5C,KAAqD,KAAK3S,gBAA9D,EAAgF;QAC5E,IAAI2S,KAAJ,EAAW;UACP,KAAK3S,gBAAL,CAAsByB,IAAtB,GAA6B,KAAKd,WAAlC;QACH,CAFD,MAGK;UACD,KAAKX,gBAAL,CAAsByB,IAAtB,GAA6B6E,SAA7B;QACH;MACJ;IACJ,CAzBmD;IA0BpDiB,UAAU,EAAE,IA1BwC;IA2BpDC,YAAY,EAAE;EA3BsC,CAAxD;EA6BAN,MAAM,CAACC,cAAP,CAAsBvJ,OAAO,CAACoD,SAA9B,EAAyC,iBAAzC,EAA4D;IACxD;AACR;AACA;IACQoG,GAAG,EAAE,YAAY;MACb,OAAO,KAAK0M,gBAAL,CAAsB,iBAAtB,CAAP;IACH,CANuD;;IAOxD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQpL,GAAG,EAAE,UAAUiK,KAAV,EAAiB;MAClB,KAAKoB,gBAAL,CAAsB,iBAAtB,EAAyCpB,KAAzC,EAAgD,IAAhD;IACH,CAvBuD;IAwBxDpL,UAAU,EAAE,IAxB4C;IAyBxDC,YAAY,EAAE;EAzB0C,CAA5D;EA2BA;AACJ;AACA;AACA;AACA;;EACI5J,OAAO,CAACoD,SAAR,CAAkBgT,WAAlB,GAAgC,UAAUpR,KAAV,EAAiB;IAC7C,IAAInD,aAAa,GAAG,KAAKA,aAAzB;IACA,IAAIwU,QAAQ,GAAGhX,MAAM,CAACiX,kBAAP,CAA0BtR,KAAK,CAACsD,KAAhC,EAAuC,KAAKiO,aAA5C,EAA2D,KAAK5E,YAAL,CAAkB6E,QAA7E,CAAf;IACA,IAAIC,SAAS,GAAGpX,MAAM,CAACqX,gBAAP,CAAwBL,QAAxB,EAAkCxU,aAAlC,CAAhB;IACA,IAAI8U,KAAK,GAAG3R,KAAK,CAAC2R,KAAN,CAAYlO,CAAxB;IACA,KAAKmO,eAAL,CAAqBD,KAArB,EAA4B,KAAK7U,kBAAjC,EAAqD2U,SAArD;EACH,CAND;EAOA;AACJ;AACA;AACA;AACA;;;EACIzW,OAAO,CAACoD,SAAR,CAAkByT,qBAAlB,GAA0C,UAAU7R,KAAV,EAAiB;IACvD,IAAInD,aAAa,GAAG,KAAKA,aAAzB;IACA,IAAIwU,QAAQ,GAAGhX,MAAM,CAACiX,kBAAP,CAA0BtR,KAAK,CAACsD,KAAhC,EAAuC,KAAKiO,aAA5C,EAA2D,KAAK5E,YAAL,CAAkB6E,QAA7E,CAAf;IACA,IAAIC,SAAS,GAAGpX,MAAM,CAACqX,gBAAP,CAAwBL,QAAxB,EAAkCxU,aAAlC,CAAhB;IACA,KAAK+U,eAAL,CAAqB5R,KAAK,CAAC2R,KAAN,CAAYnO,CAAjC,EAAoC,KAAKsO,4BAAzC,EAAuEL,SAAvE;EACH,CALD;EAMA;AACJ;AACA;;;EACIzW,OAAO,CAACoD,SAAR,CAAkBwT,eAAlB,GAAoC,UAAUD,KAAV,EAAiB7U,kBAAjB,EAAqC2U,SAArC,EAAgD;IAChF,IAAIE,KAAK,IAAI,CAAb,EAAgB;MACZ,IAAI9U,aAAa,GAAG,KAAKA,aAAzB;MACA,IAAIkV,MAAM,GAAG,KAAK9Q,kBAAL,CAAwB,KAAK7B,KAA7B,CAAb;MACA,IAAI4S,MAAM,GAAG,KAAK/Q,kBAAL,CAAwB,KAAK1B,KAA7B,CAAb;MACA,IAAI0S,SAAS,GAAG,EAAhB;MACA,IAAInD,SAAS,GAAG,CAAhB;;MACA,IAAIhS,kBAAkB,IAAI,MAAtB,IAAgCA,kBAAkB,IAAI,OAA1D,EAAmE;QAC/D,IAAIoH,KAAK,GAAG,KAAK9E,KAAL,CAAW8M,QAAX,CAAoB,CAApB,CAAZ;QACA,IAAIvK,KAAK,GAAG,KAAZ;QACA,IAAIuQ,cAAc,GAAGD,SAArB;;QACA,IAAI/N,KAAK,YAAYvK,YAArB,EAAmC;UAC/BuY,cAAc,GAAG,MAAM,CAACH,MAAM,CAACnQ,GAAP,GAAamQ,MAAM,CAAClQ,KAArB,IAA8BqC,KAAK,CAACsD,SAAN,CAAgBvC,MAApD,CAAjB;UACAtD,KAAK,GAAG,IAAR;QACH;;QACDsQ,SAAS,GAAGtI,IAAI,CAACsF,GAAL,CAAS,GAAT,EAAciD,cAAd,CAAZ;QACA,IAAIC,WAAW,GAAGJ,MAAM,CAACnQ,GAAP,GAAamQ,MAAM,CAAClQ,KAAtC;QACA,IAAIuQ,SAAS,GAAGzI,IAAI,CAACsF,GAAL,CAAS,CAACH,SAAV,EAAqBiD,MAAM,CAAClQ,KAAP,GAAeoQ,SAAS,GAAGN,KAAZ,GAAoB,GAApB,IAA2BI,MAAM,CAACnQ,GAAP,GAAamQ,MAAM,CAAClQ,KAA/C,CAApC,CAAhB;QACA,IAAIwQ,OAAO,GAAG1I,IAAI,CAACwF,GAAL,CAAS4C,MAAM,CAACnQ,GAAP,GAAaqQ,SAAS,GAAGN,KAAZ,GAAoB,GAApB,IAA2BI,MAAM,CAACnQ,GAAP,GAAamQ,MAAM,CAAClQ,KAA/C,CAAtB,EAA6E,IAAIiN,SAAjF,CAAd;;QACA,IAAIsD,SAAS,IAAI,CAAjB,EAAoB;UAChBC,OAAO,GAAGD,SAAS,GAAGD,WAAtB;QACH;;QACD,IAAIE,OAAO,IAAI,CAAf,EAAkB;UACdD,SAAS,GAAGC,OAAO,GAAGF,WAAtB;QACH;;QACD,KAAKhR,QAAL,CAAc,KAAK/B,KAAnB,EAA0B;UAAEyC,KAAK,EAAEuQ,SAAT;UAAoBxQ,GAAG,EAAEyQ;QAAzB,CAA1B,EAA8D3O,SAA9D,EAAyE/B,KAAzE;MACH;;MACD,IAAI7E,kBAAkB,IAAI,MAAtB,IAAgCA,kBAAkB,IAAI,OAA1D,EAAmE;QAC/D,IAAIsH,KAAK,GAAG,KAAK7E,KAAL,CAAW2M,QAAX,CAAoB,CAApB,CAAZ;QACA,IAAIgG,cAAc,GAAGD,SAArB;QACA,IAAItQ,KAAK,GAAG,KAAZ;;QACA,IAAIyC,KAAK,YAAYzK,YAArB,EAAmC;UAC/BuY,cAAc,GAAG,MAAM,CAACH,MAAM,CAACnQ,GAAP,GAAamQ,MAAM,CAAClQ,KAArB,IAA8BuC,KAAK,CAACoD,SAAN,CAAgBvC,MAApD,CAAjB;UACAtD,KAAK,GAAG,IAAR;QACH;;QACDsQ,SAAS,GAAGtI,IAAI,CAACsF,GAAL,CAAS,GAAT,EAAciD,cAAd,CAAZ;QACAP,KAAK,IAAI,CAAC,CAAV;QACA,IAAIW,WAAW,GAAGN,MAAM,CAACpQ,GAAP,GAAaoQ,MAAM,CAACnQ,KAAtC;QACA,IAAI0Q,SAAS,GAAG5I,IAAI,CAACsF,GAAL,CAAS,CAACH,SAAV,EAAqBkD,MAAM,CAACnQ,KAAP,GAAeoQ,SAAS,GAAGN,KAAZ,GAAoB,GAApB,IAA2BK,MAAM,CAACpQ,GAAP,GAAaoQ,MAAM,CAACnQ,KAA/C,CAApC,CAAhB;QACA,IAAI2Q,OAAO,GAAG7I,IAAI,CAACwF,GAAL,CAAS6C,MAAM,CAACpQ,GAAP,GAAaqQ,SAAS,GAAGN,KAAZ,GAAoB,GAApB,IAA2BK,MAAM,CAACpQ,GAAP,GAAaoQ,MAAM,CAACnQ,KAA/C,CAAtB,EAA6E,IAAIiN,SAAjF,CAAd;;QACA,IAAIyD,SAAS,IAAI,CAAjB,EAAoB;UAChBC,OAAO,GAAGD,SAAS,GAAGD,WAAtB;QACH;;QACD,IAAIE,OAAO,IAAI,CAAf,EAAkB;UACdD,SAAS,GAAGC,OAAO,GAAGF,WAAtB;QACH;;QACD,KAAKnR,QAAL,CAAc,KAAK5B,KAAnB,EAA0B;UAAEsC,KAAK,EAAE0Q,SAAT;UAAoB3Q,GAAG,EAAE4Q;QAAzB,CAA1B,EAA8D9O,SAA9D,EAAyE/B,KAAzE;MACH;;MACD,IAAI7E,kBAAkB,IAAI,OAAtB,IAAiCA,kBAAkB,IAAI,QAA3D,EAAqE;QACjE,IAAI2V,SAAS,GAAGhB,SAAS,CAACjO,CAAV,GAAc3G,aAAa,CAAC6V,QAA5C;QACA,IAAIC,UAAU,GAAG,KAAKvT,KAAL,CAAW8M,QAAX,CAAoB,CAApB,EAAuBrE,cAAvB,CAAsC4K,SAAtC,CAAjB;QACA,IAAIL,SAAS,GAAGzI,IAAI,CAACsF,GAAL,CAAS,CAACH,SAAV,EAAqBiD,MAAM,CAAClQ,KAAP,GAAeoQ,SAAS,IAAIF,MAAM,CAACnQ,GAAP,GAAamQ,MAAM,CAAClQ,KAAxB,CAAT,GAA0C8P,KAA1C,GAAkD,GAAlD,GAAwDc,SAA5F,CAAhB;QACAL,SAAS,GAAGzI,IAAI,CAACwF,GAAL,CAASiD,SAAT,EAAoBO,UAApB,CAAZ;QACA,IAAIN,OAAO,GAAG1I,IAAI,CAACwF,GAAL,CAAS4C,MAAM,CAACnQ,GAAP,GAAaqQ,SAAS,IAAIF,MAAM,CAACnQ,GAAP,GAAamQ,MAAM,CAAClQ,KAAxB,CAAT,GAA0C8P,KAA1C,GAAkD,GAAlD,IAAyD,IAAIc,SAA7D,CAAtB,EAA+F,IAAI3D,SAAnG,CAAd;QACAuD,OAAO,GAAG1I,IAAI,CAACsF,GAAL,CAASoD,OAAT,EAAkBM,UAAlB,CAAV;QACA,KAAKxR,QAAL,CAAc,KAAK/B,KAAnB,EAA0B;UAAEyC,KAAK,EAAEuQ,SAAT;UAAoBxQ,GAAG,EAAEyQ;QAAzB,CAA1B,EAA8D3O,SAA9D;MACH;;MACD,IAAI5G,kBAAkB,IAAI,OAAtB,IAAiCA,kBAAkB,IAAI,QAA3D,EAAqE;QACjE,IAAI8V,SAAS,GAAGnB,SAAS,CAAChO,CAAV,GAAc5G,aAAa,CAACgW,SAA5C;QACA,IAAIC,UAAU,GAAG,KAAKvT,KAAL,CAAW2M,QAAX,CAAoB,CAApB,EAAuBrE,cAAvB,CAAsC+K,SAAtC,CAAjB;QACA,IAAIL,SAAS,GAAG5I,IAAI,CAACsF,GAAL,CAAS,CAACH,SAAV,EAAqBkD,MAAM,CAACnQ,KAAP,GAAeoQ,SAAS,IAAID,MAAM,CAACpQ,GAAP,GAAaoQ,MAAM,CAACnQ,KAAxB,CAAT,GAA0C8P,KAA1C,GAAkD,GAAlD,IAAyD,IAAIiB,SAA7D,CAApC,CAAhB;QACAL,SAAS,GAAG5I,IAAI,CAACwF,GAAL,CAASoD,SAAT,EAAoBO,UAApB,CAAZ;QACA,IAAIN,OAAO,GAAG7I,IAAI,CAACwF,GAAL,CAAS6C,MAAM,CAACpQ,GAAP,GAAaqQ,SAAS,GAAGN,KAAZ,GAAoB,GAApB,GAA0BiB,SAA1B,IAAuCZ,MAAM,CAACpQ,GAAP,GAAaoQ,MAAM,CAACnQ,KAA3D,CAAtB,EAAyF,IAAIiN,SAA7F,CAAd;QACA0D,OAAO,GAAG7I,IAAI,CAACsF,GAAL,CAASuD,OAAT,EAAkBM,UAAlB,CAAV;QACA,KAAK3R,QAAL,CAAc,KAAK5B,KAAnB,EAA0B;UAAEsC,KAAK,EAAE0Q,SAAT;UAAoB3Q,GAAG,EAAE4Q;QAAzB,CAA1B,EAA8D9O,SAA9D;MACH;IACJ;EACJ,CAnED;;EAoEAY,MAAM,CAACC,cAAP,CAAsBvJ,OAAO,CAACoD,SAA9B,EAAyC,oBAAzC,EAA+D;IAC3D;AACR;AACA;IACQoG,GAAG,EAAE,YAAY;MACb,OAAO,KAAK0M,gBAAL,CAAsB,oBAAtB,CAAP;IACH,CAN0D;;IAO3D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQpL,GAAG,EAAE,UAAUiK,KAAV,EAAiB;MAClB,IAAI,KAAKoB,gBAAL,CAAsB,oBAAtB,EAA4CpB,KAA5C,CAAJ,EAAwD;QACpD,IAAIA,KAAK,IAAI,MAAb,EAAqB;UACjB,KAAKgD,mBAAL,GAA2B,KAAKlW,aAAL,CAAmBP,MAAnB,CAA0BC,EAA1B,CAA6B,OAA7B,EAAsC,KAAK6U,WAA3C,EAAwD,IAAxD,EAA8D,KAA9D,CAA3B;;UACA,KAAKhO,UAAL,CAAgBC,IAAhB,CAAqB,KAAK0P,mBAA1B;QACH,CAHD,MAIK;UACD,IAAI,KAAKA,mBAAT,EAA8B;YAC1B,KAAKlW,aAAL,CAAmBmW,SAAnB,GAA+B,KAA/B;YACA,KAAKnW,aAAL,CAAmBoW,SAAnB,GAA+B,KAA/B;;YACA,KAAKF,mBAAL,CAAyBjO,OAAzB;UACH;QACJ;MACJ;IACJ,CAhC0D;IAiC3DH,UAAU,EAAE,IAjC+C;IAkC3DC,YAAY,EAAE;EAlC6C,CAA/D;EAoCAN,MAAM,CAACC,cAAP,CAAsBvJ,OAAO,CAACoD,SAA9B,EAAyC,8BAAzC,EAAyE;IACrE;AACR;AACA;IACQoG,GAAG,EAAE,YAAY;MACb,OAAO,KAAK0M,gBAAL,CAAsB,8BAAtB,CAAP;IACH,CANoE;;IAOrE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQpL,GAAG,EAAE,UAAUiK,KAAV,EAAiB;MAClB,IAAI,KAAKoB,gBAAL,CAAsB,8BAAtB,EAAsDpB,KAAtD,CAAJ,EAAkE;QAC9D,IAAIA,KAAK,IAAI,MAAb,EAAqB;UACjB,KAAKmD,oBAAL,GAA4B,KAAKrW,aAAL,CAAmBP,MAAnB,CAA0BC,EAA1B,CAA6B,OAA7B,EAAsC,KAAKsV,qBAA3C,EAAkE,IAAlE,EAAwE,KAAxE,CAA5B;;UACA,KAAKzO,UAAL,CAAgBC,IAAhB,CAAqB,KAAK6P,oBAA1B;QACH,CAHD,MAIK;UACD,IAAI,KAAKA,oBAAT,EAA+B;YAC3B,KAAKrW,aAAL,CAAmBmW,SAAnB,GAA+B,KAA/B;YACA,KAAKnW,aAAL,CAAmBoW,SAAnB,GAA+B,KAA/B;;YACA,KAAKC,oBAAL,CAA0BpO,OAA1B;UACH;QACJ;MACJ;IACJ,CA9BoE;IA+BrEH,UAAU,EAAE,IA/ByD;IAgCrEC,YAAY,EAAE;EAhCuD,CAAzE;EAkCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI5J,OAAO,CAACoD,SAAR,CAAkB+U,oBAAlB,GAAyC,UAAUC,MAAV,EAAkB;IACvD,IAAIxY,KAAK,GAAG,IAAZ,CADuD,CAEvD;;;IACAwY,MAAM,GAAGzY,MAAM,CAACyD,SAAP,CAAiB+U,oBAAjB,CAAsCtY,IAAtC,CAA2C,IAA3C,EAAiDuY,MAAjD,CAAT,CAHuD,CAIvD;;IACAjZ,KAAK,CAAC8D,IAAN,CAAW,KAAKD,MAAL,CAAYgB,QAAZ,EAAX,EAAmC,UAAUhB,MAAV,EAAkB;MACjDoV,MAAM,GAAGxY,KAAK,CAACyY,wBAAN,CAA+BD,MAA/B,EAAuCpV,MAAM,CAACsV,UAA9C,EAA0D,CAAC,OAAD,EAAU,OAAV,EAAmB,WAAnB,EAAgC,WAAhC,CAA1D,CAAT;IACH,CAFD;IAGA,OAAOF,MAAP;EACH,CATD;EAUA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIpY,OAAO,CAACoD,SAAR,CAAkBmV,sBAAlB,GAA2C,UAAUH,MAAV,EAAkB;IACzD,IAAIxY,KAAK,GAAG,IAAZ;;IACAwY,MAAM,GAAGzY,MAAM,CAACyD,SAAP,CAAiB+U,oBAAjB,CAAsCtY,IAAtC,CAA2C,IAA3C,EAAiDuY,MAAjD,CAAT,CAFyD,CAGzD;;IACAjZ,KAAK,CAAC8D,IAAN,CAAW,KAAKD,MAAL,CAAYgB,QAAZ,EAAX,EAAmC,UAAUhB,MAAV,EAAkB;MACjDoV,MAAM,GAAGxY,KAAK,CAACyY,wBAAN,CAA+BD,MAA/B,EAAuCpV,MAAM,CAACsV,UAA9C,EAA0D,CAAC,QAAD,EAAW,QAAX,EAAqB,YAArB,EAAmC,YAAnC,CAA1D,CAAT;IACH,CAFD;IAGA,OAAOF,MAAP;EACH,CARD;EASA;AACJ;AACA;AACA;AACA;AACA;;;EACIpY,OAAO,CAACoD,SAAR,CAAkBoV,aAAlB,GAAkC,UAAUC,MAAV,EAAkB;IAChD,IAAIA,MAAJ,EAAY;MACR;MACA,IAAIrU,KAAK,GAAG,EAAZ;MACA,IAAIG,KAAK,GAAG,EAAZ,CAHQ,CAIR;;MACA,IAAInF,KAAK,CAACmE,QAAN,CAAekV,MAAM,CAACrU,KAAtB,KAAgChF,KAAK,CAACsZ,OAAN,CAAcD,MAAM,CAACrU,KAArB,CAApC,EAAiE;QAC7D,KAAK,IAAI8N,CAAC,GAAG,CAAR,EAAWQ,GAAG,GAAG+F,MAAM,CAACrU,KAAP,CAAa6F,MAAnC,EAA2CiI,CAAC,GAAGQ,GAA/C,EAAoDR,CAAC,EAArD,EAAyD;UACrD,IAAI,CAACuG,MAAM,CAACrU,KAAP,CAAa8N,CAAb,EAAgByG,IAArB,EAA2B;YACvB,MAAMC,KAAK,CAAC,2CAA2C1G,CAA3C,GAA+C,IAAhD,CAAX;UACH,CAFD,MAGK,IAAI9S,KAAK,CAACmE,QAAN,CAAekV,MAAM,CAACrU,KAAP,CAAa8N,CAAb,EAAgB,YAAhB,CAAf,CAAJ,EAAmD;YACpD;YACA,KAAK,IAAI1J,CAAC,GAAG,CAAR,EAAWqQ,KAAK,GAAGJ,MAAM,CAACrU,KAAP,CAAa8N,CAAb,EAAgB,YAAhB,EAA8BjI,MAAtD,EAA8DzB,CAAC,GAAGqQ,KAAlE,EAAyErQ,CAAC,EAA1E,EAA8E;cAC1E,IAAIxC,KAAK,GAAGyS,MAAM,CAACrU,KAAP,CAAa8N,CAAb,EAAgB,YAAhB,EAA8B1J,CAA9B,CAAZ;;cACA,IAAIpJ,KAAK,CAACmE,QAAN,CAAeyC,KAAK,CAAC8S,IAArB,KAA8B1Z,KAAK,CAAC2Z,QAAN,CAAe/S,KAAK,CAAC8S,IAArB,CAAlC,EAA8D;gBAC1D9S,KAAK,CAAC8S,IAAN,GAAa,KAAKE,aAAL,CAAmBC,KAAnB,CAAyBjT,KAAK,CAAC8S,IAA/B,CAAb;cACH;;cACD,IAAI1Z,KAAK,CAACmE,QAAN,CAAeyC,KAAK,CAACkT,OAArB,KAAiC9Z,KAAK,CAAC2Z,QAAN,CAAe/S,KAAK,CAACkT,OAArB,CAArC,EAAoE;gBAChElT,KAAK,CAACkT,OAAN,GAAgB,KAAKF,aAAL,CAAmBC,KAAnB,CAAyBjT,KAAK,CAACkT,OAA/B,CAAhB;cACH;YACJ;;YACD9U,KAAK,CAACiE,IAAN,CAAW;cACP8Q,UAAU,EAAEV,MAAM,CAACrU,KAAP,CAAa8N,CAAb,EAAgB,YAAhB,CADL;cAEPkH,KAAK,EAAElH;YAFA,CAAX;YAIA,OAAQuG,MAAM,CAACrU,KAAP,CAAa8N,CAAb,EAAgB,YAAhB,CAAR;UACH;QACJ;MACJ;;MACD,IAAI9S,KAAK,CAACmE,QAAN,CAAekV,MAAM,CAAClU,KAAtB,KAAgCnF,KAAK,CAACsZ,OAAN,CAAcD,MAAM,CAAClU,KAArB,CAApC,EAAiE;QAC7D,KAAK,IAAI2N,CAAC,GAAG,CAAR,EAAWQ,GAAG,GAAG+F,MAAM,CAAClU,KAAP,CAAa0F,MAAnC,EAA2CiI,CAAC,GAAGQ,GAA/C,EAAoDR,CAAC,EAArD,EAAyD;UACrD,IAAI,CAACuG,MAAM,CAAClU,KAAP,CAAa2N,CAAb,EAAgByG,IAArB,EAA2B;YACvB,MAAMC,KAAK,CAAC,2CAA2C1G,CAA3C,GAA+C,IAAhD,CAAX;UACH,CAFD,MAGK,IAAI9S,KAAK,CAACmE,QAAN,CAAekV,MAAM,CAAClU,KAAP,CAAa2N,CAAb,EAAgB,YAAhB,CAAf,CAAJ,EAAmD;YACpD;YACA,KAAK,IAAI1J,CAAC,GAAG,CAAR,EAAW6Q,KAAK,GAAGZ,MAAM,CAAClU,KAAP,CAAa2N,CAAb,EAAgB,YAAhB,EAA8BjI,MAAtD,EAA8DzB,CAAC,GAAG6Q,KAAlE,EAAyE7Q,CAAC,EAA1E,EAA8E;cAC1E,IAAIxC,KAAK,GAAGyS,MAAM,CAAClU,KAAP,CAAa2N,CAAb,EAAgB,YAAhB,EAA8B1J,CAA9B,CAAZ;;cACA,IAAIpJ,KAAK,CAACmE,QAAN,CAAeyC,KAAK,CAAC8S,IAArB,KAA8B1Z,KAAK,CAAC2Z,QAAN,CAAe/S,KAAK,CAAC8S,IAArB,CAAlC,EAA8D;gBAC1D9S,KAAK,CAAC8S,IAAN,GAAa,KAAKE,aAAL,CAAmBC,KAAnB,CAAyBjT,KAAK,CAAC8S,IAA/B,CAAb;cACH;;cACD,IAAI1Z,KAAK,CAACmE,QAAN,CAAeyC,KAAK,CAACkT,OAArB,KAAiC9Z,KAAK,CAAC2Z,QAAN,CAAe/S,KAAK,CAACkT,OAArB,CAArC,EAAoE;gBAChElT,KAAK,CAACkT,OAAN,GAAgB,KAAKF,aAAL,CAAmBC,KAAnB,CAAyBjT,KAAK,CAACkT,OAA/B,CAAhB;cACH;YACJ;;YACD3U,KAAK,CAAC8D,IAAN,CAAW;cACP8Q,UAAU,EAAEV,MAAM,CAAClU,KAAP,CAAa2N,CAAb,EAAgB,YAAhB,CADL;cAEPkH,KAAK,EAAElH;YAFA,CAAX;YAIA,OAAQuG,MAAM,CAAClU,KAAP,CAAa2N,CAAb,EAAgB,YAAhB,CAAR;UACH;QACJ;MACJ,CApDO,CAqDR;;;MACA,IAAI9S,KAAK,CAACmE,QAAN,CAAekV,MAAM,CAACzV,MAAtB,KAAiC5D,KAAK,CAACsZ,OAAN,CAAcD,MAAM,CAACzV,MAArB,CAArC,EAAmE;QAC/D,KAAK,IAAIkP,CAAC,GAAG,CAAR,EAAWQ,GAAG,GAAG+F,MAAM,CAACzV,MAAP,CAAciH,MAApC,EAA4CiI,CAAC,GAAGQ,GAAhD,EAAqDR,CAAC,EAAtD,EAA0D;UACtDuG,MAAM,CAACzV,MAAP,CAAckP,CAAd,EAAiByG,IAAjB,GAAwBF,MAAM,CAACzV,MAAP,CAAckP,CAAd,EAAiByG,IAAjB,IAAyB,YAAjD;QACH;MACJ,CA1DO,CA2DR;;;MACA,IAAIvZ,KAAK,CAACmE,QAAN,CAAekV,MAAM,CAAC1N,MAAtB,KAAiC,CAAC3L,KAAK,CAACmE,QAAN,CAAekV,MAAM,CAAC1N,MAAP,CAAc4N,IAA7B,CAAtC,EAA0E;QACtEF,MAAM,CAAC1N,MAAP,CAAc4N,IAAd,GAAqB,UAArB;MACH,CA9DO,CA+DR;;;MACA,IAAIvZ,KAAK,CAACmE,QAAN,CAAekV,MAAM,CAACvS,UAAtB,KAAqC,CAAC9G,KAAK,CAACmE,QAAN,CAAekV,MAAM,CAACvS,UAAP,CAAkByS,IAAjC,CAA1C,EAAkF;QAC9EF,MAAM,CAACvS,UAAP,CAAkByS,IAAlB,GAAyB,WAAzB;MACH;;MACD,IAAIvZ,KAAK,CAACmE,QAAN,CAAekV,MAAM,CAACzR,UAAtB,KAAqC,CAAC5H,KAAK,CAACmE,QAAN,CAAekV,MAAM,CAACzR,UAAP,CAAkB2R,IAAjC,CAA1C,EAAkF;QAC9EF,MAAM,CAACzR,UAAP,CAAkB2R,IAAlB,GAAyB,WAAzB;MACH;;MACDhZ,MAAM,CAACyD,SAAP,CAAiBoV,aAAjB,CAA+B3Y,IAA/B,CAAoC,IAApC,EAA0C4Y,MAA1C,EAtEQ,CAuER;MACA;MACA;MACA;;;MACA,IAAIlU,KAAK,CAAC0F,MAAV,EAAkB;QACd,KAAK,IAAIiI,CAAC,GAAG,CAAR,EAAWQ,GAAG,GAAGnO,KAAK,CAAC0F,MAA5B,EAAoCiI,CAAC,GAAGQ,GAAxC,EAA6CR,CAAC,EAA9C,EAAkD;UAC9C,KAAK3N,KAAL,CAAW2M,QAAX,CAAoB3M,KAAK,CAAC2N,CAAD,CAAL,CAASkH,KAA7B,EAAoCX,MAApC,GAA6C;YACzCU,UAAU,EAAE5U,KAAK,CAAC2N,CAAD,CAAL,CAASiH;UADoB,CAA7C;QAGH;MACJ;;MACD,IAAI/U,KAAK,CAAC6F,MAAV,EAAkB;QACd,KAAK,IAAIiI,CAAC,GAAG,CAAR,EAAWQ,GAAG,GAAGtO,KAAK,CAAC6F,MAA5B,EAAoCiI,CAAC,GAAGQ,GAAxC,EAA6CR,CAAC,EAA9C,EAAkD;UAC9C,KAAK9N,KAAL,CAAW8M,QAAX,CAAoB9M,KAAK,CAAC8N,CAAD,CAAL,CAASkH,KAA7B,EAAoCX,MAApC,GAA6C;YACzCU,UAAU,EAAE/U,KAAK,CAAC8N,CAAD,CAAL,CAASiH;UADoB,CAA7C;QAGH;MACJ;IACJ;EACJ,CA3FD;EA4FA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACInZ,OAAO,CAACoD,SAAR,CAAkBkW,WAAlB,GAAgC,UAAUlI,CAAV,EAAaC,CAAb,EAAgB;IAC5C,IAAID,CAAC,IAAIC,CAAT,EAAY;MACR,OAAO,CAAP;IACH,CAFD,CAGA;IAHA,KAIK,IAAID,CAAC,IAAI,YAAT,EAAuB;MACxB,OAAO,CAAP;IACH,CAFI,MAGA,IAAIC,CAAC,IAAI,YAAT,EAAuB;MACxB,OAAO,CAAC,CAAR;IACH,CAFI,MAGA,IAAID,CAAC,IAAI,YAAT,EAAuB;MACxB,OAAO,CAAP;IACH,CAFI,MAGA,IAAIC,CAAC,IAAI,YAAT,EAAuB;MACxB,OAAO,CAAC,CAAR;IACH,CAFI,MAGA,IAAID,CAAC,IAAI,QAAT,EAAmB;MACpB,OAAO,CAAP;IACH,CAFI,MAGA,IAAIC,CAAC,IAAI,QAAT,EAAmB;MACpB,OAAO,CAAC,CAAR;IACH,CAFI,MAGA,IAAID,CAAC,IAAI,QAAT,EAAmB;MACpB,OAAO,CAAP;IACH,CAFI,MAGA,IAAIC,CAAC,IAAI,QAAT,EAAmB;MACpB,OAAO,CAAC,CAAR;IACH,CAFI,MAGA;MACD,OAAO1R,MAAM,CAACyD,SAAP,CAAiBkW,WAAjB,CAA6BzZ,IAA7B,CAAkC,IAAlC,EAAwCuR,CAAxC,EAA2CC,CAA3C,CAAP;IACH;EACJ,CAhCD;EAiCA;AACJ;AACA;AACA;AACA;;;EACIrR,OAAO,CAACoD,SAAR,CAAkBmW,YAAlB,GAAiC,YAAY;IACzC,OAAO,IAAI3a,QAAJ,EAAP;EACH,CAFD;;EAGA0K,MAAM,CAACC,cAAP,CAAsBvJ,OAAO,CAACoD,SAA9B,EAAyC,eAAzC,EAA0D;IACtD;AACR;AACA;IACQoG,GAAG,EAAE,YAAY;MACb,OAAO,KAAKgQ,cAAZ;IACH,CANqD;;IAOtD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ1O,GAAG,EAAE,UAAU2O,MAAV,EAAkB;MACnB,IAAI7Z,KAAK,GAAG,IAAZ;;MACA,KAAK4Z,cAAL,GAAsBC,MAAtB;;MACA,IAAIA,MAAJ,EAAY;QACRA,MAAM,CAACnY,MAAP,CAAcC,EAAd,CAAiB,KAAjB,EAAwB,YAAY;UAChC3B,KAAK,CAACuG,QAAN,CAAevG,KAAK,CAACwE,KAArB,EAA4B;YAAEyC,KAAK,EAAE,CAAT;YAAYD,GAAG,EAAE;UAAjB,CAA5B;;UACAhH,KAAK,CAACuG,QAAN,CAAevG,KAAK,CAAC2E,KAArB,EAA4B;YAAEsC,KAAK,EAAE,CAAT;YAAYD,GAAG,EAAE;UAAjB,CAA5B;QACH,CAHD,EAGG8B,SAHH,EAGc,KAHd;MAIH;IACJ,CAxBqD;IAyBtDiB,UAAU,EAAE,IAzB0C;IA0BtDC,YAAY,EAAE;EA1BwC,CAA1D;EA4BA;AACJ;AACA;AACA;AACA;;EACI5J,OAAO,CAACoD,SAAR,CAAkBsW,QAAlB,GAA6B,UAAUC,MAAV,EAAkB;IAC3C,IAAI/Z,KAAK,GAAG,IAAZ;;IACA+Z,MAAM,CAACvV,KAAP,CAAanB,IAAb,CAAkB,UAAUoB,IAAV,EAAgB;MAC9B,IAAI+M,CAAC,GAAGxR,KAAK,CAACwE,KAAN,CAAYiE,IAAZ,CAAiBhE,IAAI,CAACuV,KAAL,EAAjB,CAAR;;MACAxI,CAAC,CAAC7L,KAAF,GAAU3F,KAAV;MACAwR,CAAC,CAAC5L,QAAF,CAAWD,KAAX,GAAmB3F,KAAnB;IACH,CAJD;IAKA+Z,MAAM,CAACpV,KAAP,CAAatB,IAAb,CAAkB,UAAUoB,IAAV,EAAgB;MAC9B,IAAI+M,CAAC,GAAGxR,KAAK,CAAC2E,KAAN,CAAY8D,IAAZ,CAAiBhE,IAAI,CAACuV,KAAL,EAAjB,CAAR;;MACAxI,CAAC,CAAC5L,QAAF,CAAWD,KAAX,GAAmB3F,KAAnB;MACAwR,CAAC,CAAC7L,KAAF,GAAU3F,KAAV;IACH,CAJD,EAP2C,CAY3C;IACA;;IACAD,MAAM,CAACyD,SAAP,CAAiBsW,QAAjB,CAA0B7Z,IAA1B,CAA+B,IAA/B,EAAqC8Z,MAArC,EAd2C,CAe3C;;;IACA,IAAIA,MAAM,CAAC5O,MAAX,EAAmB;MACf,KAAKA,MAAL,GAAc4O,MAAM,CAAC5O,MAAP,CAAc6O,KAAd,EAAd;IACH;;IACD,IAAID,MAAM,CAACzT,UAAX,EAAuB;MACnB,KAAKA,UAAL,GAAkByT,MAAM,CAACzT,UAAP,CAAkB0T,KAAlB,EAAlB;IACH;;IACD,IAAID,MAAM,CAAC3S,UAAX,EAAuB;MACnB,KAAKA,UAAL,GAAkB2S,MAAM,CAAC3S,UAAP,CAAkB4S,KAAlB,EAAlB;IACH,CAxB0C,CAyB3C;;EACH,CA1BD;EA2BA;AACJ;AACA;;;EACI5Z,OAAO,CAACoD,SAAR,CAAkByW,WAAlB,GAAgC,YAAY;IACxCla,MAAM,CAACyD,SAAP,CAAiByW,WAAjB,CAA6Bha,IAA7B,CAAkC,IAAlC;;IACA,IAAIqG,UAAU,GAAG,KAAKA,UAAtB;;IACA,IAAIA,UAAU,IAAIA,UAAU,YAAYjH,gBAAxC,EAA0D;MACtDiH,UAAU,CAAC4T,cAAX,CAA0BD,WAA1B;IACH;;IACD,IAAI7S,UAAU,GAAG,KAAKA,UAAtB;;IACA,IAAIA,UAAU,IAAIA,UAAU,YAAY/H,gBAAxC,EAA0D;MACtD+H,UAAU,CAAC8S,cAAX,CAA0BD,WAA1B;IACH;;IACD,KAAKzV,KAAL,CAAWnB,IAAX,CAAgB,UAAUoB,IAAV,EAAgB;MAC5B,IAAIA,IAAI,YAAY1F,YAApB,EAAkC;QAC9B0F,IAAI,CAACwV,WAAL;MACH;IACJ,CAJD;IAKA,KAAKtV,KAAL,CAAWtB,IAAX,CAAgB,UAAUoB,IAAV,EAAgB;MAC5B,IAAIA,IAAI,YAAY1F,YAApB,EAAkC;QAC9B0F,IAAI,CAACwV,WAAL;MACH;IACJ,CAJD;EAKH,CApBD;EAqBA;AACJ;AACA;AACA;AACA;;;EACI7Z,OAAO,CAACoD,SAAR,CAAkB2W,OAAlB,GAA4B,UAAUC,WAAV,EAAuBC,WAAvB,EAAoC;IAC5D,IAAI,KAAK/T,UAAL,YAA2BjH,gBAA/B,EAAiD;MAC7C,KAAKib,gBAAL,CAAsB,KAAKhU,UAA3B,EAAuC+T,WAAvC;IACH;;IACD,IAAI,KAAKjT,UAAL,YAA2B/H,gBAA/B,EAAiD;MAC7C,KAAKib,gBAAL,CAAsB,KAAKlT,UAA3B,EAAuCiT,WAAvC;IACH;;IACDta,MAAM,CAACyD,SAAP,CAAiB2W,OAAjB,CAAyBla,IAAzB,CAA8B,IAA9B,EAAoCma,WAApC,EAAiDC,WAAjD;EACH,CARD;EASA;AACJ;AACA;;;EACIja,OAAO,CAACoD,SAAR,CAAkB8W,gBAAlB,GAAqC,UAAUjT,SAAV,EAAqBgT,WAArB,EAAkC;IACnE,IAAI1U,KAAK,GAAG0B,SAAS,CAAC6S,cAAtB;IACAvU,KAAK,CAACpB,cAAN,GAAuBoB,KAAK,CAAC4U,IAAN,CAAWlQ,MAAlC;IACA1E,KAAK,CAAC6U,cAAN;EACH,CAJD;EAKA;AACJ;AACA;;;EACIpa,OAAO,CAACoD,SAAR,CAAkBiX,mBAAlB,GAAwC,UAAUpT,SAAV,EAAqBgT,WAArB,EAAkC;IACtE,IAAI1U,KAAK,GAAG0B,SAAS,CAAC6S,cAAtB;;IACA,IAAI1a,KAAK,CAACqI,QAAN,CAAewS,WAAf,CAAJ,EAAiC;MAC7B,OAAOA,WAAW,GAAG,CAArB,EAAwB;QACpB,IAAIxN,QAAQ,GAAG,KAAKD,SAAL,CAAe0E,QAAf,CAAwB,CAAxB,CAAf;;QACA,IAAIzE,QAAJ,EAAc;UACVlH,KAAK,CAACiH,SAAN,CAAgB8N,MAAhB,CAAuB7N,QAAvB;QACH;;QACDlH,KAAK,CAAC2C,SAAN,CAAgBjF,IAAhB,CAAqB,UAAUsX,QAAV,EAAoB;UACrC,IAAI9N,QAAQ,GAAG8N,QAAQ,CAAC/N,SAAT,CAAmB0E,QAAnB,CAA4B,CAA5B,CAAf;;UACA,IAAIzE,QAAJ,EAAc;YACV8N,QAAQ,CAAC/N,SAAT,CAAmB8N,MAAnB,CAA0B7N,QAA1B;UACH;QACJ,CALD;QAMAlH,KAAK,CAACpB,cAAN;QACA8V,WAAW;MACd;;MACD1U,KAAK,CAAC6U,cAAN;IACH;EACJ,CAnBD;EAoBA;AACJ;AACA;AACA;AACA;;;EACIpa,OAAO,CAACoD,SAAR,CAAkBoX,UAAlB,GAA+B,UAAUC,KAAV,EAAiB;IAC5C,IAAI,KAAKvU,UAAL,YAA2BjH,gBAA/B,EAAiD;MAC7C,KAAKob,mBAAL,CAAyB,KAAKnU,UAA9B,EAA0CuU,KAA1C;IACH;;IACD,IAAI,KAAKzT,UAAL,YAA2B/H,gBAA/B,EAAiD;MAC7C,KAAKob,mBAAL,CAAyB,KAAKrT,UAA9B,EAA0CyT,KAA1C;IACH;;IACD9a,MAAM,CAACyD,SAAP,CAAiBoX,UAAjB,CAA4B3a,IAA5B,CAAiC,IAAjC,EAAuC4a,KAAvC;EACH,CARD;EASA;AACJ;AACA;;;EACIza,OAAO,CAACoD,SAAR,CAAkBsI,gBAAlB,GAAqC,UAAUqJ,KAAV,EAAiB;IAClDpV,MAAM,CAACyD,SAAP,CAAiBsI,gBAAjB,CAAkC7L,IAAlC,CAAuC,IAAvC,EAA6CkV,KAA7C;;IACA,IAAI,KAAKhK,MAAT,EAAiB;MACb,KAAKA,MAAL,CAAY2P,YAAZ,CAAyBC,gBAAzB,GAA4C5F,KAA5C;MACA,KAAKlT,aAAL,CAAmB6Y,YAAnB,CAAgCC,gBAAhC,GAAmD5F,KAAnD;IACH;EACJ,CAND;;EAOA/U,OAAO,CAACoD,SAAR,CAAkBwX,mBAAlB,GAAwC,YAAY;IAChDjb,MAAM,CAACyD,SAAP,CAAiBwX,mBAAjB,CAAqC/a,IAArC,CAA0C,IAA1C;;IACA,IAAI,KAAKkL,MAAT,EAAiB;MACb,KAAKA,MAAL,CAAY2P,YAAZ,CAAyBC,gBAAzB,GAA4C,KAA5C;MACA,KAAK9Y,aAAL,CAAmB6Y,YAAnB,CAAgCC,gBAAhC,GAAmD,KAAnD;IACH;EACJ,CAND;;EAOA3a,OAAO,CAACoD,SAAR,CAAkByX,+BAAlB,GAAoD,YAAY;IAC5Dlb,MAAM,CAACyD,SAAP,CAAiByX,+BAAjB,CAAiDhb,IAAjD,CAAsD,IAAtD;;IACA,IAAI,KAAKkL,MAAT,EAAiB;MACb,KAAKA,MAAL,CAAY2P,YAAZ,CAAyBC,gBAAzB,GAA4C,IAA5C;MACA,KAAK9Y,aAAL,CAAmB6Y,YAAnB,CAAgCC,gBAAhC,GAAmD,IAAnD;IACH;EACJ,CAND;;EAOA,OAAO3a,OAAP;AACH,CAp4D4B,CAo4D3B/B,WAp4D2B,CAA7B;;AAq4DA,SAAS+B,OAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACAhB,QAAQ,CAAC8b,iBAAT,CAA2B,SAA3B,IAAwC9a,OAAxC;AACA;AACA;AACA;;AACA;AACA;AACA;;AACAR,YAAY,CAAC6I,IAAb,CAAkB;EACd0S,QAAQ,EAAEtb,qBAAqB,CAACub,OADlB;EAEdC,KAAK,EAAE,UAAU/V,MAAV,EAAkBgW,OAAlB,EAA2B;IAC9B,IAAIhW,MAAM,YAAYlF,OAAlB,IAA6BkF,MAAM,CAACgB,UAAxC,EAAoD;MAChD,IAAI+U,KAAK,GAAG/V,MAAM,CAACiW,MAAP,CAAcC,MAAd,CAAqBF,OAArB,CAAZ;MACA,IAAIG,OAAO,GAAGnW,MAAM,CAACgB,UAAP,CAAkBiV,MAAlB,CAAyBC,MAAzB,CAAgCF,OAAhC,CAAd;MACAG,OAAO,CAACC,UAAR,CAAmBC,QAAnB,GAA8B,IAA9B;MACA,OAAON,KAAP;IACH;;IACD,OAAO,IAAP;EACH;AAVa,CAAlB;AAYA;AACA;AACA;;AACAzb,YAAY,CAAC6I,IAAb,CAAkB;EACd0S,QAAQ,EAAEtb,qBAAqB,CAACub,OADlB;EAEdC,KAAK,EAAE,UAAU/V,MAAV,EAAkBgW,OAAlB,EAA2B;IAC9B,IAAIhW,MAAM,YAAYlF,OAAlB,IAA6BkF,MAAM,CAAC8B,UAAxC,EAAoD;MAChD,IAAIiU,KAAK,GAAG/V,MAAM,CAACiW,MAAP,CAAcC,MAAd,CAAqBF,OAArB,CAAZ;MACA,IAAIG,OAAO,GAAGnW,MAAM,CAAC8B,UAAP,CAAkBmU,MAAlB,CAAyBC,MAAzB,CAAgCF,OAAhC,CAAd;MACAG,OAAO,CAACC,UAAR,CAAmBC,QAAnB,GAA8B,IAA9B;MACA,OAAON,KAAP;IACH;;IACD,OAAO,IAAP;EACH;AAVa,CAAlB"},"metadata":{},"sourceType":"module"}