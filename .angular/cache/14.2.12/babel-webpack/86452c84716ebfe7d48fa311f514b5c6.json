{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Guid from \"../../core/guid\";\nimport { resetActiveElement } from \"../../core/utils/dom\";\nimport { isDefined, isObject, isFunction, isEmptyObject } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport modules from \"./ui.grid_core.modules\";\nimport { name as clickEventName } from \"../../events/click\";\nimport pointerEvents from \"../../events/pointer\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { createObjectWithChanges } from \"../../data/array_utils\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { confirm } from \"../dialog\";\nimport messageLocalization from \"../../localization/message\";\nimport devices from \"../../core/devices\";\nimport { when, Deferred, fromPromise } from \"../../core/utils/deferred\";\nimport { equalByValue, noop } from \"../../core/utils/common\";\nimport * as iconUtils from \"../../core/utils/icon\";\nimport { EDITOR_CELL_CLASS, ROW_CLASS, EDIT_FORM_CLASS, DATA_EDIT_DATA_INSERT_TYPE, DATA_EDIT_DATA_REMOVE_TYPE, EDITING_POPUP_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, TARGET_COMPONENT_NAME, EDITORS_INPUT_SELECTOR, FOCUSABLE_ELEMENT_SELECTOR, EDIT_MODE_ROW, EDIT_MODES, ROW_BASED_MODES, FIRST_NEW_ROW_POSITION, LAST_NEW_ROW_POSITION, PAGE_BOTTOM_NEW_ROW_POSITION, PAGE_TOP_NEW_ROW_POSITION, VIEWPORT_BOTTOM_NEW_ROW_POSITION, VIEWPORT_TOP_NEW_ROW_POSITION } from \"./ui.grid_core.editing_constants\";\nimport { deepExtendArraySafe } from \"../../core/utils/object\";\nvar READONLY_CLASS = \"readonly\";\nvar LINK_CLASS = \"dx-link\";\nvar ROW_SELECTED = \"dx-selection\";\nvar EDIT_BUTTON_CLASS = \"dx-edit-button\";\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\nvar COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\";\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\nvar ROW_INSERTED = \"dx-row-inserted\";\nvar ROW_MODIFIED = \"dx-row-modified\";\nvar CELL_MODIFIED = \"dx-cell-modified\";\nvar EDITING_NAMESPACE = \"dxDataGridEditing\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar DATA_EDIT_DATA_UPDATE_TYPE = \"update\";\nvar DEFAULT_START_EDIT_ACTION = \"click\";\nvar EDIT_LINK_CLASS = {\n  save: \"dx-link-save\",\n  cancel: \"dx-link-cancel\",\n  edit: \"dx-link-edit\",\n  undelete: \"dx-link-undelete\",\n  delete: \"dx-link-delete\",\n  add: \"dx-link-add\"\n};\nvar EDIT_ICON_CLASS = {\n  save: \"save\",\n  cancel: \"revert\",\n  edit: \"edit\",\n  undelete: \"revert\",\n  delete: \"trash\",\n  add: \"add\"\n};\nvar METHOD_NAMES = {\n  edit: \"editRow\",\n  delete: \"deleteRow\",\n  undelete: \"undeleteRow\",\n  save: \"saveEditData\",\n  cancel: \"cancelEditData\",\n  add: \"addRowByRowIndex\"\n};\nvar ACTION_OPTION_NAMES = {\n  add: \"allowAdding\",\n  edit: \"allowUpdating\",\n  delete: \"allowDeleting\"\n};\nvar BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\nvar EDITING_CHANGES_OPTION_NAME = \"editing.changes\";\n\nvar createFailureHandler = function (deferred) {\n  return function (arg) {\n    var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\n    deferred.reject(error);\n  };\n};\n\nvar isEditingCell = function (isEditRow, cellOptions) {\n  return cellOptions.isEditing || isEditRow && cellOptions.column.allowEditing;\n};\n\nvar isEditingOrShowEditorAlwaysDataCell = function (isEditRow, cellOptions) {\n  var isCommandCell = !!cellOptions.column.command;\n  var isEditing = isEditingCell(isEditRow, cellOptions);\n  var isEditorCell = !isCommandCell && (isEditing || cellOptions.column.showEditorAlways);\n  return \"data\" === cellOptions.rowType && isEditorCell;\n};\n\nvar EditingController = modules.ViewController.inherit(function () {\n  var getButtonIndex = (buttons, name) => {\n    var result = -1;\n    buttons.some((button, index) => {\n      if (getButtonName(button) === name) {\n        result = index;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  function getButtonName(button) {\n    return isObject(button) ? button.name : button;\n  }\n\n  var members = {\n    init: function () {\n      this._columnsController = this.getController(\"columns\");\n      this._dataController = this.getController(\"data\");\n      this._rowsView = this.getView(\"rowsView\");\n      this._lastOperation = null;\n      this._changes = [];\n\n      if (this._deferreds) {\n        this._deferreds.forEach(d => d.reject(\"cancel\"));\n      }\n\n      this._deferreds = [];\n\n      if (!this._dataChangedHandler) {\n        this._dataChangedHandler = this._handleDataChanged.bind(this);\n\n        this._dataController.changed.add(this._dataChangedHandler);\n      }\n\n      if (!this._saveEditorHandler) {\n        this.createAction(\"onInitNewRow\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowInserting\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowInserted\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditingStart\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowUpdating\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowUpdated\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowRemoving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowRemoved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onSaved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onSaving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditCanceling\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditCanceled\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n      }\n\n      this._updateEditColumn();\n\n      this._updateEditButtons();\n\n      if (!this._internalState) {\n        this._internalState = [];\n      }\n\n      this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;\n      this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true;\n    },\n    getEditMode: function () {\n      var editMode = this.option(\"editing.mode\");\n\n      if (-1 !== EDIT_MODES.indexOf(editMode)) {\n        return editMode;\n      }\n\n      return EDIT_MODE_ROW;\n    },\n    _getDefaultEditorTemplate: function () {\n      return (container, options) => {\n        var $editor = $(\"<div>\").appendTo(container);\n        this.getController(\"editorFactory\").createEditor($editor, extend({}, options.column, {\n          value: options.value,\n          setValue: options.setValue,\n          row: options.row,\n          parentType: \"dataRow\",\n          width: null,\n          readOnly: !options.setValue,\n          isOnForm: options.isOnForm,\n          id: options.id\n        }));\n      };\n    },\n    _getNewRowPosition: function () {\n      var newRowPosition = this.option(\"editing.newRowPosition\");\n      var scrollingMode = this.option(\"scrolling.mode\");\n\n      if (\"virtual\" === scrollingMode) {\n        switch (newRowPosition) {\n          case PAGE_TOP_NEW_ROW_POSITION:\n            return VIEWPORT_TOP_NEW_ROW_POSITION;\n\n          case PAGE_BOTTOM_NEW_ROW_POSITION:\n            return VIEWPORT_BOTTOM_NEW_ROW_POSITION;\n\n          default:\n            return newRowPosition;\n        }\n      }\n\n      return newRowPosition;\n    },\n    getChanges: function () {\n      return this.option(EDITING_CHANGES_OPTION_NAME);\n    },\n    getInsertRowCount: function () {\n      var changes = this.option(EDITING_CHANGES_OPTION_NAME);\n      return changes.filter(change => \"insert\" === change.type).length;\n    },\n    resetChanges: function () {\n      var changes = this.getChanges();\n      var needReset = null === changes || void 0 === changes ? void 0 : changes.length;\n\n      if (needReset) {\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, []);\n      }\n    },\n    _getInternalData: function (key) {\n      return this._internalState.filter(item => equalByValue(item.key, key))[0];\n    },\n    _addInternalData: function (params) {\n      var internalData = this._getInternalData(params.key);\n\n      if (internalData) {\n        return extend(internalData, params);\n      }\n\n      this._internalState.push(params);\n\n      return params;\n    },\n    _getOldData: function (key) {\n      var _this$_getInternalDat;\n\n      return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData;\n    },\n    getUpdatedData: function (data) {\n      var key = this._dataController.keyOf(data);\n\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n      if (changes[editIndex]) {\n        return createObjectWithChanges(data, changes[editIndex].data);\n      }\n\n      return data;\n    },\n    getInsertedData: function () {\n      return this.getChanges().filter(change => change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE).map(change => change.data);\n    },\n    getRemovedData: function () {\n      return this.getChanges().filter(change => this._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE).map(change => this._getOldData(change.key));\n    },\n    _fireDataErrorOccurred: function (arg) {\n      if (\"cancel\" === arg) {\n        return;\n      }\n\n      var $popupContent = this.getPopupContent();\n\n      this._dataController.dataErrorOccurred.fire(arg, $popupContent);\n    },\n    _needToCloseEditableCell: noop,\n    _closeEditItem: noop,\n    _handleDataChanged: noop,\n    _isDefaultButtonVisible: function (button, options) {\n      var result = true;\n\n      switch (button.name) {\n        case \"delete\":\n          result = this.allowDeleting(options);\n          break;\n\n        case \"undelete\":\n          result = false;\n      }\n\n      return result;\n    },\n    _isButtonVisible: function (button, options) {\n      var visible = button.visible;\n\n      if (!isDefined(visible)) {\n        return this._isDefaultButtonVisible(button, options);\n      }\n\n      return isFunction(visible) ? visible.call(button, {\n        component: options.component,\n        row: options.row,\n        column: options.column\n      }) : visible;\n    },\n    _isButtonDisabled: function (button, options) {\n      var disabled = button.disabled;\n      return isFunction(disabled) ? disabled.call(button, {\n        component: options.component,\n        row: options.row,\n        column: options.column\n      }) : !!disabled;\n    },\n    _getButtonConfig: function (button, options) {\n      var config = isObject(button) ? button : {};\n      var buttonName = getButtonName(button);\n\n      var editingTexts = (options => {\n        var editingTexts = options.component.option(\"editing.texts\") || {};\n        return {\n          save: editingTexts.saveRowChanges,\n          cancel: editingTexts.cancelRowChanges,\n          edit: editingTexts.editRow,\n          undelete: editingTexts.undeleteRow,\n          delete: editingTexts.deleteRow,\n          add: editingTexts.addRowToNode\n        };\n      })(options);\n\n      var methodName = METHOD_NAMES[buttonName];\n      var editingOptions = this.option(\"editing\");\n      var actionName = ACTION_OPTION_NAMES[buttonName];\n      var allowAction = actionName ? editingOptions[actionName] : true;\n      return extend({\n        name: buttonName,\n        text: editingTexts[buttonName],\n        cssClass: EDIT_LINK_CLASS[buttonName]\n      }, {\n        onClick: methodName && (e => {\n          var event = e.event;\n          event.stopPropagation();\n          event.preventDefault();\n          setTimeout(() => {\n            options.row && allowAction && this[methodName] && this[methodName](options.row.rowIndex);\n          });\n        })\n      }, config);\n    },\n    _getEditingButtons: function (options) {\n      var buttonIndex;\n      var haveCustomButtons = !!options.column.buttons;\n      var buttons = (options.column.buttons || []).slice();\n\n      if (haveCustomButtons) {\n        buttonIndex = getButtonIndex(buttons, \"edit\");\n\n        if (buttonIndex >= 0) {\n          if (getButtonIndex(buttons, \"save\") < 0) {\n            buttons.splice(buttonIndex + 1, 0, \"save\");\n          }\n\n          if (getButtonIndex(buttons, \"cancel\") < 0) {\n            buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\");\n          }\n        }\n\n        buttonIndex = getButtonIndex(buttons, \"delete\");\n\n        if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\n          buttons.splice(buttonIndex + 1, 0, \"undelete\");\n        }\n      } else {\n        buttons = BUTTON_NAMES.slice();\n      }\n\n      return buttons.map(button => this._getButtonConfig(button, options));\n    },\n    _renderEditingButtons: function ($container, buttons, options, change) {\n      buttons.forEach(button => {\n        if (this._isButtonVisible(button, options)) {\n          this._createButton($container, button, options, change);\n        }\n      });\n    },\n    _getEditCommandCellTemplate: function () {\n      return (container, options, change) => {\n        var $container = $(container);\n\n        if (\"data\" === options.rowType) {\n          var buttons = this._getEditingButtons(options);\n\n          this._renderEditingButtons($container, buttons, options, change);\n\n          options.watch && options.watch(() => buttons.map(button => this._isButtonVisible(button, options)), () => {\n            $container.empty();\n\n            this._renderEditingButtons($container, buttons, options);\n          });\n        } else {\n          gridCoreUtils.setEmptyText($container);\n        }\n      };\n    },\n    isRowBasedEditMode: function () {\n      var editMode = this.getEditMode();\n      return -1 !== ROW_BASED_MODES.indexOf(editMode);\n    },\n    getFirstEditableColumnIndex: function () {\n      var columnsController = this.getController(\"columns\");\n      var columnIndex;\n      var visibleColumns = columnsController.getVisibleColumns();\n      each(visibleColumns, function (index, column) {\n        if (column.allowEditing) {\n          columnIndex = index;\n          return false;\n        }\n      });\n      return columnIndex;\n    },\n    getFirstEditableCellInRow: function (rowIndex) {\n      var rowsView = this.getView(\"rowsView\");\n      return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex());\n    },\n    getFocusedCellInRow: function (rowIndex) {\n      return this.getFirstEditableCellInRow(rowIndex);\n    },\n    getIndexByKey: function (key, items) {\n      return gridCoreUtils.getIndexByKey(key, items);\n    },\n    hasChanges: function (rowIndex) {\n      var changes = this.getChanges();\n      var result = false;\n\n      for (var i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {\n        if (changes[i].type && (!isDefined(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {\n          result = true;\n          break;\n        }\n      }\n\n      return result;\n    },\n    dispose: function () {\n      this.callBase();\n      clearTimeout(this._inputFocusTimeoutID);\n      eventsEngine.off(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\n      eventsEngine.off(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\n      eventsEngine.off(domAdapter.getDocument(), clickEventName, this._saveEditorHandler);\n    },\n    _silentOption: function (name, value) {\n      if (\"editing.changes\" === name) {\n        this._changes = deepExtendArraySafe([], value);\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    optionChanged: function (args) {\n      if (\"editing\" === args.name) {\n        var fullName = args.fullName;\n\n        if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {\n          this._handleEditRowKeyChange(args);\n        } else if (fullName === EDITING_CHANGES_OPTION_NAME) {\n          var isEqual = equalByValue(args.value, this._changes, -1);\n\n          if (!isEqual) {\n            this._changes = deepExtendArraySafe([], args.value);\n\n            this._handleChangesChange(args);\n          }\n        } else if (!args.handled) {\n          this._columnsController.reinit();\n\n          this.init();\n          this.resetChanges();\n\n          this._resetEditColumnName();\n\n          this._resetEditRowKey();\n        }\n\n        args.handled = true;\n      } else {\n        this.callBase(args);\n      }\n    },\n    _handleEditRowKeyChange: function (args) {\n      var rowIndex = this._dataController.getRowIndexByKey(args.value);\n\n      var oldRowIndexCorrection = this._getEditRowIndexCorrection();\n\n      var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\n\n      if (isDefined(args.value)) {\n        if (args.value !== args.previousValue) {\n          this._editRowFromOptionChanged(rowIndex, oldRowIndex);\n        }\n      } else {\n        this.cancelEditData();\n      }\n    },\n    _handleChangesChange: function (args) {\n      var dataController = this._dataController;\n      var changes = args.value;\n\n      if (!args.value.length && !args.previousValue.length) {\n        return;\n      }\n\n      changes.forEach(change => {\n        if (\"insert\" === change.type) {\n          this._addInsertInfo(change);\n        } else {\n          var _items$rowIndex;\n\n          var items = dataController.items();\n          var rowIndex = dataController.getRowIndexByKey(change.key);\n\n          this._addInternalData({\n            key: change.key,\n            oldData: null === (_items$rowIndex = items[rowIndex]) || void 0 === _items$rowIndex ? void 0 : _items$rowIndex.data\n          });\n        }\n      });\n      dataController.updateItems({\n        repaintChangesOnly: true,\n        isLiveUpdate: false,\n        isOptionChanged: true\n      });\n    },\n    publicMethods: function () {\n      return [\"addRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"];\n    },\n    refresh: function () {\n      if (!isDefined(this._pageIndex)) {\n        return;\n      }\n\n      this._refreshCore.apply(this, arguments);\n    },\n    _refreshCore: noop,\n    isEditing: function () {\n      var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\n      return isEditRowKeyDefined;\n    },\n    isEditRow: function () {\n      return false;\n    },\n    _setEditRowKey: function (value, silent) {\n      if (silent) {\n        this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value);\n      } else {\n        this.option(EDITING_EDITROWKEY_OPTION_NAME, value);\n      }\n    },\n    _setEditRowKeyByIndex: function (rowIndex, silent) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n\n      if (void 0 === key) {\n        this._dataController.fireError(\"E1043\");\n\n        return;\n      }\n\n      this._setEditRowKey(key, silent);\n    },\n    getEditRowIndex: function () {\n      return this._getVisibleEditRowIndex();\n    },\n    getEditFormRowIndex: function () {\n      return -1;\n    },\n\n    isEditRowByIndex(rowIndex) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n\n      var isKeyEqual = isDefined(key) && equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key);\n\n      if (isKeyEqual) {\n        return this._getVisibleEditRowIndex() === rowIndex;\n      }\n\n      return isKeyEqual;\n    },\n\n    isEditCell: function (visibleRowIndex, columnIndex) {\n      return this.isEditRowByIndex(visibleRowIndex) && this._getVisibleEditColumnIndex() === columnIndex;\n    },\n    getPopupContent: noop,\n    _isProcessedItem: function (item) {\n      return false;\n    },\n    _getInsertRowIndex: function (items, change, isProcessedItems) {\n      var result = -1;\n      var dataController = this._dataController;\n\n      var key = this._getInsertAfterOrBeforeKey(change);\n\n      if (!isDefined(key) && 0 === items.length) {\n        result = 0;\n      } else if (isDefined(key)) {\n        items.some((item, index) => {\n          var isProcessedItem = isProcessedItems || this._isProcessedItem(item);\n\n          if (isObject(item)) {\n            if (isProcessedItem || isDefined(item[INSERT_INDEX])) {\n              if (equalByValue(item.key, key)) {\n                result = index;\n              }\n            } else if (equalByValue(dataController.keyOf(item), key)) {\n              result = index;\n            }\n          }\n\n          if (result >= 0) {\n            var nextItem = items[result + 1];\n\n            if (nextItem && (\"detail\" === nextItem.rowType || \"detailAdaptive\" === nextItem.rowType) && isDefined(change.insertAfterKey)) {\n              return;\n            }\n\n            if (isDefined(change.insertAfterKey)) {\n              result += 1;\n            }\n\n            return true;\n          }\n        });\n      }\n\n      return result;\n    },\n    _generateNewItem: function (key) {\n      var _this$_getInternalDat2;\n\n      var item = {\n        key: key\n      };\n      var insertInfo = null === (_this$_getInternalDat2 = this._getInternalData(key)) || void 0 === _this$_getInternalDat2 ? void 0 : _this$_getInternalDat2.insertInfo;\n\n      if (null !== insertInfo && void 0 !== insertInfo && insertInfo[INSERT_INDEX]) {\n        item[INSERT_INDEX] = insertInfo[INSERT_INDEX];\n      }\n\n      return item;\n    },\n    _getLoadedRowIndex: function (items, change, isProcessedItems) {\n      var loadedRowIndex = this._getInsertRowIndex(items, change, isProcessedItems);\n\n      var dataController = this._dataController;\n\n      if (loadedRowIndex < 0) {\n        var newRowPosition = this._getNewRowPosition();\n\n        var pageIndex = dataController.pageIndex();\n\n        var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n\n        if (newRowPosition !== LAST_NEW_ROW_POSITION && 0 === pageIndex && !isDefined(insertAfterOrBeforeKey)) {\n          loadedRowIndex = 0;\n        } else if (newRowPosition === LAST_NEW_ROW_POSITION && dataController.isLastPageLoaded()) {\n          loadedRowIndex = items.length;\n        }\n      }\n\n      return loadedRowIndex;\n    },\n    processItems: function (items, e) {\n      var changeType = e.changeType;\n      this.update(changeType);\n      var changes = this.getChanges();\n      changes.forEach(change => {\n        var _this$_getInternalDat3;\n\n        var isInsert = change.type === DATA_EDIT_DATA_INSERT_TYPE;\n\n        if (!isInsert) {\n          return;\n        }\n\n        var key = change.key;\n        var insertInfo = null === (_this$_getInternalDat3 = this._getInternalData(key)) || void 0 === _this$_getInternalDat3 ? void 0 : _this$_getInternalDat3.insertInfo;\n\n        if (!isDefined(key) || !isDefined(insertInfo)) {\n          insertInfo = this._addInsertInfo(change);\n          key = insertInfo.key;\n        }\n\n        var loadedRowIndex = this._getLoadedRowIndex(items, change);\n\n        var item = this._generateNewItem(key);\n\n        if (loadedRowIndex >= 0) {\n          items.splice(loadedRowIndex, 0, item);\n        }\n      });\n      return items;\n    },\n    processDataItem: function (item, options, generateDataValues) {\n      var columns = options.visibleColumns;\n      var key = item.data[INSERT_INDEX] ? item.data.key : item.key;\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n      item.isEditing = false;\n\n      if (editIndex >= 0) {\n        this._processDataItemCore(item, changes[editIndex], key, columns, generateDataValues);\n      }\n    },\n    _processDataItemCore: function (item, change, key, columns, generateDataValues) {\n      var {\n        data: data,\n        type: type\n      } = change;\n\n      switch (type) {\n        case DATA_EDIT_DATA_INSERT_TYPE:\n          item.isNewRow = true;\n          item.key = key;\n          item.data = data;\n          break;\n\n        case DATA_EDIT_DATA_UPDATE_TYPE:\n          item.modified = true;\n          item.oldData = item.data;\n          item.data = createObjectWithChanges(item.data, data);\n          item.modifiedValues = generateDataValues(data, columns, true);\n          break;\n\n        case DATA_EDIT_DATA_REMOVE_TYPE:\n          item.removed = true;\n      }\n    },\n    _initNewRow: function (options) {\n      this.executeAction(\"onInitNewRow\", options);\n\n      if (options.promise) {\n        var deferred = new Deferred();\n        when(fromPromise(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\n        return deferred;\n      }\n    },\n    _createInsertInfo: function () {\n      var insertInfo = {};\n      insertInfo[INSERT_INDEX] = this._getInsertIndex();\n      return insertInfo;\n    },\n    _addInsertInfo: function (change, parentKey) {\n      var _this$_getInternalDat4;\n\n      var insertInfo;\n      var {\n        key: key\n      } = change;\n\n      if (!isDefined(key)) {\n        key = String(new Guid());\n        change.key = key;\n      }\n\n      insertInfo = null === (_this$_getInternalDat4 = this._getInternalData(key)) || void 0 === _this$_getInternalDat4 ? void 0 : _this$_getInternalDat4.insertInfo;\n\n      if (!isDefined(insertInfo)) {\n        var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n\n        insertInfo = this._createInsertInfo();\n\n        if (!isDefined(insertAfterOrBeforeKey)) {\n          this._setInsertAfterOrBeforeKey(change, parentKey);\n        }\n      }\n\n      this._addInternalData({\n        insertInfo: insertInfo,\n        key: key\n      });\n\n      return {\n        insertInfo: insertInfo,\n        key: key\n      };\n    },\n    _setInsertAfterOrBeforeKey: function (change, parentKey) {\n      var dataController = this._dataController;\n      var allItems = dataController.items(true);\n      var rowsView = this.getView(\"rowsView\");\n\n      var newRowPosition = this._getNewRowPosition();\n\n      switch (newRowPosition) {\n        case FIRST_NEW_ROW_POSITION:\n        case LAST_NEW_ROW_POSITION:\n          break;\n\n        case PAGE_TOP_NEW_ROW_POSITION:\n        case PAGE_BOTTOM_NEW_ROW_POSITION:\n          if (allItems.length) {\n            var itemIndex = newRowPosition === PAGE_TOP_NEW_ROW_POSITION ? 0 : allItems.length - 1;\n            change[0 === itemIndex ? \"insertBeforeKey\" : \"insertAfterKey\"] = allItems[itemIndex].key;\n          }\n\n          break;\n\n        default:\n          var isViewportBottom = newRowPosition === VIEWPORT_BOTTOM_NEW_ROW_POSITION;\n          var visibleItemIndex = isViewportBottom ? null === rowsView || void 0 === rowsView ? void 0 : rowsView.getBottomVisibleItemIndex() : null === rowsView || void 0 === rowsView ? void 0 : rowsView.getTopVisibleItemIndex();\n          var row = dataController.getVisibleRows()[visibleItemIndex];\n\n          if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\n            visibleItemIndex++;\n          }\n\n          var insertKey = dataController.getKeyByRowIndex(visibleItemIndex);\n\n          if (isDefined(insertKey)) {\n            change.insertBeforeKey = insertKey;\n          }\n\n      }\n    },\n    _getInsertIndex: function () {\n      var maxInsertIndex = 0;\n      this.getChanges().forEach(editItem => {\n        var _this$_getInternalDat5;\n\n        var insertInfo = null === (_this$_getInternalDat5 = this._getInternalData(editItem.key)) || void 0 === _this$_getInternalDat5 ? void 0 : _this$_getInternalDat5.insertInfo;\n\n        if (isDefined(insertInfo) && editItem.type === DATA_EDIT_DATA_INSERT_TYPE && insertInfo[INSERT_INDEX] > maxInsertIndex) {\n          maxInsertIndex = insertInfo[INSERT_INDEX];\n        }\n      });\n      return maxInsertIndex + 1;\n    },\n    _getInsertAfterOrBeforeKey: function (insertChange) {\n      var _insertChange$insertA;\n\n      return null !== (_insertChange$insertA = insertChange.insertAfterKey) && void 0 !== _insertChange$insertA ? _insertChange$insertA : insertChange.insertBeforeKey;\n    },\n    _getPageIndexToInsertRow: function () {\n      var newRowPosition = this._getNewRowPosition();\n\n      var dataController = this._dataController;\n      var pageIndex = dataController.pageIndex();\n      var lastPageIndex = dataController.pageCount() - 1;\n\n      if (newRowPosition === FIRST_NEW_ROW_POSITION && 0 !== pageIndex) {\n        return 0;\n      } else if (newRowPosition === LAST_NEW_ROW_POSITION && pageIndex !== lastPageIndex) {\n        return lastPageIndex;\n      }\n\n      return -1;\n    },\n    addRow: function (parentKey) {\n      var dataController = this._dataController;\n      var store = dataController.store();\n\n      if (!store) {\n        dataController.fireError(\"E1052\", this.component.NAME);\n        return new Deferred().reject();\n      }\n\n      return this._addRow(parentKey);\n    },\n    _addRow: function (parentKey) {\n      var dataController = this._dataController;\n      var store = dataController.store();\n      var key = store && store.key();\n      var param = {\n        data: {}\n      };\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      var deferred = new Deferred();\n      this.refresh({\n        allowCancelEditing: true\n      });\n\n      if (!this._allowRowAdding()) {\n        when(this._navigateToNewRow(oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\n        return deferred.promise();\n      }\n\n      if (!key) {\n        param.data.__KEY__ = String(new Guid());\n      }\n\n      when(this._initNewRow(param, parentKey)).done(() => {\n        if (this._allowRowAdding()) {\n          when(this._addRowCore(param.data, parentKey, oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\n        } else {\n          deferred.reject(\"cancel\");\n        }\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _allowRowAdding: function () {\n      var insertIndex = this._getInsertIndex();\n\n      if (insertIndex > 1) {\n        return false;\n      }\n\n      return true;\n    },\n    _addRowCore: function (data, parentKey, initialOldEditRowIndex) {\n      var change = {\n        data: data,\n        type: DATA_EDIT_DATA_INSERT_TYPE\n      };\n\n      var editRowIndex = this._getVisibleEditRowIndex();\n\n      var insertInfo = this._addInsertInfo(change, parentKey);\n\n      var key = insertInfo.key;\n\n      this._setEditRowKey(key, true);\n\n      this._addChange(change);\n\n      return this._navigateToNewRow(initialOldEditRowIndex, change, editRowIndex);\n    },\n    _navigateToNewRow: function (oldEditRowIndex, change, editRowIndex) {\n      var _editRowIndex, _change;\n\n      var d = new Deferred();\n      var dataController = this._dataController;\n      var focusController = this.getController(\"focus\");\n      editRowIndex = null !== (_editRowIndex = editRowIndex) && void 0 !== _editRowIndex ? _editRowIndex : -1;\n      change = null !== (_change = change) && void 0 !== _change ? _change : this.getChanges().filter(c => c.type === DATA_EDIT_DATA_INSERT_TYPE)[0];\n\n      if (!change) {\n        return d.reject(\"cancel\").promise();\n      }\n\n      var pageIndexToInsertRow = this._getPageIndexToInsertRow();\n\n      var rowIndex = this._getLoadedRowIndex(dataController.items(), change, true);\n\n      var navigateToRowByKey = key => {\n        when(null === focusController || void 0 === focusController ? void 0 : focusController.navigateToRow(key)).done(() => {\n          rowIndex = dataController.getRowIndexByKey(change.key);\n          d.resolve();\n        });\n      };\n\n      var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n\n      if (pageIndexToInsertRow >= 0) {\n        dataController.pageIndex(pageIndexToInsertRow).done(() => {\n          navigateToRowByKey(change.key);\n        }).fail(d.reject);\n      } else if (rowIndex < 0 && isDefined(insertAfterOrBeforeKey)) {\n        navigateToRowByKey(insertAfterOrBeforeKey);\n      } else {\n        dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, editRowIndex, rowIndex]\n        });\n        rowIndex = dataController.getRowIndexByKey(change.key);\n\n        if (rowIndex < 0) {\n          navigateToRowByKey(change.key);\n        } else {\n          d.resolve();\n        }\n      }\n\n      d.done(() => {\n        this._showAddedRow(rowIndex);\n\n        this._afterInsertRow(change.key);\n      });\n      return d.promise();\n    },\n    _showAddedRow: function (rowIndex) {\n      this._focusFirstEditableCellInRow(rowIndex);\n    },\n    _beforeFocusElementInRow: noop,\n    _focusFirstEditableCellInRow: function (rowIndex) {\n      var dataController = this._dataController;\n      var key = dataController.getKeyByRowIndex(rowIndex);\n      var $firstCell = this.getFirstEditableCellInRow(rowIndex);\n      this._editCellInProgress = true;\n\n      this._delayedInputFocus($firstCell, () => {\n        rowIndex = dataController.getRowIndexByKey(key);\n        this._editCellInProgress = false;\n\n        this._beforeFocusElementInRow(rowIndex);\n      });\n    },\n    _isEditingStart: function (options) {\n      this.executeAction(\"onEditingStart\", options);\n      return options.cancel;\n    },\n    _beforeUpdateItems: noop,\n    _getVisibleEditColumnIndex: function () {\n      var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n\n      if (!isDefined(editColumnName)) {\n        return -1;\n      }\n\n      return this._columnsController.getVisibleColumnIndex(editColumnName);\n    },\n    _setEditColumnNameByIndex: function (index, silent) {\n      var _visibleColumns$index;\n\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent);\n    },\n    _setEditColumnName: function (name, silent) {\n      if (silent) {\n        this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n      } else {\n        this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n      }\n    },\n    _resetEditColumnName: function () {\n      this._setEditColumnName(null, true);\n    },\n    _getEditColumn: function () {\n      var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n      return this._getColumnByName(editColumnName);\n    },\n    _getColumnByName: function (name) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      var editColumn;\n      isDefined(name) && visibleColumns.some(column => {\n        if (column.name === name) {\n          editColumn = column;\n          return true;\n        }\n      });\n      return editColumn;\n    },\n    _getVisibleEditRowIndex: function (columnName) {\n      var dataController = this._dataController;\n      var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n      var rowIndex = dataController.getRowIndexByKey(editRowKey);\n\n      if (-1 === rowIndex) {\n        return rowIndex;\n      }\n\n      return rowIndex + this._getEditRowIndexCorrection(columnName);\n    },\n    _getEditRowIndexCorrection: function (columnName) {\n      var editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();\n      var isColumnHidden = \"adaptiveHidden\" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);\n      return isColumnHidden ? 1 : 0;\n    },\n    _resetEditRowKey: function () {\n      this._setEditRowKey(null, true);\n    },\n    _resetEditIndices: function () {\n      this._resetEditColumnName();\n\n      this._resetEditRowKey();\n    },\n    editRow: function (rowIndex) {\n      var _item$oldData;\n\n      var dataController = this._dataController;\n      var items = dataController.items();\n      var item = items[rowIndex];\n      var params = {\n        data: item && item.data,\n        cancel: false\n      };\n\n      var oldRowIndex = this._getVisibleEditRowIndex();\n\n      if (!item) {\n        return;\n      }\n\n      if (rowIndex === oldRowIndex) {\n        return true;\n      }\n\n      if (void 0 === item.key) {\n        this._dataController.fireError(\"E1043\");\n\n        return;\n      }\n\n      if (!item.isNewRow) {\n        params.key = item.key;\n      }\n\n      if (this._isEditingStart(params)) {\n        return;\n      }\n\n      this.resetChanges();\n      this.init();\n\n      this._resetEditColumnName();\n\n      this._pageIndex = dataController.pageIndex();\n\n      this._addInternalData({\n        key: item.key,\n        oldData: null !== (_item$oldData = item.oldData) && void 0 !== _item$oldData ? _item$oldData : item.data\n      });\n\n      this._setEditRowKey(item.key);\n    },\n    _editRowFromOptionChanged: function (rowIndex, oldRowIndex) {\n      var rowIndices = [oldRowIndex, rowIndex];\n\n      this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);\n\n      this._editRowFromOptionChangedCore(rowIndices, rowIndex);\n    },\n    _editRowFromOptionChangedCore: function (rowIndices, rowIndex, preventRendering) {\n      this._needFocusEditor = true;\n\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: rowIndices,\n        cancel: preventRendering\n      });\n    },\n    _focusEditorIfNeed: noop,\n    _showEditPopup: noop,\n    _repaintEditPopup: noop,\n    _getEditPopupHiddenHandler: function () {\n      return e => {\n        if (this.isEditing()) {\n          this.cancelEditData();\n        }\n      };\n    },\n    _getPopupEditFormTemplate: noop,\n    _getSaveButtonConfig: function () {\n      return {\n        text: this.option(\"editing.texts.saveRowChanges\"),\n        onClick: this.saveEditData.bind(this)\n      };\n    },\n    _getCancelButtonConfig: function () {\n      return {\n        text: this.option(\"editing.texts.cancelRowChanges\"),\n        onClick: this.cancelEditData.bind(this)\n      };\n    },\n    _removeInternalData: function (key) {\n      var internalData = this._getInternalData(key);\n\n      var index = this._internalState.indexOf(internalData);\n\n      if (index > -1) {\n        this._internalState.splice(index, 1);\n      }\n    },\n    _updateInsertAfterOrBeforeKeys: function (changes, index) {\n      var removeChange = changes[index];\n      changes.forEach(change => {\n        var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n\n        if (equalByValue(insertAfterOrBeforeKey, removeChange.key)) {\n          change[isDefined(change.insertAfterKey) ? \"insertAfterKey\" : \"insertBeforeKey\"] = this._getInsertAfterOrBeforeKey(removeChange);\n        }\n      });\n    },\n    _removeChange: function (index) {\n      if (index >= 0) {\n        var changes = [...this.getChanges()];\n        var key = changes[index].key;\n\n        this._removeInternalData(key);\n\n        this._updateInsertAfterOrBeforeKeys(changes, index);\n\n        changes.splice(index, 1);\n\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n\n        if (equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {\n          this._resetEditIndices();\n        }\n      }\n    },\n    executeOperation: function (deferred, func) {\n      this._lastOperation && this._lastOperation.reject();\n      this._lastOperation = deferred;\n      this.waitForDeferredOperations().done(() => {\n        if (\"rejected\" === deferred.state()) {\n          return;\n        }\n\n        func();\n        this._lastOperation = null;\n      }).fail(() => {\n        deferred.reject();\n        this._lastOperation = null;\n      });\n    },\n    waitForDeferredOperations: function () {\n      return when(...this._deferreds);\n    },\n    _processCanceledEditingCell: noop,\n    _repaintEditCell: function (column, oldColumn, oldEditRowIndex) {\n      this._needFocusEditor = true;\n\n      if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\n        this._editCellInProgress = true;\n        this.getController(\"editorFactory\").loseFocus();\n\n        this._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]\n        });\n      } else if (column !== oldColumn) {\n        this._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: []\n        });\n      }\n    },\n    _delayedInputFocus: function ($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\n      var inputFocus = () => {\n        if (beforeFocusCallback) {\n          beforeFocusCallback();\n        }\n\n        if ($cell) {\n          var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\n          gridCoreUtils.focusAndSelectElement(this, $focusableElement);\n        }\n\n        this._beforeFocusCallback = null;\n      };\n\n      if (devices.real().ios || devices.real().android) {\n        inputFocus();\n      } else {\n        if (this._beforeFocusCallback) {\n          this._beforeFocusCallback();\n        }\n\n        clearTimeout(this._inputFocusTimeoutID);\n\n        if (callBeforeFocusCallbackAlways) {\n          this._beforeFocusCallback = beforeFocusCallback;\n        }\n\n        this._inputFocusTimeoutID = setTimeout(inputFocus);\n      }\n    },\n    _focusEditingCell: function (beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\n      var rowsView = this.getView(\"rowsView\");\n\n      var editColumnIndex = this._getVisibleEditColumnIndex();\n\n      $editCell = $editCell || rowsView && rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\n\n      if ($editCell) {\n        this._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways);\n      }\n    },\n    deleteRow: function (rowIndex) {\n      this._checkAndDeleteRow(rowIndex);\n    },\n    _checkAndDeleteRow: function (rowIndex) {\n      var editingOptions = this.option(\"editing\");\n      var editingTexts = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.texts;\n      var confirmDelete = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.confirmDelete;\n      var confirmDeleteMessage = null === editingTexts || void 0 === editingTexts ? void 0 : editingTexts.confirmDeleteMessage;\n\n      var item = this._dataController.items()[rowIndex];\n\n      var allowDeleting = !this.isEditing() || item.isNewRow;\n\n      if (item && allowDeleting) {\n        if (!confirmDelete || !confirmDeleteMessage) {\n          this._deleteRowCore(rowIndex);\n        } else {\n          var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\n          var showDialogTitle = isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\n          confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(confirmResult => {\n            if (confirmResult) {\n              this._deleteRowCore(rowIndex);\n            }\n          });\n        }\n      }\n    },\n    _deleteRowCore: function (rowIndex) {\n      var dataController = this._dataController;\n      var item = dataController.items()[rowIndex];\n      var key = item && item.key;\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      this.refresh();\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n      if (editIndex >= 0) {\n        if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\n          this._removeChange(editIndex);\n        } else {\n          this._addChange({\n            key: key,\n            type: DATA_EDIT_DATA_REMOVE_TYPE\n          });\n        }\n      } else {\n        this._addChange({\n          key: key,\n          oldData: item.data,\n          type: DATA_EDIT_DATA_REMOVE_TYPE\n        });\n      }\n\n      return this._afterDeleteRow(rowIndex, oldEditRowIndex);\n    },\n    _afterDeleteRow: function (rowIndex, oldEditRowIndex) {\n      return this.saveEditData();\n    },\n    undeleteRow: function (rowIndex) {\n      var dataController = this._dataController;\n      var item = dataController.items()[rowIndex];\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      var key = item && item.key;\n      var changes = this.getChanges();\n\n      if (item) {\n        var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n        if (editIndex >= 0) {\n          var {\n            data: data\n          } = changes[editIndex];\n\n          if (isEmptyObject(data)) {\n            this._removeChange(editIndex);\n          } else {\n            this._addChange({\n              key: key,\n              type: DATA_EDIT_DATA_UPDATE_TYPE\n            });\n          }\n\n          dataController.updateItems({\n            changeType: \"update\",\n            rowIndices: [oldEditRowIndex, rowIndex]\n          });\n        }\n      }\n    },\n    _fireOnSaving: function () {\n      var onSavingParams = {\n        cancel: false,\n        promise: null,\n        changes: [...this.getChanges()]\n      };\n      this.executeAction(\"onSaving\", onSavingParams);\n      var d = new Deferred();\n      when(fromPromise(onSavingParams.promise)).done(() => {\n        d.resolve(onSavingParams);\n      }).fail(arg => {\n        createFailureHandler(d);\n\n        this._fireDataErrorOccurred(arg);\n\n        d.resolve({\n          cancel: true\n        });\n      });\n      return d;\n    },\n    _executeEditingAction: function (actionName, params, func) {\n      if (this.component._disposed) {\n        return null;\n      }\n\n      var deferred = new Deferred();\n      this.executeAction(actionName, params);\n      when(fromPromise(params.cancel)).done(function (cancel) {\n        if (cancel) {\n          setTimeout(function () {\n            deferred.resolve(\"cancel\");\n          });\n        } else {\n          func(params).done(deferred.resolve).fail(createFailureHandler(deferred));\n        }\n      }).fail(createFailureHandler(deferred));\n      return deferred;\n    },\n    _processChanges: function (deferreds, results, dataChanges, changes) {\n      var store = this._dataController.store();\n\n      each(changes, (index, change) => {\n        var oldData = this._getOldData(change.key);\n\n        var {\n          data: data,\n          type: type\n        } = change;\n\n        var changeCopy = _extends({}, change);\n\n        var deferred;\n        var params;\n\n        if (this._beforeSaveEditData(change, index)) {\n          return;\n        }\n\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            params = {\n              data: oldData,\n              key: change.key,\n              cancel: false\n            };\n            deferred = this._executeEditingAction(\"onRowRemoving\", params, function () {\n              return store.remove(change.key).done(function (key) {\n                dataChanges.push({\n                  type: \"remove\",\n                  key: key\n                });\n              });\n            });\n            break;\n\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            params = {\n              data: data,\n              cancel: false\n            };\n            deferred = this._executeEditingAction(\"onRowInserting\", params, function () {\n              return store.insert(params.data).done(function (data, key) {\n                if (isDefined(key)) {\n                  changeCopy.key = key;\n                }\n\n                if (data && isObject(data) && data !== params.data) {\n                  changeCopy.data = data;\n                }\n\n                dataChanges.push({\n                  type: \"insert\",\n                  data: data,\n                  index: 0\n                });\n              });\n            });\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            params = {\n              newData: data,\n              oldData: oldData,\n              key: change.key,\n              cancel: false\n            };\n            deferred = this._executeEditingAction(\"onRowUpdating\", params, function () {\n              return store.update(change.key, params.newData).done(function (data, key) {\n                if (data && isObject(data) && data !== params.newData) {\n                  changeCopy.data = data;\n                }\n\n                dataChanges.push({\n                  type: \"update\",\n                  key: key,\n                  data: data\n                });\n              });\n            });\n        }\n\n        changes[index] = changeCopy;\n\n        if (deferred) {\n          var doneDeferred = new Deferred();\n          deferred.always(function (data) {\n            results.push({\n              key: change.key,\n              result: data\n            });\n          }).always(doneDeferred.resolve);\n          deferreds.push(doneDeferred.promise());\n        }\n      });\n    },\n    _processRemoveIfError: function (changes, editIndex) {\n      var change = changes[editIndex];\n\n      if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {\n        if (editIndex >= 0) {\n          changes.splice(editIndex, 1);\n        }\n      }\n\n      return true;\n    },\n    _processRemove: function (changes, editIndex, cancel) {\n      var change = changes[editIndex];\n\n      if (!cancel || !change || change.type === DATA_EDIT_DATA_REMOVE_TYPE) {\n        return this._processRemoveCore(changes, editIndex, !cancel || !change);\n      }\n    },\n    _processRemoveCore: function (changes, editIndex) {\n      if (editIndex >= 0) {\n        changes.splice(editIndex, 1);\n      }\n\n      return true;\n    },\n    _processSaveEditDataResult: function (results) {\n      var hasSavedData = false;\n      var changes = [...this.getChanges()];\n      var changesLength = changes.length;\n\n      for (var i = 0; i < results.length; i++) {\n        var arg = results[i].result;\n        var cancel = \"cancel\" === arg;\n        var editIndex = gridCoreUtils.getIndexByKey(results[i].key, changes);\n        var change = changes[editIndex];\n        var isError = arg && arg instanceof Error;\n\n        if (isError) {\n          if (change) {\n            this._addInternalData({\n              key: change.key,\n              error: arg\n            });\n          }\n\n          this._fireDataErrorOccurred(arg);\n\n          if (this._processRemoveIfError(changes, editIndex)) {\n            break;\n          }\n        } else if (this._processRemove(changes, editIndex, cancel)) {\n          hasSavedData = !cancel;\n        }\n      }\n\n      if (changes.length < changesLength) {\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n      }\n\n      return hasSavedData;\n    },\n    _fireSaveEditDataEvents: function (changes) {\n      each(changes, (_, _ref) => {\n        var {\n          data: data,\n          key: key,\n          type: type\n        } = _ref;\n\n        var internalData = this._addInternalData({\n          key: key\n        });\n\n        var params = {\n          key: key,\n          data: data\n        };\n\n        if (internalData.error) {\n          params.error = internalData.error;\n        }\n\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            this.executeAction(\"onRowRemoved\", extend({}, params, {\n              data: internalData.oldData\n            }));\n            break;\n\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            this.executeAction(\"onRowInserted\", params);\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            this.executeAction(\"onRowUpdated\", params);\n        }\n      });\n      this.executeAction(\"onSaved\", {\n        changes: changes\n      });\n    },\n    saveEditData: function () {\n      var deferred = new Deferred();\n      this.waitForDeferredOperations().done(() => {\n        if (this.isSaving()) {\n          this._resolveAfterSave(deferred);\n\n          return;\n        }\n\n        when(this._beforeSaveEditData()).done(cancel => {\n          if (cancel) {\n            this._resolveAfterSave(deferred, {\n              cancel: cancel\n            });\n\n            return;\n          }\n\n          this._saving = true;\n          var options = {};\n\n          this._saveEditDataInner(options).always(() => {\n            this._saving = false;\n            options.needFocusEditCell && this._focusEditingCell();\n          }).done(deferred.resolve).fail(deferred.reject);\n        }).fail(deferred.reject);\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _resolveAfterSave: function (deferred) {\n      var {\n        cancel: cancel,\n        error: error\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      when(this._afterSaveEditData(cancel)).done(function () {\n        deferred.resolve(error);\n      }).fail(deferred.reject);\n    },\n    _saveEditDataInner: function (options) {\n      var results = [];\n      var deferreds = [];\n      var dataChanges = [];\n      var dataController = this._dataController;\n      var dataSource = dataController.dataSource();\n      var result = new Deferred();\n      when(this._fireOnSaving()).done(_ref2 => {\n        var {\n          cancel: cancel,\n          changes: changes\n        } = _ref2;\n\n        if (cancel) {\n          return result.resolve().promise();\n        }\n\n        this._processChanges(deferreds, results, dataChanges, changes);\n\n        if (deferreds.length) {\n          null === dataSource || void 0 === dataSource ? void 0 : dataSource.beginLoading();\n          when(...deferreds).done(() => {\n            if (this._processSaveEditDataResult(results)) {\n              this._endSaving(dataChanges, changes, result);\n            } else {\n              null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n              result.resolve();\n            }\n          }).fail(error => {\n            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n            result.resolve(error);\n          });\n          return result.always(() => {\n            options.needFocusEditCell = true;\n          }).promise();\n        }\n\n        this._cancelSaving(result);\n      }).fail(result.reject);\n      return result.promise();\n    },\n    _beforeEndSaving: function (changes) {\n      this._resetEditIndices();\n    },\n    _endSaving: function (dataChanges, changes, deferred) {\n      var dataSource = this._dataController.dataSource();\n\n      this._beforeEndSaving(changes);\n\n      null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n\n      this._refreshDataAfterSave(dataChanges, changes, deferred);\n    },\n    _cancelSaving: function (result) {\n      this.executeAction(\"onSaved\", {\n        changes: []\n      });\n\n      this._resolveAfterSave(result);\n    },\n    _refreshDataAfterSave: function (dataChanges, changes, deferred) {\n      var dataController = this._dataController;\n      var refreshMode = this.option(\"editing.refreshMode\");\n      var isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\n\n      if (!isFullRefresh) {\n        dataController.push(dataChanges);\n      }\n\n      when(dataController.refresh({\n        selection: isFullRefresh,\n        reload: isFullRefresh,\n        load: \"reshape\" === refreshMode,\n        changesOnly: this.option(\"repaintChangesOnly\")\n      })).always(() => {\n        this._fireSaveEditDataEvents(changes);\n      }).done(() => {\n        this._resolveAfterSave(deferred);\n      }).fail(error => {\n        this._resolveAfterSave(deferred, {\n          error: error\n        });\n      });\n    },\n    isSaving: function () {\n      return this._saving;\n    },\n    _updateEditColumn: function () {\n      var isEditColumnVisible = this._isEditColumnVisible();\n\n      var useIcons = this.option(\"editing.useIcons\");\n      var cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\n\n      this._columnsController.addCommandColumn({\n        type: \"buttons\",\n        command: \"edit\",\n        visible: isEditColumnVisible,\n        cssClass: cssClass,\n        width: \"auto\",\n        alignment: \"center\",\n        cellTemplate: this._getEditCommandCellTemplate(),\n        fixedPosition: \"right\"\n      });\n\n      this._columnsController.columnOption(\"command:edit\", {\n        visible: isEditColumnVisible,\n        cssClass: cssClass\n      });\n    },\n    _isEditColumnVisible: function () {\n      var editingOptions = this.option(\"editing\");\n      return editingOptions.allowDeleting;\n    },\n    _isEditButtonDisabled: function () {\n      var hasChanges = this.hasChanges();\n      var isEditRowDefined = isDefined(this.option(\"editing.editRowKey\"));\n      return !(isEditRowDefined || hasChanges);\n    },\n    _updateEditButtons: function () {\n      var headerPanel = this.getView(\"headerPanel\");\n\n      var isButtonDisabled = this._isEditButtonDisabled();\n\n      if (headerPanel) {\n        headerPanel.setToolbarItemDisabled(\"saveButton\", isButtonDisabled);\n        headerPanel.setToolbarItemDisabled(\"revertButton\", isButtonDisabled);\n      }\n    },\n    _applyModified: function ($element) {\n      $element && $element.addClass(CELL_MODIFIED);\n    },\n    _beforeCloseEditCellInBatchMode: noop,\n    cancelEditData: function () {\n      var changes = this.getChanges();\n      var params = {\n        cancel: false,\n        changes: changes\n      };\n      this.executeAction(\"onEditCanceling\", params);\n\n      if (!params.cancel) {\n        this._cancelEditDataCore();\n\n        this.executeAction(\"onEditCanceled\", {\n          changes: changes\n        });\n      }\n    },\n    _cancelEditDataCore: function () {\n      var rowIndex = this._getVisibleEditRowIndex();\n\n      this._beforeCancelEditData();\n\n      this.init();\n      this.resetChanges();\n\n      this._resetEditColumnName();\n\n      this._resetEditRowKey();\n\n      this._afterCancelEditData(rowIndex);\n    },\n    _afterCancelEditData: function (rowIndex) {\n      var dataController = this._dataController;\n      dataController.updateItems({\n        repaintChangesOnly: this.option(\"repaintChangesOnly\")\n      });\n    },\n    _hideEditPopup: noop,\n    hasEditData: function () {\n      return this.hasChanges();\n    },\n    update: function (changeType) {\n      var dataController = this._dataController;\n\n      if (dataController && this._pageIndex !== dataController.pageIndex()) {\n        if (\"refresh\" === changeType) {\n          this.refresh({\n            isPageChanged: true\n          });\n        }\n\n        this._pageIndex = dataController.pageIndex();\n      }\n\n      this._updateEditButtons();\n    },\n    _getRowIndicesForCascadeUpdating: function (row, skipCurrentRow) {\n      return skipCurrentRow ? [] : [row.rowIndex];\n    },\n    addDeferred: function (deferred) {\n      if (this._deferreds.indexOf(deferred) < 0) {\n        this._deferreds.push(deferred);\n\n        deferred.always(() => {\n          var index = this._deferreds.indexOf(deferred);\n\n          if (index >= 0) {\n            this._deferreds.splice(index, 1);\n          }\n        });\n      }\n    },\n    _prepareChange: function (options, value, text) {\n      var _options$row;\n\n      var newData = {};\n      var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\n      var rowKey = options.key;\n      var deferred = new Deferred();\n\n      if (void 0 !== rowKey) {\n        options.value = value;\n        var setCellValueResult = fromPromise(options.column.setCellValue(newData, value, extend(true, {}, oldData), text));\n        setCellValueResult.done(function () {\n          deferred.resolve({\n            data: newData,\n            key: rowKey,\n            oldData: oldData,\n            type: DATA_EDIT_DATA_UPDATE_TYPE\n          });\n        }).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\n\n        if (isDefined(text) && options.column.displayValueMap) {\n          options.column.displayValueMap[value] = text;\n        }\n\n        this._updateRowValues(options);\n\n        this.addDeferred(deferred);\n      }\n\n      return deferred;\n    },\n    _updateRowValues: function (options) {\n      if (options.values) {\n        var dataController = this._dataController;\n        var rowIndex = dataController.getRowIndexByKey(options.key);\n        var row = dataController.getVisibleRows()[rowIndex];\n\n        if (row) {\n          options.row.values = row.values;\n          options.values = row.values;\n        }\n\n        options.values[options.columnIndex] = options.value;\n      }\n    },\n    updateFieldValue: function (options, value, text, forceUpdateRow) {\n      var rowKey = options.key;\n      var deferred = new Deferred();\n\n      if (void 0 === rowKey) {\n        this._dataController.fireError(\"E1043\");\n      }\n\n      if (options.column.setCellValue) {\n        this._prepareChange(options, value, text).done(params => {\n          when(this._applyChange(options, params, forceUpdateRow)).always(() => {\n            deferred.resolve();\n          });\n        });\n      } else {\n        deferred.resolve();\n      }\n\n      return deferred.promise();\n    },\n    _focusPreviousEditingCellIfNeed: function (options) {\n      if (this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex)) {\n        this._focusEditingCell();\n\n        this._updateEditRow(options.row, true);\n\n        return true;\n      }\n    },\n    _needUpdateRow: function (column) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      if (!column) {\n        column = this._getEditColumn();\n      }\n\n      var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\n      var isCustomCalculateCellValue = visibleColumns.some(visibleColumn => visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue);\n      return isCustomSetCellValue || isCustomCalculateCellValue;\n    },\n    _applyChange: function (options, params, forceUpdateRow) {\n      var changeOptions = _extends({}, options, {\n        forceUpdateRow: forceUpdateRow\n      });\n\n      this._addChange(params, changeOptions);\n\n      this._updateEditButtons();\n\n      return this._applyChangeCore(options, changeOptions.forceUpdateRow);\n    },\n    _applyChangeCore: function (options, forceUpdateRow) {\n      var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\n      var row = options.row;\n\n      if (row) {\n        if (forceUpdateRow || isCustomSetCellValue) {\n          this._updateEditRow(row, forceUpdateRow, isCustomSetCellValue);\n        } else if (row.update) {\n          row.update();\n        }\n      }\n    },\n    _updateEditRowCore: function (row, skipCurrentRow, isCustomSetCellValue) {\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: this._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\n      });\n    },\n    _updateEditRow: function (row, forceUpdateRow, isCustomSetCellValue) {\n      if (forceUpdateRow) {\n        this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue);\n      } else {\n        this._updateRowWithDelay(row, isCustomSetCellValue);\n      }\n    },\n    _updateRowImmediately: function (row, forceUpdateRow, isCustomSetCellValue) {\n      this._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\n\n      this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\n\n      if (!forceUpdateRow) {\n        this._focusEditingCell();\n      }\n    },\n    _updateRowWithDelay: function (row, isCustomSetCellValue) {\n      var deferred = new Deferred();\n      this.addDeferred(deferred);\n      setTimeout(() => {\n        var _this$_editForm;\n\n        var elementContainer = (null === (_this$_editForm = this._editForm) || void 0 === _this$_editForm ? void 0 : _this$_editForm.element()) || this.component.$element().get(0);\n        var $focusedElement = $(domAdapter.getActiveElement(elementContainer));\n\n        var columnIndex = this._rowsView.getCellIndex($focusedElement, row.rowIndex);\n\n        var focusedElement = $focusedElement.get(0);\n        var selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\n\n        this._updateEditRowCore(row, false, isCustomSetCellValue);\n\n        this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\n\n        if (columnIndex >= 0) {\n          var $focusedItem = this._rowsView._getCellElement(row.rowIndex, columnIndex);\n\n          this._delayedInputFocus($focusedItem, () => {\n            setTimeout(() => {\n              var _this$component$$elem;\n\n              focusedElement = domAdapter.getActiveElement(null === (_this$component$$elem = this.component.$element()) || void 0 === _this$component$$elem ? void 0 : _this$component$$elem.get(0));\n\n              if (selectionRange.selectionStart >= 0) {\n                gridCoreUtils.setSelectionRange(focusedElement, selectionRange);\n              }\n            });\n          });\n        }\n\n        deferred.resolve();\n      });\n    },\n    _validateEditFormAfterUpdate: noop,\n    _addChange: function (changeParams, options) {\n      var _this$getChanges;\n\n      var row = null === options || void 0 === options ? void 0 : options.row;\n      var changes = [...this.getChanges()];\n      var index = gridCoreUtils.getIndexByKey(changeParams.key, changes);\n\n      if (index < 0) {\n        index = changes.length;\n\n        this._addInternalData({\n          key: changeParams.key,\n          oldData: changeParams.oldData\n        });\n\n        delete changeParams.oldData;\n        changes.push(changeParams);\n      }\n\n      var change = _extends({}, changes[index]);\n\n      if (change) {\n        if (changeParams.data) {\n          change.data = createObjectWithChanges(change.data, changeParams.data);\n        }\n\n        if ((!change.type || !changeParams.data) && changeParams.type) {\n          change.type = changeParams.type;\n        }\n\n        if (row) {\n          row.oldData = this._getOldData(row.key);\n          row.data = createObjectWithChanges(row.data, changeParams.data);\n        }\n      }\n\n      changes[index] = change;\n\n      this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n\n      if (options && change !== (null === (_this$getChanges = this.getChanges()) || void 0 === _this$getChanges ? void 0 : _this$getChanges[index])) {\n        options.forceUpdateRow = true;\n      }\n\n      return change;\n    },\n    _getFormEditItemTemplate: function (cellOptions, column) {\n      return column.editCellTemplate || this._getDefaultEditorTemplate();\n    },\n    getColumnTemplate: function (options) {\n      var column = options.column;\n      var rowIndex = options.row && options.row.rowIndex;\n      var template;\n      var isRowMode = this.isRowBasedEditMode();\n      var isRowEditing = this.isEditRow(rowIndex);\n      var isCellEditing = this.isEditCell(rowIndex, options.columnIndex);\n      var editingStartOptions;\n\n      if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\n        var allowUpdating = this.allowUpdating(options);\n\n        if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowEditing || !isRowMode)) {\n          if (column.showEditorAlways && !isRowMode) {\n            editingStartOptions = {\n              cancel: false,\n              key: options.row.isNewRow ? void 0 : options.row.key,\n              data: options.row.data,\n              column: column\n            };\n\n            this._isEditingStart(editingStartOptions);\n          }\n\n          if (!editingStartOptions || !editingStartOptions.cancel) {\n            options.setValue = (value, text) => {\n              this.updateFieldValue(options, value, text);\n            };\n          }\n        }\n\n        template = column.editCellTemplate || this._getDefaultEditorTemplate();\n      } else if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\n        template = null === this || void 0 === this ? void 0 : this.getEditFormTemplate(options);\n      }\n\n      return template;\n    },\n    _createButton: function ($container, button, options, change) {\n      var icon = EDIT_ICON_CLASS[button.name];\n      var useIcons = this.option(\"editing.useIcons\");\n      var useLegacyColumnButtonTemplate = this.option(\"useLegacyColumnButtonTemplate\");\n      var $button = $(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\n\n      if (button.template && useLegacyColumnButtonTemplate) {\n        this._rowsView.renderTemplate($container, button.template, options, true);\n      } else {\n        if (button.template) {\n          $button = $(\"<span>\").addClass(button.cssClass);\n        } else if (useIcons && icon || button.icon) {\n          icon = button.icon || icon;\n          var iconType = iconUtils.getImageSourceType(icon);\n\n          if (\"image\" === iconType || \"svg\" === iconType) {\n            $button = iconUtils.getImageContainer(icon).addClass(button.cssClass);\n          } else {\n            $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text);\n          }\n\n          $button.addClass(\"dx-link-icon\");\n          $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\n          var localizationName = this.getButtonLocalizationNames()[button.name];\n          localizationName && $button.attr(\"aria-label\", messageLocalization.format(localizationName));\n        } else {\n          $button.text(button.text);\n        }\n\n        if (isDefined(button.hint)) {\n          $button.attr(\"title\", button.hint);\n        }\n\n        if (this._isButtonDisabled(button, options)) {\n          $button.addClass(\"dx-state-disabled\");\n        } else if (!button.template || button.onClick) {\n          eventsEngine.on($button, addNamespace(\"click\", EDITING_NAMESPACE), this.createAction(function (e) {\n            var _button$onClick;\n\n            null === (_button$onClick = button.onClick) || void 0 === _button$onClick ? void 0 : _button$onClick.call(button, extend({}, e, {\n              row: options.row,\n              column: options.column\n            }));\n            e.event.preventDefault();\n            e.event.stopPropagation();\n          }));\n        }\n\n        $container.append($button, \"&nbsp;\");\n\n        if (button.template) {\n          this._rowsView.renderTemplate($button, button.template, _extends({}, options, {\n            column: void 0\n          }), true, change);\n        }\n      }\n    },\n    getButtonLocalizationNames: () => ({\n      edit: \"dxDataGrid-editingEditRow\",\n      save: \"dxDataGrid-editingSaveRowChanges\",\n      delete: \"dxDataGrid-editingDeleteRow\",\n      undelete: \"dxDataGrid-editingUndeleteRow\",\n      cancel: \"dxDataGrid-editingCancelRowChanges\"\n    }),\n    prepareButtonItem: function (headerPanel, name, methodName, sortIndex) {\n      var editingTexts = this.option(\"editing.texts\") || {};\n      var titleButtonTextByClassNames = {\n        revert: editingTexts.cancelAllChanges,\n        save: editingTexts.saveAllChanges,\n        addRow: editingTexts.addRow\n      };\n      var className = {\n        revert: \"cancel\",\n        save: \"save\",\n        addRow: \"addrow\"\n      }[name];\n      var hintText = titleButtonTextByClassNames[name];\n\n      var isButtonDisabled = (\"save\" === className || \"cancel\" === className) && this._isEditButtonDisabled();\n\n      return {\n        widget: \"dxButton\",\n        options: {\n          onInitialized: e => {\n            $(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + this.addWidgetPrefix(className) + \"-button\"));\n          },\n          icon: \"edit-button-\" + className,\n          disabled: isButtonDisabled,\n          onClick: () => {\n            setTimeout(() => {\n              this[methodName]();\n            });\n          },\n          text: hintText,\n          hint: hintText\n        },\n        showText: \"inMenu\",\n        name: name + \"Button\",\n        location: \"after\",\n        locateInMenu: \"auto\",\n        sortIndex: sortIndex\n      };\n    },\n    prepareEditButtons: function (headerPanel) {\n      var editingOptions = this.option(\"editing\") || {};\n      var buttonItems = [];\n\n      if (editingOptions.allowAdding) {\n        buttonItems.push(this.prepareButtonItem(headerPanel, \"addRow\", \"addRow\", 20));\n      }\n\n      return buttonItems;\n    },\n    highlightDataCell: function ($cell, params) {\n      this.shouldHighlightCell(params) && $cell.addClass(CELL_MODIFIED);\n    },\n    _afterInsertRow: noop,\n    _beforeSaveEditData: function (change) {\n      if (change && !isDefined(change.key) && isDefined(change.type)) {\n        return true;\n      }\n    },\n    _afterSaveEditData: noop,\n    _beforeCancelEditData: noop,\n    _allowEditAction: function (actionName, options) {\n      var allowEditAction = this.option(\"editing.\" + actionName);\n\n      if (isFunction(allowEditAction)) {\n        allowEditAction = allowEditAction({\n          component: this.component,\n          row: options.row\n        });\n      }\n\n      return allowEditAction;\n    },\n    allowUpdating: function (options, eventName) {\n      var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION;\n      var needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\n      return needCallback && this._allowEditAction(\"allowUpdating\", options);\n    },\n    allowDeleting: function (options) {\n      return this._allowEditAction(\"allowDeleting\", options);\n    },\n    isCellModified: function (parameters) {\n      var columnIndex = parameters.columnIndex;\n      var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\n      return !!modifiedValues && void 0 !== modifiedValues[columnIndex];\n    },\n    isNewRowInEditMode: function () {\n      var visibleEditRowIndex = this._getVisibleEditRowIndex();\n\n      var rows = this._dataController.items();\n\n      return visibleEditRowIndex >= 0 ? rows[visibleEditRowIndex].isNewRow : false;\n    },\n    shouldHighlightCell: function (parameters) {\n      var cellModified = this.isCellModified(parameters);\n      return cellModified && parameters.column.setCellValue && (this.getEditMode() !== EDIT_MODE_ROW || !parameters.row.isEditing);\n    }\n  };\n  return members;\n}());\nexport var editingModule = {\n  defaultOptions: function () {\n    return {\n      editing: {\n        mode: \"row\",\n        refreshMode: \"full\",\n        newRowPosition: VIEWPORT_TOP_NEW_ROW_POSITION,\n        allowAdding: false,\n        allowUpdating: false,\n        allowDeleting: false,\n        useIcons: false,\n        selectTextOnEditStart: false,\n        confirmDelete: true,\n        texts: {\n          editRow: messageLocalization.format(\"dxDataGrid-editingEditRow\"),\n          saveAllChanges: messageLocalization.format(\"dxDataGrid-editingSaveAllChanges\"),\n          saveRowChanges: messageLocalization.format(\"dxDataGrid-editingSaveRowChanges\"),\n          cancelAllChanges: messageLocalization.format(\"dxDataGrid-editingCancelAllChanges\"),\n          cancelRowChanges: messageLocalization.format(\"dxDataGrid-editingCancelRowChanges\"),\n          addRow: messageLocalization.format(\"dxDataGrid-editingAddRow\"),\n          deleteRow: messageLocalization.format(\"dxDataGrid-editingDeleteRow\"),\n          undeleteRow: messageLocalization.format(\"dxDataGrid-editingUndeleteRow\"),\n          confirmDeleteMessage: messageLocalization.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\n          confirmDeleteTitle: \"\"\n        },\n        form: {\n          colCount: 2\n        },\n        popup: {},\n        startEditAction: \"click\",\n        editRowKey: null,\n        editColumnName: null,\n        changes: []\n      },\n      useLegacyColumnButtonTemplate: false\n    };\n  },\n  controllers: {\n    editing: EditingController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function () {\n          this._editingController = this.getController(\"editing\");\n          this.callBase();\n        },\n        reload: function (full, repaintChangesOnly) {\n          !repaintChangesOnly && this._editingController.refresh();\n          return this.callBase.apply(this, arguments);\n        },\n        repaintRows: function () {\n          if (this.getController(\"editing\").isSaving()) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _updateEditRow: function (items) {\n          var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n          var editRowIndex = gridCoreUtils.getIndexByKey(editRowKey, items);\n          var editItem = items[editRowIndex];\n\n          if (editItem) {\n            var _this$_updateEditItem;\n\n            editItem.isEditing = true;\n            null === (_this$_updateEditItem = this._updateEditItem) || void 0 === _this$_updateEditItem ? void 0 : _this$_updateEditItem.call(this, editItem);\n          }\n        },\n        _updateItemsCore: function (change) {\n          this.callBase(change);\n\n          this._updateEditRow(this.items(true));\n        },\n        _applyChangeUpdate: function (change) {\n          this._updateEditRow(change.items);\n\n          this.callBase(change);\n        },\n        _applyChangesOnly: function (change) {\n          this._updateEditRow(change.items);\n\n          this.callBase(change);\n        },\n        _processItems: function (items, change) {\n          items = this._editingController.processItems(items, change);\n          return this.callBase(items, change);\n        },\n        _processDataItem: function (dataItem, options) {\n          this._editingController.processDataItem(dataItem, options, this.generateDataValues);\n\n          return this.callBase(dataItem, options);\n        },\n        _processItem: function (item, options) {\n          item = this.callBase(item, options);\n\n          if (item.isNewRow) {\n            options.dataIndex--;\n            delete item.dataIndex;\n          }\n\n          return item;\n        },\n        _getChangedColumnIndices: function (oldItem, newItem, rowIndex, isLiveUpdate) {\n          if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _isCellChanged: function (oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          var editingController = this.getController(\"editing\");\n          var cell = oldRow.cells && oldRow.cells[columnIndex];\n          var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);\n\n          if (isLiveUpdate && isEditing) {\n            return false;\n          }\n\n          if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\n            return true;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        needToRefreshOnDataSourceChange: function (args) {\n          var editingController = this.getController(\"editing\");\n          var isParasiteChange = Array.isArray(args.value) && args.value === args.previousValue && editingController.isSaving();\n          return !isParasiteChange;\n        },\n\n        _handleDataSourceChange(args) {\n          var result = this.callBase(args);\n          var changes = this.option(\"editing.changes\");\n          var dataSource = args.value;\n\n          if (Array.isArray(dataSource) && changes.length) {\n            var dataSourceKeys = dataSource.map(item => this.keyOf(item));\n            var newChanges = changes.filter(change => \"insert\" === change.type || dataSourceKeys.some(key => equalByValue(change.key, key)));\n\n            if (newChanges.length !== changes.length) {\n              this.option(\"editing.changes\", newChanges);\n            }\n\n            var editRowKey = this.option(\"editing.editRowKey\");\n            var isEditNewItem = newChanges.some(change => \"insert\" === change.type && equalByValue(editRowKey, change.key));\n\n            if (!isEditNewItem && dataSourceKeys.every(key => !equalByValue(editRowKey, key))) {\n              this.option(\"editing.editRowKey\", null);\n            }\n          }\n\n          return result;\n        }\n\n      }\n    },\n    views: {\n      rowsView: {\n        init: function () {\n          this.callBase();\n          this._editingController = this.getController(\"editing\");\n        },\n        getCellIndex: function ($cell, rowIndex) {\n          if (!$cell.is(\"td\") && rowIndex >= 0) {\n            var $cellElements = this.getCellElements(rowIndex);\n            var cellIndex = -1;\n            each($cellElements, function (index, cellElement) {\n              if ($(cellElement).find($cell).length) {\n                cellIndex = index;\n              }\n            });\n            return cellIndex;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        publicMethods: function () {\n          return this.callBase().concat([\"cellValue\"]);\n        },\n        _getCellTemplate: function (options) {\n          var template = this._editingController.getColumnTemplate(options);\n\n          return template || this.callBase(options);\n        },\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row) {\n            var isRowRemoved = !!row.removed;\n            var isRowInserted = !!row.isNewRow;\n            var isRowModified = !!row.modified;\n            isRowInserted && $row.addClass(ROW_INSERTED);\n            isRowModified && $row.addClass(ROW_MODIFIED);\n\n            if (isRowInserted || isRowRemoved) {\n              $row.removeClass(ROW_SELECTED);\n            }\n          }\n\n          return $row;\n        },\n        _getColumnIndexByElement: function ($element) {\n          var $tableElement = $element.closest(\"table\");\n          var $tableElements = this.getTableElements();\n\n          while ($tableElement.length && !$tableElements.filter($tableElement).length) {\n            $element = $tableElement.closest(\"td\");\n            $tableElement = $element.closest(\"table\");\n          }\n\n          return this._getColumnIndexByElementCore($element);\n        },\n        _getColumnIndexByElementCore: function ($element) {\n          var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\n          return this.getCellIndex($targetElement);\n        },\n        _editCellByClick: function (e, eventName) {\n          var editingController = this._editingController;\n          var $targetElement = $(e.event.target);\n\n          var columnIndex = this._getColumnIndexByElement($targetElement);\n\n          var row = this._dataController.items()[e.rowIndex];\n\n          var allowUpdating = editingController.allowUpdating({\n            row: row\n          }, eventName) || row && row.isNewRow;\n\n          var column = this._columnsController.getVisibleColumns()[columnIndex];\n\n          var isEditedCell = editingController.isEditCell(e.rowIndex, columnIndex);\n          var allowEditing = allowUpdating && column && (column.allowEditing || isEditedCell);\n          var startEditAction = this.option(\"editing.startEditAction\") || \"click\";\n          var isShowEditorAlways = column && column.showEditorAlways;\n\n          if (isEditedCell) {\n            return true;\n          }\n\n          if (\"down\" === eventName) {\n            if (devices.real().ios || devices.real().android) {\n              resetActiveElement();\n            }\n\n            return isShowEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex);\n          }\n\n          if (\"click\" === eventName && \"dblClick\" === startEditAction) {\n            var withoutSaveEditData = null === row || void 0 === row ? void 0 : row.isNewRow;\n            editingController.closeEditCell(false, withoutSaveEditData);\n          }\n\n          if (allowEditing && eventName === startEditAction) {\n            return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex);\n          }\n        },\n        _rowPointerDown: function (e) {\n          this._pointerDownTimeout = setTimeout(() => {\n            this._editCellByClick(e, \"down\");\n          });\n        },\n        _rowClick: function (e) {\n          var isEditForm = $(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n          e.event[TARGET_COMPONENT_NAME] = this.component;\n\n          if (!this._editCellByClick(e, \"click\") && !isEditForm) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _rowDblClick: function (e) {\n          if (!this._editCellByClick(e, \"dblClick\")) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _cellPrepared: function ($cell, parameters) {\n          var _parameters$column;\n\n          var editingController = this._editingController;\n          var isCommandCell = !!parameters.column.command;\n          var isEditableCell = parameters.setValue;\n          var isEditRow = editingController.isEditRow(parameters.rowIndex);\n          var isEditing = isEditingCell(isEditRow, parameters);\n\n          if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {\n            var alignment = parameters.column.alignment;\n            $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\n\n            if (alignment) {\n              $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment);\n            }\n          }\n\n          if (isEditing) {\n            this._editCellPrepared($cell);\n          }\n\n          var hasTemplate = !!(null !== (_parameters$column = parameters.column) && void 0 !== _parameters$column && _parameters$column.cellTemplate);\n\n          if (parameters.column && !isCommandCell && (!hasTemplate || editingController.shouldHighlightCell(parameters))) {\n            editingController.highlightDataCell($cell, parameters);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _editCellPrepared: noop,\n        _formItemPrepared: noop,\n        _getCellOptions: function (options) {\n          var cellOptions = this.callBase(options);\n          cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\n          return cellOptions;\n        },\n        _createCell: function (options) {\n          var $cell = this.callBase(options);\n\n          var isEditRow = this._editingController.isEditRow(options.rowIndex);\n\n          isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(EDITOR_CELL_CLASS);\n          return $cell;\n        },\n        cellValue: function (rowIndex, columnIdentifier, value, text) {\n          var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\n\n          if (cellOptions) {\n            if (void 0 === value) {\n              return cellOptions.value;\n            } else {\n              this._editingController.updateFieldValue(cellOptions, value, text, true);\n            }\n          }\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._pointerDownTimeout);\n        },\n        _renderCore: function (change) {\n          this.callBase.apply(this, arguments);\n          return this._waitAsyncTemplates(change, true).done(() => {\n            this._editingController._focusEditorIfNeed();\n          });\n        }\n      },\n      headerPanel: {\n        _getToolbarItems: function () {\n          var items = this.callBase();\n          var editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\n          return editButtonItems.concat(items);\n        },\n        optionChanged: function (args) {\n          var fullName = args.fullName;\n\n          switch (args.name) {\n            case \"editing\":\n              var excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];\n              var shouldInvalidate = fullName && !excludedOptions.some(optionName => optionName === fullName);\n              shouldInvalidate && this._invalidate();\n              this.callBase(args);\n              break;\n\n            case \"useLegacyColumnButtonTemplate\":\n              args.handled = true;\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        },\n        isVisible: function () {\n          var editingOptions = this.getController(\"editing\").option(\"editing\");\n          return this.callBase() || (null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.allowAdding);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["_extends","$","domAdapter","eventsEngine","Guid","resetActiveElement","isDefined","isObject","isFunction","isEmptyObject","each","extend","modules","name","clickEventName","pointerEvents","gridCoreUtils","createObjectWithChanges","addNamespace","confirm","messageLocalization","devices","when","Deferred","fromPromise","equalByValue","noop","iconUtils","EDITOR_CELL_CLASS","ROW_CLASS","EDIT_FORM_CLASS","DATA_EDIT_DATA_INSERT_TYPE","DATA_EDIT_DATA_REMOVE_TYPE","EDITING_POPUP_OPTION_NAME","EDITING_EDITROWKEY_OPTION_NAME","EDITING_EDITCOLUMNNAME_OPTION_NAME","TARGET_COMPONENT_NAME","EDITORS_INPUT_SELECTOR","FOCUSABLE_ELEMENT_SELECTOR","EDIT_MODE_ROW","EDIT_MODES","ROW_BASED_MODES","FIRST_NEW_ROW_POSITION","LAST_NEW_ROW_POSITION","PAGE_BOTTOM_NEW_ROW_POSITION","PAGE_TOP_NEW_ROW_POSITION","VIEWPORT_BOTTOM_NEW_ROW_POSITION","VIEWPORT_TOP_NEW_ROW_POSITION","deepExtendArraySafe","READONLY_CLASS","LINK_CLASS","ROW_SELECTED","EDIT_BUTTON_CLASS","COMMAND_EDIT_CLASS","COMMAND_EDIT_WITH_ICONS_CLASS","INSERT_INDEX","ROW_INSERTED","ROW_MODIFIED","CELL_MODIFIED","EDITING_NAMESPACE","CELL_FOCUS_DISABLED_CLASS","DATA_EDIT_DATA_UPDATE_TYPE","DEFAULT_START_EDIT_ACTION","EDIT_LINK_CLASS","save","cancel","edit","undelete","delete","add","EDIT_ICON_CLASS","METHOD_NAMES","ACTION_OPTION_NAMES","BUTTON_NAMES","EDITING_CHANGES_OPTION_NAME","createFailureHandler","deferred","arg","error","Error","String","reject","isEditingCell","isEditRow","cellOptions","isEditing","column","allowEditing","isEditingOrShowEditorAlwaysDataCell","isCommandCell","command","isEditorCell","showEditorAlways","rowType","EditingController","ViewController","inherit","getButtonIndex","buttons","result","some","button","index","getButtonName","members","init","_columnsController","getController","_dataController","_rowsView","getView","_lastOperation","_changes","_deferreds","forEach","d","_dataChangedHandler","_handleDataChanged","bind","changed","_saveEditorHandler","createAction","excludeValidators","_updateEditColumn","_updateEditButtons","_internalState","component","_optionsByReference","getEditMode","editMode","option","indexOf","_getDefaultEditorTemplate","container","options","$editor","appendTo","createEditor","value","setValue","row","parentType","width","readOnly","isOnForm","id","_getNewRowPosition","newRowPosition","scrollingMode","getChanges","getInsertRowCount","changes","filter","change","type","length","resetChanges","needReset","_silentOption","_getInternalData","key","item","_addInternalData","params","internalData","push","_getOldData","_this$_getInternalDat","oldData","getUpdatedData","data","keyOf","editIndex","getIndexByKey","getInsertedData","map","getRemovedData","_fireDataErrorOccurred","$popupContent","getPopupContent","dataErrorOccurred","fire","_needToCloseEditableCell","_closeEditItem","_isDefaultButtonVisible","allowDeleting","_isButtonVisible","visible","call","_isButtonDisabled","disabled","_getButtonConfig","config","buttonName","editingTexts","saveRowChanges","cancelRowChanges","editRow","undeleteRow","deleteRow","addRowToNode","methodName","editingOptions","actionName","allowAction","text","cssClass","onClick","e","event","stopPropagation","preventDefault","setTimeout","rowIndex","_getEditingButtons","buttonIndex","haveCustomButtons","slice","splice","_renderEditingButtons","$container","_createButton","_getEditCommandCellTemplate","watch","empty","setEmptyText","isRowBasedEditMode","getFirstEditableColumnIndex","columnsController","columnIndex","visibleColumns","getVisibleColumns","getFirstEditableCellInRow","rowsView","_getCellElement","getFocusedCellInRow","items","hasChanges","i","getRowIndexByKey","dispose","callBase","clearTimeout","_inputFocusTimeoutID","off","getDocument","up","_pointerUpEditorHandler","down","_pointerDownEditorHandler","apply","arguments","optionChanged","args","fullName","_handleEditRowKeyChange","isEqual","_handleChangesChange","handled","reinit","_resetEditColumnName","_resetEditRowKey","oldRowIndexCorrection","_getEditRowIndexCorrection","oldRowIndex","previousValue","_editRowFromOptionChanged","cancelEditData","dataController","_addInsertInfo","_items$rowIndex","updateItems","repaintChangesOnly","isLiveUpdate","isOptionChanged","publicMethods","refresh","_pageIndex","_refreshCore","isEditRowKeyDefined","_setEditRowKey","silent","_setEditRowKeyByIndex","getKeyByRowIndex","fireError","getEditRowIndex","_getVisibleEditRowIndex","getEditFormRowIndex","isEditRowByIndex","isKeyEqual","isEditCell","visibleRowIndex","_getVisibleEditColumnIndex","_isProcessedItem","_getInsertRowIndex","isProcessedItems","_getInsertAfterOrBeforeKey","isProcessedItem","nextItem","insertAfterKey","_generateNewItem","_this$_getInternalDat2","insertInfo","_getLoadedRowIndex","loadedRowIndex","pageIndex","insertAfterOrBeforeKey","isLastPageLoaded","processItems","changeType","update","_this$_getInternalDat3","isInsert","processDataItem","generateDataValues","columns","_processDataItemCore","isNewRow","modified","modifiedValues","removed","_initNewRow","executeAction","promise","done","resolve","fail","_createInsertInfo","_getInsertIndex","parentKey","_this$_getInternalDat4","_setInsertAfterOrBeforeKey","allItems","itemIndex","isViewportBottom","visibleItemIndex","getBottomVisibleItemIndex","getTopVisibleItemIndex","getVisibleRows","insertKey","insertBeforeKey","maxInsertIndex","editItem","_this$_getInternalDat5","insertChange","_insertChange$insertA","_getPageIndexToInsertRow","lastPageIndex","pageCount","addRow","store","NAME","_addRow","param","oldEditRowIndex","allowCancelEditing","_allowRowAdding","_navigateToNewRow","__KEY__","_addRowCore","insertIndex","initialOldEditRowIndex","editRowIndex","_addChange","_editRowIndex","_change","focusController","c","pageIndexToInsertRow","navigateToRowByKey","navigateToRow","rowIndices","_showAddedRow","_afterInsertRow","_focusFirstEditableCellInRow","_beforeFocusElementInRow","$firstCell","_editCellInProgress","_delayedInputFocus","_isEditingStart","_beforeUpdateItems","editColumnName","getVisibleColumnIndex","_setEditColumnNameByIndex","_visibleColumns$index","_setEditColumnName","_getEditColumn","_getColumnByName","editColumn","columnName","editRowKey","isColumnHidden","visibleWidth","_resetEditIndices","_item$oldData","_editRowFromOptionChangedCore","preventRendering","_needFocusEditor","_focusEditorIfNeed","_showEditPopup","_repaintEditPopup","_getEditPopupHiddenHandler","_getPopupEditFormTemplate","_getSaveButtonConfig","saveEditData","_getCancelButtonConfig","_removeInternalData","_updateInsertAfterOrBeforeKeys","removeChange","_removeChange","executeOperation","func","waitForDeferredOperations","state","_processCanceledEditingCell","_repaintEditCell","oldColumn","loseFocus","$cell","beforeFocusCallback","callBeforeFocusCallbackAlways","inputFocus","$focusableElement","find","first","focusAndSelectElement","_beforeFocusCallback","real","ios","android","_focusEditingCell","$editCell","editColumnIndex","_checkAndDeleteRow","texts","confirmDelete","confirmDeleteMessage","_deleteRowCore","confirmDeleteTitle","showDialogTitle","confirmResult","_afterDeleteRow","_fireOnSaving","onSavingParams","_executeEditingAction","_disposed","_processChanges","deferreds","results","dataChanges","changeCopy","_beforeSaveEditData","remove","insert","newData","doneDeferred","always","_processRemoveIfError","_processRemove","_processRemoveCore","_processSaveEditDataResult","hasSavedData","changesLength","isError","_fireSaveEditDataEvents","_","_ref","isSaving","_resolveAfterSave","_saving","_saveEditDataInner","needFocusEditCell","_afterSaveEditData","dataSource","_ref2","beginLoading","_endSaving","endLoading","_cancelSaving","_beforeEndSaving","_refreshDataAfterSave","refreshMode","isFullRefresh","selection","reload","load","changesOnly","isEditColumnVisible","_isEditColumnVisible","useIcons","addCommandColumn","alignment","cellTemplate","fixedPosition","columnOption","_isEditButtonDisabled","isEditRowDefined","headerPanel","isButtonDisabled","setToolbarItemDisabled","_applyModified","$element","addClass","_beforeCloseEditCellInBatchMode","_cancelEditDataCore","_beforeCancelEditData","_afterCancelEditData","_hideEditPopup","hasEditData","isPageChanged","_getRowIndicesForCascadeUpdating","skipCurrentRow","addDeferred","_prepareChange","_options$row","rowKey","setCellValueResult","setCellValue","displayValueMap","_updateRowValues","values","updateFieldValue","forceUpdateRow","_applyChange","_focusPreviousEditingCellIfNeed","_updateEditRow","_needUpdateRow","isCustomSetCellValue","defaultSetCellValue","isCustomCalculateCellValue","visibleColumn","calculateCellValue","defaultCalculateCellValue","changeOptions","_applyChangeCore","_updateEditRowCore","_updateRowImmediately","_updateRowWithDelay","_validateEditFormAfterUpdate","_this$_editForm","elementContainer","_editForm","element","get","$focusedElement","getActiveElement","getCellIndex","focusedElement","selectionRange","getSelectionRange","$focusedItem","_this$component$$elem","selectionStart","setSelectionRange","changeParams","_this$getChanges","_getFormEditItemTemplate","editCellTemplate","getColumnTemplate","template","isRowMode","isRowEditing","isCellEditing","editingStartOptions","allowUpdating","getEditFormTemplate","icon","useLegacyColumnButtonTemplate","$button","attr","renderTemplate","iconType","getImageSourceType","getImageContainer","localizationName","getButtonLocalizationNames","format","hint","on","_button$onClick","append","prepareButtonItem","sortIndex","titleButtonTextByClassNames","revert","cancelAllChanges","saveAllChanges","className","hintText","widget","onInitialized","_getToolbarButtonClass","addWidgetPrefix","showText","location","locateInMenu","prepareEditButtons","buttonItems","allowAdding","highlightDataCell","shouldHighlightCell","_allowEditAction","allowEditAction","eventName","startEditAction","needCallback","isCellModified","parameters","isNewRowInEditMode","visibleEditRowIndex","rows","cellModified","editingModule","defaultOptions","editing","mode","selectTextOnEditStart","form","colCount","popup","controllers","extenders","_editingController","full","repaintRows","_this$_updateEditItem","_updateEditItem","_updateItemsCore","_applyChangeUpdate","_applyChangesOnly","_processItems","_processDataItem","dataItem","_processItem","dataIndex","_getChangedColumnIndices","oldItem","newItem","_isCellChanged","oldRow","newRow","editingController","cell","cells","needToRefreshOnDataSourceChange","isParasiteChange","Array","isArray","_handleDataSourceChange","dataSourceKeys","newChanges","isEditNewItem","every","views","is","$cellElements","getCellElements","cellIndex","cellElement","concat","_getCellTemplate","_createRow","$row","isRowRemoved","isRowInserted","isRowModified","removeClass","_getColumnIndexByElement","$tableElement","closest","$tableElements","getTableElements","_getColumnIndexByElementCore","$targetElement","_editCellByClick","target","isEditedCell","isShowEditorAlways","editCell","withoutSaveEditData","closeEditCell","_rowPointerDown","_pointerDownTimeout","_rowClick","isEditForm","rowElement","hasClass","_rowDblClick","_cellPrepared","_parameters$column","isEditableCell","toggleClass","css","_editCellPrepared","hasTemplate","_formItemPrepared","_getCellOptions","_createCell","cellValue","columnIdentifier","getCellOptions","_renderCore","_waitAsyncTemplates","_getToolbarItems","editButtonItems","excludedOptions","shouldInvalidate","optionName","_invalidate","isVisible"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport $ from \"../../core/renderer\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport Guid from \"../../core/guid\";\r\nimport {\r\n    resetActiveElement\r\n} from \"../../core/utils/dom\";\r\nimport {\r\n    isDefined,\r\n    isObject,\r\n    isFunction,\r\n    isEmptyObject\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport pointerEvents from \"../../events/pointer\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    createObjectWithChanges\r\n} from \"../../data/array_utils\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nimport {\r\n    confirm\r\n} from \"../dialog\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport devices from \"../../core/devices\";\r\nimport {\r\n    when,\r\n    Deferred,\r\n    fromPromise\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    equalByValue,\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport * as iconUtils from \"../../core/utils/icon\";\r\nimport {\r\n    EDITOR_CELL_CLASS,\r\n    ROW_CLASS,\r\n    EDIT_FORM_CLASS,\r\n    DATA_EDIT_DATA_INSERT_TYPE,\r\n    DATA_EDIT_DATA_REMOVE_TYPE,\r\n    EDITING_POPUP_OPTION_NAME,\r\n    EDITING_EDITROWKEY_OPTION_NAME,\r\n    EDITING_EDITCOLUMNNAME_OPTION_NAME,\r\n    TARGET_COMPONENT_NAME,\r\n    EDITORS_INPUT_SELECTOR,\r\n    FOCUSABLE_ELEMENT_SELECTOR,\r\n    EDIT_MODE_ROW,\r\n    EDIT_MODES,\r\n    ROW_BASED_MODES,\r\n    FIRST_NEW_ROW_POSITION,\r\n    LAST_NEW_ROW_POSITION,\r\n    PAGE_BOTTOM_NEW_ROW_POSITION,\r\n    PAGE_TOP_NEW_ROW_POSITION,\r\n    VIEWPORT_BOTTOM_NEW_ROW_POSITION,\r\n    VIEWPORT_TOP_NEW_ROW_POSITION\r\n} from \"./ui.grid_core.editing_constants\";\r\nimport {\r\n    deepExtendArraySafe\r\n} from \"../../core/utils/object\";\r\nvar READONLY_CLASS = \"readonly\";\r\nvar LINK_CLASS = \"dx-link\";\r\nvar ROW_SELECTED = \"dx-selection\";\r\nvar EDIT_BUTTON_CLASS = \"dx-edit-button\";\r\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\r\nvar COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\";\r\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\r\nvar ROW_INSERTED = \"dx-row-inserted\";\r\nvar ROW_MODIFIED = \"dx-row-modified\";\r\nvar CELL_MODIFIED = \"dx-cell-modified\";\r\nvar EDITING_NAMESPACE = \"dxDataGridEditing\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar DATA_EDIT_DATA_UPDATE_TYPE = \"update\";\r\nvar DEFAULT_START_EDIT_ACTION = \"click\";\r\nvar EDIT_LINK_CLASS = {\r\n    save: \"dx-link-save\",\r\n    cancel: \"dx-link-cancel\",\r\n    edit: \"dx-link-edit\",\r\n    undelete: \"dx-link-undelete\",\r\n    delete: \"dx-link-delete\",\r\n    add: \"dx-link-add\"\r\n};\r\nvar EDIT_ICON_CLASS = {\r\n    save: \"save\",\r\n    cancel: \"revert\",\r\n    edit: \"edit\",\r\n    undelete: \"revert\",\r\n    delete: \"trash\",\r\n    add: \"add\"\r\n};\r\nvar METHOD_NAMES = {\r\n    edit: \"editRow\",\r\n    delete: \"deleteRow\",\r\n    undelete: \"undeleteRow\",\r\n    save: \"saveEditData\",\r\n    cancel: \"cancelEditData\",\r\n    add: \"addRowByRowIndex\"\r\n};\r\nvar ACTION_OPTION_NAMES = {\r\n    add: \"allowAdding\",\r\n    edit: \"allowUpdating\",\r\n    delete: \"allowDeleting\"\r\n};\r\nvar BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\r\nvar EDITING_CHANGES_OPTION_NAME = \"editing.changes\";\r\nvar createFailureHandler = function(deferred) {\r\n    return function(arg) {\r\n        var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\r\n        deferred.reject(error)\r\n    }\r\n};\r\nvar isEditingCell = function(isEditRow, cellOptions) {\r\n    return cellOptions.isEditing || isEditRow && cellOptions.column.allowEditing\r\n};\r\nvar isEditingOrShowEditorAlwaysDataCell = function(isEditRow, cellOptions) {\r\n    var isCommandCell = !!cellOptions.column.command;\r\n    var isEditing = isEditingCell(isEditRow, cellOptions);\r\n    var isEditorCell = !isCommandCell && (isEditing || cellOptions.column.showEditorAlways);\r\n    return \"data\" === cellOptions.rowType && isEditorCell\r\n};\r\nvar EditingController = modules.ViewController.inherit(function() {\r\n    var getButtonIndex = (buttons, name) => {\r\n        var result = -1;\r\n        buttons.some((button, index) => {\r\n            if (getButtonName(button) === name) {\r\n                result = index;\r\n                return true\r\n            }\r\n        });\r\n        return result\r\n    };\r\n\r\n    function getButtonName(button) {\r\n        return isObject(button) ? button.name : button\r\n    }\r\n    var members = {\r\n        init: function() {\r\n            this._columnsController = this.getController(\"columns\");\r\n            this._dataController = this.getController(\"data\");\r\n            this._rowsView = this.getView(\"rowsView\");\r\n            this._lastOperation = null;\r\n            this._changes = [];\r\n            if (this._deferreds) {\r\n                this._deferreds.forEach(d => d.reject(\"cancel\"))\r\n            }\r\n            this._deferreds = [];\r\n            if (!this._dataChangedHandler) {\r\n                this._dataChangedHandler = this._handleDataChanged.bind(this);\r\n                this._dataController.changed.add(this._dataChangedHandler)\r\n            }\r\n            if (!this._saveEditorHandler) {\r\n                this.createAction(\"onInitNewRow\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowInserting\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowInserted\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onEditingStart\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowUpdating\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowUpdated\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowRemoving\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowRemoved\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onSaved\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onSaving\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onEditCanceling\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onEditCanceled\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                })\r\n            }\r\n            this._updateEditColumn();\r\n            this._updateEditButtons();\r\n            if (!this._internalState) {\r\n                this._internalState = []\r\n            }\r\n            this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;\r\n            this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true\r\n        },\r\n        getEditMode: function() {\r\n            var editMode = this.option(\"editing.mode\");\r\n            if (-1 !== EDIT_MODES.indexOf(editMode)) {\r\n                return editMode\r\n            }\r\n            return EDIT_MODE_ROW\r\n        },\r\n        _getDefaultEditorTemplate: function() {\r\n            return (container, options) => {\r\n                var $editor = $(\"<div>\").appendTo(container);\r\n                this.getController(\"editorFactory\").createEditor($editor, extend({}, options.column, {\r\n                    value: options.value,\r\n                    setValue: options.setValue,\r\n                    row: options.row,\r\n                    parentType: \"dataRow\",\r\n                    width: null,\r\n                    readOnly: !options.setValue,\r\n                    isOnForm: options.isOnForm,\r\n                    id: options.id\r\n                }))\r\n            }\r\n        },\r\n        _getNewRowPosition: function() {\r\n            var newRowPosition = this.option(\"editing.newRowPosition\");\r\n            var scrollingMode = this.option(\"scrolling.mode\");\r\n            if (\"virtual\" === scrollingMode) {\r\n                switch (newRowPosition) {\r\n                    case PAGE_TOP_NEW_ROW_POSITION:\r\n                        return VIEWPORT_TOP_NEW_ROW_POSITION;\r\n                    case PAGE_BOTTOM_NEW_ROW_POSITION:\r\n                        return VIEWPORT_BOTTOM_NEW_ROW_POSITION;\r\n                    default:\r\n                        return newRowPosition\r\n                }\r\n            }\r\n            return newRowPosition\r\n        },\r\n        getChanges: function() {\r\n            return this.option(EDITING_CHANGES_OPTION_NAME)\r\n        },\r\n        getInsertRowCount: function() {\r\n            var changes = this.option(EDITING_CHANGES_OPTION_NAME);\r\n            return changes.filter(change => \"insert\" === change.type).length\r\n        },\r\n        resetChanges: function() {\r\n            var changes = this.getChanges();\r\n            var needReset = null === changes || void 0 === changes ? void 0 : changes.length;\r\n            if (needReset) {\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, [])\r\n            }\r\n        },\r\n        _getInternalData: function(key) {\r\n            return this._internalState.filter(item => equalByValue(item.key, key))[0]\r\n        },\r\n        _addInternalData: function(params) {\r\n            var internalData = this._getInternalData(params.key);\r\n            if (internalData) {\r\n                return extend(internalData, params)\r\n            }\r\n            this._internalState.push(params);\r\n            return params\r\n        },\r\n        _getOldData: function(key) {\r\n            var _this$_getInternalDat;\r\n            return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData\r\n        },\r\n        getUpdatedData: function(data) {\r\n            var key = this._dataController.keyOf(data);\r\n            var changes = this.getChanges();\r\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            if (changes[editIndex]) {\r\n                return createObjectWithChanges(data, changes[editIndex].data)\r\n            }\r\n            return data\r\n        },\r\n        getInsertedData: function() {\r\n            return this.getChanges().filter(change => change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE).map(change => change.data)\r\n        },\r\n        getRemovedData: function() {\r\n            return this.getChanges().filter(change => this._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE).map(change => this._getOldData(change.key))\r\n        },\r\n        _fireDataErrorOccurred: function(arg) {\r\n            if (\"cancel\" === arg) {\r\n                return\r\n            }\r\n            var $popupContent = this.getPopupContent();\r\n            this._dataController.dataErrorOccurred.fire(arg, $popupContent)\r\n        },\r\n        _needToCloseEditableCell: noop,\r\n        _closeEditItem: noop,\r\n        _handleDataChanged: noop,\r\n        _isDefaultButtonVisible: function(button, options) {\r\n            var result = true;\r\n            switch (button.name) {\r\n                case \"delete\":\r\n                    result = this.allowDeleting(options);\r\n                    break;\r\n                case \"undelete\":\r\n                    result = false\r\n            }\r\n            return result\r\n        },\r\n        _isButtonVisible: function(button, options) {\r\n            var visible = button.visible;\r\n            if (!isDefined(visible)) {\r\n                return this._isDefaultButtonVisible(button, options)\r\n            }\r\n            return isFunction(visible) ? visible.call(button, {\r\n                component: options.component,\r\n                row: options.row,\r\n                column: options.column\r\n            }) : visible\r\n        },\r\n        _isButtonDisabled: function(button, options) {\r\n            var disabled = button.disabled;\r\n            return isFunction(disabled) ? disabled.call(button, {\r\n                component: options.component,\r\n                row: options.row,\r\n                column: options.column\r\n            }) : !!disabled\r\n        },\r\n        _getButtonConfig: function(button, options) {\r\n            var config = isObject(button) ? button : {};\r\n            var buttonName = getButtonName(button);\r\n            var editingTexts = (options => {\r\n                var editingTexts = options.component.option(\"editing.texts\") || {};\r\n                return {\r\n                    save: editingTexts.saveRowChanges,\r\n                    cancel: editingTexts.cancelRowChanges,\r\n                    edit: editingTexts.editRow,\r\n                    undelete: editingTexts.undeleteRow,\r\n                    delete: editingTexts.deleteRow,\r\n                    add: editingTexts.addRowToNode\r\n                }\r\n            })(options);\r\n            var methodName = METHOD_NAMES[buttonName];\r\n            var editingOptions = this.option(\"editing\");\r\n            var actionName = ACTION_OPTION_NAMES[buttonName];\r\n            var allowAction = actionName ? editingOptions[actionName] : true;\r\n            return extend({\r\n                name: buttonName,\r\n                text: editingTexts[buttonName],\r\n                cssClass: EDIT_LINK_CLASS[buttonName]\r\n            }, {\r\n                onClick: methodName && (e => {\r\n                    var event = e.event;\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                    setTimeout(() => {\r\n                        options.row && allowAction && this[methodName] && this[methodName](options.row.rowIndex)\r\n                    })\r\n                })\r\n            }, config)\r\n        },\r\n        _getEditingButtons: function(options) {\r\n            var buttonIndex;\r\n            var haveCustomButtons = !!options.column.buttons;\r\n            var buttons = (options.column.buttons || []).slice();\r\n            if (haveCustomButtons) {\r\n                buttonIndex = getButtonIndex(buttons, \"edit\");\r\n                if (buttonIndex >= 0) {\r\n                    if (getButtonIndex(buttons, \"save\") < 0) {\r\n                        buttons.splice(buttonIndex + 1, 0, \"save\")\r\n                    }\r\n                    if (getButtonIndex(buttons, \"cancel\") < 0) {\r\n                        buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\")\r\n                    }\r\n                }\r\n                buttonIndex = getButtonIndex(buttons, \"delete\");\r\n                if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\r\n                    buttons.splice(buttonIndex + 1, 0, \"undelete\")\r\n                }\r\n            } else {\r\n                buttons = BUTTON_NAMES.slice()\r\n            }\r\n            return buttons.map(button => this._getButtonConfig(button, options))\r\n        },\r\n        _renderEditingButtons: function($container, buttons, options, change) {\r\n            buttons.forEach(button => {\r\n                if (this._isButtonVisible(button, options)) {\r\n                    this._createButton($container, button, options, change)\r\n                }\r\n            })\r\n        },\r\n        _getEditCommandCellTemplate: function() {\r\n            return (container, options, change) => {\r\n                var $container = $(container);\r\n                if (\"data\" === options.rowType) {\r\n                    var buttons = this._getEditingButtons(options);\r\n                    this._renderEditingButtons($container, buttons, options, change);\r\n                    options.watch && options.watch(() => buttons.map(button => this._isButtonVisible(button, options)), () => {\r\n                        $container.empty();\r\n                        this._renderEditingButtons($container, buttons, options)\r\n                    })\r\n                } else {\r\n                    gridCoreUtils.setEmptyText($container)\r\n                }\r\n            }\r\n        },\r\n        isRowBasedEditMode: function() {\r\n            var editMode = this.getEditMode();\r\n            return -1 !== ROW_BASED_MODES.indexOf(editMode)\r\n        },\r\n        getFirstEditableColumnIndex: function() {\r\n            var columnsController = this.getController(\"columns\");\r\n            var columnIndex;\r\n            var visibleColumns = columnsController.getVisibleColumns();\r\n            each(visibleColumns, (function(index, column) {\r\n                if (column.allowEditing) {\r\n                    columnIndex = index;\r\n                    return false\r\n                }\r\n            }));\r\n            return columnIndex\r\n        },\r\n        getFirstEditableCellInRow: function(rowIndex) {\r\n            var rowsView = this.getView(\"rowsView\");\r\n            return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex())\r\n        },\r\n        getFocusedCellInRow: function(rowIndex) {\r\n            return this.getFirstEditableCellInRow(rowIndex)\r\n        },\r\n        getIndexByKey: function(key, items) {\r\n            return gridCoreUtils.getIndexByKey(key, items)\r\n        },\r\n        hasChanges: function(rowIndex) {\r\n            var changes = this.getChanges();\r\n            var result = false;\r\n            for (var i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {\r\n                if (changes[i].type && (!isDefined(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {\r\n                    result = true;\r\n                    break\r\n                }\r\n            }\r\n            return result\r\n        },\r\n        dispose: function() {\r\n            this.callBase();\r\n            clearTimeout(this._inputFocusTimeoutID);\r\n            eventsEngine.off(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\r\n            eventsEngine.off(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\r\n            eventsEngine.off(domAdapter.getDocument(), clickEventName, this._saveEditorHandler)\r\n        },\r\n        _silentOption: function(name, value) {\r\n            if (\"editing.changes\" === name) {\r\n                this._changes = deepExtendArraySafe([], value)\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        optionChanged: function(args) {\r\n            if (\"editing\" === args.name) {\r\n                var fullName = args.fullName;\r\n                if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {\r\n                    this._handleEditRowKeyChange(args)\r\n                } else if (fullName === EDITING_CHANGES_OPTION_NAME) {\r\n                    var isEqual = equalByValue(args.value, this._changes, -1);\r\n                    if (!isEqual) {\r\n                        this._changes = deepExtendArraySafe([], args.value);\r\n                        this._handleChangesChange(args)\r\n                    }\r\n                } else if (!args.handled) {\r\n                    this._columnsController.reinit();\r\n                    this.init();\r\n                    this.resetChanges();\r\n                    this._resetEditColumnName();\r\n                    this._resetEditRowKey()\r\n                }\r\n                args.handled = true\r\n            } else {\r\n                this.callBase(args)\r\n            }\r\n        },\r\n        _handleEditRowKeyChange: function(args) {\r\n            var rowIndex = this._dataController.getRowIndexByKey(args.value);\r\n            var oldRowIndexCorrection = this._getEditRowIndexCorrection();\r\n            var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\r\n            if (isDefined(args.value)) {\r\n                if (args.value !== args.previousValue) {\r\n                    this._editRowFromOptionChanged(rowIndex, oldRowIndex)\r\n                }\r\n            } else {\r\n                this.cancelEditData()\r\n            }\r\n        },\r\n        _handleChangesChange: function(args) {\r\n            var dataController = this._dataController;\r\n            var changes = args.value;\r\n            if (!args.value.length && !args.previousValue.length) {\r\n                return\r\n            }\r\n            changes.forEach(change => {\r\n                if (\"insert\" === change.type) {\r\n                    this._addInsertInfo(change)\r\n                } else {\r\n                    var _items$rowIndex;\r\n                    var items = dataController.items();\r\n                    var rowIndex = dataController.getRowIndexByKey(change.key);\r\n                    this._addInternalData({\r\n                        key: change.key,\r\n                        oldData: null === (_items$rowIndex = items[rowIndex]) || void 0 === _items$rowIndex ? void 0 : _items$rowIndex.data\r\n                    })\r\n                }\r\n            });\r\n            dataController.updateItems({\r\n                repaintChangesOnly: true,\r\n                isLiveUpdate: false,\r\n                isOptionChanged: true\r\n            })\r\n        },\r\n        publicMethods: function() {\r\n            return [\"addRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"]\r\n        },\r\n        refresh: function() {\r\n            if (!isDefined(this._pageIndex)) {\r\n                return\r\n            }\r\n            this._refreshCore.apply(this, arguments)\r\n        },\r\n        _refreshCore: noop,\r\n        isEditing: function() {\r\n            var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\r\n            return isEditRowKeyDefined\r\n        },\r\n        isEditRow: function() {\r\n            return false\r\n        },\r\n        _setEditRowKey: function(value, silent) {\r\n            if (silent) {\r\n                this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value)\r\n            } else {\r\n                this.option(EDITING_EDITROWKEY_OPTION_NAME, value)\r\n            }\r\n        },\r\n        _setEditRowKeyByIndex: function(rowIndex, silent) {\r\n            var key = this._dataController.getKeyByRowIndex(rowIndex);\r\n            if (void 0 === key) {\r\n                this._dataController.fireError(\"E1043\");\r\n                return\r\n            }\r\n            this._setEditRowKey(key, silent)\r\n        },\r\n        getEditRowIndex: function() {\r\n            return this._getVisibleEditRowIndex()\r\n        },\r\n        getEditFormRowIndex: function() {\r\n            return -1\r\n        },\r\n        isEditRowByIndex(rowIndex) {\r\n            var key = this._dataController.getKeyByRowIndex(rowIndex);\r\n            var isKeyEqual = isDefined(key) && equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key);\r\n            if (isKeyEqual) {\r\n                return this._getVisibleEditRowIndex() === rowIndex\r\n            }\r\n            return isKeyEqual\r\n        },\r\n        isEditCell: function(visibleRowIndex, columnIndex) {\r\n            return this.isEditRowByIndex(visibleRowIndex) && this._getVisibleEditColumnIndex() === columnIndex\r\n        },\r\n        getPopupContent: noop,\r\n        _isProcessedItem: function(item) {\r\n            return false\r\n        },\r\n        _getInsertRowIndex: function(items, change, isProcessedItems) {\r\n            var result = -1;\r\n            var dataController = this._dataController;\r\n            var key = this._getInsertAfterOrBeforeKey(change);\r\n            if (!isDefined(key) && 0 === items.length) {\r\n                result = 0\r\n            } else if (isDefined(key)) {\r\n                items.some((item, index) => {\r\n                    var isProcessedItem = isProcessedItems || this._isProcessedItem(item);\r\n                    if (isObject(item)) {\r\n                        if (isProcessedItem || isDefined(item[INSERT_INDEX])) {\r\n                            if (equalByValue(item.key, key)) {\r\n                                result = index\r\n                            }\r\n                        } else if (equalByValue(dataController.keyOf(item), key)) {\r\n                            result = index\r\n                        }\r\n                    }\r\n                    if (result >= 0) {\r\n                        var nextItem = items[result + 1];\r\n                        if (nextItem && (\"detail\" === nextItem.rowType || \"detailAdaptive\" === nextItem.rowType) && isDefined(change.insertAfterKey)) {\r\n                            return\r\n                        }\r\n                        if (isDefined(change.insertAfterKey)) {\r\n                            result += 1\r\n                        }\r\n                        return true\r\n                    }\r\n                })\r\n            }\r\n            return result\r\n        },\r\n        _generateNewItem: function(key) {\r\n            var _this$_getInternalDat2;\r\n            var item = {\r\n                key: key\r\n            };\r\n            var insertInfo = null === (_this$_getInternalDat2 = this._getInternalData(key)) || void 0 === _this$_getInternalDat2 ? void 0 : _this$_getInternalDat2.insertInfo;\r\n            if (null !== insertInfo && void 0 !== insertInfo && insertInfo[INSERT_INDEX]) {\r\n                item[INSERT_INDEX] = insertInfo[INSERT_INDEX]\r\n            }\r\n            return item\r\n        },\r\n        _getLoadedRowIndex: function(items, change, isProcessedItems) {\r\n            var loadedRowIndex = this._getInsertRowIndex(items, change, isProcessedItems);\r\n            var dataController = this._dataController;\r\n            if (loadedRowIndex < 0) {\r\n                var newRowPosition = this._getNewRowPosition();\r\n                var pageIndex = dataController.pageIndex();\r\n                var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n                if (newRowPosition !== LAST_NEW_ROW_POSITION && 0 === pageIndex && !isDefined(insertAfterOrBeforeKey)) {\r\n                    loadedRowIndex = 0\r\n                } else if (newRowPosition === LAST_NEW_ROW_POSITION && dataController.isLastPageLoaded()) {\r\n                    loadedRowIndex = items.length\r\n                }\r\n            }\r\n            return loadedRowIndex\r\n        },\r\n        processItems: function(items, e) {\r\n            var changeType = e.changeType;\r\n            this.update(changeType);\r\n            var changes = this.getChanges();\r\n            changes.forEach(change => {\r\n                var _this$_getInternalDat3;\r\n                var isInsert = change.type === DATA_EDIT_DATA_INSERT_TYPE;\r\n                if (!isInsert) {\r\n                    return\r\n                }\r\n                var key = change.key;\r\n                var insertInfo = null === (_this$_getInternalDat3 = this._getInternalData(key)) || void 0 === _this$_getInternalDat3 ? void 0 : _this$_getInternalDat3.insertInfo;\r\n                if (!isDefined(key) || !isDefined(insertInfo)) {\r\n                    insertInfo = this._addInsertInfo(change);\r\n                    key = insertInfo.key\r\n                }\r\n                var loadedRowIndex = this._getLoadedRowIndex(items, change);\r\n                var item = this._generateNewItem(key);\r\n                if (loadedRowIndex >= 0) {\r\n                    items.splice(loadedRowIndex, 0, item)\r\n                }\r\n            });\r\n            return items\r\n        },\r\n        processDataItem: function(item, options, generateDataValues) {\r\n            var columns = options.visibleColumns;\r\n            var key = item.data[INSERT_INDEX] ? item.data.key : item.key;\r\n            var changes = this.getChanges();\r\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            item.isEditing = false;\r\n            if (editIndex >= 0) {\r\n                this._processDataItemCore(item, changes[editIndex], key, columns, generateDataValues)\r\n            }\r\n        },\r\n        _processDataItemCore: function(item, change, key, columns, generateDataValues) {\r\n            var {\r\n                data: data,\r\n                type: type\r\n            } = change;\r\n            switch (type) {\r\n                case DATA_EDIT_DATA_INSERT_TYPE:\r\n                    item.isNewRow = true;\r\n                    item.key = key;\r\n                    item.data = data;\r\n                    break;\r\n                case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                    item.modified = true;\r\n                    item.oldData = item.data;\r\n                    item.data = createObjectWithChanges(item.data, data);\r\n                    item.modifiedValues = generateDataValues(data, columns, true);\r\n                    break;\r\n                case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                    item.removed = true\r\n            }\r\n        },\r\n        _initNewRow: function(options) {\r\n            this.executeAction(\"onInitNewRow\", options);\r\n            if (options.promise) {\r\n                var deferred = new Deferred;\r\n                when(fromPromise(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\r\n                return deferred\r\n            }\r\n        },\r\n        _createInsertInfo: function() {\r\n            var insertInfo = {};\r\n            insertInfo[INSERT_INDEX] = this._getInsertIndex();\r\n            return insertInfo\r\n        },\r\n        _addInsertInfo: function(change, parentKey) {\r\n            var _this$_getInternalDat4;\r\n            var insertInfo;\r\n            var {\r\n                key: key\r\n            } = change;\r\n            if (!isDefined(key)) {\r\n                key = String(new Guid);\r\n                change.key = key\r\n            }\r\n            insertInfo = null === (_this$_getInternalDat4 = this._getInternalData(key)) || void 0 === _this$_getInternalDat4 ? void 0 : _this$_getInternalDat4.insertInfo;\r\n            if (!isDefined(insertInfo)) {\r\n                var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n                insertInfo = this._createInsertInfo();\r\n                if (!isDefined(insertAfterOrBeforeKey)) {\r\n                    this._setInsertAfterOrBeforeKey(change, parentKey)\r\n                }\r\n            }\r\n            this._addInternalData({\r\n                insertInfo: insertInfo,\r\n                key: key\r\n            });\r\n            return {\r\n                insertInfo: insertInfo,\r\n                key: key\r\n            }\r\n        },\r\n        _setInsertAfterOrBeforeKey: function(change, parentKey) {\r\n            var dataController = this._dataController;\r\n            var allItems = dataController.items(true);\r\n            var rowsView = this.getView(\"rowsView\");\r\n            var newRowPosition = this._getNewRowPosition();\r\n            switch (newRowPosition) {\r\n                case FIRST_NEW_ROW_POSITION:\r\n                case LAST_NEW_ROW_POSITION:\r\n                    break;\r\n                case PAGE_TOP_NEW_ROW_POSITION:\r\n                case PAGE_BOTTOM_NEW_ROW_POSITION:\r\n                    if (allItems.length) {\r\n                        var itemIndex = newRowPosition === PAGE_TOP_NEW_ROW_POSITION ? 0 : allItems.length - 1;\r\n                        change[0 === itemIndex ? \"insertBeforeKey\" : \"insertAfterKey\"] = allItems[itemIndex].key\r\n                    }\r\n                    break;\r\n                default:\r\n                    var isViewportBottom = newRowPosition === VIEWPORT_BOTTOM_NEW_ROW_POSITION;\r\n                    var visibleItemIndex = isViewportBottom ? null === rowsView || void 0 === rowsView ? void 0 : rowsView.getBottomVisibleItemIndex() : null === rowsView || void 0 === rowsView ? void 0 : rowsView.getTopVisibleItemIndex();\r\n                    var row = dataController.getVisibleRows()[visibleItemIndex];\r\n                    if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\r\n                        visibleItemIndex++\r\n                    }\r\n                    var insertKey = dataController.getKeyByRowIndex(visibleItemIndex);\r\n                    if (isDefined(insertKey)) {\r\n                        change.insertBeforeKey = insertKey\r\n                    }\r\n            }\r\n        },\r\n        _getInsertIndex: function() {\r\n            var maxInsertIndex = 0;\r\n            this.getChanges().forEach(editItem => {\r\n                var _this$_getInternalDat5;\r\n                var insertInfo = null === (_this$_getInternalDat5 = this._getInternalData(editItem.key)) || void 0 === _this$_getInternalDat5 ? void 0 : _this$_getInternalDat5.insertInfo;\r\n                if (isDefined(insertInfo) && editItem.type === DATA_EDIT_DATA_INSERT_TYPE && insertInfo[INSERT_INDEX] > maxInsertIndex) {\r\n                    maxInsertIndex = insertInfo[INSERT_INDEX]\r\n                }\r\n            });\r\n            return maxInsertIndex + 1\r\n        },\r\n        _getInsertAfterOrBeforeKey: function(insertChange) {\r\n            var _insertChange$insertA;\r\n            return null !== (_insertChange$insertA = insertChange.insertAfterKey) && void 0 !== _insertChange$insertA ? _insertChange$insertA : insertChange.insertBeforeKey\r\n        },\r\n        _getPageIndexToInsertRow: function() {\r\n            var newRowPosition = this._getNewRowPosition();\r\n            var dataController = this._dataController;\r\n            var pageIndex = dataController.pageIndex();\r\n            var lastPageIndex = dataController.pageCount() - 1;\r\n            if (newRowPosition === FIRST_NEW_ROW_POSITION && 0 !== pageIndex) {\r\n                return 0\r\n            } else if (newRowPosition === LAST_NEW_ROW_POSITION && pageIndex !== lastPageIndex) {\r\n                return lastPageIndex\r\n            }\r\n            return -1\r\n        },\r\n        addRow: function(parentKey) {\r\n            var dataController = this._dataController;\r\n            var store = dataController.store();\r\n            if (!store) {\r\n                dataController.fireError(\"E1052\", this.component.NAME);\r\n                return (new Deferred).reject()\r\n            }\r\n            return this._addRow(parentKey)\r\n        },\r\n        _addRow: function(parentKey) {\r\n            var dataController = this._dataController;\r\n            var store = dataController.store();\r\n            var key = store && store.key();\r\n            var param = {\r\n                data: {}\r\n            };\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            var deferred = new Deferred;\r\n            this.refresh({\r\n                allowCancelEditing: true\r\n            });\r\n            if (!this._allowRowAdding()) {\r\n                when(this._navigateToNewRow(oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\r\n                return deferred.promise()\r\n            }\r\n            if (!key) {\r\n                param.data.__KEY__ = String(new Guid)\r\n            }\r\n            when(this._initNewRow(param, parentKey)).done(() => {\r\n                if (this._allowRowAdding()) {\r\n                    when(this._addRowCore(param.data, parentKey, oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject)\r\n                } else {\r\n                    deferred.reject(\"cancel\")\r\n                }\r\n            }).fail(deferred.reject);\r\n            return deferred.promise()\r\n        },\r\n        _allowRowAdding: function() {\r\n            var insertIndex = this._getInsertIndex();\r\n            if (insertIndex > 1) {\r\n                return false\r\n            }\r\n            return true\r\n        },\r\n        _addRowCore: function(data, parentKey, initialOldEditRowIndex) {\r\n            var change = {\r\n                data: data,\r\n                type: DATA_EDIT_DATA_INSERT_TYPE\r\n            };\r\n            var editRowIndex = this._getVisibleEditRowIndex();\r\n            var insertInfo = this._addInsertInfo(change, parentKey);\r\n            var key = insertInfo.key;\r\n            this._setEditRowKey(key, true);\r\n            this._addChange(change);\r\n            return this._navigateToNewRow(initialOldEditRowIndex, change, editRowIndex)\r\n        },\r\n        _navigateToNewRow: function(oldEditRowIndex, change, editRowIndex) {\r\n            var _editRowIndex, _change;\r\n            var d = new Deferred;\r\n            var dataController = this._dataController;\r\n            var focusController = this.getController(\"focus\");\r\n            editRowIndex = null !== (_editRowIndex = editRowIndex) && void 0 !== _editRowIndex ? _editRowIndex : -1;\r\n            change = null !== (_change = change) && void 0 !== _change ? _change : this.getChanges().filter(c => c.type === DATA_EDIT_DATA_INSERT_TYPE)[0];\r\n            if (!change) {\r\n                return d.reject(\"cancel\").promise()\r\n            }\r\n            var pageIndexToInsertRow = this._getPageIndexToInsertRow();\r\n            var rowIndex = this._getLoadedRowIndex(dataController.items(), change, true);\r\n            var navigateToRowByKey = key => {\r\n                when(null === focusController || void 0 === focusController ? void 0 : focusController.navigateToRow(key)).done(() => {\r\n                    rowIndex = dataController.getRowIndexByKey(change.key);\r\n                    d.resolve()\r\n                })\r\n            };\r\n            var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n            if (pageIndexToInsertRow >= 0) {\r\n                dataController.pageIndex(pageIndexToInsertRow).done(() => {\r\n                    navigateToRowByKey(change.key)\r\n                }).fail(d.reject)\r\n            } else if (rowIndex < 0 && isDefined(insertAfterOrBeforeKey)) {\r\n                navigateToRowByKey(insertAfterOrBeforeKey)\r\n            } else {\r\n                dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [oldEditRowIndex, editRowIndex, rowIndex]\r\n                });\r\n                rowIndex = dataController.getRowIndexByKey(change.key);\r\n                if (rowIndex < 0) {\r\n                    navigateToRowByKey(change.key)\r\n                } else {\r\n                    d.resolve()\r\n                }\r\n            }\r\n            d.done(() => {\r\n                this._showAddedRow(rowIndex);\r\n                this._afterInsertRow(change.key)\r\n            });\r\n            return d.promise()\r\n        },\r\n        _showAddedRow: function(rowIndex) {\r\n            this._focusFirstEditableCellInRow(rowIndex)\r\n        },\r\n        _beforeFocusElementInRow: noop,\r\n        _focusFirstEditableCellInRow: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var key = dataController.getKeyByRowIndex(rowIndex);\r\n            var $firstCell = this.getFirstEditableCellInRow(rowIndex);\r\n            this._editCellInProgress = true;\r\n            this._delayedInputFocus($firstCell, () => {\r\n                rowIndex = dataController.getRowIndexByKey(key);\r\n                this._editCellInProgress = false;\r\n                this._beforeFocusElementInRow(rowIndex)\r\n            })\r\n        },\r\n        _isEditingStart: function(options) {\r\n            this.executeAction(\"onEditingStart\", options);\r\n            return options.cancel\r\n        },\r\n        _beforeUpdateItems: noop,\r\n        _getVisibleEditColumnIndex: function() {\r\n            var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\r\n            if (!isDefined(editColumnName)) {\r\n                return -1\r\n            }\r\n            return this._columnsController.getVisibleColumnIndex(editColumnName)\r\n        },\r\n        _setEditColumnNameByIndex: function(index, silent) {\r\n            var _visibleColumns$index;\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent)\r\n        },\r\n        _setEditColumnName: function(name, silent) {\r\n            if (silent) {\r\n                this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name)\r\n            } else {\r\n                this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name)\r\n            }\r\n        },\r\n        _resetEditColumnName: function() {\r\n            this._setEditColumnName(null, true)\r\n        },\r\n        _getEditColumn: function() {\r\n            var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\r\n            return this._getColumnByName(editColumnName)\r\n        },\r\n        _getColumnByName: function(name) {\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            var editColumn;\r\n            isDefined(name) && visibleColumns.some(column => {\r\n                if (column.name === name) {\r\n                    editColumn = column;\r\n                    return true\r\n                }\r\n            });\r\n            return editColumn\r\n        },\r\n        _getVisibleEditRowIndex: function(columnName) {\r\n            var dataController = this._dataController;\r\n            var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n            var rowIndex = dataController.getRowIndexByKey(editRowKey);\r\n            if (-1 === rowIndex) {\r\n                return rowIndex\r\n            }\r\n            return rowIndex + this._getEditRowIndexCorrection(columnName)\r\n        },\r\n        _getEditRowIndexCorrection: function(columnName) {\r\n            var editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();\r\n            var isColumnHidden = \"adaptiveHidden\" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);\r\n            return isColumnHidden ? 1 : 0\r\n        },\r\n        _resetEditRowKey: function() {\r\n            this._setEditRowKey(null, true)\r\n        },\r\n        _resetEditIndices: function() {\r\n            this._resetEditColumnName();\r\n            this._resetEditRowKey()\r\n        },\r\n        editRow: function(rowIndex) {\r\n            var _item$oldData;\r\n            var dataController = this._dataController;\r\n            var items = dataController.items();\r\n            var item = items[rowIndex];\r\n            var params = {\r\n                data: item && item.data,\r\n                cancel: false\r\n            };\r\n            var oldRowIndex = this._getVisibleEditRowIndex();\r\n            if (!item) {\r\n                return\r\n            }\r\n            if (rowIndex === oldRowIndex) {\r\n                return true\r\n            }\r\n            if (void 0 === item.key) {\r\n                this._dataController.fireError(\"E1043\");\r\n                return\r\n            }\r\n            if (!item.isNewRow) {\r\n                params.key = item.key\r\n            }\r\n            if (this._isEditingStart(params)) {\r\n                return\r\n            }\r\n            this.resetChanges();\r\n            this.init();\r\n            this._resetEditColumnName();\r\n            this._pageIndex = dataController.pageIndex();\r\n            this._addInternalData({\r\n                key: item.key,\r\n                oldData: null !== (_item$oldData = item.oldData) && void 0 !== _item$oldData ? _item$oldData : item.data\r\n            });\r\n            this._setEditRowKey(item.key)\r\n        },\r\n        _editRowFromOptionChanged: function(rowIndex, oldRowIndex) {\r\n            var rowIndices = [oldRowIndex, rowIndex];\r\n            this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);\r\n            this._editRowFromOptionChangedCore(rowIndices, rowIndex)\r\n        },\r\n        _editRowFromOptionChangedCore: function(rowIndices, rowIndex, preventRendering) {\r\n            this._needFocusEditor = true;\r\n            this._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: rowIndices,\r\n                cancel: preventRendering\r\n            })\r\n        },\r\n        _focusEditorIfNeed: noop,\r\n        _showEditPopup: noop,\r\n        _repaintEditPopup: noop,\r\n        _getEditPopupHiddenHandler: function() {\r\n            return e => {\r\n                if (this.isEditing()) {\r\n                    this.cancelEditData()\r\n                }\r\n            }\r\n        },\r\n        _getPopupEditFormTemplate: noop,\r\n        _getSaveButtonConfig: function() {\r\n            return {\r\n                text: this.option(\"editing.texts.saveRowChanges\"),\r\n                onClick: this.saveEditData.bind(this)\r\n            }\r\n        },\r\n        _getCancelButtonConfig: function() {\r\n            return {\r\n                text: this.option(\"editing.texts.cancelRowChanges\"),\r\n                onClick: this.cancelEditData.bind(this)\r\n            }\r\n        },\r\n        _removeInternalData: function(key) {\r\n            var internalData = this._getInternalData(key);\r\n            var index = this._internalState.indexOf(internalData);\r\n            if (index > -1) {\r\n                this._internalState.splice(index, 1)\r\n            }\r\n        },\r\n        _updateInsertAfterOrBeforeKeys: function(changes, index) {\r\n            var removeChange = changes[index];\r\n            changes.forEach(change => {\r\n                var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n                if (equalByValue(insertAfterOrBeforeKey, removeChange.key)) {\r\n                    change[isDefined(change.insertAfterKey) ? \"insertAfterKey\" : \"insertBeforeKey\"] = this._getInsertAfterOrBeforeKey(removeChange)\r\n                }\r\n            })\r\n        },\r\n        _removeChange: function(index) {\r\n            if (index >= 0) {\r\n                var changes = [...this.getChanges()];\r\n                var key = changes[index].key;\r\n                this._removeInternalData(key);\r\n                this._updateInsertAfterOrBeforeKeys(changes, index);\r\n                changes.splice(index, 1);\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\r\n                if (equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {\r\n                    this._resetEditIndices()\r\n                }\r\n            }\r\n        },\r\n        executeOperation: function(deferred, func) {\r\n            this._lastOperation && this._lastOperation.reject();\r\n            this._lastOperation = deferred;\r\n            this.waitForDeferredOperations().done(() => {\r\n                if (\"rejected\" === deferred.state()) {\r\n                    return\r\n                }\r\n                func();\r\n                this._lastOperation = null\r\n            }).fail(() => {\r\n                deferred.reject();\r\n                this._lastOperation = null\r\n            })\r\n        },\r\n        waitForDeferredOperations: function() {\r\n            return when(...this._deferreds)\r\n        },\r\n        _processCanceledEditingCell: noop,\r\n        _repaintEditCell: function(column, oldColumn, oldEditRowIndex) {\r\n            this._needFocusEditor = true;\r\n            if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\r\n                this._editCellInProgress = true;\r\n                this.getController(\"editorFactory\").loseFocus();\r\n                this._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]\r\n                })\r\n            } else if (column !== oldColumn) {\r\n                this._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: []\r\n                })\r\n            }\r\n        },\r\n        _delayedInputFocus: function($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\r\n            var inputFocus = () => {\r\n                if (beforeFocusCallback) {\r\n                    beforeFocusCallback()\r\n                }\r\n                if ($cell) {\r\n                    var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\r\n                    gridCoreUtils.focusAndSelectElement(this, $focusableElement)\r\n                }\r\n                this._beforeFocusCallback = null\r\n            };\r\n            if (devices.real().ios || devices.real().android) {\r\n                inputFocus()\r\n            } else {\r\n                if (this._beforeFocusCallback) {\r\n                    this._beforeFocusCallback()\r\n                }\r\n                clearTimeout(this._inputFocusTimeoutID);\r\n                if (callBeforeFocusCallbackAlways) {\r\n                    this._beforeFocusCallback = beforeFocusCallback\r\n                }\r\n                this._inputFocusTimeoutID = setTimeout(inputFocus)\r\n            }\r\n        },\r\n        _focusEditingCell: function(beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\r\n            var rowsView = this.getView(\"rowsView\");\r\n            var editColumnIndex = this._getVisibleEditColumnIndex();\r\n            $editCell = $editCell || rowsView && rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\r\n            if ($editCell) {\r\n                this._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways)\r\n            }\r\n        },\r\n        deleteRow: function(rowIndex) {\r\n            this._checkAndDeleteRow(rowIndex)\r\n        },\r\n        _checkAndDeleteRow: function(rowIndex) {\r\n            var editingOptions = this.option(\"editing\");\r\n            var editingTexts = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.texts;\r\n            var confirmDelete = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.confirmDelete;\r\n            var confirmDeleteMessage = null === editingTexts || void 0 === editingTexts ? void 0 : editingTexts.confirmDeleteMessage;\r\n            var item = this._dataController.items()[rowIndex];\r\n            var allowDeleting = !this.isEditing() || item.isNewRow;\r\n            if (item && allowDeleting) {\r\n                if (!confirmDelete || !confirmDeleteMessage) {\r\n                    this._deleteRowCore(rowIndex)\r\n                } else {\r\n                    var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\r\n                    var showDialogTitle = isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\r\n                    confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(confirmResult => {\r\n                        if (confirmResult) {\r\n                            this._deleteRowCore(rowIndex)\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _deleteRowCore: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var item = dataController.items()[rowIndex];\r\n            var key = item && item.key;\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            this.refresh();\r\n            var changes = this.getChanges();\r\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            if (editIndex >= 0) {\r\n                if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\r\n                    this._removeChange(editIndex)\r\n                } else {\r\n                    this._addChange({\r\n                        key: key,\r\n                        type: DATA_EDIT_DATA_REMOVE_TYPE\r\n                    })\r\n                }\r\n            } else {\r\n                this._addChange({\r\n                    key: key,\r\n                    oldData: item.data,\r\n                    type: DATA_EDIT_DATA_REMOVE_TYPE\r\n                })\r\n            }\r\n            return this._afterDeleteRow(rowIndex, oldEditRowIndex)\r\n        },\r\n        _afterDeleteRow: function(rowIndex, oldEditRowIndex) {\r\n            return this.saveEditData()\r\n        },\r\n        undeleteRow: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var item = dataController.items()[rowIndex];\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            var key = item && item.key;\r\n            var changes = this.getChanges();\r\n            if (item) {\r\n                var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n                if (editIndex >= 0) {\r\n                    var {\r\n                        data: data\r\n                    } = changes[editIndex];\r\n                    if (isEmptyObject(data)) {\r\n                        this._removeChange(editIndex)\r\n                    } else {\r\n                        this._addChange({\r\n                            key: key,\r\n                            type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                        })\r\n                    }\r\n                    dataController.updateItems({\r\n                        changeType: \"update\",\r\n                        rowIndices: [oldEditRowIndex, rowIndex]\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _fireOnSaving: function() {\r\n            var onSavingParams = {\r\n                cancel: false,\r\n                promise: null,\r\n                changes: [...this.getChanges()]\r\n            };\r\n            this.executeAction(\"onSaving\", onSavingParams);\r\n            var d = new Deferred;\r\n            when(fromPromise(onSavingParams.promise)).done(() => {\r\n                d.resolve(onSavingParams)\r\n            }).fail(arg => {\r\n                createFailureHandler(d);\r\n                this._fireDataErrorOccurred(arg);\r\n                d.resolve({\r\n                    cancel: true\r\n                })\r\n            });\r\n            return d\r\n        },\r\n        _executeEditingAction: function(actionName, params, func) {\r\n            if (this.component._disposed) {\r\n                return null\r\n            }\r\n            var deferred = new Deferred;\r\n            this.executeAction(actionName, params);\r\n            when(fromPromise(params.cancel)).done((function(cancel) {\r\n                if (cancel) {\r\n                    setTimeout((function() {\r\n                        deferred.resolve(\"cancel\")\r\n                    }))\r\n                } else {\r\n                    func(params).done(deferred.resolve).fail(createFailureHandler(deferred))\r\n                }\r\n            })).fail(createFailureHandler(deferred));\r\n            return deferred\r\n        },\r\n        _processChanges: function(deferreds, results, dataChanges, changes) {\r\n            var store = this._dataController.store();\r\n            each(changes, (index, change) => {\r\n                var oldData = this._getOldData(change.key);\r\n                var {\r\n                    data: data,\r\n                    type: type\r\n                } = change;\r\n                var changeCopy = _extends({}, change);\r\n                var deferred;\r\n                var params;\r\n                if (this._beforeSaveEditData(change, index)) {\r\n                    return\r\n                }\r\n                switch (type) {\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        params = {\r\n                            data: oldData,\r\n                            key: change.key,\r\n                            cancel: false\r\n                        };\r\n                        deferred = this._executeEditingAction(\"onRowRemoving\", params, (function() {\r\n                            return store.remove(change.key).done((function(key) {\r\n                                dataChanges.push({\r\n                                    type: \"remove\",\r\n                                    key: key\r\n                                })\r\n                            }))\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        params = {\r\n                            data: data,\r\n                            cancel: false\r\n                        };\r\n                        deferred = this._executeEditingAction(\"onRowInserting\", params, (function() {\r\n                            return store.insert(params.data).done((function(data, key) {\r\n                                if (isDefined(key)) {\r\n                                    changeCopy.key = key\r\n                                }\r\n                                if (data && isObject(data) && data !== params.data) {\r\n                                    changeCopy.data = data\r\n                                }\r\n                                dataChanges.push({\r\n                                    type: \"insert\",\r\n                                    data: data,\r\n                                    index: 0\r\n                                })\r\n                            }))\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        params = {\r\n                            newData: data,\r\n                            oldData: oldData,\r\n                            key: change.key,\r\n                            cancel: false\r\n                        };\r\n                        deferred = this._executeEditingAction(\"onRowUpdating\", params, (function() {\r\n                            return store.update(change.key, params.newData).done((function(data, key) {\r\n                                if (data && isObject(data) && data !== params.newData) {\r\n                                    changeCopy.data = data\r\n                                }\r\n                                dataChanges.push({\r\n                                    type: \"update\",\r\n                                    key: key,\r\n                                    data: data\r\n                                })\r\n                            }))\r\n                        }))\r\n                }\r\n                changes[index] = changeCopy;\r\n                if (deferred) {\r\n                    var doneDeferred = new Deferred;\r\n                    deferred.always((function(data) {\r\n                        results.push({\r\n                            key: change.key,\r\n                            result: data\r\n                        })\r\n                    })).always(doneDeferred.resolve);\r\n                    deferreds.push(doneDeferred.promise())\r\n                }\r\n            })\r\n        },\r\n        _processRemoveIfError: function(changes, editIndex) {\r\n            var change = changes[editIndex];\r\n            if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                if (editIndex >= 0) {\r\n                    changes.splice(editIndex, 1)\r\n                }\r\n            }\r\n            return true\r\n        },\r\n        _processRemove: function(changes, editIndex, cancel) {\r\n            var change = changes[editIndex];\r\n            if (!cancel || !change || change.type === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                return this._processRemoveCore(changes, editIndex, !cancel || !change)\r\n            }\r\n        },\r\n        _processRemoveCore: function(changes, editIndex) {\r\n            if (editIndex >= 0) {\r\n                changes.splice(editIndex, 1)\r\n            }\r\n            return true\r\n        },\r\n        _processSaveEditDataResult: function(results) {\r\n            var hasSavedData = false;\r\n            var changes = [...this.getChanges()];\r\n            var changesLength = changes.length;\r\n            for (var i = 0; i < results.length; i++) {\r\n                var arg = results[i].result;\r\n                var cancel = \"cancel\" === arg;\r\n                var editIndex = gridCoreUtils.getIndexByKey(results[i].key, changes);\r\n                var change = changes[editIndex];\r\n                var isError = arg && arg instanceof Error;\r\n                if (isError) {\r\n                    if (change) {\r\n                        this._addInternalData({\r\n                            key: change.key,\r\n                            error: arg\r\n                        })\r\n                    }\r\n                    this._fireDataErrorOccurred(arg);\r\n                    if (this._processRemoveIfError(changes, editIndex)) {\r\n                        break\r\n                    }\r\n                } else if (this._processRemove(changes, editIndex, cancel)) {\r\n                    hasSavedData = !cancel\r\n                }\r\n            }\r\n            if (changes.length < changesLength) {\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, changes)\r\n            }\r\n            return hasSavedData\r\n        },\r\n        _fireSaveEditDataEvents: function(changes) {\r\n            each(changes, (_, _ref) => {\r\n                var {\r\n                    data: data,\r\n                    key: key,\r\n                    type: type\r\n                } = _ref;\r\n                var internalData = this._addInternalData({\r\n                    key: key\r\n                });\r\n                var params = {\r\n                    key: key,\r\n                    data: data\r\n                };\r\n                if (internalData.error) {\r\n                    params.error = internalData.error\r\n                }\r\n                switch (type) {\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        this.executeAction(\"onRowRemoved\", extend({}, params, {\r\n                            data: internalData.oldData\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        this.executeAction(\"onRowInserted\", params);\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        this.executeAction(\"onRowUpdated\", params)\r\n                }\r\n            });\r\n            this.executeAction(\"onSaved\", {\r\n                changes: changes\r\n            })\r\n        },\r\n        saveEditData: function() {\r\n            var deferred = new Deferred;\r\n            this.waitForDeferredOperations().done(() => {\r\n                if (this.isSaving()) {\r\n                    this._resolveAfterSave(deferred);\r\n                    return\r\n                }\r\n                when(this._beforeSaveEditData()).done(cancel => {\r\n                    if (cancel) {\r\n                        this._resolveAfterSave(deferred, {\r\n                            cancel: cancel\r\n                        });\r\n                        return\r\n                    }\r\n                    this._saving = true;\r\n                    var options = {};\r\n                    this._saveEditDataInner(options).always(() => {\r\n                        this._saving = false;\r\n                        options.needFocusEditCell && this._focusEditingCell()\r\n                    }).done(deferred.resolve).fail(deferred.reject)\r\n                }).fail(deferred.reject)\r\n            }).fail(deferred.reject);\r\n            return deferred.promise()\r\n        },\r\n        _resolveAfterSave: function(deferred) {\r\n            var {\r\n                cancel: cancel,\r\n                error: error\r\n            } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\r\n            when(this._afterSaveEditData(cancel)).done((function() {\r\n                deferred.resolve(error)\r\n            })).fail(deferred.reject)\r\n        },\r\n        _saveEditDataInner: function(options) {\r\n            var results = [];\r\n            var deferreds = [];\r\n            var dataChanges = [];\r\n            var dataController = this._dataController;\r\n            var dataSource = dataController.dataSource();\r\n            var result = new Deferred;\r\n            when(this._fireOnSaving()).done(_ref2 => {\r\n                var {\r\n                    cancel: cancel,\r\n                    changes: changes\r\n                } = _ref2;\r\n                if (cancel) {\r\n                    return result.resolve().promise()\r\n                }\r\n                this._processChanges(deferreds, results, dataChanges, changes);\r\n                if (deferreds.length) {\r\n                    null === dataSource || void 0 === dataSource ? void 0 : dataSource.beginLoading();\r\n                    when(...deferreds).done(() => {\r\n                        if (this._processSaveEditDataResult(results)) {\r\n                            this._endSaving(dataChanges, changes, result)\r\n                        } else {\r\n                            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n                            result.resolve()\r\n                        }\r\n                    }).fail(error => {\r\n                        null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n                        result.resolve(error)\r\n                    });\r\n                    return result.always(() => {\r\n                        options.needFocusEditCell = true\r\n                    }).promise()\r\n                }\r\n                this._cancelSaving(result)\r\n            }).fail(result.reject);\r\n            return result.promise()\r\n        },\r\n        _beforeEndSaving: function(changes) {\r\n            this._resetEditIndices()\r\n        },\r\n        _endSaving: function(dataChanges, changes, deferred) {\r\n            var dataSource = this._dataController.dataSource();\r\n            this._beforeEndSaving(changes);\r\n            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n            this._refreshDataAfterSave(dataChanges, changes, deferred)\r\n        },\r\n        _cancelSaving: function(result) {\r\n            this.executeAction(\"onSaved\", {\r\n                changes: []\r\n            });\r\n            this._resolveAfterSave(result)\r\n        },\r\n        _refreshDataAfterSave: function(dataChanges, changes, deferred) {\r\n            var dataController = this._dataController;\r\n            var refreshMode = this.option(\"editing.refreshMode\");\r\n            var isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\r\n            if (!isFullRefresh) {\r\n                dataController.push(dataChanges)\r\n            }\r\n            when(dataController.refresh({\r\n                selection: isFullRefresh,\r\n                reload: isFullRefresh,\r\n                load: \"reshape\" === refreshMode,\r\n                changesOnly: this.option(\"repaintChangesOnly\")\r\n            })).always(() => {\r\n                this._fireSaveEditDataEvents(changes)\r\n            }).done(() => {\r\n                this._resolveAfterSave(deferred)\r\n            }).fail(error => {\r\n                this._resolveAfterSave(deferred, {\r\n                    error: error\r\n                })\r\n            })\r\n        },\r\n        isSaving: function() {\r\n            return this._saving\r\n        },\r\n        _updateEditColumn: function() {\r\n            var isEditColumnVisible = this._isEditColumnVisible();\r\n            var useIcons = this.option(\"editing.useIcons\");\r\n            var cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\r\n            this._columnsController.addCommandColumn({\r\n                type: \"buttons\",\r\n                command: \"edit\",\r\n                visible: isEditColumnVisible,\r\n                cssClass: cssClass,\r\n                width: \"auto\",\r\n                alignment: \"center\",\r\n                cellTemplate: this._getEditCommandCellTemplate(),\r\n                fixedPosition: \"right\"\r\n            });\r\n            this._columnsController.columnOption(\"command:edit\", {\r\n                visible: isEditColumnVisible,\r\n                cssClass: cssClass\r\n            })\r\n        },\r\n        _isEditColumnVisible: function() {\r\n            var editingOptions = this.option(\"editing\");\r\n            return editingOptions.allowDeleting\r\n        },\r\n        _isEditButtonDisabled: function() {\r\n            var hasChanges = this.hasChanges();\r\n            var isEditRowDefined = isDefined(this.option(\"editing.editRowKey\"));\r\n            return !(isEditRowDefined || hasChanges)\r\n        },\r\n        _updateEditButtons: function() {\r\n            var headerPanel = this.getView(\"headerPanel\");\r\n            var isButtonDisabled = this._isEditButtonDisabled();\r\n            if (headerPanel) {\r\n                headerPanel.setToolbarItemDisabled(\"saveButton\", isButtonDisabled);\r\n                headerPanel.setToolbarItemDisabled(\"revertButton\", isButtonDisabled)\r\n            }\r\n        },\r\n        _applyModified: function($element) {\r\n            $element && $element.addClass(CELL_MODIFIED)\r\n        },\r\n        _beforeCloseEditCellInBatchMode: noop,\r\n        cancelEditData: function() {\r\n            var changes = this.getChanges();\r\n            var params = {\r\n                cancel: false,\r\n                changes: changes\r\n            };\r\n            this.executeAction(\"onEditCanceling\", params);\r\n            if (!params.cancel) {\r\n                this._cancelEditDataCore();\r\n                this.executeAction(\"onEditCanceled\", {\r\n                    changes: changes\r\n                })\r\n            }\r\n        },\r\n        _cancelEditDataCore: function() {\r\n            var rowIndex = this._getVisibleEditRowIndex();\r\n            this._beforeCancelEditData();\r\n            this.init();\r\n            this.resetChanges();\r\n            this._resetEditColumnName();\r\n            this._resetEditRowKey();\r\n            this._afterCancelEditData(rowIndex)\r\n        },\r\n        _afterCancelEditData: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            dataController.updateItems({\r\n                repaintChangesOnly: this.option(\"repaintChangesOnly\")\r\n            })\r\n        },\r\n        _hideEditPopup: noop,\r\n        hasEditData: function() {\r\n            return this.hasChanges()\r\n        },\r\n        update: function(changeType) {\r\n            var dataController = this._dataController;\r\n            if (dataController && this._pageIndex !== dataController.pageIndex()) {\r\n                if (\"refresh\" === changeType) {\r\n                    this.refresh({\r\n                        isPageChanged: true\r\n                    })\r\n                }\r\n                this._pageIndex = dataController.pageIndex()\r\n            }\r\n            this._updateEditButtons()\r\n        },\r\n        _getRowIndicesForCascadeUpdating: function(row, skipCurrentRow) {\r\n            return skipCurrentRow ? [] : [row.rowIndex]\r\n        },\r\n        addDeferred: function(deferred) {\r\n            if (this._deferreds.indexOf(deferred) < 0) {\r\n                this._deferreds.push(deferred);\r\n                deferred.always(() => {\r\n                    var index = this._deferreds.indexOf(deferred);\r\n                    if (index >= 0) {\r\n                        this._deferreds.splice(index, 1)\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        _prepareChange: function(options, value, text) {\r\n            var _options$row;\r\n            var newData = {};\r\n            var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\r\n            var rowKey = options.key;\r\n            var deferred = new Deferred;\r\n            if (void 0 !== rowKey) {\r\n                options.value = value;\r\n                var setCellValueResult = fromPromise(options.column.setCellValue(newData, value, extend(true, {}, oldData), text));\r\n                setCellValueResult.done((function() {\r\n                    deferred.resolve({\r\n                        data: newData,\r\n                        key: rowKey,\r\n                        oldData: oldData,\r\n                        type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                    })\r\n                })).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\r\n                if (isDefined(text) && options.column.displayValueMap) {\r\n                    options.column.displayValueMap[value] = text\r\n                }\r\n                this._updateRowValues(options);\r\n                this.addDeferred(deferred)\r\n            }\r\n            return deferred\r\n        },\r\n        _updateRowValues: function(options) {\r\n            if (options.values) {\r\n                var dataController = this._dataController;\r\n                var rowIndex = dataController.getRowIndexByKey(options.key);\r\n                var row = dataController.getVisibleRows()[rowIndex];\r\n                if (row) {\r\n                    options.row.values = row.values;\r\n                    options.values = row.values\r\n                }\r\n                options.values[options.columnIndex] = options.value\r\n            }\r\n        },\r\n        updateFieldValue: function(options, value, text, forceUpdateRow) {\r\n            var rowKey = options.key;\r\n            var deferred = new Deferred;\r\n            if (void 0 === rowKey) {\r\n                this._dataController.fireError(\"E1043\")\r\n            }\r\n            if (options.column.setCellValue) {\r\n                this._prepareChange(options, value, text).done(params => {\r\n                    when(this._applyChange(options, params, forceUpdateRow)).always(() => {\r\n                        deferred.resolve()\r\n                    })\r\n                })\r\n            } else {\r\n                deferred.resolve()\r\n            }\r\n            return deferred.promise()\r\n        },\r\n        _focusPreviousEditingCellIfNeed: function(options) {\r\n            if (this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex)) {\r\n                this._focusEditingCell();\r\n                this._updateEditRow(options.row, true);\r\n                return true\r\n            }\r\n        },\r\n        _needUpdateRow: function(column) {\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            if (!column) {\r\n                column = this._getEditColumn()\r\n            }\r\n            var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\r\n            var isCustomCalculateCellValue = visibleColumns.some(visibleColumn => visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue);\r\n            return isCustomSetCellValue || isCustomCalculateCellValue\r\n        },\r\n        _applyChange: function(options, params, forceUpdateRow) {\r\n            var changeOptions = _extends({}, options, {\r\n                forceUpdateRow: forceUpdateRow\r\n            });\r\n            this._addChange(params, changeOptions);\r\n            this._updateEditButtons();\r\n            return this._applyChangeCore(options, changeOptions.forceUpdateRow)\r\n        },\r\n        _applyChangeCore: function(options, forceUpdateRow) {\r\n            var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\r\n            var row = options.row;\r\n            if (row) {\r\n                if (forceUpdateRow || isCustomSetCellValue) {\r\n                    this._updateEditRow(row, forceUpdateRow, isCustomSetCellValue)\r\n                } else if (row.update) {\r\n                    row.update()\r\n                }\r\n            }\r\n        },\r\n        _updateEditRowCore: function(row, skipCurrentRow, isCustomSetCellValue) {\r\n            this._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: this._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\r\n            })\r\n        },\r\n        _updateEditRow: function(row, forceUpdateRow, isCustomSetCellValue) {\r\n            if (forceUpdateRow) {\r\n                this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue)\r\n            } else {\r\n                this._updateRowWithDelay(row, isCustomSetCellValue)\r\n            }\r\n        },\r\n        _updateRowImmediately: function(row, forceUpdateRow, isCustomSetCellValue) {\r\n            this._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\r\n            this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\r\n            if (!forceUpdateRow) {\r\n                this._focusEditingCell()\r\n            }\r\n        },\r\n        _updateRowWithDelay: function(row, isCustomSetCellValue) {\r\n            var deferred = new Deferred;\r\n            this.addDeferred(deferred);\r\n            setTimeout(() => {\r\n                var _this$_editForm;\r\n                var elementContainer = (null === (_this$_editForm = this._editForm) || void 0 === _this$_editForm ? void 0 : _this$_editForm.element()) || this.component.$element().get(0);\r\n                var $focusedElement = $(domAdapter.getActiveElement(elementContainer));\r\n                var columnIndex = this._rowsView.getCellIndex($focusedElement, row.rowIndex);\r\n                var focusedElement = $focusedElement.get(0);\r\n                var selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\r\n                this._updateEditRowCore(row, false, isCustomSetCellValue);\r\n                this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\r\n                if (columnIndex >= 0) {\r\n                    var $focusedItem = this._rowsView._getCellElement(row.rowIndex, columnIndex);\r\n                    this._delayedInputFocus($focusedItem, () => {\r\n                        setTimeout(() => {\r\n                            var _this$component$$elem;\r\n                            focusedElement = domAdapter.getActiveElement(null === (_this$component$$elem = this.component.$element()) || void 0 === _this$component$$elem ? void 0 : _this$component$$elem.get(0));\r\n                            if (selectionRange.selectionStart >= 0) {\r\n                                gridCoreUtils.setSelectionRange(focusedElement, selectionRange)\r\n                            }\r\n                        })\r\n                    })\r\n                }\r\n                deferred.resolve()\r\n            })\r\n        },\r\n        _validateEditFormAfterUpdate: noop,\r\n        _addChange: function(changeParams, options) {\r\n            var _this$getChanges;\r\n            var row = null === options || void 0 === options ? void 0 : options.row;\r\n            var changes = [...this.getChanges()];\r\n            var index = gridCoreUtils.getIndexByKey(changeParams.key, changes);\r\n            if (index < 0) {\r\n                index = changes.length;\r\n                this._addInternalData({\r\n                    key: changeParams.key,\r\n                    oldData: changeParams.oldData\r\n                });\r\n                delete changeParams.oldData;\r\n                changes.push(changeParams)\r\n            }\r\n            var change = _extends({}, changes[index]);\r\n            if (change) {\r\n                if (changeParams.data) {\r\n                    change.data = createObjectWithChanges(change.data, changeParams.data)\r\n                }\r\n                if ((!change.type || !changeParams.data) && changeParams.type) {\r\n                    change.type = changeParams.type\r\n                }\r\n                if (row) {\r\n                    row.oldData = this._getOldData(row.key);\r\n                    row.data = createObjectWithChanges(row.data, changeParams.data)\r\n                }\r\n            }\r\n            changes[index] = change;\r\n            this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\r\n            if (options && change !== (null === (_this$getChanges = this.getChanges()) || void 0 === _this$getChanges ? void 0 : _this$getChanges[index])) {\r\n                options.forceUpdateRow = true\r\n            }\r\n            return change\r\n        },\r\n        _getFormEditItemTemplate: function(cellOptions, column) {\r\n            return column.editCellTemplate || this._getDefaultEditorTemplate()\r\n        },\r\n        getColumnTemplate: function(options) {\r\n            var column = options.column;\r\n            var rowIndex = options.row && options.row.rowIndex;\r\n            var template;\r\n            var isRowMode = this.isRowBasedEditMode();\r\n            var isRowEditing = this.isEditRow(rowIndex);\r\n            var isCellEditing = this.isEditCell(rowIndex, options.columnIndex);\r\n            var editingStartOptions;\r\n            if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\r\n                var allowUpdating = this.allowUpdating(options);\r\n                if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowEditing || !isRowMode)) {\r\n                    if (column.showEditorAlways && !isRowMode) {\r\n                        editingStartOptions = {\r\n                            cancel: false,\r\n                            key: options.row.isNewRow ? void 0 : options.row.key,\r\n                            data: options.row.data,\r\n                            column: column\r\n                        };\r\n                        this._isEditingStart(editingStartOptions)\r\n                    }\r\n                    if (!editingStartOptions || !editingStartOptions.cancel) {\r\n                        options.setValue = (value, text) => {\r\n                            this.updateFieldValue(options, value, text)\r\n                        }\r\n                    }\r\n                }\r\n                template = column.editCellTemplate || this._getDefaultEditorTemplate()\r\n            } else if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\r\n                template = null === this || void 0 === this ? void 0 : this.getEditFormTemplate(options)\r\n            }\r\n            return template\r\n        },\r\n        _createButton: function($container, button, options, change) {\r\n            var icon = EDIT_ICON_CLASS[button.name];\r\n            var useIcons = this.option(\"editing.useIcons\");\r\n            var useLegacyColumnButtonTemplate = this.option(\"useLegacyColumnButtonTemplate\");\r\n            var $button = $(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\r\n            if (button.template && useLegacyColumnButtonTemplate) {\r\n                this._rowsView.renderTemplate($container, button.template, options, true)\r\n            } else {\r\n                if (button.template) {\r\n                    $button = $(\"<span>\").addClass(button.cssClass)\r\n                } else if (useIcons && icon || button.icon) {\r\n                    icon = button.icon || icon;\r\n                    var iconType = iconUtils.getImageSourceType(icon);\r\n                    if (\"image\" === iconType || \"svg\" === iconType) {\r\n                        $button = iconUtils.getImageContainer(icon).addClass(button.cssClass)\r\n                    } else {\r\n                        $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text)\r\n                    }\r\n                    $button.addClass(\"dx-link-icon\");\r\n                    $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\r\n                    var localizationName = this.getButtonLocalizationNames()[button.name];\r\n                    localizationName && $button.attr(\"aria-label\", messageLocalization.format(localizationName))\r\n                } else {\r\n                    $button.text(button.text)\r\n                }\r\n                if (isDefined(button.hint)) {\r\n                    $button.attr(\"title\", button.hint)\r\n                }\r\n                if (this._isButtonDisabled(button, options)) {\r\n                    $button.addClass(\"dx-state-disabled\")\r\n                } else if (!button.template || button.onClick) {\r\n                    eventsEngine.on($button, addNamespace(\"click\", EDITING_NAMESPACE), this.createAction((function(e) {\r\n                        var _button$onClick;\r\n                        null === (_button$onClick = button.onClick) || void 0 === _button$onClick ? void 0 : _button$onClick.call(button, extend({}, e, {\r\n                            row: options.row,\r\n                            column: options.column\r\n                        }));\r\n                        e.event.preventDefault();\r\n                        e.event.stopPropagation()\r\n                    })))\r\n                }\r\n                $container.append($button, \"&nbsp;\");\r\n                if (button.template) {\r\n                    this._rowsView.renderTemplate($button, button.template, _extends({}, options, {\r\n                        column: void 0\r\n                    }), true, change)\r\n                }\r\n            }\r\n        },\r\n        getButtonLocalizationNames: () => ({\r\n            edit: \"dxDataGrid-editingEditRow\",\r\n            save: \"dxDataGrid-editingSaveRowChanges\",\r\n            delete: \"dxDataGrid-editingDeleteRow\",\r\n            undelete: \"dxDataGrid-editingUndeleteRow\",\r\n            cancel: \"dxDataGrid-editingCancelRowChanges\"\r\n        }),\r\n        prepareButtonItem: function(headerPanel, name, methodName, sortIndex) {\r\n            var editingTexts = this.option(\"editing.texts\") || {};\r\n            var titleButtonTextByClassNames = {\r\n                revert: editingTexts.cancelAllChanges,\r\n                save: editingTexts.saveAllChanges,\r\n                addRow: editingTexts.addRow\r\n            };\r\n            var className = {\r\n                revert: \"cancel\",\r\n                save: \"save\",\r\n                addRow: \"addrow\"\r\n            } [name];\r\n            var hintText = titleButtonTextByClassNames[name];\r\n            var isButtonDisabled = (\"save\" === className || \"cancel\" === className) && this._isEditButtonDisabled();\r\n            return {\r\n                widget: \"dxButton\",\r\n                options: {\r\n                    onInitialized: e => {\r\n                        $(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + this.addWidgetPrefix(className) + \"-button\"))\r\n                    },\r\n                    icon: \"edit-button-\" + className,\r\n                    disabled: isButtonDisabled,\r\n                    onClick: () => {\r\n                        setTimeout(() => {\r\n                            this[methodName]()\r\n                        })\r\n                    },\r\n                    text: hintText,\r\n                    hint: hintText\r\n                },\r\n                showText: \"inMenu\",\r\n                name: name + \"Button\",\r\n                location: \"after\",\r\n                locateInMenu: \"auto\",\r\n                sortIndex: sortIndex\r\n            }\r\n        },\r\n        prepareEditButtons: function(headerPanel) {\r\n            var editingOptions = this.option(\"editing\") || {};\r\n            var buttonItems = [];\r\n            if (editingOptions.allowAdding) {\r\n                buttonItems.push(this.prepareButtonItem(headerPanel, \"addRow\", \"addRow\", 20))\r\n            }\r\n            return buttonItems\r\n        },\r\n        highlightDataCell: function($cell, params) {\r\n            this.shouldHighlightCell(params) && $cell.addClass(CELL_MODIFIED)\r\n        },\r\n        _afterInsertRow: noop,\r\n        _beforeSaveEditData: function(change) {\r\n            if (change && !isDefined(change.key) && isDefined(change.type)) {\r\n                return true\r\n            }\r\n        },\r\n        _afterSaveEditData: noop,\r\n        _beforeCancelEditData: noop,\r\n        _allowEditAction: function(actionName, options) {\r\n            var allowEditAction = this.option(\"editing.\" + actionName);\r\n            if (isFunction(allowEditAction)) {\r\n                allowEditAction = allowEditAction({\r\n                    component: this.component,\r\n                    row: options.row\r\n                })\r\n            }\r\n            return allowEditAction\r\n        },\r\n        allowUpdating: function(options, eventName) {\r\n            var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION;\r\n            var needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\r\n            return needCallback && this._allowEditAction(\"allowUpdating\", options)\r\n        },\r\n        allowDeleting: function(options) {\r\n            return this._allowEditAction(\"allowDeleting\", options)\r\n        },\r\n        isCellModified: function(parameters) {\r\n            var columnIndex = parameters.columnIndex;\r\n            var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\r\n            return !!modifiedValues && void 0 !== modifiedValues[columnIndex]\r\n        },\r\n        isNewRowInEditMode: function() {\r\n            var visibleEditRowIndex = this._getVisibleEditRowIndex();\r\n            var rows = this._dataController.items();\r\n            return visibleEditRowIndex >= 0 ? rows[visibleEditRowIndex].isNewRow : false\r\n        },\r\n        shouldHighlightCell: function(parameters) {\r\n            var cellModified = this.isCellModified(parameters);\r\n            return cellModified && parameters.column.setCellValue && (this.getEditMode() !== EDIT_MODE_ROW || !parameters.row.isEditing)\r\n        }\r\n    };\r\n    return members\r\n}());\r\nexport var editingModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            editing: {\r\n                mode: \"row\",\r\n                refreshMode: \"full\",\r\n                newRowPosition: VIEWPORT_TOP_NEW_ROW_POSITION,\r\n                allowAdding: false,\r\n                allowUpdating: false,\r\n                allowDeleting: false,\r\n                useIcons: false,\r\n                selectTextOnEditStart: false,\r\n                confirmDelete: true,\r\n                texts: {\r\n                    editRow: messageLocalization.format(\"dxDataGrid-editingEditRow\"),\r\n                    saveAllChanges: messageLocalization.format(\"dxDataGrid-editingSaveAllChanges\"),\r\n                    saveRowChanges: messageLocalization.format(\"dxDataGrid-editingSaveRowChanges\"),\r\n                    cancelAllChanges: messageLocalization.format(\"dxDataGrid-editingCancelAllChanges\"),\r\n                    cancelRowChanges: messageLocalization.format(\"dxDataGrid-editingCancelRowChanges\"),\r\n                    addRow: messageLocalization.format(\"dxDataGrid-editingAddRow\"),\r\n                    deleteRow: messageLocalization.format(\"dxDataGrid-editingDeleteRow\"),\r\n                    undeleteRow: messageLocalization.format(\"dxDataGrid-editingUndeleteRow\"),\r\n                    confirmDeleteMessage: messageLocalization.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\r\n                    confirmDeleteTitle: \"\"\r\n                },\r\n                form: {\r\n                    colCount: 2\r\n                },\r\n                popup: {},\r\n                startEditAction: \"click\",\r\n                editRowKey: null,\r\n                editColumnName: null,\r\n                changes: []\r\n            },\r\n            useLegacyColumnButtonTemplate: false\r\n        }\r\n    },\r\n    controllers: {\r\n        editing: EditingController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                init: function() {\r\n                    this._editingController = this.getController(\"editing\");\r\n                    this.callBase()\r\n                },\r\n                reload: function(full, repaintChangesOnly) {\r\n                    !repaintChangesOnly && this._editingController.refresh();\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                repaintRows: function() {\r\n                    if (this.getController(\"editing\").isSaving()) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _updateEditRow: function(items) {\r\n                    var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n                    var editRowIndex = gridCoreUtils.getIndexByKey(editRowKey, items);\r\n                    var editItem = items[editRowIndex];\r\n                    if (editItem) {\r\n                        var _this$_updateEditItem;\r\n                        editItem.isEditing = true;\r\n                        null === (_this$_updateEditItem = this._updateEditItem) || void 0 === _this$_updateEditItem ? void 0 : _this$_updateEditItem.call(this, editItem)\r\n                    }\r\n                },\r\n                _updateItemsCore: function(change) {\r\n                    this.callBase(change);\r\n                    this._updateEditRow(this.items(true))\r\n                },\r\n                _applyChangeUpdate: function(change) {\r\n                    this._updateEditRow(change.items);\r\n                    this.callBase(change)\r\n                },\r\n                _applyChangesOnly: function(change) {\r\n                    this._updateEditRow(change.items);\r\n                    this.callBase(change)\r\n                },\r\n                _processItems: function(items, change) {\r\n                    items = this._editingController.processItems(items, change);\r\n                    return this.callBase(items, change)\r\n                },\r\n                _processDataItem: function(dataItem, options) {\r\n                    this._editingController.processDataItem(dataItem, options, this.generateDataValues);\r\n                    return this.callBase(dataItem, options)\r\n                },\r\n                _processItem: function(item, options) {\r\n                    item = this.callBase(item, options);\r\n                    if (item.isNewRow) {\r\n                        options.dataIndex--;\r\n                        delete item.dataIndex\r\n                    }\r\n                    return item\r\n                },\r\n                _getChangedColumnIndices: function(oldItem, newItem, rowIndex, isLiveUpdate) {\r\n                    if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    var editingController = this.getController(\"editing\");\r\n                    var cell = oldRow.cells && oldRow.cells[columnIndex];\r\n                    var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);\r\n                    if (isLiveUpdate && isEditing) {\r\n                        return false\r\n                    }\r\n                    if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\r\n                        return true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                needToRefreshOnDataSourceChange: function(args) {\r\n                    var editingController = this.getController(\"editing\");\r\n                    var isParasiteChange = Array.isArray(args.value) && args.value === args.previousValue && editingController.isSaving();\r\n                    return !isParasiteChange\r\n                },\r\n                _handleDataSourceChange(args) {\r\n                    var result = this.callBase(args);\r\n                    var changes = this.option(\"editing.changes\");\r\n                    var dataSource = args.value;\r\n                    if (Array.isArray(dataSource) && changes.length) {\r\n                        var dataSourceKeys = dataSource.map(item => this.keyOf(item));\r\n                        var newChanges = changes.filter(change => \"insert\" === change.type || dataSourceKeys.some(key => equalByValue(change.key, key)));\r\n                        if (newChanges.length !== changes.length) {\r\n                            this.option(\"editing.changes\", newChanges)\r\n                        }\r\n                        var editRowKey = this.option(\"editing.editRowKey\");\r\n                        var isEditNewItem = newChanges.some(change => \"insert\" === change.type && equalByValue(editRowKey, change.key));\r\n                        if (!isEditNewItem && dataSourceKeys.every(key => !equalByValue(editRowKey, key))) {\r\n                            this.option(\"editing.editRowKey\", null)\r\n                        }\r\n                    }\r\n                    return result\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._editingController = this.getController(\"editing\")\r\n                },\r\n                getCellIndex: function($cell, rowIndex) {\r\n                    if (!$cell.is(\"td\") && rowIndex >= 0) {\r\n                        var $cellElements = this.getCellElements(rowIndex);\r\n                        var cellIndex = -1;\r\n                        each($cellElements, (function(index, cellElement) {\r\n                            if ($(cellElement).find($cell).length) {\r\n                                cellIndex = index\r\n                            }\r\n                        }));\r\n                        return cellIndex\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                publicMethods: function() {\r\n                    return this.callBase().concat([\"cellValue\"])\r\n                },\r\n                _getCellTemplate: function(options) {\r\n                    var template = this._editingController.getColumnTemplate(options);\r\n                    return template || this.callBase(options)\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (row) {\r\n                        var isRowRemoved = !!row.removed;\r\n                        var isRowInserted = !!row.isNewRow;\r\n                        var isRowModified = !!row.modified;\r\n                        isRowInserted && $row.addClass(ROW_INSERTED);\r\n                        isRowModified && $row.addClass(ROW_MODIFIED);\r\n                        if (isRowInserted || isRowRemoved) {\r\n                            $row.removeClass(ROW_SELECTED)\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _getColumnIndexByElement: function($element) {\r\n                    var $tableElement = $element.closest(\"table\");\r\n                    var $tableElements = this.getTableElements();\r\n                    while ($tableElement.length && !$tableElements.filter($tableElement).length) {\r\n                        $element = $tableElement.closest(\"td\");\r\n                        $tableElement = $element.closest(\"table\")\r\n                    }\r\n                    return this._getColumnIndexByElementCore($element)\r\n                },\r\n                _getColumnIndexByElementCore: function($element) {\r\n                    var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\r\n                    return this.getCellIndex($targetElement)\r\n                },\r\n                _editCellByClick: function(e, eventName) {\r\n                    var editingController = this._editingController;\r\n                    var $targetElement = $(e.event.target);\r\n                    var columnIndex = this._getColumnIndexByElement($targetElement);\r\n                    var row = this._dataController.items()[e.rowIndex];\r\n                    var allowUpdating = editingController.allowUpdating({\r\n                        row: row\r\n                    }, eventName) || row && row.isNewRow;\r\n                    var column = this._columnsController.getVisibleColumns()[columnIndex];\r\n                    var isEditedCell = editingController.isEditCell(e.rowIndex, columnIndex);\r\n                    var allowEditing = allowUpdating && column && (column.allowEditing || isEditedCell);\r\n                    var startEditAction = this.option(\"editing.startEditAction\") || \"click\";\r\n                    var isShowEditorAlways = column && column.showEditorAlways;\r\n                    if (isEditedCell) {\r\n                        return true\r\n                    }\r\n                    if (\"down\" === eventName) {\r\n                        if (devices.real().ios || devices.real().android) {\r\n                            resetActiveElement()\r\n                        }\r\n                        return isShowEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex)\r\n                    }\r\n                    if (\"click\" === eventName && \"dblClick\" === startEditAction) {\r\n                        var withoutSaveEditData = null === row || void 0 === row ? void 0 : row.isNewRow;\r\n                        editingController.closeEditCell(false, withoutSaveEditData)\r\n                    }\r\n                    if (allowEditing && eventName === startEditAction) {\r\n                        return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex)\r\n                    }\r\n                },\r\n                _rowPointerDown: function(e) {\r\n                    this._pointerDownTimeout = setTimeout(() => {\r\n                        this._editCellByClick(e, \"down\")\r\n                    })\r\n                },\r\n                _rowClick: function(e) {\r\n                    var isEditForm = $(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\r\n                    e.event[TARGET_COMPONENT_NAME] = this.component;\r\n                    if (!this._editCellByClick(e, \"click\") && !isEditForm) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _rowDblClick: function(e) {\r\n                    if (!this._editCellByClick(e, \"dblClick\")) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _cellPrepared: function($cell, parameters) {\r\n                    var _parameters$column;\r\n                    var editingController = this._editingController;\r\n                    var isCommandCell = !!parameters.column.command;\r\n                    var isEditableCell = parameters.setValue;\r\n                    var isEditRow = editingController.isEditRow(parameters.rowIndex);\r\n                    var isEditing = isEditingCell(isEditRow, parameters);\r\n                    if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {\r\n                        var alignment = parameters.column.alignment;\r\n                        $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\r\n                        if (alignment) {\r\n                            $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment)\r\n                        }\r\n                    }\r\n                    if (isEditing) {\r\n                        this._editCellPrepared($cell)\r\n                    }\r\n                    var hasTemplate = !!(null !== (_parameters$column = parameters.column) && void 0 !== _parameters$column && _parameters$column.cellTemplate);\r\n                    if (parameters.column && !isCommandCell && (!hasTemplate || editingController.shouldHighlightCell(parameters))) {\r\n                        editingController.highlightDataCell($cell, parameters)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _editCellPrepared: noop,\r\n                _formItemPrepared: noop,\r\n                _getCellOptions: function(options) {\r\n                    var cellOptions = this.callBase(options);\r\n                    cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\r\n                    return cellOptions\r\n                },\r\n                _createCell: function(options) {\r\n                    var $cell = this.callBase(options);\r\n                    var isEditRow = this._editingController.isEditRow(options.rowIndex);\r\n                    isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(EDITOR_CELL_CLASS);\r\n                    return $cell\r\n                },\r\n                cellValue: function(rowIndex, columnIdentifier, value, text) {\r\n                    var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\r\n                    if (cellOptions) {\r\n                        if (void 0 === value) {\r\n                            return cellOptions.value\r\n                        } else {\r\n                            this._editingController.updateFieldValue(cellOptions, value, text, true)\r\n                        }\r\n                    }\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._pointerDownTimeout)\r\n                },\r\n                _renderCore: function(change) {\r\n                    this.callBase.apply(this, arguments);\r\n                    return this._waitAsyncTemplates(change, true).done(() => {\r\n                        this._editingController._focusEditorIfNeed()\r\n                    })\r\n                }\r\n            },\r\n            headerPanel: {\r\n                _getToolbarItems: function() {\r\n                    var items = this.callBase();\r\n                    var editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\r\n                    return editButtonItems.concat(items)\r\n                },\r\n                optionChanged: function(args) {\r\n                    var fullName = args.fullName;\r\n                    switch (args.name) {\r\n                        case \"editing\":\r\n                            var excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];\r\n                            var shouldInvalidate = fullName && !excludedOptions.some(optionName => optionName === fullName);\r\n                            shouldInvalidate && this._invalidate();\r\n                            this.callBase(args);\r\n                            break;\r\n                        case \"useLegacyColumnButtonTemplate\":\r\n                            args.handled = true;\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                isVisible: function() {\r\n                    var editingOptions = this.getController(\"editing\").option(\"editing\");\r\n                    return this.callBase() || (null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.allowAdding)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}