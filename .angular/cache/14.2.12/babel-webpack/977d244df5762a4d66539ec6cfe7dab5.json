{"ast":null,"code":"/**\r\n * Functionality for any series-based elements, like Line Series (graphs),\r\n * Pie slice lists, etc.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Component } from \"../../core/Component\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { List, ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\nimport { DataItem } from \"../../core/DataItem\";\nimport { Container } from \"../../core/Container\";\nimport { Tooltip } from \"../../core/elements/Tooltip\";\nimport { Bullet } from \"../elements/Bullet\";\nimport { LegendSettings } from \"../Legend\";\nimport { options } from \"../../core/Options\";\nimport { Color } from \"../../core/utils/Color\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $ease from \"../../core/utils/Ease\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $colors from \"../../core/utils/Colors\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[Series]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar SeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(SeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"SeriesDataItem\"; //@todo Should we make `bullets` list disposable?\n    //this._disposers.push(new DictionaryDisposer(this.bullets));\n\n    _this.values.value = {};\n    _this.values.value = {};\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(SeriesDataItem.prototype, \"bullets\", {\n    /**\r\n     * A dictionary of data items bullets, where key is uid of a bullet template.\r\n     */\n    get: function () {\n      if (!this._bullets) {\n        this._bullets = new Dictionary();\n\n        this._disposers.push(new DictionaryDisposer(this._bullets));\n      }\n\n      return this._bullets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n  SeriesDataItem.prototype.dispose = function () {\n    this.bullets.clear();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  Object.defineProperty(SeriesDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values.value.value;\n    },\n\n    /**\r\n     * data items's numeric value.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return SeriesDataItem;\n}(DataItem);\n\nexport { SeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines base class for any kind of serial data.\r\n *\r\n * @see {@link ISeriesEvents} for a list of available Events\r\n * @see {@link ISeriesAdapters} for a list of available Adapters\r\n * @todo Separate axis-related stuff to some other class so that MapSeries would not have unrelated stuff\r\n */\n\nvar Series =\n/** @class */\nfunction (_super) {\n  __extends(Series, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Series() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Should this series excluded from the axis scale calculations?\r\n     *\r\n     * @default false\r\n     */\n\n\n    _this._ignoreMinMax = false;\n    /**\r\n     * Should series' bullets?\r\n     *\r\n     * @default true\r\n     */\n\n    _this._showBullets = true;\n    /**\r\n     * Settings for the appearance of the related legend items.\r\n     */\n\n    _this.legendSettings = new LegendSettings();\n    /**\r\n     * Lowest overal values by type.\r\n     */\n\n    _this._tmin = new Dictionary();\n    /**\r\n     * Highest overal values by type.\r\n     */\n\n    _this._tmax = new Dictionary();\n    /**\r\n     * Lowest values in current selection by type.\r\n     */\n\n    _this._smin = new Dictionary();\n    /**\r\n     * Highest values in current selection by type.\r\n     */\n\n    _this._smax = new Dictionary();\n    /**\r\n     * [dataItemsByAxis description]\r\n     *\r\n     * Both by category and date.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this.dataItemsByAxis = new Dictionary();\n    /**\r\n     * Normally series items are focusable using keyboard, so that people can\r\n     * select them with a TAB key. However, if there are a lot of data points on\r\n     * screen it might be long and useless to tab through all o fthem.\r\n     *\r\n     * This is where `skipFocusThreshold` comes in. If there are more items than\r\n     * the value set here, we will not make those focusable and rather let screen\r\n     * reader software rely on the series summary, or authors provide alternative\r\n     * detailed information display, such as HTML table.\r\n     *\r\n     * Different series might have different threshold defaults.\r\n     */\n\n    _this.skipFocusThreshold = 20;\n    /**\r\n     * Used to indicate if `itemReaderText` was changed \"from the outside\".\r\n     */\n\n    _this._itemReaderTextChanged = false;\n    /**\r\n     * Most of the series use absolute values. However sometimes various\r\n     * calculated percent values are need, e.g. item's percent representation\r\n     * across all values in series, etc.\r\n     *\r\n     * It's a resource-intensive operation, so it is disabled by default.\r\n     *\r\n     * If you need percents to be calculated, e.g. for showing them in tooltips,\r\n     * or creating 100% stacks, this setting needs to be set to `true`.\r\n     *\r\n     * NOTE: `PieChart`, which relies on slice percentages, has this\r\n     * automatically set to `true`.\r\n     *\r\n     * @default false\r\n     */\n\n    _this.calculatePercent = false;\n    /**\r\n     * When `calculatePercent` is enabled and data item's percent value is\r\n     * calculated, last item's real value is used instead of its working value.\r\n     *\r\n     * This is done for the animations when last item in series (e.g. slice in\r\n     * a `PieSeries`) is hidden or shown. (if we would use real value, the\r\n     * calculated percent would always be 100%).\r\n     *\r\n     * Sometimes there is a need (e.g. for drill-down Sunburst) to disable this\r\n     * hack by setting `usePercentHack` to `false`.\r\n     *\r\n     * @since 4.9.13\r\n     * @default true\r\n     */\n\n    _this.usePercentHack = true;\n    /**\r\n     * Specifies if series should be automatically disposed when removing from\r\n     * chart's `series` list.\r\n     *\r\n     * @default true\r\n     */\n\n    _this.autoDispose = true;\n    /**\r\n     * When chart/series' data is processed, all kinds of derivative values are\r\n     * calculated. E.g. sum, min, max, change, etc. This is a potentially\r\n     * time-consuming operation, especially prominent in data-heavy charts.\r\n     *\r\n     * If your chart does not need those values, and you have a lot of data,\r\n     * setting this to `true` might give a dramatic increase in initial chart\r\n     * load speed.\r\n     *\r\n     * Please note, regular column and line series usage scenarios do not\r\n     * require derivative values. Those come into play only when you do advanced\r\n     * functionality like coloring segments of charts in different colors\r\n     * depending on change between open and close values, have stacked series, or\r\n     * display any of the derived values, like percent, in tooltips or bullets.\r\n     *\r\n     * @default false\r\n     */\n\n    _this.simplifiedProcessing = false;\n\n    if (_this.constructor === Series) {\n      throw new Error(\"'Series' cannot be instantiated directly. Please use a specific series type.\");\n    }\n\n    _this.className = \"Series\";\n    _this.isMeasured = false;\n    _this.layout = \"none\";\n    _this.shouldClone = false;\n\n    _this.setPropertyValue(\"hidden\", false);\n\n    _this.axisRanges = new List();\n\n    _this.axisRanges.events.on(\"inserted\", _this.processAxisRange, _this, false);\n\n    _this.minBulletDistance = 0; // otherwise we'll have a lot of cases when people won't see bullets and think it's a bug\n\n    _this.mainContainer = _this.createChild(Container);\n    _this.mainContainer.shouldClone = false;\n    _this.mainContainer.mask = _this.createChild(Sprite);\n\n    _this._disposers.push(_this.mainContainer); // all bullets should go on top of lines/fills. So we add a separate container for bullets and later set it's parent to chart.bulletsContainer\n\n\n    var bulletsContainer = _this.mainContainer.createChild(Container);\n\n    _this._shouldBeReady.push(bulletsContainer);\n\n    bulletsContainer.shouldClone = false;\n    bulletsContainer.layout = \"none\";\n    bulletsContainer.virtualParent = _this;\n\n    _this._disposers.push(bulletsContainer);\n\n    _this.bulletsContainer = bulletsContainer;\n    _this.tooltip = new Tooltip();\n    _this.tooltip.virtualParent = _this;\n\n    _this._disposers.push(_this.tooltip);\n\n    _this.hiddenState.transitionEasing = $ease.cubicIn; // this data item holds sums, averages, etc\n\n    _this.dataItem = _this.createDataItem();\n\n    _this._disposers.push(_this.dataItem);\n\n    _this.dataItem.component = _this; // Apply accessibility\n\n    _this.role = \"group\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * We need this here so that class names can be applied to bullets container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Series.prototype.applyTheme = function () {\n    _super.prototype.applyTheme.call(this);\n\n    if (options.autoSetClassName && this.bulletsContainer) {\n      this.bulletsContainer.className = this.className + \"-bullets\";\n      this.bulletsContainer.setClassName();\n    }\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  Series.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  Series.prototype.createDataItem = function () {\n    return new SeriesDataItem();\n  };\n\n  Object.defineProperty(Series.prototype, \"chart\", {\n    /**\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart;\n    },\n\n    /**\r\n     * Chart series is used on.\r\n     *\r\n     * @param value  Chart\r\n     */\n    set: function (value) {\n      this._chart = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Positions bullet.\r\n   *\r\n   * @param bullet  Sprite\r\n   */\n\n  Series.prototype.positionBullet = function (bullet) {// Placeholder method for extending classes to override.\n  };\n  /**\r\n   * Decorates newly created bullet after it has been instert into the list.\r\n   *\r\n   * @param event  List event\r\n   * @todo investigate why itemReaderText is undefined\r\n   */\n\n\n  Series.prototype.processBullet = function (event) {\n    var _this = this;\n\n    var bullet = event.newValue;\n    bullet.isTemplate = true; // Add accessibility options to bullet\n    // If there are relatively few bullets, make them focusable\n\n    this.events.once(\"datavalidated\", function (ev) {\n      if (_this.itemsFocusable()) {\n        bullet.focusable = true;\n      }\n    });\n    this.invalidate();\n  };\n  /**\r\n   * removes bullets\r\n   *\r\n   * @param event  List event\r\n   */\n\n\n  Series.prototype.removeBullet = function (event) {\n    var bullet = event.oldValue;\n    this.dataItems.each(function (dataItem) {\n      var eachBullet = dataItem.bullets.getKey(bullet.uid);\n\n      if (eachBullet) {\n        eachBullet.dispose();\n      }\n    });\n    this.invalidate();\n  };\n  /**\r\n   * Validates data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Series.prototype.validateDataItems = function () {\n    _super.prototype.validateDataItems.call(this);\n\n    this.processValues(false);\n  };\n  /**\r\n   * Returns first value for the specific key in the series.\r\n   *\r\n   * @param key  Key\r\n   * @return Value\r\n   * @todo Description\r\n   * @todo Convert to propert object property iterator\r\n   */\n\n\n  Series.prototype.getFirstValue = function (key, startIndex) {\n    // find first\n\n    /*\r\n    return $iter.findMap(this.dataItems.iterator(), (dataItem) => {\r\n        for (let key in dataItem.values) {\r\n            if ($object.hasKey(dataItem.values, key)) {\r\n                let value: number = dataItem.values[key].workingValue;\r\n                if ($type.isNumber(value)) {\r\n                    return value;\r\n                }\r\n            }\r\n        }\r\n          return null;\r\n    });*/\n    //if (startIndex > 0 && startIndex < this.dataItems.length - 1) {\n    //startIndex++;\n    //}\n    for (var i = startIndex; i >= 0; i--) {\n      var dataItem = this.dataItems.getIndex(i);\n      var value = dataItem.getActualWorkingValue(key);\n\n      if ($type.isNumber(value)) {\n        return value;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Returns first value for the specific key in the series.\r\n   *\r\n   * @param key  Key\r\n   * @return Value\r\n   * @todo Description\r\n   * @todo Convert to propert object property iterator\r\n   */\n\n\n  Series.prototype.getAbsoluteFirstValue = function (key) {\n    for (var i = 0; i < this.dataItems.length; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      var value = dataItem.values[key].value;\n\n      if ($type.isNumber(value)) {\n        return value;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * [rangeChangeUpdate description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  Series.prototype.rangeChangeUpdate = function () {\n    _super.prototype.rangeChangeUpdate.call(this);\n\n    this.processValues(true);\n  };\n  /**\r\n   * [processValues description]\r\n   *\r\n   * @todo Description\r\n   * @todo Convert to propert object property iterator\r\n   * @param dataItems [description]\r\n   */\n\n\n  Series.prototype.processValues = function (working) {\n    var _this = this;\n\n    if (!this.simplifiedProcessing) {\n      var dataItems = this.dataItems;\n      var count_1 = {};\n      var sum_1 = {};\n      var absoluteSum_1 = {};\n      var low_1 = {};\n      var high_1 = {};\n      var open_1 = {};\n      var close_1 = {};\n      var previous_1 = {};\n      var first_1 = {};\n      var absoluteFirst_1 = {}; //let duration: number = 0; // todo: check if series uses selection.change or selection.change.percent and set duration to interpolationduration\n\n      var startIndex_1 = $math.max(0, this.startIndex);\n      startIndex_1 = $math.min(startIndex_1, this.dataItems.length);\n      var endIndex = $math.min(this.endIndex, this.dataItems.length);\n\n      if (!$type.isNumber(startIndex_1)) {\n        startIndex_1 = 0;\n      }\n\n      if (!$type.isNumber(endIndex)) {\n        endIndex = this.dataItems.length;\n      }\n\n      if (startIndex_1 > 0) {\n        var dataItem_1 = dataItems.getIndex(startIndex_1 - 1);\n        $object.each(dataItem_1.values, function (key, values) {\n          var value = dataItem_1.getActualWorkingValue(key);\n\n          if ($type.isNumber(value)) {\n            // save previous\n            previous_1[key] = value;\n          }\n        });\n      }\n\n      var _loop_1 = function (i) {\n        var dataItem_2 = dataItems.getIndex(i);\n        $object.each(dataItem_2.values, function (key, values) {\n          var value = dataItem_2.getActualWorkingValue(key); //if (i >= startIndex && i <= endIndex) { // do not add to count, sum etc if it is not within start/end index\n\n          if ($type.isNumber(value)) {\n            // count values\n            if (!$type.isNumber(count_1[key])) {\n              count_1[key] = 0;\n            }\n\n            count_1[key]++; // sum values\n\n            if (!$type.isNumber(sum_1[key])) {\n              sum_1[key] = 0;\n            }\n\n            sum_1[key] += value; // absolute sum values\n\n            if (!$type.isNumber(absoluteSum_1[key])) {\n              absoluteSum_1[key] = 0;\n            }\n\n            absoluteSum_1[key] += Math.abs(value); // open\n\n            if (!$type.isNumber(open_1[key])) {\n              open_1[key] = value;\n            } // close\n\n\n            close_1[key] = value; // low\n\n            if (!$type.isNumber(low_1[key])) {\n              low_1[key] = value;\n            } else {\n              if (low_1[key] > value) {\n                low_1[key] = value;\n              }\n            } // high\n\n\n            if (!$type.isNumber(high_1[key])) {\n              high_1[key] = value;\n            } else {\n              if (high_1[key] < value) {\n                high_1[key] = value;\n              }\n            }\n\n            if (!$type.isNumber(first_1[key])) {\n              first_1[key] = _this.getFirstValue(key, startIndex_1);\n            }\n\n            if (!$type.isNumber(absoluteFirst_1[key])) {\n              absoluteFirst_1[key] = _this.getAbsoluteFirstValue(key);\n            } // change\n\n\n            dataItem_2.setCalculatedValue(key, value - first_1[key], \"change\"); // change from start percent\n            // will fail if first value is 0\n\n            dataItem_2.setCalculatedValue(key, (value - first_1[key]) / first_1[key] * 100, \"changePercent\");\n            dataItem_2.setCalculatedValue(key, value - absoluteFirst_1[key], \"startChange\");\n            dataItem_2.setCalculatedValue(key, (value - absoluteFirst_1[key]) / absoluteFirst_1[key] * 100, \"startChangePercent\"); // previous change\n\n            var prevValue = previous_1[key];\n\n            if (!$type.isNumber(prevValue)) {\n              prevValue = value;\n            }\n\n            dataItem_2.setCalculatedValue(key, value - prevValue, \"previousChange\"); // previous change percent\n\n            dataItem_2.setCalculatedValue(key, (value - prevValue) / prevValue * 100, \"previousChangePercent\"); // save previous\n\n            previous_1[key] = value;\n          }\n        });\n      };\n\n      for (var i = startIndex_1; i < endIndex; i++) {\n        _loop_1(i);\n      }\n\n      if (this.calculatePercent) {\n        var _loop_2 = function (i) {\n          var dataItem_3 = dataItems.getIndex(i);\n          $object.each(dataItem_3.values, function (key) {\n            var ksum = absoluteSum_1[key];\n            var value = dataItem_3.getActualWorkingValue(key);\n\n            if ($type.isNumber(value)) {\n              if (ksum > 0) {\n                if (_this.usePercentHack) {\n                  // this hack is made in order to make it possible to animate single slice to 0\n                  // if there is only one slice left, percent value is always 100%, so it won't animate\n                  // so we use real value of a slice instead of current value\n                  if (value == ksum) {\n                    ksum = dataItem_3.values[key].value;\n                  }\n                }\n\n                var percent = value / ksum * 100;\n                dataItem_3.setCalculatedValue(key, percent, \"percent\");\n              } else {\n                dataItem_3.setCalculatedValue(key, 0, \"percent\");\n              }\n            }\n          });\n        };\n\n        for (var i = startIndex_1; i < endIndex; i++) {\n          _loop_2(i);\n        }\n      } // calculate one before first (cant do that in cycle, as we don't know open yet\n      // when drawing line chart we should draw line to the invisible data point to the left, otherwise the line will always look like it starts from the selected point\n      // so we do startIndex - 1\n\n\n      if (startIndex_1 > 0) {\n        var zeroItem_1 = dataItems.getIndex(startIndex_1 - 1);\n        $object.each(zeroItem_1.values, function (key) {\n          var value = zeroItem_1.values[key].value; // change\n\n          zeroItem_1.setCalculatedValue(key, value - open_1[key], \"change\"); // change percent\n\n          zeroItem_1.setCalculatedValue(key, (value - open_1[key]) / open_1[key] * 100, \"changePercent\");\n        });\n      } // we save various data like sum, average to dataPoint of the series\n\n\n      var dataItem_4 = this.dataItem;\n      $object.each(dataItem_4.values, function (key) {\n        dataItem_4.setCalculatedValue(key, sum_1[key], \"sum\");\n        dataItem_4.setCalculatedValue(key, absoluteSum_1[key], \"absoluteSum\");\n        dataItem_4.setCalculatedValue(key, sum_1[key] / count_1[key], \"average\");\n        dataItem_4.setCalculatedValue(key, open_1[key], \"open\");\n        dataItem_4.setCalculatedValue(key, close_1[key], \"close\");\n        dataItem_4.setCalculatedValue(key, low_1[key], \"low\");\n        dataItem_4.setCalculatedValue(key, high_1[key], \"high\");\n        dataItem_4.setCalculatedValue(key, count_1[key], \"count\");\n      });\n    }\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Series.prototype.validate = function () {\n    if ($utils.isIE()) {\n      this.filters.clear();\n    }\n\n    $iter.each(this.axisRanges.iterator(), function (axisRange) {\n      //axisRange.contents.disposeChildren(); // not good for columns, as they are reused\n      //\t\t\taxisRange.appendChildren();\n      axisRange.validate();\n    });\n\n    _super.prototype.validate.call(this);\n\n    var bulletsContainer = this.bulletsContainer;\n    bulletsContainer.fill = this.fill;\n    bulletsContainer.stroke = this.stroke;\n    bulletsContainer.x = this.pixelX;\n    bulletsContainer.y = this.pixelY;\n\n    if (this.bulletsContainer.children.length > 0) {\n      if (this._showBullets) {\n        for (var i = 0; i < this.startIndex; i++) {\n          var dataItem = this.dataItems.getIndex(i);\n\n          if (dataItem) {\n            dataItem.bullets.each(function (key, bullet) {\n              bullet.__disabled = true;\n            });\n          }\n        }\n\n        for (var i = this.dataItems.length - 1; i > this.endIndex; i--) {\n          var dataItem = this.dataItems.getIndex(i);\n\n          if (dataItem) {\n            dataItem.bullets.each(function (key, bullet) {\n              bullet.__disabled = true;\n            });\n          }\n        }\n      } else {\n        this.bulletsContainer.children.each(function (bullet) {\n          bullet.__disabled = true;\n        });\n      }\n    }\n\n    this.updateTooltipBounds();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Series.prototype.updateTooltipBounds = function () {\n    if (this.topParent) {\n      var x = 0;\n      var y = 0;\n      var w = this.topParent.maxWidth;\n      var h = this.topParent.maxHeight;\n      var rect = {\n        x: x,\n        y: y,\n        width: w,\n        height: h\n      };\n      this.tooltip.setBounds(rect);\n    }\n  };\n\n  Series.prototype.shouldCreateBullet = function (dataItem, bulletTemplate) {\n    return true;\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  Series.prototype.validateDataElement = function (dataItem) {\n    var _this = this;\n\n    _super.prototype.validateDataElement.call(this, dataItem);\n\n    if (this._showBullets) {\n      if (!this.isHidden) {\n        this.bulletsContainer.visible = true;\n      }\n\n      this.bullets.each(function (bulletTemplate) {\n        // always better to use the same, this helps to avoid redrawing\n        var bullet = dataItem.bullets.getKey(bulletTemplate.uid);\n\n        if (_this.shouldCreateBullet(dataItem, bulletTemplate)) {\n          if (!bullet) {\n            var disabledField = bulletTemplate.propertyFields.disabled;\n            var dataContext = dataItem.dataContext;\n\n            if (disabledField && dataContext && dataContext[disabledField] === false) {\n              bulletTemplate.applyOnClones = false;\n              bulletTemplate.disabled = false;\n              bullet = bulletTemplate.clone();\n              bulletTemplate.disabled = true;\n              bulletTemplate.applyOnClones = true;\n            } else {\n              bullet = bulletTemplate.clone();\n            }\n\n            bullet.shouldClone = false;\n            dataItem.addSprite(bullet);\n\n            if (!_this.visible || _this.isHiding) {\n              bullet.hide(0);\n            }\n          }\n\n          var currentDataItem = bullet.dataItem;\n\n          if (currentDataItem != dataItem) {\n            // set to undefined in order not to reuse\n            if (currentDataItem) {\n              currentDataItem.bullets.setKey(bulletTemplate.uid, undefined);\n            }\n\n            var readerText_1 = _this.itemReaderText;\n\n            if (bullet instanceof Bullet) {\n              if (!readerText_1) {\n                readerText_1 = \"{\" + bullet.xField + \"}: {\" + bullet.yField + \"}\";\n              }\n\n              if (bullet.isDynamic) {\n                dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false); //dataItem.events.on(\"calculatedvaluechanged\", bullet.deepInvalidate, bullet, false);\n\n                _this.dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\n              }\n\n              bullet.deepInvalidate();\n            } // Add accessibility to bullet\n\n\n            if (bullet.focusable) {\n              bullet.events.on(\"focus\", function (ev) {\n                bullet.readerTitle = _this.populateString(readerText_1, bullet.dataItem);\n              }, undefined, false);\n              bullet.events.on(\"blur\", function (ev) {\n                bullet.readerTitle = \"\";\n              }, undefined, false);\n            }\n\n            if (bullet.hoverable) {\n              bullet.events.on(\"over\", function (ev) {\n                bullet.readerTitle = _this.populateString(readerText_1, bullet.dataItem);\n              }, undefined, false);\n              bullet.events.on(\"out\", function (ev) {\n                bullet.readerTitle = \"\";\n              }, undefined, false);\n            }\n          }\n\n          bullet.parent = _this.bulletsContainer;\n          dataItem.bullets.setKey(bulletTemplate.uid, bullet); // pass max w/h so we'd know if we should show/hide somethings\n\n          bullet.maxWidth = dataItem.itemWidth;\n          bullet.maxHeight = dataItem.itemHeight;\n          bullet.__disabled = false;\n\n          _this.positionBullet(bullet);\n        } else {\n          if (bullet) {\n            bullet.__disabled = true;\n          }\n        }\n      });\n    } else {\n      this.bulletsContainer.visible = false;\n    }\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Series.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\n    if (!this.dataRangeInvalid) {\n      this.invalidateProcessedData();\n    }\n  };\n\n  Object.defineProperty(Series.prototype, \"ignoreMinMax\", {\n    /**\r\n     * @return Exclude from calculations?\r\n     */\n    get: function () {\n      return this._ignoreMinMax;\n    },\n\n    /**\r\n     * Should this series excluded from the axis scale calculations?\r\n     *\r\n     * @default false\r\n     * @param value  Exclude from calculations?\r\n     */\n    set: function (value) {\n      this._ignoreMinMax = value;\n      this.invalidateDataItems();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Create a mask for the series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Series.prototype.createMask = function () {// A placeholder method for extending classes to override.\n  };\n  /**\r\n   * Process axis range after it has been added to the list.\r\n   *\r\n   * @param event  Event\r\n   */\n\n\n  Series.prototype.processAxisRange = function (event) {\n    // create container if not existing\n    if (!this.rangesContainer) {\n      this.rangesContainer = this.createChild(Container);\n      this.rangesContainer.shouldClone = false;\n      this.rangesContainer.isMeasured = false;\n    }\n\n    var axisRange = event.newValue;\n\n    if (axisRange) {\n      axisRange.contents.parent = this.rangesContainer;\n      axisRange.isRange = true;\n      axisRange.events.on(\"valuechanged\", this.invalidateDataItems, this, false);\n    }\n  };\n  /**\r\n   * [getAxisField description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param axis  [description]\r\n   * @return [description]\r\n   */\n\n\n  Series.prototype.getAxisField = function (axis) {\n    return;\n  };\n  /**\r\n   * Shows the tooltip at specific position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param xPosition  X\r\n   * @param yPosition  Y\r\n   */\n\n\n  Series.prototype.showTooltipAtPosition = function (xPosition, yPosition) {// Placeholder method for extending classes to override.\n  };\n\n  Object.defineProperty(Series.prototype, \"minBulletDistance\", {\n    /**\r\n     * @return Distance (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minBulletDistance\");\n    },\n\n    /**\r\n     * Minimal distance between data points in pixels.\r\n     *\r\n     * If distance gets smaller than this, bullets are turned off to avoid\r\n     * overlapping.\r\n     *\r\n     * `0` (zero) disables this behavior.\r\n     *\r\n     * IMPORTANT: This setting will work only when Series' base axis\r\n     * is [[CategoryAxis]] or [[DateAxis]]. If base axis is [[ValueAxis]] the\r\n     * setting will be ignored, because it would be a huge overhead to measure\r\n     * distance between each and every bullet.\r\n     *\r\n     * @default 0\r\n     * @param value  Distance (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minBulletDistance\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Series.prototype, \"bullets\", {\n    /**\r\n     * A list of bullets that will be added to each and every items in the\r\n     * series.\r\n     *\r\n     * You can push any object that is a descendant of a [[Sprite]] here. All\r\n     * items added to this list will be copied and used as a bullet on all data\r\n     * items, including their properties, events, etc.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/bullets/} for more info about the concept of Bullets\r\n     * @return List of bullets.\r\n     */\n    get: function () {\n      if (!this._bullets) {\n        this._bullets = new ListTemplate(new Bullet());\n        this._bullets.template.virtualParent = this;\n\n        this._bullets.events.on(\"inserted\", this.processBullet, this, false);\n\n        this._bullets.events.on(\"removed\", this.removeBullet, this, false);\n\n        this._disposers.push(new ListDisposer(this._bullets));\n\n        this._disposers.push(this._bullets.template);\n      }\n\n      return this._bullets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Binds related legend data item's visual settings to this series' visual\r\n   * settings.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Legend item container\r\n   */\n\n  Series.prototype.createLegendMarker = function (marker) {// This is a placeholder method for extending classes to override.\n  };\n\n  Object.defineProperty(Series.prototype, \"hiddenInLegend\", {\n    /**\r\n     * @return Hidden in legend?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hiddenInLegend\");\n    },\n\n    /**\r\n     * Should the series be hidden in legend?\r\n     *\r\n     * @param value Hidden in legend?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"hiddenInLegend\", value)) {\n        if (this.chart) {\n          this.chart.feedLegend();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Series.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"name\");\n    },\n\n    /**\r\n     * Series' name.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"name\", value);\n      var legendDataItem = this.legendDataItem;\n\n      if (legendDataItem) {\n        legendDataItem.component.invalidate();\n        legendDataItem.component.invalidateRawData();\n      }\n\n      this.readerTitle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Series.prototype, \"itemReaderText\", {\n    /**\r\n     * @return Screen reader text template\r\n     */\n    get: function () {\n      // Get explicitly set reader text\n      var readerText = this._itemReaderText; // Not set? Let's try something else\n\n      if (!readerText) {\n        // Tooltip text?\n        if (this.tooltipText) {\n          readerText = $utils.plainText(this.tooltipText);\n        } else if (this.tooltipHTML) {\n          readerText = $utils.plainText(this.tooltipHTML);\n        }\n      }\n\n      if (!this._adapterO) {\n        return readerText;\n      } else {\n        return this._adapterO.apply(\"itemReaderText\", readerText);\n      }\n    },\n\n    /**\r\n     * Screen reader text to be applied to each individual data item, such\r\n     * as bullets, columns or slices.\r\n     *\r\n     * The template can contain field reference meta codes, i.e. `{dateX}`,\r\n     * `{valueY}`, etc.\r\n     *\r\n     * Any text formatting options, e.g. `[bold]` will be ignored.\r\n     *\r\n     * @param value Screen reader text template\r\n     */\n    set: function (value) {\n      this._itemReaderText = value;\n      this._itemReaderTextChanged = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns if number of data items in the series are beyond non-focusable\r\n   * count and should not be available for TAB-through.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Items focusable?\r\n   */\n\n  Series.prototype.itemsFocusable = function () {\n    return this.dataItems.length >= this.skipFocusThreshold ? false : true;\n  };\n\n  Object.defineProperty(Series.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Data item\r\n     */\n    get: function () {\n      return this._legendDataItem;\n    },\n\n    /**\r\n     * Legend data item that corresponds to this series.\r\n     *\r\n     * @param value  Data item\r\n     */\n    set: function (value) {\n      this._legendDataItem = value;\n\n      this._legendDataItem.itemContainer.deepInvalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates corresponding legend data item with current values.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n  Series.prototype.updateLegendValue = function (dataItem, notRange) {\n    // if this series has legend item\n    if (this.legendDataItem) {\n      var legendSettings = this.legendSettings;\n      var legendDataItem = this.legendDataItem;\n      var label = legendDataItem.label;\n      var valueLabel = legendDataItem.valueLabel; // update legend\n\n      if (dataItem && !dataItem.isDisposed() || notRange) {\n        if (valueLabel) {\n          if (legendSettings.itemValueText) {\n            valueLabel.text = legendSettings.itemValueText;\n          }\n\n          valueLabel.dataItem = dataItem;\n        }\n\n        if (label) {\n          if (legendSettings.itemLabelText) {\n            label.text = legendSettings.itemLabelText;\n          }\n\n          label.dataItem = dataItem;\n        }\n      } else {\n        if (label) {\n          // if itemLabelText is set, means we have to reset label even if labelText is not set\n          if (legendSettings.labelText || legendSettings.itemLabelText != undefined) {\n            label.text = legendSettings.labelText;\n          }\n\n          label.dataItem = this.dataItem;\n        }\n\n        if (valueLabel) {\n          if (legendSettings.valueText || legendSettings.itemValueText != undefined) {\n            valueLabel.text = legendSettings.valueText;\n          }\n\n          valueLabel.dataItem = this.dataItem;\n        }\n      }\n    }\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  Series.prototype.copyFrom = function (source) {\n    this.bullets.copyFrom(source.bullets);\n    this.bulletsContainer.copyFrom(source.bulletsContainer);\n    this.calculatePercent = source.calculatePercent;\n    this.usePercentHack = source.usePercentHack;\n    this.simplifiedProcessing = source.simplifiedProcessing;\n\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * Displays a modal or console message with error, and halts any further\r\n   * processing of this element.\r\n   *\r\n   * @param e Error\r\n   */\n\n\n  Series.prototype.raiseCriticalError = function (e) {\n    if (this._chart && this._chart.modal) {\n      this._chart.modal.content = this._chart.adapter.apply(\"criticalError\", e).message;\n      this._chart.modal.closable = false;\n\n      if (!options.suppressErrors) {\n        this._chart.modal.open();\n      }\n\n      this._chart.disabled = true;\n    }\n\n    if (options.verbose) {\n      console.log(e);\n    }\n  };\n  /**\r\n   * Applies filters to the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Series.prototype.applyFilters = function () {\n    var _this = this;\n\n    _super.prototype.applyFilters.call(this);\n\n    this.bulletsContainer.filters.clear(); // copyFrom of a list copies, does not clone\n\n    $iter.each(this.filters.iterator(), function (filter) {\n      _this.bulletsContainer.filters.push(filter.clone());\n    });\n  };\n\n  Object.defineProperty(Series.prototype, \"heatRules\", {\n    /**\r\n     * A list of heat rules to apply to series' elements based on the value\r\n     * of the data item.\r\n     *\r\n     * Heat rules can be any \"numeric\" (including `Color`) property, and can also\r\n     * be applied to child objects of series, like columns, bullets, etc.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.heatRules.push({\r\n     *  \"target\": series.columns.template,\r\n     *  \"property\": \"fill\",\r\n     *  \"min\": am4core.color(\"#F5DBCB\"),\r\n     *  \"max\": am4core.color(\"#ED7B84\"),\r\n     *  \"dataField\": \"valueY\"\r\n     *});\r\n     *```\r\n     * ```Javacript\r\n     * series.heatRules.push({\r\n     *  \"target\": series.columns.template,\r\n     *  \"property\": \"fill\",\r\n     *  \"min\": am4core.color(\"#F5DBCB\"),\r\n     *  \"max\": am4core.color(\"#ED7B84\"),\r\n     *  \"dataField\": \"valueY\"\r\n     *});\r\n     *```\r\n     *```JSON\r\n     *{\r\n     *  // ...\r\n     *  \"series\": [{\r\n     *    \"type\": \"ColumnSeries\",\r\n     *    \"heatRules\": [{\r\n     *      \"target\": \"columns.template\",\r\n     *      \"property\": \"fill\",\r\n     *      \"min\": \"#F5DBCB\",\r\n     *      \"max\": \"#ED7B84\",\r\n     *      \"dataField\": \"valueY\"\r\n     *    }]\r\n     *  }]\r\n     *}\r\n     *```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Heat_maps} for more about heat rules\r\n     * @return  Heat rules\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._heatRules) {\n        this._heatRules = new List();\n\n        this._heatRules.events.on(\"inserted\", function (event) {\n          var heatRule = event.newValue;\n          var target = heatRule.target;\n\n          if (target) {\n            var dataField_1 = heatRule.dataField;\n\n            if (!$type.hasValue(dataField_1)) {\n              dataField_1 = \"value\";\n            }\n\n            var seriesDataItem_1 = _this.dataItem;\n            var property_1 = heatRule.property;\n            var minValue = $type.toNumber(heatRule.minValue);\n            var maxValue = $type.toNumber(heatRule.maxValue);\n\n            if (!$type.isNumber(minValue) && !$type.isNumber(maxValue)) {\n              _this.dataItem.events.on(\"calculatedvaluechanged\", function (event) {\n                if (event.property == dataField_1) {\n                  $iter.each(_this.dataItems.iterator(), function (dataItem) {\n                    var foundSprite = false;\n                    $array.each(dataItem.sprites, function (sprite) {\n                      if (sprite.clonedFrom == target) {\n                        var anySprite = sprite;\n                        anySprite[property_1] = anySprite[property_1];\n                        foundSprite = true;\n                      }\n                    });\n\n                    if (!foundSprite) {\n                      $array.each(dataItem.sprites, function (sprite) {\n                        if (sprite instanceof Container) {\n                          $iter.each(sprite.children.iterator(), function (child) {\n                            if (child.className == target.className) {\n                              var anyChild = child;\n                              anyChild[property_1] = anyChild[property_1];\n                            } // giveup here\n                            else if (child instanceof Container) {\n                              child.deepInvalidate();\n                            }\n                          });\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n            }\n\n            _this.dataItems.template.events.on(\"workingvaluechanged\", function (event) {\n              if (event.property == dataField_1) {\n                var dataItem = event.target;\n                var foundSprite_1 = false;\n                $array.each(dataItem.sprites, function (sprite) {\n                  if (sprite.clonedFrom == target) {\n                    var anySprite = sprite;\n                    anySprite[property_1] = anySprite[property_1];\n                    foundSprite_1 = true;\n                  }\n                });\n\n                if (!foundSprite_1) {\n                  $array.each(dataItem.sprites, function (sprite) {\n                    if (sprite instanceof Container) {\n                      $iter.each(sprite.children.iterator(), function (child) {\n                        if (child.className == target.className) {\n                          var anyChild = child;\n                          anyChild[property_1] = anyChild[property_1];\n                        } // givup here\n                        else if (child instanceof Container) {\n                          child.deepInvalidate();\n                        }\n                      });\n                    }\n                  });\n                }\n              }\n            });\n\n            target.adapter.add(property_1, function (value, ruleTarget, property) {\n              var minValue = $type.toNumber(heatRule.minValue);\n              var maxValue = $type.toNumber(heatRule.maxValue);\n              var min = heatRule.min;\n              var max = heatRule.max;\n\n              if (ruleTarget instanceof Sprite) {\n                var anySprite = ruleTarget;\n                var propertyField = anySprite.propertyFields[property];\n\n                if (propertyField && ruleTarget.dataItem) {\n                  var dataContext = ruleTarget.dataItem.dataContext;\n\n                  if (dataContext && $type.hasValue(dataContext[propertyField])) {\n                    return value;\n                  }\n                }\n              }\n\n              var dataItem = ruleTarget.dataItem;\n\n              if (!$type.isNumber(minValue)) {\n                minValue = seriesDataItem_1.values[dataField_1].low;\n              }\n\n              if (!$type.isNumber(maxValue)) {\n                maxValue = seriesDataItem_1.values[dataField_1].high;\n              }\n\n              if (dataItem) {\n                var fieldValues = dataItem.values[dataField_1];\n\n                if (fieldValues) {\n                  var workingValue = dataItem.getActualWorkingValue(dataField_1);\n\n                  if ($type.hasValue(min) && $type.hasValue(max) && $type.isNumber(minValue) && $type.isNumber(maxValue) && $type.isNumber(workingValue)) {\n                    var percent = void 0;\n\n                    if (heatRule.logarithmic) {\n                      percent = (Math.log(workingValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / (Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E);\n                    } else {\n                      percent = (workingValue - minValue) / (maxValue - minValue);\n                    }\n\n                    if ($type.isNumber(workingValue) && (!$type.isNumber(percent) || Math.abs(percent) == Infinity)) {\n                      percent = 0.5;\n                    } // fixes problems if all values are the same\n\n\n                    if ($type.isNumber(min)) {\n                      return min + (max - min) * percent;\n                    } else if (min instanceof Color) {\n                      return new Color($colors.interpolate(min.rgb, max.rgb, percent));\n                    }\n                  }\n                }\n              }\n\n              return value;\n            });\n          }\n        });\n      }\n\n      return this._heatRules;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n  Series.prototype.processConfig = function (config) {\n    var heatRules;\n\n    if (config) {\n      // Set up bullets\n      if ($type.hasValue(config.bullets) && $type.isArray(config.bullets)) {\n        for (var i = 0, len = config.bullets.length; i < len; i++) {\n          var bullets = config.bullets[i];\n\n          if (!$type.hasValue(bullets.type)) {\n            bullets.type = \"Bullet\";\n          }\n        }\n      } // Let's take heatRules out of the config, so that we can process\n      // them later, when bullets are already there\n\n\n      if ($type.hasValue(config.heatRules) && $type.isArray(config.heatRules)) {\n        heatRules = config.heatRules;\n        delete config.heatRules;\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config); // Process heat rules again, when all other elements are ready\n\n\n    if (heatRules) {\n      for (var i = 0, len = heatRules.length; i < len; i++) {\n        var rule = heatRules[i]; // Resolve target\n\n        var target = this;\n\n        if ($type.hasValue(rule.target) && $type.isString(rule.target)) {\n          // Check if we can find this element by id\n          if (this.map.hasKey(rule.target)) {\n            target = this.map.getKey(rule.target);\n          } else {\n            var parts = rule.target.split(\".\");\n\n            for (var x = 0; x < parts.length; x++) {\n              if (target instanceof List) {\n                var listitem = target.getIndex($type.toNumber(parts[x]));\n\n                if (!listitem) {\n                  target = target[parts[x]];\n                } else {\n                  target = listitem;\n                }\n              } else {\n                var maybeIndex = parts[x].match(/^(.*)\\[([0-9]+)\\]/);\n\n                if (maybeIndex) {\n                  if (target[maybeIndex[1]] instanceof List) {\n                    target = target[maybeIndex[1]].getIndex($type.toNumber(maybeIndex[2]));\n                  } else {\n                    target = target[maybeIndex[1]][$type.toNumber(maybeIndex[2])];\n                  }\n                } else {\n                  target = target[parts[x]];\n                }\n              }\n            }\n          }\n        }\n\n        rule.target = target; // Resolve colors and percents\n\n        if ($type.hasValue(rule.min)) {\n          rule.min = this.maybeColorOrPercent(rule.min);\n        }\n\n        if ($type.hasValue(rule.max)) {\n          rule.max = this.maybeColorOrPercent(rule.max);\n        }\n      }\n\n      _super.prototype.processConfig.call(this, {\n        heatRules: heatRules\n      });\n    }\n  };\n  /**\r\n   * Returns visibility value\r\n   * @ignore\r\n   */\n\n  /*\r\n      protected getVisibility(): boolean {\r\n          let hidden = this.getPropertyValue(\"hidden\");\r\n          if (hidden) {\r\n              return false;\r\n          }\r\n          else {\r\n              return super.getVisibility();\r\n          }\r\n      }*/\n\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n\n\n  Series.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } // Must come last\n    else if (a == \"heatRules\") {\n      return 1;\n    } else if (b == \"heatRules\") {\n      return -1;\n    } else {\n      return _super.prototype.configOrder.call(this, a, b);\n    }\n  };\n  /**\r\n   * Sets `visibility` property:\r\n   *\r\n   * * `true` - visible\r\n   * * `false` - hidden\r\n   *\r\n   * @param value  true - visible, false - hidden\r\n   * @return Current visibility\r\n   */\n\n\n  Series.prototype.setVisibility = function (value) {\n    _super.prototype.setVisibility.call(this, value);\n\n    this.bulletsContainer.visible = value;\n  };\n\n  return Series;\n}(Component);\n\nexport { Series };\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Series\"] = Series;\nregistry.registeredClasses[\"SeriesDataItem\"] = SeriesDataItem;","map":{"version":3,"names":["__extends","Component","Sprite","List","ListTemplate","ListDisposer","Dictionary","DictionaryDisposer","DataItem","Container","Tooltip","Bullet","LegendSettings","options","Color","registry","$iter","$math","$ease","$utils","$object","$type","$array","$colors","SeriesDataItem","_super","_this","call","className","values","value","applyTheme","Object","defineProperty","prototype","get","_bullets","_disposers","push","enumerable","configurable","dispose","bullets","clear","set","setValue","Series","_ignoreMinMax","_showBullets","legendSettings","_tmin","_tmax","_smin","_smax","dataItemsByAxis","skipFocusThreshold","_itemReaderTextChanged","calculatePercent","usePercentHack","autoDispose","simplifiedProcessing","constructor","Error","isMeasured","layout","shouldClone","setPropertyValue","axisRanges","events","on","processAxisRange","minBulletDistance","mainContainer","createChild","mask","bulletsContainer","_shouldBeReady","virtualParent","tooltip","hiddenState","transitionEasing","cubicIn","dataItem","createDataItem","component","role","autoSetClassName","setClassName","applyInternalDefaults","hasValue","readerTitle","language","translate","_chart","positionBullet","bullet","processBullet","event","newValue","isTemplate","once","ev","itemsFocusable","focusable","invalidate","removeBullet","oldValue","dataItems","each","eachBullet","getKey","uid","validateDataItems","processValues","getFirstValue","key","startIndex","i","getIndex","getActualWorkingValue","isNumber","getAbsoluteFirstValue","length","rangeChangeUpdate","working","count_1","sum_1","absoluteSum_1","low_1","high_1","open_1","close_1","previous_1","first_1","absoluteFirst_1","startIndex_1","max","min","endIndex","dataItem_1","_loop_1","dataItem_2","Math","abs","setCalculatedValue","prevValue","_loop_2","dataItem_3","ksum","percent","zeroItem_1","dataItem_4","validate","isIE","filters","iterator","axisRange","fill","stroke","x","pixelX","y","pixelY","children","__disabled","updateTooltipBounds","topParent","w","maxWidth","h","maxHeight","rect","width","height","setBounds","shouldCreateBullet","bulletTemplate","validateDataElement","isHidden","visible","disabledField","propertyFields","disabled","dataContext","applyOnClones","clone","addSprite","isHiding","hide","currentDataItem","setKey","undefined","readerText_1","itemReaderText","xField","yField","isDynamic","deepInvalidate","populateString","hoverable","parent","itemWidth","itemHeight","handleDataItemWorkingValueChange","name","dataRangeInvalid","invalidateProcessedData","invalidateDataItems","createMask","rangesContainer","contents","isRange","getAxisField","axis","showTooltipAtPosition","xPosition","yPosition","getPropertyValue","template","createLegendMarker","marker","chart","feedLegend","legendDataItem","invalidateRawData","readerText","_itemReaderText","tooltipText","plainText","tooltipHTML","_adapterO","apply","_legendDataItem","itemContainer","updateLegendValue","notRange","label","valueLabel","isDisposed","itemValueText","text","itemLabelText","labelText","valueText","copyFrom","source","raiseCriticalError","e","modal","content","adapter","message","closable","suppressErrors","open","verbose","console","log","applyFilters","filter","_heatRules","heatRule","target","dataField_1","dataField","seriesDataItem_1","property_1","property","minValue","toNumber","maxValue","foundSprite","sprites","sprite","clonedFrom","anySprite","child","anyChild","foundSprite_1","add","ruleTarget","propertyField","low","high","fieldValues","workingValue","logarithmic","LOG10E","Infinity","interpolate","rgb","processConfig","config","heatRules","isArray","len","type","rule","isString","map","hasKey","parts","split","listitem","maybeIndex","match","maybeColorOrPercent","configOrder","a","b","setVisibility","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/series/Series.js"],"sourcesContent":["/**\r\n * Functionality for any series-based elements, like Line Series (graphs),\r\n * Pie slice lists, etc.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component } from \"../../core/Component\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { LegendSettings } from \"../Legend\";\r\nimport { options } from \"../../core/Options\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[Series]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar SeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(SeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"SeriesDataItem\";\r\n        //@todo Should we make `bullets` list disposable?\r\n        //this._disposers.push(new DictionaryDisposer(this.bullets));\r\n        _this.values.value = {};\r\n        _this.values.value = {};\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(SeriesDataItem.prototype, \"bullets\", {\r\n        /**\r\n         * A dictionary of data items bullets, where key is uid of a bullet template.\r\n         */\r\n        get: function () {\r\n            if (!this._bullets) {\r\n                this._bullets = new Dictionary();\r\n                this._disposers.push(new DictionaryDisposer(this._bullets));\r\n            }\r\n            return this._bullets;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    SeriesDataItem.prototype.dispose = function () {\r\n        this.bullets.clear();\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(SeriesDataItem.prototype, \"value\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.value.value;\r\n        },\r\n        /**\r\n         * data items's numeric value.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"value\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return SeriesDataItem;\r\n}(DataItem));\r\nexport { SeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines base class for any kind of serial data.\r\n *\r\n * @see {@link ISeriesEvents} for a list of available Events\r\n * @see {@link ISeriesAdapters} for a list of available Adapters\r\n * @todo Separate axis-related stuff to some other class so that MapSeries would not have unrelated stuff\r\n */\r\nvar Series = /** @class */ (function (_super) {\r\n    __extends(Series, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Series() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Should this series excluded from the axis scale calculations?\r\n         *\r\n         * @default false\r\n         */\r\n        _this._ignoreMinMax = false;\r\n        /**\r\n         * Should series' bullets?\r\n         *\r\n         * @default true\r\n         */\r\n        _this._showBullets = true;\r\n        /**\r\n         * Settings for the appearance of the related legend items.\r\n         */\r\n        _this.legendSettings = new LegendSettings();\r\n        /**\r\n         * Lowest overal values by type.\r\n         */\r\n        _this._tmin = new Dictionary();\r\n        /**\r\n         * Highest overal values by type.\r\n         */\r\n        _this._tmax = new Dictionary();\r\n        /**\r\n         * Lowest values in current selection by type.\r\n         */\r\n        _this._smin = new Dictionary();\r\n        /**\r\n         * Highest values in current selection by type.\r\n         */\r\n        _this._smax = new Dictionary();\r\n        /**\r\n         * [dataItemsByAxis description]\r\n         *\r\n         * Both by category and date.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.dataItemsByAxis = new Dictionary();\r\n        /**\r\n         * Normally series items are focusable using keyboard, so that people can\r\n         * select them with a TAB key. However, if there are a lot of data points on\r\n         * screen it might be long and useless to tab through all o fthem.\r\n         *\r\n         * This is where `skipFocusThreshold` comes in. If there are more items than\r\n         * the value set here, we will not make those focusable and rather let screen\r\n         * reader software rely on the series summary, or authors provide alternative\r\n         * detailed information display, such as HTML table.\r\n         *\r\n         * Different series might have different threshold defaults.\r\n         */\r\n        _this.skipFocusThreshold = 20;\r\n        /**\r\n         * Used to indicate if `itemReaderText` was changed \"from the outside\".\r\n         */\r\n        _this._itemReaderTextChanged = false;\r\n        /**\r\n         * Most of the series use absolute values. However sometimes various\r\n         * calculated percent values are need, e.g. item's percent representation\r\n         * across all values in series, etc.\r\n         *\r\n         * It's a resource-intensive operation, so it is disabled by default.\r\n         *\r\n         * If you need percents to be calculated, e.g. for showing them in tooltips,\r\n         * or creating 100% stacks, this setting needs to be set to `true`.\r\n         *\r\n         * NOTE: `PieChart`, which relies on slice percentages, has this\r\n         * automatically set to `true`.\r\n         *\r\n         * @default false\r\n         */\r\n        _this.calculatePercent = false;\r\n        /**\r\n         * When `calculatePercent` is enabled and data item's percent value is\r\n         * calculated, last item's real value is used instead of its working value.\r\n         *\r\n         * This is done for the animations when last item in series (e.g. slice in\r\n         * a `PieSeries`) is hidden or shown. (if we would use real value, the\r\n         * calculated percent would always be 100%).\r\n         *\r\n         * Sometimes there is a need (e.g. for drill-down Sunburst) to disable this\r\n         * hack by setting `usePercentHack` to `false`.\r\n         *\r\n         * @since 4.9.13\r\n         * @default true\r\n         */\r\n        _this.usePercentHack = true;\r\n        /**\r\n         * Specifies if series should be automatically disposed when removing from\r\n         * chart's `series` list.\r\n         *\r\n         * @default true\r\n         */\r\n        _this.autoDispose = true;\r\n        /**\r\n         * When chart/series' data is processed, all kinds of derivative values are\r\n         * calculated. E.g. sum, min, max, change, etc. This is a potentially\r\n         * time-consuming operation, especially prominent in data-heavy charts.\r\n         *\r\n         * If your chart does not need those values, and you have a lot of data,\r\n         * setting this to `true` might give a dramatic increase in initial chart\r\n         * load speed.\r\n         *\r\n         * Please note, regular column and line series usage scenarios do not\r\n         * require derivative values. Those come into play only when you do advanced\r\n         * functionality like coloring segments of charts in different colors\r\n         * depending on change between open and close values, have stacked series, or\r\n         * display any of the derived values, like percent, in tooltips or bullets.\r\n         *\r\n         * @default false\r\n         */\r\n        _this.simplifiedProcessing = false;\r\n        if (_this.constructor === Series) {\r\n            throw new Error(\"'Series' cannot be instantiated directly. Please use a specific series type.\");\r\n        }\r\n        _this.className = \"Series\";\r\n        _this.isMeasured = false;\r\n        _this.layout = \"none\";\r\n        _this.shouldClone = false;\r\n        _this.setPropertyValue(\"hidden\", false);\r\n        _this.axisRanges = new List();\r\n        _this.axisRanges.events.on(\"inserted\", _this.processAxisRange, _this, false);\r\n        _this.minBulletDistance = 0; // otherwise we'll have a lot of cases when people won't see bullets and think it's a bug\r\n        _this.mainContainer = _this.createChild(Container);\r\n        _this.mainContainer.shouldClone = false;\r\n        _this.mainContainer.mask = _this.createChild(Sprite);\r\n        _this._disposers.push(_this.mainContainer);\r\n        // all bullets should go on top of lines/fills. So we add a separate container for bullets and later set it's parent to chart.bulletsContainer\r\n        var bulletsContainer = _this.mainContainer.createChild(Container);\r\n        _this._shouldBeReady.push(bulletsContainer);\r\n        bulletsContainer.shouldClone = false;\r\n        bulletsContainer.layout = \"none\";\r\n        bulletsContainer.virtualParent = _this;\r\n        _this._disposers.push(bulletsContainer);\r\n        _this.bulletsContainer = bulletsContainer;\r\n        _this.tooltip = new Tooltip();\r\n        _this.tooltip.virtualParent = _this;\r\n        _this._disposers.push(_this.tooltip);\r\n        _this.hiddenState.transitionEasing = $ease.cubicIn;\r\n        // this data item holds sums, averages, etc\r\n        _this.dataItem = _this.createDataItem();\r\n        _this._disposers.push(_this.dataItem);\r\n        _this.dataItem.component = _this;\r\n        // Apply accessibility\r\n        _this.role = \"group\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * We need this here so that class names can be applied to bullets container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.applyTheme = function () {\r\n        _super.prototype.applyTheme.call(this);\r\n        if (options.autoSetClassName && this.bulletsContainer) {\r\n            this.bulletsContainer.className = this.className + \"-bullets\";\r\n            this.bulletsContainer.setClassName();\r\n        }\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    Series.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    Series.prototype.createDataItem = function () {\r\n        return new SeriesDataItem();\r\n    };\r\n    Object.defineProperty(Series.prototype, \"chart\", {\r\n        /**\r\n         * @return Chart\r\n         */\r\n        get: function () {\r\n            return this._chart;\r\n        },\r\n        /**\r\n         * Chart series is used on.\r\n         *\r\n         * @param value  Chart\r\n         */\r\n        set: function (value) {\r\n            this._chart = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Positions bullet.\r\n     *\r\n     * @param bullet  Sprite\r\n     */\r\n    Series.prototype.positionBullet = function (bullet) {\r\n        // Placeholder method for extending classes to override.\r\n    };\r\n    /**\r\n     * Decorates newly created bullet after it has been instert into the list.\r\n     *\r\n     * @param event  List event\r\n     * @todo investigate why itemReaderText is undefined\r\n     */\r\n    Series.prototype.processBullet = function (event) {\r\n        var _this = this;\r\n        var bullet = event.newValue;\r\n        bullet.isTemplate = true;\r\n        // Add accessibility options to bullet\r\n        // If there are relatively few bullets, make them focusable\r\n        this.events.once(\"datavalidated\", function (ev) {\r\n            if (_this.itemsFocusable()) {\r\n                bullet.focusable = true;\r\n            }\r\n        });\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * removes bullets\r\n     *\r\n     * @param event  List event\r\n     */\r\n    Series.prototype.removeBullet = function (event) {\r\n        var bullet = event.oldValue;\r\n        this.dataItems.each(function (dataItem) {\r\n            var eachBullet = dataItem.bullets.getKey(bullet.uid);\r\n            if (eachBullet) {\r\n                eachBullet.dispose();\r\n            }\r\n        });\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * Validates data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.validateDataItems = function () {\r\n        _super.prototype.validateDataItems.call(this);\r\n        this.processValues(false);\r\n    };\r\n    /**\r\n     * Returns first value for the specific key in the series.\r\n     *\r\n     * @param key  Key\r\n     * @return Value\r\n     * @todo Description\r\n     * @todo Convert to propert object property iterator\r\n     */\r\n    Series.prototype.getFirstValue = function (key, startIndex) {\r\n        // find first\r\n        /*\r\n        return $iter.findMap(this.dataItems.iterator(), (dataItem) => {\r\n            for (let key in dataItem.values) {\r\n                if ($object.hasKey(dataItem.values, key)) {\r\n                    let value: number = dataItem.values[key].workingValue;\r\n                    if ($type.isNumber(value)) {\r\n                        return value;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return null;\r\n        });*/\r\n        //if (startIndex > 0 && startIndex < this.dataItems.length - 1) {\r\n        //startIndex++;\r\n        //}\r\n        for (var i = startIndex; i >= 0; i--) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            var value = dataItem.getActualWorkingValue(key);\r\n            if ($type.isNumber(value)) {\r\n                return value;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns first value for the specific key in the series.\r\n     *\r\n     * @param key  Key\r\n     * @return Value\r\n     * @todo Description\r\n     * @todo Convert to propert object property iterator\r\n     */\r\n    Series.prototype.getAbsoluteFirstValue = function (key) {\r\n        for (var i = 0; i < this.dataItems.length; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            var value = dataItem.values[key].value;\r\n            if ($type.isNumber(value)) {\r\n                return value;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * [rangeChangeUpdate description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    Series.prototype.rangeChangeUpdate = function () {\r\n        _super.prototype.rangeChangeUpdate.call(this);\r\n        this.processValues(true);\r\n    };\r\n    /**\r\n     * [processValues description]\r\n     *\r\n     * @todo Description\r\n     * @todo Convert to propert object property iterator\r\n     * @param dataItems [description]\r\n     */\r\n    Series.prototype.processValues = function (working) {\r\n        var _this = this;\r\n        if (!this.simplifiedProcessing) {\r\n            var dataItems = this.dataItems;\r\n            var count_1 = {};\r\n            var sum_1 = {};\r\n            var absoluteSum_1 = {};\r\n            var low_1 = {};\r\n            var high_1 = {};\r\n            var open_1 = {};\r\n            var close_1 = {};\r\n            var previous_1 = {};\r\n            var first_1 = {};\r\n            var absoluteFirst_1 = {};\r\n            //let duration: number = 0; // todo: check if series uses selection.change or selection.change.percent and set duration to interpolationduration\r\n            var startIndex_1 = $math.max(0, this.startIndex);\r\n            startIndex_1 = $math.min(startIndex_1, this.dataItems.length);\r\n            var endIndex = $math.min(this.endIndex, this.dataItems.length);\r\n            if (!$type.isNumber(startIndex_1)) {\r\n                startIndex_1 = 0;\r\n            }\r\n            if (!$type.isNumber(endIndex)) {\r\n                endIndex = this.dataItems.length;\r\n            }\r\n            if (startIndex_1 > 0) {\r\n                var dataItem_1 = dataItems.getIndex(startIndex_1 - 1);\r\n                $object.each(dataItem_1.values, function (key, values) {\r\n                    var value = dataItem_1.getActualWorkingValue(key);\r\n                    if ($type.isNumber(value)) {\r\n                        // save previous\r\n                        previous_1[key] = value;\r\n                    }\r\n                });\r\n            }\r\n            var _loop_1 = function (i) {\r\n                var dataItem_2 = dataItems.getIndex(i);\r\n                $object.each(dataItem_2.values, function (key, values) {\r\n                    var value = dataItem_2.getActualWorkingValue(key);\r\n                    //if (i >= startIndex && i <= endIndex) { // do not add to count, sum etc if it is not within start/end index\r\n                    if ($type.isNumber(value)) {\r\n                        // count values\r\n                        if (!$type.isNumber(count_1[key])) {\r\n                            count_1[key] = 0;\r\n                        }\r\n                        count_1[key]++;\r\n                        // sum values\r\n                        if (!$type.isNumber(sum_1[key])) {\r\n                            sum_1[key] = 0;\r\n                        }\r\n                        sum_1[key] += value;\r\n                        // absolute sum values\r\n                        if (!$type.isNumber(absoluteSum_1[key])) {\r\n                            absoluteSum_1[key] = 0;\r\n                        }\r\n                        absoluteSum_1[key] += Math.abs(value);\r\n                        // open\r\n                        if (!$type.isNumber(open_1[key])) {\r\n                            open_1[key] = value;\r\n                        }\r\n                        // close\r\n                        close_1[key] = value;\r\n                        // low\r\n                        if (!$type.isNumber(low_1[key])) {\r\n                            low_1[key] = value;\r\n                        }\r\n                        else {\r\n                            if (low_1[key] > value) {\r\n                                low_1[key] = value;\r\n                            }\r\n                        }\r\n                        // high\r\n                        if (!$type.isNumber(high_1[key])) {\r\n                            high_1[key] = value;\r\n                        }\r\n                        else {\r\n                            if (high_1[key] < value) {\r\n                                high_1[key] = value;\r\n                            }\r\n                        }\r\n                        if (!$type.isNumber(first_1[key])) {\r\n                            first_1[key] = _this.getFirstValue(key, startIndex_1);\r\n                        }\r\n                        if (!$type.isNumber(absoluteFirst_1[key])) {\r\n                            absoluteFirst_1[key] = _this.getAbsoluteFirstValue(key);\r\n                        }\r\n                        // change\r\n                        dataItem_2.setCalculatedValue(key, value - first_1[key], \"change\");\r\n                        // change from start percent\r\n                        // will fail if first value is 0\r\n                        dataItem_2.setCalculatedValue(key, (value - first_1[key]) / first_1[key] * 100, \"changePercent\");\r\n                        dataItem_2.setCalculatedValue(key, (value - absoluteFirst_1[key]), \"startChange\");\r\n                        dataItem_2.setCalculatedValue(key, (value - absoluteFirst_1[key]) / absoluteFirst_1[key] * 100, \"startChangePercent\");\r\n                        // previous change\r\n                        var prevValue = previous_1[key];\r\n                        if (!$type.isNumber(prevValue)) {\r\n                            prevValue = value;\r\n                        }\r\n                        dataItem_2.setCalculatedValue(key, value - prevValue, \"previousChange\");\r\n                        // previous change percent\r\n                        dataItem_2.setCalculatedValue(key, (value - prevValue) / prevValue * 100, \"previousChangePercent\");\r\n                        // save previous\r\n                        previous_1[key] = value;\r\n                    }\r\n                });\r\n            };\r\n            for (var i = startIndex_1; i < endIndex; i++) {\r\n                _loop_1(i);\r\n            }\r\n            if (this.calculatePercent) {\r\n                var _loop_2 = function (i) {\r\n                    var dataItem_3 = dataItems.getIndex(i);\r\n                    $object.each(dataItem_3.values, function (key) {\r\n                        var ksum = absoluteSum_1[key];\r\n                        var value = dataItem_3.getActualWorkingValue(key);\r\n                        if ($type.isNumber(value)) {\r\n                            if (ksum > 0) {\r\n                                if (_this.usePercentHack) {\r\n                                    // this hack is made in order to make it possible to animate single slice to 0\r\n                                    // if there is only one slice left, percent value is always 100%, so it won't animate\r\n                                    // so we use real value of a slice instead of current value\r\n                                    if (value == ksum) {\r\n                                        ksum = dataItem_3.values[key].value;\r\n                                    }\r\n                                }\r\n                                var percent = value / ksum * 100;\r\n                                dataItem_3.setCalculatedValue(key, percent, \"percent\");\r\n                            }\r\n                            else {\r\n                                dataItem_3.setCalculatedValue(key, 0, \"percent\");\r\n                            }\r\n                        }\r\n                    });\r\n                };\r\n                for (var i = startIndex_1; i < endIndex; i++) {\r\n                    _loop_2(i);\r\n                }\r\n            }\r\n            // calculate one before first (cant do that in cycle, as we don't know open yet\r\n            // when drawing line chart we should draw line to the invisible data point to the left, otherwise the line will always look like it starts from the selected point\r\n            // so we do startIndex - 1\r\n            if (startIndex_1 > 0) {\r\n                var zeroItem_1 = dataItems.getIndex(startIndex_1 - 1);\r\n                $object.each(zeroItem_1.values, function (key) {\r\n                    var value = zeroItem_1.values[key].value;\r\n                    // change\r\n                    zeroItem_1.setCalculatedValue(key, value - open_1[key], \"change\");\r\n                    // change percent\r\n                    zeroItem_1.setCalculatedValue(key, (value - open_1[key]) / open_1[key] * 100, \"changePercent\");\r\n                });\r\n            }\r\n            // we save various data like sum, average to dataPoint of the series\r\n            var dataItem_4 = this.dataItem;\r\n            $object.each(dataItem_4.values, function (key) {\r\n                dataItem_4.setCalculatedValue(key, sum_1[key], \"sum\");\r\n                dataItem_4.setCalculatedValue(key, absoluteSum_1[key], \"absoluteSum\");\r\n                dataItem_4.setCalculatedValue(key, sum_1[key] / count_1[key], \"average\");\r\n                dataItem_4.setCalculatedValue(key, open_1[key], \"open\");\r\n                dataItem_4.setCalculatedValue(key, close_1[key], \"close\");\r\n                dataItem_4.setCalculatedValue(key, low_1[key], \"low\");\r\n                dataItem_4.setCalculatedValue(key, high_1[key], \"high\");\r\n                dataItem_4.setCalculatedValue(key, count_1[key], \"count\");\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.validate = function () {\r\n        if ($utils.isIE()) {\r\n            this.filters.clear();\r\n        }\r\n        $iter.each(this.axisRanges.iterator(), function (axisRange) {\r\n            //axisRange.contents.disposeChildren(); // not good for columns, as they are reused\r\n            //\t\t\taxisRange.appendChildren();\r\n            axisRange.validate();\r\n        });\r\n        _super.prototype.validate.call(this);\r\n        var bulletsContainer = this.bulletsContainer;\r\n        bulletsContainer.fill = this.fill;\r\n        bulletsContainer.stroke = this.stroke;\r\n        bulletsContainer.x = this.pixelX;\r\n        bulletsContainer.y = this.pixelY;\r\n        if (this.bulletsContainer.children.length > 0) {\r\n            if (this._showBullets) {\r\n                for (var i = 0; i < this.startIndex; i++) {\r\n                    var dataItem = this.dataItems.getIndex(i);\r\n                    if (dataItem) {\r\n                        dataItem.bullets.each(function (key, bullet) {\r\n                            bullet.__disabled = true;\r\n                        });\r\n                    }\r\n                }\r\n                for (var i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n                    var dataItem = this.dataItems.getIndex(i);\r\n                    if (dataItem) {\r\n                        dataItem.bullets.each(function (key, bullet) {\r\n                            bullet.__disabled = true;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this.bulletsContainer.children.each(function (bullet) {\r\n                    bullet.__disabled = true;\r\n                });\r\n            }\r\n        }\r\n        this.updateTooltipBounds();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Series.prototype.updateTooltipBounds = function () {\r\n        if (this.topParent) {\r\n            var x = 0;\r\n            var y = 0;\r\n            var w = this.topParent.maxWidth;\r\n            var h = this.topParent.maxHeight;\r\n            var rect = { x: x, y: y, width: w, height: h };\r\n            this.tooltip.setBounds(rect);\r\n        }\r\n    };\r\n    Series.prototype.shouldCreateBullet = function (dataItem, bulletTemplate) {\r\n        return true;\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    Series.prototype.validateDataElement = function (dataItem) {\r\n        var _this = this;\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n        if (this._showBullets) {\r\n            if (!this.isHidden) {\r\n                this.bulletsContainer.visible = true;\r\n            }\r\n            this.bullets.each(function (bulletTemplate) {\r\n                // always better to use the same, this helps to avoid redrawing\r\n                var bullet = dataItem.bullets.getKey(bulletTemplate.uid);\r\n                if (_this.shouldCreateBullet(dataItem, bulletTemplate)) {\r\n                    if (!bullet) {\r\n                        var disabledField = bulletTemplate.propertyFields.disabled;\r\n                        var dataContext = dataItem.dataContext;\r\n                        if (disabledField && dataContext && dataContext[disabledField] === false) {\r\n                            bulletTemplate.applyOnClones = false;\r\n                            bulletTemplate.disabled = false;\r\n                            bullet = bulletTemplate.clone();\r\n                            bulletTemplate.disabled = true;\r\n                            bulletTemplate.applyOnClones = true;\r\n                        }\r\n                        else {\r\n                            bullet = bulletTemplate.clone();\r\n                        }\r\n                        bullet.shouldClone = false;\r\n                        dataItem.addSprite(bullet);\r\n                        if (!_this.visible || _this.isHiding) {\r\n                            bullet.hide(0);\r\n                        }\r\n                    }\r\n                    var currentDataItem = bullet.dataItem;\r\n                    if (currentDataItem != dataItem) {\r\n                        // set to undefined in order not to reuse\r\n                        if (currentDataItem) {\r\n                            currentDataItem.bullets.setKey(bulletTemplate.uid, undefined);\r\n                        }\r\n                        var readerText_1 = _this.itemReaderText;\r\n                        if (bullet instanceof Bullet) {\r\n                            if (!readerText_1) {\r\n                                readerText_1 = (\"{\" + bullet.xField + \"}: {\" + bullet.yField + \"}\");\r\n                            }\r\n                            if (bullet.isDynamic) {\r\n                                dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n                                //dataItem.events.on(\"calculatedvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n                                _this.dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n                            }\r\n                            bullet.deepInvalidate();\r\n                        }\r\n                        // Add accessibility to bullet\r\n                        if (bullet.focusable) {\r\n                            bullet.events.on(\"focus\", function (ev) {\r\n                                bullet.readerTitle = _this.populateString(readerText_1, bullet.dataItem);\r\n                            }, undefined, false);\r\n                            bullet.events.on(\"blur\", function (ev) {\r\n                                bullet.readerTitle = \"\";\r\n                            }, undefined, false);\r\n                        }\r\n                        if (bullet.hoverable) {\r\n                            bullet.events.on(\"over\", function (ev) {\r\n                                bullet.readerTitle = _this.populateString(readerText_1, bullet.dataItem);\r\n                            }, undefined, false);\r\n                            bullet.events.on(\"out\", function (ev) {\r\n                                bullet.readerTitle = \"\";\r\n                            }, undefined, false);\r\n                        }\r\n                    }\r\n                    bullet.parent = _this.bulletsContainer;\r\n                    dataItem.bullets.setKey(bulletTemplate.uid, bullet);\r\n                    // pass max w/h so we'd know if we should show/hide somethings\r\n                    bullet.maxWidth = dataItem.itemWidth;\r\n                    bullet.maxHeight = dataItem.itemHeight;\r\n                    bullet.__disabled = false;\r\n                    _this.positionBullet(bullet);\r\n                }\r\n                else {\r\n                    if (bullet) {\r\n                        bullet.__disabled = true;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.bulletsContainer.visible = false;\r\n        }\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n        if (!this.dataRangeInvalid) {\r\n            this.invalidateProcessedData();\r\n        }\r\n    };\r\n    Object.defineProperty(Series.prototype, \"ignoreMinMax\", {\r\n        /**\r\n         * @return Exclude from calculations?\r\n         */\r\n        get: function () {\r\n            return this._ignoreMinMax;\r\n        },\r\n        /**\r\n         * Should this series excluded from the axis scale calculations?\r\n         *\r\n         * @default false\r\n         * @param value  Exclude from calculations?\r\n         */\r\n        set: function (value) {\r\n            this._ignoreMinMax = value;\r\n            this.invalidateDataItems();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Create a mask for the series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.createMask = function () {\r\n        // A placeholder method for extending classes to override.\r\n    };\r\n    /**\r\n     * Process axis range after it has been added to the list.\r\n     *\r\n     * @param event  Event\r\n     */\r\n    Series.prototype.processAxisRange = function (event) {\r\n        // create container if not existing\r\n        if (!this.rangesContainer) {\r\n            this.rangesContainer = this.createChild(Container);\r\n            this.rangesContainer.shouldClone = false;\r\n            this.rangesContainer.isMeasured = false;\r\n        }\r\n        var axisRange = event.newValue;\r\n        if (axisRange) {\r\n            axisRange.contents.parent = this.rangesContainer;\r\n            axisRange.isRange = true;\r\n            axisRange.events.on(\"valuechanged\", this.invalidateDataItems, this, false);\r\n        }\r\n    };\r\n    /**\r\n     * [getAxisField description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param axis  [description]\r\n     * @return [description]\r\n     */\r\n    Series.prototype.getAxisField = function (axis) {\r\n        return;\r\n    };\r\n    /**\r\n     * Shows the tooltip at specific position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param xPosition  X\r\n     * @param yPosition  Y\r\n     */\r\n    Series.prototype.showTooltipAtPosition = function (xPosition, yPosition) {\r\n        // Placeholder method for extending classes to override.\r\n    };\r\n    Object.defineProperty(Series.prototype, \"minBulletDistance\", {\r\n        /**\r\n         * @return Distance (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minBulletDistance\");\r\n        },\r\n        /**\r\n         * Minimal distance between data points in pixels.\r\n         *\r\n         * If distance gets smaller than this, bullets are turned off to avoid\r\n         * overlapping.\r\n         *\r\n         * `0` (zero) disables this behavior.\r\n         *\r\n         * IMPORTANT: This setting will work only when Series' base axis\r\n         * is [[CategoryAxis]] or [[DateAxis]]. If base axis is [[ValueAxis]] the\r\n         * setting will be ignored, because it would be a huge overhead to measure\r\n         * distance between each and every bullet.\r\n         *\r\n         * @default 0\r\n         * @param value  Distance (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minBulletDistance\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Series.prototype, \"bullets\", {\r\n        /**\r\n         * A list of bullets that will be added to each and every items in the\r\n         * series.\r\n         *\r\n         * You can push any object that is a descendant of a [[Sprite]] here. All\r\n         * items added to this list will be copied and used as a bullet on all data\r\n         * items, including their properties, events, etc.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/bullets/} for more info about the concept of Bullets\r\n         * @return List of bullets.\r\n         */\r\n        get: function () {\r\n            if (!this._bullets) {\r\n                this._bullets = new ListTemplate(new Bullet());\r\n                this._bullets.template.virtualParent = this;\r\n                this._bullets.events.on(\"inserted\", this.processBullet, this, false);\r\n                this._bullets.events.on(\"removed\", this.removeBullet, this, false);\r\n                this._disposers.push(new ListDisposer(this._bullets));\r\n                this._disposers.push(this._bullets.template);\r\n            }\r\n            return this._bullets;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Binds related legend data item's visual settings to this series' visual\r\n     * settings.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param marker  Legend item container\r\n     */\r\n    Series.prototype.createLegendMarker = function (marker) {\r\n        // This is a placeholder method for extending classes to override.\r\n    };\r\n    Object.defineProperty(Series.prototype, \"hiddenInLegend\", {\r\n        /**\r\n         * @return Hidden in legend?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hiddenInLegend\");\r\n        },\r\n        /**\r\n         * Should the series be hidden in legend?\r\n         *\r\n         * @param value Hidden in legend?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"hiddenInLegend\", value)) {\r\n                if (this.chart) {\r\n                    this.chart.feedLegend();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Series.prototype, \"name\", {\r\n        /**\r\n         * @return Name\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"name\");\r\n        },\r\n        /**\r\n         * Series' name.\r\n         *\r\n         * @param value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"name\", value);\r\n            var legendDataItem = this.legendDataItem;\r\n            if (legendDataItem) {\r\n                legendDataItem.component.invalidate();\r\n                legendDataItem.component.invalidateRawData();\r\n            }\r\n            this.readerTitle = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Series.prototype, \"itemReaderText\", {\r\n        /**\r\n         * @return Screen reader text template\r\n         */\r\n        get: function () {\r\n            // Get explicitly set reader text\r\n            var readerText = this._itemReaderText;\r\n            // Not set? Let's try something else\r\n            if (!readerText) {\r\n                // Tooltip text?\r\n                if (this.tooltipText) {\r\n                    readerText = $utils.plainText(this.tooltipText);\r\n                }\r\n                else if (this.tooltipHTML) {\r\n                    readerText = $utils.plainText(this.tooltipHTML);\r\n                }\r\n            }\r\n            if (!this._adapterO) {\r\n                return readerText;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"itemReaderText\", readerText);\r\n            }\r\n        },\r\n        /**\r\n         * Screen reader text to be applied to each individual data item, such\r\n         * as bullets, columns or slices.\r\n         *\r\n         * The template can contain field reference meta codes, i.e. `{dateX}`,\r\n         * `{valueY}`, etc.\r\n         *\r\n         * Any text formatting options, e.g. `[bold]` will be ignored.\r\n         *\r\n         * @param value Screen reader text template\r\n         */\r\n        set: function (value) {\r\n            this._itemReaderText = value;\r\n            this._itemReaderTextChanged = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns if number of data items in the series are beyond non-focusable\r\n     * count and should not be available for TAB-through.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Items focusable?\r\n     */\r\n    Series.prototype.itemsFocusable = function () {\r\n        return this.dataItems.length >= this.skipFocusThreshold ? false : true;\r\n    };\r\n    Object.defineProperty(Series.prototype, \"legendDataItem\", {\r\n        /**\r\n         * @return Data item\r\n         */\r\n        get: function () {\r\n            return this._legendDataItem;\r\n        },\r\n        /**\r\n         * Legend data item that corresponds to this series.\r\n         *\r\n         * @param value  Data item\r\n         */\r\n        set: function (value) {\r\n            this._legendDataItem = value;\r\n            this._legendDataItem.itemContainer.deepInvalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates corresponding legend data item with current values.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    Series.prototype.updateLegendValue = function (dataItem, notRange) {\r\n        // if this series has legend item\r\n        if (this.legendDataItem) {\r\n            var legendSettings = this.legendSettings;\r\n            var legendDataItem = this.legendDataItem;\r\n            var label = legendDataItem.label;\r\n            var valueLabel = legendDataItem.valueLabel;\r\n            // update legend\r\n            if ((dataItem && !dataItem.isDisposed()) || notRange) {\r\n                if (valueLabel) {\r\n                    if (legendSettings.itemValueText) {\r\n                        valueLabel.text = legendSettings.itemValueText;\r\n                    }\r\n                    valueLabel.dataItem = dataItem;\r\n                }\r\n                if (label) {\r\n                    if (legendSettings.itemLabelText) {\r\n                        label.text = legendSettings.itemLabelText;\r\n                    }\r\n                    label.dataItem = dataItem;\r\n                }\r\n            }\r\n            else {\r\n                if (label) {\r\n                    // if itemLabelText is set, means we have to reset label even if labelText is not set\r\n                    if (legendSettings.labelText || legendSettings.itemLabelText != undefined) {\r\n                        label.text = legendSettings.labelText;\r\n                    }\r\n                    label.dataItem = this.dataItem;\r\n                }\r\n                if (valueLabel) {\r\n                    if (legendSettings.valueText || legendSettings.itemValueText != undefined) {\r\n                        valueLabel.text = legendSettings.valueText;\r\n                    }\r\n                    valueLabel.dataItem = this.dataItem;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies all properties from another instance of [[Series]].\r\n     *\r\n     * @param source  Source series\r\n     */\r\n    Series.prototype.copyFrom = function (source) {\r\n        this.bullets.copyFrom(source.bullets);\r\n        this.bulletsContainer.copyFrom(source.bulletsContainer);\r\n        this.calculatePercent = source.calculatePercent;\r\n        this.usePercentHack = source.usePercentHack;\r\n        this.simplifiedProcessing = source.simplifiedProcessing;\r\n        _super.prototype.copyFrom.call(this, source);\r\n    };\r\n    /**\r\n     * Displays a modal or console message with error, and halts any further\r\n     * processing of this element.\r\n     *\r\n     * @param e Error\r\n     */\r\n    Series.prototype.raiseCriticalError = function (e) {\r\n        if (this._chart && this._chart.modal) {\r\n            this._chart.modal.content = this._chart.adapter.apply(\"criticalError\", e).message;\r\n            this._chart.modal.closable = false;\r\n            if (!options.suppressErrors) {\r\n                this._chart.modal.open();\r\n            }\r\n            this._chart.disabled = true;\r\n        }\r\n        if (options.verbose) {\r\n            console.log(e);\r\n        }\r\n    };\r\n    /**\r\n     * Applies filters to the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.applyFilters = function () {\r\n        var _this = this;\r\n        _super.prototype.applyFilters.call(this);\r\n        this.bulletsContainer.filters.clear();\r\n        // copyFrom of a list copies, does not clone\r\n        $iter.each(this.filters.iterator(), function (filter) {\r\n            _this.bulletsContainer.filters.push(filter.clone());\r\n        });\r\n    };\r\n    Object.defineProperty(Series.prototype, \"heatRules\", {\r\n        /**\r\n         * A list of heat rules to apply to series' elements based on the value\r\n         * of the data item.\r\n         *\r\n         * Heat rules can be any \"numeric\" (including `Color`) property, and can also\r\n         * be applied to child objects of series, like columns, bullets, etc.\r\n         *\r\n         * E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * series.heatRules.push({\r\n         *  \"target\": series.columns.template,\r\n         *  \"property\": \"fill\",\r\n         *  \"min\": am4core.color(\"#F5DBCB\"),\r\n         *  \"max\": am4core.color(\"#ED7B84\"),\r\n         *  \"dataField\": \"valueY\"\r\n         *});\r\n         *```\r\n         * ```Javacript\r\n         * series.heatRules.push({\r\n         *  \"target\": series.columns.template,\r\n         *  \"property\": \"fill\",\r\n         *  \"min\": am4core.color(\"#F5DBCB\"),\r\n         *  \"max\": am4core.color(\"#ED7B84\"),\r\n         *  \"dataField\": \"valueY\"\r\n         *});\r\n         *```\r\n         *```JSON\r\n         *{\r\n         *  // ...\r\n         *  \"series\": [{\r\n         *    \"type\": \"ColumnSeries\",\r\n         *    \"heatRules\": [{\r\n         *      \"target\": \"columns.template\",\r\n         *      \"property\": \"fill\",\r\n         *      \"min\": \"#F5DBCB\",\r\n         *      \"max\": \"#ED7B84\",\r\n         *      \"dataField\": \"valueY\"\r\n         *    }]\r\n         *  }]\r\n         *}\r\n         *```\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Heat_maps} for more about heat rules\r\n         * @return  Heat rules\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._heatRules) {\r\n                this._heatRules = new List();\r\n                this._heatRules.events.on(\"inserted\", function (event) {\r\n                    var heatRule = event.newValue;\r\n                    var target = heatRule.target;\r\n                    if (target) {\r\n                        var dataField_1 = heatRule.dataField;\r\n                        if (!$type.hasValue(dataField_1)) {\r\n                            dataField_1 = \"value\";\r\n                        }\r\n                        var seriesDataItem_1 = _this.dataItem;\r\n                        var property_1 = heatRule.property;\r\n                        var minValue = $type.toNumber(heatRule.minValue);\r\n                        var maxValue = $type.toNumber(heatRule.maxValue);\r\n                        if (!$type.isNumber(minValue) && !$type.isNumber(maxValue)) {\r\n                            _this.dataItem.events.on(\"calculatedvaluechanged\", function (event) {\r\n                                if (event.property == dataField_1) {\r\n                                    $iter.each(_this.dataItems.iterator(), function (dataItem) {\r\n                                        var foundSprite = false;\r\n                                        $array.each(dataItem.sprites, function (sprite) {\r\n                                            if (sprite.clonedFrom == target) {\r\n                                                var anySprite = sprite;\r\n                                                anySprite[property_1] = anySprite[property_1];\r\n                                                foundSprite = true;\r\n                                            }\r\n                                        });\r\n                                        if (!foundSprite) {\r\n                                            $array.each(dataItem.sprites, function (sprite) {\r\n                                                if (sprite instanceof Container) {\r\n                                                    $iter.each(sprite.children.iterator(), function (child) {\r\n                                                        if (child.className == target.className) {\r\n                                                            var anyChild = child;\r\n                                                            anyChild[property_1] = anyChild[property_1];\r\n                                                        }\r\n                                                        // giveup here\r\n                                                        else if (child instanceof Container) {\r\n                                                            child.deepInvalidate();\r\n                                                        }\r\n                                                    });\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                }\r\n                            });\r\n                        }\r\n                        _this.dataItems.template.events.on(\"workingvaluechanged\", function (event) {\r\n                            if (event.property == dataField_1) {\r\n                                var dataItem = event.target;\r\n                                var foundSprite_1 = false;\r\n                                $array.each(dataItem.sprites, function (sprite) {\r\n                                    if (sprite.clonedFrom == target) {\r\n                                        var anySprite = sprite;\r\n                                        anySprite[property_1] = anySprite[property_1];\r\n                                        foundSprite_1 = true;\r\n                                    }\r\n                                });\r\n                                if (!foundSprite_1) {\r\n                                    $array.each(dataItem.sprites, function (sprite) {\r\n                                        if (sprite instanceof Container) {\r\n                                            $iter.each(sprite.children.iterator(), function (child) {\r\n                                                if (child.className == target.className) {\r\n                                                    var anyChild = child;\r\n                                                    anyChild[property_1] = anyChild[property_1];\r\n                                                }\r\n                                                // givup here\r\n                                                else if (child instanceof Container) {\r\n                                                    child.deepInvalidate();\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n                        target.adapter.add(property_1, function (value, ruleTarget, property) {\r\n                            var minValue = $type.toNumber(heatRule.minValue);\r\n                            var maxValue = $type.toNumber(heatRule.maxValue);\r\n                            var min = heatRule.min;\r\n                            var max = heatRule.max;\r\n                            if (ruleTarget instanceof Sprite) {\r\n                                var anySprite = ruleTarget;\r\n                                var propertyField = anySprite.propertyFields[property];\r\n                                if (propertyField && ruleTarget.dataItem) {\r\n                                    var dataContext = ruleTarget.dataItem.dataContext;\r\n                                    if (dataContext && $type.hasValue(dataContext[propertyField])) {\r\n                                        return value;\r\n                                    }\r\n                                }\r\n                            }\r\n                            var dataItem = ruleTarget.dataItem;\r\n                            if (!$type.isNumber(minValue)) {\r\n                                minValue = seriesDataItem_1.values[dataField_1].low;\r\n                            }\r\n                            if (!$type.isNumber(maxValue)) {\r\n                                maxValue = seriesDataItem_1.values[dataField_1].high;\r\n                            }\r\n                            if (dataItem) {\r\n                                var fieldValues = dataItem.values[dataField_1];\r\n                                if (fieldValues) {\r\n                                    var workingValue = dataItem.getActualWorkingValue(dataField_1);\r\n                                    if ($type.hasValue(min) && $type.hasValue(max) && $type.isNumber(minValue) && $type.isNumber(maxValue) && $type.isNumber(workingValue)) {\r\n                                        var percent = void 0;\r\n                                        if (heatRule.logarithmic) {\r\n                                            percent = (Math.log(workingValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / ((Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E));\r\n                                        }\r\n                                        else {\r\n                                            percent = (workingValue - minValue) / (maxValue - minValue);\r\n                                        }\r\n                                        if ($type.isNumber(workingValue) && (!$type.isNumber(percent) || Math.abs(percent) == Infinity)) {\r\n                                            percent = 0.5;\r\n                                        }\r\n                                        // fixes problems if all values are the same\r\n                                        if ($type.isNumber(min)) {\r\n                                            return min + (max - min) * percent;\r\n                                        }\r\n                                        else if (min instanceof Color) {\r\n                                            return new Color($colors.interpolate(min.rgb, max.rgb, percent));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            return value;\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            return this._heatRules;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    Series.prototype.processConfig = function (config) {\r\n        var heatRules;\r\n        if (config) {\r\n            // Set up bullets\r\n            if ($type.hasValue(config.bullets) && $type.isArray(config.bullets)) {\r\n                for (var i = 0, len = config.bullets.length; i < len; i++) {\r\n                    var bullets = config.bullets[i];\r\n                    if (!$type.hasValue(bullets.type)) {\r\n                        bullets.type = \"Bullet\";\r\n                    }\r\n                }\r\n            }\r\n            // Let's take heatRules out of the config, so that we can process\r\n            // them later, when bullets are already there\r\n            if ($type.hasValue(config.heatRules) && $type.isArray(config.heatRules)) {\r\n                heatRules = config.heatRules;\r\n                delete config.heatRules;\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n        // Process heat rules again, when all other elements are ready\r\n        if (heatRules) {\r\n            for (var i = 0, len = heatRules.length; i < len; i++) {\r\n                var rule = heatRules[i];\r\n                // Resolve target\r\n                var target = this;\r\n                if ($type.hasValue(rule.target) && $type.isString(rule.target)) {\r\n                    // Check if we can find this element by id\r\n                    if (this.map.hasKey(rule.target)) {\r\n                        target = this.map.getKey(rule.target);\r\n                    }\r\n                    else {\r\n                        var parts = rule.target.split(\".\");\r\n                        for (var x = 0; x < parts.length; x++) {\r\n                            if (target instanceof List) {\r\n                                var listitem = target.getIndex($type.toNumber(parts[x]));\r\n                                if (!listitem) {\r\n                                    target = target[parts[x]];\r\n                                }\r\n                                else {\r\n                                    target = listitem;\r\n                                }\r\n                            }\r\n                            else {\r\n                                var maybeIndex = parts[x].match(/^(.*)\\[([0-9]+)\\]/);\r\n                                if (maybeIndex) {\r\n                                    if (target[maybeIndex[1]] instanceof List) {\r\n                                        target = target[maybeIndex[1]].getIndex($type.toNumber(maybeIndex[2]));\r\n                                    }\r\n                                    else {\r\n                                        target = target[maybeIndex[1]][$type.toNumber(maybeIndex[2])];\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    target = target[parts[x]];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                rule.target = target;\r\n                // Resolve colors and percents\r\n                if ($type.hasValue(rule.min)) {\r\n                    rule.min = this.maybeColorOrPercent(rule.min);\r\n                }\r\n                if ($type.hasValue(rule.max)) {\r\n                    rule.max = this.maybeColorOrPercent(rule.max);\r\n                }\r\n            }\r\n            _super.prototype.processConfig.call(this, {\r\n                heatRules: heatRules\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Returns visibility value\r\n     * @ignore\r\n     */\r\n    /*\r\n        protected getVisibility(): boolean {\r\n            let hidden = this.getPropertyValue(\"hidden\");\r\n            if (hidden) {\r\n                return false;\r\n            }\r\n            else {\r\n                return super.getVisibility();\r\n            }\r\n        }*/\r\n    /**\r\n     * This function is used to sort element's JSON config properties, so that\r\n     * some properties that absolutely need to be processed last, can be put at\r\n     * the end.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param a  Element 1\r\n     * @param b  Element 2\r\n     * @return Sorting number\r\n     */\r\n    Series.prototype.configOrder = function (a, b) {\r\n        if (a == b) {\r\n            return 0;\r\n        }\r\n        // Must come last\r\n        else if (a == \"heatRules\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"heatRules\") {\r\n            return -1;\r\n        }\r\n        else {\r\n            return _super.prototype.configOrder.call(this, a, b);\r\n        }\r\n    };\r\n    /**\r\n     * Sets `visibility` property:\r\n     *\r\n     * * `true` - visible\r\n     * * `false` - hidden\r\n     *\r\n     * @param value  true - visible, false - hidden\r\n     * @return Current visibility\r\n     */\r\n    Series.prototype.setVisibility = function (value) {\r\n        _super.prototype.setVisibility.call(this, value);\r\n        this.bulletsContainer.visible = value;\r\n    };\r\n    return Series;\r\n}(Component));\r\nexport { Series };\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Series\"] = Series;\r\nregistry.registeredClasses[\"SeriesDataItem\"] = SeriesDataItem;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,IAAT,EAAeC,YAAf,EAA6BC,YAA7B,QAAiD,uBAAjD;AACA,SAASC,UAAT,EAAqBC,kBAArB,QAA+C,6BAA/C;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,OAAT,QAAwB,6BAAxB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,yBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,yBAAzB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,cAAc;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAClDzB,SAAS,CAACwB,cAAD,EAAiBC,MAAjB,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,cAAT,GAA0B;IACtB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;IACAD,KAAK,CAACE,SAAN,GAAkB,gBAAlB,CAFsB,CAGtB;IACA;;IACAF,KAAK,CAACG,MAAN,CAAaC,KAAb,GAAqB,EAArB;IACAJ,KAAK,CAACG,MAAN,CAAaC,KAAb,GAAqB,EAArB;;IACAJ,KAAK,CAACK,UAAN;;IACA,OAAOL,KAAP;EACH;;EACDM,MAAM,CAACC,cAAP,CAAsBT,cAAc,CAACU,SAArC,EAAgD,SAAhD,EAA2D;IACvD;AACR;AACA;IACQC,GAAG,EAAE,YAAY;MACb,IAAI,CAAC,KAAKC,QAAV,EAAoB;QAChB,KAAKA,QAAL,GAAgB,IAAI9B,UAAJ,EAAhB;;QACA,KAAK+B,UAAL,CAAgBC,IAAhB,CAAqB,IAAI/B,kBAAJ,CAAuB,KAAK6B,QAA5B,CAArB;MACH;;MACD,OAAO,KAAKA,QAAZ;IACH,CAVsD;IAWvDG,UAAU,EAAE,IAX2C;IAYvDC,YAAY,EAAE;EAZyC,CAA3D;EAcA;AACJ;AACA;;EACIhB,cAAc,CAACU,SAAf,CAAyBO,OAAzB,GAAmC,YAAY;IAC3C,KAAKC,OAAL,CAAaC,KAAb;;IACAlB,MAAM,CAACS,SAAP,CAAiBO,OAAjB,CAAyBd,IAAzB,CAA8B,IAA9B;EACH,CAHD;;EAIAK,MAAM,CAACC,cAAP,CAAsBT,cAAc,CAACU,SAArC,EAAgD,OAAhD,EAAyD;IACrD;AACR;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,KAAKN,MAAL,CAAYC,KAAZ,CAAkBA,KAAzB;IACH,CANoD;;IAOrD;AACR;AACA;AACA;AACA;IACQc,GAAG,EAAE,UAAUd,KAAV,EAAiB;MAClB,KAAKe,QAAL,CAAc,OAAd,EAAuBf,KAAvB;IACH,CAdoD;IAerDS,UAAU,EAAE,IAfyC;IAgBrDC,YAAY,EAAE;EAhBuC,CAAzD;EAkBA,OAAOhB,cAAP;AACH,CAvDmC,CAuDlChB,QAvDkC,CAApC;;AAwDA,SAASgB,cAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIsB,MAAM;AAAG;AAAe,UAAUrB,MAAV,EAAkB;EAC1CzB,SAAS,CAAC8C,MAAD,EAASrB,MAAT,CAAT;EACA;AACJ;AACA;;;EACI,SAASqB,MAAT,GAAkB;IACd,IAAIpB,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAAjC;IACA;AACR;AACA;AACA;AACA;;;IACQD,KAAK,CAACqB,aAAN,GAAsB,KAAtB;IACA;AACR;AACA;AACA;AACA;;IACQrB,KAAK,CAACsB,YAAN,GAAqB,IAArB;IACA;AACR;AACA;;IACQtB,KAAK,CAACuB,cAAN,GAAuB,IAAIrC,cAAJ,EAAvB;IACA;AACR;AACA;;IACQc,KAAK,CAACwB,KAAN,GAAc,IAAI5C,UAAJ,EAAd;IACA;AACR;AACA;;IACQoB,KAAK,CAACyB,KAAN,GAAc,IAAI7C,UAAJ,EAAd;IACA;AACR;AACA;;IACQoB,KAAK,CAAC0B,KAAN,GAAc,IAAI9C,UAAJ,EAAd;IACA;AACR;AACA;;IACQoB,KAAK,CAAC2B,KAAN,GAAc,IAAI/C,UAAJ,EAAd;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;IACQoB,KAAK,CAAC4B,eAAN,GAAwB,IAAIhD,UAAJ,EAAxB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQoB,KAAK,CAAC6B,kBAAN,GAA2B,EAA3B;IACA;AACR;AACA;;IACQ7B,KAAK,CAAC8B,sBAAN,GAA+B,KAA/B;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ9B,KAAK,CAAC+B,gBAAN,GAAyB,KAAzB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ/B,KAAK,CAACgC,cAAN,GAAuB,IAAvB;IACA;AACR;AACA;AACA;AACA;AACA;;IACQhC,KAAK,CAACiC,WAAN,GAAoB,IAApB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQjC,KAAK,CAACkC,oBAAN,GAA6B,KAA7B;;IACA,IAAIlC,KAAK,CAACmC,WAAN,KAAsBf,MAA1B,EAAkC;MAC9B,MAAM,IAAIgB,KAAJ,CAAU,8EAAV,CAAN;IACH;;IACDpC,KAAK,CAACE,SAAN,GAAkB,QAAlB;IACAF,KAAK,CAACqC,UAAN,GAAmB,KAAnB;IACArC,KAAK,CAACsC,MAAN,GAAe,MA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"},"metadata":{},"sourceType":"module"}