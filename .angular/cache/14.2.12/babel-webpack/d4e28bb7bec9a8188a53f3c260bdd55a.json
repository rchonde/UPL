{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { AxisFillCircular } from \"./AxisFillCircular\";\nimport { GridCircular } from \"./GridCircular\";\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\nimport { registry } from \"../../core/Registry\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { AxisBullet } from \"./AxisBullet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A renderer for circular axis.\r\n */\n\nvar AxisRendererCircular =\n/** @class */\nfunction (_super) {\n  __extends(AxisRendererCircular, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRendererCircular() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * @ignore\r\n     */\n\n\n    _this.pixelRadiusReal = 0; // axis.layout = \"none\"; // does not trigger redraw when size changes\n\n    _this.layout = \"none\";\n    _this.className = \"AxisRendererCircular\";\n    _this.isMeasured = false;\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    _this.useChartAngles = true;\n    _this.radius = percent(100);\n    _this.isMeasured = false;\n    _this.grid.template.location = 0;\n    _this.labels.template.location = 0;\n    _this.labels.template.radius = 15;\n    _this.ticks.template.location = 0;\n    _this.ticks.template.pixelPerfect = false;\n    _this.tooltipLocation = 0;\n    _this.line.strokeOpacity = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n  * @ignore\r\n  */\n\n\n  AxisRendererCircular.prototype.setAxis = function (axis) {\n    var _this = this;\n\n    _super.prototype.setAxis.call(this, axis);\n\n    axis.isMeasured = false; // modify x and y so that tooltip would always be on circle\n\n    var tooltip = axis.tooltip;\n    tooltip.adapter.add(\"dx\", function (x, target) {\n      var point = $utils.svgPointToSprite({\n        x: target.pixelX,\n        y: target.pixelY\n      }, _this);\n      return _this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\n    });\n    tooltip.adapter.add(\"dy\", function (y, target) {\n      var point = $utils.svgPointToSprite({\n        x: target.pixelX,\n        y: target.pixelY\n      }, _this);\n      return _this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\n    });\n  };\n  /**\r\n   * Validates Axis renderer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererCircular.prototype.validate = function () {\n    // so that radius would be updated\n    if (this.chart && this.chart.invalid) {\n      this.chart.validate();\n    }\n\n    _super.prototype.validate.call(this);\n  };\n\n  Object.defineProperty(AxisRendererCircular.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      return 2 * Math.PI * this.pixelRadius;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\n        if (this.axis) {\n          this.axis.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"pixelRadius\", {\n    /**\r\n     * Outer radius in pixels.\r\n     *\r\n     * @return Outer radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      var chart = this.chart;\n      var innerRadius = this.getPropertyValue(\"innerRadius\");\n\n      if (chart) {\n        if (!$type.hasValue(innerRadius)) {\n          innerRadius = chart.innerRadius;\n\n          if (innerRadius instanceof Percent && chart) {\n            innerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100);\n          }\n        } else {\n          if (innerRadius instanceof Percent && chart) {\n            var mr = chart.mr;\n            var value = innerRadius.value;\n            value = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\n            innerRadius = percent(value * 100);\n          }\n        }\n\n        return innerRadius;\n      }\n    },\n\n    /**\r\n     * Inner radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Inner radius\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\n        if (this.axis) {\n          this.axis.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"useChartAngles\", {\n    /**\r\n     * @return Use chart angles\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"useChartAngles\");\n    },\n\n    /**\r\n     * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n     * inherit them from relative properties from chart.\r\n     *\r\n     * @default false\r\n     * @param value  Use chart's angles\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"useChartAngles\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * Inner radius in pixels.\r\n     *\r\n     * @return Inner radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n\n  AxisRendererCircular.prototype.positionToPoint = function (position, position2) {\n    if (!$type.isNumber(position2)) {\n      position2 = 1;\n    }\n\n    var coordinate = this.positionToCoordinate(position);\n    var angle = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\n    var radius = this.pixelRadius;\n    var innerRadius = this.pixelInnerRadius;\n\n    if (this.axisRendererY) {\n      var realRadius = $math.fitToRange(this.axisRendererY.positionToCoordinate(position2), 0, Infinity);\n\n      if (realRadius == 0) {\n        realRadius = 0.000001;\n      }\n\n      var point = {\n        x: realRadius * $math.cos(angle),\n        y: realRadius * $math.sin(angle)\n      };\n      return point;\n    }\n\n    return {\n      x: $math.cos(angle) * innerRadius + (radius - innerRadius) * $math.cos(angle) * position2,\n      y: $math.sin(angle) * innerRadius + (radius - innerRadius) * $math.sin(angle) * position2\n    };\n  };\n  /**\r\n   * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Angle (0-360)\r\n   */\n\n\n  AxisRendererCircular.prototype.positionToAngle = function (position) {\n    var axis = this.axis;\n    var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\n    var angle;\n\n    if (axis.renderer.inversed) {\n      angle = this.startAngle + (axis.end - position) * arc;\n    } else {\n      angle = this.startAngle + (position - axis.start) * arc;\n    }\n\n    return $math.round(angle, 3);\n  };\n  /**\r\n   * Converts angle on axis to relative position(0-1).\r\n   *\r\n   * @param angle Angle in degrees\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRendererCircular.prototype.angleToPosition = function (angle) {\n    var axis = this.axis;\n    var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\n    var position;\n\n    if (axis.renderer.inversed) {\n      position = axis.end - (angle - this.startAngle) / arc;\n    } else {\n      position = (angle - this.startAngle) / arc + axis.start;\n    }\n\n    return $math.round(position, 5);\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererCircular.prototype.updateAxisLine = function () {\n    var radius = this.pixelRadius;\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    var arc = $math.min(360, endAngle - startAngle);\n    this.line.path = $path.moveTo({\n      x: radius * $math.cos(startAngle),\n      y: radius * $math.sin(startAngle)\n    }) + $path.arcTo(startAngle, arc, radius, radius);\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererCircular.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n\n    if ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\n      var angle = $math.DEGREES * Math.atan2(point.y, point.x);\n      var radius = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\n      var gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\n      grid.zIndex = 0;\n      var innerRadius = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadiusReal, true);\n\n      if (!$type.isNumber(innerRadius)) {\n        innerRadius = 0;\n      }\n\n      grid.path = $path.moveTo({\n        x: innerRadius * $math.cos(angle),\n        y: innerRadius * $math.sin(angle)\n      }) + $path.lineTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      });\n    }\n\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererCircular.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n\n    if (tick.element) {\n      var radius = this.pixelRadius;\n      var angle = $math.DEGREES * Math.atan2(point.y, point.x);\n      var tickLength = tick.length;\n\n      if (tick.inside) {\n        tickLength = -tickLength;\n      }\n\n      tick.zIndex = 1;\n      tick.path = $path.moveTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      }) + $path.lineTo({\n        x: (radius + tickLength) * $math.cos(angle),\n        y: (radius + tickLength) * $math.sin(angle)\n      });\n    }\n\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions axis bullet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererCircular.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    var radius = this.pixelRadius;\n    var angle = $math.DEGREES * Math.atan2(point.y, point.x);\n    point = {\n      x: radius * $math.cos(angle),\n      y: radius * $math.sin(angle)\n    };\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n\n\n  AxisRendererCircular.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    label.fixPosition(this.positionToAngle(position), this.pixelRadius);\n    label.zIndex = 2;\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n  /**\r\n   * Checks if point is within bounds of a container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param point Point coordinates\r\n   * @return Fits?\r\n   */\n\n\n  AxisRendererCircular.prototype.fitsToBounds = function (point) {\n    return true;\n  };\n\n  Object.defineProperty(AxisRendererCircular.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * Start angle of the axis in degrees (0-360).\r\n     *\r\n     * @param value  Start angle\r\n     */\n    set: function (value) {\n      // do not normalize angel here!\n      if (this.setPropertyValue(\"startAngle\", value)) {\n        this.invalidateAxisItems();\n\n        if (this.axis) {\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * End angle of the axis in degrees (0-360).\r\n     *\r\n     * @param value  End angle\r\n     */\n    set: function (value) {\n      // do not normalize angel here!\n      if (this.setPropertyValue(\"endAngle\", value)) {\n        this.invalidateAxisItems();\n\n        if (this.axis) {\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n\n  AxisRendererCircular.prototype.getPositionRangePath = function (startPosition, endPosition, radius, innerRadius, cornerRadius) {\n    var path = \"\";\n\n    if ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\n      if (!$type.hasValue(radius)) {\n        radius = this.radius;\n      }\n\n      startPosition = $math.max(startPosition, this.axis.start);\n      endPosition = $math.min(endPosition, this.axis.end);\n\n      if (endPosition < startPosition) {\n        endPosition = startPosition;\n      }\n\n      var pixelRadius = $utils.relativeRadiusToValue(radius, this.pixelRadius);\n      var pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\n      var startAngle = this.positionToAngle(startPosition);\n      var endAngle = this.positionToAngle(endPosition);\n      var arc = endAngle - startAngle;\n      path = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\n    }\n\n    return path;\n  };\n  /**\r\n   * Returns a new grid element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Grid element\r\n   */\n\n\n  AxisRendererCircular.prototype.createGrid = function () {\n    return new GridCircular();\n  };\n  /**\r\n   * Returns a new fill element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Fill element\r\n   */\n\n\n  AxisRendererCircular.prototype.createFill = function (axis) {\n    return new AxisFillCircular(axis);\n  };\n  /**\r\n   * Returns a new label element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Label element\r\n   */\n\n\n  AxisRendererCircular.prototype.createLabel = function () {\n    return new AxisLabelCircular();\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRendererCircular.prototype.pointToPosition = function (point) {\n    var angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\n    return this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\n  };\n\n  return AxisRendererCircular;\n}(AxisRenderer);\n\nexport { AxisRendererCircular };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;","map":{"version":3,"names":["__extends","AxisRenderer","AxisFillCircular","GridCircular","AxisLabelCircular","registry","percent","Percent","$math","$path","$utils","$type","AxisBullet","AxisRendererCircular","_super","_this","call","pixelRadiusReal","layout","className","isMeasured","startAngle","endAngle","useChartAngles","radius","grid","template","location","labels","ticks","pixelPerfect","tooltipLocation","line","strokeOpacity","applyTheme","prototype","setAxis","axis","tooltip","adapter","add","x","target","point","svgPointToSprite","pixelX","y","pixelY","pixelRadius","Math","cos","atan2","sin","validate","chart","invalid","Object","defineProperty","get","PI","enumerable","configurable","getPropertyValue","set","value","setPercentProperty","invalidate","relativeRadiusToValue","innerRadius","hasValue","innerRadiusModifyer","mr","max","min","plotContainer","innerHeight","innerWidth","setPropertyValue","positionToPoint","position","position2","isNumber","coordinate","positionToCoordinate","angle","axisLength","pixelInnerRadius","axisRendererY","realRadius","fitToRange","Infinity","positionToAngle","arc","end","start","renderer","inversed","round","angleToPosition","updateAxisLine","path","moveTo","arcTo","updateGridElement","endPosition","element","DEGREES","gridInnerRadius","zIndex","lineTo","toggleVisibility","updateTickElement","tick","tickLength","length","inside","updateBullet","bullet","positionItem","updateLabelElement","label","fixPosition","minLabelPosition","maxLabelPosition","fitsToBounds","invalidateAxisItems","invalidateSeries","getPositionRangePath","startPosition","cornerRadius","createGrid","createFill","createLabel","pointToPosition","fitAngleToRange","getAngle","coordinateToPosition","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererCircular.js"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nvar AxisRendererCircular = /** @class */ (function (_super) {\r\n    __extends(AxisRendererCircular, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param axis Related axis\r\n     */\r\n    function AxisRendererCircular() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.pixelRadiusReal = 0;\r\n        // axis.layout = \"none\"; // does not trigger redraw when size changes\r\n        _this.layout = \"none\";\r\n        _this.className = \"AxisRendererCircular\";\r\n        _this.isMeasured = false;\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        _this.useChartAngles = true;\r\n        _this.radius = percent(100);\r\n        _this.isMeasured = false;\r\n        _this.grid.template.location = 0;\r\n        _this.labels.template.location = 0;\r\n        _this.labels.template.radius = 15;\r\n        _this.ticks.template.location = 0;\r\n        _this.ticks.template.pixelPerfect = false;\r\n        _this.tooltipLocation = 0;\r\n        _this.line.strokeOpacity = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n    * @ignore\r\n    */\r\n    AxisRendererCircular.prototype.setAxis = function (axis) {\r\n        var _this = this;\r\n        _super.prototype.setAxis.call(this, axis);\r\n        axis.isMeasured = false;\r\n        // modify x and y so that tooltip would always be on circle\r\n        var tooltip = axis.tooltip;\r\n        tooltip.adapter.add(\"dx\", function (x, target) {\r\n            var point = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, _this);\r\n            return _this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n        });\r\n        tooltip.adapter.add(\"dy\", function (y, target) {\r\n            var point = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, _this);\r\n            return _this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n        });\r\n    };\r\n    /**\r\n     * Validates Axis renderer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererCircular.prototype.validate = function () {\r\n        // so that radius would be updated\r\n        if (this.chart && this.chart.invalid) {\r\n            this.chart.validate();\r\n        }\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"axisLength\", {\r\n        /**\r\n         * Returns actual length of the Axis, in pixels.\r\n         *\r\n         * @return Length (px)\r\n         */\r\n        get: function () {\r\n            return 2 * Math.PI * this.pixelRadius;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"radius\", {\r\n        /**\r\n         * @return Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the axis.\r\n         *\r\n         * Can be absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"pixelRadius\", {\r\n        /**\r\n         * Outer radius in pixels.\r\n         *\r\n         * @return Outer radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            var chart = this.chart;\r\n            var innerRadius = this.getPropertyValue(\"innerRadius\");\r\n            if (chart) {\r\n                if (!$type.hasValue(innerRadius)) {\r\n                    innerRadius = chart.innerRadius;\r\n                    if (innerRadius instanceof Percent && chart) {\r\n                        innerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100);\r\n                    }\r\n                }\r\n                else {\r\n                    if (innerRadius instanceof Percent && chart) {\r\n                        var mr = chart.mr;\r\n                        var value = innerRadius.value;\r\n                        value = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n                        innerRadius = percent(value * 100);\r\n                    }\r\n                }\r\n                return innerRadius;\r\n            }\r\n        },\r\n        /**\r\n         * Inner radius of the axis.\r\n         *\r\n         * Can be absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Inner radius\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"useChartAngles\", {\r\n        /**\r\n         * @return Use chart angles\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"useChartAngles\");\r\n        },\r\n        /**\r\n         * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n         * inherit them from relative properties from chart.\r\n         *\r\n         * @default false\r\n         * @param value  Use chart's angles\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"useChartAngles\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * Inner radius in pixels.\r\n         *\r\n         * @return Inner radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position on axis to point coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @param position2  Position (0-1) Position on the second axis\r\n     * @return Point\r\n     */\r\n    AxisRendererCircular.prototype.positionToPoint = function (position, position2) {\r\n        if (!$type.isNumber(position2)) {\r\n            position2 = 1;\r\n        }\r\n        var coordinate = this.positionToCoordinate(position);\r\n        var angle = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n        var radius = this.pixelRadius;\r\n        var innerRadius = this.pixelInnerRadius;\r\n        if (this.axisRendererY) {\r\n            var realRadius = $math.fitToRange(this.axisRendererY.positionToCoordinate(position2), 0, Infinity);\r\n            if (realRadius == 0) {\r\n                realRadius = 0.000001;\r\n            }\r\n            var point = { x: realRadius * $math.cos(angle), y: realRadius * $math.sin(angle) };\r\n            return point;\r\n        }\r\n        return { x: $math.cos(angle) * innerRadius + (radius - innerRadius) * $math.cos(angle) * position2, y: $math.sin(angle) * innerRadius + (radius - innerRadius) * $math.sin(angle) * position2 };\r\n    };\r\n    /**\r\n     * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @return Angle (0-360)\r\n     */\r\n    AxisRendererCircular.prototype.positionToAngle = function (position) {\r\n        var axis = this.axis;\r\n        var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n        var angle;\r\n        if (axis.renderer.inversed) {\r\n            angle = this.startAngle + (axis.end - position) * arc;\r\n        }\r\n        else {\r\n            angle = this.startAngle + (position - axis.start) * arc;\r\n        }\r\n        return $math.round(angle, 3);\r\n    };\r\n    /**\r\n     * Converts angle on axis to relative position(0-1).\r\n     *\r\n     * @param angle Angle in degrees\r\n     * @return Position (0-1)\r\n     */\r\n    AxisRendererCircular.prototype.angleToPosition = function (angle) {\r\n        var axis = this.axis;\r\n        var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n        var position;\r\n        if (axis.renderer.inversed) {\r\n            position = axis.end - (angle - this.startAngle) / arc;\r\n        }\r\n        else {\r\n            position = (angle - this.startAngle) / arc + axis.start;\r\n        }\r\n        return $math.round(position, 5);\r\n    };\r\n    /**\r\n     * Updates and positions the axis line element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererCircular.prototype.updateAxisLine = function () {\r\n        var radius = this.pixelRadius;\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        var arc = $math.min(360, endAngle - startAngle);\r\n        this.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n    };\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param grid         Grid element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererCircular.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        if ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\r\n            var angle = $math.DEGREES * Math.atan2(point.y, point.x);\r\n            var radius = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n            var gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n            grid.zIndex = 0;\r\n            var innerRadius = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadiusReal, true);\r\n            if (!$type.isNumber(innerRadius)) {\r\n                innerRadius = 0;\r\n            }\r\n            grid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n        }\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param tick         Tick element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererCircular.prototype.updateTickElement = function (tick, position, endPosition) {\r\n        position = position + (endPosition - position) * tick.location;\r\n        var point = this.positionToPoint(position);\r\n        if (tick.element) {\r\n            var radius = this.pixelRadius;\r\n            var angle = $math.DEGREES * Math.atan2(point.y, point.x);\r\n            var tickLength = tick.length;\r\n            if (tick.inside) {\r\n                tickLength = -tickLength;\r\n            }\r\n            tick.zIndex = 1;\r\n            tick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n        }\r\n        this.toggleVisibility(tick, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions axis bullet.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param bullet       AxisBullet element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererCircular.prototype.updateBullet = function (bullet, position, endPosition) {\r\n        var location = 0.5;\r\n        if (bullet instanceof AxisBullet) {\r\n            location = bullet.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        var point = this.positionToPoint(position);\r\n        var radius = this.pixelRadius;\r\n        var angle = $math.DEGREES * Math.atan2(point.y, point.x);\r\n        point = { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n        this.positionItem(bullet, point);\r\n        this.toggleVisibility(bullet, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a label element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param label        Label element\r\n     * @param position     Starting position\r\n     * @param endPosition  Ending position\r\n     */\r\n    AxisRendererCircular.prototype.updateLabelElement = function (label, position, endPosition, location) {\r\n        if (!$type.hasValue(location)) {\r\n            location = label.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        label.fixPosition(this.positionToAngle(position), this.pixelRadius);\r\n        label.zIndex = 2;\r\n        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n    };\r\n    /**\r\n     * Checks if point is within bounds of a container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param point Point coordinates\r\n     * @return Fits?\r\n     */\r\n    AxisRendererCircular.prototype.fitsToBounds = function (point) {\r\n        return true;\r\n    };\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Start angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Start angle of the axis in degrees (0-360).\r\n         *\r\n         * @param value  Start angle\r\n         */\r\n        set: function (value) {\r\n            // do not normalize angel here!\r\n            if (this.setPropertyValue(\"startAngle\", value)) {\r\n                this.invalidateAxisItems();\r\n                if (this.axis) {\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"endAngle\", {\r\n        /**\r\n         * @return End angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * End angle of the axis in degrees (0-360).\r\n         *\r\n         * @param value  End angle\r\n         */\r\n        set: function (value) {\r\n            // do not normalize angel here!\r\n            if (this.setPropertyValue(\"endAngle\", value)) {\r\n                this.invalidateAxisItems();\r\n                if (this.axis) {\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [getPositionRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param startPosition  Starting position\r\n     * @param endPosition    End position\r\n     * @return SVG path\r\n     */\r\n    AxisRendererCircular.prototype.getPositionRangePath = function (startPosition, endPosition, radius, innerRadius, cornerRadius) {\r\n        var path = \"\";\r\n        if ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n            if (!$type.hasValue(radius)) {\r\n                radius = this.radius;\r\n            }\r\n            startPosition = $math.max(startPosition, this.axis.start);\r\n            endPosition = $math.min(endPosition, this.axis.end);\r\n            if (endPosition < startPosition) {\r\n                endPosition = startPosition;\r\n            }\r\n            var pixelRadius = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n            var pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n            var startAngle = this.positionToAngle(startPosition);\r\n            var endAngle = this.positionToAngle(endPosition);\r\n            var arc = endAngle - startAngle;\r\n            path = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n        }\r\n        return path;\r\n    };\r\n    /**\r\n     * Returns a new grid element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return Grid element\r\n     */\r\n    AxisRendererCircular.prototype.createGrid = function () {\r\n        return new GridCircular();\r\n    };\r\n    /**\r\n     * Returns a new fill element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return Fill element\r\n     */\r\n    AxisRendererCircular.prototype.createFill = function (axis) {\r\n        return new AxisFillCircular(axis);\r\n    };\r\n    /**\r\n     * Returns a new label element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return Label element\r\n     */\r\n    AxisRendererCircular.prototype.createLabel = function () {\r\n        return new AxisLabelCircular();\r\n    };\r\n    /**\r\n     * Converts a point at specific coordinates to a relative position (0-1)\r\n     * on the axis.\r\n     *\r\n     * @param point  Point\r\n     * @return Position (0-1)\r\n     */\r\n    AxisRendererCircular.prototype.pointToPosition = function (point) {\r\n        var angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n        return this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n    };\r\n    return AxisRendererCircular;\r\n}(AxisRenderer));\r\nexport { AxisRendererCircular };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}