{"ast":null,"code":"/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { registry, is } from \"./Registry\";\nimport { Container } from \"./Container\";\nimport { raf } from \"./utils/AsyncPending\";\nimport { triggerIdle } from \"./utils/AsyncPending\";\nimport * as $array from \"./utils/Array\";\nimport * as $object from \"./utils/Object\";\nimport * as $log from \"./utils/Log\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * The main class that handles system-wide tasks, like caching, heartbeats, etc.\r\n * @important\r\n */\n\nvar System =\n/** @class */\nfunction () {\n  /**\r\n   * Performs initialization of the System object.\r\n   *\r\n   * Called when the first [[Sprite]] object is created.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  function System() {\n    /**\r\n     * A flag indicating if the system is on pause.\r\n     */\n    this._isPaused = false;\n    /**\r\n     * Holds the list of currently playing animations.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    this.animations = [];\n    /**\r\n     * Unique ID of the object.\r\n     */\n\n    this.uid = registry.getUniqueId();\n    /**\r\n     * @todo Description\r\n     * @todo Needed?\r\n     * @ignore Exclude from docs\r\n     */\n\n    this.dummyCounter = 0;\n    this._frameRequested = false;\n    this.updateStepDuration = 45;\n    this.time = Date.now();\n  }\n  /**\r\n   * Reports time elapsed since timer was reset.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Needed?\r\n   * @param msg    Message to report in console\r\n   * @param reset  Reset time counter\r\n   */\n\n\n  System.prototype.reportTime = function (msg, reset) {\n    if (this.dummyCounter < 6) {//console.log(Date.now() - this.time, msg, this.dummyCounter2);\n    }\n\n    if (reset) {\n      this.time = Date.now();\n    }\n  };\n  /**\r\n   * Performs \"heartbeat\" operations `frameRate` number of times per second.\r\n   *\r\n   * When the chart element is invalidated, it is not immediately redrawn.\r\n   *\r\n   * Instead it waits for the next `update()` cycle to be re-validated.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Maybe should be private?\r\n   */\n\n\n  System.prototype.update = function () {\n    var _this = this;\n\n    if (this._isPaused) {\n      return;\n    }\n\n    this._frameRequested = false;\n    var time = Date.now();\n    registry.dispatchImmediately(\"enterframe\"); //this.validateLayouts();\n    //this.validatePositions();\n\n    /*\r\n            for (let key in registry.invalidLayouts) {\r\n                this.validateLayouts(key);\r\n            }\r\n            for (let key in registry.invalidPositions) {\r\n                this.validatePositions(key);\r\n            }\r\n    */\n\n    var skippedComponents = []; // data objects first - do all calculations\n    // only data is parsed in chunks, thats why we do for loop instead of a while like with other invalid items.\n    // important to go backwards, as items are removed!\n    // TODO use iterator instead\n\n    for (var key in registry.invalidDatas) {\n      if ($object.hasKey(registry.invalidDatas, key)) {\n        var invalidData = registry.invalidDatas[key];\n\n        while (invalidData.length > 0) {\n          var component = invalidData[0];\n          var dataProvider = component.dataProvider;\n\n          if (!component.isDisposed()) {\n            if (dataProvider && dataProvider.dataInvalid) {\n              try {\n                dataProvider.validateData();\n\n                if (dataProvider.dataValidationProgress < 1) {\n                  break;\n                }\n              } catch (e) {\n                $array.remove(invalidData, dataProvider);\n                dataProvider.raiseCriticalError(e);\n              }\n            } else {\n              try {\n                component.validateData();\n\n                if (component.dataValidationProgress < 1) {\n                  break;\n                }\n              } catch (e) {\n                $array.remove(invalidData, component);\n                component.raiseCriticalError(e);\n              }\n            }\n          } else {\n            $array.remove(invalidData, component);\n          }\n        }\n\n        if (Date.now() - time > this.updateStepDuration) {\n          break;\n        }\n      }\n    }\n\n    while (registry.invalidRawDatas.length > 0) {\n      var component = registry.invalidRawDatas[0];\n\n      if (!component.isDisposed()) {\n        try {\n          component.validateRawData();\n        } catch (e) {\n          $array.remove(registry.invalidRawDatas, component);\n          component.raiseCriticalError(e);\n        }\n      } else {\n        $array.remove(registry.invalidRawDatas, component);\n      }\n    } // TODO use iterator instead\n\n\n    while (registry.invalidDataItems.length > 0) {\n      var component = registry.invalidDataItems[0];\n      var dataProvider = component.dataProvider; // this is needed to avoid partial value validation when data is parsed in chunks\n\n      if (component.isDisposed() || component.dataInvalid || dataProvider && dataProvider.dataInvalid) {// void\n      } else {\n        try {\n          component.validateDataItems();\n        } catch (e) {\n          $array.remove(registry.invalidDataItems, component);\n          component.raiseCriticalError(e);\n        }\n      } // this might seem too much, as validateValues removes from invalidDataItems aswell, but just to be sure (in case validateData is overriden and no super is called)\n\n\n      $array.remove(registry.invalidDataItems, component);\n    } // TODO use iterator instead\n\n\n    while (registry.invalidDataRange.length > 0) {\n      var component = registry.invalidDataRange[0];\n      var dataProvider = component.dataProvider;\n\n      if (component.isDisposed() || component.dataInvalid || dataProvider && dataProvider.dataInvalid) {// void\n      } else {\n        try {\n          component.validateDataRange();\n\n          if (!component.skipRangeEvent) {\n            component.dispatchImmediately(\"datarangechanged\");\n          }\n\n          component.skipRangeEvent = false;\n        } catch (e) {\n          $array.remove(registry.invalidDataRange, component);\n          component.raiseCriticalError(e);\n        }\n      } // this might seem too much, as validateDataRange removes from invalidDataRange aswell, but just to be sure (in case validateData is overriden and no super is called)\n\n\n      $array.remove(registry.invalidDataRange, component);\n    }\n\n    var skippedSprites = []; // display objects later\n    // TODO use iterator instead\n\n    $object.each(registry.invalidLayouts, function (key) {\n      _this.validateLayouts(key);\n    });\n    $object.each(registry.invalidPositions, function (key) {\n      _this.validatePositions(key);\n    });\n    var hasSkipped = false;\n    time = Date.now();\n    $object.each(registry.invalidSprites, function (key, invalidSprites) {\n      var count = 0;\n\n      while (invalidSprites.length > 0) {\n        _this.validateLayouts(key);\n\n        _this.validatePositions(key);\n\n        count++;\n\n        if (count == 5) {\n          if (Date.now() - time > _this.updateStepDuration) {\n            break;\n          }\n\n          count = 0;\n        }\n\n        var sprite = invalidSprites[invalidSprites.length - 1]; // we need to check this, as validateLayout might validate sprite\n\n        if (sprite && !sprite.isDisposed()) {\n          if (!sprite._systemCheckIfValidate()) {\n            // void\n            skippedSprites.push(sprite);\n          } else {\n            if (!_this.checkIfValidate2(sprite)) {\n              // void\n              skippedSprites.push(sprite);\n            } else {\n              try {\n                sprite._systemUpdate(skippedSprites);\n              } catch (e) {\n                sprite.invalid = false;\n                $array.remove(invalidSprites, sprite);\n                sprite.raiseCriticalError(e);\n              }\n            }\n          } // this might seem too much, but it's ok\n\n\n          sprite.invalid = false;\n        }\n\n        $array.remove(invalidSprites, sprite);\n      }\n\n      registry.invalidSprites[key] = registry.invalidSprites[key].concat(skippedSprites);\n    });\n    $object.each(registry.invalidSprites, function (key, value) {\n      if (value.length > 0) {\n        hasSkipped = true;\n      }\n    });\n    $object.each(registry.invalidDatas, function (key, value) {\n      if (value.length > 0) {\n        hasSkipped = true;\n      }\n    }); // TODO make this more efficient\n    // TODO don't copy the array\n\n    $array.each($array.copy(this.animations), function (x) {\n      x.update();\n    }); //if(!hasSkipped){\n\n    $object.each(registry.invalidLayouts, function (key) {\n      _this.validateLayouts(key);\n    });\n    $object.each(registry.invalidPositions, function (key) {\n      _this.validatePositions(key);\n    }); //}\n\n    triggerIdle();\n    $object.each(registry.invalidLayouts, function (key) {\n      _this.validateLayouts(key);\n    });\n    $object.each(registry.invalidPositions, function (key) {\n      _this.validatePositions(key);\n    });\n    registry.dispatchImmediately(\"exitframe\");\n\n    if (hasSkipped || this.animations.length > 0 || skippedComponents.length > 0) {\n      this.requestFrame();\n    }\n\n    if (this.updateStepDuration < 200) {\n      var all0_1 = true;\n      $object.each(registry.invalidDatas, function (key, value) {\n        if (value.length > 0) {\n          all0_1 = false;\n        }\n      });\n      $object.each(registry.invalidSprites, function (key, value) {\n        if (value.length > 0) {\n          all0_1 = false;\n        }\n      });\n\n      if (all0_1) {\n        this.updateStepDuration = 200;\n      }\n    }\n  };\n\n  System.prototype.checkIfValidate2 = function (sprite) {\n    if (sprite.dataItem && sprite.dataItem.component && sprite.dataItem.component.dataInvalid && !sprite.dataItem.component.isTemplate) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /**\r\n   * Requests new animation frame\r\n   */\n\n\n  System.prototype.requestFrame = function () {\n    var _this = this;\n\n    if (!this._frameRequested) {\n      raf(function () {\n        _this.update();\n      });\n      this._frameRequested = true;\n    }\n  };\n  /**\r\n   * Call this method if you update data or config of a chart that is in\r\n   * hidden container, after revealing the container, so that labels and\r\n   * possibly other elements can correctly arrange themselves.\r\n   *\r\n   * @since 4.7.10\r\n   * @param  container  Target container\r\n   */\n\n\n  System.prototype.softInvalidate = function (container) {\n    var _this = this;\n\n    container.children.each(function (child) {\n      if (child instanceof Container) {\n        _this.softInvalidate(child);\n      }\n\n      if (child.measureFailed) {\n        if (is(child, \"Label\")) {\n          child.hardInvalidate();\n        } else {\n          child.invalidate();\n        }\n\n        child.measureFailed = false;\n      }\n    });\n  };\n  /**\r\n   * Triggers position re-validation on all [[Sprite]] elements that have\r\n   * invalid(ated) positions.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Maybe should be private?\r\n   */\n\n\n  System.prototype.validatePositions = function (id) {\n    // invalid positions\n    // TODO use iterator instead\n    var invalidPositions = registry.invalidPositions[id];\n\n    while (invalidPositions.length > 0) {\n      var sprite = invalidPositions[invalidPositions.length - 1];\n\n      if (!sprite.isDisposed()) {\n        try {\n          sprite._systemValidatePositions();\n        } catch (e) {\n          sprite.positionInvalid = false;\n          $array.remove(invalidPositions, sprite);\n          sprite.raiseCriticalError(e);\n        }\n      } else {\n        $array.remove(invalidPositions, sprite);\n      }\n    }\n  };\n  /**\r\n   * Triggers position re-validation on all [[Container]] elements that have\r\n   * invalid(ated) layouts.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Maybe should be private?\r\n   */\n\n\n  System.prototype.validateLayouts = function (id) {\n    // invalid positions\n    // TODO use iterator instead\n    var invalidLayouts = registry.invalidLayouts[id];\n\n    while (invalidLayouts.length > 0) {\n      var container = invalidLayouts[invalidLayouts.length - 1];\n\n      if (!container.isDisposed()) {\n        try {\n          container.children.each(function (sprite) {\n            sprite._systemValidateLayouts();\n          });\n          container.validateLayout();\n        } catch (e) {\n          container.layoutInvalid = false;\n          $array.remove(invalidLayouts, container);\n          container.raiseCriticalError(e);\n        }\n      } else {\n        $array.remove(invalidLayouts, container);\n      }\n    }\n  };\n  /**\r\n   * Outputs string to console if `verbose` is `true`.\r\n   *\r\n   * @param value Message to output to console\r\n   */\n\n\n  System.prototype.log = function (value) {\n    $log.log(value);\n  };\n\n  Object.defineProperty(System.prototype, \"isPaused\", {\n    /**\r\n     * @return Is system on pause?\r\n     */\n    get: function () {\n      return this._isPaused;\n    },\n\n    /**\r\n     * Pauses all the processes of all the amCharts objects on the page\r\n     *\r\n     * @return is paused?\r\n     */\n    set: function (value) {\n      this._isPaused = value;\n\n      if (!value) {\n        this._frameRequested = false;\n        this.requestFrame();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * amCharts Version.\r\n   *\r\n   * This follows npm's semver specification.\r\n   *\r\n   * @see {@link https://docs.npmjs.com/misc/semver}\r\n   */\n\n  System.VERSION = \"4.10.35\";\n  return System;\n}();\n\nexport { System };\n/**\r\n * A singleton global instance of [[System]].\r\n *\r\n * All code should use this, rather than instantiating their\r\n * own System objects.\r\n */\n\nexport var system = new System();","map":{"version":3,"names":["registry","is","Container","raf","triggerIdle","$array","$object","$log","System","_isPaused","animations","uid","getUniqueId","dummyCounter","_frameRequested","updateStepDuration","time","Date","now","prototype","reportTime","msg","reset","update","_this","dispatchImmediately","skippedComponents","key","invalidDatas","hasKey","invalidData","length","component","dataProvider","isDisposed","dataInvalid","validateData","dataValidationProgress","e","remove","raiseCriticalError","invalidRawDatas","validateRawData","invalidDataItems","validateDataItems","invalidDataRange","validateDataRange","skipRangeEvent","skippedSprites","each","invalidLayouts","validateLayouts","invalidPositions","validatePositions","hasSkipped","invalidSprites","count","sprite","_systemCheckIfValidate","push","checkIfValidate2","_systemUpdate","invalid","concat","value","copy","x","requestFrame","all0_1","dataItem","isTemplate","softInvalidate","container","children","child","measureFailed","hardInvalidate","invalidate","id","_systemValidatePositions","positionInvalid","_systemValidateLayouts","validateLayout","layoutInvalid","log","Object","defineProperty","get","set","enumerable","configurable","VERSION","system"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/System.js"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { registry, is } from \"./Registry\";\r\nimport { Container } from \"./Container\";\r\nimport { raf } from \"./utils/AsyncPending\";\r\nimport { triggerIdle } from \"./utils/AsyncPending\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $log from \"./utils/Log\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * The main class that handles system-wide tasks, like caching, heartbeats, etc.\r\n * @important\r\n */\r\nvar System = /** @class */ (function () {\r\n    /**\r\n     * Performs initialization of the System object.\r\n     *\r\n     * Called when the first [[Sprite]] object is created.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    function System() {\r\n        /**\r\n         * A flag indicating if the system is on pause.\r\n         */\r\n        this._isPaused = false;\r\n        /**\r\n         * Holds the list of currently playing animations.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.animations = [];\r\n        /**\r\n         * Unique ID of the object.\r\n         */\r\n        this.uid = registry.getUniqueId();\r\n        /**\r\n         * @todo Description\r\n         * @todo Needed?\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.dummyCounter = 0;\r\n        this._frameRequested = false;\r\n        this.updateStepDuration = 45;\r\n        this.time = Date.now();\r\n    }\r\n    /**\r\n     * Reports time elapsed since timer was reset.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Needed?\r\n     * @param msg    Message to report in console\r\n     * @param reset  Reset time counter\r\n     */\r\n    System.prototype.reportTime = function (msg, reset) {\r\n        if (this.dummyCounter < 6) {\r\n            //console.log(Date.now() - this.time, msg, this.dummyCounter2);\r\n        }\r\n        if (reset) {\r\n            this.time = Date.now();\r\n        }\r\n    };\r\n    /**\r\n     * Performs \"heartbeat\" operations `frameRate` number of times per second.\r\n     *\r\n     * When the chart element is invalidated, it is not immediately redrawn.\r\n     *\r\n     * Instead it waits for the next `update()` cycle to be re-validated.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Maybe should be private?\r\n     */\r\n    System.prototype.update = function () {\r\n        var _this = this;\r\n        if (this._isPaused) {\r\n            return;\r\n        }\r\n        this._frameRequested = false;\r\n        var time = Date.now();\r\n        registry.dispatchImmediately(\"enterframe\");\r\n        //this.validateLayouts();\r\n        //this.validatePositions();\r\n        /*\r\n                for (let key in registry.invalidLayouts) {\r\n                    this.validateLayouts(key);\r\n                }\r\n                for (let key in registry.invalidPositions) {\r\n                    this.validatePositions(key);\r\n                }\r\n        */\r\n        var skippedComponents = [];\r\n        // data objects first - do all calculations\r\n        // only data is parsed in chunks, thats why we do for loop instead of a while like with other invalid items.\r\n        // important to go backwards, as items are removed!\r\n        // TODO use iterator instead\r\n        for (var key in registry.invalidDatas) {\r\n            if ($object.hasKey(registry.invalidDatas, key)) {\r\n                var invalidData = registry.invalidDatas[key];\r\n                while (invalidData.length > 0) {\r\n                    var component = invalidData[0];\r\n                    var dataProvider = component.dataProvider;\r\n                    if (!component.isDisposed()) {\r\n                        if (dataProvider && dataProvider.dataInvalid) {\r\n                            try {\r\n                                dataProvider.validateData();\r\n                                if (dataProvider.dataValidationProgress < 1) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            catch (e) {\r\n                                $array.remove(invalidData, dataProvider);\r\n                                dataProvider.raiseCriticalError(e);\r\n                            }\r\n                        }\r\n                        else {\r\n                            try {\r\n                                component.validateData();\r\n                                if (component.dataValidationProgress < 1) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            catch (e) {\r\n                                $array.remove(invalidData, component);\r\n                                component.raiseCriticalError(e);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        $array.remove(invalidData, component);\r\n                    }\r\n                }\r\n                if (Date.now() - time > this.updateStepDuration) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        while (registry.invalidRawDatas.length > 0) {\r\n            var component = registry.invalidRawDatas[0];\r\n            if (!component.isDisposed()) {\r\n                try {\r\n                    component.validateRawData();\r\n                }\r\n                catch (e) {\r\n                    $array.remove(registry.invalidRawDatas, component);\r\n                    component.raiseCriticalError(e);\r\n                }\r\n            }\r\n            else {\r\n                $array.remove(registry.invalidRawDatas, component);\r\n            }\r\n        }\r\n        // TODO use iterator instead\r\n        while (registry.invalidDataItems.length > 0) {\r\n            var component = registry.invalidDataItems[0];\r\n            var dataProvider = component.dataProvider;\r\n            // this is needed to avoid partial value validation when data is parsed in chunks\r\n            if (component.isDisposed() || component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n                // void\r\n            }\r\n            else {\r\n                try {\r\n                    component.validateDataItems();\r\n                }\r\n                catch (e) {\r\n                    $array.remove(registry.invalidDataItems, component);\r\n                    component.raiseCriticalError(e);\r\n                }\r\n            }\r\n            // this might seem too much, as validateValues removes from invalidDataItems aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n            $array.remove(registry.invalidDataItems, component);\r\n        }\r\n        // TODO use iterator instead\r\n        while (registry.invalidDataRange.length > 0) {\r\n            var component = registry.invalidDataRange[0];\r\n            var dataProvider = component.dataProvider;\r\n            if (component.isDisposed() || component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n                // void\r\n            }\r\n            else {\r\n                try {\r\n                    component.validateDataRange();\r\n                    if (!component.skipRangeEvent) {\r\n                        component.dispatchImmediately(\"datarangechanged\");\r\n                    }\r\n                    component.skipRangeEvent = false;\r\n                }\r\n                catch (e) {\r\n                    $array.remove(registry.invalidDataRange, component);\r\n                    component.raiseCriticalError(e);\r\n                }\r\n            }\r\n            // this might seem too much, as validateDataRange removes from invalidDataRange aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n            $array.remove(registry.invalidDataRange, component);\r\n        }\r\n        var skippedSprites = [];\r\n        // display objects later\r\n        // TODO use iterator instead\r\n        $object.each(registry.invalidLayouts, function (key) {\r\n            _this.validateLayouts(key);\r\n        });\r\n        $object.each(registry.invalidPositions, function (key) {\r\n            _this.validatePositions(key);\r\n        });\r\n        var hasSkipped = false;\r\n        time = Date.now();\r\n        $object.each(registry.invalidSprites, function (key, invalidSprites) {\r\n            var count = 0;\r\n            while (invalidSprites.length > 0) {\r\n                _this.validateLayouts(key);\r\n                _this.validatePositions(key);\r\n                count++;\r\n                if (count == 5) {\r\n                    if (Date.now() - time > _this.updateStepDuration) {\r\n                        break;\r\n                    }\r\n                    count = 0;\r\n                }\r\n                var sprite = invalidSprites[invalidSprites.length - 1];\r\n                // we need to check this, as validateLayout might validate sprite\r\n                if (sprite && !sprite.isDisposed()) {\r\n                    if (!sprite._systemCheckIfValidate()) {\r\n                        // void\r\n                        skippedSprites.push(sprite);\r\n                    }\r\n                    else {\r\n                        if (!_this.checkIfValidate2(sprite)) {\r\n                            // void\r\n                            skippedSprites.push(sprite);\r\n                        }\r\n                        else {\r\n                            try {\r\n                                sprite._systemUpdate(skippedSprites);\r\n                            }\r\n                            catch (e) {\r\n                                sprite.invalid = false;\r\n                                $array.remove(invalidSprites, sprite);\r\n                                sprite.raiseCriticalError(e);\r\n                            }\r\n                        }\r\n                    }\r\n                    // this might seem too much, but it's ok\r\n                    sprite.invalid = false;\r\n                }\r\n                $array.remove(invalidSprites, sprite);\r\n            }\r\n            registry.invalidSprites[key] = registry.invalidSprites[key].concat(skippedSprites);\r\n        });\r\n        $object.each(registry.invalidSprites, function (key, value) {\r\n            if (value.length > 0) {\r\n                hasSkipped = true;\r\n            }\r\n        });\r\n        $object.each(registry.invalidDatas, function (key, value) {\r\n            if (value.length > 0) {\r\n                hasSkipped = true;\r\n            }\r\n        });\r\n        // TODO make this more efficient\r\n        // TODO don't copy the array\r\n        $array.each($array.copy(this.animations), function (x) {\r\n            x.update();\r\n        });\r\n        //if(!hasSkipped){\r\n        $object.each(registry.invalidLayouts, function (key) {\r\n            _this.validateLayouts(key);\r\n        });\r\n        $object.each(registry.invalidPositions, function (key) {\r\n            _this.validatePositions(key);\r\n        });\r\n        //}\r\n        triggerIdle();\r\n        $object.each(registry.invalidLayouts, function (key) {\r\n            _this.validateLayouts(key);\r\n        });\r\n        $object.each(registry.invalidPositions, function (key) {\r\n            _this.validatePositions(key);\r\n        });\r\n        registry.dispatchImmediately(\"exitframe\");\r\n        if (hasSkipped || this.animations.length > 0 || skippedComponents.length > 0) {\r\n            this.requestFrame();\r\n        }\r\n        if (this.updateStepDuration < 200) {\r\n            var all0_1 = true;\r\n            $object.each(registry.invalidDatas, function (key, value) {\r\n                if (value.length > 0) {\r\n                    all0_1 = false;\r\n                }\r\n            });\r\n            $object.each(registry.invalidSprites, function (key, value) {\r\n                if (value.length > 0) {\r\n                    all0_1 = false;\r\n                }\r\n            });\r\n            if (all0_1) {\r\n                this.updateStepDuration = 200;\r\n            }\r\n        }\r\n    };\r\n    System.prototype.checkIfValidate2 = function (sprite) {\r\n        if (sprite.dataItem && sprite.dataItem.component && sprite.dataItem.component.dataInvalid && !sprite.dataItem.component.isTemplate) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Requests new animation frame\r\n     */\r\n    System.prototype.requestFrame = function () {\r\n        var _this = this;\r\n        if (!this._frameRequested) {\r\n            raf(function () {\r\n                _this.update();\r\n            });\r\n            this._frameRequested = true;\r\n        }\r\n    };\r\n    /**\r\n     * Call this method if you update data or config of a chart that is in\r\n     * hidden container, after revealing the container, so that labels and\r\n     * possibly other elements can correctly arrange themselves.\r\n     *\r\n     * @since 4.7.10\r\n     * @param  container  Target container\r\n     */\r\n    System.prototype.softInvalidate = function (container) {\r\n        var _this = this;\r\n        container.children.each(function (child) {\r\n            if (child instanceof Container) {\r\n                _this.softInvalidate(child);\r\n            }\r\n            if (child.measureFailed) {\r\n                if (is(child, \"Label\")) {\r\n                    child.hardInvalidate();\r\n                }\r\n                else {\r\n                    child.invalidate();\r\n                }\r\n                child.measureFailed = false;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Triggers position re-validation on all [[Sprite]] elements that have\r\n     * invalid(ated) positions.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Maybe should be private?\r\n     */\r\n    System.prototype.validatePositions = function (id) {\r\n        // invalid positions\r\n        // TODO use iterator instead\r\n        var invalidPositions = registry.invalidPositions[id];\r\n        while (invalidPositions.length > 0) {\r\n            var sprite = invalidPositions[invalidPositions.length - 1];\r\n            if (!sprite.isDisposed()) {\r\n                try {\r\n                    sprite._systemValidatePositions();\r\n                }\r\n                catch (e) {\r\n                    sprite.positionInvalid = false;\r\n                    $array.remove(invalidPositions, sprite);\r\n                    sprite.raiseCriticalError(e);\r\n                }\r\n            }\r\n            else {\r\n                $array.remove(invalidPositions, sprite);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Triggers position re-validation on all [[Container]] elements that have\r\n     * invalid(ated) layouts.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Maybe should be private?\r\n     */\r\n    System.prototype.validateLayouts = function (id) {\r\n        // invalid positions\r\n        // TODO use iterator instead\r\n        var invalidLayouts = registry.invalidLayouts[id];\r\n        while (invalidLayouts.length > 0) {\r\n            var container = invalidLayouts[invalidLayouts.length - 1];\r\n            if (!container.isDisposed()) {\r\n                try {\r\n                    container.children.each(function (sprite) {\r\n                        sprite._systemValidateLayouts();\r\n                    });\r\n                    container.validateLayout();\r\n                }\r\n                catch (e) {\r\n                    container.layoutInvalid = false;\r\n                    $array.remove(invalidLayouts, container);\r\n                    container.raiseCriticalError(e);\r\n                }\r\n            }\r\n            else {\r\n                $array.remove(invalidLayouts, container);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Outputs string to console if `verbose` is `true`.\r\n     *\r\n     * @param value Message to output to console\r\n     */\r\n    System.prototype.log = function (value) {\r\n        $log.log(value);\r\n    };\r\n    Object.defineProperty(System.prototype, \"isPaused\", {\r\n        /**\r\n         * @return Is system on pause?\r\n         */\r\n        get: function () {\r\n            return this._isPaused;\r\n        },\r\n        /**\r\n         * Pauses all the processes of all the amCharts objects on the page\r\n         *\r\n         * @return is paused?\r\n         */\r\n        set: function (value) {\r\n            this._isPaused = value;\r\n            if (!value) {\r\n                this._frameRequested = false;\r\n                this.requestFrame();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * amCharts Version.\r\n     *\r\n     * This follows npm's semver specification.\r\n     *\r\n     * @see {@link https://docs.npmjs.com/misc/semver}\r\n     */\r\n    System.VERSION = \"4.10.35\";\r\n    return System;\r\n}());\r\nexport { System };\r\n/**\r\n * A singleton global instance of [[System]].\r\n *\r\n * All code should use this, rather than instantiating their\r\n * own System objects.\r\n */\r\nexport var system = new System();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}