{"ast":null,"code":"/**\r\n * Chord diagram module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport { ChordNode } from \"../elements/ChordNode\";\nimport { ChordLink } from \"../elements/ChordLink\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo rearange notes after dragged\n\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar ChordDiagramDataItem =\n/** @class */\nfunction (_super) {\n  __extends(ChordDiagramDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ChordDiagramDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ChordDiagramDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return ChordDiagramDataItem;\n}(FlowDiagramDataItem);\n\nexport { ChordDiagramDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\n\nvar ChordDiagram =\n/** @class */\nfunction (_super) {\n  __extends(ChordDiagram, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ChordDiagram() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * [valueAngle description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n\n    _this.valueAngle = 0;\n    _this.className = \"ChordDiagram\";\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    _this.radius = percent(80);\n    _this.innerRadius = -15;\n    _this.nodePadding = 5;\n\n    var chordContainer = _this.chartContainer.createChild(Container);\n\n    chordContainer.align = \"center\";\n    chordContainer.valign = \"middle\";\n    chordContainer.shouldClone = false;\n    chordContainer.layout = \"absolute\";\n    _this.chordContainer = chordContainer;\n    _this.nodesContainer.parent = chordContainer;\n    _this.linksContainer.parent = chordContainer;\n\n    _this.chartContainer.events.on(\"maxsizechanged\", _this.invalidate, _this, false); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Redraws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ChordDiagram.prototype.validate = function () {\n    var _this = this;\n\n    var chartContainer = this.chartContainer;\n    var endAngle = this.endAngle;\n    var startAngle = this.startAngle + this.nodePadding / 2;\n    var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\n    var innerRect = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    rect = $math.getCommonRectangle([rect, innerRect]);\n    var maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\n\n    if (!$type.isNumber(maxRadius)) {\n      maxRadius = 0;\n    }\n\n    var radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\n    var pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\n    var total = this.dataItem.values.value.sum;\n    var count = 0;\n    var newTotal = 0;\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n\n      _this.getNodeValue(node);\n\n      count++;\n      var value = node.total;\n\n      if (node.total / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n\n      newTotal += value;\n    });\n    this.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      var slice = node.slice;\n      slice.radius = radius;\n      slice.innerRadius = pixelInnerRadius;\n      var value = node.total;\n\n      if (node.total / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n\n      node.adjustedTotal = value;\n      var arc;\n\n      if (_this.nonRibbon) {\n        arc = (endAngle - _this.startAngle) / count - _this.nodePadding;\n      } else {\n        arc = _this.valueAngle * value;\n      }\n\n      slice.arc = arc;\n      slice.startAngle = startAngle;\n      node.trueStartAngle = startAngle;\n      node.parent = _this.nodesContainer;\n      node.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\n\n      startAngle += arc + _this.nodePadding;\n    });\n    this.chordContainer.definedBBox = {\n      x: radius * rect.x,\n      y: radius * rect.y,\n      width: radius * rect.width,\n      height: radius * rect.height\n    };\n    this.chordContainer.invalidateLayout();\n\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  ChordDiagram.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Chord diagram\");\n    }\n  };\n  /**\r\n   * Creates and returns a new data item.\r\n   *\r\n   * @return Data item\r\n   */\n\n\n  ChordDiagram.prototype.createDataItem = function () {\n    return new ChordDiagramDataItem();\n  };\n\n  Object.defineProperty(ChordDiagram.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * Starting angle of the Radar face. (degrees)\r\n     *\r\n     * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n     * top center. (at -90 degrees)\r\n     *\r\n     * You can use `startAngle` to change this setting.\r\n     *\r\n     * E.g. setting this to 0 will make the radial axis start horizontally to\r\n     * the right, as opposed to vertical.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set those to lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * @default -90\r\n     * @param value  Start angle (degrees)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * Starting angle of the Radar face. (degrees)\r\n     *\r\n     * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n     * where it has started, forming a full 360 circle. (at 270 degrees)\r\n     *\r\n     * You can use `endAngle` to end the circle somewhere else.\r\n     *\r\n     * E.g. setting this to 180 will make the radar face end at horizontal line\r\n     * to the left off the center.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set those to lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * @default -90\r\n     * @param value  End angle (degrees)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius of the Radar face.\r\n     *\r\n     * This can either be in absolute pixel value, or relative [[Percent]].\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the Chord nodes.\r\n     *\r\n     * This can either be in absolute pixel value, or relative [[Percent]].\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"nonRibbon\", {\n    /**\r\n     * @return Non-ribbon\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nonRibbon\");\n    },\n\n    /**\r\n     *\r\n     * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n     *\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"nonRibbon\", value, true);\n      this.links.template.middleLine.strokeOpacity = 1;\n      this.links.template.link.fillOpacity = 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  ChordDiagram.prototype.createNode = function () {\n    var node = new ChordNode();\n\n    this._disposers.push(node);\n\n    return node;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  ChordDiagram.prototype.createLink = function () {\n    var link = new ChordLink();\n\n    this._disposers.push(link);\n\n    return link;\n  };\n\n  return ChordDiagram;\n}(FlowDiagram);\n\nexport { ChordDiagram };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;","map":{"version":3,"names":["__extends","FlowDiagram","FlowDiagramDataItem","percent","Container","registry","ChordNode","ChordLink","$iter","$math","$type","$utils","ChordDiagramDataItem","_super","_this","call","className","applyTheme","ChordDiagram","valueAngle","startAngle","endAngle","radius","innerRadius","nodePadding","chordContainer","chartContainer","createChild","align","valign","shouldClone","layout","nodesContainer","parent","linksContainer","events","on","invalidate","prototype","validate","rect","getArcRect","innerRect","x","y","width","height","getCommonRectangle","maxRadius","Math","min","innerWidth","innerHeight","isNumber","relativeRadiusToValue","pixelInnerRadius","total","dataItem","values","value","sum","count","newTotal","each","_sorted","strNode","node","getNodeValue","minNodeSize","slice","adjustedTotal","arc","nonRibbon","trueStartAngle","definedBBox","invalidateLayout","applyInternalDefaults","hasValue","readerTitle","language","translate","createDataItem","Object","defineProperty","get","getPropertyValue","set","setPropertyValue","enumerable","configurable","setPercentProperty","links","template","middleLine","strokeOpacity","link","fillOpacity","createNode","_disposers","push","createLink","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/types/ChordDiagram.js"],"sourcesContent":["/**\r\n * Chord diagram module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo rearange notes after dragged\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar ChordDiagramDataItem = /** @class */ (function (_super) {\r\n    __extends(ChordDiagramDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChordDiagramDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ChordDiagramDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return ChordDiagramDataItem;\r\n}(FlowDiagramDataItem));\r\nexport { ChordDiagramDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nvar ChordDiagram = /** @class */ (function (_super) {\r\n    __extends(ChordDiagram, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChordDiagram() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * [valueAngle description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.valueAngle = 0;\r\n        _this.className = \"ChordDiagram\";\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        _this.radius = percent(80);\r\n        _this.innerRadius = -15;\r\n        _this.nodePadding = 5;\r\n        var chordContainer = _this.chartContainer.createChild(Container);\r\n        chordContainer.align = \"center\";\r\n        chordContainer.valign = \"middle\";\r\n        chordContainer.shouldClone = false;\r\n        chordContainer.layout = \"absolute\";\r\n        _this.chordContainer = chordContainer;\r\n        _this.nodesContainer.parent = chordContainer;\r\n        _this.linksContainer.parent = chordContainer;\r\n        _this.chartContainer.events.on(\"maxsizechanged\", _this.invalidate, _this, false);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Redraws the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ChordDiagram.prototype.validate = function () {\r\n        var _this = this;\r\n        var chartContainer = this.chartContainer;\r\n        var endAngle = this.endAngle;\r\n        var startAngle = this.startAngle + this.nodePadding / 2;\r\n        var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n        var innerRect = { x: 0, y: 0, width: 0, height: 0 };\r\n        rect = $math.getCommonRectangle([rect, innerRect]);\r\n        var maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n        if (!$type.isNumber(maxRadius)) {\r\n            maxRadius = 0;\r\n        }\r\n        var radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n        var pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n        var total = this.dataItem.values.value.sum;\r\n        var count = 0;\r\n        var newTotal = 0;\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            _this.getNodeValue(node);\r\n            count++;\r\n            var value = node.total;\r\n            if (node.total / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            newTotal += value;\r\n        });\r\n        this.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            var slice = node.slice;\r\n            slice.radius = radius;\r\n            slice.innerRadius = pixelInnerRadius;\r\n            var value = node.total;\r\n            if (node.total / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            node.adjustedTotal = value;\r\n            var arc;\r\n            if (_this.nonRibbon) {\r\n                arc = (endAngle - _this.startAngle) / count - _this.nodePadding;\r\n            }\r\n            else {\r\n                arc = _this.valueAngle * value;\r\n            }\r\n            slice.arc = arc;\r\n            slice.startAngle = startAngle;\r\n            node.trueStartAngle = startAngle;\r\n            node.parent = _this.nodesContainer;\r\n            node.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n            startAngle += arc + _this.nodePadding;\r\n        });\r\n        this.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n        this.chordContainer.invalidateLayout();\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    ChordDiagram.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Chord diagram\");\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new data item.\r\n     *\r\n     * @return Data item\r\n     */\r\n    ChordDiagram.prototype.createDataItem = function () {\r\n        return new ChordDiagramDataItem();\r\n    };\r\n    Object.defineProperty(ChordDiagram.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Start angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the Radar face. (degrees)\r\n         *\r\n         * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n         * top center. (at -90 degrees)\r\n         *\r\n         * You can use `startAngle` to change this setting.\r\n         *\r\n         * E.g. setting this to 0 will make the radial axis start horizontally to\r\n         * the right, as opposed to vertical.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set those to lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * @default -90\r\n         * @param value  Start angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"endAngle\", {\r\n        /**\r\n         * @return End angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the Radar face. (degrees)\r\n         *\r\n         * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n         * where it has started, forming a full 360 circle. (at 270 degrees)\r\n         *\r\n         * You can use `endAngle` to end the circle somewhere else.\r\n         *\r\n         * E.g. setting this to 180 will make the radar face end at horizontal line\r\n         * to the left off the center.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set those to lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * @default -90\r\n         * @param value  End angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"radius\", {\r\n        /**\r\n         * @return Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the Radar face.\r\n         *\r\n         * This can either be in absolute pixel value, or relative [[Percent]].\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the Chord nodes.\r\n         *\r\n         * This can either be in absolute pixel value, or relative [[Percent]].\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"nonRibbon\", {\r\n        /**\r\n         * @return Non-ribbon\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nonRibbon\");\r\n        },\r\n        /**\r\n         *\r\n         * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n         *\r\n         * @param value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"nonRibbon\", value, true);\r\n            this.links.template.middleLine.strokeOpacity = 1;\r\n            this.links.template.link.fillOpacity = 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    ChordDiagram.prototype.createNode = function () {\r\n        var node = new ChordNode();\r\n        this._disposers.push(node);\r\n        return node;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    ChordDiagram.prototype.createLink = function () {\r\n        var link = new ChordLink();\r\n        this._disposers.push(link);\r\n        return link;\r\n    };\r\n    return ChordDiagram;\r\n}(FlowDiagram));\r\nexport { ChordDiagram };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}