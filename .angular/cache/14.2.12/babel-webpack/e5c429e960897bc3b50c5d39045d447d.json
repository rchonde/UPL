{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/html_editor/modules/toolbar.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Quill from \"devextreme-quill\";\nimport $ from \"../../../core/renderer\";\nimport BaseModule from \"./base\";\nimport Toolbar from \"../../toolbar\";\nimport \"../../select_box\";\nimport \"../../color_box/color_view\";\nimport \"../../number_box\";\nimport errors from \"../../widget/ui.errors\";\nimport WidgetCollector from \"./widget_collector\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { isString, isObject, isDefined, isEmptyObject } from \"../../../core/utils/type\";\nimport { extend } from \"../../../core/utils/extend\";\nimport localizationMessage from \"../../../localization/message\";\nimport { titleize, camelize } from \"../../../core/utils/inflector\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { addNamespace } from \"../../../events/utils/index\";\nimport { getTableFormats, TABLE_OPERATIONS } from \"../utils/table_helper\";\nimport { getFormatHandlers, getDefaultClickHandler, ICON_MAP, applyFormat } from \"../utils/toolbar_helper\";\nvar ToolbarModule = BaseModule;\n\nif (Quill) {\n  var TOOLBAR_WRAPPER_CLASS = \"dx-htmleditor-toolbar-wrapper\";\n  var TOOLBAR_CLASS = \"dx-htmleditor-toolbar\";\n  var TOOLBAR_FORMAT_WIDGET_CLASS = \"dx-htmleditor-toolbar-format\";\n  var TOOLBAR_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-separator\";\n  var TOOLBAR_MENU_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-menu-separator\";\n  var ACTIVE_FORMAT_CLASS = \"dx-format-active\";\n  var ICON_CLASS = \"dx-icon\";\n  var SELECTION_CHANGE_EVENT = \"selection-change\";\n  var USER_ACTION = \"user\";\n  var SILENT_ACTION = \"silent\";\n  var FORMAT_HOTKEYS = {\n    66: \"bold\",\n    73: \"italic\",\n    85: \"underline\"\n  };\n  var KEY_CODES = {\n    b: 66,\n    i: 73,\n    u: 85\n  };\n\n  var localize = name => localizationMessage.format(\"dxHtmlEditor-\".concat(camelize(name)));\n\n  var localizeValue = (value, name) => {\n    if (\"header\" === name) {\n      var isHeaderValue = isDefined(value) && false !== value;\n      return isHeaderValue ? \"\".concat(localize(\"heading\"), \" \").concat(value) : localize(\"normalText\");\n    }\n\n    return localize(value) || value;\n  };\n\n  ToolbarModule = class extends BaseModule {\n    constructor(quill, options) {\n      var _this;\n\n      super(quill, options);\n      _this = this;\n      this._toolbarWidgets = new WidgetCollector();\n      this._formatHandlers = getFormatHandlers(this);\n      this._tableFormats = getTableFormats(quill);\n\n      if (isDefined(options.items)) {\n        this._addCallbacks();\n\n        this._renderToolbar();\n\n        var toolbarMenu = this.toolbarInstance._layoutStrategy._menu;\n\n        if (toolbarMenu) {\n          var _renderPopup = toolbarMenu._renderPopup;\n\n          toolbarMenu._renderPopup = function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            _renderPopup.apply(toolbarMenu, ...args);\n\n            toolbarMenu._popup.on(\"showing\", () => {\n              _this._updateToolbar(true);\n            });\n          };\n        }\n\n        this.quill.on(\"editor-change\", (eventName, newValue, oldValue, eventSource) => {\n          var isSilentMode = eventSource === SILENT_ACTION && isEmptyObject(this.quill.getFormat());\n\n          if (!isSilentMode) {\n            var isSelectionChanged = eventName === SELECTION_CHANGE_EVENT;\n\n            this._updateToolbar(isSelectionChanged);\n          }\n        });\n      }\n    }\n\n    _addCallbacks() {\n      this.addCleanCallback(this.clean.bind(this));\n      this.editorInstance.addContentInitializedCallback(this.updateHistoryWidgets.bind(this));\n    }\n\n    _updateToolbar(isSelectionChanged) {\n      this.updateFormatWidgets(isSelectionChanged);\n      this.updateHistoryWidgets();\n      this.updateTableWidgets();\n    }\n\n    _updateFormatWidget(name, isApplied, formats) {\n      var widget = this._toolbarWidgets.getByName(name);\n\n      if (!widget) {\n        return;\n      }\n\n      if (isApplied) {\n        this._markActiveFormatWidget(name, widget, formats);\n      } else {\n        this._resetFormatWidget(name, widget);\n\n        if (Object.prototype.hasOwnProperty.call(name)) {\n          delete formats[name];\n        }\n      }\n\n      this._toggleClearFormatting(isApplied || !isEmptyObject(formats));\n    }\n\n    _renderToolbar() {\n      var container = this.options.container || this._getContainer();\n\n      this._$toolbar = $(\"<div>\").addClass(TOOLBAR_CLASS).appendTo(container);\n      this._$toolbarContainer = $(container).addClass(TOOLBAR_WRAPPER_CLASS);\n      eventsEngine.on(this._$toolbarContainer, addNamespace(\"mousedown\", this.editorInstance.NAME), e => {\n        e.preventDefault();\n      });\n\n      this._subscribeFormatHotKeys();\n\n      this.toolbarInstance = this.editorInstance._createComponent(this._$toolbar, Toolbar, this.toolbarConfig);\n      this.editorInstance.on(\"optionChanged\", _ref => {\n        var {\n          name: name\n        } = _ref;\n\n        if (\"readOnly\" === name || \"disabled\" === name) {\n          this.toolbarInstance.option(\"disabled\", this.isInteractionDisabled);\n        }\n      });\n    }\n\n    get toolbarConfig() {\n      return {\n        dataSource: this._prepareToolbarItems(),\n        disabled: this.isInteractionDisabled,\n        menuContainer: this._$toolbarContainer,\n        multiline: this.isMultilineMode()\n      };\n    }\n\n    get isInteractionDisabled() {\n      return this.editorInstance.option(\"readOnly\") || this.editorInstance.option(\"disabled\");\n    }\n\n    isMultilineMode() {\n      var _this$options$multili;\n\n      return null !== (_this$options$multili = this.options.multiline) && void 0 !== _this$options$multili ? _this$options$multili : true;\n    }\n\n    clean() {\n      this._toolbarWidgets.clear();\n\n      if (this._$toolbarContainer) {\n        this._$toolbarContainer.empty().removeClass(TOOLBAR_WRAPPER_CLASS);\n      }\n    }\n\n    repaint() {\n      this.toolbarInstance && this.toolbarInstance.repaint();\n    }\n\n    _getContainer() {\n      var $container = $(\"<div>\");\n      this.editorInstance.$element().prepend($container);\n      return $container;\n    }\n\n    _detectRenamedOptions(item) {\n      if (isObject(item)) {\n        each([{\n          newName: \"name\",\n          oldName: \"formatName\"\n        }, {\n          newName: \"acceptedValues\",\n          oldName: \"formatValues\"\n        }], (index, optionName) => {\n          if (Object.prototype.hasOwnProperty.call(item, optionName.oldName)) {\n            errors.log(\"W1016\", optionName.oldName, optionName.newName);\n          }\n        });\n      }\n    }\n\n    _subscribeFormatHotKeys() {\n      this.quill.keyboard.addBinding({\n        which: KEY_CODES.b,\n        shortKey: true\n      }, this._handleFormatHotKey.bind(this));\n      this.quill.keyboard.addBinding({\n        which: KEY_CODES.i,\n        shortKey: true\n      }, this._handleFormatHotKey.bind(this));\n      this.quill.keyboard.addBinding({\n        which: KEY_CODES.u,\n        shortKey: true\n      }, this._handleFormatHotKey.bind(this));\n    }\n\n    _handleFormatHotKey(range, context, _ref2) {\n      var {\n        which: which\n      } = _ref2;\n      var formatName = FORMAT_HOTKEYS[which];\n\n      this._updateButtonState(formatName);\n    }\n\n    _updateButtonState(formatName) {\n      var formatWidget = this._toolbarWidgets.getByName(formatName);\n\n      var currentFormat = this.quill.getFormat();\n      var formatValue = currentFormat[formatName];\n\n      if (formatValue) {\n        this._markActiveFormatWidget(formatName, formatWidget, currentFormat);\n      } else {\n        this._resetFormatWidget(formatName, formatWidget);\n      }\n    }\n\n    _prepareToolbarItems() {\n      var resultItems = [];\n      each(this.options.items, (index, item) => {\n        var newItem;\n\n        this._detectRenamedOptions(item);\n\n        if (isObject(item)) {\n          newItem = this._handleObjectItem(item);\n        } else if (isString(item)) {\n          var buttonItemConfig = this._prepareButtonItemConfig(item);\n\n          newItem = this._getToolbarItem(buttonItemConfig);\n        }\n\n        if (newItem) {\n          resultItems.push(newItem);\n        }\n      });\n      return resultItems;\n    }\n\n    _handleObjectItem(item) {\n      if (item.name && item.acceptedValues && this._isAcceptableItem(item.widget, \"dxSelectBox\")) {\n        var selectItemConfig = this._prepareSelectItemConfig(item);\n\n        return this._getToolbarItem(selectItemConfig);\n      } else if (item.name && this._isAcceptableItem(item.widget, \"dxButton\")) {\n        var defaultButtonItemConfig = this._prepareButtonItemConfig(item.name);\n\n        var buttonItemConfig = extend(true, defaultButtonItemConfig, item);\n        return this._getToolbarItem(buttonItemConfig);\n      } else {\n        return this._getToolbarItem(item);\n      }\n    }\n\n    _isAcceptableItem(widget, acceptableWidgetName) {\n      return !widget || widget === acceptableWidgetName;\n    }\n\n    _prepareButtonItemConfig(name) {\n      var _ICON_MAP$name;\n\n      var iconName = null !== (_ICON_MAP$name = ICON_MAP[name]) && void 0 !== _ICON_MAP$name ? _ICON_MAP$name : name;\n      var buttonText = titleize(name);\n      return {\n        widget: \"dxButton\",\n        name: name,\n        options: {\n          hint: localize(buttonText),\n          text: localize(buttonText),\n          icon: iconName.toLowerCase(),\n          onClick: this._formatHandlers[name] || getDefaultClickHandler(this, name),\n          stylingMode: \"text\"\n        },\n        showText: \"inMenu\"\n      };\n    }\n\n    _prepareSelectItemConfig(item) {\n      var {\n        name: name,\n        acceptedValues: acceptedValues\n      } = item;\n      return extend(true, {\n        widget: \"dxSelectBox\",\n        name: name,\n        options: {\n          stylingMode: \"filled\",\n          dataSource: acceptedValues,\n          displayExpr: value => localizeValue(value, name),\n          placeholder: localize(name),\n          onValueChanged: e => {\n            if (!this._isReset) {\n              this._hideAdaptiveMenu();\n\n              applyFormat(this, [name, e.value, USER_ACTION], e.event);\n\n              this._setValueSilent(e.component, e.value);\n            }\n          }\n        }\n      }, item);\n    }\n\n    _hideAdaptiveMenu() {\n      if (this.toolbarInstance.option(\"overflowMenuVisible\")) {\n        this.toolbarInstance.option(\"overflowMenuVisible\", false);\n      }\n    }\n\n    _getToolbarItem(item) {\n      var baseItem = {\n        options: {\n          onInitialized: e => {\n            if (item.name) {\n              e.component.$element().addClass(TOOLBAR_FORMAT_WIDGET_CLASS);\n              e.component.$element().toggleClass(\"dx-\".concat(item.name.toLowerCase(), \"-format\"), !!item.name);\n\n              this._toolbarWidgets.add(item.name, e.component);\n            }\n          },\n          onDisposing: () => {\n            this._toolbarWidgets.remove(item.name);\n          }\n        }\n      };\n      return extend(true, {\n        location: \"before\",\n        locateInMenu: \"auto\"\n      }, this._getDefaultConfig(item.name), item, baseItem);\n    }\n\n    _getDefaultItemsConfig() {\n      return {\n        clear: {\n          options: {\n            disabled: true\n          }\n        },\n        undo: {\n          options: {\n            disabled: true\n          }\n        },\n        redo: {\n          options: {\n            disabled: true\n          }\n        },\n        insertRowAbove: {\n          options: {\n            disabled: true\n          }\n        },\n        insertRowBelow: {\n          options: {\n            disabled: true\n          }\n        },\n        insertHeaderRow: {\n          options: {\n            disabled: true\n          }\n        },\n        insertColumnLeft: {\n          options: {\n            disabled: true\n          }\n        },\n        insertColumnRight: {\n          options: {\n            disabled: true\n          }\n        },\n        deleteRow: {\n          options: {\n            disabled: true\n          }\n        },\n        deleteColumn: {\n          options: {\n            disabled: true\n          }\n        },\n        deleteTable: {\n          options: {\n            disabled: true\n          }\n        },\n        cellProperties: {\n          options: {\n            disabled: true\n          }\n        },\n        tableProperties: {\n          options: {\n            disabled: true\n          }\n        },\n        separator: {\n          template: (data, index, element) => {\n            $(element).addClass(TOOLBAR_SEPARATOR_CLASS);\n          },\n          menuItemTemplate: (data, index, element) => {\n            $(element).addClass(TOOLBAR_MENU_SEPARATOR_CLASS);\n          }\n        }\n      };\n    }\n\n    _getDefaultConfig(name) {\n      return this._getDefaultItemsConfig()[name];\n    }\n\n    updateHistoryWidgets() {\n      var historyModule = this.quill.history;\n\n      if (!historyModule) {\n        return;\n      }\n\n      var {\n        undo: undoOps,\n        redo: redoOps\n      } = historyModule.stack;\n\n      this._updateManipulationWidget(this._toolbarWidgets.getByName(\"undo\"), Boolean(undoOps.length));\n\n      this._updateManipulationWidget(this._toolbarWidgets.getByName(\"redo\"), Boolean(redoOps.length));\n    }\n\n    updateTableWidgets() {\n      var table = this.quill.getModule(\"table\");\n\n      if (!table) {\n        return;\n      }\n\n      var selection = this.quill.getSelection();\n      var formats = selection && this.quill.getFormat(selection) || {};\n\n      var isTableOperationsEnabled = this._tableFormats.some(format => Boolean(formats[format]));\n\n      TABLE_OPERATIONS.forEach(operationName => {\n        var isInsertTable = \"insertTable\" === operationName;\n\n        var widget = this._toolbarWidgets.getByName(operationName);\n\n        this._updateManipulationWidget(widget, isInsertTable ? !isTableOperationsEnabled : isTableOperationsEnabled);\n      });\n    }\n\n    _updateManipulationWidget(widget, isOperationEnabled) {\n      if (!widget) {\n        return;\n      }\n\n      widget.option(\"disabled\", !isOperationEnabled);\n    }\n\n    updateFormatWidgets(isResetRequired) {\n      var selection = this.quill.getSelection();\n\n      if (!selection) {\n        return;\n      }\n\n      var formats = this.quill.getFormat(selection);\n      var hasFormats = !isEmptyObject(formats);\n\n      if (!hasFormats || isResetRequired) {\n        this._resetFormatWidgets();\n      }\n\n      for (var formatName in formats) {\n        var widgetName = this._getFormatWidgetName(formatName, formats);\n\n        var formatWidget = this._toolbarWidgets.getByName(widgetName) || this._toolbarWidgets.getByName(formatName);\n\n        if (!formatWidget) {\n          continue;\n        }\n\n        this._markActiveFormatWidget(formatName, formatWidget, formats);\n      }\n\n      this._toggleClearFormatting(hasFormats || selection.length > 1);\n    }\n\n    _markActiveFormatWidget(name, widget, formats) {\n      if (this._isColorFormat(name)) {\n        this._updateColorWidget(name, formats[name]);\n      }\n\n      if (\"value\" in widget.option()) {\n        this._setValueSilent(widget, formats[name]);\n      } else {\n        widget.$element().addClass(ACTIVE_FORMAT_CLASS);\n      }\n    }\n\n    _toggleClearFormatting(hasFormats) {\n      var clearWidget = this._toolbarWidgets.getByName(\"clear\");\n\n      if (clearWidget) {\n        clearWidget.option(\"disabled\", !hasFormats);\n      }\n    }\n\n    _isColorFormat(name) {\n      return \"color\" === name || \"background\" === name;\n    }\n\n    _updateColorWidget(name, color) {\n      var formatWidget = this._toolbarWidgets.getByName(name);\n\n      if (!formatWidget) {\n        return;\n      }\n\n      formatWidget.$element().find(\".\".concat(ICON_CLASS)).css(\"borderBottomColor\", color || \"transparent\");\n    }\n\n    _getFormatWidgetName(name, formats) {\n      var widgetName;\n\n      switch (name) {\n        case \"align\":\n          widgetName = name + titleize(formats[name]);\n          break;\n\n        case \"list\":\n          widgetName = formats[name] + titleize(name);\n          break;\n\n        case \"code-block\":\n          widgetName = \"codeBlock\";\n          break;\n\n        case \"script\":\n          widgetName = formats[name] + name;\n          break;\n\n        case \"imageSrc\":\n          widgetName = \"image\";\n          break;\n\n        default:\n          widgetName = name;\n      }\n\n      return widgetName;\n    }\n\n    _setValueSilent(widget, value) {\n      this._isReset = true;\n      widget.option(\"value\", value);\n      this._isReset = false;\n    }\n\n    _resetFormatWidgets() {\n      this._toolbarWidgets.each((name, widget) => {\n        this._resetFormatWidget(name, widget);\n      });\n    }\n\n    _resetFormatWidget(name, widget) {\n      widget.$element().removeClass(ACTIVE_FORMAT_CLASS);\n\n      if (this._isColorFormat(name)) {\n        this._updateColorWidget(name);\n      }\n\n      if (\"clear\" === name) {\n        widget.option(\"disabled\", true);\n      }\n\n      if (\"dxSelectBox\" === widget.NAME) {\n        this._setValueSilent(widget, null);\n      }\n    }\n\n    addClickHandler(name, handler) {\n      this._formatHandlers[name] = handler;\n\n      var formatWidget = this._toolbarWidgets.getByName(name);\n\n      if (formatWidget && \"dxButton\" === formatWidget.NAME) {\n        formatWidget.option(\"onClick\", handler);\n      }\n    }\n\n  };\n}\n\nexport default ToolbarModule;","map":{"version":3,"names":["Quill","$","BaseModule","Toolbar","errors","WidgetCollector","each","isString","isObject","isDefined","isEmptyObject","extend","localizationMessage","titleize","camelize","eventsEngine","addNamespace","getTableFormats","TABLE_OPERATIONS","getFormatHandlers","getDefaultClickHandler","ICON_MAP","applyFormat","ToolbarModule","TOOLBAR_WRAPPER_CLASS","TOOLBAR_CLASS","TOOLBAR_FORMAT_WIDGET_CLASS","TOOLBAR_SEPARATOR_CLASS","TOOLBAR_MENU_SEPARATOR_CLASS","ACTIVE_FORMAT_CLASS","ICON_CLASS","SELECTION_CHANGE_EVENT","USER_ACTION","SILENT_ACTION","FORMAT_HOTKEYS","KEY_CODES","b","i","u","localize","name","format","concat","localizeValue","value","isHeaderValue","constructor","quill","options","_this","_toolbarWidgets","_formatHandlers","_tableFormats","items","_addCallbacks","_renderToolbar","toolbarMenu","toolbarInstance","_layoutStrategy","_menu","_renderPopup","_len","arguments","length","args","Array","_key","apply","_popup","on","_updateToolbar","eventName","newValue","oldValue","eventSource","isSilentMode","getFormat","isSelectionChanged","addCleanCallback","clean","bind","editorInstance","addContentInitializedCallback","updateHistoryWidgets","updateFormatWidgets","updateTableWidgets","_updateFormatWidget","isApplied","formats","widget","getByName","_markActiveFormatWidget","_resetFormatWidget","Object","prototype","hasOwnProperty","call","_toggleClearFormatting","container","_getContainer","_$toolbar","addClass","appendTo","_$toolbarContainer","NAME","e","preventDefault","_subscribeFormatHotKeys","_createComponent","toolbarConfig","_ref","option","isInteractionDisabled","dataSource","_prepareToolbarItems","disabled","menuContainer","multiline","isMultilineMode","_this$options$multili","clear","empty","removeClass","repaint","$container","$element","prepend","_detectRenamedOptions","item","newName","oldName","index","optionName","log","keyboard","addBinding","which","shortKey","_handleFormatHotKey","range","context","_ref2","formatName","_updateButtonState","formatWidget","currentFormat","formatValue","resultItems","newItem","_handleObjectItem","buttonItemConfig","_prepareButtonItemConfig","_getToolbarItem","push","acceptedValues","_isAcceptableItem","selectItemConfig","_prepareSelectItemConfig","defaultButtonItemConfig","acceptableWidgetName","_ICON_MAP$name","iconName","buttonText","hint","text","icon","toLowerCase","onClick","stylingMode","showText","displayExpr","placeholder","onValueChanged","_isReset","_hideAdaptiveMenu","event","_setValueSilent","component","baseItem","onInitialized","toggleClass","add","onDisposing","remove","location","locateInMenu","_getDefaultConfig","_getDefaultItemsConfig","undo","redo","insertRowAbove","insertRowBelow","insertHeaderRow","insertColumnLeft","insertColumnRight","deleteRow","deleteColumn","deleteTable","cellProperties","tableProperties","separator","template","data","element","menuItemTemplate","historyModule","history","undoOps","redoOps","stack","_updateManipulationWidget","Boolean","table","getModule","selection","getSelection","isTableOperationsEnabled","some","forEach","operationName","isInsertTable","isOperationEnabled","isResetRequired","hasFormats","_resetFormatWidgets","widgetName","_getFormatWidgetName","_isColorFormat","_updateColorWidget","clearWidget","color","find","css","addClickHandler","handler"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/devextreme/esm/ui/html_editor/modules/toolbar.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/html_editor/modules/toolbar.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport Quill from \"devextreme-quill\";\r\nimport $ from \"../../../core/renderer\";\r\nimport BaseModule from \"./base\";\r\nimport Toolbar from \"../../toolbar\";\r\nimport \"../../select_box\";\r\nimport \"../../color_box/color_view\";\r\nimport \"../../number_box\";\r\nimport errors from \"../../widget/ui.errors\";\r\nimport WidgetCollector from \"./widget_collector\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    isString,\r\n    isObject,\r\n    isDefined,\r\n    isEmptyObject\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport localizationMessage from \"../../../localization/message\";\r\nimport {\r\n    titleize,\r\n    camelize\r\n} from \"../../../core/utils/inflector\";\r\nimport eventsEngine from \"../../../events/core/events_engine\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../events/utils/index\";\r\nimport {\r\n    getTableFormats,\r\n    TABLE_OPERATIONS\r\n} from \"../utils/table_helper\";\r\nimport {\r\n    getFormatHandlers,\r\n    getDefaultClickHandler,\r\n    ICON_MAP,\r\n    applyFormat\r\n} from \"../utils/toolbar_helper\";\r\nvar ToolbarModule = BaseModule;\r\nif (Quill) {\r\n    var TOOLBAR_WRAPPER_CLASS = \"dx-htmleditor-toolbar-wrapper\";\r\n    var TOOLBAR_CLASS = \"dx-htmleditor-toolbar\";\r\n    var TOOLBAR_FORMAT_WIDGET_CLASS = \"dx-htmleditor-toolbar-format\";\r\n    var TOOLBAR_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-separator\";\r\n    var TOOLBAR_MENU_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-menu-separator\";\r\n    var ACTIVE_FORMAT_CLASS = \"dx-format-active\";\r\n    var ICON_CLASS = \"dx-icon\";\r\n    var SELECTION_CHANGE_EVENT = \"selection-change\";\r\n    var USER_ACTION = \"user\";\r\n    var SILENT_ACTION = \"silent\";\r\n    var FORMAT_HOTKEYS = {\r\n        66: \"bold\",\r\n        73: \"italic\",\r\n        85: \"underline\"\r\n    };\r\n    var KEY_CODES = {\r\n        b: 66,\r\n        i: 73,\r\n        u: 85\r\n    };\r\n    var localize = name => localizationMessage.format(\"dxHtmlEditor-\".concat(camelize(name)));\r\n    var localizeValue = (value, name) => {\r\n        if (\"header\" === name) {\r\n            var isHeaderValue = isDefined(value) && false !== value;\r\n            return isHeaderValue ? \"\".concat(localize(\"heading\"), \" \").concat(value) : localize(\"normalText\")\r\n        }\r\n        return localize(value) || value\r\n    };\r\n    ToolbarModule = class extends BaseModule {\r\n        constructor(quill, options) {\r\n            var _this;\r\n            super(quill, options);\r\n            _this = this;\r\n            this._toolbarWidgets = new WidgetCollector;\r\n            this._formatHandlers = getFormatHandlers(this);\r\n            this._tableFormats = getTableFormats(quill);\r\n            if (isDefined(options.items)) {\r\n                this._addCallbacks();\r\n                this._renderToolbar();\r\n                var toolbarMenu = this.toolbarInstance._layoutStrategy._menu;\r\n                if (toolbarMenu) {\r\n                    var _renderPopup = toolbarMenu._renderPopup;\r\n                    toolbarMenu._renderPopup = function() {\r\n                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n                            args[_key] = arguments[_key]\r\n                        }\r\n                        _renderPopup.apply(toolbarMenu, ...args);\r\n                        toolbarMenu._popup.on(\"showing\", () => {\r\n                            _this._updateToolbar(true)\r\n                        })\r\n                    }\r\n                }\r\n                this.quill.on(\"editor-change\", (eventName, newValue, oldValue, eventSource) => {\r\n                    var isSilentMode = eventSource === SILENT_ACTION && isEmptyObject(this.quill.getFormat());\r\n                    if (!isSilentMode) {\r\n                        var isSelectionChanged = eventName === SELECTION_CHANGE_EVENT;\r\n                        this._updateToolbar(isSelectionChanged)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        _addCallbacks() {\r\n            this.addCleanCallback(this.clean.bind(this));\r\n            this.editorInstance.addContentInitializedCallback(this.updateHistoryWidgets.bind(this))\r\n        }\r\n        _updateToolbar(isSelectionChanged) {\r\n            this.updateFormatWidgets(isSelectionChanged);\r\n            this.updateHistoryWidgets();\r\n            this.updateTableWidgets()\r\n        }\r\n        _updateFormatWidget(name, isApplied, formats) {\r\n            var widget = this._toolbarWidgets.getByName(name);\r\n            if (!widget) {\r\n                return\r\n            }\r\n            if (isApplied) {\r\n                this._markActiveFormatWidget(name, widget, formats)\r\n            } else {\r\n                this._resetFormatWidget(name, widget);\r\n                if (Object.prototype.hasOwnProperty.call(name)) {\r\n                    delete formats[name]\r\n                }\r\n            }\r\n            this._toggleClearFormatting(isApplied || !isEmptyObject(formats))\r\n        }\r\n        _renderToolbar() {\r\n            var container = this.options.container || this._getContainer();\r\n            this._$toolbar = $(\"<div>\").addClass(TOOLBAR_CLASS).appendTo(container);\r\n            this._$toolbarContainer = $(container).addClass(TOOLBAR_WRAPPER_CLASS);\r\n            eventsEngine.on(this._$toolbarContainer, addNamespace(\"mousedown\", this.editorInstance.NAME), e => {\r\n                e.preventDefault()\r\n            });\r\n            this._subscribeFormatHotKeys();\r\n            this.toolbarInstance = this.editorInstance._createComponent(this._$toolbar, Toolbar, this.toolbarConfig);\r\n            this.editorInstance.on(\"optionChanged\", _ref => {\r\n                var {\r\n                    name: name\r\n                } = _ref;\r\n                if (\"readOnly\" === name || \"disabled\" === name) {\r\n                    this.toolbarInstance.option(\"disabled\", this.isInteractionDisabled)\r\n                }\r\n            })\r\n        }\r\n        get toolbarConfig() {\r\n            return {\r\n                dataSource: this._prepareToolbarItems(),\r\n                disabled: this.isInteractionDisabled,\r\n                menuContainer: this._$toolbarContainer,\r\n                multiline: this.isMultilineMode()\r\n            }\r\n        }\r\n        get isInteractionDisabled() {\r\n            return this.editorInstance.option(\"readOnly\") || this.editorInstance.option(\"disabled\")\r\n        }\r\n        isMultilineMode() {\r\n            var _this$options$multili;\r\n            return null !== (_this$options$multili = this.options.multiline) && void 0 !== _this$options$multili ? _this$options$multili : true\r\n        }\r\n        clean() {\r\n            this._toolbarWidgets.clear();\r\n            if (this._$toolbarContainer) {\r\n                this._$toolbarContainer.empty().removeClass(TOOLBAR_WRAPPER_CLASS)\r\n            }\r\n        }\r\n        repaint() {\r\n            this.toolbarInstance && this.toolbarInstance.repaint()\r\n        }\r\n        _getContainer() {\r\n            var $container = $(\"<div>\");\r\n            this.editorInstance.$element().prepend($container);\r\n            return $container\r\n        }\r\n        _detectRenamedOptions(item) {\r\n            if (isObject(item)) {\r\n                each([{\r\n                    newName: \"name\",\r\n                    oldName: \"formatName\"\r\n                }, {\r\n                    newName: \"acceptedValues\",\r\n                    oldName: \"formatValues\"\r\n                }], (index, optionName) => {\r\n                    if (Object.prototype.hasOwnProperty.call(item, optionName.oldName)) {\r\n                        errors.log(\"W1016\", optionName.oldName, optionName.newName)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        _subscribeFormatHotKeys() {\r\n            this.quill.keyboard.addBinding({\r\n                which: KEY_CODES.b,\r\n                shortKey: true\r\n            }, this._handleFormatHotKey.bind(this));\r\n            this.quill.keyboard.addBinding({\r\n                which: KEY_CODES.i,\r\n                shortKey: true\r\n            }, this._handleFormatHotKey.bind(this));\r\n            this.quill.keyboard.addBinding({\r\n                which: KEY_CODES.u,\r\n                shortKey: true\r\n            }, this._handleFormatHotKey.bind(this))\r\n        }\r\n        _handleFormatHotKey(range, context, _ref2) {\r\n            var {\r\n                which: which\r\n            } = _ref2;\r\n            var formatName = FORMAT_HOTKEYS[which];\r\n            this._updateButtonState(formatName)\r\n        }\r\n        _updateButtonState(formatName) {\r\n            var formatWidget = this._toolbarWidgets.getByName(formatName);\r\n            var currentFormat = this.quill.getFormat();\r\n            var formatValue = currentFormat[formatName];\r\n            if (formatValue) {\r\n                this._markActiveFormatWidget(formatName, formatWidget, currentFormat)\r\n            } else {\r\n                this._resetFormatWidget(formatName, formatWidget)\r\n            }\r\n        }\r\n        _prepareToolbarItems() {\r\n            var resultItems = [];\r\n            each(this.options.items, (index, item) => {\r\n                var newItem;\r\n                this._detectRenamedOptions(item);\r\n                if (isObject(item)) {\r\n                    newItem = this._handleObjectItem(item)\r\n                } else if (isString(item)) {\r\n                    var buttonItemConfig = this._prepareButtonItemConfig(item);\r\n                    newItem = this._getToolbarItem(buttonItemConfig)\r\n                }\r\n                if (newItem) {\r\n                    resultItems.push(newItem)\r\n                }\r\n            });\r\n            return resultItems\r\n        }\r\n        _handleObjectItem(item) {\r\n            if (item.name && item.acceptedValues && this._isAcceptableItem(item.widget, \"dxSelectBox\")) {\r\n                var selectItemConfig = this._prepareSelectItemConfig(item);\r\n                return this._getToolbarItem(selectItemConfig)\r\n            } else if (item.name && this._isAcceptableItem(item.widget, \"dxButton\")) {\r\n                var defaultButtonItemConfig = this._prepareButtonItemConfig(item.name);\r\n                var buttonItemConfig = extend(true, defaultButtonItemConfig, item);\r\n                return this._getToolbarItem(buttonItemConfig)\r\n            } else {\r\n                return this._getToolbarItem(item)\r\n            }\r\n        }\r\n        _isAcceptableItem(widget, acceptableWidgetName) {\r\n            return !widget || widget === acceptableWidgetName\r\n        }\r\n        _prepareButtonItemConfig(name) {\r\n            var _ICON_MAP$name;\r\n            var iconName = null !== (_ICON_MAP$name = ICON_MAP[name]) && void 0 !== _ICON_MAP$name ? _ICON_MAP$name : name;\r\n            var buttonText = titleize(name);\r\n            return {\r\n                widget: \"dxButton\",\r\n                name: name,\r\n                options: {\r\n                    hint: localize(buttonText),\r\n                    text: localize(buttonText),\r\n                    icon: iconName.toLowerCase(),\r\n                    onClick: this._formatHandlers[name] || getDefaultClickHandler(this, name),\r\n                    stylingMode: \"text\"\r\n                },\r\n                showText: \"inMenu\"\r\n            }\r\n        }\r\n        _prepareSelectItemConfig(item) {\r\n            var {\r\n                name: name,\r\n                acceptedValues: acceptedValues\r\n            } = item;\r\n            return extend(true, {\r\n                widget: \"dxSelectBox\",\r\n                name: name,\r\n                options: {\r\n                    stylingMode: \"filled\",\r\n                    dataSource: acceptedValues,\r\n                    displayExpr: value => localizeValue(value, name),\r\n                    placeholder: localize(name),\r\n                    onValueChanged: e => {\r\n                        if (!this._isReset) {\r\n                            this._hideAdaptiveMenu();\r\n                            applyFormat(this, [name, e.value, USER_ACTION], e.event);\r\n                            this._setValueSilent(e.component, e.value)\r\n                        }\r\n                    }\r\n                }\r\n            }, item)\r\n        }\r\n        _hideAdaptiveMenu() {\r\n            if (this.toolbarInstance.option(\"overflowMenuVisible\")) {\r\n                this.toolbarInstance.option(\"overflowMenuVisible\", false)\r\n            }\r\n        }\r\n        _getToolbarItem(item) {\r\n            var baseItem = {\r\n                options: {\r\n                    onInitialized: e => {\r\n                        if (item.name) {\r\n                            e.component.$element().addClass(TOOLBAR_FORMAT_WIDGET_CLASS);\r\n                            e.component.$element().toggleClass(\"dx-\".concat(item.name.toLowerCase(), \"-format\"), !!item.name);\r\n                            this._toolbarWidgets.add(item.name, e.component)\r\n                        }\r\n                    },\r\n                    onDisposing: () => {\r\n                        this._toolbarWidgets.remove(item.name)\r\n                    }\r\n                }\r\n            };\r\n            return extend(true, {\r\n                location: \"before\",\r\n                locateInMenu: \"auto\"\r\n            }, this._getDefaultConfig(item.name), item, baseItem)\r\n        }\r\n        _getDefaultItemsConfig() {\r\n            return {\r\n                clear: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                undo: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                redo: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertRowAbove: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertRowBelow: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertHeaderRow: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertColumnLeft: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertColumnRight: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                deleteRow: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                deleteColumn: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                deleteTable: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                cellProperties: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                tableProperties: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                separator: {\r\n                    template: (data, index, element) => {\r\n                        $(element).addClass(TOOLBAR_SEPARATOR_CLASS)\r\n                    },\r\n                    menuItemTemplate: (data, index, element) => {\r\n                        $(element).addClass(TOOLBAR_MENU_SEPARATOR_CLASS)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _getDefaultConfig(name) {\r\n            return this._getDefaultItemsConfig()[name]\r\n        }\r\n        updateHistoryWidgets() {\r\n            var historyModule = this.quill.history;\r\n            if (!historyModule) {\r\n                return\r\n            }\r\n            var {\r\n                undo: undoOps,\r\n                redo: redoOps\r\n            } = historyModule.stack;\r\n            this._updateManipulationWidget(this._toolbarWidgets.getByName(\"undo\"), Boolean(undoOps.length));\r\n            this._updateManipulationWidget(this._toolbarWidgets.getByName(\"redo\"), Boolean(redoOps.length))\r\n        }\r\n        updateTableWidgets() {\r\n            var table = this.quill.getModule(\"table\");\r\n            if (!table) {\r\n                return\r\n            }\r\n            var selection = this.quill.getSelection();\r\n            var formats = selection && this.quill.getFormat(selection) || {};\r\n            var isTableOperationsEnabled = this._tableFormats.some(format => Boolean(formats[format]));\r\n            TABLE_OPERATIONS.forEach(operationName => {\r\n                var isInsertTable = \"insertTable\" === operationName;\r\n                var widget = this._toolbarWidgets.getByName(operationName);\r\n                this._updateManipulationWidget(widget, isInsertTable ? !isTableOperationsEnabled : isTableOperationsEnabled)\r\n            })\r\n        }\r\n        _updateManipulationWidget(widget, isOperationEnabled) {\r\n            if (!widget) {\r\n                return\r\n            }\r\n            widget.option(\"disabled\", !isOperationEnabled)\r\n        }\r\n        updateFormatWidgets(isResetRequired) {\r\n            var selection = this.quill.getSelection();\r\n            if (!selection) {\r\n                return\r\n            }\r\n            var formats = this.quill.getFormat(selection);\r\n            var hasFormats = !isEmptyObject(formats);\r\n            if (!hasFormats || isResetRequired) {\r\n                this._resetFormatWidgets()\r\n            }\r\n            for (var formatName in formats) {\r\n                var widgetName = this._getFormatWidgetName(formatName, formats);\r\n                var formatWidget = this._toolbarWidgets.getByName(widgetName) || this._toolbarWidgets.getByName(formatName);\r\n                if (!formatWidget) {\r\n                    continue\r\n                }\r\n                this._markActiveFormatWidget(formatName, formatWidget, formats)\r\n            }\r\n            this._toggleClearFormatting(hasFormats || selection.length > 1)\r\n        }\r\n        _markActiveFormatWidget(name, widget, formats) {\r\n            if (this._isColorFormat(name)) {\r\n                this._updateColorWidget(name, formats[name])\r\n            }\r\n            if (\"value\" in widget.option()) {\r\n                this._setValueSilent(widget, formats[name])\r\n            } else {\r\n                widget.$element().addClass(ACTIVE_FORMAT_CLASS)\r\n            }\r\n        }\r\n        _toggleClearFormatting(hasFormats) {\r\n            var clearWidget = this._toolbarWidgets.getByName(\"clear\");\r\n            if (clearWidget) {\r\n                clearWidget.option(\"disabled\", !hasFormats)\r\n            }\r\n        }\r\n        _isColorFormat(name) {\r\n            return \"color\" === name || \"background\" === name\r\n        }\r\n        _updateColorWidget(name, color) {\r\n            var formatWidget = this._toolbarWidgets.getByName(name);\r\n            if (!formatWidget) {\r\n                return\r\n            }\r\n            formatWidget.$element().find(\".\".concat(ICON_CLASS)).css(\"borderBottomColor\", color || \"transparent\")\r\n        }\r\n        _getFormatWidgetName(name, formats) {\r\n            var widgetName;\r\n            switch (name) {\r\n                case \"align\":\r\n                    widgetName = name + titleize(formats[name]);\r\n                    break;\r\n                case \"list\":\r\n                    widgetName = formats[name] + titleize(name);\r\n                    break;\r\n                case \"code-block\":\r\n                    widgetName = \"codeBlock\";\r\n                    break;\r\n                case \"script\":\r\n                    widgetName = formats[name] + name;\r\n                    break;\r\n                case \"imageSrc\":\r\n                    widgetName = \"image\";\r\n                    break;\r\n                default:\r\n                    widgetName = name\r\n            }\r\n            return widgetName\r\n        }\r\n        _setValueSilent(widget, value) {\r\n            this._isReset = true;\r\n            widget.option(\"value\", value);\r\n            this._isReset = false\r\n        }\r\n        _resetFormatWidgets() {\r\n            this._toolbarWidgets.each((name, widget) => {\r\n                this._resetFormatWidget(name, widget)\r\n            })\r\n        }\r\n        _resetFormatWidget(name, widget) {\r\n            widget.$element().removeClass(ACTIVE_FORMAT_CLASS);\r\n            if (this._isColorFormat(name)) {\r\n                this._updateColorWidget(name)\r\n            }\r\n            if (\"clear\" === name) {\r\n                widget.option(\"disabled\", true)\r\n            }\r\n            if (\"dxSelectBox\" === widget.NAME) {\r\n                this._setValueSilent(widget, null)\r\n            }\r\n        }\r\n        addClickHandler(name, handler) {\r\n            this._formatHandlers[name] = handler;\r\n            var formatWidget = this._toolbarWidgets.getByName(name);\r\n            if (formatWidget && \"dxButton\" === formatWidget.NAME) {\r\n                formatWidget.option(\"onClick\", handler)\r\n            }\r\n        }\r\n    }\r\n}\r\nexport default ToolbarModule;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}