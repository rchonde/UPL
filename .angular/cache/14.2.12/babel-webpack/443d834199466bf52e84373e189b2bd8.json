{"ast":null,"code":"import { SecurityContext, ɵɵdefineInjectable, ɵɵinject, ErrorHandler, Injectable, Optional, Inject, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\nconst _c0 = [\"*\"];\n\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\n\n\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\n\n\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` + `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\n\n\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` + `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\n\n\nclass SvgIconConfig {\n  constructor(url, svgText, options) {\n    this.url = url;\n    this.svgText = svgText;\n    this.options = options;\n  }\n\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n\n\nclass MatIconRegistry {\n  constructor(_httpClient, _sanitizer, document, _errorHandler) {\n    this._httpClient = _httpClient;\n    this._sanitizer = _sanitizer;\n    this._errorHandler = _errorHandler;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     */\n\n    this._svgIconConfigs = new Map();\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     */\n\n    this._iconSetConfigs = new Map();\n    /** Cache for icons loaded by direct URLs. */\n\n    this._cachedIconsByUrl = new Map();\n    /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n\n    this._inProgressUrlFetches = new Map();\n    /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n\n    this._fontCssClassesByAlias = new Map();\n    /** Registered icon resolver functions. */\n\n    this._resolvers = [];\n    /**\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     */\n\n    this._defaultFontSetClass = 'material-icons';\n    this._document = document;\n  }\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n\n\n  addSvgIcon(iconName, url, options) {\n    return this.addSvgIconInNamespace('', iconName, url, options);\n  }\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n\n\n  addSvgIconLiteral(iconName, literal, options) {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n\n\n  addSvgIconInNamespace(namespace, iconName, url, options) {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n  }\n  /**\n   * Registers an icon resolver function with the registry. The function will be invoked with the\n   * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n   * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n   * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n   * will be invoked in the order in which they have been registered.\n   * @param resolver Resolver function to be registered.\n   */\n\n\n  addSvgIconResolver(resolver) {\n    this._resolvers.push(resolver);\n\n    return this;\n  }\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n\n\n  addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n    const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal); // TODO: add an ngDevMode check\n\n\n    if (!cleanLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', cleanLiteral, options));\n  }\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n\n\n  addSvgIconSet(url, options) {\n    return this.addSvgIconSetInNamespace('', url, options);\n  }\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n\n\n  addSvgIconSetLiteral(literal, options) {\n    return this.addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n\n\n  addSvgIconSetInNamespace(namespace, url, options) {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n  }\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n\n\n  addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n    const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!cleanLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n  }\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n\n\n  registerFontClassAlias(alias, className = alias) {\n    this._fontCssClassesByAlias.set(alias, className);\n\n    return this;\n  }\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n\n\n  classNameForFontAlias(alias) {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n\n\n  setDefaultFontSetClass(className) {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n\n\n  getDefaultFontSetClass() {\n    return this._defaultFontSetClass;\n  }\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n\n\n  getSvgIconFromUrl(safeUrl) {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return of(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n  }\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n\n\n  getNamedSvgIcon(name, namespace = '') {\n    const key = iconKey(namespace, name);\n\n    let config = this._svgIconConfigs.get(key); // Return (copy of) cached icon if possible.\n\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    } // Otherwise try to resolve the config from one of the resolver functions.\n\n\n    config = this._getIconConfigFromResolvers(namespace, name);\n\n    if (config) {\n      this._svgIconConfigs.set(key, config);\n\n      return this._getSvgFromConfig(config);\n    } // See if we have any icon sets registered for the namespace.\n\n\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return throwError(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n    this._resolvers = [];\n\n    this._svgIconConfigs.clear();\n\n    this._iconSetConfigs.clear();\n\n    this._cachedIconsByUrl.clear();\n  }\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n\n\n  _getSvgFromConfig(config) {\n    if (config.svgText) {\n      // We already have the SVG element for this icon, return a copy.\n      return of(cloneSvg(this._svgElementFromConfig(config)));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n    }\n  }\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n\n\n  _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return of(namedIcon);\n    } // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n\n\n    const iconSetFetchRequests = iconSetConfigs.filter(iconSetConfig => !iconSetConfig.svgText).map(iconSetConfig => {\n      return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(err => {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url); // Swallow errors fetching individual URLs so the\n        // combined Observable won't necessarily fail.\n\n\n        const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n\n        this._errorHandler.handleError(new Error(errorMessage));\n\n        return of(null);\n      }));\n    }); // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs); // TODO: add an ngDevMode check\n\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n\n\n  _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i]; // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n      // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n      // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n      // some of the parsing.\n\n      if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n        const svg = this._svgElementFromConfig(config);\n\n        const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n\n\n  _loadSvgIconFromConfig(config) {\n    return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText), map(() => this._svgElementFromConfig(config)));\n  }\n  /**\n   * Loads the content of the icon set URL specified in the\n   * SvgIconConfig and attaches it to the config.\n   */\n\n\n  _loadSvgIconSetFromConfig(config) {\n    if (config.svgText) {\n      return of(null);\n    }\n\n    return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText));\n  }\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n\n\n  _extractSvgIconFromSet(iconSet, iconName, options) {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    } // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n\n\n    const iconElement = iconSource.cloneNode(true);\n    iconElement.removeAttribute('id'); // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement, options);\n    } // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n\n\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    } // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n\n\n    const svg = this._svgElementFromString('<svg></svg>'); // Clone the node so we don't remove it from the parent icon set element.\n\n\n    svg.appendChild(iconElement);\n    return this._setSvgAttributes(svg, options);\n  }\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n\n\n  _svgElementFromString(str) {\n    const div = this._document.createElement('DIV');\n\n    div.innerHTML = str;\n    const svg = div.querySelector('svg'); // TODO: add an ngDevMode check\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n\n\n  _toSvgElement(element) {\n    const svg = this._svgElementFromString('<svg></svg>');\n\n    const attributes = element.attributes; // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n\n    for (let i = 0; i < attributes.length; i++) {\n      const {\n        name,\n        value\n      } = attributes[i];\n\n      if (name !== 'id') {\n        svg.setAttribute(name, value);\n      }\n    }\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n\n\n  _setSvgAttributes(svg, options) {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n\n    return svg;\n  }\n  /**\n   * Returns an Observable which produces the string contents of the given icon. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n\n\n  _fetchIcon(iconConfig) {\n    var _a;\n\n    const {\n      url: safeUrl,\n      options\n    } = iconConfig;\n    const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    } // TODO: add an ngDevMode check\n\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl); // TODO: add an ngDevMode check\n\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    } // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n\n\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    const req = this._httpClient.get(url, {\n      responseType: 'text',\n      withCredentials\n    }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n\n    this._inProgressUrlFetches.set(url, req);\n\n    return req;\n  }\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n\n\n  _addSvgIconConfig(namespace, iconName, config) {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n\n    return this;\n  }\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n\n\n  _addSvgIconSetConfig(namespace, config) {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n  /** Parses a config's text into an SVG element. */\n\n\n  _svgElementFromConfig(config) {\n    if (!config.svgElement) {\n      const svg = this._svgElementFromString(config.svgText);\n\n      this._setSvgAttributes(svg, config.options);\n\n      config.svgElement = svg;\n    }\n\n    return config.svgElement;\n  }\n  /** Tries to create an icon config through the registered resolver functions. */\n\n\n  _getIconConfigFromResolvers(namespace, name) {\n    for (let i = 0; i < this._resolvers.length; i++) {\n      const result = this._resolvers[i](name, namespace);\n\n      if (result) {\n        return isSafeUrlWithOptions(result) ? new SvgIconConfig(result.url, null, result.options) : new SvgIconConfig(result, null);\n      }\n    }\n\n    return undefined;\n  }\n\n}\n\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) {\n  return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler));\n};\n\nMatIconRegistry.ɵprov = ɵɵdefineInjectable({\n  factory: function MatIconRegistry_Factory() {\n    return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler));\n  },\n  token: MatIconRegistry,\n  providedIn: \"root\"\n});\n\nMatIconRegistry.ctorParameters = () => [{\n  type: HttpClient,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: DomSanitizer\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: ErrorHandler\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.DomSanitizer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.ErrorHandler\n    }];\n  }, null);\n})();\n/** @docs-private */\n\n\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\n\n\nconst ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MatIconRegistry], [new Optional(), HttpClient], DomSanitizer, ErrorHandler, [new Optional(), DOCUMENT]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/** Clones an SVGElement while preserving type information. */\n\nfunction cloneSvg(svg) {\n  return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\n\n\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\n\nfunction isSafeUrlWithOptions(value) {\n  return !!(value.url && value.options);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n\n/** @docs-private */\n\n\nclass MatIconBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\n\n\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_ICON_LOCATION_FACTORY() {\n  const _document = inject(DOCUMENT);\n\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? _location.pathname + _location.search : ''\n  };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\n\n\nconst funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\n\nconst ɵ0 = attr => `[${attr}]`;\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\n\n\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\n\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n\nclass MatIcon extends _MatIconMixinBase {\n  constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n    super(elementRef);\n    this._iconRegistry = _iconRegistry;\n    this._location = _location;\n    this._errorHandler = _errorHandler;\n    this._inline = false;\n    /** Subscription to the current in-progress SVG icon request. */\n\n    this._currentIconFetch = Subscription.EMPTY; // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n\n\n  get inline() {\n    return this._inline;\n  }\n\n  set inline(inline) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  /** Name of the icon in the SVG icon set. */\n\n\n  get svgIcon() {\n    return this._svgIcon;\n  }\n\n  set svgIcon(value) {\n    if (value !== this._svgIcon) {\n      if (value) {\n        this._updateSvgIcon(value);\n      } else if (this._svgIcon) {\n        this._clearSvgElement();\n      }\n\n      this._svgIcon = value;\n    }\n  }\n  /** Font set that the icon is a part of. */\n\n\n  get fontSet() {\n    return this._fontSet;\n  }\n\n  set fontSet(value) {\n    const newValue = this._cleanupFontValue(value);\n\n    if (newValue !== this._fontSet) {\n      this._fontSet = newValue;\n\n      this._updateFontIconClasses();\n    }\n  }\n  /** Name of an icon within a font set. */\n\n\n  get fontIcon() {\n    return this._fontIcon;\n  }\n\n  set fontIcon(value) {\n    const newValue = this._cleanupFontValue(value);\n\n    if (newValue !== this._fontIcon) {\n      this._fontIcon = newValue;\n\n      this._updateFontIconClasses();\n    }\n  }\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n\n\n  _splitIconName(iconName) {\n    if (!iconName) {\n      return ['', ''];\n    }\n\n    const parts = iconName.split(':');\n\n    switch (parts.length) {\n      case 1:\n        return ['', parts[0]];\n      // Use default namespace.\n\n      case 2:\n        return parts;\n\n      default:\n        throw Error(`Invalid icon name: \"${iconName}\"`);\n      // TODO: add an ngDevMode check\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    this._updateFontIconClasses();\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && cachedElements.size) {\n      const newPath = this._location.getPathname(); // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n\n\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._currentIconFetch.unsubscribe();\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  _usingFontIcon() {\n    return !this.svgIcon;\n  }\n\n  _setSvgElement(svg) {\n    this._clearSvgElement(); // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n\n\n    const styleTags = svg.querySelectorAll('style');\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    } // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n\n\n    const path = this._location.getPathname();\n\n    this._previousPath = path;\n\n    this._cacheChildrenWithExternalReferences(svg);\n\n    this._prependPathToReferences(path);\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  _clearSvgElement() {\n    const layoutElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    } // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n\n\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount]; // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet) : this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n\n\n  _cleanupFontValue(value) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n\n\n  _prependPathToReferences(path) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n\n\n  _cacheChildrenWithExternalReferences(element) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes.push({\n            name: attr,\n            value: match[1]\n          });\n        }\n      });\n    }\n  }\n  /** Sets a new SVG icon with a particular name. */\n\n\n  _updateSvgIcon(rawName) {\n    this._svgNamespace = null;\n    this._svgName = null;\n\n    this._currentIconFetch.unsubscribe();\n\n    if (rawName) {\n      const [namespace, iconName] = this._splitIconName(rawName);\n\n      if (namespace) {\n        this._svgNamespace = namespace;\n      }\n\n      if (iconName) {\n        this._svgName = iconName;\n      }\n\n      this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(svg => this._setSvgElement(svg), err => {\n        const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n\n        this._errorHandler.handleError(new Error(errorMessage));\n      });\n    }\n  }\n\n}\n\nMatIcon.ɵfac = function MatIcon_Factory(t) {\n  return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler));\n};\n\nMatIcon.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatIcon,\n  selectors: [[\"mat-icon\"]],\n  hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"],\n  hostVars: 7,\n  hostBindings: function MatIcon_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet);\n      ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    }\n  },\n  inputs: {\n    color: \"color\",\n    inline: \"inline\",\n    svgIcon: \"svgIcon\",\n    fontSet: \"fontSet\",\n    fontIcon: \"fontIcon\"\n  },\n  exportAs: [\"matIcon\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatIcon_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatIcon.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: MatIconRegistry\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['aria-hidden']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_ICON_LOCATION]\n  }]\n}, {\n  type: ErrorHandler\n}];\n\nMatIcon.propDecorators = {\n  inline: [{\n    type: Input\n  }],\n  svgIcon: [{\n    type: Input\n  }],\n  fontSet: [{\n    type: Input\n  }],\n  fontIcon: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n    type: Component,\n    args: [{\n      template: '<ng-content></ng-content>',\n      selector: 'mat-icon',\n      exportAs: 'matIcon',\n      inputs: ['color'],\n      host: {\n        'role': 'img',\n        'class': 'mat-icon notranslate',\n        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n        '[class.mat-icon-inline]': 'inline',\n        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatIconRegistry\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['aria-hidden']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_ICON_LOCATION]\n      }]\n    }, {\n      type: ɵngcc0.ErrorHandler\n    }];\n  }, {\n    inline: [{\n      type: Input\n    }],\n    svgIcon: [{\n      type: Input\n    }],\n    fontSet: [{\n      type: Input\n    }],\n    fontIcon: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatIconModule {}\n\nMatIconModule.ɵfac = function MatIconModule_Factory(t) {\n  return new (t || MatIconModule)();\n};\n\nMatIconModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatIconModule\n});\nMatIconModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: [MatIcon, MatCommonModule],\n      declarations: [MatIcon]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, {\n    declarations: function () {\n      return [MatIcon];\n    },\n    imports: function () {\n      return [MatCommonModule];\n    },\n    exports: function () {\n      return [MatIcon, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 };","map":{"version":3,"names":["SecurityContext","ɵɵdefineInjectable","ɵɵinject","ErrorHandler","Injectable","Optional","Inject","SkipSelf","InjectionToken","inject","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","Attribute","Input","NgModule","mixinColor","MatCommonModule","coerceBooleanProperty","DOCUMENT","of","throwError","forkJoin","Subscription","tap","map","catchError","finalize","share","take","HttpClient","DomSanitizer","ɵngcc0","ɵngcc1","ɵngcc2","_c0","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","constructor","svgText","options","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","addSvgIconResolver","resolver","push","cleanLiteral","sanitize","HTML","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","registerFontClassAlias","alias","className","set","classNameForFontAlias","get","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","pipe","svg","getNamedSvgIcon","name","key","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","ngOnDestroy","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","err","errorMessage","message","handleError","foundIcon","i","length","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","value","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","_a","withCredentials","inProgressFetch","req","responseType","delete","configNamespace","svgElement","result","isSafeUrlWithOptions","undefined","ɵfac","MatIconRegistry_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","type","decorators","args","ngDevMode","ɵsetClassMetadata","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","MatIconBase","_elementRef","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","_location","location","getPathname","pathname","search","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","join","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_inline","_currentIconFetch","EMPTY","nativeElement","inline","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","_splitIconName","parts","split","ngOnInit","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","unsubscribe","_usingFontIcon","_setSvgElement","styleTags","querySelectorAll","textContent","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","removeChild","elem","fontSetClass","_previousFontSetClass","classList","remove","add","_previousFontIconClass","trim","elements","forEach","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","subscribe","MatIcon_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","hostVars","hostBindings","MatIcon_HostBindings","rf","ctx","ɵɵattribute","ɵɵclassProp","color","inputs","exportAs","features","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","template","MatIcon_Template","ɵɵprojectionDef","ɵɵprojection","styles","encapsulation","changeDetection","String","propDecorators","selector","host","None","OnPush","MatIconModule","MatIconModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js"],"sourcesContent":["import { SecurityContext, ɵɵdefineInjectable, ɵɵinject, ErrorHandler, Injectable, Optional, Inject, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString('<svg></svg>');\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        var _a;\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result) ?\n                    new SvgIconConfig(result.url, null, result.options) :\n                    new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler)); };\nMatIconRegistry.ɵprov = ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler)); }, token: MatIconRegistry, providedIn: \"root\" });\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ErrorHandler }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, null); })();\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => _location ? (_location.pathname + _location.search) : ''\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = attr => `[${attr}]`;\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() { return this._svgIcon; }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() { return this._fontSet; }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() { return this._fontIcon; }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return parts;\n            default: throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        const styleTags = svg.querySelectorAll('style');\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler)); };\nMatIcon.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"], hostVars: 7, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet);\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    } }, inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_ICON_LOCATION,] }] },\n    { type: ErrorHandler }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                    '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                    '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n                }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, { inline: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = function MatIconModule_Factory(t) { return new (t || MatIconModule)(); };\nMatIconModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [MatCommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}