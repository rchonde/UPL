{"ast":null,"code":"/**\r\n * A collection of color-related functions\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $math from \"./Math\";\nimport * as $type from \"./Type\";\n/**\r\n * Define named colors for easy resolution to RGB.\r\n */\n\nvar namedColors = {\n  aliceblue: {\n    r: 240,\n    g: 248,\n    b: 255\n  },\n  antiquewhite: {\n    r: 250,\n    g: 235,\n    b: 215\n  },\n  aqua: {\n    r: 0,\n    g: 255,\n    b: 255\n  },\n  aquamarine: {\n    r: 127,\n    g: 255,\n    b: 212\n  },\n  azure: {\n    r: 240,\n    g: 255,\n    b: 255\n  },\n  beige: {\n    r: 245,\n    g: 245,\n    b: 220\n  },\n  bisque: {\n    r: 255,\n    g: 228,\n    b: 196\n  },\n  black: {\n    r: 0,\n    g: 0,\n    b: 0\n  },\n  blanchedalmond: {\n    r: 255,\n    g: 235,\n    b: 205\n  },\n  blue: {\n    r: 0,\n    g: 0,\n    b: 255\n  },\n  blueviolet: {\n    r: 138,\n    g: 43,\n    b: 226\n  },\n  brown: {\n    r: 165,\n    g: 42,\n    b: 42\n  },\n  burlywood: {\n    r: 222,\n    g: 184,\n    b: 135\n  },\n  cadetblue: {\n    r: 95,\n    g: 158,\n    b: 160\n  },\n  chartreuse: {\n    r: 127,\n    g: 255,\n    b: 0\n  },\n  chocolate: {\n    r: 210,\n    g: 105,\n    b: 30\n  },\n  coral: {\n    r: 255,\n    g: 127,\n    b: 80\n  },\n  cornflowerblue: {\n    r: 100,\n    g: 149,\n    b: 237\n  },\n  cornsilk: {\n    r: 255,\n    g: 248,\n    b: 220\n  },\n  crimson: {\n    r: 220,\n    g: 20,\n    b: 60\n  },\n  cyan: {\n    r: 0,\n    g: 255,\n    b: 255\n  },\n  darkblue: {\n    r: 0,\n    g: 0,\n    b: 139\n  },\n  darkcyan: {\n    r: 0,\n    g: 139,\n    b: 139\n  },\n  darkgoldenrod: {\n    r: 184,\n    g: 134,\n    b: 11\n  },\n  darkgray: {\n    r: 169,\n    g: 169,\n    b: 169\n  },\n  darkgrey: {\n    r: 169,\n    g: 169,\n    b: 169\n  },\n  darkgreen: {\n    r: 0,\n    g: 100,\n    b: 0\n  },\n  darkkhaki: {\n    r: 189,\n    g: 183,\n    b: 107\n  },\n  darkmagenta: {\n    r: 139,\n    g: 0,\n    b: 139\n  },\n  darkolivegreen: {\n    r: 85,\n    g: 107,\n    b: 47\n  },\n  darkorange: {\n    r: 255,\n    g: 140,\n    b: 0\n  },\n  darkorchid: {\n    r: 153,\n    g: 50,\n    b: 204\n  },\n  darkred: {\n    r: 139,\n    g: 0,\n    b: 0\n  },\n  darksalmon: {\n    r: 233,\n    g: 150,\n    b: 122\n  },\n  darkseagreen: {\n    r: 143,\n    g: 188,\n    b: 143\n  },\n  darkslateblue: {\n    r: 72,\n    g: 61,\n    b: 139\n  },\n  darkslategray: {\n    r: 47,\n    g: 79,\n    b: 79\n  },\n  darkslategrey: {\n    r: 47,\n    g: 79,\n    b: 79\n  },\n  darkturquoise: {\n    r: 0,\n    g: 206,\n    b: 209\n  },\n  darkviolet: {\n    r: 148,\n    g: 0,\n    b: 211\n  },\n  deeppink: {\n    r: 255,\n    g: 20,\n    b: 147\n  },\n  deepskyblue: {\n    r: 0,\n    g: 191,\n    b: 255\n  },\n  dimgray: {\n    r: 105,\n    g: 105,\n    b: 105\n  },\n  dimgrey: {\n    r: 105,\n    g: 105,\n    b: 105\n  },\n  dodgerblue: {\n    r: 30,\n    g: 144,\n    b: 255\n  },\n  firebrick: {\n    r: 178,\n    g: 34,\n    b: 34\n  },\n  floralwhite: {\n    r: 255,\n    g: 250,\n    b: 240\n  },\n  forestgreen: {\n    r: 34,\n    g: 139,\n    b: 34\n  },\n  fuchsia: {\n    r: 255,\n    g: 0,\n    b: 255\n  },\n  gainsboro: {\n    r: 220,\n    g: 220,\n    b: 220\n  },\n  ghostwhite: {\n    r: 248,\n    g: 248,\n    b: 255\n  },\n  gold: {\n    r: 255,\n    g: 215,\n    b: 0\n  },\n  goldenrod: {\n    r: 218,\n    g: 165,\n    b: 32\n  },\n  gray: {\n    r: 128,\n    g: 128,\n    b: 128\n  },\n  grey: {\n    r: 128,\n    g: 128,\n    b: 128\n  },\n  green: {\n    r: 0,\n    g: 128,\n    b: 0\n  },\n  greenyellow: {\n    r: 173,\n    g: 255,\n    b: 47\n  },\n  honeydew: {\n    r: 240,\n    g: 255,\n    b: 240\n  },\n  hotpink: {\n    r: 255,\n    g: 105,\n    b: 180\n  },\n  indianred: {\n    r: 205,\n    g: 92,\n    b: 92\n  },\n  indigo: {\n    r: 75,\n    g: 0,\n    b: 130\n  },\n  ivory: {\n    r: 255,\n    g: 255,\n    b: 240\n  },\n  khaki: {\n    r: 240,\n    g: 230,\n    b: 140\n  },\n  lavender: {\n    r: 230,\n    g: 230,\n    b: 250\n  },\n  lavenderblush: {\n    r: 255,\n    g: 240,\n    b: 245\n  },\n  lawngreen: {\n    r: 124,\n    g: 252,\n    b: 0\n  },\n  lemonchiffon: {\n    r: 255,\n    g: 250,\n    b: 205\n  },\n  lightblue: {\n    r: 173,\n    g: 216,\n    b: 230\n  },\n  lightcoral: {\n    r: 240,\n    g: 128,\n    b: 128\n  },\n  lightcyan: {\n    r: 224,\n    g: 255,\n    b: 255\n  },\n  lightgoldenrodyellow: {\n    r: 250,\n    g: 250,\n    b: 210\n  },\n  lightgray: {\n    r: 211,\n    g: 211,\n    b: 211\n  },\n  lightgrey: {\n    r: 211,\n    g: 211,\n    b: 211\n  },\n  lightgreen: {\n    r: 144,\n    g: 238,\n    b: 144\n  },\n  lightpink: {\n    r: 255,\n    g: 182,\n    b: 193\n  },\n  lightsalmon: {\n    r: 255,\n    g: 160,\n    b: 122\n  },\n  lightseagreen: {\n    r: 32,\n    g: 178,\n    b: 170\n  },\n  lightskyblue: {\n    r: 135,\n    g: 206,\n    b: 250\n  },\n  lightslategray: {\n    r: 119,\n    g: 136,\n    b: 153\n  },\n  lightslategrey: {\n    r: 119,\n    g: 136,\n    b: 153\n  },\n  lightsteelblue: {\n    r: 176,\n    g: 196,\n    b: 222\n  },\n  lightyellow: {\n    r: 255,\n    g: 255,\n    b: 224\n  },\n  lime: {\n    r: 0,\n    g: 255,\n    b: 0\n  },\n  limegreen: {\n    r: 50,\n    g: 205,\n    b: 50\n  },\n  linen: {\n    r: 250,\n    g: 240,\n    b: 230\n  },\n  magenta: {\n    r: 255,\n    g: 0,\n    b: 255\n  },\n  maroon: {\n    r: 128,\n    g: 0,\n    b: 0\n  },\n  mediumaquamarine: {\n    r: 102,\n    g: 205,\n    b: 170\n  },\n  mediumblue: {\n    r: 0,\n    g: 0,\n    b: 205\n  },\n  mediumorchid: {\n    r: 186,\n    g: 85,\n    b: 211\n  },\n  mediumpurple: {\n    r: 147,\n    g: 112,\n    b: 219\n  },\n  mediumseagreen: {\n    r: 60,\n    g: 179,\n    b: 113\n  },\n  mediumslateblue: {\n    r: 123,\n    g: 104,\n    b: 238\n  },\n  mediumspringgreen: {\n    r: 0,\n    g: 250,\n    b: 154\n  },\n  mediumturquoise: {\n    r: 72,\n    g: 209,\n    b: 204\n  },\n  mediumvioletred: {\n    r: 199,\n    g: 21,\n    b: 133\n  },\n  midnightblue: {\n    r: 25,\n    g: 25,\n    b: 112\n  },\n  mintcream: {\n    r: 245,\n    g: 255,\n    b: 250\n  },\n  mistyrose: {\n    r: 255,\n    g: 228,\n    b: 225\n  },\n  moccasin: {\n    r: 255,\n    g: 228,\n    b: 181\n  },\n  navajowhite: {\n    r: 255,\n    g: 222,\n    b: 173\n  },\n  navy: {\n    r: 0,\n    g: 0,\n    b: 128\n  },\n  oldlace: {\n    r: 253,\n    g: 245,\n    b: 230\n  },\n  olive: {\n    r: 128,\n    g: 128,\n    b: 0\n  },\n  olivedrab: {\n    r: 107,\n    g: 142,\n    b: 35\n  },\n  orange: {\n    r: 255,\n    g: 165,\n    b: 0\n  },\n  orangered: {\n    r: 255,\n    g: 69,\n    b: 0\n  },\n  orchid: {\n    r: 218,\n    g: 112,\n    b: 214\n  },\n  palegoldenrod: {\n    r: 238,\n    g: 232,\n    b: 170\n  },\n  palegreen: {\n    r: 152,\n    g: 251,\n    b: 152\n  },\n  paleturquoise: {\n    r: 175,\n    g: 238,\n    b: 238\n  },\n  palevioletred: {\n    r: 219,\n    g: 112,\n    b: 147\n  },\n  papayawhip: {\n    r: 255,\n    g: 239,\n    b: 213\n  },\n  peachpuff: {\n    r: 255,\n    g: 218,\n    b: 185\n  },\n  peru: {\n    r: 205,\n    g: 133,\n    b: 63\n  },\n  pink: {\n    r: 255,\n    g: 192,\n    b: 203\n  },\n  plum: {\n    r: 221,\n    g: 160,\n    b: 221\n  },\n  powderblue: {\n    r: 176,\n    g: 224,\n    b: 230\n  },\n  purple: {\n    r: 128,\n    g: 0,\n    b: 128\n  },\n  rebeccapurple: {\n    r: 102,\n    g: 51,\n    b: 153\n  },\n  red: {\n    r: 255,\n    g: 0,\n    b: 0\n  },\n  rosybrown: {\n    r: 188,\n    g: 143,\n    b: 143\n  },\n  royalblue: {\n    r: 65,\n    g: 105,\n    b: 225\n  },\n  saddlebrown: {\n    r: 139,\n    g: 69,\n    b: 19\n  },\n  salmon: {\n    r: 250,\n    g: 128,\n    b: 114\n  },\n  sandybrown: {\n    r: 244,\n    g: 164,\n    b: 96\n  },\n  seagreen: {\n    r: 46,\n    g: 139,\n    b: 87\n  },\n  seashell: {\n    r: 255,\n    g: 245,\n    b: 238\n  },\n  sienna: {\n    r: 160,\n    g: 82,\n    b: 45\n  },\n  silver: {\n    r: 192,\n    g: 192,\n    b: 192\n  },\n  skyblue: {\n    r: 135,\n    g: 206,\n    b: 235\n  },\n  slateblue: {\n    r: 106,\n    g: 90,\n    b: 205\n  },\n  slategray: {\n    r: 112,\n    g: 128,\n    b: 144\n  },\n  slategrey: {\n    r: 112,\n    g: 128,\n    b: 144\n  },\n  snow: {\n    r: 255,\n    g: 250,\n    b: 250\n  },\n  springgreen: {\n    r: 0,\n    g: 255,\n    b: 127\n  },\n  steelblue: {\n    r: 70,\n    g: 130,\n    b: 180\n  },\n  tan: {\n    r: 210,\n    g: 180,\n    b: 140\n  },\n  teal: {\n    r: 0,\n    g: 128,\n    b: 128\n  },\n  thistle: {\n    r: 216,\n    g: 191,\n    b: 216\n  },\n  tomato: {\n    r: 255,\n    g: 99,\n    b: 71\n  },\n  turquoise: {\n    r: 64,\n    g: 224,\n    b: 208\n  },\n  violet: {\n    r: 238,\n    g: 130,\n    b: 238\n  },\n  wheat: {\n    r: 245,\n    g: 222,\n    b: 179\n  },\n  white: {\n    r: 255,\n    g: 255,\n    b: 255\n  },\n  whitesmoke: {\n    r: 245,\n    g: 245,\n    b: 245\n  },\n  yellow: {\n    r: 255,\n    g: 255,\n    b: 0\n  },\n  yellowgreen: {\n    r: 154,\n    g: 205,\n    b: 50\n  }\n};\n/**\r\n * Tries to resolve a named color into a hex color representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value  Color name\r\n * @return Color\r\n * @deprecated\r\n * @hidden\r\n */\n\n/*export function resolveNamedColor(value: string): Color {\r\n    return (<any>namedColors)[value] ? (<any>namedColors)[value] : undefined;\r\n}*/\n\n/**\r\n * Converts a proper color hex code (i.e. \"#FF5500\") or named color (i.e. \"red\")\r\n * into an {iRGB} object. If the code is not correctly formatted, an RGB of\r\n * black is returned.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Color code\r\n * @param alpha  Alpha (0-1)\r\n * @return RGB\r\n */\n\nexport function rgb(color, alpha) {\n  // Init return value\n  var rgb; // Try resolving color format\n  // Named color?\n\n  if (namedColors[color]) {\n    rgb = namedColors[color];\n  } // Hex code?\n  else if (color.charAt(0) === \"#\") {\n    rgb = hexToRgb(color);\n  } // rgb() format?\n  else if (color.match(/^rgba?\\(/)) {\n    rgb = rgbaToRgb(color);\n  } // Was not able to resolve?\n\n\n  if (!rgb) {\n    rgb = {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 1\n    };\n  } // Set alpha\n\n\n  if ($type.hasValue(alpha)) {\n    rgb.a = alpha;\n  }\n\n  return rgb;\n}\n/**\r\n * Converts a hex color code (i.e. \"#FF5500\") to an [[iRGB]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param hex  Hex color code\r\n * @return RGB\r\n */\n\nexport function hexToRgb(hex) {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : hexToRgbWithAlpha(hex);\n}\n/**\r\n * Converts a hex color code with alpha (i.e. \"#FF5500128\") to an [[iRGB]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param hex  Hex color code\r\n * @return RGB\r\n */\n\nexport function hexToRgbWithAlpha(hex) {\n  // Expand shorthand form (e.g. \"03FA\") to full form (e.g. \"0033FFAA\")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b, a) {\n    return r + r + g + g + b + b + a + a;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16),\n    a: parseInt(result[4], 16) / 256\n  } : undefined;\n}\n/**\r\n * Converts color strings in format like `rgb()` and `rgba()` to [[iRGB]].\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Color code\r\n * @return RGB\r\n */\n\nexport function rgbaToRgb(color) {\n  color = color.replace(/[ ]/g, \"\"); // Init\n\n  var matches = color.match(/^rgb\\(([0-9]*),([0-9]*),([0-9]*)\\)/i); // Try rgb() format\n\n  if (matches) {\n    matches.push(\"1\");\n  } else {\n    matches = color.match(/^rgba\\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\\)/i);\n\n    if (!matches) {\n      return;\n    }\n  }\n\n  return {\n    r: parseInt(matches[1]),\n    g: parseInt(matches[2]),\n    b: parseInt(matches[3]),\n    a: parseFloat(matches[4])\n  };\n}\n/**\r\n * Converts an [[iRGB]] object into a hex color code.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rgb  RGB\r\n * @return Hex color code\r\n */\n\nexport function rgbToHex(rgb) {\n  return \"#\" + pad2(rgb.r.toString(16)) + pad2(rgb.g.toString(16)) + pad2(rgb.b.toString(16));\n}\n/**\r\n * Converts an [[iRGB]] object into its `rgb()` or `rgba()` representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rgb  RGB\r\n * @return `rgba()` syntax\r\n */\n\nexport function rgbToRGBA(rgb) {\n  if ($type.hasValue(rgb.a) && rgb.a !== 1) {\n    return \"rgba(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \",\" + rgb.a + \")\";\n  } else {\n    return \"rgb(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \")\";\n  }\n}\n/**\r\n * Pads a 1-digit string with a zero.\r\n *\r\n * @ignore Exclude from docs\r\n * @param c  Input string\r\n * @return Padded string\r\n */\n\nexport function pad2(c) {\n  return c.length == 1 ? \"0\" + c : \"\" + c;\n}\n/**\r\n * Returns an intermediate color between two colors based on the relative\r\n * position. Position needs to be in range between 0 and 1. Zero meaning the\r\n * resulting color will be closest to the first reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color1   First reference color\r\n * @param color2   Second reference color\r\n * @param percent  Relative position (0-1)\r\n * @return Interpolated color\r\n */\n\nexport function interpolate(rgb1, rgb2, percent) {\n  percent = $math.fitToRange(percent, 0, 1);\n\n  if (rgb1) {\n    if (rgb2) {\n      return {\n        r: rgb1.r + Math.round((rgb2.r - rgb1.r) * percent),\n        g: rgb1.g + Math.round((rgb2.g - rgb1.g) * percent),\n        b: rgb1.b + Math.round((rgb2.b - rgb1.b) * percent),\n        a: (rgb1.a || 1) + Math.round(((rgb2.a || 1) - (rgb1.a || 1)) * percent)\n      };\n    } else {\n      return rgb1;\n    }\n  } else if (rgb2) {\n    return rgb2;\n  } else {\n    return rgb1;\n  }\n}\n/**\r\n * Returns a color that is `percent` brighter than the reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color    Reference color\r\n * @param percent  Brightness percent\r\n * @return Hex code of the new color\r\n */\n\nexport function lighten(rgb, percent) {\n  if (rgb) {\n    return {\n      r: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent))),\n      g: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent))),\n      b: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent))),\n      a: rgb.a\n    };\n  } else {\n    // TODO is this correct ?\n    return rgb;\n  }\n}\n;\n/**\r\n * Gets lightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value    Value\r\n * @param percent  Percent\r\n * @return Step\r\n */\n\nexport function getLightnessStep(value, percent) {\n  var base = percent > 0 ? 255 - value : value;\n  return Math.round(base * percent);\n}\n/**\r\n * Returns a color that is `percent` brighter than the source `color`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color    Source color\r\n * @param percent  Brightness percent\r\n * @return New color\r\n */\n\nexport function brighten(rgb, percent) {\n  if (rgb) {\n    var base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230); //let base = Math.max(rgb.r, rgb.g, rgb.b);\n\n    var step = getLightnessStep(base, percent);\n    return {\n      r: Math.max(0, Math.min(255, Math.round(rgb.r + step))),\n      g: Math.max(0, Math.min(255, Math.round(rgb.g + step))),\n      b: Math.max(0, Math.min(255, Math.round(rgb.b + step))),\n      a: rgb.a\n    };\n  } else {\n    // TODO is this correct ?\n    return rgb;\n  }\n}\n;\n/**\r\n * Returns brightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value    Value\r\n * @param percent  Percent\r\n * @return Step\r\n */\n\nexport function getBrightnessStep(value, percent) {\n  var base = 255; //percent > 0 ? 255 - value : value;\n\n  return Math.round(base * percent);\n}\n/**\r\n * Returns a new [[iRGB]] object based on `rgb` parameter with specific\r\n * saturation applied.\r\n *\r\n * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n * saturated).\r\n *\r\n * @ignore Exclude from docs\r\n * @param color       Base color\r\n * @param saturation  Saturation (0-1)\r\n * @return New color\r\n */\n\nexport function saturate(rgb, saturation) {\n  if (rgb == null || saturation == 1) {\n    return rgb;\n  }\n\n  var hsl = rgbToHsl(rgb);\n  hsl.s = saturation;\n  return hslToRgb(hsl);\n}\n/*\r\n// not used\r\nexport function rgbToMatrix(rgb: iRGB): string {\r\n    let r = $type.toText($math.round((rgb.r || 0) / 255, 10));\r\n    let g = $type.toText($math.round((rgb.g || 0) / 255, 10));\r\n    let b = $type.toText($math.round((rgb.b || 0) / 255, 10));\r\n    let a = $type.toText(rgb.a || 1);\r\n    return\t      r + \" 0 0 0 0\" +\r\n                    \" 0 \" + g + \" 0 0 0\" +\r\n                    \" 0 0 \" + b + \" 0 0\" +\r\n                    \" 0 0 0 \" + a + \" 0\";\r\n}\r\n*/\n\n/**\r\n * The functions below are taken and adapted from Garry Tan's blog post:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * The further attributions go mjijackson.com, which now seems to be defunct.\r\n */\n\n/**\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param h       The hue\r\n * @param s       The saturation\r\n * @param l       The lightness\r\n * @return The RGB representation\r\n */\n\nexport function hslToRgb(color) {\n  var r, g, b;\n  var h = color.h;\n  var s = color.s;\n  var l = color.l;\n\n  if (s == 0) {\n    r = g = b = l; // achromatic\n  } else {\n    var hue2rgb = function hue2rgb(p, q, t) {\n      if (t < 0) {\n        t += 1;\n      }\n\n      if (t > 1) {\n        t -= 1;\n      }\n\n      if (t < 1 / 6) {\n        return p + (q - p) * 6 * t;\n      }\n\n      if (t < 1 / 2) {\n        return q;\n      }\n\n      if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n      }\n\n      return p;\n    };\n\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n}\n/**\r\n * Converts an RGB color value to HSL. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and l in the set [0, 1].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param r       The red color value\r\n * @param g       The green color value\r\n * @param b       The blue color value\r\n * @return The HSL representation\r\n */\n\nexport function rgbToHsl(color) {\n  var r = color.r / 255;\n  var g = color.g / 255;\n  var b = color.b / 255;\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var h = 0;\n  var s = 0;\n  var l = (max + min) / 2;\n\n  if (max === min) {\n    h = s = 0; // achromatic\n  } else {\n    var d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n\n      case g:\n        h = (b - r) / d + 2;\n        break;\n\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h: h,\n    s: s,\n    l: l\n  };\n}\n/**\r\n * Converts an RGB color value to HSV. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and v in the set [0, 1].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  r       The red color value\r\n * @param   Number  g       The green color value\r\n * @param   Number  b       The blue color value\r\n * @return  Array           The HSV representation\r\n */\n\nexport function rgbToHsv(color) {\n  var r = color.r / 255;\n  var g = color.g / 255;\n  var b = color.b / 255;\n  var max = Math.max(r, g, b),\n      min = Math.min(r, g, b);\n  var h = 0;\n  var s = 0;\n  var v = max;\n  var d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n\n      case g:\n        h = (b - r) / d + 2;\n        break;\n\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n}\n/**\r\n * Converts an HSV color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes h, s, and v are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  v       The value\r\n * @return  Array           The RGB representation\r\n */\n\nexport function hsvToRgb(color) {\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  var h = color.h;\n  var s = color.s;\n  var v = color.v;\n  var i = Math.floor(h * 6);\n  var f = h * 6 - i;\n  var p = v * (1 - s);\n  var q = v * (1 - f * s);\n  var t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n}\n/**\r\n * Returns `true` if color is \"light\". Useful indetermining which contrasting\r\n * color to use for elements over this color. E.g.: you would want to use\r\n * black text over light background, and vice versa.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Source color\r\n * @return Light?\r\n */\n\nexport function isLight(color) {\n  return (color.r * 299 + color.g * 587 + color.b * 114) / 1000 >= 128;\n}","map":{"version":3,"names":["$math","$type","namedColors","aliceblue","r","g","b","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","rgb","color","alpha","charAt","hexToRgb","match","rgbaToRgb","a","hasValue","hex","shorthandRegex","replace","m","result","exec","parseInt","hexToRgbWithAlpha","undefined","matches","push","parseFloat","rgbToHex","pad2","toString","rgbToRGBA","c","length","interpolate","rgb1","rgb2","percent","fitToRange","Math","round","lighten","max","min","getLightnessStep","value","base","brighten","step","getBrightnessStep","saturate","saturation","hsl","rgbToHsl","s","hslToRgb","h","l","hue2rgb","p","q","t","d","rgbToHsv","v","hsvToRgb","i","floor","f","isLight"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/Colors.js"],"sourcesContent":["/**\r\n * A collection of color-related functions\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $math from \"./Math\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * Define named colors for easy resolution to RGB.\r\n */\r\nvar namedColors = {\r\n    aliceblue: { r: 240, g: 248, b: 255 },\r\n    antiquewhite: { r: 250, g: 235, b: 215 },\r\n    aqua: { r: 0, g: 255, b: 255 },\r\n    aquamarine: { r: 127, g: 255, b: 212 },\r\n    azure: { r: 240, g: 255, b: 255 },\r\n    beige: { r: 245, g: 245, b: 220 },\r\n    bisque: { r: 255, g: 228, b: 196 },\r\n    black: { r: 0, g: 0, b: 0 },\r\n    blanchedalmond: { r: 255, g: 235, b: 205 },\r\n    blue: { r: 0, g: 0, b: 255 },\r\n    blueviolet: { r: 138, g: 43, b: 226 },\r\n    brown: { r: 165, g: 42, b: 42 },\r\n    burlywood: { r: 222, g: 184, b: 135 },\r\n    cadetblue: { r: 95, g: 158, b: 160 },\r\n    chartreuse: { r: 127, g: 255, b: 0 },\r\n    chocolate: { r: 210, g: 105, b: 30 },\r\n    coral: { r: 255, g: 127, b: 80 },\r\n    cornflowerblue: { r: 100, g: 149, b: 237 },\r\n    cornsilk: { r: 255, g: 248, b: 220 },\r\n    crimson: { r: 220, g: 20, b: 60 },\r\n    cyan: { r: 0, g: 255, b: 255 },\r\n    darkblue: { r: 0, g: 0, b: 139 },\r\n    darkcyan: { r: 0, g: 139, b: 139 },\r\n    darkgoldenrod: { r: 184, g: 134, b: 11 },\r\n    darkgray: { r: 169, g: 169, b: 169 },\r\n    darkgrey: { r: 169, g: 169, b: 169 },\r\n    darkgreen: { r: 0, g: 100, b: 0 },\r\n    darkkhaki: { r: 189, g: 183, b: 107 },\r\n    darkmagenta: { r: 139, g: 0, b: 139 },\r\n    darkolivegreen: { r: 85, g: 107, b: 47 },\r\n    darkorange: { r: 255, g: 140, b: 0 },\r\n    darkorchid: { r: 153, g: 50, b: 204 },\r\n    darkred: { r: 139, g: 0, b: 0 },\r\n    darksalmon: { r: 233, g: 150, b: 122 },\r\n    darkseagreen: { r: 143, g: 188, b: 143 },\r\n    darkslateblue: { r: 72, g: 61, b: 139 },\r\n    darkslategray: { r: 47, g: 79, b: 79 },\r\n    darkslategrey: { r: 47, g: 79, b: 79 },\r\n    darkturquoise: { r: 0, g: 206, b: 209 },\r\n    darkviolet: { r: 148, g: 0, b: 211 },\r\n    deeppink: { r: 255, g: 20, b: 147 },\r\n    deepskyblue: { r: 0, g: 191, b: 255 },\r\n    dimgray: { r: 105, g: 105, b: 105 },\r\n    dimgrey: { r: 105, g: 105, b: 105 },\r\n    dodgerblue: { r: 30, g: 144, b: 255 },\r\n    firebrick: { r: 178, g: 34, b: 34 },\r\n    floralwhite: { r: 255, g: 250, b: 240 },\r\n    forestgreen: { r: 34, g: 139, b: 34 },\r\n    fuchsia: { r: 255, g: 0, b: 255 },\r\n    gainsboro: { r: 220, g: 220, b: 220 },\r\n    ghostwhite: { r: 248, g: 248, b: 255 },\r\n    gold: { r: 255, g: 215, b: 0 },\r\n    goldenrod: { r: 218, g: 165, b: 32 },\r\n    gray: { r: 128, g: 128, b: 128 },\r\n    grey: { r: 128, g: 128, b: 128 },\r\n    green: { r: 0, g: 128, b: 0 },\r\n    greenyellow: { r: 173, g: 255, b: 47 },\r\n    honeydew: { r: 240, g: 255, b: 240 },\r\n    hotpink: { r: 255, g: 105, b: 180 },\r\n    indianred: { r: 205, g: 92, b: 92 },\r\n    indigo: { r: 75, g: 0, b: 130 },\r\n    ivory: { r: 255, g: 255, b: 240 },\r\n    khaki: { r: 240, g: 230, b: 140 },\r\n    lavender: { r: 230, g: 230, b: 250 },\r\n    lavenderblush: { r: 255, g: 240, b: 245 },\r\n    lawngreen: { r: 124, g: 252, b: 0 },\r\n    lemonchiffon: { r: 255, g: 250, b: 205 },\r\n    lightblue: { r: 173, g: 216, b: 230 },\r\n    lightcoral: { r: 240, g: 128, b: 128 },\r\n    lightcyan: { r: 224, g: 255, b: 255 },\r\n    lightgoldenrodyellow: { r: 250, g: 250, b: 210 },\r\n    lightgray: { r: 211, g: 211, b: 211 },\r\n    lightgrey: { r: 211, g: 211, b: 211 },\r\n    lightgreen: { r: 144, g: 238, b: 144 },\r\n    lightpink: { r: 255, g: 182, b: 193 },\r\n    lightsalmon: { r: 255, g: 160, b: 122 },\r\n    lightseagreen: { r: 32, g: 178, b: 170 },\r\n    lightskyblue: { r: 135, g: 206, b: 250 },\r\n    lightslategray: { r: 119, g: 136, b: 153 },\r\n    lightslategrey: { r: 119, g: 136, b: 153 },\r\n    lightsteelblue: { r: 176, g: 196, b: 222 },\r\n    lightyellow: { r: 255, g: 255, b: 224 },\r\n    lime: { r: 0, g: 255, b: 0 },\r\n    limegreen: { r: 50, g: 205, b: 50 },\r\n    linen: { r: 250, g: 240, b: 230 },\r\n    magenta: { r: 255, g: 0, b: 255 },\r\n    maroon: { r: 128, g: 0, b: 0 },\r\n    mediumaquamarine: { r: 102, g: 205, b: 170 },\r\n    mediumblue: { r: 0, g: 0, b: 205 },\r\n    mediumorchid: { r: 186, g: 85, b: 211 },\r\n    mediumpurple: { r: 147, g: 112, b: 219 },\r\n    mediumseagreen: { r: 60, g: 179, b: 113 },\r\n    mediumslateblue: { r: 123, g: 104, b: 238 },\r\n    mediumspringgreen: { r: 0, g: 250, b: 154 },\r\n    mediumturquoise: { r: 72, g: 209, b: 204 },\r\n    mediumvioletred: { r: 199, g: 21, b: 133 },\r\n    midnightblue: { r: 25, g: 25, b: 112 },\r\n    mintcream: { r: 245, g: 255, b: 250 },\r\n    mistyrose: { r: 255, g: 228, b: 225 },\r\n    moccasin: { r: 255, g: 228, b: 181 },\r\n    navajowhite: { r: 255, g: 222, b: 173 },\r\n    navy: { r: 0, g: 0, b: 128 },\r\n    oldlace: { r: 253, g: 245, b: 230 },\r\n    olive: { r: 128, g: 128, b: 0 },\r\n    olivedrab: { r: 107, g: 142, b: 35 },\r\n    orange: { r: 255, g: 165, b: 0 },\r\n    orangered: { r: 255, g: 69, b: 0 },\r\n    orchid: { r: 218, g: 112, b: 214 },\r\n    palegoldenrod: { r: 238, g: 232, b: 170 },\r\n    palegreen: { r: 152, g: 251, b: 152 },\r\n    paleturquoise: { r: 175, g: 238, b: 238 },\r\n    palevioletred: { r: 219, g: 112, b: 147 },\r\n    papayawhip: { r: 255, g: 239, b: 213 },\r\n    peachpuff: { r: 255, g: 218, b: 185 },\r\n    peru: { r: 205, g: 133, b: 63 },\r\n    pink: { r: 255, g: 192, b: 203 },\r\n    plum: { r: 221, g: 160, b: 221 },\r\n    powderblue: { r: 176, g: 224, b: 230 },\r\n    purple: { r: 128, g: 0, b: 128 },\r\n    rebeccapurple: { r: 102, g: 51, b: 153 },\r\n    red: { r: 255, g: 0, b: 0 },\r\n    rosybrown: { r: 188, g: 143, b: 143 },\r\n    royalblue: { r: 65, g: 105, b: 225 },\r\n    saddlebrown: { r: 139, g: 69, b: 19 },\r\n    salmon: { r: 250, g: 128, b: 114 },\r\n    sandybrown: { r: 244, g: 164, b: 96 },\r\n    seagreen: { r: 46, g: 139, b: 87 },\r\n    seashell: { r: 255, g: 245, b: 238 },\r\n    sienna: { r: 160, g: 82, b: 45 },\r\n    silver: { r: 192, g: 192, b: 192 },\r\n    skyblue: { r: 135, g: 206, b: 235 },\r\n    slateblue: { r: 106, g: 90, b: 205 },\r\n    slategray: { r: 112, g: 128, b: 144 },\r\n    slategrey: { r: 112, g: 128, b: 144 },\r\n    snow: { r: 255, g: 250, b: 250 },\r\n    springgreen: { r: 0, g: 255, b: 127 },\r\n    steelblue: { r: 70, g: 130, b: 180 },\r\n    tan: { r: 210, g: 180, b: 140 },\r\n    teal: { r: 0, g: 128, b: 128 },\r\n    thistle: { r: 216, g: 191, b: 216 },\r\n    tomato: { r: 255, g: 99, b: 71 },\r\n    turquoise: { r: 64, g: 224, b: 208 },\r\n    violet: { r: 238, g: 130, b: 238 },\r\n    wheat: { r: 245, g: 222, b: 179 },\r\n    white: { r: 255, g: 255, b: 255 },\r\n    whitesmoke: { r: 245, g: 245, b: 245 },\r\n    yellow: { r: 255, g: 255, b: 0 },\r\n    yellowgreen: { r: 154, g: 205, b: 50 }\r\n};\r\n/**\r\n * Tries to resolve a named color into a hex color representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value  Color name\r\n * @return Color\r\n * @deprecated\r\n * @hidden\r\n */\r\n/*export function resolveNamedColor(value: string): Color {\r\n    return (<any>namedColors)[value] ? (<any>namedColors)[value] : undefined;\r\n}*/\r\n/**\r\n * Converts a proper color hex code (i.e. \"#FF5500\") or named color (i.e. \"red\")\r\n * into an {iRGB} object. If the code is not correctly formatted, an RGB of\r\n * black is returned.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Color code\r\n * @param alpha  Alpha (0-1)\r\n * @return RGB\r\n */\r\nexport function rgb(color, alpha) {\r\n    // Init return value\r\n    var rgb;\r\n    // Try resolving color format\r\n    // Named color?\r\n    if (namedColors[color]) {\r\n        rgb = namedColors[color];\r\n    }\r\n    // Hex code?\r\n    else if (color.charAt(0) === \"#\") {\r\n        rgb = hexToRgb(color);\r\n    }\r\n    // rgb() format?\r\n    else if (color.match(/^rgba?\\(/)) {\r\n        rgb = rgbaToRgb(color);\r\n    }\r\n    // Was not able to resolve?\r\n    if (!rgb) {\r\n        rgb = { r: 0, g: 0, b: 0, a: 1 };\r\n    }\r\n    // Set alpha\r\n    if ($type.hasValue(alpha)) {\r\n        rgb.a = alpha;\r\n    }\r\n    return rgb;\r\n}\r\n/**\r\n * Converts a hex color code (i.e. \"#FF5500\") to an [[iRGB]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param hex  Hex color code\r\n * @return RGB\r\n */\r\nexport function hexToRgb(hex) {\r\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\r\n        return r + r + g + g + b + b;\r\n    });\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16)\r\n    } : hexToRgbWithAlpha(hex);\r\n}\r\n/**\r\n * Converts a hex color code with alpha (i.e. \"#FF5500128\") to an [[iRGB]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param hex  Hex color code\r\n * @return RGB\r\n */\r\nexport function hexToRgbWithAlpha(hex) {\r\n    // Expand shorthand form (e.g. \"03FA\") to full form (e.g. \"0033FFAA\")\r\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n    hex = hex.replace(shorthandRegex, function (m, r, g, b, a) {\r\n        return r + r + g + g + b + b + a + a;\r\n    });\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16),\r\n        a: parseInt(result[4], 16) / 256\r\n    } : undefined;\r\n}\r\n/**\r\n * Converts color strings in format like `rgb()` and `rgba()` to [[iRGB]].\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Color code\r\n * @return RGB\r\n */\r\nexport function rgbaToRgb(color) {\r\n    color = color.replace(/[ ]/g, \"\");\r\n    // Init\r\n    var matches = color.match(/^rgb\\(([0-9]*),([0-9]*),([0-9]*)\\)/i);\r\n    // Try rgb() format\r\n    if (matches) {\r\n        matches.push(\"1\");\r\n    }\r\n    else {\r\n        matches = color.match(/^rgba\\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\\)/i);\r\n        if (!matches) {\r\n            return;\r\n        }\r\n    }\r\n    return {\r\n        r: parseInt(matches[1]),\r\n        g: parseInt(matches[2]),\r\n        b: parseInt(matches[3]),\r\n        a: parseFloat(matches[4])\r\n    };\r\n}\r\n/**\r\n * Converts an [[iRGB]] object into a hex color code.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rgb  RGB\r\n * @return Hex color code\r\n */\r\nexport function rgbToHex(rgb) {\r\n    return \"#\" + pad2(rgb.r.toString(16)) + pad2(rgb.g.toString(16)) + pad2(rgb.b.toString(16));\r\n}\r\n/**\r\n * Converts an [[iRGB]] object into its `rgb()` or `rgba()` representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rgb  RGB\r\n * @return `rgba()` syntax\r\n */\r\nexport function rgbToRGBA(rgb) {\r\n    if ($type.hasValue(rgb.a) && rgb.a !== 1) {\r\n        return \"rgba(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \",\" + rgb.a + \")\";\r\n    }\r\n    else {\r\n        return \"rgb(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \")\";\r\n    }\r\n}\r\n/**\r\n * Pads a 1-digit string with a zero.\r\n *\r\n * @ignore Exclude from docs\r\n * @param c  Input string\r\n * @return Padded string\r\n */\r\nexport function pad2(c) {\r\n    return c.length == 1 ? \"0\" + c : \"\" + c;\r\n}\r\n/**\r\n * Returns an intermediate color between two colors based on the relative\r\n * position. Position needs to be in range between 0 and 1. Zero meaning the\r\n * resulting color will be closest to the first reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color1   First reference color\r\n * @param color2   Second reference color\r\n * @param percent  Relative position (0-1)\r\n * @return Interpolated color\r\n */\r\nexport function interpolate(rgb1, rgb2, percent) {\r\n    percent = $math.fitToRange(percent, 0, 1);\r\n    if (rgb1) {\r\n        if (rgb2) {\r\n            return {\r\n                r: rgb1.r + Math.round((rgb2.r - rgb1.r) * percent),\r\n                g: rgb1.g + Math.round((rgb2.g - rgb1.g) * percent),\r\n                b: rgb1.b + Math.round((rgb2.b - rgb1.b) * percent),\r\n                a: (rgb1.a || 1) + Math.round(((rgb2.a || 1) - (rgb1.a || 1)) * percent)\r\n            };\r\n        }\r\n        else {\r\n            return rgb1;\r\n        }\r\n    }\r\n    else if (rgb2) {\r\n        return rgb2;\r\n    }\r\n    else {\r\n        return rgb1;\r\n    }\r\n}\r\n/**\r\n * Returns a color that is `percent` brighter than the reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color    Reference color\r\n * @param percent  Brightness percent\r\n * @return Hex code of the new color\r\n */\r\nexport function lighten(rgb, percent) {\r\n    if (rgb) {\r\n        return {\r\n            r: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent))),\r\n            g: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent))),\r\n            b: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent))),\r\n            a: rgb.a\r\n        };\r\n    }\r\n    else {\r\n        // TODO is this correct ?\r\n        return rgb;\r\n    }\r\n}\r\n;\r\n/**\r\n * Gets lightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value    Value\r\n * @param percent  Percent\r\n * @return Step\r\n */\r\nexport function getLightnessStep(value, percent) {\r\n    var base = percent > 0 ? 255 - value : value;\r\n    return Math.round(base * percent);\r\n}\r\n/**\r\n * Returns a color that is `percent` brighter than the source `color`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color    Source color\r\n * @param percent  Brightness percent\r\n * @return New color\r\n */\r\nexport function brighten(rgb, percent) {\r\n    if (rgb) {\r\n        var base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230);\r\n        //let base = Math.max(rgb.r, rgb.g, rgb.b);\r\n        var step = getLightnessStep(base, percent);\r\n        return {\r\n            r: Math.max(0, Math.min(255, Math.round(rgb.r + step))),\r\n            g: Math.max(0, Math.min(255, Math.round(rgb.g + step))),\r\n            b: Math.max(0, Math.min(255, Math.round(rgb.b + step))),\r\n            a: rgb.a\r\n        };\r\n    }\r\n    else {\r\n        // TODO is this correct ?\r\n        return rgb;\r\n    }\r\n}\r\n;\r\n/**\r\n * Returns brightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value    Value\r\n * @param percent  Percent\r\n * @return Step\r\n */\r\nexport function getBrightnessStep(value, percent) {\r\n    var base = 255; //percent > 0 ? 255 - value : value;\r\n    return Math.round(base * percent);\r\n}\r\n/**\r\n * Returns a new [[iRGB]] object based on `rgb` parameter with specific\r\n * saturation applied.\r\n *\r\n * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n * saturated).\r\n *\r\n * @ignore Exclude from docs\r\n * @param color       Base color\r\n * @param saturation  Saturation (0-1)\r\n * @return New color\r\n */\r\nexport function saturate(rgb, saturation) {\r\n    if (rgb == null || saturation == 1) {\r\n        return rgb;\r\n    }\r\n    var hsl = rgbToHsl(rgb);\r\n    hsl.s = saturation;\r\n    return hslToRgb(hsl);\r\n}\r\n/*\r\n// not used\r\nexport function rgbToMatrix(rgb: iRGB): string {\r\n    let r = $type.toText($math.round((rgb.r || 0) / 255, 10));\r\n    let g = $type.toText($math.round((rgb.g || 0) / 255, 10));\r\n    let b = $type.toText($math.round((rgb.b || 0) / 255, 10));\r\n    let a = $type.toText(rgb.a || 1);\r\n    return\t      r + \" 0 0 0 0\" +\r\n                    \" 0 \" + g + \" 0 0 0\" +\r\n                    \" 0 0 \" + b + \" 0 0\" +\r\n                    \" 0 0 0 \" + a + \" 0\";\r\n}\r\n*/\r\n/**\r\n * The functions below are taken and adapted from Garry Tan's blog post:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * The further attributions go mjijackson.com, which now seems to be defunct.\r\n */\r\n/**\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param h       The hue\r\n * @param s       The saturation\r\n * @param l       The lightness\r\n * @return The RGB representation\r\n */\r\nexport function hslToRgb(color) {\r\n    var r, g, b;\r\n    var h = color.h;\r\n    var s = color.s;\r\n    var l = color.l;\r\n    if (s == 0) {\r\n        r = g = b = l; // achromatic\r\n    }\r\n    else {\r\n        var hue2rgb = function hue2rgb(p, q, t) {\r\n            if (t < 0) {\r\n                t += 1;\r\n            }\r\n            if (t > 1) {\r\n                t -= 1;\r\n            }\r\n            if (t < 1 / 6) {\r\n                return p + (q - p) * 6 * t;\r\n            }\r\n            if (t < 1 / 2) {\r\n                return q;\r\n            }\r\n            if (t < 2 / 3) {\r\n                return p + (q - p) * (2 / 3 - t) * 6;\r\n            }\r\n            return p;\r\n        };\r\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        var p = 2 * l - q;\r\n        r = hue2rgb(p, q, h + 1 / 3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1 / 3);\r\n    }\r\n    return {\r\n        r: Math.round(r * 255),\r\n        g: Math.round(g * 255),\r\n        b: Math.round(b * 255)\r\n    };\r\n}\r\n/**\r\n * Converts an RGB color value to HSL. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and l in the set [0, 1].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param r       The red color value\r\n * @param g       The green color value\r\n * @param b       The blue color value\r\n * @return The HSL representation\r\n */\r\nexport function rgbToHsl(color) {\r\n    var r = color.r / 255;\r\n    var g = color.g / 255;\r\n    var b = color.b / 255;\r\n    var max = Math.max(r, g, b);\r\n    var min = Math.min(r, g, b);\r\n    var h = 0;\r\n    var s = 0;\r\n    var l = (max + min) / 2;\r\n    if (max === min) {\r\n        h = s = 0; // achromatic\r\n    }\r\n    else {\r\n        var d = max - min;\r\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n        }\r\n        h /= 6;\r\n    }\r\n    return {\r\n        h: h,\r\n        s: s,\r\n        l: l\r\n    };\r\n}\r\n/**\r\n * Converts an RGB color value to HSV. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and v in the set [0, 1].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  r       The red color value\r\n * @param   Number  g       The green color value\r\n * @param   Number  b       The blue color value\r\n * @return  Array           The HSV representation\r\n */\r\nexport function rgbToHsv(color) {\r\n    var r = color.r / 255;\r\n    var g = color.g / 255;\r\n    var b = color.b / 255;\r\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n    var h = 0;\r\n    var s = 0;\r\n    var v = max;\r\n    var d = max - min;\r\n    s = max == 0 ? 0 : d / max;\r\n    if (max == min) {\r\n        h = 0; // achromatic\r\n    }\r\n    else {\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n        }\r\n        h /= 6;\r\n    }\r\n    return {\r\n        h: h,\r\n        s: s,\r\n        v: v\r\n    };\r\n}\r\n/**\r\n * Converts an HSV color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes h, s, and v are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  v       The value\r\n * @return  Array           The RGB representation\r\n */\r\nexport function hsvToRgb(color) {\r\n    var r = 0;\r\n    var g = 0;\r\n    var b = 0;\r\n    var h = color.h;\r\n    var s = color.s;\r\n    var v = color.v;\r\n    var i = Math.floor(h * 6);\r\n    var f = h * 6 - i;\r\n    var p = v * (1 - s);\r\n    var q = v * (1 - f * s);\r\n    var t = v * (1 - (1 - f) * s);\r\n    switch (i % 6) {\r\n        case 0:\r\n            r = v;\r\n            g = t;\r\n            b = p;\r\n            break;\r\n        case 1:\r\n            r = q;\r\n            g = v;\r\n            b = p;\r\n            break;\r\n        case 2:\r\n            r = p;\r\n            g = v;\r\n            b = t;\r\n            break;\r\n        case 3:\r\n            r = p;\r\n            g = q;\r\n            b = v;\r\n            break;\r\n        case 4:\r\n            r = t;\r\n            g = p;\r\n            b = v;\r\n            break;\r\n        case 5:\r\n            r = v;\r\n            g = p;\r\n            b = q;\r\n            break;\r\n    }\r\n    return {\r\n        r: Math.round(r * 255),\r\n        g: Math.round(g * 255),\r\n        b: Math.round(b * 255)\r\n    };\r\n}\r\n/**\r\n * Returns `true` if color is \"light\". Useful indetermining which contrasting\r\n * color to use for elements over this color. E.g.: you would want to use\r\n * black text over light background, and vice versa.\r\n *\r\n * @ignore Exclude from docs\r\n * @param color  Source color\r\n * @return Light?\r\n */\r\nexport function isLight(color) {\r\n    return ((color.r * 299) + (color.g * 587) + (color.b * 114)) / 1000 >= 128;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}