{"ast":null,"code":"/**\r\n * This module contains PatternSet object definition\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../Base\";\nimport { Color } from \"./Color\";\nimport { InterfaceColorSet } from \"./InterfaceColorSet\";\nimport { LinePattern } from \"../rendering/fills/LinePattern\";\nimport { RectPattern } from \"../rendering/fills/RectPattern\";\nimport { CirclePattern } from \"../rendering/fills/CirclePattern\";\nimport { registry } from \"../Registry\";\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines an interable list of distinctive patterns that can be used in\r\n * conjunction to colors to generate various fill patterns.\r\n *\r\n * @important\r\n * @since 4.7.5\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\n\nvar PatternSet =\n/** @class */\nfunction (_super) {\n  __extends(PatternSet, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PatternSet() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Holds the list of the colors in this set. (preset or auto-generated)\r\n     */\n\n\n    _this._list = [];\n    /**\r\n     * Current step.\r\n     */\n\n    _this._currentStep = 0;\n    /**\r\n     * If set to non-zero value, the PatternSet will start iterating patterns from\r\n     * that particular index, not the first pattern in the list.\r\n     */\n\n    _this._startIndex = 0;\n    /**\r\n     * Current pass in cycle. Once all patterns in the list are iterated,\r\n     * iteration restarts from beginning and currentPass is incremented.\r\n     */\n\n    _this._currentPass = 0;\n    /**\r\n     * A base color. If there are no colors pre-set in the color list, ColorSet\r\n     * will use this color as a base when generating new ones, applying\r\n     * `stepOptions` and `passOptions` to this base color.\r\n     */\n\n    _this.baseColor = new Color({\n      r: 103,\n      g: 183,\n      b: 220\n    });\n    _this.className = \"PatternSet\"; // Set base color to be used for pattern elements\n\n    var interfaceColors = new InterfaceColorSet(); // Set default patterns\n\n    _this.list = [_this.getLinePattern(1000, 45, 1, 6), _this.getRectPattern(10, 0, 4), _this.getLinePattern(1000, -45, 1, 6), _this.getCirclePattern(11, 2, true), _this.getLinePattern(6, 90, 1), _this.getRectPattern(12, 45, 6, true), _this.getLinePattern(6, 0, 1), _this.getRectPattern(7, 0, 4), _this.getLinePattern(1000, 45, 2, 3, \"4,2\"), _this.getCirclePattern(9, 3, false), _this.getLinePattern(1000, -45, 2, 3, \"4,2\"), _this.getRectPattern(10, 45, Math.sqrt(50)), _this.getLinePattern(1000, -45, 2, 1), _this.getRectPattern(10, 0, 9), _this.getLinePattern(1000, 45, 2, 1), _this.getLinePattern(1000, 0, 3, 1), _this.getRectPattern(10, 45, 10), _this.getLinePattern(1000, 90, 3, 1)];\n    _this.baseColor = interfaceColors.getFor(\"stroke\");\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  PatternSet.prototype.getLinePattern = function (size, rotation, thickness, gap, strokeDashArray) {\n    var pattern = new LinePattern();\n    pattern.width = size;\n    pattern.height = size;\n    pattern.stroke = this.baseColor;\n    pattern.gap = gap;\n    pattern.strokeDasharray = strokeDashArray;\n    pattern.strokeWidth = thickness;\n    pattern.rotation = rotation;\n    return pattern;\n  };\n\n  PatternSet.prototype.getRectPattern = function (size, rotation, thickness, outline) {\n    var pattern = new RectPattern();\n    pattern.width = size;\n    pattern.height = size;\n    pattern.rectWidth = thickness;\n    pattern.rectHeight = thickness;\n\n    if (outline) {\n      pattern.stroke = this.baseColor;\n      pattern.strokeWidth = 1;\n      pattern.fillOpacity = 0;\n    } else {\n      pattern.fill = this.baseColor;\n      pattern.strokeWidth = 0;\n    }\n\n    if (rotation != 0) {\n      pattern.shapeRendering = \"auto\";\n    }\n\n    pattern.rotation = rotation;\n    return pattern;\n  };\n\n  PatternSet.prototype.getCirclePattern = function (size, radius, outline) {\n    var pattern = new CirclePattern();\n    pattern.width = size;\n    pattern.height = size;\n    pattern.shapeRendering = \"auto\";\n    pattern.radius = radius;\n\n    if (outline) {\n      pattern.stroke = this.baseColor;\n      pattern.strokeWidth = 1;\n      pattern.fillOpacity = 0;\n    } else {\n      pattern.fill = this.baseColor;\n      pattern.strokeWidth = 0;\n    }\n\n    return pattern;\n  };\n\n  Object.defineProperty(PatternSet.prototype, \"list\", {\n    /**\r\n     * @return Pattern list\r\n     */\n    get: function () {\n      return this._list;\n    },\n\n    /**\r\n     * List of pre-defined patterns to be used in set.\r\n     *\r\n     * @param value Pattern list\r\n     */\n    set: function (value) {\n      this._list = value;\n      this.reset();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns the next pattern in list.\r\n   *\r\n   * @return Pattern\r\n   */\n\n  PatternSet.prototype.next = function () {\n    var pattern = this.getIndex(this.currentStep);\n    this._currentStep++;\n    return pattern;\n  };\n  /**\r\n   * Returns a color at specific index in the list.\r\n   *\r\n   * @param  i  Index\r\n   * @return Pattern\r\n   */\n\n\n  PatternSet.prototype.getIndex = function (i) {\n    var pattern;\n\n    while (this.list.length <= i) {\n      this.generatePatterns();\n    }\n\n    pattern = this.list[i];\n    return pattern.clone();\n  };\n  /**\r\n   * Generates a new set of patterns.\r\n   */\n\n\n  PatternSet.prototype.generatePatterns = function () {\n    var count = this.list.length / (this._currentPass + 1);\n    this._currentPass++;\n\n    for (var i = 0; i < count; i++) {\n      this.list.push(this.list[i].clone());\n    }\n  };\n  /**\r\n   * Resets internal iterator.\r\n   *\r\n   * Calling `next()` after this will return the very first color in the color\r\n   * list, even if it was already returned before.\r\n   */\n\n\n  PatternSet.prototype.reset = function () {\n    this._currentStep = this._startIndex;\n  };\n\n  Object.defineProperty(PatternSet.prototype, \"currentStep\", {\n    /**\r\n     * @return Step\r\n     */\n    get: function () {\n      return this._currentStep;\n    },\n\n    /**\r\n     * Sets current color iteration. You can use this property to skip some\r\n     * colors from iteration. E.g. setting it to `10` will skip first ten\r\n     * colors.\r\n     *\r\n     * Please note that the number is zero-based.\r\n     *\r\n     * @param value  Step\r\n     */\n    set: function (value) {\n      this._currentStep = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PatternSet.prototype, \"startIndex\", {\n    /**\r\n     * @return Index\r\n     */\n    get: function () {\n      return this._startIndex;\n    },\n\n    /**\r\n     * If set to non-zero value, the ColorSet will start iterating colors from\r\n     * that particular index, not the first color in the list.\r\n     *\r\n     * @default 0\r\n     * @param  value  Index\r\n     */\n    set: function (value) {\n      this._startIndex = value;\n      this.reset();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n  PatternSet.prototype.processConfig = function (config) {\n    // if (config) {\n    // \t// Set up axis ranges\n    // \tif ($type.hasValue(config.list) && $type.isArray(config.list)) {\n    // \t\tfor (let i = 0, len = config.list.length; i < len; i++) {\n    // \t\t\tif (!(config.list[i] instanceof Color)) {\n    // \t\t\t\tconfig.list[i] = color(config.list[i]);\n    // \t\t\t}\n    // \t\t}\n    // \t}\n    // }\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return PatternSet;\n}(BaseObject);\n\nexport { PatternSet };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"PatternSet\"] = PatternSet;","map":{"version":3,"names":["__extends","BaseObject","Color","InterfaceColorSet","LinePattern","RectPattern","CirclePattern","registry","PatternSet","_super","_this","call","_list","_currentStep","_startIndex","_currentPass","baseColor","r","g","b","className","interfaceColors","list","getLinePattern","getRectPattern","getCirclePattern","Math","sqrt","getFor","applyTheme","prototype","size","rotation","thickness","gap","strokeDashArray","pattern","width","height","stroke","strokeDasharray","strokeWidth","outline","rectWidth","rectHeight","fillOpacity","fill","shapeRendering","radius","Object","defineProperty","get","set","value","reset","enumerable","configurable","next","getIndex","currentStep","i","length","generatePatterns","clone","count","push","processConfig","config","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/PatternSet.js"],"sourcesContent":["/**\r\n * This module contains PatternSet object definition\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { Color } from \"./Color\";\r\nimport { InterfaceColorSet } from \"./InterfaceColorSet\";\r\nimport { LinePattern } from \"../rendering/fills/LinePattern\";\r\nimport { RectPattern } from \"../rendering/fills/RectPattern\";\r\nimport { CirclePattern } from \"../rendering/fills/CirclePattern\";\r\nimport { registry } from \"../Registry\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines an interable list of distinctive patterns that can be used in\r\n * conjunction to colors to generate various fill patterns.\r\n *\r\n * @important\r\n * @since 4.7.5\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nvar PatternSet = /** @class */ (function (_super) {\r\n    __extends(PatternSet, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PatternSet() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Holds the list of the colors in this set. (preset or auto-generated)\r\n         */\r\n        _this._list = [];\r\n        /**\r\n         * Current step.\r\n         */\r\n        _this._currentStep = 0;\r\n        /**\r\n         * If set to non-zero value, the PatternSet will start iterating patterns from\r\n         * that particular index, not the first pattern in the list.\r\n         */\r\n        _this._startIndex = 0;\r\n        /**\r\n         * Current pass in cycle. Once all patterns in the list are iterated,\r\n         * iteration restarts from beginning and currentPass is incremented.\r\n         */\r\n        _this._currentPass = 0;\r\n        /**\r\n         * A base color. If there are no colors pre-set in the color list, ColorSet\r\n         * will use this color as a base when generating new ones, applying\r\n         * `stepOptions` and `passOptions` to this base color.\r\n         */\r\n        _this.baseColor = new Color({\r\n            r: 103,\r\n            g: 183,\r\n            b: 220\r\n        });\r\n        _this.className = \"PatternSet\";\r\n        // Set base color to be used for pattern elements\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Set default patterns\r\n        _this.list = [\r\n            _this.getLinePattern(1000, 45, 1, 6),\r\n            _this.getRectPattern(10, 0, 4),\r\n            _this.getLinePattern(1000, -45, 1, 6),\r\n            _this.getCirclePattern(11, 2, true),\r\n            _this.getLinePattern(6, 90, 1),\r\n            _this.getRectPattern(12, 45, 6, true),\r\n            _this.getLinePattern(6, 0, 1),\r\n            _this.getRectPattern(7, 0, 4),\r\n            _this.getLinePattern(1000, 45, 2, 3, \"4,2\"),\r\n            _this.getCirclePattern(9, 3, false),\r\n            _this.getLinePattern(1000, -45, 2, 3, \"4,2\"),\r\n            _this.getRectPattern(10, 45, Math.sqrt(50)),\r\n            _this.getLinePattern(1000, -45, 2, 1),\r\n            _this.getRectPattern(10, 0, 9),\r\n            _this.getLinePattern(1000, 45, 2, 1),\r\n            _this.getLinePattern(1000, 0, 3, 1),\r\n            _this.getRectPattern(10, 45, 10),\r\n            _this.getLinePattern(1000, 90, 3, 1)\r\n        ];\r\n        _this.baseColor = interfaceColors.getFor(\"stroke\");\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    PatternSet.prototype.getLinePattern = function (size, rotation, thickness, gap, strokeDashArray) {\r\n        var pattern = new LinePattern();\r\n        pattern.width = size;\r\n        pattern.height = size;\r\n        pattern.stroke = this.baseColor;\r\n        pattern.gap = gap;\r\n        pattern.strokeDasharray = strokeDashArray;\r\n        pattern.strokeWidth = thickness;\r\n        pattern.rotation = rotation;\r\n        return pattern;\r\n    };\r\n    PatternSet.prototype.getRectPattern = function (size, rotation, thickness, outline) {\r\n        var pattern = new RectPattern();\r\n        pattern.width = size;\r\n        pattern.height = size;\r\n        pattern.rectWidth = thickness;\r\n        pattern.rectHeight = thickness;\r\n        if (outline) {\r\n            pattern.stroke = this.baseColor;\r\n            pattern.strokeWidth = 1;\r\n            pattern.fillOpacity = 0;\r\n        }\r\n        else {\r\n            pattern.fill = this.baseColor;\r\n            pattern.strokeWidth = 0;\r\n        }\r\n        if (rotation != 0) {\r\n            pattern.shapeRendering = \"auto\";\r\n        }\r\n        pattern.rotation = rotation;\r\n        return pattern;\r\n    };\r\n    PatternSet.prototype.getCirclePattern = function (size, radius, outline) {\r\n        var pattern = new CirclePattern();\r\n        pattern.width = size;\r\n        pattern.height = size;\r\n        pattern.shapeRendering = \"auto\";\r\n        pattern.radius = radius;\r\n        if (outline) {\r\n            pattern.stroke = this.baseColor;\r\n            pattern.strokeWidth = 1;\r\n            pattern.fillOpacity = 0;\r\n        }\r\n        else {\r\n            pattern.fill = this.baseColor;\r\n            pattern.strokeWidth = 0;\r\n        }\r\n        return pattern;\r\n    };\r\n    Object.defineProperty(PatternSet.prototype, \"list\", {\r\n        /**\r\n         * @return Pattern list\r\n         */\r\n        get: function () {\r\n            return this._list;\r\n        },\r\n        /**\r\n         * List of pre-defined patterns to be used in set.\r\n         *\r\n         * @param value Pattern list\r\n         */\r\n        set: function (value) {\r\n            this._list = value;\r\n            this.reset();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the next pattern in list.\r\n     *\r\n     * @return Pattern\r\n     */\r\n    PatternSet.prototype.next = function () {\r\n        var pattern = this.getIndex(this.currentStep);\r\n        this._currentStep++;\r\n        return pattern;\r\n    };\r\n    /**\r\n     * Returns a color at specific index in the list.\r\n     *\r\n     * @param  i  Index\r\n     * @return Pattern\r\n     */\r\n    PatternSet.prototype.getIndex = function (i) {\r\n        var pattern;\r\n        while (this.list.length <= i) {\r\n            this.generatePatterns();\r\n        }\r\n        pattern = this.list[i];\r\n        return pattern.clone();\r\n    };\r\n    /**\r\n     * Generates a new set of patterns.\r\n     */\r\n    PatternSet.prototype.generatePatterns = function () {\r\n        var count = this.list.length / (this._currentPass + 1);\r\n        this._currentPass++;\r\n        for (var i = 0; i < count; i++) {\r\n            this.list.push(this.list[i].clone());\r\n        }\r\n    };\r\n    /**\r\n     * Resets internal iterator.\r\n     *\r\n     * Calling `next()` after this will return the very first color in the color\r\n     * list, even if it was already returned before.\r\n     */\r\n    PatternSet.prototype.reset = function () {\r\n        this._currentStep = this._startIndex;\r\n    };\r\n    Object.defineProperty(PatternSet.prototype, \"currentStep\", {\r\n        /**\r\n         * @return Step\r\n         */\r\n        get: function () {\r\n            return this._currentStep;\r\n        },\r\n        /**\r\n         * Sets current color iteration. You can use this property to skip some\r\n         * colors from iteration. E.g. setting it to `10` will skip first ten\r\n         * colors.\r\n         *\r\n         * Please note that the number is zero-based.\r\n         *\r\n         * @param value  Step\r\n         */\r\n        set: function (value) {\r\n            this._currentStep = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PatternSet.prototype, \"startIndex\", {\r\n        /**\r\n         * @return Index\r\n         */\r\n        get: function () {\r\n            return this._startIndex;\r\n        },\r\n        /**\r\n         * If set to non-zero value, the ColorSet will start iterating colors from\r\n         * that particular index, not the first color in the list.\r\n         *\r\n         * @default 0\r\n         * @param  value  Index\r\n         */\r\n        set: function (value) {\r\n            this._startIndex = value;\r\n            this.reset();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    PatternSet.prototype.processConfig = function (config) {\r\n        // if (config) {\r\n        // \t// Set up axis ranges\r\n        // \tif ($type.hasValue(config.list) && $type.isArray(config.list)) {\r\n        // \t\tfor (let i = 0, len = config.list.length; i < len; i++) {\r\n        // \t\t\tif (!(config.list[i] instanceof Color)) {\r\n        // \t\t\t\tconfig.list[i] = color(config.list[i]);\r\n        // \t\t\t}\r\n        // \t\t}\r\n        // \t}\r\n        // }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return PatternSet;\r\n}(BaseObject));\r\nexport { PatternSet };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PatternSet\"] = PatternSet;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}