{"ast":null,"code":"/**\r\n * Functionality for drawing circles.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { percent } from \"../utils/Percent\";\nimport { registry } from \"../Registry\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to create a circle\r\n * @see {@link ICircleEvents} for a list of available events\r\n * @see {@link ICircleAdapters} for a list of available Adapters\r\n */\n\nvar Circle =\n/** @class */\nfunction (_super) {\n  __extends(Circle, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Circle() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Circle\";\n    _this.element = _this.paper.add(\"circle\");\n\n    _this.setPercentProperty(\"radius\", percent(100));\n\n    _this.setPropertyValue(\"horizontalCenter\", \"middle\");\n\n    _this.setPropertyValue(\"verticalCenter\", \"middle\");\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the circle.\r\n   */\n\n\n  Circle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    this.element.attr({\n      \"r\": this.pixelRadius\n    });\n  };\n\n  Object.defineProperty(Circle.prototype, \"radius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Radius of the circle.\r\n     *\r\n     * Can be either absolute (pixels) or relative ([Percent]).\r\n     *\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Circle.prototype, \"pixelRadius\", {\n    /**\r\n     * Radius of the circle in pixels.\r\n     *\r\n     * This is a read-only property. To set radius in pixels, use `radius`\r\n     * property.\r\n     *\r\n     * @readonly\r\n     * @return Radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeToValue(this.radius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates bounding box.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Circle.prototype.measureElement = function () {\n    var pixelRadius = this.pixelRadius;\n    this._bbox = {\n      x: -pixelRadius,\n      y: -pixelRadius,\n      width: pixelRadius * 2,\n      height: pixelRadius * 2\n    };\n  };\n\n  return Circle;\n}(Sprite);\n\nexport { Circle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Circle\"] = Circle;","map":{"version":3,"names":["__extends","Sprite","percent","registry","$utils","$math","Circle","_super","_this","call","className","element","paper","add","setPercentProperty","setPropertyValue","applyTheme","prototype","draw","attr","pixelRadius","Object","defineProperty","get","getPropertyValue","set","value","enumerable","configurable","relativeToValue","radius","min","innerWidth","innerHeight","measureElement","_bbox","x","y","width","height","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/elements/Circle.js"],"sourcesContent":["/**\r\n * Functionality for drawing circles.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { percent } from \"../utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to create a circle\r\n * @see {@link ICircleEvents} for a list of available events\r\n * @see {@link ICircleAdapters} for a list of available Adapters\r\n */\r\nvar Circle = /** @class */ (function (_super) {\r\n    __extends(Circle, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Circle() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Circle\";\r\n        _this.element = _this.paper.add(\"circle\");\r\n        _this.setPercentProperty(\"radius\", percent(100));\r\n        _this.setPropertyValue(\"horizontalCenter\", \"middle\");\r\n        _this.setPropertyValue(\"verticalCenter\", \"middle\");\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the circle.\r\n     */\r\n    Circle.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        this.element.attr({ \"r\": this.pixelRadius });\r\n    };\r\n    Object.defineProperty(Circle.prototype, \"radius\", {\r\n        /**\r\n         * @return Radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Radius of the circle.\r\n         *\r\n         * Can be either absolute (pixels) or relative ([Percent]).\r\n         *\r\n         * @param value  Radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Circle.prototype, \"pixelRadius\", {\r\n        /**\r\n         * Radius of the circle in pixels.\r\n         *\r\n         * This is a read-only property. To set radius in pixels, use `radius`\r\n         * property.\r\n         *\r\n         * @readonly\r\n         * @return Radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeToValue(this.radius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates bounding box.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Circle.prototype.measureElement = function () {\r\n        var pixelRadius = this.pixelRadius;\r\n        this._bbox = {\r\n            x: -pixelRadius,\r\n            y: -pixelRadius,\r\n            width: pixelRadius * 2,\r\n            height: pixelRadius * 2\r\n        };\r\n    };\r\n    return Circle;\r\n}(Sprite));\r\nexport { Circle };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Circle\"] = Circle;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}