{"ast":null,"code":"import { __extends, __generator, __read } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Disposer } from \"./Disposer\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $object from \"./Object\";\nimport * as $iter from \"./Iterator\";\nimport * as $string from \"./String\";\n/**\r\n * A disposable dictionary, which when disposed itself will call `dispose()`\r\n * method on all its items.\r\n */\n\nvar DictionaryDisposer =\n/** @class */\nfunction (_super) {\n  __extends(DictionaryDisposer, _super);\n\n  function DictionaryDisposer(dict) {\n    var _this = this;\n\n    var disposer = dict.events.on(\"removed\", function (x) {\n      x.oldValue.dispose();\n    }, undefined, false);\n    _this = _super.call(this, function () {\n      disposer.dispose(); // TODO clear the dictionary ?\n\n      $iter.each(dict.iterator(), function (a) {\n        var v = a[1];\n        v.dispose();\n      });\n    }) || this;\n    return _this;\n  }\n\n  return DictionaryDisposer;\n}(Disposer);\n\nexport { DictionaryDisposer };\n/**\r\n * A Dictionary is collection where values of some type can be mapped to\r\n * string keys.\r\n *\r\n * You might call it an \"associative list\" or \"associative array\".\r\n */\n\nvar Dictionary =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   */\n  function Dictionary() {\n    /**\r\n     * Event dispatcher.\r\n     */\n    this.events = new EventDispatcher();\n    this._dictionary = {};\n  }\n  /**\r\n   * Returns `true` if key exists in Dictionary.\r\n   *\r\n   * @param key  The key to search for\r\n   * @return `true` if key exists, `false` if it doesn't\r\n   */\n\n\n  Dictionary.prototype.hasKey = function (key) {\n    return $object.hasKey(this._dictionary, key);\n  };\n  /**\r\n   * Returns the value for a specific key.\r\n   *\r\n   * @param key  The key to search for\r\n   * @return Value for the key, or `undefined` if it doesn't exist\r\n   */\n\n\n  Dictionary.prototype.getKey = function (key) {\n    return this._dictionary[key];\n  };\n  /**\r\n   * Inserts value at specific key.\r\n   *\r\n   * Will thrown an exception if the key already exists in the dictionary.\r\n   *\r\n   * @param key    Key\r\n   * @param value  Value\r\n   */\n\n\n  Dictionary.prototype.insertKey = function (key, value) {\n    if ($object.hasKey(this._dictionary, key)) {\n      throw new Error(\"Key \" + key + \" already exists in dictionary\");\n    } else {\n      this._dictionary[key] = value;\n\n      if (this.events.isEnabled(\"insertKey\")) {\n        this.events.dispatchImmediately(\"insertKey\", {\n          type: \"insertKey\",\n          target: this,\n          key: key,\n          newValue: value\n        });\n      }\n    }\n  };\n  /**\r\n   * Adds or updates key/value into dictionary.\r\n   *\r\n   * If the key already exists, the old value will be overwritten.\r\n   *\r\n   * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n   *\r\n   * @param key    Key\r\n   * @param value  Value\r\n   */\n\n\n  Dictionary.prototype.setKey = function (key, value) {\n    if ($object.hasKey(this._dictionary, key)) {\n      var oldValue = this._dictionary[key];\n\n      if (oldValue !== value) {\n        this._dictionary[key] = value;\n\n        if (this.events.isEnabled(\"setKey\")) {\n          this.events.dispatchImmediately(\"setKey\", {\n            type: \"setKey\",\n            target: this,\n            key: key,\n            oldValue: oldValue,\n            newValue: value\n          });\n        }\n\n        if (this.events.isEnabled(\"removed\")) {\n          this.events.dispatchImmediately(\"removed\", {\n            type: \"removed\",\n            target: this,\n            oldValue: oldValue\n          });\n        }\n      }\n    } else {\n      this._dictionary[key] = value;\n\n      if (this.events.isEnabled(\"insertKey\")) {\n        this.events.dispatchImmediately(\"insertKey\", {\n          type: \"insertKey\",\n          target: this,\n          key: key,\n          newValue: value\n        });\n      }\n    }\n  };\n  /**\r\n   * Updates the value at specific `key` using custom function.\r\n   *\r\n   * Passes in current value into the function, and uses its output as a new\r\n   * value.\r\n   *\r\n   * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key  Key\r\n   * @param fn   Function to transform the value\r\n   */\n\n\n  Dictionary.prototype.updateKey = function (key, fn) {\n    if ($object.hasKey(this._dictionary, key)) {\n      var oldValue = this._dictionary[key];\n      var newValue = fn(oldValue);\n\n      if (oldValue !== newValue) {\n        this._dictionary[key] = newValue;\n\n        if (this.events.isEnabled(\"setKey\")) {\n          this.events.dispatchImmediately(\"setKey\", {\n            type: \"setKey\",\n            target: this,\n            key: key,\n            oldValue: oldValue,\n            newValue: newValue\n          });\n        }\n\n        if (this.events.isEnabled(\"removed\")) {\n          this.events.dispatchImmediately(\"removed\", {\n            type: \"removed\",\n            target: this,\n            oldValue: oldValue\n          });\n        }\n      }\n    } else {\n      throw new Error(\"Key \" + key + \" doesn't exist in dictionary\");\n    }\n  };\n  /**\r\n   * Removes value at specific `key` from dictionary.\r\n   *\r\n   * @param key  Key to remove\r\n   */\n\n\n  Dictionary.prototype.removeKey = function (key) {\n    if ($object.hasKey(this._dictionary, key)) {\n      var oldValue = this._dictionary[key];\n      delete this._dictionary[key];\n\n      if (this.events.isEnabled(\"removeKey\")) {\n        this.events.dispatchImmediately(\"removeKey\", {\n          type: \"removeKey\",\n          target: this,\n          key: key,\n          oldValue: oldValue\n        });\n      }\n\n      if (this.events.isEnabled(\"removed\")) {\n        this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: this,\n          oldValue: oldValue\n        });\n      }\n    }\n  };\n  /**\r\n   * [insertKeyIfEmpty description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo description\r\n   * @param key      [description]\r\n   * @param ifEmpty  [description]\r\n   * @return [description]\r\n   */\n\n\n  Dictionary.prototype.insertKeyIfEmpty = function (key, ifEmpty) {\n    if (!this.hasKey(key)) {\n      this.insertKey(key, ifEmpty());\n    }\n\n    return this.getKey(key);\n  };\n  /**\r\n   * Removes all items from the dictionary.\r\n   */\n\n\n  Dictionary.prototype.clear = function () {\n    var _this = this; // TODO dispatch this after clear\n\n\n    if (this.events.isEnabled(\"removed\")) {\n      $object.each(this._dictionary, function (key, value) {\n        _this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: _this,\n          oldValue: value\n        });\n      });\n    }\n\n    this._dictionary = {};\n\n    if (this.events.isEnabled(\"cleared\")) {\n      this.events.dispatchImmediately(\"cleared\", {\n        type: \"cleared\",\n        target: this\n      });\n    }\n  };\n  /**\r\n   * Copies items from another Dictionary.\r\n   *\r\n   * @param source  A Dictionary to copy items from\r\n   */\n\n\n  Dictionary.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    $iter.each(source.iterator(), function (a) {\n      // TODO fix this type cast\n      _this.setKey(a[0], a[1]);\n    });\n  };\n  /**\r\n   * Returns an interator that can be used to iterate through all items in\r\n   * the dictionary.\r\n   *\r\n   * @return Iterator\r\n   */\n\n\n  Dictionary.prototype.iterator = function () {\n    // @todo fix this type after the Iterator bug is fixed\n    // https://github.com/Microsoft/TypeScript/issues/16730\n    return $object.entries(this._dictionary);\n  };\n  /**\r\n   * Returns an ES6 iterator for the keys/values of the dictionary.\r\n   */\n\n\n  Dictionary.prototype[Symbol.iterator] = function () {\n    var _a, _b, _i, key;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [];\n\n          for (_b in this._dictionary) _a.push(_b);\n\n          _i = 0;\n          _c.label = 1;\n\n        case 1:\n          if (!(_i < _a.length)) return [3\n          /*break*/\n          , 4];\n          key = _a[_i];\n          if (!$object.hasKey(this._dictionary, key)) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , [key, this._dictionary[key]]];\n\n        case 2:\n          _c.sent();\n\n          _c.label = 3;\n\n        case 3:\n          _i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n  /**\r\n   * Calls `f` for each key/value in the dictionary.\r\n   */\n\n\n  Dictionary.prototype.each = function (f) {\n    $iter.each(this.iterator(), function (_a) {\n      var _b = __read(_a, 2),\n          key = _b[0],\n          value = _b[1];\n\n      return f(key, value);\n    });\n  };\n  /**\r\n   * Returns an iterator that can be used to iterate through all items in\r\n   * the dictionary, ordered by key.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Iterator\r\n   */\n\n\n  Dictionary.prototype.sortedIterator = function () {\n    return $iter.sort(this.iterator(), function (x, y) {\n      return $string.order(x[0], y[0]);\n    });\n  };\n\n  return Dictionary;\n}();\n\nexport { Dictionary };\n/**\r\n * A version of a [[Dictionary]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\n\nvar DictionaryTemplate =\n/** @class */\nfunction (_super) {\n  __extends(DictionaryTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t Template object\r\n   */\n\n\n  function DictionaryTemplate(t) {\n    var _this = _super.call(this) || this;\n\n    _this.template = t;\n    return _this;\n  }\n\n  Object.defineProperty(DictionaryTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other dictionary.\r\n   *\r\n   * @param source  Source dictionary\r\n   */\n\n  DictionaryTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    $iter.each(source.iterator(), function (a) {\n      // TODO fix this type cast\n      // TODO why does this need to clone ?\n      _this.setKey(a[0], a[1].clone());\n    });\n  };\n  /**\r\n   * Instantiates a new object of the specified type, adds it to specified\r\n   * `key` in the dictionary, and returns it.\r\n   *\r\n   * @param make  Item type to use. Will use the default type for the dictionary if not specified.\r\n   * @return      Newly created item\r\n   */\n\n\n  DictionaryTemplate.prototype.create = function (key) {\n    var _this = this;\n\n    return this.insertKeyIfEmpty(key, function () {\n      return _this.template.clone();\n    });\n  };\n\n  return DictionaryTemplate;\n}(Dictionary);\n\nexport { DictionaryTemplate };","map":{"version":3,"names":["__extends","__generator","__read","Disposer","EventDispatcher","$object","$iter","$string","DictionaryDisposer","_super","dict","_this","disposer","events","on","x","oldValue","dispose","undefined","call","each","iterator","a","v","Dictionary","_dictionary","prototype","hasKey","key","getKey","insertKey","value","Error","isEnabled","dispatchImmediately","type","target","newValue","setKey","updateKey","fn","removeKey","insertKeyIfEmpty","ifEmpty","clear","copyFrom","source","entries","Symbol","_a","_b","_i","_c","label","push","length","sent","f","sortedIterator","sort","y","order","DictionaryTemplate","t","template","Object","defineProperty","get","_template","set","isTemplate","enumerable","configurable","clone","create"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js"],"sourcesContent":["import { __extends, __generator, __read } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Disposer } from \"./Disposer\";\r\nimport { EventDispatcher } from \"./EventDispatcher\";\r\nimport * as $object from \"./Object\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $string from \"./String\";\r\n/**\r\n * A disposable dictionary, which when disposed itself will call `dispose()`\r\n * method on all its items.\r\n */\r\nvar DictionaryDisposer = /** @class */ (function (_super) {\r\n    __extends(DictionaryDisposer, _super);\r\n    function DictionaryDisposer(dict) {\r\n        var _this = this;\r\n        var disposer = dict.events.on(\"removed\", function (x) {\r\n            x.oldValue.dispose();\r\n        }, undefined, false);\r\n        _this = _super.call(this, function () {\r\n            disposer.dispose();\r\n            // TODO clear the dictionary ?\r\n            $iter.each(dict.iterator(), function (a) {\r\n                var v = a[1];\r\n                v.dispose();\r\n            });\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    return DictionaryDisposer;\r\n}(Disposer));\r\nexport { DictionaryDisposer };\r\n/**\r\n * A Dictionary is collection where values of some type can be mapped to\r\n * string keys.\r\n *\r\n * You might call it an \"associative list\" or \"associative array\".\r\n */\r\nvar Dictionary = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Dictionary() {\r\n        /**\r\n         * Event dispatcher.\r\n         */\r\n        this.events = new EventDispatcher();\r\n        this._dictionary = {};\r\n    }\r\n    /**\r\n     * Returns `true` if key exists in Dictionary.\r\n     *\r\n     * @param key  The key to search for\r\n     * @return `true` if key exists, `false` if it doesn't\r\n     */\r\n    Dictionary.prototype.hasKey = function (key) {\r\n        return $object.hasKey(this._dictionary, key);\r\n    };\r\n    /**\r\n     * Returns the value for a specific key.\r\n     *\r\n     * @param key  The key to search for\r\n     * @return Value for the key, or `undefined` if it doesn't exist\r\n     */\r\n    Dictionary.prototype.getKey = function (key) {\r\n        return this._dictionary[key];\r\n    };\r\n    /**\r\n     * Inserts value at specific key.\r\n     *\r\n     * Will thrown an exception if the key already exists in the dictionary.\r\n     *\r\n     * @param key    Key\r\n     * @param value  Value\r\n     */\r\n    Dictionary.prototype.insertKey = function (key, value) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            throw new Error(\"Key \" + key + \" already exists in dictionary\");\r\n        }\r\n        else {\r\n            this._dictionary[key] = value;\r\n            if (this.events.isEnabled(\"insertKey\")) {\r\n                this.events.dispatchImmediately(\"insertKey\", {\r\n                    type: \"insertKey\",\r\n                    target: this,\r\n                    key: key,\r\n                    newValue: value\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Adds or updates key/value into dictionary.\r\n     *\r\n     * If the key already exists, the old value will be overwritten.\r\n     *\r\n     * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n     *\r\n     * @param key    Key\r\n     * @param value  Value\r\n     */\r\n    Dictionary.prototype.setKey = function (key, value) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            var oldValue = this._dictionary[key];\r\n            if (oldValue !== value) {\r\n                this._dictionary[key] = value;\r\n                if (this.events.isEnabled(\"setKey\")) {\r\n                    this.events.dispatchImmediately(\"setKey\", {\r\n                        type: \"setKey\",\r\n                        target: this,\r\n                        key: key,\r\n                        oldValue: oldValue,\r\n                        newValue: value\r\n                    });\r\n                }\r\n                if (this.events.isEnabled(\"removed\")) {\r\n                    this.events.dispatchImmediately(\"removed\", {\r\n                        type: \"removed\",\r\n                        target: this,\r\n                        oldValue: oldValue\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._dictionary[key] = value;\r\n            if (this.events.isEnabled(\"insertKey\")) {\r\n                this.events.dispatchImmediately(\"insertKey\", {\r\n                    type: \"insertKey\",\r\n                    target: this,\r\n                    key: key,\r\n                    newValue: value\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates the value at specific `key` using custom function.\r\n     *\r\n     * Passes in current value into the function, and uses its output as a new\r\n     * value.\r\n     *\r\n     * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param key  Key\r\n     * @param fn   Function to transform the value\r\n     */\r\n    Dictionary.prototype.updateKey = function (key, fn) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            var oldValue = this._dictionary[key];\r\n            var newValue = fn(oldValue);\r\n            if (oldValue !== newValue) {\r\n                this._dictionary[key] = newValue;\r\n                if (this.events.isEnabled(\"setKey\")) {\r\n                    this.events.dispatchImmediately(\"setKey\", {\r\n                        type: \"setKey\",\r\n                        target: this,\r\n                        key: key,\r\n                        oldValue: oldValue,\r\n                        newValue: newValue\r\n                    });\r\n                }\r\n                if (this.events.isEnabled(\"removed\")) {\r\n                    this.events.dispatchImmediately(\"removed\", {\r\n                        type: \"removed\",\r\n                        target: this,\r\n                        oldValue: oldValue\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Key \" + key + \" doesn't exist in dictionary\");\r\n        }\r\n    };\r\n    /**\r\n     * Removes value at specific `key` from dictionary.\r\n     *\r\n     * @param key  Key to remove\r\n     */\r\n    Dictionary.prototype.removeKey = function (key) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            var oldValue = this._dictionary[key];\r\n            delete this._dictionary[key];\r\n            if (this.events.isEnabled(\"removeKey\")) {\r\n                this.events.dispatchImmediately(\"removeKey\", {\r\n                    type: \"removeKey\",\r\n                    target: this,\r\n                    key: key,\r\n                    oldValue: oldValue\r\n                });\r\n            }\r\n            if (this.events.isEnabled(\"removed\")) {\r\n                this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: this,\r\n                    oldValue: oldValue\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * [insertKeyIfEmpty description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo description\r\n     * @param key      [description]\r\n     * @param ifEmpty  [description]\r\n     * @return [description]\r\n     */\r\n    Dictionary.prototype.insertKeyIfEmpty = function (key, ifEmpty) {\r\n        if (!this.hasKey(key)) {\r\n            this.insertKey(key, ifEmpty());\r\n        }\r\n        return this.getKey(key);\r\n    };\r\n    /**\r\n     * Removes all items from the dictionary.\r\n     */\r\n    Dictionary.prototype.clear = function () {\r\n        var _this = this;\r\n        // TODO dispatch this after clear\r\n        if (this.events.isEnabled(\"removed\")) {\r\n            $object.each(this._dictionary, function (key, value) {\r\n                _this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: _this,\r\n                    oldValue: value\r\n                });\r\n            });\r\n        }\r\n        this._dictionary = {};\r\n        if (this.events.isEnabled(\"cleared\")) {\r\n            this.events.dispatchImmediately(\"cleared\", {\r\n                type: \"cleared\",\r\n                target: this\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Copies items from another Dictionary.\r\n     *\r\n     * @param source  A Dictionary to copy items from\r\n     */\r\n    Dictionary.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (a) {\r\n            // TODO fix this type cast\r\n            _this.setKey(a[0], a[1]);\r\n        });\r\n    };\r\n    /**\r\n     * Returns an interator that can be used to iterate through all items in\r\n     * the dictionary.\r\n     *\r\n     * @return Iterator\r\n     */\r\n    Dictionary.prototype.iterator = function () {\r\n        // @todo fix this type after the Iterator bug is fixed\r\n        // https://github.com/Microsoft/TypeScript/issues/16730\r\n        return $object.entries(this._dictionary);\r\n    };\r\n    /**\r\n     * Returns an ES6 iterator for the keys/values of the dictionary.\r\n     */\r\n    Dictionary.prototype[Symbol.iterator] = function () {\r\n        var _a, _b, _i, key;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    _a = [];\r\n                    for (_b in this._dictionary)\r\n                        _a.push(_b);\r\n                    _i = 0;\r\n                    _c.label = 1;\r\n                case 1:\r\n                    if (!(_i < _a.length)) return [3 /*break*/, 4];\r\n                    key = _a[_i];\r\n                    if (!$object.hasKey(this._dictionary, key)) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, [key, this._dictionary[key]]];\r\n                case 2:\r\n                    _c.sent();\r\n                    _c.label = 3;\r\n                case 3:\r\n                    _i++;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Calls `f` for each key/value in the dictionary.\r\n     */\r\n    Dictionary.prototype.each = function (f) {\r\n        $iter.each(this.iterator(), function (_a) {\r\n            var _b = __read(_a, 2), key = _b[0], value = _b[1];\r\n            return f(key, value);\r\n        });\r\n    };\r\n    /**\r\n     * Returns an iterator that can be used to iterate through all items in\r\n     * the dictionary, ordered by key.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Iterator\r\n     */\r\n    Dictionary.prototype.sortedIterator = function () {\r\n        return $iter.sort(this.iterator(), function (x, y) { return $string.order(x[0], y[0]); });\r\n    };\r\n    return Dictionary;\r\n}());\r\nexport { Dictionary };\r\n/**\r\n * A version of a [[Dictionary]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nvar DictionaryTemplate = /** @class */ (function (_super) {\r\n    __extends(DictionaryTemplate, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param t Template object\r\n     */\r\n    function DictionaryTemplate(t) {\r\n        var _this = _super.call(this) || this;\r\n        _this.template = t;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DictionaryTemplate.prototype, \"template\", {\r\n        /**\r\n         * @return Template object\r\n         */\r\n        get: function () {\r\n            return this._template;\r\n        },\r\n        /**\r\n         * A \"template\" object to copy all properties from when creating new list\r\n         * items.\r\n         *\r\n         * @param v  Template object\r\n         */\r\n        set: function (v) {\r\n            v.isTemplate = true;\r\n            this._template = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all elements from other dictionary.\r\n     *\r\n     * @param source  Source dictionary\r\n     */\r\n    DictionaryTemplate.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (a) {\r\n            // TODO fix this type cast\r\n            // TODO why does this need to clone ?\r\n            _this.setKey(a[0], a[1].clone());\r\n        });\r\n    };\r\n    /**\r\n     * Instantiates a new object of the specified type, adds it to specified\r\n     * `key` in the dictionary, and returns it.\r\n     *\r\n     * @param make  Item type to use. Will use the default type for the dictionary if not specified.\r\n     * @return      Newly created item\r\n     */\r\n    DictionaryTemplate.prototype.create = function (key) {\r\n        var _this = this;\r\n        return this.insertKeyIfEmpty(key, function () { return _this.template.clone(); });\r\n    };\r\n    return DictionaryTemplate;\r\n}(Dictionary));\r\nexport { DictionaryTemplate };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}