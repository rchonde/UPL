{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ColorModifier } from \"./ColorModifier\";\nimport { registry } from \"../../Registry\";\nimport * as $math from \"../../utils/Math\";\nimport * as $type from \"../../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"GradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\n\nvar GradientModifier =\n/** @class */\nfunction (_super) {\n  __extends(GradientModifier, _super);\n  /**\r\n   * Constructor.\r\n   */\n\n\n  function GradientModifier() {\n    var _this = _super.call(this) || this;\n\n    _this.lightnesses = [];\n    _this.brightnesses = [];\n    _this.opacities = [];\n    _this.offsets = [];\n    _this.className = \"GradientModifier\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(GradientModifier.prototype, \"lightnesses\", {\n    /**\r\n     * @return Lightness values\r\n     */\n    get: function () {\n      return this._lightnesses;\n    },\n\n    /**\r\n     * An array of lightness values for each step.\r\n     *\r\n     * @param value  Lightness values\r\n     */\n    set: function (value) {\n      this._lightnesses = value;\n      this._brightnesses = [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GradientModifier.prototype, \"brightnesses\", {\n    /**\r\n     * @return Brightness values\r\n     */\n    get: function () {\n      return this._brightnesses;\n    },\n\n    /**\r\n     * An array of brightness values for each step.\r\n     *\r\n     * @param value  Brightness values\r\n     */\n    set: function (value) {\n      this._brightnesses = value;\n      this._lightnesses = [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GradientModifier.prototype, \"opacities\", {\n    /**\r\n     * @return Opacity values\r\n     */\n    get: function () {\n      return this._opacities;\n    },\n\n    /**\r\n     * An array of opacity values for each step.\r\n     *\r\n     * @param value  Opacity values\r\n     */\n    set: function (value) {\n      this._opacities = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GradientModifier.prototype, \"offsets\", {\n    /**\r\n     * @return Offsets\r\n     */\n    get: function () {\n      return this._offsets;\n    },\n\n    /**\r\n     * An array of relative position (0-1) for each step.\r\n     *\r\n     * If not set, all steps will be of equal relative length.\r\n     *\r\n     * @param value  Offsets\r\n     */\n    set: function (value) {\n      this._offsets = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Modifies the color based on step setting.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Source color\r\n   * @return A gradient that matches set modification rules\r\n   */\n\n  GradientModifier.prototype.modify = function (value) {\n    // Clear current gradient\n    this.gradient.clear(); // Get step count\n\n    var count = 0;\n\n    if (this.opacities) {\n      count = $math.max(count, this.opacities.length);\n    }\n\n    if (this.lightnesses) {\n      count = $math.max(count, this.lightnesses.length);\n    }\n\n    if (this.brightnesses) {\n      count = $math.max(count, this.brightnesses.length);\n    } // Init step values\n\n\n    var opacity = 1,\n        lightness,\n        brightness; // Apply steps\n\n    for (var i = 0; i < count; i++) {\n      // Take base color\n      var color = value; // Check if there are any parameters for this step\n\n      if (this.opacities && $type.isNumber(this.opacities[i])) {\n        opacity = this.opacities[i];\n      }\n\n      if (this.lightnesses && $type.isNumber(this.lightnesses[i])) {\n        lightness = this.lightnesses[i];\n        brightness = undefined;\n      }\n\n      if (this.brightnesses && $type.isNumber(this.brightnesses[i])) {\n        brightness = this.brightnesses[i];\n        lightness = undefined;\n      } // Check if we need to brighten/lighten color\n\n\n      if ($type.isNumber(brightness)) {\n        color = value.brighten(this.brightnesses[i]);\n      } else if ($type.isNumber(lightness)) {\n        color = value.lighten(this.lightnesses[i]);\n      } // Get offset (it's OK if it's undefined)\n\n\n      var offset = this.offsets[i]; // Apply step\n\n      this.gradient.addColor(color, opacity, offset);\n    }\n\n    return this.gradient;\n  };\n\n  GradientModifier.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this._offsets = source.offsets;\n    this._brightnesses = source.brightnesses;\n    this._lightnesses = source.lightnesses;\n    this._opacities = source.opacities;\n  };\n\n  return GradientModifier;\n}(ColorModifier);\n\nexport { GradientModifier };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"GradientModifier\"] = GradientModifier;","map":{"version":3,"names":["__extends","ColorModifier","registry","$math","$type","GradientModifier","_super","_this","call","lightnesses","brightnesses","opacities","offsets","className","applyTheme","Object","defineProperty","prototype","get","_lightnesses","set","value","_brightnesses","enumerable","configurable","_opacities","_offsets","modify","gradient","clear","count","max","length","opacity","lightness","brightness","i","color","isNumber","undefined","brighten","lighten","offset","addColor","copyFrom","source","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/GradientModifier.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColorModifier } from \"./ColorModifier\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $type from \"../../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"GradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nvar GradientModifier = /** @class */ (function (_super) {\r\n    __extends(GradientModifier, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function GradientModifier() {\r\n        var _this = _super.call(this) || this;\r\n        _this.lightnesses = [];\r\n        _this.brightnesses = [];\r\n        _this.opacities = [];\r\n        _this.offsets = [];\r\n        _this.className = \"GradientModifier\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(GradientModifier.prototype, \"lightnesses\", {\r\n        /**\r\n         * @return Lightness values\r\n         */\r\n        get: function () {\r\n            return this._lightnesses;\r\n        },\r\n        /**\r\n         * An array of lightness values for each step.\r\n         *\r\n         * @param value  Lightness values\r\n         */\r\n        set: function (value) {\r\n            this._lightnesses = value;\r\n            this._brightnesses = [];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GradientModifier.prototype, \"brightnesses\", {\r\n        /**\r\n         * @return Brightness values\r\n         */\r\n        get: function () {\r\n            return this._brightnesses;\r\n        },\r\n        /**\r\n         * An array of brightness values for each step.\r\n         *\r\n         * @param value  Brightness values\r\n         */\r\n        set: function (value) {\r\n            this._brightnesses = value;\r\n            this._lightnesses = [];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GradientModifier.prototype, \"opacities\", {\r\n        /**\r\n         * @return Opacity values\r\n         */\r\n        get: function () {\r\n            return this._opacities;\r\n        },\r\n        /**\r\n         * An array of opacity values for each step.\r\n         *\r\n         * @param value  Opacity values\r\n         */\r\n        set: function (value) {\r\n            this._opacities = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GradientModifier.prototype, \"offsets\", {\r\n        /**\r\n         * @return Offsets\r\n         */\r\n        get: function () {\r\n            return this._offsets;\r\n        },\r\n        /**\r\n         * An array of relative position (0-1) for each step.\r\n         *\r\n         * If not set, all steps will be of equal relative length.\r\n         *\r\n         * @param value  Offsets\r\n         */\r\n        set: function (value) {\r\n            this._offsets = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Modifies the color based on step setting.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Source color\r\n     * @return A gradient that matches set modification rules\r\n     */\r\n    GradientModifier.prototype.modify = function (value) {\r\n        // Clear current gradient\r\n        this.gradient.clear();\r\n        // Get step count\r\n        var count = 0;\r\n        if (this.opacities) {\r\n            count = $math.max(count, this.opacities.length);\r\n        }\r\n        if (this.lightnesses) {\r\n            count = $math.max(count, this.lightnesses.length);\r\n        }\r\n        if (this.brightnesses) {\r\n            count = $math.max(count, this.brightnesses.length);\r\n        }\r\n        // Init step values\r\n        var opacity = 1, lightness, brightness;\r\n        // Apply steps\r\n        for (var i = 0; i < count; i++) {\r\n            // Take base color\r\n            var color = value;\r\n            // Check if there are any parameters for this step\r\n            if (this.opacities && $type.isNumber(this.opacities[i])) {\r\n                opacity = this.opacities[i];\r\n            }\r\n            if (this.lightnesses && $type.isNumber(this.lightnesses[i])) {\r\n                lightness = this.lightnesses[i];\r\n                brightness = undefined;\r\n            }\r\n            if (this.brightnesses && $type.isNumber(this.brightnesses[i])) {\r\n                brightness = this.brightnesses[i];\r\n                lightness = undefined;\r\n            }\r\n            // Check if we need to brighten/lighten color\r\n            if ($type.isNumber(brightness)) {\r\n                color = value.brighten(this.brightnesses[i]);\r\n            }\r\n            else if ($type.isNumber(lightness)) {\r\n                color = value.lighten(this.lightnesses[i]);\r\n            }\r\n            // Get offset (it's OK if it's undefined)\r\n            var offset = this.offsets[i];\r\n            // Apply step\r\n            this.gradient.addColor(color, opacity, offset);\r\n        }\r\n        return this.gradient;\r\n    };\r\n    GradientModifier.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this._offsets = source.offsets;\r\n        this._brightnesses = source.brightnesses;\r\n        this._lightnesses = source.lightnesses;\r\n        this._opacities = source.opacities;\r\n    };\r\n    return GradientModifier;\r\n}(ColorModifier));\r\nexport { GradientModifier };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GradientModifier\"] = GradientModifier;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}