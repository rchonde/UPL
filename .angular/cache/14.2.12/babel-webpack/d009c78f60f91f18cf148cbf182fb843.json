{"ast":null,"code":"/**\r\n * Module for building 3D serial charts.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\nimport { Container } from \"../../core/Container\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar XYChart3DDataItem =\n/** @class */\nfunction (_super) {\n  __extends(XYChart3DDataItem, _super);\n\n  function XYChart3DDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"XYChart3DDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return XYChart3DDataItem;\n}(XYChartDataItem);\n\nexport { XYChart3DDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\n\nvar XYChart3D =\n/** @class */\nfunction (_super) {\n  __extends(XYChart3D, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYChart3D() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Type of the axis renderer to use for X axes.\r\n     */\n\n\n    _this._axisRendererX = AxisRendererX3D;\n    /**\r\n     * Type of the axis renderer to use for Y axes.\r\n     */\n\n    _this._axisRendererY = AxisRendererY3D;\n    _this.className = \"XYChart3D\"; // Set defaults\n\n    _this.depth = 30;\n    _this.angle = 30; // Creeate container for columns\n\n    var columnsContainer = _this.seriesContainer.createChild(Container);\n\n    columnsContainer.shouldClone = false;\n    columnsContainer.isMeasured = false;\n    columnsContainer.layout = \"none\";\n    _this.columnsContainer = columnsContainer;\n    _this.columnsContainer.mask = _this.createChild(Sprite); // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * This is done because for some reason IE doesn't change mask if path of a\r\n   * mask changes.\r\n   */\n\n\n  XYChart3D.prototype.updateSeriesMasks = function () {\n    _super.prototype.updateSeriesMasks.call(this);\n\n    if ($utils.isIE()) {\n      var columnsContainer = this.columnsContainer;\n      var mask = columnsContainer.mask;\n      columnsContainer.mask = undefined;\n      columnsContainer.mask = mask;\n    }\n  };\n\n  Object.defineProperty(XYChart3D.prototype, \"depth\", {\n    /**\r\n     * @return Depth (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"depth\");\n    },\n\n    /**\r\n     * Depth of the 3D chart / columns in pixels.\r\n     *\r\n     * @param value  Depth (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"depth\", value);\n      this.fixLayout();\n      this.invalidateDataUsers();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart3D.prototype, \"angle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"angle\");\n    },\n\n    /**\r\n     * Angle the chart is viewed at.\r\n     *\r\n     * @todo Description (review)\r\n     * @param value  Angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"angle\", value);\n      this.fixLayout();\n      this.invalidateDataUsers();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart3D.prototype, \"dx3D\", {\n    /**\r\n     * A calculated horizontal 3D offset (px).\r\n     *\r\n     * @readonly\r\n     * @return Offset (px)\r\n     */\n    get: function () {\n      return $math.cos(this.angle) * this.depth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart3D.prototype, \"dy3D\", {\n    /**\r\n     * A calculated vertical 3D offset (px).\r\n     *\r\n     * @readonly\r\n     * @return Offset (px)\r\n     */\n    get: function () {\n      return -$math.sin(this.angle) * this.depth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * (Re)validates layout\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  XYChart3D.prototype.validateLayout = function () {\n    _super.prototype.validateLayout.call(this);\n\n    this.fixColumns();\n  };\n  /**\r\n   * Updates the layout (padding and scrollbar positions) to accommodate for\r\n   * 3D depth and angle.\r\n   */\n\n\n  XYChart3D.prototype.fixLayout = function () {\n    this.chartContainer.paddingTop = -this.dy3D;\n    this.chartContainer.paddingRight = this.dx3D;\n\n    if (this.scrollbarX) {\n      this.scrollbarX.dy = this.dy3D;\n      this.scrollbarX.dx = this.dx3D;\n    }\n\n    if (this.scrollbarY) {\n      this.scrollbarY.dy = this.dy3D;\n      this.scrollbarY.dx = this.dx3D;\n    }\n\n    this.fixColumns();\n\n    _super.prototype.fixLayout.call(this);\n  };\n  /**\r\n   * Updates column positions, offset and dimensions based on chart's angle\r\n   * and depth.\r\n   */\n\n\n  XYChart3D.prototype.fixColumns = function () {\n    var _this = this;\n\n    var count = 1;\n    var i = 0;\n    $iter.each(this.series.iterator(), function (series) {\n      if (series instanceof ColumnSeries3D) {\n        if (!series.clustered && i > 0) {\n          count++;\n        }\n\n        series.depthIndex = count - 1;\n        i++;\n      }\n    });\n    var s = 0;\n    $iter.each(this.series.iterator(), function (series) {\n      if (series instanceof ColumnSeries3D) {\n        series.depth = _this.depth / count;\n        series.angle = _this.angle;\n\n        if (series.columnsContainer == _this.columnsContainer) {\n          series.dx = _this.depth / count * $math.cos(_this.angle) * series.depthIndex;\n          series.dy = -_this.depth / count * $math.sin(_this.angle) * series.depthIndex;\n        }\n\n        var inversed_1 = false;\n\n        if (series.baseAxis == series.xAxis && series.xAxis.renderer.inversed || series.baseAxis == series.yAxis && series.yAxis.renderer.inversed) {\n          inversed_1 = true;\n        }\n\n        var i_1 = 1;\n        series.dataItems.each(function (dataItem) {\n          var column = dataItem.column;\n\n          if (column) {\n            if (inversed_1) {\n              column.zIndex = 1000 * (1000 - i_1) + s - series.depthIndex * 100;\n            } else {\n              column.zIndex = 1000 * i_1 + s - series.depthIndex * 100;\n            }\n          }\n\n          i_1++;\n        });\n\n        if (inversed_1) {\n          s--;\n        } else {\n          s++;\n        }\n      }\n    });\n    this.maskColumns();\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  XYChart3D.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up series\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          config.series[i].type = config.series[i].type || \"ColumnSeries3D\";\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  XYChart3D.prototype.maskColumns = function () {\n    var w = this.plotContainer.pixelWidth;\n    var h = this.plotContainer.pixelHeight;\n    var dx = this.dx3D;\n    var dy = this.dy3D;\n    var path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: dx,\n      y: dy\n    }) + $path.lineTo({\n      x: w + dx,\n      y: dy\n    }) + $path.lineTo({\n      x: w + dx,\n      y: h + dy\n    }) + $path.lineTo({\n      x: w,\n      y: h\n    }) + $path.lineTo({\n      x: w,\n      y: h\n    }) + $path.lineTo({\n      x: 0,\n      y: h\n    }) + $path.closePath();\n    var columnsContainer = this.columnsContainer;\n\n    if (columnsContainer && columnsContainer.mask) {\n      columnsContainer.mask.path = path;\n    }\n  };\n\n  return XYChart3D;\n}(XYChart);\n\nexport { XYChart3D };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;","map":{"version":3,"names":["__extends","XYChart","XYChartDataItem","Container","Sprite","AxisRendererX3D","AxisRendererY3D","ColumnSeries3D","registry","$iter","$math","$type","$path","$utils","XYChart3DDataItem","_super","_this","call","className","applyTheme","XYChart3D","_axisRendererX","_axisRendererY","depth","angle","columnsContainer","seriesContainer","createChild","shouldClone","isMeasured","layout","mask","prototype","updateSeriesMasks","isIE","undefined","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","fixLayout","invalidateDataUsers","enumerable","configurable","cos","sin","validateLayout","fixColumns","chartContainer","paddingTop","dy3D","paddingRight","dx3D","scrollbarX","dy","dx","scrollbarY","count","i","each","series","iterator","clustered","depthIndex","s","inversed_1","baseAxis","xAxis","renderer","inversed","yAxis","i_1","dataItems","dataItem","column","zIndex","maskColumns","processConfig","config","hasValue","isArray","len","length","type","w","plotContainer","pixelWidth","h","pixelHeight","path","moveTo","x","y","lineTo","closePath","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/types/XYChart3D.js"],"sourcesContent":["/**\r\n * Module for building 3D serial charts.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar XYChart3DDataItem = /** @class */ (function (_super) {\r\n    __extends(XYChart3DDataItem, _super);\r\n    function XYChart3DDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"XYChart3DDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return XYChart3DDataItem;\r\n}(XYChartDataItem));\r\nexport { XYChart3DDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nvar XYChart3D = /** @class */ (function (_super) {\r\n    __extends(XYChart3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYChart3D() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Type of the axis renderer to use for X axes.\r\n         */\r\n        _this._axisRendererX = AxisRendererX3D;\r\n        /**\r\n         * Type of the axis renderer to use for Y axes.\r\n         */\r\n        _this._axisRendererY = AxisRendererY3D;\r\n        _this.className = \"XYChart3D\";\r\n        // Set defaults\r\n        _this.depth = 30;\r\n        _this.angle = 30;\r\n        // Creeate container for columns\r\n        var columnsContainer = _this.seriesContainer.createChild(Container);\r\n        columnsContainer.shouldClone = false;\r\n        columnsContainer.isMeasured = false;\r\n        columnsContainer.layout = \"none\";\r\n        _this.columnsContainer = columnsContainer;\r\n        _this.columnsContainer.mask = _this.createChild(Sprite);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * This is done because for some reason IE doesn't change mask if path of a\r\n     * mask changes.\r\n     */\r\n    XYChart3D.prototype.updateSeriesMasks = function () {\r\n        _super.prototype.updateSeriesMasks.call(this);\r\n        if ($utils.isIE()) {\r\n            var columnsContainer = this.columnsContainer;\r\n            var mask = columnsContainer.mask;\r\n            columnsContainer.mask = undefined;\r\n            columnsContainer.mask = mask;\r\n        }\r\n    };\r\n    Object.defineProperty(XYChart3D.prototype, \"depth\", {\r\n        /**\r\n         * @return Depth (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"depth\");\r\n        },\r\n        /**\r\n         * Depth of the 3D chart / columns in pixels.\r\n         *\r\n         * @param value  Depth (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"depth\", value);\r\n            this.fixLayout();\r\n            this.invalidateDataUsers();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart3D.prototype, \"angle\", {\r\n        /**\r\n         * @return Angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"angle\");\r\n        },\r\n        /**\r\n         * Angle the chart is viewed at.\r\n         *\r\n         * @todo Description (review)\r\n         * @param value  Angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"angle\", value);\r\n            this.fixLayout();\r\n            this.invalidateDataUsers();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart3D.prototype, \"dx3D\", {\r\n        /**\r\n         * A calculated horizontal 3D offset (px).\r\n         *\r\n         * @readonly\r\n         * @return Offset (px)\r\n         */\r\n        get: function () {\r\n            return $math.cos(this.angle) * this.depth;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart3D.prototype, \"dy3D\", {\r\n        /**\r\n         * A calculated vertical 3D offset (px).\r\n         *\r\n         * @readonly\r\n         * @return Offset (px)\r\n         */\r\n        get: function () {\r\n            return -$math.sin(this.angle) * this.depth;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * (Re)validates layout\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart3D.prototype.validateLayout = function () {\r\n        _super.prototype.validateLayout.call(this);\r\n        this.fixColumns();\r\n    };\r\n    /**\r\n     * Updates the layout (padding and scrollbar positions) to accommodate for\r\n     * 3D depth and angle.\r\n     */\r\n    XYChart3D.prototype.fixLayout = function () {\r\n        this.chartContainer.paddingTop = -this.dy3D;\r\n        this.chartContainer.paddingRight = this.dx3D;\r\n        if (this.scrollbarX) {\r\n            this.scrollbarX.dy = this.dy3D;\r\n            this.scrollbarX.dx = this.dx3D;\r\n        }\r\n        if (this.scrollbarY) {\r\n            this.scrollbarY.dy = this.dy3D;\r\n            this.scrollbarY.dx = this.dx3D;\r\n        }\r\n        this.fixColumns();\r\n        _super.prototype.fixLayout.call(this);\r\n    };\r\n    /**\r\n     * Updates column positions, offset and dimensions based on chart's angle\r\n     * and depth.\r\n     */\r\n    XYChart3D.prototype.fixColumns = function () {\r\n        var _this = this;\r\n        var count = 1;\r\n        var i = 0;\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (series instanceof ColumnSeries3D) {\r\n                if (!series.clustered && i > 0) {\r\n                    count++;\r\n                }\r\n                series.depthIndex = count - 1;\r\n                i++;\r\n            }\r\n        });\r\n        var s = 0;\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (series instanceof ColumnSeries3D) {\r\n                series.depth = _this.depth / (count);\r\n                series.angle = _this.angle;\r\n                if (series.columnsContainer == _this.columnsContainer) {\r\n                    series.dx = _this.depth / (count) * $math.cos(_this.angle) * (series.depthIndex);\r\n                    series.dy = -_this.depth / (count) * $math.sin(_this.angle) * (series.depthIndex);\r\n                }\r\n                var inversed_1 = false;\r\n                if ((series.baseAxis == series.xAxis && series.xAxis.renderer.inversed) || (series.baseAxis == series.yAxis && series.yAxis.renderer.inversed)) {\r\n                    inversed_1 = true;\r\n                }\r\n                var i_1 = 1;\r\n                series.dataItems.each(function (dataItem) {\r\n                    var column = dataItem.column;\r\n                    if (column) {\r\n                        if (inversed_1) {\r\n                            column.zIndex = 1000 * (1000 - i_1) + s - series.depthIndex * 100;\r\n                        }\r\n                        else {\r\n                            column.zIndex = 1000 * i_1 + s - series.depthIndex * 100;\r\n                        }\r\n                    }\r\n                    i_1++;\r\n                });\r\n                if (inversed_1) {\r\n                    s--;\r\n                }\r\n                else {\r\n                    s++;\r\n                }\r\n            }\r\n        });\r\n        this.maskColumns();\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    XYChart3D.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up series\r\n            if ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n                for (var i = 0, len = config.series.length; i < len; i++) {\r\n                    config.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    XYChart3D.prototype.maskColumns = function () {\r\n        var w = this.plotContainer.pixelWidth;\r\n        var h = this.plotContainer.pixelHeight;\r\n        var dx = this.dx3D;\r\n        var dy = this.dy3D;\r\n        var path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n        var columnsContainer = this.columnsContainer;\r\n        if (columnsContainer && columnsContainer.mask) {\r\n            columnsContainer.mask.path = path;\r\n        }\r\n    };\r\n    return XYChart3D;\r\n}(XYChart));\r\nexport { XYChart3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}