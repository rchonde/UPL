{"ast":null,"code":"/**\r\n * Cursor for XY chart\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Cursor } from \"./Cursor\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { DateAxis } from \"../axes/DateAxis\";\nimport { XYSeries } from \"../series/XYSeries\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\n\nvar XYCursor =\n/** @class */\nfunction (_super) {\n  __extends(XYCursor, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYCursor() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Vertical cursor line element.\r\n     */\n\n\n    _this._lineX = new MutableValueDisposer();\n    /**\r\n     * Horizontal cursor line element.\r\n     */\n\n    _this._lineY = new MutableValueDisposer();\n    /**\r\n     * Horizontal [[Axis]].\r\n     */\n\n    _this._xAxis = new MutableValueDisposer();\n    /**\r\n     * Vertical [[Axis]].\r\n     */\n\n    _this._yAxis = new MutableValueDisposer();\n    _this._snapToDisposers = [];\n    _this.className = \"XYCursor\"; // Defaults\n\n    _this.behavior = \"zoomX\";\n    _this.maxPanOut = 0.1;\n    var interfaceColors = new InterfaceColorSet();\n    _this.snapOnPan = true; // Create selection element\n\n    var selection = _this.createChild(Sprite);\n\n    selection.shouldClone = false;\n    selection.fillOpacity = 0.2;\n    selection.fill = interfaceColors.getFor(\"alternativeBackground\");\n    selection.isMeasured = false;\n    selection.visible = false;\n    selection.interactionsEnabled = false;\n    _this.selection = selection;\n\n    _this._disposers.push(_this.selection); // Create cursor's vertical line\n\n\n    var lineX = _this.createChild(Sprite);\n\n    lineX.shouldClone = false;\n    lineX.stroke = interfaceColors.getFor(\"grid\");\n    lineX.fill = color();\n    lineX.strokeDasharray = \"3,3\";\n    lineX.isMeasured = false;\n    lineX.strokeOpacity = 0.4;\n    lineX.interactionsEnabled = false;\n    lineX.y = 0; // important\n\n    _this.lineX = lineX;\n\n    _this._disposers.push(_this.lineX); // Create cursor's horizontal line\n\n\n    var lineY = _this.createChild(Sprite);\n\n    lineY.shouldClone = false;\n    lineY.stroke = interfaceColors.getFor(\"grid\");\n    lineY.fill = color();\n    lineY.strokeDasharray = \"3,3\";\n    lineY.isMeasured = false;\n    lineY.strokeOpacity = 0.4;\n    lineY.interactionsEnabled = false;\n    lineY.x = 0; // important\n\n    _this.lineY = lineY;\n\n    _this._disposers.push(_this.lineY); // Add handler for size changes\n\n\n    _this.events.on(\"sizechanged\", _this.updateSize, _this, false);\n\n    _this._disposers.push(_this._lineX);\n\n    _this._disposers.push(_this._lineY);\n\n    _this._disposers.push(_this._xAxis);\n\n    _this._disposers.push(_this._yAxis);\n\n    _this.mask = _this;\n    _this.hideSeriesTooltipsOnSelection = true; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Updates cursor element dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYCursor.prototype.updateSize = function () {\n    if (this.lineX) {\n      this.lineX.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: 0,\n        y: this.innerHeight\n      });\n    }\n\n    if (this.lineY) {\n      this.lineY.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: this.innerWidth,\n        y: 0\n      });\n    }\n  };\n  /**\r\n   * Updates selection dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYCursor.prototype.updateSelection = function () {\n    if (this._usesSelection) {\n      var downPoint = this.downPoint;\n      var behavior = this.behavior;\n\n      if (downPoint) {\n        var point = this.point;\n\n        if (this.lineX) {\n          point.x = this.lineX.pixelX;\n        }\n\n        if (this.lineY) {\n          point.y = this.lineY.pixelY;\n        }\n\n        var selection = this.selection;\n        var x = Math.min(point.x, downPoint.x);\n        var y = Math.min(point.y, downPoint.y);\n        var w = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\n        var h = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\n\n        switch (behavior) {\n          case \"zoomX\":\n            y = 0;\n            h = this.pixelHeight;\n            break;\n\n          case \"zoomY\":\n            x = 0;\n            w = this.pixelWidth;\n            break;\n\n          case \"selectX\":\n            y = 0;\n            h = this.pixelHeight;\n            break;\n\n          case \"selectY\":\n            x = 0;\n            w = this.pixelWidth;\n            break;\n        }\n\n        selection.x = x;\n        selection.y = y;\n        selection.path = $path.rectangle(w, h);\n        selection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\n      } else {\n        if (this._generalBehavior != \"select\") {\n          this.selection.hide();\n        }\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYCursor.prototype.fixPoint = function (point) {\n    point.x = Math.max(0, point.x);\n    point.y = Math.max(0, point.y);\n    point.x = Math.min(this.pixelWidth, point.x);\n    point.y = Math.min(this.pixelHeight, point.y);\n    return point;\n  };\n  /**\r\n   * Places the cursor at specific point.\r\n   *\r\n   * @param point Point to place cursor at\r\n   */\n\n\n  XYCursor.prototype.triggerMoveReal = function (point, force) {\n    _super.prototype.triggerMoveReal.call(this, point, force);\n\n    var snapToSeries = this.snapToSeries;\n\n    if (snapToSeries && !this.downPoint) {\n      if (snapToSeries instanceof XYSeries) {\n        if (snapToSeries.isHidden) {\n          this.updateLinePositions(point);\n        }\n      } else {\n        var allHidden_1 = true;\n        $array.each(snapToSeries, function (s) {\n          if (!s.isHidden) {\n            allHidden_1 = false;\n          }\n        });\n\n        if (allHidden_1) {\n          this.updateLinePositions(point);\n        }\n      }\n    } else {\n      this.updateLinePositions(point);\n    }\n\n    if (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\n      if (this._generalBehavior == \"pan\") {\n        this.getPanningRanges();\n        this.dispatch(\"panning\");\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYCursor.prototype.updateLinePositions = function (point) {\n    point = this.fixPoint(this.point);\n\n    if (this.lineX && this.lineX.visible && !this.xAxis) {\n      this.lineX.x = point.x;\n    }\n\n    if (this.lineY && this.lineY.visible && !this.yAxis) {\n      this.lineY.y = point.y;\n    }\n\n    this.updateSelection();\n  };\n\n  XYCursor.prototype.triggerDownReal = function (point) {\n    if (this.visible && !this.isHiding) {\n      if (this._generalBehavior == \"select\") {\n        this.selection.parent = this.parent;\n      }\n\n      if (this.fitsToBounds(point)) {\n        this.downPoint = {\n          x: point.x,\n          y: point.y\n        };\n        this.updatePoint(point); //this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\n\n        this.point.x = this.downPoint.x;\n        this.point.y = this.downPoint.y;\n        var selection = this.selection;\n        var selectionX = this.downPoint.x;\n        var selectionY = this.downPoint.y;\n\n        if (this._usesSelection) {\n          selection.x = selectionX;\n          selection.y = selectionY;\n          selection.path = \"\";\n          selection.show();\n        }\n\n        _super.prototype.triggerDownReal.call(this, point);\n      } else {\n        this.downPoint = undefined;\n      }\n    } else {\n      this.downPoint = undefined;\n    }\n  };\n  /**\r\n   * Updates the coordinates of where pointer down event occurred\r\n   * (was pressed).\r\n   */\n\n\n  XYCursor.prototype.updatePoint = function (point) {\n    if (this.lineX) {\n      point.x = this.lineX.pixelX;\n    }\n\n    if (this.lineY) {\n      point.y = this.lineY.pixelY;\n    }\n  };\n  /**\r\n   * Handle action when cursor is released, which should perform an operation\r\n   * based on its `behavior`, like zoom.\r\n   *\r\n   * @param  point  Release point\r\n   */\n\n\n  XYCursor.prototype.triggerUpReal = function (point) {\n    if (this.hasMoved()) {\n      if (this.downPoint) {\n        this.upPoint = point;\n        this.updatePoint(this.upPoint);\n\n        if (this._generalBehavior != \"pan\") {\n          this.getRanges();\n        }\n\n        if (this._generalBehavior != \"select\") {\n          this.selection.hide();\n        }\n\n        _super.prototype.triggerUpReal.call(this, point);\n      }\n    } else {\n      if (this._generalBehavior != \"select\") {\n        this.selection.hide(0);\n      } else {\n        this.xRange = undefined;\n        this.yRange = undefined;\n        this.dispatchImmediately(\"selectended\");\n      } // reset cursor style, just in case\n\n\n      if (this._generalBehavior == \"pan\") {\n        var interaction = getInteraction();\n        interaction.setGlobalStyle(MouseCursorStyle.default);\n      }\n\n      this.dispatchImmediately(\"behaviorcanceled\");\n    }\n\n    this.downPoint = undefined;\n    this.dispatch(\"cursorpositionchanged\");\n  };\n  /**\r\n   * Calculates if the cursor has moved enough based on its `behavior`.\r\n   *\r\n   * @return Moved?\r\n   */\n\n\n  XYCursor.prototype.hasMoved = function () {\n    var distance;\n\n    if (this.behavior == \"zoomX\" || this.behavior == \"panX\") {\n      distance = $math.getHorizontalDistance(this._upPointOrig, this._downPointOrig);\n    } else if (this.behavior == \"zoomY\" || this.behavior == \"panY\") {\n      distance = $math.getVerticalDistance(this._upPointOrig, this._downPointOrig);\n    } else {\n      distance = $math.getDistance(this._upPointOrig, this._downPointOrig);\n    }\n\n    return distance > getInteraction().getHitOption(this.interactions, \"hitTolerance\");\n  };\n  /**\r\n   * [getRanges description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  XYCursor.prototype.getPanningRanges = function () {\n    var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\n    var startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\n    var currentX = $math.round(this.point.x / this.innerWidth, 5);\n    var currentY = 1 - $math.round(this.point.y / this.innerHeight, 5);\n    var deltaX = startX - currentX;\n    var deltaY = startY - currentY;\n    this.xRange = {\n      start: deltaX,\n      end: 1 + deltaX\n    };\n    this.yRange = {\n      start: deltaY,\n      end: 1 + deltaY\n    };\n\n    if (this.behavior == \"panX\") {\n      this.yRange.start = 0;\n      this.yRange.end = 1;\n    }\n\n    if (this.behavior == \"panY\") {\n      this.xRange.start = 0;\n      this.xRange.end = 1;\n    }\n  };\n  /**\r\n   * [getRanges description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  XYCursor.prototype.getRanges = function () {\n    if (this.lineX) {\n      this.upPoint.x = this.lineX.pixelX;\n    }\n\n    if (this.lineY) {\n      this.upPoint.y = this.lineY.pixelY;\n    } // @todo Is this needed?\n\n\n    $utils.used(this.selection);\n    var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\n    var endX = $math.round(this.upPoint.x / this.innerWidth, 5);\n    var startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\n    var endY = 1 - $math.round(this.upPoint.y / this.innerHeight, 5);\n    this.xRange = {\n      start: $math.min(startX, endX),\n      end: $math.max(startX, endX)\n    };\n    this.yRange = {\n      start: $math.min(startY, endY),\n      end: $math.max(startY, endY)\n    };\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"behavior\", {\n    /**\r\n     * Behavior\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"behavior\");\n    },\n\n    /**\r\n     * Cursor's behavior when it's moved with pointer down:\r\n     *\r\n     * * `\"zoomX\"` - zooms horizontally.\r\n     * * `\"zoomY\"` - zooms vertically.\r\n     * * `\"zoomXY\"` - zooms both horizontally and vertically.\r\n     * * `\"selectX\"` - selects a range horizontally.\r\n     * * `\"selectY\"` - selects a range vertically.\r\n     * * `\"selectXY\"` - selects a range both horizontally and vertically.\r\n     * * `\"panX\"` - moves (pans) current selection horizontally.\r\n     * * `\"panY\"` - moves (pans) current selection vertically.\r\n     * * `\"panXY\"` - moves (pans) current selection both horizontally and vertically.\r\n     * * `\"none\"` - does nothing with pointer down.\r\n     *\r\n     * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n     * and dragging it will start zooming the chart.\r\n     *\r\n     * NOTE: `\"zoomXY\"` acts differently when used on a `DateAxis`.\r\n     * See [this note](https://www.amcharts.com/docs/v4/concepts/chart-cursor/#zoomXY_behavior_and_DateAxis).\r\n     *\r\n     * @param value Bheavior\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"behavior\", value, true);\n      this._usesSelection = false;\n\n      if (value.indexOf(\"zoom\") != -1) {\n        this._generalBehavior = \"zoom\";\n        this._usesSelection = true;\n      }\n\n      if (value.indexOf(\"select\") != -1) {\n        this._generalBehavior = \"select\";\n        this._usesSelection = true;\n      }\n\n      if (value.indexOf(\"pan\") != -1) {\n        this._generalBehavior = \"pan\";\n        this._usesSelection = false;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Determines whether Cursor should prevent default action on move.\r\n   *\r\n   * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n   *\r\n   * @return Prevent default?\r\n   */\n\n  XYCursor.prototype.shouldPreventGestures = function (touch) {\n    return (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"fullWidthLineX\", {\n    /**\r\n     * @return Full width?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fullWidthLineX\");\n    },\n\n    /**\r\n     * Cursor's horizontal line is expanded to take full width of the related\r\n     * Axis' cell/category.\r\n     *\r\n     * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n     * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * @param value Full width?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"fullWidthLineX\", value);\n\n      if (!value) {\n        this.updateSize();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"fullWidthLineY\", {\n    /**\r\n     * @return Full width?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fullWidthLineY\");\n    },\n\n    /**\r\n     * Cursor's vertical line is expanded to take full width of the related\r\n     * Axis' cell/category.\r\n     *\r\n     * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n     * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * @param value Full width?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"fullWidthLineY\", value);\n\n      if (!value) {\n        this.updateSize();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"hideSeriesTooltipsOnSelection\", {\n    /**\r\n     * @return hide tooltip?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hideSeriesTooltipsOnSelection\");\n    },\n\n    /**\r\n     * If set to `true` this will hide series tooltips when selecting with cursor.\r\n     *\r\n     * @since 4.5.15\r\n     * @param  value  hide tooltips?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"hideSeriesTooltipsOnSelection\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"maxTooltipDistance\", {\n    /**\r\n     * @return Distance\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxTooltipDistance\");\n    },\n\n    /**\r\n     * If set to a numeric value, cursor will display closest series' tooltips\r\n     * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n     * it.\r\n     *\r\n     * Set it to `-1` to always force one tooltip, even if there are multiple\r\n     * data items in exactly same place.\r\n     *\r\n     * @since 4.7.18\r\n     * @param  value  Distance\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxTooltipDistance\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"maxPanOut\", {\n    /**\r\n     * @return Full width?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxPanOut\");\n    },\n\n    /**\r\n     * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n     * This setting specifies relative value by how much we can pan out the plot\r\n     *\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxPanOut\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"xAxis\", {\n    /**\r\n     * @return X axis\r\n     */\n    get: function () {\n      return this._xAxis.get();\n    },\n\n    /**\r\n     * A reference to X [[Axis]].\r\n     *\r\n     * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n     * you have axis tooltip enabled and you want cursor line to be at the same\r\n     * position as tooltip.\r\n     *\r\n     * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n     * [[ValueAxis]].\r\n     *\r\n     * @todo Description (review)\r\n     * @param axis X axis\r\n     */\n    set: function (axis) {\n      var _this = this;\n\n      if (this._xAxis.get() != axis) {\n        this._xAxis.set(axis, new MultiDisposer([axis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false), axis.events.on(\"rangechangestarted\", function (event) {\n          _this.hide(0);\n\n          _this.preventShow = true;\n        }, undefined, false), axis.events.on(\"rangechangeended\", function (event) {\n          _this.preventShow = false;\n\n          _this.hide(0);\n\n          _this.dispatch(\"cursorpositionchanged\");\n        }, undefined, false)]));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"yAxis\", {\n    /**\r\n     * @return Y Axis\r\n     */\n    get: function () {\n      return this._yAxis.get();\n    },\n\n    /**\r\n     * A reference to Y [[Axis]].\r\n     *\r\n     * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n     * you have axis tooltip enabled and you want cursor line to be at the same\r\n     * position as tooltip.\r\n     *\r\n     * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n     * [[ValueAxis]].\r\n     *\r\n     * @todo Description (review)\r\n     * @param axis Y axis\r\n     */\n    set: function (axis) {\n      var _this = this;\n\n      if (this._yAxis.get() != axis) {\n        this._yAxis.set(axis, new MultiDisposer([axis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false), axis.events.on(\"rangechangestarted\", function (event) {\n          _this.hide(0);\n\n          _this.__disabled = true;\n        }, undefined, false), axis.events.on(\"rangechangeended\", function (event) {\n          _this.__disabled = false;\n\n          _this.hide(0);\n\n          _this.dispatch(\"cursorpositionchanged\");\n        }, undefined, false)]));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates Cursor's position when axis tooltip changes position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original Axis event\r\n   */\n\n  XYCursor.prototype.handleXTooltipPosition = function (event) {\n    var tooltip = this.xAxis.tooltip;\n    var point = $utils.svgPointToSprite({\n      x: tooltip.pixelX,\n      y: tooltip.pixelY\n    }, this);\n    var x = point.x;\n    point.y = 1;\n\n    if (this.lineX) {\n      this.lineX.x = x;\n\n      if (!this.fitsToBounds(point)) {\n        this.hide();\n      }\n    }\n\n    if (this.xAxis && this.fullWidthLineX) {\n      var startPoint = this.xAxis.currentItemStartPoint;\n      var endPoint = this.xAxis.currentItemEndPoint;\n\n      if (startPoint && endPoint) {\n        this.lineX.x = x;\n        var width = endPoint.x - startPoint.x;\n        this.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\n      }\n    }\n  };\n  /**\r\n   * Updates Cursor's position when Y axis changes position or scale.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original Axis event\r\n   */\n\n\n  XYCursor.prototype.handleYTooltipPosition = function (event) {\n    var tooltip = this.yAxis.tooltip;\n    var point = $utils.svgPointToSprite({\n      x: tooltip.pixelX,\n      y: tooltip.pixelY\n    }, this);\n    var y = point.y;\n    point.x = 1;\n\n    if (this.lineY) {\n      this.lineY.y = y;\n\n      if (!this.fitsToBounds(point)) {\n        this.hide();\n      }\n    }\n\n    if (this.yAxis && this.fullWidthLineY) {\n      var startPoint = this.yAxis.currentItemStartPoint;\n      var endPoint = this.yAxis.currentItemEndPoint;\n\n      if (startPoint && endPoint) {\n        this.lineY.y = y;\n        var height = endPoint.y - startPoint.y;\n        this.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\n      }\n    }\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"lineX\", {\n    /**\r\n     * @return Line element\r\n     */\n    get: function () {\n      return this._lineX.get();\n    },\n\n    /**\r\n     * A Line element to use for X axis.\r\n     *\r\n     * @param lineX Line\r\n     */\n    set: function (lineX) {\n      if (lineX) {\n        lineX.setElement(this.paper.add(\"path\"));\n\n        this._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\n\n        lineX.interactionsEnabled = false;\n        lineX.parent = this;\n      } else {\n        this._lineX.reset();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"lineY\", {\n    /**\r\n     * @return Line element\r\n     */\n    get: function () {\n      return this._lineY.get();\n    },\n\n    /**\r\n     * A Line element to use Y axis.\r\n     *\r\n     * @param lineY Line\r\n     */\n    set: function (lineY) {\n      if (lineY) {\n        lineY.setElement(this.paper.add(\"path\"));\n\n        this._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\n\n        lineY.parent = this;\n        lineY.interactionsEnabled = false;\n      } else {\n        this._lineY.reset();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"selection\", {\n    /**\r\n     * @return Selection rectangle\r\n     */\n    get: function () {\n      return this._selection;\n    },\n\n    /**\r\n     * A selection element ([[Sprite]]).\r\n     *\r\n     * @param selection Selection rectangle\r\n     */\n    set: function (selection) {\n      this._selection = selection;\n\n      if (selection) {\n        selection.element = this.paper.add(\"path\");\n        selection.parent = this;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n   * with real references.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n  XYCursor.prototype.processConfig = function (config) {\n    var _this = this;\n\n    if (config) {\n      // Set up axes\n      if ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\n        if (this.map.hasKey(config.xAxis)) {\n          config.xAxis = this.map.getKey(config.xAxis);\n        } else {\n          this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\n          delete config.xAxis;\n        }\n      }\n\n      if ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\n        if (this.map.hasKey(config.yAxis)) {\n          config.yAxis = this.map.getKey(config.yAxis);\n        } else {\n          this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\n          delete config.yAxis;\n        }\n      }\n\n      if ($type.hasValue(config.snapToSeries)) {\n        var snapTo_1 = $type.isArray(config.snapToSeries) ? config.snapToSeries : [config.snapToSeries];\n        var snapError_1 = false;\n        $array.each(snapTo_1, function (snap, index) {\n          if ($type.isString(snap)) {\n            if (_this.map.hasKey(snap)) {\n              snapTo_1[index] = _this.map.getKey(snap);\n            } else {\n              _this.processingErrors.push(\"[XYCursor] No series with id \\\"\" + snap + \"\\\" found for `series`\");\n\n              snapError_1 = true;\n            }\n          }\n        });\n\n        if (snapError_1) {\n          delete config.snapToSeries;\n        } else {\n          config.snapToSeries = snapTo_1;\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"snapToSeries\", {\n    /**\r\n     * @return {XYSeries | XYSeries[]}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"snapToSeries\");\n    },\n\n    /**\r\n     * Specifies to which series cursor lines should be snapped.\r\n     *\r\n     * Can be a single series instance or an array of series.\r\n     *\r\n     * @param {XYSeries | XYSeries[]}\r\n     */\n    set: function (series) {\n      var _this = this;\n\n      if (this.setPropertyValue(\"snapToSeries\", series)) {\n        if (series instanceof XYSeries) {\n          series = [series];\n        }\n\n        if (this._snapToDisposers) {\n          $array.each(this._snapToDisposers, function (disposer) {\n            disposer.dispose();\n          });\n        }\n\n        this._snapToDisposers = [];\n\n        if (series) {\n          $array.each(series, function (s) {\n            _this._snapToDisposers.push(s.events.on(\"tooltipshownat\", function () {\n              _this.handleSnap(s);\n            }, undefined, false));\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"snapOnPan\", {\n    /**\r\n     * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n     * the chart? (when `behavior == \"panX\"`)\r\n     *\r\n     * @default true\r\n     * @since 4.10.17\r\n     * @return Snap on pan?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"snapOnPan\");\n    },\n\n    /**\r\n     * @param value Snap on pan?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"snapOnPan\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Snaps the zoom selection after chart is panned.\r\n   *\r\n   * @ignore\r\n   */\n\n  XYCursor.prototype.handleSnap = function (series) {\n    if (!this.downPoint) {\n      var x = series.getTooltipX() + series.xAxis.pixelX;\n      var y = series.getTooltipY() + series.yAxis.pixelY;\n      var xAxis = series.xAxis;\n      var yAxis = series.yAxis;\n\n      if (xAxis) {\n        if (xAxis.renderer.opposite) {\n          y -= this.pixelHeight;\n        }\n      }\n\n      this.point = {\n        x: x,\n        y: y\n      };\n      this.getPositions();\n      var xx = x;\n      var yy = y;\n      x -= this.pixelWidth;\n\n      if (yAxis) {\n        if (yAxis.renderer.opposite) {\n          x += this.pixelWidth;\n        }\n      }\n\n      var tooltip = series.tooltip;\n      var duration = tooltip.animationDuration;\n      var easing = tooltip.animationEasing;\n\n      if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\n        series.yAxis.showTooltipAtPosition(this.yPosition);\n        series.xAxis.showTooltipAtPosition(this.xPosition);\n      } else {\n        if (series.baseAxis == series.xAxis) {\n          series.yAxis.showTooltipAtPosition(this.yPosition);\n        }\n\n        if (series.baseAxis == series.yAxis) {\n          series.xAxis.showTooltipAtPosition(this.xPosition);\n        }\n      } //\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\n      //\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\n\n\n      this.lineY.x = x;\n      this.lineX.y = y;\n\n      if (!this.xAxis) {\n        this.lineX.animate([{\n          property: \"x\",\n          to: xx\n        }], duration, easing);\n      }\n\n      if (!this.yAxis) {\n        this.lineY.animate([{\n          property: \"y\",\n          to: yy\n        }], duration, easing);\n      }\n    }\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n\n  XYCursor.prototype.dispose = function () {\n    this.hide(0);\n\n    _super.prototype.dispose.call(this);\n  };\n\n  return XYCursor;\n}(Cursor);\n\nexport { XYCursor };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;","map":{"version":3,"names":["__extends","Cursor","Sprite","MutableValueDisposer","MultiDisposer","ValueAxis","DateAxis","XYSeries","registry","color","InterfaceColorSet","getInteraction","MouseCursorStyle","$math","$utils","$type","$array","$path","XYCursor","_super","_this","call","_lineX","_lineY","_xAxis","_yAxis","_snapToDisposers","className","behavior","maxPanOut","interfaceColors","snapOnPan","selection","createChild","shouldClone","fillOpacity","fill","getFor","isMeasured","visible","interactionsEnabled","_disposers","push","lineX","stroke","strokeDasharray","strokeOpacity","y","lineY","x","events","on","updateSize","mask","hideSeriesTooltipsOnSelection","applyTheme","prototype","path","moveTo","lineTo","innerHeight","innerWidth","updateSelection","_usesSelection","downPoint","point","pixelX","pixelY","Math","min","w","round","abs","_positionPrecision","h","pixelHeight","pixelWidth","rectangle","validatePosition","_generalBehavior","hide","fixPoint","max","triggerMoveReal","force","snapToSeries","isHidden","updateLinePositions","allHidden_1","each","s","getDistance","getPanningRanges","dispatch","xAxis","yAxis","triggerDownReal","isHiding","parent","fitsToBounds","updatePoint","selectionX","selectionY","show","undefined","triggerUpReal","hasMoved","upPoint","getRanges","xRange","yRange","dispatchImmediately","interaction","setGlobalStyle","default","distance","getHorizontalDistance","_upPointOrig","_downPointOrig","getVerticalDistance","getHitOption","interactions","startX","startY","currentX","currentY","deltaX","deltaY","start","end","used","endX","endY","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","indexOf","enumerable","configurable","shouldPreventGestures","touch","isTouchProtected","axis","tooltip","handleXTooltipPosition","event","preventShow","handleYTooltipPosition","__disabled","svgPointToSprite","fullWidthLineX","startPoint","currentItemStartPoint","endPoint","currentItemEndPoint","width","fullWidthLineY","height","setElement","paper","add","reset","_selection","element","processConfig","config","hasValue","isString","map","hasKey","getKey","processingErrors","snapTo_1","isArray","snapError_1","snap","index","series","disposer","dispose","handleSnap","getTooltipX","getTooltipY","renderer","opposite","getPositions","xx","yy","duration","animationDuration","easing","animationEasing","showTooltipAtPosition","yPosition","xPosition","baseAxis","animate","property","to","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/cursors/XYCursor.js"],"sourcesContent":["/**\r\n * Cursor for XY chart\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor } from \"./Cursor\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\r\nvar XYCursor = /** @class */ (function (_super) {\r\n    __extends(XYCursor, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYCursor() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Vertical cursor line element.\r\n         */\r\n        _this._lineX = new MutableValueDisposer();\r\n        /**\r\n         * Horizontal cursor line element.\r\n         */\r\n        _this._lineY = new MutableValueDisposer();\r\n        /**\r\n         * Horizontal [[Axis]].\r\n         */\r\n        _this._xAxis = new MutableValueDisposer();\r\n        /**\r\n         * Vertical [[Axis]].\r\n         */\r\n        _this._yAxis = new MutableValueDisposer();\r\n        _this._snapToDisposers = [];\r\n        _this.className = \"XYCursor\";\r\n        // Defaults\r\n        _this.behavior = \"zoomX\";\r\n        _this.maxPanOut = 0.1;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.snapOnPan = true;\r\n        // Create selection element\r\n        var selection = _this.createChild(Sprite);\r\n        selection.shouldClone = false;\r\n        selection.fillOpacity = 0.2;\r\n        selection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        selection.isMeasured = false;\r\n        selection.visible = false;\r\n        selection.interactionsEnabled = false;\r\n        _this.selection = selection;\r\n        _this._disposers.push(_this.selection);\r\n        // Create cursor's vertical line\r\n        var lineX = _this.createChild(Sprite);\r\n        lineX.shouldClone = false;\r\n        lineX.stroke = interfaceColors.getFor(\"grid\");\r\n        lineX.fill = color();\r\n        lineX.strokeDasharray = \"3,3\";\r\n        lineX.isMeasured = false;\r\n        lineX.strokeOpacity = 0.4;\r\n        lineX.interactionsEnabled = false;\r\n        lineX.y = 0; // important\r\n        _this.lineX = lineX;\r\n        _this._disposers.push(_this.lineX);\r\n        // Create cursor's horizontal line\r\n        var lineY = _this.createChild(Sprite);\r\n        lineY.shouldClone = false;\r\n        lineY.stroke = interfaceColors.getFor(\"grid\");\r\n        lineY.fill = color();\r\n        lineY.strokeDasharray = \"3,3\";\r\n        lineY.isMeasured = false;\r\n        lineY.strokeOpacity = 0.4;\r\n        lineY.interactionsEnabled = false;\r\n        lineY.x = 0; // important\r\n        _this.lineY = lineY;\r\n        _this._disposers.push(_this.lineY);\r\n        // Add handler for size changes\r\n        _this.events.on(\"sizechanged\", _this.updateSize, _this, false);\r\n        _this._disposers.push(_this._lineX);\r\n        _this._disposers.push(_this._lineY);\r\n        _this._disposers.push(_this._xAxis);\r\n        _this._disposers.push(_this._yAxis);\r\n        _this.mask = _this;\r\n        _this.hideSeriesTooltipsOnSelection = true;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Updates cursor element dimensions on size change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYCursor.prototype.updateSize = function () {\r\n        if (this.lineX) {\r\n            this.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n        }\r\n        if (this.lineY) {\r\n            this.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n        }\r\n    };\r\n    /**\r\n     * Updates selection dimensions on size change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYCursor.prototype.updateSelection = function () {\r\n        if (this._usesSelection) {\r\n            var downPoint = this.downPoint;\r\n            var behavior = this.behavior;\r\n            if (downPoint) {\r\n                var point = this.point;\r\n                if (this.lineX) {\r\n                    point.x = this.lineX.pixelX;\r\n                }\r\n                if (this.lineY) {\r\n                    point.y = this.lineY.pixelY;\r\n                }\r\n                var selection = this.selection;\r\n                var x = Math.min(point.x, downPoint.x);\r\n                var y = Math.min(point.y, downPoint.y);\r\n                var w = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n                var h = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n                switch (behavior) {\r\n                    case \"zoomX\":\r\n                        y = 0;\r\n                        h = this.pixelHeight;\r\n                        break;\r\n                    case \"zoomY\":\r\n                        x = 0;\r\n                        w = this.pixelWidth;\r\n                        break;\r\n                    case \"selectX\":\r\n                        y = 0;\r\n                        h = this.pixelHeight;\r\n                        break;\r\n                    case \"selectY\":\r\n                        x = 0;\r\n                        w = this.pixelWidth;\r\n                        break;\r\n                }\r\n                selection.x = x;\r\n                selection.y = y;\r\n                selection.path = $path.rectangle(w, h);\r\n                selection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n            }\r\n            else {\r\n                if (this._generalBehavior != \"select\") {\r\n                    this.selection.hide();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYCursor.prototype.fixPoint = function (point) {\r\n        point.x = Math.max(0, point.x);\r\n        point.y = Math.max(0, point.y);\r\n        point.x = Math.min(this.pixelWidth, point.x);\r\n        point.y = Math.min(this.pixelHeight, point.y);\r\n        return point;\r\n    };\r\n    /**\r\n     * Places the cursor at specific point.\r\n     *\r\n     * @param point Point to place cursor at\r\n     */\r\n    XYCursor.prototype.triggerMoveReal = function (point, force) {\r\n        _super.prototype.triggerMoveReal.call(this, point, force);\r\n        var snapToSeries = this.snapToSeries;\r\n        if ((snapToSeries && !this.downPoint)) {\r\n            if (snapToSeries instanceof XYSeries) {\r\n                if (snapToSeries.isHidden) {\r\n                    this.updateLinePositions(point);\r\n                }\r\n            }\r\n            else {\r\n                var allHidden_1 = true;\r\n                $array.each(snapToSeries, function (s) {\r\n                    if (!s.isHidden) {\r\n                        allHidden_1 = false;\r\n                    }\r\n                });\r\n                if (allHidden_1) {\r\n                    this.updateLinePositions(point);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.updateLinePositions(point);\r\n        }\r\n        if (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n            if (this._generalBehavior == \"pan\") {\r\n                this.getPanningRanges();\r\n                this.dispatch(\"panning\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYCursor.prototype.updateLinePositions = function (point) {\r\n        point = this.fixPoint(this.point);\r\n        if (this.lineX && this.lineX.visible && !this.xAxis) {\r\n            this.lineX.x = point.x;\r\n        }\r\n        if (this.lineY && this.lineY.visible && !this.yAxis) {\r\n            this.lineY.y = point.y;\r\n        }\r\n        this.updateSelection();\r\n    };\r\n    XYCursor.prototype.triggerDownReal = function (point) {\r\n        if (this.visible && !this.isHiding) {\r\n            if (this._generalBehavior == \"select\") {\r\n                this.selection.parent = this.parent;\r\n            }\r\n            if (this.fitsToBounds(point)) {\r\n                this.downPoint = { x: point.x, y: point.y };\r\n                this.updatePoint(point);\r\n                //this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n                this.point.x = this.downPoint.x;\r\n                this.point.y = this.downPoint.y;\r\n                var selection = this.selection;\r\n                var selectionX = this.downPoint.x;\r\n                var selectionY = this.downPoint.y;\r\n                if (this._usesSelection) {\r\n                    selection.x = selectionX;\r\n                    selection.y = selectionY;\r\n                    selection.path = \"\";\r\n                    selection.show();\r\n                }\r\n                _super.prototype.triggerDownReal.call(this, point);\r\n            }\r\n            else {\r\n                this.downPoint = undefined;\r\n            }\r\n        }\r\n        else {\r\n            this.downPoint = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Updates the coordinates of where pointer down event occurred\r\n     * (was pressed).\r\n     */\r\n    XYCursor.prototype.updatePoint = function (point) {\r\n        if (this.lineX) {\r\n            point.x = this.lineX.pixelX;\r\n        }\r\n        if (this.lineY) {\r\n            point.y = this.lineY.pixelY;\r\n        }\r\n    };\r\n    /**\r\n     * Handle action when cursor is released, which should perform an operation\r\n     * based on its `behavior`, like zoom.\r\n     *\r\n     * @param  point  Release point\r\n     */\r\n    XYCursor.prototype.triggerUpReal = function (point) {\r\n        if (this.hasMoved()) {\r\n            if (this.downPoint) {\r\n                this.upPoint = point;\r\n                this.updatePoint(this.upPoint);\r\n                if (this._generalBehavior != \"pan\") {\r\n                    this.getRanges();\r\n                }\r\n                if (this._generalBehavior != \"select\") {\r\n                    this.selection.hide();\r\n                }\r\n                _super.prototype.triggerUpReal.call(this, point);\r\n            }\r\n        }\r\n        else {\r\n            if (this._generalBehavior != \"select\") {\r\n                this.selection.hide(0);\r\n            }\r\n            else {\r\n                this.xRange = undefined;\r\n                this.yRange = undefined;\r\n                this.dispatchImmediately(\"selectended\");\r\n            }\r\n            // reset cursor style, just in case\r\n            if (this._generalBehavior == \"pan\") {\r\n                var interaction = getInteraction();\r\n                interaction.setGlobalStyle(MouseCursorStyle.default);\r\n            }\r\n            this.dispatchImmediately(\"behaviorcanceled\");\r\n        }\r\n        this.downPoint = undefined;\r\n        this.dispatch(\"cursorpositionchanged\");\r\n    };\r\n    /**\r\n     * Calculates if the cursor has moved enough based on its `behavior`.\r\n     *\r\n     * @return Moved?\r\n     */\r\n    XYCursor.prototype.hasMoved = function () {\r\n        var distance;\r\n        if (this.behavior == \"zoomX\" || this.behavior == \"panX\") {\r\n            distance = $math.getHorizontalDistance(this._upPointOrig, this._downPointOrig);\r\n        }\r\n        else if (this.behavior == \"zoomY\" || this.behavior == \"panY\") {\r\n            distance = $math.getVerticalDistance(this._upPointOrig, this._downPointOrig);\r\n        }\r\n        else {\r\n            distance = $math.getDistance(this._upPointOrig, this._downPointOrig);\r\n        }\r\n        return distance > getInteraction().getHitOption(this.interactions, \"hitTolerance\");\r\n    };\r\n    /**\r\n     * [getRanges description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    XYCursor.prototype.getPanningRanges = function () {\r\n        var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n        var startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n        var currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n        var currentY = 1 - $math.round(this.point.y / this.innerHeight, 5);\r\n        var deltaX = startX - currentX;\r\n        var deltaY = startY - currentY;\r\n        this.xRange = { start: deltaX, end: 1 + deltaX };\r\n        this.yRange = { start: deltaY, end: 1 + deltaY };\r\n        if (this.behavior == \"panX\") {\r\n            this.yRange.start = 0;\r\n            this.yRange.end = 1;\r\n        }\r\n        if (this.behavior == \"panY\") {\r\n            this.xRange.start = 0;\r\n            this.xRange.end = 1;\r\n        }\r\n    };\r\n    /**\r\n     * [getRanges description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    XYCursor.prototype.getRanges = function () {\r\n        if (this.lineX) {\r\n            this.upPoint.x = this.lineX.pixelX;\r\n        }\r\n        if (this.lineY) {\r\n            this.upPoint.y = this.lineY.pixelY;\r\n        }\r\n        // @todo Is this needed?\r\n        $utils.used(this.selection);\r\n        var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n        var endX = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n        var startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n        var endY = 1 - $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n        this.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n        this.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n    };\r\n    Object.defineProperty(XYCursor.prototype, \"behavior\", {\r\n        /**\r\n         * Behavior\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"behavior\");\r\n        },\r\n        /**\r\n         * Cursor's behavior when it's moved with pointer down:\r\n         *\r\n         * * `\"zoomX\"` - zooms horizontally.\r\n         * * `\"zoomY\"` - zooms vertically.\r\n         * * `\"zoomXY\"` - zooms both horizontally and vertically.\r\n         * * `\"selectX\"` - selects a range horizontally.\r\n         * * `\"selectY\"` - selects a range vertically.\r\n         * * `\"selectXY\"` - selects a range both horizontally and vertically.\r\n         * * `\"panX\"` - moves (pans) current selection horizontally.\r\n         * * `\"panY\"` - moves (pans) current selection vertically.\r\n         * * `\"panXY\"` - moves (pans) current selection both horizontally and vertically.\r\n         * * `\"none\"` - does nothing with pointer down.\r\n         *\r\n         * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n         * and dragging it will start zooming the chart.\r\n         *\r\n         * NOTE: `\"zoomXY\"` acts differently when used on a `DateAxis`.\r\n         * See [this note](https://www.amcharts.com/docs/v4/concepts/chart-cursor/#zoomXY_behavior_and_DateAxis).\r\n         *\r\n         * @param value Bheavior\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"behavior\", value, true);\r\n            this._usesSelection = false;\r\n            if (value.indexOf(\"zoom\") != -1) {\r\n                this._generalBehavior = \"zoom\";\r\n                this._usesSelection = true;\r\n            }\r\n            if (value.indexOf(\"select\") != -1) {\r\n                this._generalBehavior = \"select\";\r\n                this._usesSelection = true;\r\n            }\r\n            if (value.indexOf(\"pan\") != -1) {\r\n                this._generalBehavior = \"pan\";\r\n                this._usesSelection = false;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Determines whether Cursor should prevent default action on move.\r\n     *\r\n     * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n     *\r\n     * @return Prevent default?\r\n     */\r\n    XYCursor.prototype.shouldPreventGestures = function (touch) {\r\n        return (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\r\n    };\r\n    Object.defineProperty(XYCursor.prototype, \"fullWidthLineX\", {\r\n        /**\r\n         * @return Full width?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fullWidthLineX\");\r\n        },\r\n        /**\r\n         * Cursor's horizontal line is expanded to take full width of the related\r\n         * Axis' cell/category.\r\n         *\r\n         * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n         * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n         *\r\n         * @param value Full width?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"fullWidthLineX\", value);\r\n            if (!value) {\r\n                this.updateSize();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"fullWidthLineY\", {\r\n        /**\r\n         * @return Full width?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fullWidthLineY\");\r\n        },\r\n        /**\r\n         * Cursor's vertical line is expanded to take full width of the related\r\n         * Axis' cell/category.\r\n         *\r\n         * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n         * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n         *\r\n         * @param value Full width?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"fullWidthLineY\", value);\r\n            if (!value) {\r\n                this.updateSize();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"hideSeriesTooltipsOnSelection\", {\r\n        /**\r\n         * @return hide tooltip?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hideSeriesTooltipsOnSelection\");\r\n        },\r\n        /**\r\n         * If set to `true` this will hide series tooltips when selecting with cursor.\r\n         *\r\n         * @since 4.5.15\r\n         * @param  value  hide tooltips?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"hideSeriesTooltipsOnSelection\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"maxTooltipDistance\", {\r\n        /**\r\n         * @return Distance\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxTooltipDistance\");\r\n        },\r\n        /**\r\n         * If set to a numeric value, cursor will display closest series' tooltips\r\n         * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n         * it.\r\n         *\r\n         * Set it to `-1` to always force one tooltip, even if there are multiple\r\n         * data items in exactly same place.\r\n         *\r\n         * @since 4.7.18\r\n         * @param  value  Distance\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maxTooltipDistance\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"maxPanOut\", {\r\n        /**\r\n         * @return Full width?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxPanOut\");\r\n        },\r\n        /**\r\n         * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n         * This setting specifies relative value by how much we can pan out the plot\r\n         *\r\n         * @param value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maxPanOut\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"xAxis\", {\r\n        /**\r\n         * @return X axis\r\n         */\r\n        get: function () {\r\n            return this._xAxis.get();\r\n        },\r\n        /**\r\n         * A reference to X [[Axis]].\r\n         *\r\n         * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n         * you have axis tooltip enabled and you want cursor line to be at the same\r\n         * position as tooltip.\r\n         *\r\n         * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n         * [[ValueAxis]].\r\n         *\r\n         * @todo Description (review)\r\n         * @param axis X axis\r\n         */\r\n        set: function (axis) {\r\n            var _this = this;\r\n            if (this._xAxis.get() != axis) {\r\n                this._xAxis.set(axis, new MultiDisposer([\r\n                    axis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n                    axis.events.on(\"rangechangestarted\", function (event) {\r\n                        _this.hide(0);\r\n                        _this.preventShow = true;\r\n                    }, undefined, false),\r\n                    axis.events.on(\"rangechangeended\", function (event) {\r\n                        _this.preventShow = false;\r\n                        _this.hide(0);\r\n                        _this.dispatch(\"cursorpositionchanged\");\r\n                    }, undefined, false)\r\n                ]));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"yAxis\", {\r\n        /**\r\n         * @return Y Axis\r\n         */\r\n        get: function () {\r\n            return this._yAxis.get();\r\n        },\r\n        /**\r\n         * A reference to Y [[Axis]].\r\n         *\r\n         * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n         * you have axis tooltip enabled and you want cursor line to be at the same\r\n         * position as tooltip.\r\n         *\r\n         * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n         * [[ValueAxis]].\r\n         *\r\n         * @todo Description (review)\r\n         * @param axis Y axis\r\n         */\r\n        set: function (axis) {\r\n            var _this = this;\r\n            if (this._yAxis.get() != axis) {\r\n                this._yAxis.set(axis, new MultiDisposer([\r\n                    axis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n                    axis.events.on(\"rangechangestarted\", function (event) {\r\n                        _this.hide(0);\r\n                        _this.__disabled = true;\r\n                    }, undefined, false),\r\n                    axis.events.on(\"rangechangeended\", function (event) {\r\n                        _this.__disabled = false;\r\n                        _this.hide(0);\r\n                        _this.dispatch(\"cursorpositionchanged\");\r\n                    }, undefined, false)\r\n                ]));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates Cursor's position when axis tooltip changes position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Original Axis event\r\n     */\r\n    XYCursor.prototype.handleXTooltipPosition = function (event) {\r\n        var tooltip = this.xAxis.tooltip;\r\n        var point = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n        var x = point.x;\r\n        point.y = 1;\r\n        if (this.lineX) {\r\n            this.lineX.x = x;\r\n            if (!this.fitsToBounds(point)) {\r\n                this.hide();\r\n            }\r\n        }\r\n        if (this.xAxis && this.fullWidthLineX) {\r\n            var startPoint = this.xAxis.currentItemStartPoint;\r\n            var endPoint = this.xAxis.currentItemEndPoint;\r\n            if (startPoint && endPoint) {\r\n                this.lineX.x = x;\r\n                var width = endPoint.x - startPoint.x;\r\n                this.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates Cursor's position when Y axis changes position or scale.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Original Axis event\r\n     */\r\n    XYCursor.prototype.handleYTooltipPosition = function (event) {\r\n        var tooltip = this.yAxis.tooltip;\r\n        var point = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n        var y = point.y;\r\n        point.x = 1;\r\n        if (this.lineY) {\r\n            this.lineY.y = y;\r\n            if (!this.fitsToBounds(point)) {\r\n                this.hide();\r\n            }\r\n        }\r\n        if (this.yAxis && this.fullWidthLineY) {\r\n            var startPoint = this.yAxis.currentItemStartPoint;\r\n            var endPoint = this.yAxis.currentItemEndPoint;\r\n            if (startPoint && endPoint) {\r\n                this.lineY.y = y;\r\n                var height = endPoint.y - startPoint.y;\r\n                this.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(XYCursor.prototype, \"lineX\", {\r\n        /**\r\n         * @return Line element\r\n         */\r\n        get: function () {\r\n            return this._lineX.get();\r\n        },\r\n        /**\r\n         * A Line element to use for X axis.\r\n         *\r\n         * @param lineX Line\r\n         */\r\n        set: function (lineX) {\r\n            if (lineX) {\r\n                lineX.setElement(this.paper.add(\"path\"));\r\n                this._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n                lineX.interactionsEnabled = false;\r\n                lineX.parent = this;\r\n            }\r\n            else {\r\n                this._lineX.reset();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"lineY\", {\r\n        /**\r\n         * @return Line element\r\n         */\r\n        get: function () {\r\n            return this._lineY.get();\r\n        },\r\n        /**\r\n         * A Line element to use Y axis.\r\n         *\r\n         * @param lineY Line\r\n         */\r\n        set: function (lineY) {\r\n            if (lineY) {\r\n                lineY.setElement(this.paper.add(\"path\"));\r\n                this._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n                lineY.parent = this;\r\n                lineY.interactionsEnabled = false;\r\n            }\r\n            else {\r\n                this._lineY.reset();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"selection\", {\r\n        /**\r\n         * @return Selection rectangle\r\n         */\r\n        get: function () {\r\n            return this._selection;\r\n        },\r\n        /**\r\n         * A selection element ([[Sprite]]).\r\n         *\r\n         * @param selection Selection rectangle\r\n         */\r\n        set: function (selection) {\r\n            this._selection = selection;\r\n            if (selection) {\r\n                selection.element = this.paper.add(\"path\");\r\n                selection.parent = this;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n     * with real references.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    XYCursor.prototype.processConfig = function (config) {\r\n        var _this = this;\r\n        if (config) {\r\n            // Set up axes\r\n            if ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n                if (this.map.hasKey(config.xAxis)) {\r\n                    config.xAxis = this.map.getKey(config.xAxis);\r\n                }\r\n                else {\r\n                    this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\r\n                    delete config.xAxis;\r\n                }\r\n            }\r\n            if ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n                if (this.map.hasKey(config.yAxis)) {\r\n                    config.yAxis = this.map.getKey(config.yAxis);\r\n                }\r\n                else {\r\n                    this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\r\n                    delete config.yAxis;\r\n                }\r\n            }\r\n            if ($type.hasValue(config.snapToSeries)) {\r\n                var snapTo_1 = $type.isArray(config.snapToSeries) ? config.snapToSeries : [config.snapToSeries];\r\n                var snapError_1 = false;\r\n                $array.each(snapTo_1, function (snap, index) {\r\n                    if ($type.isString(snap)) {\r\n                        if (_this.map.hasKey(snap)) {\r\n                            snapTo_1[index] = _this.map.getKey(snap);\r\n                        }\r\n                        else {\r\n                            _this.processingErrors.push(\"[XYCursor] No series with id \\\"\" + snap + \"\\\" found for `series`\");\r\n                            snapError_1 = true;\r\n                        }\r\n                    }\r\n                });\r\n                if (snapError_1) {\r\n                    delete config.snapToSeries;\r\n                }\r\n                else {\r\n                    config.snapToSeries = snapTo_1;\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    Object.defineProperty(XYCursor.prototype, \"snapToSeries\", {\r\n        /**\r\n         * @return {XYSeries | XYSeries[]}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"snapToSeries\");\r\n        },\r\n        /**\r\n         * Specifies to which series cursor lines should be snapped.\r\n         *\r\n         * Can be a single series instance or an array of series.\r\n         *\r\n         * @param {XYSeries | XYSeries[]}\r\n         */\r\n        set: function (series) {\r\n            var _this = this;\r\n            if (this.setPropertyValue(\"snapToSeries\", series)) {\r\n                if (series instanceof XYSeries) {\r\n                    series = [series];\r\n                }\r\n                if (this._snapToDisposers) {\r\n                    $array.each(this._snapToDisposers, function (disposer) {\r\n                        disposer.dispose();\r\n                    });\r\n                }\r\n                this._snapToDisposers = [];\r\n                if (series) {\r\n                    $array.each(series, function (s) {\r\n                        _this._snapToDisposers.push(s.events.on(\"tooltipshownat\", function () { _this.handleSnap(s); }, undefined, false));\r\n                    });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"snapOnPan\", {\r\n        /**\r\n         * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n         * the chart? (when `behavior == \"panX\"`)\r\n         *\r\n         * @default true\r\n         * @since 4.10.17\r\n         * @return Snap on pan?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"snapOnPan\");\r\n        },\r\n        /**\r\n         * @param value Snap on pan?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"snapOnPan\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Snaps the zoom selection after chart is panned.\r\n     *\r\n     * @ignore\r\n     */\r\n    XYCursor.prototype.handleSnap = function (series) {\r\n        if (!this.downPoint) {\r\n            var x = series.getTooltipX() + series.xAxis.pixelX;\r\n            var y = series.getTooltipY() + series.yAxis.pixelY;\r\n            var xAxis = series.xAxis;\r\n            var yAxis = series.yAxis;\r\n            if (xAxis) {\r\n                if (xAxis.renderer.opposite) {\r\n                    y -= this.pixelHeight;\r\n                }\r\n            }\r\n            this.point = { x: x, y: y };\r\n            this.getPositions();\r\n            var xx = x;\r\n            var yy = y;\r\n            x -= this.pixelWidth;\r\n            if (yAxis) {\r\n                if (yAxis.renderer.opposite) {\r\n                    x += this.pixelWidth;\r\n                }\r\n            }\r\n            var tooltip = series.tooltip;\r\n            var duration = tooltip.animationDuration;\r\n            var easing = tooltip.animationEasing;\r\n            if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n                series.yAxis.showTooltipAtPosition(this.yPosition);\r\n                series.xAxis.showTooltipAtPosition(this.xPosition);\r\n            }\r\n            else {\r\n                if (series.baseAxis == series.xAxis) {\r\n                    series.yAxis.showTooltipAtPosition(this.yPosition);\r\n                }\r\n                if (series.baseAxis == series.yAxis) {\r\n                    series.xAxis.showTooltipAtPosition(this.xPosition);\r\n                }\r\n            }\r\n            //\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n            //\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n            this.lineY.x = x;\r\n            this.lineX.y = y;\r\n            if (!this.xAxis) {\r\n                this.lineX.animate([{ property: \"x\", to: xx }], duration, easing);\r\n            }\r\n            if (!this.yAxis) {\r\n                this.lineY.animate([{ property: \"y\", to: yy }], duration, easing);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    XYCursor.prototype.dispose = function () {\r\n        this.hide(0);\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    return XYCursor;\r\n}(Cursor));\r\nexport { XYCursor };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}