{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AMElement } from \"./AMElement\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates an SVG `<g>` element.\r\n *\r\n * SVG groups are used for elements that need more elements just one.\r\n *\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g} About `<g>` element\r\n */\n\nvar Group =\n/** @class */\nfunction (_super) {\n  __extends(Group, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param elementName Element type (should be \"g\")\r\n   */\n\n\n  function Group(elementName) {\n    return _super.call(this, elementName) || this;\n  }\n  /**\r\n   * Adds an element to group.\r\n   *\r\n   * This will manipulate DOM. `element` will be physically moved into group.\r\n   *\r\n   * @param element  Element\r\n   */\n\n\n  Group.prototype.add = function (element) {\n    if (element) {\n      this.node.appendChild(element.node);\n    }\n  };\n  /**\r\n   * Adds an element to group.\r\n   *\r\n   * This will manipulate DOM. `element` will be physically moved into group.\r\n   *\r\n   * @param element  Element\r\n   */\n\n\n  Group.prototype.addToBack = function (element) {\n    if (element) {\n      var first = this.node.childNodes[0];\n\n      if (first) {\n        if (first != element.node) {\n          this.node.insertBefore(element.node, first);\n        }\n      } else {\n        this.node.appendChild(element.node);\n      }\n    }\n  };\n  /**\r\n   * Removes the `element` from group.\r\n   *\r\n   * Please note that this will not dispose the element itself, it will just\r\n   * remove it from the group.\r\n   *\r\n   * @param element  Element\r\n   */\n\n\n  Group.prototype.removeElement = function (element) {\n    // todo: not sure about the speed, need to investigate, maybe it's faster to check if node is a child\n    if (element) {\n      try {\n        if (element.node && element.node.parentNode == this.node) {\n          this.node.removeChild(element.node);\n        }\n      } catch (err) {}\n    }\n  };\n  /**\r\n   * Checks if this group already has the child element added\r\n   *\r\n   * @param element\r\n   * @return {boolean}\r\n   */\n\n\n  Group.prototype.hasChild = function (element) {\n    for (var i = 0; i < this.node.childNodes.length; i++) {\n      if (this.node.childNodes[i] == element.node) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Group.prototype, \"content\", {\n    /**\r\n     * @return SVG markup\r\n     */\n    get: function () {\n      return this.node.innerHTML;\n    },\n\n    /**\r\n     * Content of the group element.\r\n     *\r\n     * Can be used to add a lot of proprietary SVG markup into group.\r\n     *\r\n     * @param value  SVG markup\r\n     */\n    set: function (value) {\n      this.node.innerHTML = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Removes all children from the group.\r\n   */\n\n  Group.prototype.removeChildren = function () {\n    if (this.node.childNodes) {\n      while (this.node.childNodes.length > 0) {\n        var childNode = this.node.firstChild;\n\n        if (childNode && childNode.parentNode) {\n          childNode.parentNode.removeChild(childNode);\n        }\n      }\n    }\n  };\n\n  Group.prototype.removeChildrenByTag = function (tag) {\n    if (this.node.childNodes) {\n      var remove = this.node.getElementsByTagName(tag);\n\n      for (var i = 0; i < remove.length; i++) {\n        this.node.removeChild(remove[i]);\n      }\n    }\n  };\n\n  return Group;\n}(AMElement);\n\nexport { Group };","map":{"version":3,"names":["__extends","AMElement","Group","_super","elementName","call","prototype","add","element","node","appendChild","addToBack","first","childNodes","insertBefore","removeElement","parentNode","removeChild","err","hasChild","i","length","Object","defineProperty","get","innerHTML","set","value","enumerable","configurable","removeChildren","childNode","firstChild","removeChildrenByTag","tag","remove","getElementsByTagName"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/rendering/Group.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AMElement } from \"./AMElement\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates an SVG `<g>` element.\r\n *\r\n * SVG groups are used for elements that need more elements just one.\r\n *\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g} About `<g>` element\r\n */\r\nvar Group = /** @class */ (function (_super) {\r\n    __extends(Group, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param elementName Element type (should be \"g\")\r\n     */\r\n    function Group(elementName) {\r\n        return _super.call(this, elementName) || this;\r\n    }\r\n    /**\r\n     * Adds an element to group.\r\n     *\r\n     * This will manipulate DOM. `element` will be physically moved into group.\r\n     *\r\n     * @param element  Element\r\n     */\r\n    Group.prototype.add = function (element) {\r\n        if (element) {\r\n            this.node.appendChild(element.node);\r\n        }\r\n    };\r\n    /**\r\n     * Adds an element to group.\r\n     *\r\n     * This will manipulate DOM. `element` will be physically moved into group.\r\n     *\r\n     * @param element  Element\r\n     */\r\n    Group.prototype.addToBack = function (element) {\r\n        if (element) {\r\n            var first = this.node.childNodes[0];\r\n            if (first) {\r\n                if (first != element.node) {\r\n                    this.node.insertBefore(element.node, first);\r\n                }\r\n            }\r\n            else {\r\n                this.node.appendChild(element.node);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Removes the `element` from group.\r\n     *\r\n     * Please note that this will not dispose the element itself, it will just\r\n     * remove it from the group.\r\n     *\r\n     * @param element  Element\r\n     */\r\n    Group.prototype.removeElement = function (element) {\r\n        // todo: not sure about the speed, need to investigate, maybe it's faster to check if node is a child\r\n        if (element) {\r\n            try {\r\n                if (element.node && element.node.parentNode == this.node) {\r\n                    this.node.removeChild(element.node);\r\n                }\r\n            }\r\n            catch (err) {\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks if this group already has the child element added\r\n     *\r\n     * @param element\r\n     * @return {boolean}\r\n     */\r\n    Group.prototype.hasChild = function (element) {\r\n        for (var i = 0; i < this.node.childNodes.length; i++) {\r\n            if (this.node.childNodes[i] == element.node) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(Group.prototype, \"content\", {\r\n        /**\r\n         * @return SVG markup\r\n         */\r\n        get: function () {\r\n            return this.node.innerHTML;\r\n        },\r\n        /**\r\n         * Content of the group element.\r\n         *\r\n         * Can be used to add a lot of proprietary SVG markup into group.\r\n         *\r\n         * @param value  SVG markup\r\n         */\r\n        set: function (value) {\r\n            this.node.innerHTML = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Removes all children from the group.\r\n     */\r\n    Group.prototype.removeChildren = function () {\r\n        if (this.node.childNodes) {\r\n            while (this.node.childNodes.length > 0) {\r\n                var childNode = this.node.firstChild;\r\n                if (childNode && childNode.parentNode) {\r\n                    childNode.parentNode.removeChild(childNode);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Group.prototype.removeChildrenByTag = function (tag) {\r\n        if (this.node.childNodes) {\r\n            var remove = this.node.getElementsByTagName(tag);\r\n            for (var i = 0; i < remove.length; i++) {\r\n                this.node.removeChild(remove[i]);\r\n            }\r\n        }\r\n    };\r\n    return Group;\r\n}(AMElement));\r\nexport { Group };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}