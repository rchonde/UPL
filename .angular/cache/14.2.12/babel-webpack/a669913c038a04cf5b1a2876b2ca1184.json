{"ast":null,"code":"/**\r\n * Functionality for drawing triangles.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $path from \"../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to draw a triangle.\r\n *\r\n * @see {@link ITriangleEvents} for a list of available events\r\n * @see {@link ITriangleAdapters} for a list of available Adapters\r\n */\n\nvar Triangle =\n/** @class */\nfunction (_super) {\n  __extends(Triangle, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Triangle() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Triangle\";\n    _this.element = _this.paper.add(\"path\");\n    _this.direction = \"top\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Triangle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.pixelWidth;\n    var h = this.pixelHeight;\n    var path;\n\n    switch (this.direction) {\n      case \"right\":\n        path = $path.moveTo({\n          x: 0,\n          y: 0\n        }) + $path.lineTo({\n          x: w,\n          y: h / 2\n        }) + $path.lineTo({\n          x: 0,\n          y: h\n        }) + $path.closePath();\n        break;\n\n      case \"left\":\n        path = $path.moveTo({\n          x: w,\n          y: 0\n        }) + $path.lineTo({\n          x: 0,\n          y: h / 2\n        }) + $path.lineTo({\n          x: w,\n          y: h\n        }) + $path.closePath();\n        break;\n\n      case \"bottom\":\n        path = $path.moveTo({\n          x: 0,\n          y: 0\n        }) + $path.lineTo({\n          x: w,\n          y: 0\n        }) + $path.lineTo({\n          x: w / 2,\n          y: h\n        }) + $path.closePath();\n        break;\n\n      case \"top\":\n        path = $path.moveTo({\n          x: w / 2,\n          y: 0\n        }) + $path.lineTo({\n          x: w,\n          y: h\n        }) + $path.lineTo({\n          x: 0,\n          y: h\n        }) + $path.closePath();\n        break;\n    }\n\n    this.path = path;\n  };\n\n  Object.defineProperty(Triangle.prototype, \"direction\", {\n    /**\r\n     * Returns direction of a triangle\r\n     *\r\n     * @return value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"direction\");\n    },\n\n    /**\r\n     * Sets direction of a triangle\r\n     *\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"direction\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Triangle;\n}(Sprite);\n\nexport { Triangle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Triangle\"] = Triangle;","map":{"version":3,"names":["__extends","Sprite","registry","$path","Triangle","_super","_this","call","className","element","paper","add","direction","applyTheme","prototype","draw","w","pixelWidth","h","pixelHeight","path","moveTo","x","y","lineTo","closePath","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","enumerable","configurable","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/elements/Triangle.js"],"sourcesContent":["/**\r\n * Functionality for drawing triangles.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to draw a triangle.\r\n *\r\n * @see {@link ITriangleEvents} for a list of available events\r\n * @see {@link ITriangleAdapters} for a list of available Adapters\r\n */\r\nvar Triangle = /** @class */ (function (_super) {\r\n    __extends(Triangle, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Triangle() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Triangle\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.direction = \"top\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Triangle.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var w = this.pixelWidth;\r\n        var h = this.pixelHeight;\r\n        var path;\r\n        switch (this.direction) {\r\n            case \"right\":\r\n                path = $path.moveTo({ x: 0, y: 0 })\r\n                    + $path.lineTo({ x: w, y: h / 2 })\r\n                    + $path.lineTo({ x: 0, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n            case \"left\":\r\n                path = $path.moveTo({ x: w, y: 0 })\r\n                    + $path.lineTo({ x: 0, y: h / 2 })\r\n                    + $path.lineTo({ x: w, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n            case \"bottom\":\r\n                path = $path.moveTo({ x: 0, y: 0 })\r\n                    + $path.lineTo({ x: w, y: 0 })\r\n                    + $path.lineTo({ x: w / 2, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n            case \"top\":\r\n                path = $path.moveTo({ x: w / 2, y: 0 })\r\n                    + $path.lineTo({ x: w, y: h })\r\n                    + $path.lineTo({ x: 0, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n        }\r\n        this.path = path;\r\n    };\r\n    Object.defineProperty(Triangle.prototype, \"direction\", {\r\n        /**\r\n         * Returns direction of a triangle\r\n         *\r\n         * @return value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"direction\");\r\n        },\r\n        /**\r\n         * Sets direction of a triangle\r\n         *\r\n         * @param value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"direction\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Triangle;\r\n}(Sprite));\r\nexport { Triangle };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Triangle\"] = Triangle;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}