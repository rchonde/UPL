{"ast":null,"code":"/**\r\n * [[AMElement]] represents any SVG element and related functionality.\r\n */\nimport * as $dom from \"../utils/DOM\";\nimport * as $object from \"../utils/Object\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A base class for all SVG elements. Provides low-level DOM functionality.\r\n *\r\n * All visual elements extend this class.\r\n */\n\nvar AMElement =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor creates a new element or uses the one that was passed in.\r\n   *\r\n   * @param element Element reference node type\r\n   */\n  function AMElement(element) {\n    /**\r\n     * Indicates if the element was already disposed.\r\n     */\n    this._isDisposed = false;\n    /**\r\n     * Current X coordinate.\r\n     */\n\n    this._x = 0;\n    /**\r\n     * Current Y coordinate.\r\n     */\n\n    this._y = 0;\n    /**\r\n     *\r\n     */\n\n    this._rotationY = 0;\n    /**\r\n     *\r\n     */\n\n    this._rotationX = 0;\n    /**\r\n     * Current rotation.\r\n     */\n\n    this._rotation = 0;\n    /**\r\n     * Current scale.\r\n     */\n\n    this._scale = 1;\n\n    if (typeof element === \"string\") {\n      this.node = document.createElementNS($dom.SVGNS, element);\n    } else {\n      this.node = element;\n    }\n  }\n  /**\r\n   * Removes element's node from DOM.\r\n   */\n\n\n  AMElement.prototype.removeNode = function () {\n    if (this.node) {\n      if (this.node.parentNode) {\n        this.node.parentNode.removeChild(this.node);\n      }\n    }\n  };\n\n  Object.defineProperty(AMElement.prototype, \"transformString\", {\n    /**\r\n     * Returns `transform` attribute of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Transform attribute value\r\n     */\n    get: function () {\n      if (this.node) {\n        return this._transformString;\n        /*\r\n        const value = this.node.getAttribute(\"transform\");\r\n              if (value !== null) {\r\n            return value;\r\n        }*/\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Appply position, rotation and scale properties via elemen's `transform`\r\n   * property\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  AMElement.prototype.transform = function () {\n    var transfromString = \"translate(\" + this._x + \",\" + this._y + \")\";\n\n    if (this._scale != 1) {\n      transfromString += (transfromString ? \" \" : \"\") + \"scale(\" + this._scale + \")\";\n    }\n\n    if (this._rotation != 0) {\n      var rotateString = \"rotate(\" + this._rotation + \")\";\n\n      if (this._rotationX && this._rotationY) {\n        rotateString = \"rotate(\" + this._rotation + \" \" + this._rotationX + \" \" + this._rotationY + \")\";\n      }\n\n      transfromString += (transfromString ? \" \" : \"\") + rotateString;\n    }\n\n    this._transformString = transfromString;\n    this.node.setAttribute(\"transform\", transfromString);\n  };\n  /**\r\n   * Returns bounding box of the element.\r\n   *\r\n   * ATTENTION: Bounding box calculations are extremely costly so should be\r\n   * used sparingly and cached whenever possible.\r\n   *\r\n   * @return Bounding rectangle\r\n   */\n\n\n  AMElement.prototype.getBBox = function () {\n    var bbox = {\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0\n    }; // FF would fail if getBBox() is called without node added to parent\n\n    if (this.node && this.node.parentNode) {\n      try {\n        // again for ff. TODO: check if this doesn't slow down\n        var svgbbox = this.node.getBBox();\n        bbox.x = svgbbox.x;\n        bbox.y = svgbbox.y;\n        bbox.width = svgbbox.width;\n        bbox.height = svgbbox.height;\n      } catch (err) {}\n    }\n\n    return bbox;\n  };\n  /**\r\n   * Moves the element to new coordinates.\r\n   *\r\n   * @param x  Target X\r\n   * @param y  Target Y\r\n   */\n\n\n  AMElement.prototype.moveTo = function (point) {\n    if (point) {\n      var x = point.x;\n      var y = point.y;\n\n      if (this._x != x || this._y != y) {\n        this._x = x;\n        this._y = y;\n        this.transform();\n      }\n    }\n  };\n\n  Object.defineProperty(AMElement.prototype, \"content\", {\n    /**\r\n     * Returns element's contents as SVG markup.\r\n     *\r\n     * @return Contents\r\n     */\n    get: function () {\n      // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\n      return this.node.innerHTML || \"\";\n    },\n\n    /**\r\n     * Element's SVG contents.\r\n     *\r\n     * @param value Contents\r\n     */\n    set: function (value) {\n      // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\n      this.node.innerHTML = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"textContent\", {\n    /**\r\n     * @return Text contents\r\n     */\n    get: function () {\n      return this.node.textContent || \"\";\n    },\n\n    /**\r\n     * Text contents of the SVG element.\r\n     *\r\n     * @param value Text contents\r\n     */\n    set: function (value) {\n      this.node.textContent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"x\", {\n    /**\r\n     * @return X coordinate (px)\r\n     */\n    get: function () {\n      return this._x;\n    },\n\n    /**\r\n     * Element's X position in pixels.\r\n     *\r\n     * @param value  X coordinate (px)\r\n     */\n    set: function (value) {\n      if (this._x != value) {\n        this._x = value;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"y\", {\n    /**\r\n     * @return Y coordinate (px)\r\n     */\n    get: function () {\n      return this._y;\n    },\n\n    /**\r\n     * Element's Y position in pixels.\r\n     *\r\n     * @param value Y coordinate (px)\r\n     */\n    set: function (value) {\n      if (this._y != value) {\n        this._y = value;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"rotation\", {\n    /**\r\n     * @return Rotation\r\n     */\n    get: function () {\n      return this._rotation;\n    },\n\n    /**\r\n     * Element's rotation in degrees.\r\n     *\r\n     * @param value Rotation\r\n     */\n    set: function (angle) {\n      if (this._rotation != angle) {\n        this._rotation = angle;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"rotationX\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._rotationX;\n    },\n\n    /**\r\n     * @ignore\r\n     */\n    set: function (x) {\n      if (this._rotationX != x) {\n        this._rotationX = x;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"rotationY\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._rotationY;\n    },\n\n    /**\r\n     * @ignore\r\n     */\n    set: function (y) {\n      if (this._rotationY != y) {\n        this._rotationY = y;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"scale\", {\n    /**\r\n     * @return Scale\r\n     */\n    get: function () {\n      return this._scale;\n    },\n\n    /**\r\n     * Element's scale where 1 is original size.\r\n     *\r\n     * Setting to 0.5 will reduce element's size by 50%, 2 will make element\r\n     * twice as large, etc.\r\n     *\r\n     * @param value Scale\r\n     */\n    set: function (value) {\n      if (this._scale != value) {\n        this._scale = value;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Removes an attribute from element.\r\n   *\r\n   * @param attribute  Attribute to remove\r\n   */\n\n  AMElement.prototype.removeAttr = function (attribute) {\n    this.node.removeAttribute(attribute);\n  };\n  /**\r\n   * Sets a set of attributes on a element.\r\n   *\r\n   * @param attributes  An object with attribute names (key) and values\r\n   * @return The same element\r\n   */\n\n\n  AMElement.prototype.attr = function (attributes) {\n    var _this = this;\n\n    $object.each(attributes, function (attributeName, attributeValue) {\n      if (!$type.hasValue(attributeValue)) {\n        _this.node.removeAttribute(attributeName);\n      } else {\n        // this is for performance testing\n        //if(attributeValue == this.node.getAttribute(attributeName)){\n        //\tconsole.log(attributeName, attributeValue)\n        //}\n        _this.node.setAttribute(attributeName, attributeValue);\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Returns a value of a node attribute.\r\n   *\r\n   * @param attribute  Attribute name\r\n   * @return Attribute value\r\n   */\n\n\n  AMElement.prototype.getAttr = function (attribute) {\n    return this.node.getAttribute(attribute);\n  };\n  /**\r\n   * Sets a single attribute of the element's node using namesspace.\r\n   *\r\n   * @param ns         Namespace\r\n   * @param attribute  Attribute\r\n   * @param value      Value\r\n   * @return The same element\r\n   */\n\n\n  AMElement.prototype.attrNS = function (ns, attribute, value) {\n    this.node.setAttributeNS(ns, attribute, value);\n    return this;\n  };\n  /**\r\n   * Returns a namespaced attribute value from node.\r\n   *\r\n   * @param ns         Namespace\r\n   * @param attribute  Attribute\r\n   * @return Attribute value\r\n   */\n\n\n  AMElement.prototype.getAttrNS = function (ns, attribute) {\n    return this.node.getAttributeNS(ns, attribute);\n  };\n  /**\r\n   * Removes `style` attribute from node.\r\n   *\r\n   * @param attribute  Attribute to remove\r\n   */\n\n\n  AMElement.prototype.removeStyle = function (attribute) {\n    // @todo Review because it's a bit messy and maybe not needed (pratically not used)\n    this.node.style[attribute] = null;\n    delete this.node.style[attribute];\n  };\n  /**\r\n   * Returns style attribute value.\r\n   *\r\n   * @param attribute  Style attribute value\r\n   * @return Attribute value\r\n   */\n\n\n  AMElement.prototype.getStyle = function (attribute) {\n    // @todo Review because it's a bit messy and maybe not needed (pratically not used)\n    return this.node.style[attribute];\n  };\n  /**\r\n   * Adds style attributes to element's node.\r\n   *\r\n   * @param attributes  Object containing attribute: value pairs\r\n   * @return The same element\r\n   */\n\n\n  AMElement.prototype.addStyle = function (attributes) {\n    var _this = this; // @todo Review because it's a bit messy and maybe not needed (pratically not used)\n\n\n    $object.each(attributes, function (attributeName, attributeValue) {\n      if (!$type.hasValue(attributeValue)) {\n        _this.removeStyle(attributeName);\n      } else {\n        _this.node.style[attributeName] = attributeValue;\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Adds a class to element.\r\n   *\r\n   * @param name  Class name\r\n   */\n\n\n  AMElement.prototype.addClass = function (name) {\n    $dom.addClass(this.node, name);\n  };\n  /**\r\n   * Removes a class from element.\r\n   *\r\n   * @param name Class name\r\n   */\n\n\n  AMElement.prototype.removeClass = function (name) {\n    $dom.removeClass(this.node, name);\n  };\n  /**\r\n   * Sets a class name on element.\r\n   *\r\n   * @param name  Class name\r\n   */\n\n\n  AMElement.prototype.setClass = function (name) {\n    this.node.setAttribute(\"class\", name);\n  };\n  /**\r\n   * Removes all element's child nodes, basically leaving it empty.\r\n   */\n\n\n  AMElement.prototype.removeChildNodes = function () {\n    // remove all children\n    while (this.node.childNodes.length > 0) {\n      this.node.removeChild(this.node.firstChild);\n    }\n  };\n  /**\r\n   * Was this element already been disposed?\r\n   *\r\n   * @return Disposed?\r\n   */\n\n\n  AMElement.prototype.isDisposed = function () {\n    return this._isDisposed;\n  };\n  /**\r\n   * Disposes element.\r\n   */\n\n\n  AMElement.prototype.dispose = function () {\n    this.removeNode();\n  };\n\n  return AMElement;\n}();\n\nexport { AMElement };","map":{"version":3,"names":["$dom","$object","$type","AMElement","element","_isDisposed","_x","_y","_rotationY","_rotationX","_rotation","_scale","node","document","createElementNS","SVGNS","prototype","removeNode","parentNode","removeChild","Object","defineProperty","get","_transformString","enumerable","configurable","transform","transfromString","rotateString","setAttribute","getBBox","bbox","width","height","x","y","svgbbox","err","moveTo","point","innerHTML","set","value","textContent","angle","removeAttr","attribute","removeAttribute","attr","attributes","_this","each","attributeName","attributeValue","hasValue","getAttr","getAttribute","attrNS","ns","setAttributeNS","getAttrNS","getAttributeNS","removeStyle","style","getStyle","addStyle","addClass","name","removeClass","setClass","removeChildNodes","childNodes","length","firstChild","isDisposed","dispose"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/rendering/AMElement.js"],"sourcesContent":["/**\r\n * [[AMElement]] represents any SVG element and related functionality.\r\n */\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A base class for all SVG elements. Provides low-level DOM functionality.\r\n *\r\n * All visual elements extend this class.\r\n */\r\nvar AMElement = /** @class */ (function () {\r\n    /**\r\n     * Constructor creates a new element or uses the one that was passed in.\r\n     *\r\n     * @param element Element reference node type\r\n     */\r\n    function AMElement(element) {\r\n        /**\r\n         * Indicates if the element was already disposed.\r\n         */\r\n        this._isDisposed = false;\r\n        /**\r\n         * Current X coordinate.\r\n         */\r\n        this._x = 0;\r\n        /**\r\n         * Current Y coordinate.\r\n         */\r\n        this._y = 0;\r\n        /**\r\n         *\r\n         */\r\n        this._rotationY = 0;\r\n        /**\r\n         *\r\n         */\r\n        this._rotationX = 0;\r\n        /**\r\n         * Current rotation.\r\n         */\r\n        this._rotation = 0;\r\n        /**\r\n         * Current scale.\r\n         */\r\n        this._scale = 1;\r\n        if (typeof element === \"string\") {\r\n            this.node = document.createElementNS($dom.SVGNS, element);\r\n        }\r\n        else {\r\n            this.node = element;\r\n        }\r\n    }\r\n    /**\r\n     * Removes element's node from DOM.\r\n     */\r\n    AMElement.prototype.removeNode = function () {\r\n        if (this.node) {\r\n            if (this.node.parentNode) {\r\n                this.node.parentNode.removeChild(this.node);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(AMElement.prototype, \"transformString\", {\r\n        /**\r\n         * Returns `transform` attribute of the element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Transform attribute value\r\n         */\r\n        get: function () {\r\n            if (this.node) {\r\n                return this._transformString;\r\n                /*\r\n                const value = this.node.getAttribute(\"transform\");\r\n    \r\n                if (value !== null) {\r\n                    return value;\r\n                }*/\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Appply position, rotation and scale properties via elemen's `transform`\r\n     * property\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AMElement.prototype.transform = function () {\r\n        var transfromString = \"translate(\" + this._x + \",\" + this._y + \")\";\r\n        if (this._scale != 1) {\r\n            transfromString += ((transfromString ? \" \" : \"\") + \"scale(\" + this._scale + \")\");\r\n        }\r\n        if (this._rotation != 0) {\r\n            var rotateString = \"rotate(\" + this._rotation + \")\";\r\n            if (this._rotationX && this._rotationY) {\r\n                rotateString = \"rotate(\" + this._rotation + \" \" + this._rotationX + \" \" + this._rotationY + \")\";\r\n            }\r\n            transfromString += ((transfromString ? \" \" : \"\") + rotateString);\r\n        }\r\n        this._transformString = transfromString;\r\n        this.node.setAttribute(\"transform\", transfromString);\r\n    };\r\n    /**\r\n     * Returns bounding box of the element.\r\n     *\r\n     * ATTENTION: Bounding box calculations are extremely costly so should be\r\n     * used sparingly and cached whenever possible.\r\n     *\r\n     * @return Bounding rectangle\r\n     */\r\n    AMElement.prototype.getBBox = function () {\r\n        var bbox = {\r\n            width: 0,\r\n            height: 0,\r\n            x: 0,\r\n            y: 0\r\n        };\r\n        // FF would fail if getBBox() is called without node added to parent\r\n        if (this.node && this.node.parentNode) {\r\n            try { // again for ff. TODO: check if this doesn't slow down\r\n                var svgbbox = this.node.getBBox();\r\n                bbox.x = svgbbox.x;\r\n                bbox.y = svgbbox.y;\r\n                bbox.width = svgbbox.width;\r\n                bbox.height = svgbbox.height;\r\n            }\r\n            catch (err) { }\r\n        }\r\n        return bbox;\r\n    };\r\n    /**\r\n     * Moves the element to new coordinates.\r\n     *\r\n     * @param x  Target X\r\n     * @param y  Target Y\r\n     */\r\n    AMElement.prototype.moveTo = function (point) {\r\n        if (point) {\r\n            var x = point.x;\r\n            var y = point.y;\r\n            if (this._x != x || this._y != y) {\r\n                this._x = x;\r\n                this._y = y;\r\n                this.transform();\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(AMElement.prototype, \"content\", {\r\n        /**\r\n         * Returns element's contents as SVG markup.\r\n         *\r\n         * @return Contents\r\n         */\r\n        get: function () {\r\n            // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\r\n            return this.node.innerHTML || \"\";\r\n        },\r\n        /**\r\n         * Element's SVG contents.\r\n         *\r\n         * @param value Contents\r\n         */\r\n        set: function (value) {\r\n            // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\r\n            this.node.innerHTML = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"textContent\", {\r\n        /**\r\n         * @return Text contents\r\n         */\r\n        get: function () {\r\n            return this.node.textContent || \"\";\r\n        },\r\n        /**\r\n         * Text contents of the SVG element.\r\n         *\r\n         * @param value Text contents\r\n         */\r\n        set: function (value) {\r\n            this.node.textContent = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"x\", {\r\n        /**\r\n         * @return X coordinate (px)\r\n         */\r\n        get: function () {\r\n            return this._x;\r\n        },\r\n        /**\r\n         * Element's X position in pixels.\r\n         *\r\n         * @param value  X coordinate (px)\r\n         */\r\n        set: function (value) {\r\n            if (this._x != value) {\r\n                this._x = value;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"y\", {\r\n        /**\r\n         * @return Y coordinate (px)\r\n         */\r\n        get: function () {\r\n            return this._y;\r\n        },\r\n        /**\r\n         * Element's Y position in pixels.\r\n         *\r\n         * @param value Y coordinate (px)\r\n         */\r\n        set: function (value) {\r\n            if (this._y != value) {\r\n                this._y = value;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"rotation\", {\r\n        /**\r\n         * @return Rotation\r\n         */\r\n        get: function () {\r\n            return this._rotation;\r\n        },\r\n        /**\r\n         * Element's rotation in degrees.\r\n         *\r\n         * @param value Rotation\r\n         */\r\n        set: function (angle) {\r\n            if (this._rotation != angle) {\r\n                this._rotation = angle;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"rotationX\", {\r\n        /**\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return this._rotationX;\r\n        },\r\n        /**\r\n         * @ignore\r\n         */\r\n        set: function (x) {\r\n            if (this._rotationX != x) {\r\n                this._rotationX = x;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"rotationY\", {\r\n        /**\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return this._rotationY;\r\n        },\r\n        /**\r\n         * @ignore\r\n         */\r\n        set: function (y) {\r\n            if (this._rotationY != y) {\r\n                this._rotationY = y;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"scale\", {\r\n        /**\r\n         * @return Scale\r\n         */\r\n        get: function () {\r\n            return this._scale;\r\n        },\r\n        /**\r\n         * Element's scale where 1 is original size.\r\n         *\r\n         * Setting to 0.5 will reduce element's size by 50%, 2 will make element\r\n         * twice as large, etc.\r\n         *\r\n         * @param value Scale\r\n         */\r\n        set: function (value) {\r\n            if (this._scale != value) {\r\n                this._scale = value;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Removes an attribute from element.\r\n     *\r\n     * @param attribute  Attribute to remove\r\n     */\r\n    AMElement.prototype.removeAttr = function (attribute) {\r\n        this.node.removeAttribute(attribute);\r\n    };\r\n    /**\r\n     * Sets a set of attributes on a element.\r\n     *\r\n     * @param attributes  An object with attribute names (key) and values\r\n     * @return The same element\r\n     */\r\n    AMElement.prototype.attr = function (attributes) {\r\n        var _this = this;\r\n        $object.each(attributes, function (attributeName, attributeValue) {\r\n            if (!$type.hasValue(attributeValue)) {\r\n                _this.node.removeAttribute(attributeName);\r\n            }\r\n            else {\r\n                // this is for performance testing\r\n                //if(attributeValue == this.node.getAttribute(attributeName)){\r\n                //\tconsole.log(attributeName, attributeValue)\r\n                //}\r\n                _this.node.setAttribute(attributeName, attributeValue);\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a value of a node attribute.\r\n     *\r\n     * @param attribute  Attribute name\r\n     * @return Attribute value\r\n     */\r\n    AMElement.prototype.getAttr = function (attribute) {\r\n        return this.node.getAttribute(attribute);\r\n    };\r\n    /**\r\n     * Sets a single attribute of the element's node using namesspace.\r\n     *\r\n     * @param ns         Namespace\r\n     * @param attribute  Attribute\r\n     * @param value      Value\r\n     * @return The same element\r\n     */\r\n    AMElement.prototype.attrNS = function (ns, attribute, value) {\r\n        this.node.setAttributeNS(ns, attribute, value);\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a namespaced attribute value from node.\r\n     *\r\n     * @param ns         Namespace\r\n     * @param attribute  Attribute\r\n     * @return Attribute value\r\n     */\r\n    AMElement.prototype.getAttrNS = function (ns, attribute) {\r\n        return this.node.getAttributeNS(ns, attribute);\r\n    };\r\n    /**\r\n     * Removes `style` attribute from node.\r\n     *\r\n     * @param attribute  Attribute to remove\r\n     */\r\n    AMElement.prototype.removeStyle = function (attribute) {\r\n        // @todo Review because it's a bit messy and maybe not needed (pratically not used)\r\n        this.node.style[attribute] = null;\r\n        delete this.node.style[attribute];\r\n    };\r\n    /**\r\n     * Returns style attribute value.\r\n     *\r\n     * @param attribute  Style attribute value\r\n     * @return Attribute value\r\n     */\r\n    AMElement.prototype.getStyle = function (attribute) {\r\n        // @todo Review because it's a bit messy and maybe not needed (pratically not used)\r\n        return this.node.style[attribute];\r\n    };\r\n    /**\r\n     * Adds style attributes to element's node.\r\n     *\r\n     * @param attributes  Object containing attribute: value pairs\r\n     * @return The same element\r\n     */\r\n    AMElement.prototype.addStyle = function (attributes) {\r\n        var _this = this;\r\n        // @todo Review because it's a bit messy and maybe not needed (pratically not used)\r\n        $object.each(attributes, function (attributeName, attributeValue) {\r\n            if (!$type.hasValue(attributeValue)) {\r\n                _this.removeStyle(attributeName);\r\n            }\r\n            else {\r\n                _this.node.style[attributeName] = attributeValue;\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Adds a class to element.\r\n     *\r\n     * @param name  Class name\r\n     */\r\n    AMElement.prototype.addClass = function (name) {\r\n        $dom.addClass(this.node, name);\r\n    };\r\n    /**\r\n     * Removes a class from element.\r\n     *\r\n     * @param name Class name\r\n     */\r\n    AMElement.prototype.removeClass = function (name) {\r\n        $dom.removeClass(this.node, name);\r\n    };\r\n    /**\r\n     * Sets a class name on element.\r\n     *\r\n     * @param name  Class name\r\n     */\r\n    AMElement.prototype.setClass = function (name) {\r\n        this.node.setAttribute(\"class\", name);\r\n    };\r\n    /**\r\n     * Removes all element's child nodes, basically leaving it empty.\r\n     */\r\n    AMElement.prototype.removeChildNodes = function () {\r\n        // remove all children\r\n        while (this.node.childNodes.length > 0) {\r\n            this.node.removeChild(this.node.firstChild);\r\n        }\r\n    };\r\n    /**\r\n     * Was this element already been disposed?\r\n     *\r\n     * @return Disposed?\r\n     */\r\n    AMElement.prototype.isDisposed = function () {\r\n        return this._isDisposed;\r\n    };\r\n    /**\r\n     * Disposes element.\r\n     */\r\n    AMElement.prototype.dispose = function () {\r\n        this.removeNode();\r\n    };\r\n    return AMElement;\r\n}());\r\nexport { AMElement };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}