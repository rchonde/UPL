{"ast":null,"code":"/**\r\n * Functionality for drawing waved circles.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Circle } from \"./Circle\";\nimport { registry } from \"../Registry\";\nimport * as $path from \"../rendering/Path\";\nimport * as $math from \"../utils/Math\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a waved circle.\r\n *\r\n * @see {@link IWavedCircleEvents} for a list of available events\r\n * @see {@link IWavedCircleAdapters} for a list of available Adapters\r\n */\n\nvar WavedCircle =\n/** @class */\nfunction (_super) {\n  __extends(WavedCircle, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function WavedCircle() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"WavedCircle\";\n    _this.element = _this.paper.add(\"path\");\n    _this.waveLength = 16;\n    _this.waveHeight = 4;\n    _this.fill = undefined;\n    _this.fillOpacity = 0;\n    _this.tension = 0.8;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the waved line.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  WavedCircle.prototype.draw = function () {\n    var path = \"\";\n    var radius = this.pixelRadius;\n\n    if (radius > 0) {\n      var points = this.getPoints(radius);\n      path = $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\n    }\n\n    var innerRadius = this.pixelInnerRadius;\n\n    if (innerRadius > 0) {\n      var points = this.getPoints(innerRadius);\n      points.reverse();\n      path += $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\n    }\n\n    this.path = path;\n  };\n  /**\r\n   * Returns points that circle consists of.\r\n   *\r\n   * @param radius  Radius (px)\r\n   * @return Points\r\n   */\n\n\n  WavedCircle.prototype.getPoints = function (radius) {\n    var circleLength = radius * Math.PI * 2;\n    var halfWaveHeight = this.waveHeight / 2;\n    var waveLength = circleLength / Math.round(circleLength / this.waveLength);\n    var halfWaveLength = waveLength / 2;\n    var points = [];\n    var count = circleLength / waveLength;\n\n    for (var i = 0; i <= count; i++) {\n      var angle1 = i * waveLength / circleLength * 360;\n      var angle2 = (i * waveLength + halfWaveLength) / circleLength * 360;\n      points.push({\n        x: (radius - halfWaveHeight) * $math.cos(angle1),\n        y: (radius - halfWaveHeight) * $math.sin(angle1)\n      });\n      points.push({\n        x: (radius + halfWaveHeight) * $math.cos(angle2),\n        y: (radius + halfWaveHeight) * $math.sin(angle2)\n      });\n    }\n\n    points.pop();\n    return points;\n  };\n\n  Object.defineProperty(WavedCircle.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the circle in pixels (absolute) or [[Percent]] (relative).\r\n     *\r\n     * @param value  Inner radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedCircle.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * Calculated inner radius of the circle in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Inner radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeToValue(this.innerRadius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedCircle.prototype, \"waveLength\", {\n    /**\r\n     * @return Wave length (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"waveLength\");\n    },\n\n    /**\r\n     * Wave length in pixels.\r\n     *\r\n     * @default 16\r\n     * @param value  Wave length (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"waveLength\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedCircle.prototype, \"waveHeight\", {\n    /**\r\n     * @return Wave height (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"waveHeight\");\n    },\n\n    /**\r\n     * Wave height in pixels.\r\n     *\r\n     * @default 4\r\n     * @param value  Wave height (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"waveHeight\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedCircle.prototype, \"tension\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tension\");\n    },\n\n    /**\r\n     * Tension of the wave.\r\n     *\r\n     * @default 0.8\r\n     * @param value  Tension\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tension\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return WavedCircle;\n}(Circle);\n\nexport { WavedCircle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"WavedCircle\"] = WavedCircle;","map":{"version":3,"names":["__extends","Circle","registry","$path","$math","$utils","$smoothing","WavedCircle","_super","_this","call","className","element","paper","add","waveLength","waveHeight","fill","undefined","fillOpacity","tension","applyTheme","prototype","draw","path","radius","pixelRadius","points","getPoints","moveTo","Tension","smooth","innerRadius","pixelInnerRadius","reverse","circleLength","Math","PI","halfWaveHeight","round","halfWaveLength","count","i","angle1","angle2","push","x","cos","y","sin","pop","Object","defineProperty","get","getPropertyValue","set","value","setPercentProperty","invalidate","enumerable","configurable","relativeToValue","min","innerWidth","innerHeight","setPropertyValue","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/elements/WavedCircle.js"],"sourcesContent":["/**\r\n * Functionality for drawing waved circles.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle } from \"./Circle\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a waved circle.\r\n *\r\n * @see {@link IWavedCircleEvents} for a list of available events\r\n * @see {@link IWavedCircleAdapters} for a list of available Adapters\r\n */\r\nvar WavedCircle = /** @class */ (function (_super) {\r\n    __extends(WavedCircle, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function WavedCircle() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"WavedCircle\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.waveLength = 16;\r\n        _this.waveHeight = 4;\r\n        _this.fill = undefined;\r\n        _this.fillOpacity = 0;\r\n        _this.tension = 0.8;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the waved line.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    WavedCircle.prototype.draw = function () {\r\n        var path = \"\";\r\n        var radius = this.pixelRadius;\r\n        if (radius > 0) {\r\n            var points = this.getPoints(radius);\r\n            path = $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\r\n        }\r\n        var innerRadius = this.pixelInnerRadius;\r\n        if (innerRadius > 0) {\r\n            var points = this.getPoints(innerRadius);\r\n            points.reverse();\r\n            path += $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\r\n        }\r\n        this.path = path;\r\n    };\r\n    /**\r\n     * Returns points that circle consists of.\r\n     *\r\n     * @param radius  Radius (px)\r\n     * @return Points\r\n     */\r\n    WavedCircle.prototype.getPoints = function (radius) {\r\n        var circleLength = radius * Math.PI * 2;\r\n        var halfWaveHeight = this.waveHeight / 2;\r\n        var waveLength = circleLength / Math.round(circleLength / this.waveLength);\r\n        var halfWaveLength = waveLength / 2;\r\n        var points = [];\r\n        var count = circleLength / waveLength;\r\n        for (var i = 0; i <= count; i++) {\r\n            var angle1 = (i * waveLength) / circleLength * 360;\r\n            var angle2 = (i * waveLength + halfWaveLength) / circleLength * 360;\r\n            points.push({ x: (radius - halfWaveHeight) * $math.cos(angle1), y: (radius - halfWaveHeight) * $math.sin(angle1) });\r\n            points.push({ x: (radius + halfWaveHeight) * $math.cos(angle2), y: (radius + halfWaveHeight) * $math.sin(angle2) });\r\n        }\r\n        points.pop();\r\n        return points;\r\n    };\r\n    Object.defineProperty(WavedCircle.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the circle in pixels (absolute) or [[Percent]] (relative).\r\n         *\r\n         * @param value  Inner radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * Calculated inner radius of the circle in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Inner radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeToValue(this.innerRadius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"waveLength\", {\r\n        /**\r\n         * @return Wave length (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveLength\");\r\n        },\r\n        /**\r\n         * Wave length in pixels.\r\n         *\r\n         * @default 16\r\n         * @param value  Wave length (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveLength\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"waveHeight\", {\r\n        /**\r\n         * @return Wave height (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveHeight\");\r\n        },\r\n        /**\r\n         * Wave height in pixels.\r\n         *\r\n         * @default 4\r\n         * @param value  Wave height (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveHeight\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"tension\", {\r\n        /**\r\n         * @return Tension\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tension\");\r\n        },\r\n        /**\r\n         * Tension of the wave.\r\n         *\r\n         * @default 0.8\r\n         * @param value  Tension\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tension\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return WavedCircle;\r\n}(Circle));\r\nexport { WavedCircle };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"WavedCircle\"] = WavedCircle;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}