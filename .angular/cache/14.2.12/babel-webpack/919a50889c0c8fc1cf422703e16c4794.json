{"ast":null,"code":"/**\r\n * Functionality related to inertia\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObject } from \"../Base\";\nimport { getInteraction } from \"./Interaction\";\nimport { AnimationDisposer } from \"../utils/Animation\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * A point of inertia is to simulate gradually drecreasing motion even after\r\n * actual interaction by user, that caused it, has already ended.\r\n *\r\n * [[Inertia]] object will continue triggering the same [[Sprite]] handlers\r\n * as if the interaction was still happening, gradually reducing\r\n * shift/angle/scale values until full stop.\r\n *\r\n * Basically, from the target element's point of view, while inertia is\r\n * playing, it is still being interacted with by user, albeit with a\r\n * decreasing speed.\r\n */\n\nvar Inertia =\n/** @class */\nfunction (_super) {\n  __extends(Inertia, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Inertia(interaction, type, point, startPoint) {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * List of animations currently playing.\r\n     */\n\n\n    _this.animations = [];\n    _this.className = \"Inertia\";\n    _this.interaction = interaction;\n    _this.type = type;\n    _this.point = point;\n    _this.startPoint = startPoint; // Make animations disposable\n\n    _this._disposers.push(new AnimationDisposer(_this.animations));\n\n    return _this;\n  }\n\n  Object.defineProperty(Inertia.prototype, \"x\", {\n    /**\r\n     * Returns current X coordinate.\r\n     *\r\n     * @return X\r\n     */\n    get: function () {\n      return this.point.x;\n    },\n\n    /**\r\n     * Sets current X coordinate.\r\n     *\r\n     * Will trigger \"drag\" event for the target element.\r\n     *\r\n     * @param value X\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        this.point.x = value;\n        this.handleMove();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Inertia.prototype, \"y\", {\n    /**\r\n     * Returns current Y coordinate.\r\n     *\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.point.y;\n    },\n\n    /**\r\n     * Sets current Y coordinate.\r\n     *\r\n     * Will trigger \"drag\" event for the target element.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        this.point.y = value;\n        this.handleMove();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Simulates dragging of element.\r\n   */\n\n  Inertia.prototype.handleMove = function () {\n    // Prepare {InteractionEvent} object\n    if (this.interaction.events.isEnabled(\"drag\")) {\n      var imev = {\n        type: \"drag\",\n        target: this.interaction,\n        shift: {\n          x: this.x - this.startPoint.x,\n          y: this.y - this.startPoint.y\n        },\n        startPoint: this.startPoint,\n        point: {\n          x: this.x,\n          y: this.y\n        },\n        touch: false\n      }; // Call handler\n\n      this.interaction.events.dispatchImmediately(\"drag\", imev);\n    }\n  };\n  /**\r\n   * Finishes up the inertia animation. (removes reference to this animation\r\n   * object)\r\n   */\n\n\n  Inertia.prototype.done = function () {\n    // Remove inertia animation from the object\n    this.interaction.inertias.removeKey(this.type); // Move ended\n\n    if (this.type === \"move\") {\n      getInteraction().processDragStop(this.interaction);\n    } // Destroy\n\n\n    this.dispose();\n  };\n\n  return Inertia;\n}(BaseObject);\n\nexport { Inertia };","map":{"version":3,"names":["__extends","BaseObject","getInteraction","AnimationDisposer","$type","Inertia","_super","interaction","type","point","startPoint","_this","call","animations","className","_disposers","push","Object","defineProperty","prototype","get","x","set","value","isNumber","handleMove","enumerable","configurable","y","events","isEnabled","imev","target","shift","touch","dispatchImmediately","done","inertias","removeKey","processDragStop","dispose"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/interaction/Inertia.js"],"sourcesContent":["/**\r\n * Functionality related to inertia\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { getInteraction } from \"./Interaction\";\r\nimport { AnimationDisposer } from \"../utils/Animation\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * A point of inertia is to simulate gradually drecreasing motion even after\r\n * actual interaction by user, that caused it, has already ended.\r\n *\r\n * [[Inertia]] object will continue triggering the same [[Sprite]] handlers\r\n * as if the interaction was still happening, gradually reducing\r\n * shift/angle/scale values until full stop.\r\n *\r\n * Basically, from the target element's point of view, while inertia is\r\n * playing, it is still being interacted with by user, albeit with a\r\n * decreasing speed.\r\n */\r\nvar Inertia = /** @class */ (function (_super) {\r\n    __extends(Inertia, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Inertia(interaction, type, point, startPoint) {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * List of animations currently playing.\r\n         */\r\n        _this.animations = [];\r\n        _this.className = \"Inertia\";\r\n        _this.interaction = interaction;\r\n        _this.type = type;\r\n        _this.point = point;\r\n        _this.startPoint = startPoint;\r\n        // Make animations disposable\r\n        _this._disposers.push(new AnimationDisposer(_this.animations));\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Inertia.prototype, \"x\", {\r\n        /**\r\n         * Returns current X coordinate.\r\n         *\r\n         * @return X\r\n         */\r\n        get: function () {\r\n            return this.point.x;\r\n        },\r\n        /**\r\n         * Sets current X coordinate.\r\n         *\r\n         * Will trigger \"drag\" event for the target element.\r\n         *\r\n         * @param value X\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                this.point.x = value;\r\n                this.handleMove();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Inertia.prototype, \"y\", {\r\n        /**\r\n         * Returns current Y coordinate.\r\n         *\r\n         * @return Y\r\n         */\r\n        get: function () {\r\n            return this.point.y;\r\n        },\r\n        /**\r\n         * Sets current Y coordinate.\r\n         *\r\n         * Will trigger \"drag\" event for the target element.\r\n         *\r\n         * @param value Y\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                this.point.y = value;\r\n                this.handleMove();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Simulates dragging of element.\r\n     */\r\n    Inertia.prototype.handleMove = function () {\r\n        // Prepare {InteractionEvent} object\r\n        if (this.interaction.events.isEnabled(\"drag\")) {\r\n            var imev = {\r\n                type: \"drag\",\r\n                target: this.interaction,\r\n                shift: {\r\n                    x: this.x - this.startPoint.x,\r\n                    y: this.y - this.startPoint.y\r\n                },\r\n                startPoint: this.startPoint,\r\n                point: {\r\n                    x: this.x,\r\n                    y: this.y\r\n                },\r\n                touch: false\r\n            };\r\n            // Call handler\r\n            this.interaction.events.dispatchImmediately(\"drag\", imev);\r\n        }\r\n    };\r\n    /**\r\n     * Finishes up the inertia animation. (removes reference to this animation\r\n     * object)\r\n     */\r\n    Inertia.prototype.done = function () {\r\n        // Remove inertia animation from the object\r\n        this.interaction.inertias.removeKey(this.type);\r\n        // Move ended\r\n        if (this.type === \"move\") {\r\n            getInteraction().processDragStop(this.interaction);\r\n        }\r\n        // Destroy\r\n        this.dispose();\r\n    };\r\n    return Inertia;\r\n}(BaseObject));\r\nexport { Inertia };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}