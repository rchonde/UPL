{"ast":null,"code":"/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\n\nvar StepLineSeriesSegment =\n/** @class */\nfunction (_super) {\n  __extends(StepLineSeriesSegment, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function StepLineSeriesSegment() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"StepLineSeriesSegment\";\n    return _this;\n  }\n  /**\r\n   * Draws the series segment.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param points       Points to connect\r\n   * @param closePoints  ?\r\n   * @param smoothnessX  Horizontal bezier setting (?)\r\n   * @param smoothnessY  Vertical bezier setting (?)\r\n   */\n\n\n  StepLineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY, noRisers, vertical) {\n    if (points.length > 0 && closePoints.length > 0) {\n      if (noRisers) {\n        var path = $path.moveTo(points[0]);\n\n        if (points.length > 0) {\n          for (var i = 1; i < points.length; i++) {\n            var point = points[i];\n\n            if (i / 2 == Math.round(i / 2)) {\n              path += $path.moveTo(point);\n            } else {\n              path += $path.lineTo(point);\n            }\n          }\n        }\n\n        this.strokeSprite.path = path;\n\n        if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) {\n          // helps to avoid drawing fill object if fill is not visible\n          path = $path.moveTo(points[0]) + $path.polyline(points);\n          path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\n          path += $path.lineTo(points[0]);\n          path += $path.closePath();\n          this.fillSprite.path = path;\n        } else {}\n      } else {\n        var path = $path.moveTo(points[0]) + $path.polyline(points);\n        this.strokeSprite.path = path;\n\n        if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) {\n          // helps to avoid drawing fill object if fill is not visible\n          path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\n          path += $path.lineTo(points[0]);\n          path += $path.closePath();\n          this.fillSprite.path = path;\n        }\n      }\n    } else {\n      this.strokeSprite.path = \"\";\n      this.fillSprite.path = \"\";\n    }\n  };\n\n  return StepLineSeriesSegment;\n}(LineSeriesSegment);\n\nexport { StepLineSeriesSegment };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;","map":{"version":3,"names":["__extends","LineSeriesSegment","registry","$path","StepLineSeriesSegment","_super","_this","call","className","prototype","drawSegment","points","closePoints","smoothnessX","smoothnessY","noRisers","vertical","length","path","moveTo","i","point","Math","round","lineTo","strokeSprite","fillOpacity","fillSprite","polyline","closePath","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/series/StepLineSeriesSegment.js"],"sourcesContent":["/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nvar StepLineSeriesSegment = /** @class */ (function (_super) {\r\n    __extends(StepLineSeriesSegment, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function StepLineSeriesSegment() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"StepLineSeriesSegment\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the series segment.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param points       Points to connect\r\n     * @param closePoints  ?\r\n     * @param smoothnessX  Horizontal bezier setting (?)\r\n     * @param smoothnessY  Vertical bezier setting (?)\r\n     */\r\n    StepLineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY, noRisers, vertical) {\r\n        if (points.length > 0 && closePoints.length > 0) {\r\n            if (noRisers) {\r\n                var path = $path.moveTo(points[0]);\r\n                if (points.length > 0) {\r\n                    for (var i = 1; i < points.length; i++) {\r\n                        var point = points[i];\r\n                        if (i / 2 == Math.round(i / 2)) {\r\n                            path += $path.moveTo(point);\r\n                        }\r\n                        else {\r\n                            path += $path.lineTo(point);\r\n                        }\r\n                    }\r\n                }\r\n                this.strokeSprite.path = path;\r\n                if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n                    path = $path.moveTo(points[0]) + $path.polyline(points);\r\n                    path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n                    path += $path.lineTo(points[0]);\r\n                    path += $path.closePath();\r\n                    this.fillSprite.path = path;\r\n                }\r\n                else {\r\n                }\r\n            }\r\n            else {\r\n                var path = $path.moveTo(points[0]) + $path.polyline(points);\r\n                this.strokeSprite.path = path;\r\n                if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n                    path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n                    path += $path.lineTo(points[0]);\r\n                    path += $path.closePath();\r\n                    this.fillSprite.path = path;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.strokeSprite.path = \"\";\r\n            this.fillSprite.path = \"\";\r\n        }\r\n    };\r\n    return StepLineSeriesSegment;\r\n}(LineSeriesSegment));\r\nexport { StepLineSeriesSegment };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}