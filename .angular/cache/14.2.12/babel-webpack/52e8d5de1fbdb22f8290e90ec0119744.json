{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.columns_controller.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../core/renderer\";\nimport Callbacks from \"../../core/utils/callbacks\";\nimport variableWrapper from \"../../core/utils/variable_wrapper\";\nimport { compileGetter, compileSetter } from \"../../core/utils/data\";\nimport { isDefined, isString, isNumeric, isFunction, isObject, isPlainObject, type } from \"../../core/utils/type\";\nimport { each, map } from \"../../core/utils/iterator\";\nimport { getDefaultAlignment } from \"../../core/utils/position\";\nimport { extend } from \"../../core/utils/extend\";\nimport { normalizeIndexes } from \"../../core/utils/array\";\nimport config from \"../../core/config\";\nimport { orderEach, deepExtendArraySafe } from \"../../core/utils/object\";\nimport errors from \"../widget/ui.errors\";\nimport modules from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { captionize } from \"../../core/utils/inflector\";\nimport dateSerialization from \"../../core/utils/date_serialization\";\nimport numberLocalization from \"../../localization/number\";\nimport dateLocalization from \"../../localization/date\";\nimport messageLocalization from \"../../localization/message\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport Store from \"../../data/abstract_store\";\nimport { DataSource } from \"../../data/data_source/data_source\";\nimport { normalizeDataSourceOptions } from \"../../data/data_source/utils\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport filterUtils from \"../shared/filtering\";\nvar USER_STATE_FIELD_NAMES_15_1 = [\"filterValues\", \"filterType\", \"fixed\", \"fixedPosition\"];\nvar USER_STATE_FIELD_NAMES = [\"visibleIndex\", \"dataField\", \"name\", \"dataType\", \"width\", \"visible\", \"sortOrder\", \"lastSortOrder\", \"sortIndex\", \"groupIndex\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"bufferedSelectedFilterOperation\", \"added\"].concat(USER_STATE_FIELD_NAMES_15_1);\nvar IGNORE_COLUMN_OPTION_NAMES = {\n  visibleWidth: true,\n  bestFitWidth: true,\n  bufferedFilterValue: true\n};\nvar COMMAND_EXPAND_CLASS = \"dx-command-expand\";\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\nvar GROUP_COMMAND_COLUMN_NAME = \"groupExpand\";\nvar regExp = /columns\\[(\\d+)\\]\\.?/gi;\nvar globalColumnId = 1;\nexport var columnsControllerModule = {\n  defaultOptions: function () {\n    return {\n      commonColumnSettings: {\n        allowFiltering: true,\n        allowHiding: true,\n        allowSorting: true,\n        allowEditing: true,\n        encodeHtml: true,\n        trueText: messageLocalization.format(\"dxDataGrid-trueText\"),\n        falseText: messageLocalization.format(\"dxDataGrid-falseText\")\n      },\n      allowColumnReordering: false,\n      allowColumnResizing: false,\n      columnResizingMode: \"nextColumn\",\n      columnMinWidth: void 0,\n      columnWidth: void 0,\n      adaptColumnWidthByRatio: true,\n      columns: void 0,\n      regenerateColumnsByVisibleItems: false,\n      customizeColumns: null,\n      dateSerializationFormat: void 0\n    };\n  },\n  controllers: {\n    columns: modules.Controller.inherit(function () {\n      var DEFAULT_COLUMN_OPTIONS = {\n        visible: true,\n        showInColumnChooser: true\n      };\n      var DATATYPE_OPERATIONS = {\n        number: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\n        string: [\"contains\", \"notcontains\", \"startswith\", \"endswith\", \"=\", \"<>\"],\n        date: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\n        datetime: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"]\n      };\n      var COLUMN_INDEX_OPTIONS = {\n        visibleIndex: true,\n        groupIndex: true,\n        grouped: true,\n        sortIndex: true,\n        sortOrder: true\n      };\n\n      var setFilterOperationsAsDefaultValues = function (column) {\n        column.filterOperations = column.defaultFilterOperations;\n      };\n\n      var createColumn = function (that, columnOptions, userStateColumnOptions, bandColumn) {\n        var commonColumnOptions = {};\n\n        if (columnOptions) {\n          if (isString(columnOptions)) {\n            columnOptions = {\n              dataField: columnOptions\n            };\n          }\n\n          that.setName(columnOptions);\n          var result = {};\n\n          if (columnOptions.command) {\n            result = deepExtendArraySafe(commonColumnOptions, columnOptions);\n          } else {\n            commonColumnOptions = that.getCommonSettings(columnOptions);\n\n            if (userStateColumnOptions && userStateColumnOptions.name && userStateColumnOptions.dataField) {\n              columnOptions = extend({}, columnOptions, {\n                dataField: userStateColumnOptions.dataField\n              });\n            }\n\n            var calculatedColumnOptions = that._createCalculatedColumnOptions(columnOptions, bandColumn);\n\n            if (!columnOptions.type) {\n              result = {\n                headerId: \"dx-col-\".concat(globalColumnId++)\n              };\n            }\n\n            result = deepExtendArraySafe(result, DEFAULT_COLUMN_OPTIONS);\n            deepExtendArraySafe(result, commonColumnOptions);\n            deepExtendArraySafe(result, calculatedColumnOptions);\n            deepExtendArraySafe(result, columnOptions);\n            deepExtendArraySafe(result, {\n              selector: null\n            });\n          }\n\n          if (columnOptions.filterOperations === columnOptions.defaultFilterOperations) {\n            setFilterOperationsAsDefaultValues(result);\n          }\n\n          return result;\n        }\n      };\n\n      var createColumnsFromOptions = function createColumnsFromOptions(that, columnsOptions, bandColumn) {\n        var result = [];\n\n        if (columnsOptions) {\n          each(columnsOptions, function (index, columnOptions) {\n            var userStateColumnOptions = that._columnsUserState && checkUserStateColumn(columnOptions, that._columnsUserState[index]) && that._columnsUserState[index];\n\n            var column = createColumn(that, columnOptions, userStateColumnOptions, bandColumn);\n\n            if (column) {\n              if (bandColumn) {\n                column.ownerBand = bandColumn;\n              }\n\n              result.push(column);\n\n              if (column.columns) {\n                result = result.concat(createColumnsFromOptions(that, column.columns, column));\n                delete column.columns;\n                column.hasColumns = true;\n              }\n            }\n          });\n        }\n\n        return result;\n      };\n\n      var getParentBandColumns = function (columnIndex, columnParentByIndex) {\n        var result = [];\n        var parent = columnParentByIndex[columnIndex];\n\n        while (parent) {\n          result.unshift(parent);\n          columnIndex = parent.index;\n          parent = columnParentByIndex[columnIndex];\n        }\n\n        return result;\n      };\n\n      var _getChildrenByBandColumn = function (columnIndex, columnChildrenByIndex, recursive) {\n        var result = [];\n        var children = columnChildrenByIndex[columnIndex];\n\n        if (children) {\n          for (var i = 0; i < children.length; i++) {\n            var column = children[i];\n\n            if (!isDefined(column.groupIndex) || column.showWhenGrouped) {\n              result.push(column);\n\n              if (recursive && column.isBand) {\n                result = result.concat(_getChildrenByBandColumn(column.index, columnChildrenByIndex, recursive));\n              }\n            }\n          }\n        }\n\n        return result;\n      };\n\n      var getColumnFullPath = function (that, column) {\n        var result = [];\n        var columns;\n        var bandColumnsCache = that.getBandColumnsCache();\n\n        var callbackFilter = function (item) {\n          return item.ownerBand === column.ownerBand;\n        };\n\n        if (bandColumnsCache.isPlain) {\n          var columnIndex = that._columns.indexOf(column);\n\n          if (columnIndex >= 0) {\n            result = [\"columns[\".concat(columnIndex, \"]\")];\n          }\n        } else {\n          columns = that._columns.filter(callbackFilter);\n\n          while (columns.length && -1 !== columns.indexOf(column)) {\n            result.unshift(\"columns[\".concat(columns.indexOf(column), \"]\"));\n            column = bandColumnsCache.columnParentByIndex[column.index];\n            columns = column ? that._columns.filter(callbackFilter) : [];\n          }\n        }\n\n        return result.join(\".\");\n      };\n\n      var calculateColspan = function calculateColspan(that, columnID) {\n        var colspan = 0;\n        var columns = that.getChildrenByBandColumn(columnID, true);\n        each(columns, function (_, column) {\n          if (column.isBand) {\n            column.colspan = column.colspan || calculateColspan(that, column.index);\n            colspan += column.colspan || 1;\n          } else {\n            colspan += 1;\n          }\n        });\n        return colspan;\n      };\n\n      var getValueDataType = function (value) {\n        var dataType = type(value);\n\n        if (\"string\" !== dataType && \"boolean\" !== dataType && \"number\" !== dataType && \"date\" !== dataType && \"object\" !== dataType) {\n          dataType = void 0;\n        }\n\n        return dataType;\n      };\n\n      var getSerializationFormat = function (dataType, value) {\n        switch (dataType) {\n          case \"date\":\n          case \"datetime\":\n            return dateSerialization.getDateSerializationFormat(value);\n\n          case \"number\":\n            if (isString(value)) {\n              return \"string\";\n            }\n\n            if (isNumeric(value)) {\n              return null;\n            }\n\n        }\n      };\n\n      var updateSerializers = function (options, dataType) {\n        if (!options.deserializeValue) {\n          if (gridCoreUtils.isDateType(dataType)) {\n            options.deserializeValue = function (value) {\n              return dateSerialization.deserializeDate(value);\n            };\n\n            options.serializeValue = function (value) {\n              return isString(value) ? value : dateSerialization.serializeDate(value, this.serializationFormat);\n            };\n          }\n\n          if (\"number\" === dataType) {\n            options.deserializeValue = function (value) {\n              var parsedValue = parseFloat(value);\n              return isNaN(parsedValue) ? value : parsedValue;\n            };\n\n            options.serializeValue = function (value, target) {\n              if (\"filter\" === target) {\n                return value;\n              }\n\n              return isDefined(value) && \"string\" === this.serializationFormat ? value.toString() : value;\n            };\n          }\n        }\n      };\n\n      var customizeTextForBooleanDataType = function (e) {\n        if (true === e.value) {\n          return this.trueText || \"true\";\n        } else if (false === e.value) {\n          return this.falseText || \"false\";\n        } else {\n          return e.valueText || \"\";\n        }\n      };\n\n      var getCustomizeTextByDataType = function (dataType) {\n        if (\"boolean\" === dataType) {\n          return customizeTextForBooleanDataType;\n        }\n      };\n\n      var updateColumnIndexes = function (that) {\n        each(that._columns, function (index, column) {\n          column.index = index;\n        });\n        each(that._columns, function (index, column) {\n          if (isObject(column.ownerBand)) {\n            column.ownerBand = column.ownerBand.index;\n          }\n        });\n        each(that._commandColumns, function (index, column) {\n          column.index = -(index + 1);\n        });\n      };\n\n      var updateColumnGroupIndexes = function (that, currentColumn) {\n        normalizeIndexes(that._columns, \"groupIndex\", currentColumn, function (column) {\n          var grouped = column.grouped;\n          delete column.grouped;\n          return grouped;\n        });\n      };\n\n      var getColumnIndexByVisibleIndex = function (that, visibleIndex, location) {\n        var rowIndex = isObject(visibleIndex) ? visibleIndex.rowIndex : null;\n        var columns = \"group\" === location ? that.getGroupColumns() : \"columnChooser\" === location ? that.getChooserColumns() : that.getVisibleColumns(rowIndex);\n        var column;\n        visibleIndex = isObject(visibleIndex) ? visibleIndex.columnIndex : visibleIndex;\n        column = columns[visibleIndex];\n\n        if (column && column.type === GROUP_COMMAND_COLUMN_NAME) {\n          column = that._columns.filter(col => column.type === col.type)[0] || column;\n        }\n\n        return column && isDefined(column.index) ? column.index : -1;\n      };\n\n      function checkUserStateColumn(column, userStateColumn) {\n        return column && userStateColumn && userStateColumn.name === (column.name || column.dataField) && (userStateColumn.dataField === column.dataField || column.name);\n      }\n\n      var applyUserState = function (that) {\n        var columnsUserState = that._columnsUserState;\n        var ignoreColumnOptionNames = that._ignoreColumnOptionNames || [];\n        var columns = that._columns;\n        var columnCountById = {};\n        var resultColumns = [];\n        var allColumnsHaveState = true;\n        var userStateColumnIndexes = [];\n        var column;\n        var userStateColumnIndex;\n        var i;\n\n        function applyFieldsState(column, userStateColumn) {\n          if (!userStateColumn) {\n            return;\n          }\n\n          for (var index = 0; index < USER_STATE_FIELD_NAMES.length; index++) {\n            var fieldName = USER_STATE_FIELD_NAMES[index];\n\n            if (ignoreColumnOptionNames.includes(fieldName)) {\n              continue;\n            }\n\n            if (\"dataType\" === fieldName) {\n              column[fieldName] = column[fieldName] || userStateColumn[fieldName];\n            } else if (USER_STATE_FIELD_NAMES_15_1.includes(fieldName)) {\n              if (fieldName in userStateColumn) {\n                column[fieldName] = userStateColumn[fieldName];\n              }\n            } else {\n              if (\"selectedFilterOperation\" === fieldName && userStateColumn[fieldName]) {\n                column.defaultSelectedFilterOperation = column[fieldName] || null;\n              }\n\n              column[fieldName] = userStateColumn[fieldName];\n            }\n          }\n        }\n\n        function findUserStateColumn(columnsUserState, column) {\n          var id = column.name || column.dataField;\n          var count = columnCountById[id] || 0;\n\n          for (var j = 0; j < columnsUserState.length; j++) {\n            if (checkUserStateColumn(column, columnsUserState[j])) {\n              if (count) {\n                count--;\n              } else {\n                columnCountById[id] = columnCountById[id] || 0;\n                columnCountById[id]++;\n                return j;\n              }\n            }\n          }\n\n          return -1;\n        }\n\n        if (columnsUserState) {\n          for (i = 0; i < columns.length; i++) {\n            userStateColumnIndex = findUserStateColumn(columnsUserState, columns[i]);\n            allColumnsHaveState = allColumnsHaveState && userStateColumnIndex >= 0;\n            userStateColumnIndexes.push(userStateColumnIndex);\n          }\n\n          for (i = 0; i < columns.length; i++) {\n            column = columns[i];\n            userStateColumnIndex = userStateColumnIndexes[i];\n\n            if (that._hasUserState || allColumnsHaveState) {\n              applyFieldsState(column, columnsUserState[userStateColumnIndex]);\n            }\n\n            if (userStateColumnIndex >= 0 && isDefined(columnsUserState[userStateColumnIndex].initialIndex)) {\n              resultColumns[userStateColumnIndex] = column;\n            } else {\n              resultColumns.push(column);\n            }\n          }\n\n          var hasAddedBands = false;\n\n          for (i = 0; i < columnsUserState.length; i++) {\n            var columnUserState = columnsUserState[i];\n\n            if (columnUserState.added && findUserStateColumn(columns, columnUserState) < 0) {\n              column = createColumn(that, columnUserState.added);\n              applyFieldsState(column, columnUserState);\n              resultColumns.push(column);\n\n              if (columnUserState.added.columns) {\n                hasAddedBands = true;\n              }\n            }\n          }\n\n          if (hasAddedBands) {\n            updateColumnIndexes(that);\n            resultColumns = createColumnsFromOptions(that, resultColumns);\n          }\n\n          assignColumns(that, resultColumns);\n        }\n      };\n\n      var updateIndexes = function (that, column) {\n        updateColumnIndexes(that);\n        updateColumnGroupIndexes(that, column);\n        !function (that, currentColumn) {\n          each(that._columns, function (index, column) {\n            if (isDefined(column.sortIndex) && !isSortOrderValid(column.sortOrder)) {\n              delete column.sortIndex;\n            }\n          });\n          normalizeIndexes(that._columns, \"sortIndex\", currentColumn, function (column) {\n            return !isDefined(column.groupIndex) && isSortOrderValid(column.sortOrder);\n          });\n        }(that, column);\n        resetBandColumnsCache(that);\n        !function (that, currentColumn) {\n          var column;\n          var result = [];\n          var bandColumnsCache = that.getBandColumnsCache();\n          var bandedColumns = [];\n\n          var columns = that._columns.filter(column => !column.command);\n\n          for (var i = 0; i < columns.length; i++) {\n            column = columns[i];\n            var parentBandColumns = getParentBandColumns(i, bandColumnsCache.columnParentByIndex);\n\n            if (parentBandColumns.length) {\n              bandedColumns.push(column);\n            } else {\n              result.push(column);\n            }\n          }\n\n          normalizeIndexes(bandedColumns, \"visibleIndex\", currentColumn);\n          normalizeIndexes(result, \"visibleIndex\", currentColumn);\n        }(that, column);\n      };\n\n      var resetColumnsCache = function (that) {\n        that.resetColumnsCache();\n      };\n\n      function assignColumns(that, columns) {\n        that._previousColumns = that._columns;\n        that._columns = columns;\n        resetColumnsCache(that);\n        that.updateColumnDataTypes();\n      }\n\n      var updateColumnChanges = function (that, changeType, optionName, columnIndex) {\n        var columnChanges = that._columnChanges || {\n          optionNames: {\n            length: 0\n          },\n          changeTypes: {\n            length: 0\n          },\n          columnIndex: columnIndex\n        };\n        optionName = optionName || \"all\";\n        optionName = optionName.split(\".\")[0];\n        var changeTypes = columnChanges.changeTypes;\n\n        if (changeType && !changeTypes[changeType]) {\n          changeTypes[changeType] = true;\n          changeTypes.length++;\n        }\n\n        var optionNames = columnChanges.optionNames;\n\n        if (optionName && !optionNames[optionName]) {\n          optionNames[optionName] = true;\n          optionNames.length++;\n        }\n\n        if (void 0 === columnIndex || columnIndex !== columnChanges.columnIndex) {\n          delete columnChanges.columnIndex;\n        }\n\n        that._columnChanges = columnChanges;\n        resetColumnsCache(that);\n      };\n\n      var fireColumnsChanged = function (that) {\n        var onColumnsChanging = that.option(\"onColumnsChanging\");\n        var columnChanges = that._columnChanges;\n        var reinitOptionNames = [\"dataField\", \"lookup\", \"dataType\", \"columns\"];\n\n        if (that.isInitialized() && !that._updateLockCount && columnChanges) {\n          if (onColumnsChanging) {\n            that._updateLockCount++;\n            onColumnsChanging(extend({\n              component: that.component\n            }, columnChanges));\n            that._updateLockCount--;\n          }\n\n          that._columnChanges = void 0;\n\n          if (options = columnChanges.optionNames, options && reinitOptionNames.some(name => options[name])) {\n            that._reinitAfterLookupChanges = null === columnChanges || void 0 === columnChanges ? void 0 : columnChanges.optionNames.lookup;\n            that.reinit();\n            that._reinitAfterLookupChanges = void 0;\n          } else {\n            that.columnsChanged.fire(columnChanges);\n          }\n        }\n\n        var options;\n      };\n\n      var updateSortOrderWhenGrouping = function (that, column, groupIndex, prevGroupIndex) {\n        var columnWasGrouped = prevGroupIndex >= 0;\n\n        if (groupIndex >= 0) {\n          if (!columnWasGrouped) {\n            column.lastSortOrder = column.sortOrder;\n          }\n        } else {\n          var sortMode = that.option(\"sorting.mode\");\n          var sortOrder = column.lastSortOrder;\n\n          if (\"single\" === sortMode) {\n            var sortedByAnotherColumn = that._columns.some(col => col !== column && isDefined(col.sortIndex));\n\n            if (sortedByAnotherColumn) {\n              sortOrder = void 0;\n            }\n          }\n\n          column.sortOrder = sortOrder;\n        }\n      };\n\n      var fireOptionChanged = function (that, options) {\n        var value = options.value;\n        var optionName = options.optionName;\n        var prevValue = options.prevValue;\n        var fullOptionName = options.fullOptionName;\n        var fullOptionPath = \"\".concat(fullOptionName, \".\").concat(optionName);\n\n        if (!IGNORE_COLUMN_OPTION_NAMES[optionName] && that._skipProcessingColumnsChange !== fullOptionPath) {\n          that._skipProcessingColumnsChange = fullOptionPath;\n\n          that.component._notifyOptionChanged(fullOptionPath, value, prevValue);\n\n          that._skipProcessingColumnsChange = false;\n        }\n      };\n\n      var columnOptionCore = function (that, column, optionName, value, notFireEvent) {\n        var optionGetter = compileGetter(optionName);\n        var columnIndex = column.index;\n        var columns;\n        var changeType;\n        var initialColumn;\n\n        if (3 === arguments.length) {\n          return optionGetter(column, {\n            functionsAsIs: true\n          });\n        }\n\n        var prevValue = optionGetter(column, {\n          functionsAsIs: true\n        });\n\n        if (!equalByValue(prevValue, value)) {\n          if (\"groupIndex\" === optionName || \"calculateGroupValue\" === optionName) {\n            changeType = \"grouping\";\n            updateSortOrderWhenGrouping(that, column, value, prevValue);\n          } else if (\"sortIndex\" === optionName || \"sortOrder\" === optionName || \"calculateSortValue\" === optionName) {\n            changeType = \"sorting\";\n          } else {\n            changeType = \"columns\";\n          }\n\n          var optionSetter = compileSetter(optionName);\n          optionSetter(column, value, {\n            functionsAsIs: true\n          });\n          var fullOptionName = getColumnFullPath(that, column);\n\n          if (COLUMN_INDEX_OPTIONS[optionName]) {\n            updateIndexes(that, column);\n            value = optionGetter(column);\n          }\n\n          if (\"name\" === optionName || \"allowEditing\" === optionName) {\n            that._checkColumns();\n          }\n\n          if (!isDefined(prevValue) && !isDefined(value) && 0 !== optionName.indexOf(\"buffer\")) {\n            notFireEvent = true;\n          }\n\n          if (!notFireEvent) {\n            if (!USER_STATE_FIELD_NAMES.includes(optionName) && \"visibleWidth\" !== optionName) {\n              columns = that.option(\"columns\");\n              initialColumn = that.getColumnByPath(fullOptionName, columns);\n\n              if (isString(initialColumn)) {\n                initialColumn = columns[columnIndex] = {\n                  dataField: initialColumn\n                };\n              }\n\n              if (initialColumn && checkUserStateColumn(initialColumn, column)) {\n                optionSetter(initialColumn, value, {\n                  functionsAsIs: true\n                });\n              }\n            }\n\n            updateColumnChanges(that, changeType, optionName, columnIndex);\n          } else {\n            resetColumnsCache(that);\n          }\n\n          fullOptionName && fireOptionChanged(that, {\n            fullOptionName: fullOptionName,\n            optionName: optionName,\n            value: value,\n            prevValue: prevValue\n          });\n        }\n      };\n\n      function isSortOrderValid(sortOrder) {\n        return \"asc\" === sortOrder || \"desc\" === sortOrder;\n      }\n\n      var defaultSetCellValue = function (data, value) {\n        if (!this.dataField) {\n          return;\n        }\n\n        var path = this.dataField.split(\".\");\n        var dotCount = path.length - 1;\n\n        if (this.serializeValue) {\n          value = this.serializeValue(value);\n        }\n\n        for (var i = 0; i < dotCount; i++) {\n          var name = path[i];\n          data = data[name] = data[name] || {};\n        }\n\n        data[path[dotCount]] = value;\n      };\n\n      var isCustomCommandColumn = (that, commandColumn) => !!that._columns.filter(column => column.type === commandColumn.type).length;\n\n      var getFixedPosition = function (that, column) {\n        var rtlEnabled = that.option(\"rtlEnabled\");\n\n        if (column.command && !isCustomCommandColumn(that, column) || !column.fixedPosition) {\n          return rtlEnabled ? \"right\" : \"left\";\n        }\n\n        return column.fixedPosition;\n      };\n\n      var processExpandColumns = function (columns, expandColumns, type, columnIndex) {\n        var customColumnIndex;\n        var rowCount = this.getRowCount();\n        var rowspan = columns[columnIndex] && columns[columnIndex].rowspan;\n        var expandColumnsByType = expandColumns.filter(column => column.type === type);\n        columns.forEach((column, index) => {\n          if (column.type === type) {\n            customColumnIndex = index;\n            rowspan = columns[index + 1] ? columns[index + 1].rowspan : rowCount;\n          }\n        });\n\n        if (rowspan > 1) {\n          expandColumnsByType = map(expandColumnsByType, function (expandColumn) {\n            return extend({}, expandColumn, {\n              rowspan: rowspan\n            });\n          });\n        }\n\n        expandColumnsByType.unshift.apply(expandColumnsByType, isDefined(customColumnIndex) ? [customColumnIndex, 1] : [columnIndex, 0]);\n        columns.splice.apply(columns, expandColumnsByType);\n        return rowspan || 1;\n      };\n\n      var numberToString = function (number, digitsCount) {\n        var str = number ? number.toString() : \"0\";\n\n        while (str.length < digitsCount) {\n          str = \"0\" + str;\n        }\n\n        return str;\n      };\n\n      var mergeColumns = (that, columns, commandColumns, needToExtend) => {\n        var column;\n        var commandColumnIndex;\n        var result = columns.slice().map(column => extend({}, column));\n\n        var isColumnFixing = that._isColumnFixing();\n\n        var defaultCommandColumns = commandColumns.slice().map(column => extend({\n          fixed: isColumnFixing\n        }, column));\n\n        var getCommandColumnIndex = column => commandColumns.reduce((result, commandColumn, index) => {\n          var columnType = needToExtend && column.type === GROUP_COMMAND_COLUMN_NAME ? \"expand\" : column.type;\n          return commandColumn.type === columnType || commandColumn.command === column.command ? index : result;\n        }, -1);\n\n        var callbackFilter = commandColumn => commandColumn.command !== commandColumns[commandColumnIndex].command;\n\n        for (var i = 0; i < columns.length; i++) {\n          column = columns[i];\n          commandColumnIndex = column && (column.type || column.command) ? getCommandColumnIndex(column) : -1;\n\n          if (commandColumnIndex >= 0) {\n            if (needToExtend) {\n              result[i] = extend({\n                fixed: isColumnFixing\n              }, commandColumns[commandColumnIndex], column);\n\n              if (column.type !== GROUP_COMMAND_COLUMN_NAME) {\n                defaultCommandColumns = defaultCommandColumns.filter(callbackFilter);\n              }\n            } else {\n              var columnOptions = {\n                visibleIndex: column.visibleIndex,\n                index: column.index,\n                headerId: column.headerId,\n                allowFixing: 0 === column.groupIndex,\n                allowReordering: 0 === column.groupIndex,\n                groupIndex: column.groupIndex\n              };\n              result[i] = extend({}, column, commandColumns[commandColumnIndex], column.type === GROUP_COMMAND_COLUMN_NAME && columnOptions);\n            }\n          }\n        }\n\n        if (columns.length && needToExtend && defaultCommandColumns.length) {\n          result = result.concat(defaultCommandColumns);\n        }\n\n        return result;\n      };\n\n      var isColumnFixed = (that, column) => isDefined(column.fixed) || !column.type ? column.fixed : that._isColumnFixing();\n\n      var resetBandColumnsCache = that => {\n        that._bandColumnsCache = void 0;\n      };\n\n      var findColumn = (columns, identifier) => {\n        var identifierOptionName = isString(identifier) && identifier.substr(0, identifier.indexOf(\":\"));\n        var column;\n\n        if (void 0 === identifier) {\n          return;\n        }\n\n        if (identifierOptionName) {\n          identifier = identifier.substr(identifierOptionName.length + 1);\n        }\n\n        if (identifierOptionName) {\n          column = columns.filter(column => \"\" + column[identifierOptionName] === identifier)[0];\n        } else {\n          [\"index\", \"name\", \"dataField\", \"caption\"].some(optionName => {\n            column = columns.filter(column => column[optionName] === identifier)[0];\n            return !!column;\n          });\n        }\n\n        return column;\n      };\n\n      var members = {\n        _getExpandColumnOptions: function () {\n          return {\n            type: \"expand\",\n            command: \"expand\",\n            width: \"auto\",\n            cssClass: COMMAND_EXPAND_CLASS,\n            allowEditing: false,\n            allowGrouping: false,\n            allowSorting: false,\n            allowResizing: false,\n            allowReordering: false,\n            allowHiding: false\n          };\n        },\n        _getFirstItems: function (dataSource) {\n          var groupsCount;\n          var items = [];\n\n          if (dataSource && dataSource.items().length > 0) {\n            groupsCount = gridCoreUtils.normalizeSortingInfo(dataSource.group()).length;\n\n            items = function getFirstItemsCore(items, groupsCount) {\n              if (!items || !groupsCount) {\n                return items;\n              }\n\n              for (var i = 0; i < items.length; i++) {\n                var childItems = getFirstItemsCore(items[i].items || items[i].collapsedItems, groupsCount - 1);\n\n                if (childItems && childItems.length) {\n                  return childItems;\n                }\n              }\n            }(dataSource.items(), groupsCount) || [];\n          }\n\n          return items;\n        },\n        _endUpdateCore: function () {\n          !this._skipProcessingColumnsChange && fireColumnsChanged(this);\n        },\n        init: function (isApplyingUserState) {\n          var columns = this.option(\"columns\");\n          this._commandColumns = this._commandColumns || [];\n          this._columns = this._columns || [];\n          this._isColumnsFromOptions = !!columns;\n\n          if (this._isColumnsFromOptions) {\n            assignColumns(this, columns ? createColumnsFromOptions(this, columns) : []);\n            applyUserState(this);\n          } else {\n            assignColumns(this, this._columnsUserState ? createColumnsFromOptions(this, this._columnsUserState) : this._columns);\n          }\n\n          !function (that) {\n            var options = that._getExpandColumnOptions();\n\n            that.addCommandColumn(options);\n          }(this);\n\n          if (this._dataSourceApplied) {\n            this.applyDataSource(this._dataSource, true, isApplyingUserState);\n          } else {\n            updateIndexes(this);\n          }\n\n          this._checkColumns();\n        },\n        callbackNames: function () {\n          return [\"columnsChanged\"];\n        },\n        getColumnByPath: function (path, columns) {\n          var column;\n          var columnIndexes = [];\n          path.replace(regExp, function (_, columnIndex) {\n            columnIndexes.push(parseInt(columnIndex));\n            return \"\";\n          });\n\n          if (columnIndexes.length) {\n            if (columns) {\n              column = columnIndexes.reduce(function (column, index) {\n                return column && column.columns && column.columns[index];\n              }, {\n                columns: columns\n              });\n            } else {\n              column = function (that, columnIndexes) {\n                var result;\n                var columns;\n                var bandColumnsCache = that.getBandColumnsCache();\n\n                var callbackFilter = function (column) {\n                  var ownerBand = result ? result.index : void 0;\n                  return column.ownerBand === ownerBand;\n                };\n\n                if (bandColumnsCache.isPlain) {\n                  result = that._columns[columnIndexes[0]];\n                } else {\n                  columns = that._columns.filter(callbackFilter);\n\n                  for (var i = 0; i < columnIndexes.length; i++) {\n                    result = columns[columnIndexes[i]];\n\n                    if (result) {\n                      columns = that._columns.filter(callbackFilter);\n                    }\n                  }\n                }\n\n                return result;\n              }(this, columnIndexes);\n            }\n          }\n\n          return column;\n        },\n        optionChanged: function (args) {\n          var needUpdateRequireResize;\n\n          switch (args.name) {\n            case \"adaptColumnWidthByRatio\":\n              args.handled = true;\n              break;\n\n            case \"dataSource\":\n              if (args.value !== args.previousValue && !this.option(\"columns\") && (!Array.isArray(args.value) || !Array.isArray(args.previousValue))) {\n                this._columns = [];\n              }\n\n              break;\n\n            case \"columns\":\n              needUpdateRequireResize = this._skipProcessingColumnsChange;\n              args.handled = true;\n\n              if (!this._skipProcessingColumnsChange) {\n                if (args.name === args.fullName) {\n                  this._columnsUserState = null;\n                  this._ignoreColumnOptionNames = null;\n                  this.init();\n                } else {\n                  this._columnOptionChanged(args);\n\n                  needUpdateRequireResize = true;\n                }\n              }\n\n              if (needUpdateRequireResize) {\n                this._updateRequireResize(args);\n              }\n\n              break;\n\n            case \"commonColumnSettings\":\n            case \"columnAutoWidth\":\n            case \"allowColumnResizing\":\n            case \"allowColumnReordering\":\n            case \"columnFixing\":\n            case \"grouping\":\n            case \"groupPanel\":\n            case \"regenerateColumnsByVisibleItems\":\n            case \"customizeColumns\":\n            case \"columnHidingEnabled\":\n            case \"dateSerializationFormat\":\n            case \"columnResizingMode\":\n            case \"columnMinWidth\":\n            case \"columnWidth\":\n              args.handled = true;\n              var ignoreColumnOptionNames = \"columnWidth\" === args.fullName && [\"width\"];\n              this.reinit(ignoreColumnOptionNames);\n              break;\n\n            case \"rtlEnabled\":\n              this.reinit();\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        },\n        _columnOptionChanged: function (args) {\n          var columnOptionValue = {};\n          var column = this.getColumnByPath(args.fullName);\n          var columnOptionName = args.fullName.replace(regExp, \"\");\n\n          if (column) {\n            if (columnOptionName) {\n              columnOptionValue[columnOptionName] = args.value;\n            } else {\n              columnOptionValue = args.value;\n            }\n\n            this._skipProcessingColumnsChange = args.fullName;\n            this.columnOption(column.index, columnOptionValue);\n            this._skipProcessingColumnsChange = false;\n          }\n        },\n        _updateRequireResize: function (args) {\n          var component = this.component;\n\n          if (\"width\" === args.fullName.replace(regExp, \"\") && component._updateLockCount) {\n            component._requireResize = true;\n          }\n        },\n        publicMethods: function () {\n          return [\"addColumn\", \"deleteColumn\", \"columnOption\", \"columnCount\", \"clearSorting\", \"clearGrouping\", \"getVisibleColumns\", \"getVisibleColumnIndex\"];\n        },\n        applyDataSource: function (dataSource, forceApplying, isApplyingUserState) {\n          var isDataSourceLoaded = dataSource && dataSource.isLoaded();\n          this._dataSource = dataSource;\n\n          if (!this._dataSourceApplied || 0 === this._dataSourceColumnsCount || forceApplying || this.option(\"regenerateColumnsByVisibleItems\")) {\n            if (isDataSourceLoaded) {\n              if (!this._isColumnsFromOptions) {\n                var columnsFromDataSource = function (that, dataSource) {\n                  var firstItems = that._getFirstItems(dataSource);\n\n                  var fieldName;\n                  var processedFields = {};\n                  var result = [];\n\n                  for (var i = 0; i < firstItems.length; i++) {\n                    if (firstItems[i]) {\n                      for (fieldName in firstItems[i]) {\n                        if (!isFunction(firstItems[i][fieldName]) || variableWrapper.isWrapped(firstItems[i][fieldName])) {\n                          processedFields[fieldName] = true;\n                        }\n                      }\n                    }\n                  }\n\n                  for (fieldName in processedFields) {\n                    if (0 !== fieldName.indexOf(\"__\")) {\n                      var column = createColumn(that, fieldName);\n                      result.push(column);\n                    }\n                  }\n\n                  return result;\n                }(this, dataSource);\n\n                if (columnsFromDataSource.length) {\n                  assignColumns(this, columnsFromDataSource);\n                  this._dataSourceColumnsCount = this._columns.length;\n                  applyUserState(this);\n                }\n              }\n\n              return this.updateColumns(dataSource, forceApplying, isApplyingUserState);\n            } else {\n              this._dataSourceApplied = false;\n              updateIndexes(this);\n            }\n          } else if (isDataSourceLoaded && !this.isAllDataTypesDefined(true) && this.updateColumnDataTypes(dataSource)) {\n            updateColumnChanges(this, \"columns\");\n            fireColumnsChanged(this);\n            return new Deferred().reject().promise();\n          }\n        },\n        reset: function () {\n          this._dataSource = null;\n          this._dataSourceApplied = false;\n          this._dataSourceColumnsCount = void 0;\n          this.reinit();\n        },\n        resetColumnsCache: function () {\n          this._visibleColumns = void 0;\n          this._fixedColumns = void 0;\n          this._rowCount = void 0;\n          resetBandColumnsCache(this);\n        },\n        reinit: function (ignoreColumnOptionNames) {\n          this._columnsUserState = this.getUserState();\n          this._ignoreColumnOptionNames = ignoreColumnOptionNames || null;\n          this.init();\n\n          if (ignoreColumnOptionNames) {\n            this._ignoreColumnOptionNames = null;\n          }\n        },\n        isInitialized: function () {\n          return !!this._columns.length || !!this.option(\"columns\");\n        },\n        isDataSourceApplied: function () {\n          return this._dataSourceApplied;\n        },\n        getCommonSettings: function (column) {\n          var commonColumnSettings = (!column || !column.type) && this.option(\"commonColumnSettings\") || {};\n          var groupingOptions = this.option(\"grouping\") || {};\n          var groupPanelOptions = this.option(\"groupPanel\") || {};\n          return extend({\n            allowFixing: this.option(\"columnFixing.enabled\"),\n            allowResizing: this.option(\"allowColumnResizing\") || void 0,\n            allowReordering: this.option(\"allowColumnReordering\"),\n            minWidth: this.option(\"columnMinWidth\"),\n            width: this.option(\"columnWidth\"),\n            autoExpandGroup: groupingOptions.autoExpandAll,\n            allowCollapsing: groupingOptions.allowCollapsing,\n            allowGrouping: groupPanelOptions.allowColumnDragging && groupPanelOptions.visible || groupingOptions.contextMenuEnabled\n          }, commonColumnSettings);\n        },\n        isColumnOptionUsed: function (optionName) {\n          for (var i = 0; i < this._columns.length; i++) {\n            if (this._columns[i][optionName]) {\n              return true;\n            }\n          }\n        },\n        isAllDataTypesDefined: function (checkSerializers) {\n          var columns = this._columns;\n\n          if (!columns.length) {\n            return false;\n          }\n\n          for (var i = 0; i < columns.length; i++) {\n            if (!columns[i].dataField && columns[i].calculateCellValue === columns[i].defaultCalculateCellValue) {\n              continue;\n            }\n\n            if (!columns[i].dataType || checkSerializers && columns[i].deserializeValue && void 0 === columns[i].serializationFormat) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        getColumns: function () {\n          return this._columns;\n        },\n        isBandColumnsUsed: function () {\n          return this.getColumns().some(function (column) {\n            return column.isBand;\n          });\n        },\n        getGroupColumns: function () {\n          var result = [];\n          each(this._columns, function () {\n            if (isDefined(this.groupIndex)) {\n              result[this.groupIndex] = this;\n            }\n          });\n          return result;\n        },\n        _shouldReturnVisibleColumns: function () {\n          return true;\n        },\n        _compileVisibleColumns: function (rowIndex) {\n          this._visibleColumns = this._visibleColumns || this._compileVisibleColumnsCore();\n          rowIndex = isDefined(rowIndex) ? rowIndex : this._visibleColumns.length - 1;\n          return this._visibleColumns[rowIndex] || [];\n        },\n        getVisibleColumns: function (rowIndex) {\n          if (!this._shouldReturnVisibleColumns()) {\n            return [];\n          }\n\n          return this._compileVisibleColumns.apply(this, arguments);\n        },\n        getFixedColumns: function (rowIndex) {\n          this._fixedColumns = this._fixedColumns || this._getFixedColumnsCore();\n          rowIndex = isDefined(rowIndex) ? rowIndex : this._fixedColumns.length - 1;\n          return this._fixedColumns[rowIndex] || [];\n        },\n        getFilteringColumns: function () {\n          return this.getColumns().filter(item => (item.dataField || item.name) && (item.allowFiltering || item.allowHeaderFiltering)).map(item => {\n            var field = extend(true, {}, item);\n\n            if (!isDefined(field.dataField)) {\n              field.dataField = field.name;\n            }\n\n            field.filterOperations = item.filterOperations !== item.defaultFilterOperations ? field.filterOperations : null;\n            return field;\n          });\n        },\n        getColumnIndexOffset: function () {\n          return 0;\n        },\n        _getFixedColumnsCore: function () {\n          var result = [];\n          var rowCount = this.getRowCount();\n\n          var isColumnFixing = this._isColumnFixing();\n\n          var transparentColumn = {\n            command: \"transparent\"\n          };\n          var transparentColspan = 0;\n          var notFixedColumnCount;\n          var transparentColumnIndex;\n          var lastFixedPosition;\n\n          if (isColumnFixing) {\n            for (var i = 0; i <= rowCount; i++) {\n              notFixedColumnCount = 0;\n              lastFixedPosition = null;\n              transparentColumnIndex = null;\n              var visibleColumns = this.getVisibleColumns(i, true);\n\n              for (var j = 0; j < visibleColumns.length; j++) {\n                var prevColumn = visibleColumns[j - 1];\n                var column = visibleColumns[j];\n\n                if (!column.fixed) {\n                  if (0 === i) {\n                    if (column.isBand && column.colspan) {\n                      transparentColspan += column.colspan;\n                    } else {\n                      transparentColspan++;\n                    }\n                  }\n\n                  notFixedColumnCount++;\n\n                  if (!isDefined(transparentColumnIndex)) {\n                    transparentColumnIndex = j;\n                  }\n                } else if (prevColumn && prevColumn.fixed && getFixedPosition(this, prevColumn) !== getFixedPosition(this, column)) {\n                  if (!isDefined(transparentColumnIndex)) {\n                    transparentColumnIndex = j;\n                  }\n                } else {\n                  lastFixedPosition = column.fixedPosition;\n                }\n              }\n\n              if (0 === i && (0 === notFixedColumnCount || notFixedColumnCount >= visibleColumns.length)) {\n                return [];\n              }\n\n              if (!isDefined(transparentColumnIndex)) {\n                transparentColumnIndex = \"right\" === lastFixedPosition ? 0 : visibleColumns.length;\n              }\n\n              result[i] = visibleColumns.slice(0);\n\n              if (!transparentColumn.colspan) {\n                transparentColumn.colspan = transparentColspan;\n              }\n\n              result[i].splice(transparentColumnIndex, notFixedColumnCount, transparentColumn);\n            }\n          }\n\n          return result.map(columns => columns.map(column => {\n            var newColumn = _extends({}, column);\n\n            if (newColumn.headerId) {\n              newColumn.headerId += \"-fixed\";\n            }\n\n            return newColumn;\n          }));\n        },\n        _isColumnFixing: function () {\n          var isColumnFixing = this.option(\"columnFixing.enabled\");\n          !isColumnFixing && each(this._columns, function (_, column) {\n            if (column.fixed) {\n              isColumnFixing = true;\n              return false;\n            }\n          });\n          return isColumnFixing;\n        },\n        _getExpandColumnsCore: function () {\n          return this.getGroupColumns();\n        },\n        getExpandColumns: function () {\n          var expandColumns = this._getExpandColumnsCore();\n\n          var expandColumn;\n          var firstGroupColumn = expandColumns.filter(column => 0 === column.groupIndex)[0];\n          var isFixedFirstGroupColumn = firstGroupColumn && firstGroupColumn.fixed;\n\n          var isColumnFixing = this._isColumnFixing();\n\n          var rtlEnabled = this.option(\"rtlEnabled\");\n\n          if (expandColumns.length) {\n            expandColumn = this.columnOption(\"command:expand\");\n          }\n\n          expandColumns = map(expandColumns, column => extend({}, column, {\n            visibleWidth: null,\n            minWidth: null,\n            cellTemplate: !isDefined(column.groupIndex) ? column.cellTemplate : null,\n            headerCellTemplate: null,\n            fixed: !isDefined(column.groupIndex) || !isFixedFirstGroupColumn ? isColumnFixing : true,\n            fixedPosition: rtlEnabled ? \"right\" : \"left\"\n          }, expandColumn, {\n            index: column.index,\n            type: column.type || GROUP_COMMAND_COLUMN_NAME\n          }));\n          return expandColumns;\n        },\n        getBandColumnsCache: function () {\n          if (!this._bandColumnsCache) {\n            var columns = this._columns;\n            var columnChildrenByIndex = {};\n            var columnParentByIndex = {};\n            var isPlain = true;\n            columns.forEach(function (column) {\n              var ownerBand = column.ownerBand;\n              var parentIndex = isObject(ownerBand) ? ownerBand.index : ownerBand;\n              var parent = columns[parentIndex];\n\n              if (column.hasColumns) {\n                isPlain = false;\n              }\n\n              if (column.colspan) {\n                column.colspan = void 0;\n              }\n\n              if (column.rowspan) {\n                column.rowspan = void 0;\n              }\n\n              if (parent) {\n                columnParentByIndex[column.index] = parent;\n              } else {\n                parentIndex = -1;\n              }\n\n              columnChildrenByIndex[parentIndex] = columnChildrenByIndex[parentIndex] || [];\n              columnChildrenByIndex[parentIndex].push(column);\n            });\n            this._bandColumnsCache = {\n              isPlain: isPlain,\n              columnChildrenByIndex: columnChildrenByIndex,\n              columnParentByIndex: columnParentByIndex\n            };\n          }\n\n          return this._bandColumnsCache;\n        },\n        _isColumnVisible: function (column) {\n          return column.visible && this.isParentColumnVisible(column.index);\n        },\n        _compileVisibleColumnsCore: function () {\n          var that = this;\n          var i;\n          var result = [];\n          var rowspanGroupColumns = 0;\n          var rowspanExpandColumns = 0;\n          var rowCount = that.getRowCount();\n          var positiveIndexedColumns = [];\n          var negativeIndexedColumns = [];\n          var notGroupedColumnsCount = 0;\n          var isFixedToEnd;\n          var rtlEnabled = that.option(\"rtlEnabled\");\n          var bandColumnsCache = that.getBandColumnsCache();\n          var expandColumns = mergeColumns(that, that.getExpandColumns(), that._columns);\n          var columns = mergeColumns(that, that._columns, that._commandColumns, true);\n\n          var columnDigitsCount = function (number) {\n            var i;\n\n            for (i = 0; number > 1; i++) {\n              number /= 10;\n            }\n\n            return i;\n          }(columns.length);\n\n          !function (that, columns, bandColumnsCache) {\n            var rowspan;\n\n            for (var i = 0; i < columns.length; i++) {\n              var column = columns[i];\n\n              if (column.visible || column.command) {\n                if (column.isBand) {\n                  column.colspan = column.colspan || calculateColspan(that, column.index);\n                }\n\n                if (!column.isBand || !column.colspan) {\n                  rowspan = that.getRowCount();\n\n                  if (!column.command && (!isDefined(column.groupIndex) || column.showWhenGrouped)) {\n                    rowspan -= getParentBandColumns(column.index, bandColumnsCache.columnParentByIndex).length;\n                  }\n\n                  if (rowspan > 1) {\n                    column.rowspan = rowspan;\n                  }\n                }\n              }\n            }\n          }(that, columns, bandColumnsCache);\n\n          for (i = 0; i < rowCount; i++) {\n            result[i] = [];\n            negativeIndexedColumns[i] = [{}];\n            positiveIndexedColumns[i] = [{}, {}, {}];\n          }\n\n          each(columns, function () {\n            var visibleIndex = this.visibleIndex;\n            var indexedColumns;\n            var parentBandColumns = getParentBandColumns(this.index, bandColumnsCache.columnParentByIndex);\n\n            var visible = that._isColumnVisible(this);\n\n            if (visible && (!isDefined(this.groupIndex) || this.showWhenGrouped)) {\n              var rowIndex = parentBandColumns.length;\n\n              if (visibleIndex < 0) {\n                visibleIndex = -visibleIndex;\n                indexedColumns = negativeIndexedColumns[rowIndex];\n              } else {\n                this.fixed = parentBandColumns.length ? parentBandColumns[0].fixed : this.fixed;\n                this.fixedPosition = parentBandColumns.length ? parentBandColumns[0].fixedPosition : this.fixedPosition;\n\n                if (this.fixed) {\n                  isFixedToEnd = \"right\" === this.fixedPosition;\n\n                  if (rtlEnabled && (!this.command || isCustomCommandColumn(that, this))) {\n                    isFixedToEnd = !isFixedToEnd;\n                  }\n\n                  if (isFixedToEnd) {\n                    indexedColumns = positiveIndexedColumns[rowIndex][2];\n                  } else {\n                    indexedColumns = positiveIndexedColumns[rowIndex][0];\n                  }\n                } else {\n                  indexedColumns = positiveIndexedColumns[rowIndex][1];\n                }\n              }\n\n              if (parentBandColumns.length) {\n                visibleIndex = numberToString(visibleIndex, columnDigitsCount);\n\n                for (i = parentBandColumns.length - 1; i >= 0; i--) {\n                  visibleIndex = numberToString(parentBandColumns[i].visibleIndex, columnDigitsCount) + visibleIndex;\n                }\n              }\n\n              indexedColumns[visibleIndex] = indexedColumns[visibleIndex] || [];\n              indexedColumns[visibleIndex].push(this);\n              notGroupedColumnsCount++;\n            }\n          });\n          each(result, function (rowIndex) {\n            orderEach(negativeIndexedColumns[rowIndex], function (_, columns) {\n              result[rowIndex].unshift.apply(result[rowIndex], columns);\n            });\n            var firstPositiveIndexColumn = result[rowIndex].length;\n            each(positiveIndexedColumns[rowIndex], function (index, columnsByFixing) {\n              orderEach(columnsByFixing, function (_, columnsByVisibleIndex) {\n                result[rowIndex].push.apply(result[rowIndex], columnsByVisibleIndex);\n              });\n            });\n\n            if (rowspanExpandColumns < rowIndex + 1) {\n              rowspanExpandColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, \"detailExpand\", firstPositiveIndexColumn);\n            }\n\n            if (rowspanGroupColumns < rowIndex + 1) {\n              rowspanGroupColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, GROUP_COMMAND_COLUMN_NAME, firstPositiveIndexColumn);\n            }\n          });\n          result.push(function getDataColumns(columns, rowIndex, bandColumnID) {\n            var result = [];\n            rowIndex = rowIndex || 0;\n            columns[rowIndex] && each(columns[rowIndex], function (_, column) {\n              if (column.ownerBand === bandColumnID || column.type === GROUP_COMMAND_COLUMN_NAME) {\n                if (!column.isBand || !column.colspan) {\n                  if (!column.command || rowIndex < 1) {\n                    result.push(column);\n                  }\n                } else {\n                  result.push.apply(result, getDataColumns(columns, rowIndex + 1, column.index));\n                }\n              }\n            });\n            return result;\n          }(result));\n\n          if (!notGroupedColumnsCount && that._columns.length) {\n            result[rowCount].push({\n              command: \"empty\"\n            });\n          }\n\n          return result;\n        },\n        getInvisibleColumns: function (columns, bandColumnIndex) {\n          var that = this;\n          var result = [];\n          var hiddenColumnsByBand;\n          columns = columns || that._columns;\n          each(columns, function (_, column) {\n            if (column.ownerBand !== bandColumnIndex) {\n              return;\n            }\n\n            if (column.isBand) {\n              if (!column.visible) {\n                hiddenColumnsByBand = that.getChildrenByBandColumn(column.index);\n              } else {\n                hiddenColumnsByBand = that.getInvisibleColumns(that.getChildrenByBandColumn(column.index), column.index);\n              }\n\n              if (hiddenColumnsByBand.length) {\n                result.push(column);\n                result = result.concat(hiddenColumnsByBand);\n              }\n\n              return;\n            }\n\n            if (!column.visible) {\n              result.push(column);\n            }\n          });\n          return result;\n        },\n        getChooserColumns: function (getAllColumns) {\n          var columns = getAllColumns ? this.getColumns() : this.getInvisibleColumns();\n          var columnChooserColumns = columns.filter(column => column.showInColumnChooser);\n          var sortOrder = this.option(\"columnChooser.sortOrder\");\n          return ((columns, sortOrder) => {\n            if (\"asc\" !== sortOrder && \"desc\" !== sortOrder) {\n              return columns;\n            }\n\n            var sign = \"asc\" === sortOrder ? 1 : -1;\n            columns.sort(function (column1, column2) {\n              var caption1 = column1.caption || \"\";\n              var caption2 = column2.caption || \"\";\n              return sign * caption1.localeCompare(caption2);\n            });\n            return columns;\n          })(columnChooserColumns, sortOrder);\n        },\n        allowMoveColumn: function (fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\n          var columnIndex = getColumnIndexByVisibleIndex(this, fromVisibleIndex, sourceLocation);\n          var sourceColumn = this._columns[columnIndex];\n\n          if (sourceColumn && (sourceColumn.allowReordering || sourceColumn.allowGrouping || sourceColumn.allowHiding)) {\n            if (sourceLocation === targetLocation) {\n              if (\"columnChooser\" === sourceLocation) {\n                return false;\n              }\n\n              fromVisibleIndex = isObject(fromVisibleIndex) ? fromVisibleIndex.columnIndex : fromVisibleIndex;\n              toVisibleIndex = isObject(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\n              return fromVisibleIndex !== toVisibleIndex && fromVisibleIndex + 1 !== toVisibleIndex;\n            } else if (\"group\" === sourceLocation && \"columnChooser\" !== targetLocation || \"group\" === targetLocation) {\n              return sourceColumn && sourceColumn.allowGrouping;\n            } else if (\"columnChooser\" === sourceLocation || \"columnChooser\" === targetLocation) {\n              return sourceColumn && sourceColumn.allowHiding;\n            }\n\n            return true;\n          }\n\n          return false;\n        },\n        moveColumn: function (fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\n          var options = {};\n          var prevGroupIndex;\n          var fromIndex = getColumnIndexByVisibleIndex(this, fromVisibleIndex, sourceLocation);\n          var toIndex = getColumnIndexByVisibleIndex(this, toVisibleIndex, targetLocation);\n          var targetGroupIndex;\n\n          if (fromIndex >= 0) {\n            var column = this._columns[fromIndex];\n            toVisibleIndex = isObject(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\n            targetGroupIndex = toIndex >= 0 ? this._columns[toIndex].groupIndex : -1;\n\n            if (isDefined(column.groupIndex) && \"group\" === sourceLocation) {\n              if (targetGroupIndex > column.groupIndex) {\n                targetGroupIndex--;\n              }\n\n              if (\"group\" !== targetLocation) {\n                options.groupIndex = void 0;\n              } else {\n                prevGroupIndex = column.groupIndex;\n                delete column.groupIndex;\n                updateColumnGroupIndexes(this);\n              }\n            }\n\n            if (\"group\" === targetLocation) {\n              options.groupIndex = function (that, column, groupIndex) {\n                var groupColumns = that.getGroupColumns();\n                var i;\n\n                if (groupIndex >= 0) {\n                  for (i = 0; i < groupColumns.length; i++) {\n                    if (groupColumns[i].groupIndex >= groupIndex) {\n                      groupColumns[i].groupIndex++;\n                    }\n                  }\n                } else {\n                  groupIndex = 0;\n\n                  for (i = 0; i < groupColumns.length; i++) {\n                    groupIndex = Math.max(groupIndex, groupColumns[i].groupIndex + 1);\n                  }\n                }\n\n                return groupIndex;\n              }(this, 0, targetGroupIndex);\n\n              column.groupIndex = prevGroupIndex;\n            } else if (toVisibleIndex >= 0) {\n              var targetColumn = this._columns[toIndex];\n\n              if (!targetColumn || column.ownerBand !== targetColumn.ownerBand) {\n                options.visibleIndex = MAX_SAFE_INTEGER;\n              } else if (isColumnFixed(this, column) ^ isColumnFixed(this, targetColumn)) {\n                options.visibleIndex = MAX_SAFE_INTEGER;\n              } else {\n                options.visibleIndex = targetColumn.visibleIndex;\n              }\n            }\n\n            var isVisible = \"columnChooser\" !== targetLocation;\n\n            if (column.visible !== isVisible) {\n              options.visible = isVisible;\n            }\n\n            this.columnOption(column.index, options);\n          }\n        },\n        changeSortOrder: function (columnIndex, sortOrder) {\n          var options = {};\n          var sortingOptions = this.option(\"sorting\");\n          var sortingMode = sortingOptions && sortingOptions.mode;\n          var needResetSorting = \"single\" === sortingMode || !sortOrder;\n          var allowSorting = \"single\" === sortingMode || \"multiple\" === sortingMode;\n          var column = this._columns[columnIndex];\n\n          if (allowSorting && column && column.allowSorting) {\n            if (needResetSorting && !isDefined(column.groupIndex)) {\n              each(this._columns, function (index) {\n                if (index !== columnIndex && this.sortOrder) {\n                  if (!isDefined(this.groupIndex)) {\n                    delete this.sortOrder;\n                  }\n\n                  delete this.sortIndex;\n                }\n              });\n            }\n\n            if (isSortOrderValid(sortOrder)) {\n              if (column.sortOrder !== sortOrder) {\n                options.sortOrder = sortOrder;\n              }\n            } else if (\"none\" === sortOrder) {\n              if (column.sortOrder) {\n                options.sortIndex = void 0;\n                options.sortOrder = void 0;\n              }\n            } else {\n              !function (column) {\n                if (\"ctrl\" === sortOrder) {\n                  if (!(\"sortOrder\" in column && \"sortIndex\" in column)) {\n                    return false;\n                  }\n\n                  options.sortOrder = void 0;\n                  options.sortIndex = void 0;\n                } else if (isDefined(column.groupIndex) || isDefined(column.sortIndex)) {\n                  options.sortOrder = \"desc\" === column.sortOrder ? \"asc\" : \"desc\";\n                } else {\n                  options.sortOrder = \"asc\";\n                }\n\n                return true;\n              }(column);\n            }\n          }\n\n          this.columnOption(column.index, options);\n        },\n        getSortDataSourceParameters: function (useLocalSelector) {\n          var sortColumns = [];\n          var sort = [];\n          each(this._columns, function () {\n            if ((this.dataField || this.selector || this.calculateCellValue) && isDefined(this.sortIndex) && !isDefined(this.groupIndex)) {\n              sortColumns[this.sortIndex] = this;\n            }\n          });\n          each(sortColumns, function () {\n            var sortOrder = this && this.sortOrder;\n\n            if (isSortOrderValid(sortOrder)) {\n              var sortItem = {\n                selector: this.calculateSortValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue,\n                desc: \"desc\" === this.sortOrder\n              };\n\n              if (this.sortingMethod) {\n                sortItem.compare = this.sortingMethod.bind(this);\n              }\n\n              sort.push(sortItem);\n            }\n          });\n          return sort.length > 0 ? sort : null;\n        },\n        getGroupDataSourceParameters: function (useLocalSelector) {\n          var group = [];\n          each(this.getGroupColumns(), function () {\n            var selector = this.calculateGroupValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue;\n\n            if (selector) {\n              var groupItem = {\n                selector: selector,\n                desc: \"desc\" === this.sortOrder,\n                isExpanded: !!this.autoExpandGroup\n              };\n\n              if (this.sortingMethod) {\n                groupItem.compare = this.sortingMethod.bind(this);\n              }\n\n              group.push(groupItem);\n            }\n          });\n          return group.length > 0 ? group : null;\n        },\n        refresh: function (updateNewLookupsOnly) {\n          var deferreds = [];\n          each(this._columns, function () {\n            var lookup = this.lookup;\n\n            if (lookup && !this.calculateDisplayValue) {\n              if (updateNewLookupsOnly && lookup.valueMap) {\n                return;\n              }\n\n              if (lookup.update) {\n                deferreds.push(lookup.update());\n              }\n            }\n          });\n          return when.apply($, deferreds).done(resetColumnsCache.bind(null, this));\n        },\n        _updateColumnOptions: function (column, columnIndex) {\n          column.selector = column.selector || function (data) {\n            return column.calculateCellValue(data);\n          };\n\n          if (this._reinitAfterLookupChanges && this._previousColumns) {\n            column.selector.columnIndex = columnIndex;\n            column.selector.originalCallback = this._previousColumns[columnIndex].selector.originalCallback;\n          } else {\n            column.selector.columnIndex = columnIndex;\n            column.selector.originalCallback = column.selector;\n          }\n\n          each([\"calculateSortValue\", \"calculateGroupValue\", \"calculateDisplayValue\"], function (_, calculateCallbackName) {\n            var calculateCallback = column[calculateCallbackName];\n\n            if (isFunction(calculateCallback)) {\n              if (!calculateCallback.originalCallback) {\n                var context = {\n                  column: column\n                };\n\n                column[calculateCallbackName] = function (data) {\n                  return calculateCallback.call(context.column, data);\n                };\n\n                column[calculateCallbackName].originalCallback = calculateCallback;\n                column[calculateCallbackName].columnIndex = columnIndex;\n                column[calculateCallbackName].context = context;\n              } else {\n                column[calculateCallbackName].context.column = column;\n              }\n            }\n          });\n\n          if (isString(column.calculateDisplayValue)) {\n            column.displayField = column.calculateDisplayValue;\n            column.calculateDisplayValue = compileGetter(column.displayField);\n          }\n\n          if (column.calculateDisplayValue) {\n            column.displayValueMap = column.displayValueMap || {};\n          }\n\n          updateSerializers(column, column.dataType);\n          var lookup = column.lookup;\n\n          if (lookup) {\n            updateSerializers(lookup, lookup.dataType);\n          }\n\n          var dataType = lookup ? lookup.dataType : column.dataType;\n\n          if (dataType) {\n            column.alignment = column.alignment || function (dataType, isRTL) {\n              switch (dataType) {\n                case \"number\":\n                  return \"right\";\n\n                case \"boolean\":\n                  return \"center\";\n\n                default:\n                  return getDefaultAlignment(isRTL);\n              }\n            }(dataType, this.option(\"rtlEnabled\"));\n\n            column.format = column.format || gridCoreUtils.getFormatByDataType(dataType);\n            column.customizeText = column.customizeText || getCustomizeTextByDataType(dataType);\n            column.defaultFilterOperations = column.defaultFilterOperations || !lookup && DATATYPE_OPERATIONS[dataType] || [];\n\n            if (!isDefined(column.filterOperations)) {\n              setFilterOperationsAsDefaultValues(column);\n            }\n\n            column.defaultFilterOperation = column.filterOperations && column.filterOperations[0] || \"=\";\n            column.showEditorAlways = isDefined(column.showEditorAlways) ? column.showEditorAlways : \"boolean\" === dataType && !column.cellTemplate && !column.lookup;\n          }\n        },\n        updateColumnDataTypes: function (dataSource) {\n          var that = this;\n          var dateSerializationFormat = that.option(\"dateSerializationFormat\");\n\n          var firstItems = that._getFirstItems(dataSource);\n\n          var isColumnDataTypesUpdated = false;\n          each(that._columns, function (index, column) {\n            var i;\n            var value;\n            var dataType;\n            var lookupDataType;\n            var valueDataType;\n            var lookup = column.lookup;\n\n            if (gridCoreUtils.isDateType(column.dataType) && void 0 === column.serializationFormat) {\n              column.serializationFormat = dateSerializationFormat;\n            }\n\n            if (lookup && gridCoreUtils.isDateType(lookup.dataType) && void 0 === column.serializationFormat) {\n              lookup.serializationFormat = dateSerializationFormat;\n            }\n\n            if (column.calculateCellValue && firstItems.length) {\n              if (!column.dataType || lookup && !lookup.dataType) {\n                for (i = 0; i < firstItems.length; i++) {\n                  value = column.calculateCellValue(firstItems[i]);\n\n                  if (!column.dataType) {\n                    valueDataType = getValueDataType(value);\n                    dataType = dataType || valueDataType;\n\n                    if (dataType && valueDataType && dataType !== valueDataType) {\n                      dataType = \"string\";\n                    }\n                  }\n\n                  if (lookup && !lookup.dataType) {\n                    valueDataType = getValueDataType(gridCoreUtils.getDisplayValue(column, value, firstItems[i]));\n                    lookupDataType = lookupDataType || valueDataType;\n\n                    if (lookupDataType && valueDataType && lookupDataType !== valueDataType) {\n                      lookupDataType = \"string\";\n                    }\n                  }\n                }\n\n                if (dataType || lookupDataType) {\n                  if (dataType) {\n                    column.dataType = dataType;\n                  }\n\n                  if (lookup && lookupDataType) {\n                    lookup.dataType = lookupDataType;\n                  }\n\n                  isColumnDataTypesUpdated = true;\n                }\n              }\n\n              if (void 0 === column.serializationFormat || lookup && void 0 === lookup.serializationFormat) {\n                for (i = 0; i < firstItems.length; i++) {\n                  value = column.calculateCellValue(firstItems[i], true);\n\n                  if (void 0 === column.serializationFormat) {\n                    column.serializationFormat = getSerializationFormat(column.dataType, value);\n                  }\n\n                  if (lookup && void 0 === lookup.serializationFormat) {\n                    lookup.serializationFormat = getSerializationFormat(lookup.dataType, lookup.calculateCellValue(value, true));\n                  }\n                }\n              }\n            }\n\n            that._updateColumnOptions(column, index);\n          });\n          return isColumnDataTypesUpdated;\n        },\n        _customizeColumns: function (columns) {\n          var customizeColumns = this.option(\"customizeColumns\");\n\n          if (customizeColumns) {\n            var hasOwnerBand = columns.some(function (column) {\n              return isObject(column.ownerBand);\n            });\n\n            if (hasOwnerBand) {\n              updateIndexes(this);\n            }\n\n            customizeColumns(columns);\n            assignColumns(this, createColumnsFromOptions(this, columns));\n          }\n        },\n        updateColumns: function (dataSource, forceApplying, isApplyingUserState) {\n          if (!forceApplying) {\n            this.updateSortingGrouping(dataSource);\n          }\n\n          if (!dataSource || dataSource.isLoaded()) {\n            var sortParameters = dataSource ? dataSource.sort() || [] : this.getSortDataSourceParameters();\n            var groupParameters = dataSource ? dataSource.group() || [] : this.getGroupDataSourceParameters();\n            var filterParameters = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().filter;\n\n            if (!isApplyingUserState) {\n              this._customizeColumns(this._columns);\n            }\n\n            updateIndexes(this);\n            var columns = this._columns;\n            return when(this.refresh(true)).always(() => {\n              if (this._columns !== columns) {\n                return;\n              }\n\n              this._updateChanges(dataSource, {\n                sorting: sortParameters,\n                grouping: groupParameters,\n                filtering: filterParameters\n              });\n\n              fireColumnsChanged(this);\n            });\n          }\n        },\n        _updateChanges: function (dataSource, parameters) {\n          if (dataSource) {\n            this.updateColumnDataTypes(dataSource);\n            this._dataSourceApplied = true;\n          }\n\n          if (!gridCoreUtils.equalSortParameters(parameters.sorting, this.getSortDataSourceParameters())) {\n            updateColumnChanges(this, \"sorting\");\n          }\n\n          if (!gridCoreUtils.equalSortParameters(parameters.grouping, this.getGroupDataSourceParameters())) {\n            updateColumnChanges(this, \"grouping\");\n          }\n\n          var dataController = this.getController(\"data\");\n\n          if (dataController && !gridCoreUtils.equalFilterParameters(parameters.filtering, dataController.getCombinedFilter())) {\n            updateColumnChanges(this, \"filtering\");\n          }\n\n          updateColumnChanges(this, \"columns\");\n        },\n        updateSortingGrouping: function (dataSource, fromDataSource) {\n          var that = this;\n          var sortParameters;\n          var isColumnsChanged;\n\n          var updateSortGroupParameterIndexes = function (columns, sortParameters, indexParameterName) {\n            each(columns, function (index, column) {\n              delete column[indexParameterName];\n\n              if (sortParameters) {\n                for (var i = 0; i < sortParameters.length; i++) {\n                  var selector = sortParameters[i].selector;\n                  var isExpanded = sortParameters[i].isExpanded;\n\n                  if (selector === column.dataField || selector === column.name || selector === column.selector || selector === column.calculateCellValue || selector === column.calculateGroupValue || selector === column.calculateDisplayValue) {\n                    if (fromDataSource) {\n                      column.sortOrder = \"sortOrder\" in column ? column.sortOrder : sortParameters[i].desc ? \"desc\" : \"asc\";\n                    } else {\n                      column.sortOrder = column.sortOrder || (sortParameters[i].desc ? \"desc\" : \"asc\");\n                    }\n\n                    if (void 0 !== isExpanded) {\n                      column.autoExpandGroup = isExpanded;\n                    }\n\n                    column[indexParameterName] = i;\n                    break;\n                  }\n                }\n              }\n            });\n          };\n\n          if (dataSource) {\n            sortParameters = gridCoreUtils.normalizeSortingInfo(dataSource.sort());\n            var groupParameters = gridCoreUtils.normalizeSortingInfo(dataSource.group());\n            var columnsGroupParameters = that.getGroupDataSourceParameters();\n            var columnsSortParameters = that.getSortDataSourceParameters();\n            var groupingChanged = !gridCoreUtils.equalSortParameters(groupParameters, columnsGroupParameters, true);\n            var groupExpandingChanged = !groupingChanged && !gridCoreUtils.equalSortParameters(groupParameters, columnsGroupParameters);\n\n            if (!that._columns.length) {\n              each(groupParameters, function (index, group) {\n                that._columns.push(group.selector);\n              });\n              each(sortParameters, function (index, sort) {\n                if (!isFunction(sort.selector)) {\n                  that._columns.push(sort.selector);\n                }\n              });\n              assignColumns(that, createColumnsFromOptions(that, that._columns));\n            }\n\n            if ((fromDataSource || !columnsGroupParameters && !that._hasUserState) && (groupingChanged || groupExpandingChanged)) {\n              updateSortGroupParameterIndexes(that._columns, groupParameters, \"groupIndex\");\n\n              if (fromDataSource) {\n                groupingChanged && updateColumnChanges(that, \"grouping\");\n                groupExpandingChanged && updateColumnChanges(that, \"groupExpanding\");\n                isColumnsChanged = true;\n              }\n            }\n\n            if ((fromDataSource || !columnsSortParameters && !that._hasUserState) && !gridCoreUtils.equalSortParameters(sortParameters, columnsSortParameters)) {\n              updateSortGroupParameterIndexes(that._columns, sortParameters, \"sortIndex\");\n\n              if (fromDataSource) {\n                updateColumnChanges(that, \"sorting\");\n                isColumnsChanged = true;\n              }\n            }\n\n            if (isColumnsChanged) {\n              fireColumnsChanged(that);\n            }\n          }\n        },\n        updateFilter: function (filter, remoteFiltering, columnIndex, filterValue) {\n          if (!Array.isArray(filter)) {\n            return filter;\n          }\n\n          filter = extend([], filter);\n          columnIndex = void 0 !== filter.columnIndex ? filter.columnIndex : columnIndex;\n          filterValue = void 0 !== filter.filterValue ? filter.filterValue : filterValue;\n\n          if (isString(filter[0]) && \"!\" !== filter[0]) {\n            var column = this.columnOption(filter[0]);\n\n            if (remoteFiltering) {\n              if (config().forceIsoDateParsing && column && column.serializeValue && filter.length > 1) {\n                filter[filter.length - 1] = column.serializeValue(filter[filter.length - 1], \"filter\");\n              }\n            } else if (column && column.selector) {\n              filter[0] = column.selector;\n              filter[0].columnIndex = column.index;\n            }\n          } else if (isFunction(filter[0])) {\n            filter[0].columnIndex = columnIndex;\n            filter[0].filterValue = filterValue;\n          }\n\n          for (var i = 0; i < filter.length; i++) {\n            filter[i] = this.updateFilter(filter[i], remoteFiltering, columnIndex, filterValue);\n          }\n\n          return filter;\n        },\n        columnCount: function () {\n          return this._columns ? this._columns.length : 0;\n        },\n        columnOption: function (identifier, option, value, notFireEvent) {\n          var that = this;\n\n          var columns = that._columns.concat(that._commandColumns);\n\n          var column = findColumn(columns, identifier);\n\n          if (column) {\n            if (1 === arguments.length) {\n              return extend({}, column);\n            }\n\n            if (isString(option)) {\n              if (2 === arguments.length) {\n                return columnOptionCore(that, column, option);\n              } else {\n                columnOptionCore(that, column, option, value, notFireEvent);\n              }\n            } else if (isObject(option)) {\n              each(option, function (optionName, value) {\n                columnOptionCore(that, column, optionName, value, notFireEvent);\n              });\n            }\n\n            fireColumnsChanged(that);\n          }\n        },\n        clearSorting: function () {\n          var columnCount = this.columnCount();\n          this.beginUpdate();\n\n          for (var i = 0; i < columnCount; i++) {\n            this.columnOption(i, \"sortOrder\", void 0);\n          }\n\n          this.endUpdate();\n        },\n        clearGrouping: function () {\n          var columnCount = this.columnCount();\n          this.beginUpdate();\n\n          for (var i = 0; i < columnCount; i++) {\n            this.columnOption(i, \"groupIndex\", void 0);\n          }\n\n          this.endUpdate();\n        },\n        getVisibleIndex: function (index, rowIndex) {\n          var columns = this.getVisibleColumns(rowIndex);\n\n          for (var i = columns.length - 1; i >= 0; i--) {\n            if (columns[i].index === index) {\n              return i;\n            }\n          }\n\n          return -1;\n        },\n        getVisibleIndexByColumn: function (column, rowIndex) {\n          var visibleColumns = this.getVisibleColumns(rowIndex);\n          var visibleColumn = visibleColumns.filter(col => col.index === column.index && col.command === column.command)[0];\n          return visibleColumns.indexOf(visibleColumn);\n        },\n        getVisibleColumnIndex: function (id, rowIndex) {\n          var index = this.columnOption(id, \"index\");\n          return this.getVisibleIndex(index, rowIndex);\n        },\n        addColumn: function (options) {\n          var column = createColumn(this, options);\n          var index = this._columns.length;\n\n          this._columns.push(column);\n\n          if (column.isBand) {\n            this._columns = createColumnsFromOptions(this, this._columns);\n            column = this._columns[index];\n          }\n\n          column.added = options;\n          updateIndexes(this, column);\n          this.updateColumns(this._dataSource);\n\n          this._checkColumns();\n        },\n        deleteColumn: function (id) {\n          var column = this.columnOption(id);\n\n          if (column && column.index >= 0) {\n            columns = this._columns, void columns.forEach(column => {\n              if (isDefined(column.ownerBand)) {\n                column.ownerBand = columns[column.ownerBand];\n              }\n            });\n\n            this._columns.splice(column.index, 1);\n\n            if (column.isBand) {\n              var childIndexes = this.getChildrenByBandColumn(column.index).map(column => column.index);\n              this._columns = this._columns.filter(column => childIndexes.indexOf(column.index) < 0);\n            }\n\n            updateIndexes(this);\n            this.updateColumns(this._dataSource);\n          }\n\n          var columns;\n        },\n        addCommandColumn: function (options) {\n          var commandColumn = this._commandColumns.filter(column => column.command === options.command)[0];\n\n          if (!commandColumn) {\n            commandColumn = options;\n\n            this._commandColumns.push(commandColumn);\n          }\n        },\n        getUserState: function () {\n          var columns = this._columns;\n          var result = [];\n          var i;\n\n          function handleStateField(index, value) {\n            if (void 0 !== columns[i][value]) {\n              result[i][value] = columns[i][value];\n            }\n          }\n\n          for (i = 0; i < columns.length; i++) {\n            result[i] = {};\n            each(USER_STATE_FIELD_NAMES, handleStateField);\n          }\n\n          return result;\n        },\n        setName: function (column) {\n          column.name = column.name || column.dataField || column.type;\n        },\n        setUserState: function (state) {\n          var dataSource = this._dataSource;\n          var ignoreColumnOptionNames = this.option(\"stateStoring.ignoreColumnOptionNames\");\n          null === state || void 0 === state ? void 0 : state.forEach(this.setName);\n\n          if (!ignoreColumnOptionNames) {\n            ignoreColumnOptionNames = [];\n            var commonColumnSettings = this.getCommonSettings();\n\n            if (!this.option(\"columnChooser.enabled\")) {\n              ignoreColumnOptionNames.push(\"visible\");\n            }\n\n            if (\"none\" === this.option(\"sorting.mode\")) {\n              ignoreColumnOptionNames.push(\"sortIndex\", \"sortOrder\");\n            }\n\n            if (!commonColumnSettings.allowGrouping) {\n              ignoreColumnOptionNames.push(\"groupIndex\");\n            }\n\n            if (!commonColumnSettings.allowFixing) {\n              ignoreColumnOptionNames.push(\"fixed\", \"fixedPosition\");\n            }\n\n            if (!commonColumnSettings.allowResizing) {\n              ignoreColumnOptionNames.push(\"width\", \"visibleWidth\");\n            }\n\n            var isFilterPanelHidden = !this.option(\"filterPanel.visible\");\n\n            if (!this.option(\"filterRow.visible\") && isFilterPanelHidden) {\n              ignoreColumnOptionNames.push(\"filterValue\", \"selectedFilterOperation\");\n            }\n\n            if (!this.option(\"headerFilter.visible\") && isFilterPanelHidden) {\n              ignoreColumnOptionNames.push(\"filterValues\", \"filterType\");\n            }\n          }\n\n          this._columnsUserState = state;\n          this._ignoreColumnOptionNames = ignoreColumnOptionNames;\n          this._hasUserState = !!state;\n          updateColumnChanges(this, \"filtering\");\n          this.init(true);\n\n          if (dataSource) {\n            dataSource.sort(this.getSortDataSourceParameters());\n            dataSource.group(this.getGroupDataSourceParameters());\n          }\n        },\n        _checkColumns: function () {\n          var usedNames = {};\n          var hasEditableColumnWithoutName = false;\n          var duplicatedNames = [];\n\n          this._columns.forEach(column => {\n            var _column$columns;\n\n            var name = column.name;\n            var isBand = null === (_column$columns = column.columns) || void 0 === _column$columns ? void 0 : _column$columns.length;\n            var isEditable = column.allowEditing && (column.dataField || column.setCellValue) && !isBand;\n\n            if (name) {\n              if (usedNames[name]) {\n                duplicatedNames.push('\"'.concat(name, '\"'));\n              }\n\n              usedNames[name] = true;\n            } else if (isEditable) {\n              hasEditableColumnWithoutName = true;\n            }\n          });\n\n          if (duplicatedNames.length) {\n            errors.log(\"E1059\", duplicatedNames.join(\", \"));\n          }\n\n          if (hasEditableColumnWithoutName) {\n            errors.log(\"E1060\");\n          }\n        },\n        _createCalculatedColumnOptions: function (columnOptions, bandColumn) {\n          var calculatedColumnOptions = {};\n          var dataField = columnOptions.dataField;\n\n          if (Array.isArray(columnOptions.columns) && columnOptions.columns.length || columnOptions.isBand) {\n            calculatedColumnOptions.isBand = true;\n            dataField = null;\n          }\n\n          if (dataField) {\n            if (isString(dataField)) {\n              var getter = compileGetter(dataField);\n              calculatedColumnOptions = {\n                caption: captionize(dataField),\n                calculateCellValue: function (data, skipDeserialization) {\n                  var value = getter(data);\n                  return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value;\n                },\n                setCellValue: defaultSetCellValue,\n                parseValue: function (text) {\n                  var result;\n                  var parsedValue;\n\n                  if (\"number\" === this.dataType) {\n                    if (isString(text) && this.format) {\n                      result = function (text, format) {\n                        var parsedValue = numberLocalization.parse(text);\n\n                        if (isNumeric(parsedValue)) {\n                          var formattedValue = numberLocalization.format(parsedValue, format);\n                          var formattedValueWithDefaultFormat = numberLocalization.format(parsedValue, \"decimal\");\n\n                          if (formattedValue === text || formattedValueWithDefaultFormat === text) {\n                            return parsedValue;\n                          }\n                        }\n                      }(text.trim(), this.format);\n                    } else if (isDefined(text) && isNumeric(text)) {\n                      result = Number(text);\n                    }\n                  } else if (\"boolean\" === this.dataType) {\n                    if (text === this.trueText) {\n                      result = true;\n                    } else if (text === this.falseText) {\n                      result = false;\n                    }\n                  } else if (gridCoreUtils.isDateType(this.dataType)) {\n                    parsedValue = dateLocalization.parse(text, this.format);\n\n                    if (parsedValue) {\n                      result = parsedValue;\n                    }\n                  } else {\n                    result = text;\n                  }\n\n                  return result;\n                }\n              };\n            }\n\n            calculatedColumnOptions.allowFiltering = true;\n          } else {\n            calculatedColumnOptions.allowFiltering = !!columnOptions.calculateFilterExpression;\n          }\n\n          calculatedColumnOptions.calculateFilterExpression = function () {\n            return filterUtils.defaultCalculateFilterExpression.apply(this, arguments);\n          };\n\n          calculatedColumnOptions.defaultFilterOperation = \"=\";\n\n          calculatedColumnOptions.createFilterExpression = function (filterValue) {\n            var result;\n\n            if (this.calculateFilterExpression) {\n              result = this.calculateFilterExpression.apply(this, arguments);\n            }\n\n            if (isFunction(result)) {\n              result = [result, \"=\", true];\n            }\n\n            if (result) {\n              result.columnIndex = this.index;\n              result.filterValue = filterValue;\n            }\n\n            return result;\n          };\n\n          if (!dataField || !isString(dataField)) {\n            extend(true, calculatedColumnOptions, {\n              allowSorting: false,\n              allowGrouping: false,\n              calculateCellValue: function () {\n                return null;\n              }\n            });\n          }\n\n          if (bandColumn) {\n            calculatedColumnOptions.allowFixing = false;\n          }\n\n          if (columnOptions.dataType) {\n            calculatedColumnOptions.userDataType = columnOptions.dataType;\n          }\n\n          if (columnOptions.selectedFilterOperation && !(\"defaultSelectedFilterOperation\" in calculatedColumnOptions)) {\n            calculatedColumnOptions.defaultSelectedFilterOperation = columnOptions.selectedFilterOperation;\n          }\n\n          if (columnOptions.lookup) {\n            calculatedColumnOptions.lookup = {\n              calculateCellValue: function (value, skipDeserialization) {\n                if (this.valueExpr) {\n                  value = this.valueMap && this.valueMap[value];\n                }\n\n                return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value;\n              },\n              updateValueMap: function () {\n                this.valueMap = {};\n\n                if (this.items) {\n                  var calculateValue = compileGetter(this.valueExpr);\n                  var calculateDisplayValue = compileGetter(this.displayExpr);\n\n                  for (var i = 0; i < this.items.length; i++) {\n                    var item = this.items[i];\n                    var displayValue = calculateDisplayValue(item);\n                    this.valueMap[calculateValue(item)] = displayValue;\n                    this.dataType = this.dataType || getValueDataType(displayValue);\n                  }\n                }\n              },\n              update: function () {\n                var that = this;\n                var dataSource = that.dataSource;\n\n                if (dataSource) {\n                  if (isFunction(dataSource) && !variableWrapper.isWrapped(dataSource)) {\n                    dataSource = dataSource({});\n                  }\n\n                  if (isPlainObject(dataSource) || dataSource instanceof Store || Array.isArray(dataSource)) {\n                    if (that.valueExpr) {\n                      var dataSourceOptions = normalizeDataSourceOptions(dataSource);\n                      dataSourceOptions.paginate = false;\n                      dataSource = new DataSource(dataSourceOptions);\n                      return dataSource.load().done(function (data) {\n                        that.items = data;\n                        that.updateValueMap && that.updateValueMap();\n                      });\n                    }\n                  } else {\n                    errors.log(\"E1016\");\n                  }\n                } else {\n                  that.updateValueMap && that.updateValueMap();\n                }\n              }\n            };\n          }\n\n          calculatedColumnOptions.resizedCallbacks = Callbacks();\n\n          if (columnOptions.resized) {\n            calculatedColumnOptions.resizedCallbacks.add(columnOptions.resized.bind(columnOptions));\n          }\n\n          each(calculatedColumnOptions, function (optionName) {\n            if (isFunction(calculatedColumnOptions[optionName]) && 0 !== optionName.indexOf(\"default\")) {\n              var defaultOptionName = \"default\" + optionName.charAt(0).toUpperCase() + optionName.substr(1);\n              calculatedColumnOptions[defaultOptionName] = calculatedColumnOptions[optionName];\n            }\n          });\n          return calculatedColumnOptions;\n        },\n        getRowCount: function () {\n          this._rowCount = this._rowCount || function (that) {\n            var rowCount = 1;\n            var bandColumnsCache = that.getBandColumnsCache();\n            var columnParentByIndex = bandColumnsCache.columnParentByIndex;\n\n            that._columns.forEach(function (column) {\n              var parents = getParentBandColumns(column.index, columnParentByIndex);\n              var invisibleParents = parents.filter(function (column) {\n                return !column.visible;\n              });\n\n              if (column.visible && !invisibleParents.length) {\n                rowCount = Math.max(rowCount, parents.length + 1);\n              }\n            });\n\n            return rowCount;\n          }(this);\n\n          return this._rowCount;\n        },\n        getRowIndex: function (columnIndex, alwaysGetRowIndex) {\n          var column = this._columns[columnIndex];\n          var bandColumnsCache = this.getBandColumnsCache();\n          return column && (alwaysGetRowIndex || column.visible && !(column.command || isDefined(column.groupIndex))) ? getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex).length : 0;\n        },\n        getChildrenByBandColumn: function (bandColumnIndex, onlyVisibleDirectChildren) {\n          var bandColumnsCache = this.getBandColumnsCache();\n\n          var result = _getChildrenByBandColumn(bandColumnIndex, bandColumnsCache.columnChildrenByIndex, !onlyVisibleDirectChildren);\n\n          if (onlyVisibleDirectChildren) {\n            return result.filter(function (column) {\n              return column.visible && !column.command;\n            }).sort(function (column1, column2) {\n              return column1.visibleIndex - column2.visibleIndex;\n            });\n          }\n\n          return result;\n        },\n        isParentBandColumn: function (columnIndex, bandColumnIndex) {\n          var result = false;\n          var column = this._columns[columnIndex];\n          var bandColumnsCache = this.getBandColumnsCache();\n          var parentBandColumns = column && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\n\n          if (parentBandColumns) {\n            each(parentBandColumns, function (_, bandColumn) {\n              if (bandColumn.index === bandColumnIndex) {\n                result = true;\n                return false;\n              }\n            });\n          }\n\n          return result;\n        },\n        isParentColumnVisible: function (columnIndex) {\n          var result = true;\n          var bandColumnsCache = this.getBandColumnsCache();\n          var bandColumns = columnIndex >= 0 && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\n          bandColumns && each(bandColumns, function (_, bandColumn) {\n            result = result && bandColumn.visible;\n            return result;\n          });\n          return result;\n        },\n        getColumnId: function (column) {\n          if (column.command && column.type === GROUP_COMMAND_COLUMN_NAME) {\n            if (isCustomCommandColumn(this, column)) {\n              return \"type:\" + column.type;\n            }\n\n            return \"command:\" + column.command;\n          }\n\n          return column.index;\n        },\n        getCustomizeTextByDataType: getCustomizeTextByDataType,\n        getHeaderContentAlignment: function (columnAlignment) {\n          var rtlEnabled = this.option(\"rtlEnabled\");\n\n          if (rtlEnabled) {\n            return \"left\" === columnAlignment ? \"right\" : \"left\";\n          }\n\n          return columnAlignment;\n        }\n      };\n      return members;\n    }())\n  }\n};","map":{"version":3,"names":["_extends","$","Callbacks","variableWrapper","compileGetter","compileSetter","isDefined","isString","isNumeric","isFunction","isObject","isPlainObject","type","each","map","getDefaultAlignment","extend","normalizeIndexes","config","orderEach","deepExtendArraySafe","errors","modules","gridCoreUtils","captionize","dateSerialization","numberLocalization","dateLocalization","messageLocalization","when","Deferred","Store","DataSource","normalizeDataSourceOptions","equalByValue","filterUtils","USER_STATE_FIELD_NAMES_15_1","USER_STATE_FIELD_NAMES","concat","IGNORE_COLUMN_OPTION_NAMES","visibleWidth","bestFitWidth","bufferedFilterValue","COMMAND_EXPAND_CLASS","MAX_SAFE_INTEGER","Number","GROUP_COMMAND_COLUMN_NAME","regExp","globalColumnId","columnsControllerModule","defaultOptions","commonColumnSettings","allowFiltering","allowHiding","allowSorting","allowEditing","encodeHtml","trueText","format","falseText","allowColumnReordering","allowColumnResizing","columnResizingMode","columnMinWidth","columnWidth","adaptColumnWidthByRatio","columns","regenerateColumnsByVisibleItems","customizeColumns","dateSerializationFormat","controllers","Controller","inherit","DEFAULT_COLUMN_OPTIONS","visible","showInColumnChooser","DATATYPE_OPERATIONS","number","string","date","datetime","COLUMN_INDEX_OPTIONS","visibleIndex","groupIndex","grouped","sortIndex","sortOrder","setFilterOperationsAsDefaultValues","column","filterOperations","defaultFilterOperations","createColumn","that","columnOptions","userStateColumnOptions","bandColumn","commonColumnOptions","dataField","setName","result","command","getCommonSettings","name","calculatedColumnOptions","_createCalculatedColumnOptions","headerId","selector","createColumnsFromOptions","columnsOptions","index","_columnsUserState","checkUserStateColumn","ownerBand","push","hasColumns","getParentBandColumns","columnIndex","columnParentByIndex","parent","unshift","_getChildrenByBandColumn","columnChildrenByIndex","recursive","children","i","length","showWhenGrouped","isBand","getColumnFullPath","bandColumnsCache","getBandColumnsCache","callbackFilter","item","isPlain","_columns","indexOf","filter","join","calculateColspan","columnID","colspan","getChildrenByBandColumn","_","getValueDataType","value","dataType","getSerializationFormat","getDateSerializationFormat","updateSerializers","options","deserializeValue","isDateType","deserializeDate","serializeValue","serializeDate","serializationFormat","parsedValue","parseFloat","isNaN","target","toString","customizeTextForBooleanDataType","e","valueText","getCustomizeTextByDataType","updateColumnIndexes","_commandColumns","updateColumnGroupIndexes","currentColumn","getColumnIndexByVisibleIndex","location","rowIndex","getGroupColumns","getChooserColumns","getVisibleColumns","col","userStateColumn","applyUserState","columnsUserState","ignoreColumnOptionNames","_ignoreColumnOptionNames","columnCountById","resultColumns","allColumnsHaveState","userStateColumnIndexes","userStateColumnIndex","applyFieldsState","fieldName","includes","defaultSelectedFilterOperation","findUserStateColumn","id","count","j","_hasUserState","initialIndex","hasAddedBands","columnUserState","added","assignColumns","updateIndexes","isSortOrderValid","resetBandColumnsCache","bandedColumns","parentBandColumns","resetColumnsCache","_previousColumns","updateColumnDataTypes","updateColumnChanges","changeType","optionName","columnChanges","_columnChanges","optionNames","changeTypes","split","fireColumnsChanged","onColumnsChanging","option","reinitOptionNames","isInitialized","_updateLockCount","component","some","_reinitAfterLookupChanges","lookup","reinit","columnsChanged","fire","updateSortOrderWhenGrouping","prevGroupIndex","columnWasGrouped","lastSortOrder","sortMode","sortedByAnotherColumn","fireOptionChanged","prevValue","fullOptionName","fullOptionPath","_skipProcessingColumnsChange","_notifyOptionChanged","columnOptionCore","notFireEvent","optionGetter","initialColumn","arguments","functionsAsIs","optionSetter","_checkColumns","getColumnByPath","defaultSetCellValue","data","path","dotCount","isCustomCommandColumn","commandColumn","getFixedPosition","rtlEnabled","fixedPosition","processExpandColumns","expandColumns","customColumnIndex","rowCount","getRowCount","rowspan","expandColumnsByType","forEach","expandColumn","apply","splice","numberToString","digitsCount","str","mergeColumns","commandColumns","needToExtend","commandColumnIndex","slice","isColumnFixing","_isColumnFixing","defaultCommandColumns","fixed","getCommandColumnIndex","reduce","columnType","allowFixing","allowReordering","isColumnFixed","_bandColumnsCache","findColumn","identifier","identifierOptionName","substr","members","_getExpandColumnOptions","width","cssClass","allowGrouping","allowResizing","_getFirstItems","dataSource","groupsCount","items","normalizeSortingInfo","group","getFirstItemsCore","childItems","collapsedItems","_endUpdateCore","init","isApplyingUserState","_isColumnsFromOptions","addCommandColumn","_dataSourceApplied","applyDataSource","_dataSource","callbackNames","columnIndexes","replace","parseInt","optionChanged","args","needUpdateRequireResize","handled","previousValue","Array","isArray","fullName","_columnOptionChanged","_updateRequireResize","callBase","columnOptionValue","columnOptionName","columnOption","_requireResize","publicMethods","forceApplying","isDataSourceLoaded","isLoaded","_dataSourceColumnsCount","columnsFromDataSource","firstItems","processedFields","isWrapped","updateColumns","isAllDataTypesDefined","reject","promise","reset","_visibleColumns","_fixedColumns","_rowCount","getUserState","isDataSourceApplied","groupingOptions","groupPanelOptions","minWidth","autoExpandGroup","autoExpandAll","allowCollapsing","allowColumnDragging","contextMenuEnabled","isColumnOptionUsed","checkSerializers","calculateCellValue","defaultCalculateCellValue","getColumns","isBandColumnsUsed","_shouldReturnVisibleColumns","_compileVisibleColumns","_compileVisibleColumnsCore","getFixedColumns","_getFixedColumnsCore","getFilteringColumns","allowHeaderFiltering","field","getColumnIndexOffset","transparentColumn","transparentColspan","notFixedColumnCount","transparentColumnIndex","lastFixedPosition","visibleColumns","prevColumn","newColumn","_getExpandColumnsCore","getExpandColumns","firstGroupColumn","isFixedFirstGroupColumn","cellTemplate","headerCellTemplate","parentIndex","_isColumnVisible","isParentColumnVisible","rowspanGroupColumns","rowspanExpandColumns","positiveIndexedColumns","negativeIndexedColumns","notGroupedColumnsCount","isFixedToEnd","columnDigitsCount","indexedColumns","firstPositiveIndexColumn","columnsByFixing","columnsByVisibleIndex","call","getDataColumns","bandColumnID","getInvisibleColumns","bandColumnIndex","hiddenColumnsByBand","getAllColumns","columnChooserColumns","sign","sort","column1","column2","caption1","caption","caption2","localeCompare","allowMoveColumn","fromVisibleIndex","toVisibleIndex","sourceLocation","targetLocation","sourceColumn","moveColumn","fromIndex","toIndex","targetGroupIndex","groupColumns","Math","max","targetColumn","isVisible","changeSortOrder","sortingOptions","sortingMode","mode","needResetSorting","getSortDataSourceParameters","useLocalSelector","sortColumns","sortItem","calculateSortValue","displayField","calculateDisplayValue","desc","sortingMethod","compare","bind","getGroupDataSourceParameters","calculateGroupValue","groupItem","isExpanded","refresh","updateNewLookupsOnly","deferreds","valueMap","update","done","_updateColumnOptions","originalCallback","calculateCallbackName","calculateCallback","context","displayValueMap","alignment","isRTL","getFormatByDataType","customizeText","defaultFilterOperation","showEditorAlways","isColumnDataTypesUpdated","lookupDataType","valueDataType","getDisplayValue","_customizeColumns","hasOwnerBand","updateSortingGrouping","sortParameters","groupParameters","filterParameters","lastLoadOptions","always","_updateChanges","sorting","grouping","filtering","parameters","equalSortParameters","dataController","getController","equalFilterParameters","getCombinedFilter","fromDataSource","isColumnsChanged","updateSortGroupParameterIndexes","indexParameterName","columnsGroupParameters","columnsSortParameters","groupingChanged","groupExpandingChanged","updateFilter","remoteFiltering","filterValue","forceIsoDateParsing","columnCount","clearSorting","beginUpdate","endUpdate","clearGrouping","getVisibleIndex","getVisibleIndexByColumn","visibleColumn","getVisibleColumnIndex","addColumn","deleteColumn","childIndexes","handleStateField","setUserState","state","isFilterPanelHidden","usedNames","hasEditableColumnWithoutName","duplicatedNames","_column$columns","isEditable","setCellValue","log","getter","skipDeserialization","parseValue","text","parse","formattedValue","formattedValueWithDefaultFormat","trim","calculateFilterExpression","defaultCalculateFilterExpression","createFilterExpression","userDataType","selectedFilterOperation","valueExpr","updateValueMap","calculateValue","displayExpr","displayValue","dataSourceOptions","paginate","load","resizedCallbacks","resized","add","defaultOptionName","charAt","toUpperCase","parents","invisibleParents","getRowIndex","alwaysGetRowIndex","onlyVisibleDirectChildren","isParentBandColumn","bandColumns","getColumnId","getHeaderContentAlignment","columnAlignment"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.columns_controller.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.columns_controller.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport $ from \"../../core/renderer\";\r\nimport Callbacks from \"../../core/utils/callbacks\";\r\nimport variableWrapper from \"../../core/utils/variable_wrapper\";\r\nimport {\r\n    compileGetter,\r\n    compileSetter\r\n} from \"../../core/utils/data\";\r\nimport {\r\n    isDefined,\r\n    isString,\r\n    isNumeric,\r\n    isFunction,\r\n    isObject,\r\n    isPlainObject,\r\n    type\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each,\r\n    map\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    getDefaultAlignment\r\n} from \"../../core/utils/position\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    normalizeIndexes\r\n} from \"../../core/utils/array\";\r\nimport config from \"../../core/config\";\r\nimport {\r\n    orderEach,\r\n    deepExtendArraySafe\r\n} from \"../../core/utils/object\";\r\nimport errors from \"../widget/ui.errors\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    captionize\r\n} from \"../../core/utils/inflector\";\r\nimport dateSerialization from \"../../core/utils/date_serialization\";\r\nimport numberLocalization from \"../../localization/number\";\r\nimport dateLocalization from \"../../localization/date\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport Store from \"../../data/abstract_store\";\r\nimport {\r\n    DataSource\r\n} from \"../../data/data_source/data_source\";\r\nimport {\r\n    normalizeDataSourceOptions\r\n} from \"../../data/data_source/utils\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport filterUtils from \"../shared/filtering\";\r\nvar USER_STATE_FIELD_NAMES_15_1 = [\"filterValues\", \"filterType\", \"fixed\", \"fixedPosition\"];\r\nvar USER_STATE_FIELD_NAMES = [\"visibleIndex\", \"dataField\", \"name\", \"dataType\", \"width\", \"visible\", \"sortOrder\", \"lastSortOrder\", \"sortIndex\", \"groupIndex\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"bufferedSelectedFilterOperation\", \"added\"].concat(USER_STATE_FIELD_NAMES_15_1);\r\nvar IGNORE_COLUMN_OPTION_NAMES = {\r\n    visibleWidth: true,\r\n    bestFitWidth: true,\r\n    bufferedFilterValue: true\r\n};\r\nvar COMMAND_EXPAND_CLASS = \"dx-command-expand\";\r\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\r\nvar GROUP_COMMAND_COLUMN_NAME = \"groupExpand\";\r\nvar regExp = /columns\\[(\\d+)\\]\\.?/gi;\r\nvar globalColumnId = 1;\r\nexport var columnsControllerModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            commonColumnSettings: {\r\n                allowFiltering: true,\r\n                allowHiding: true,\r\n                allowSorting: true,\r\n                allowEditing: true,\r\n                encodeHtml: true,\r\n                trueText: messageLocalization.format(\"dxDataGrid-trueText\"),\r\n                falseText: messageLocalization.format(\"dxDataGrid-falseText\")\r\n            },\r\n            allowColumnReordering: false,\r\n            allowColumnResizing: false,\r\n            columnResizingMode: \"nextColumn\",\r\n            columnMinWidth: void 0,\r\n            columnWidth: void 0,\r\n            adaptColumnWidthByRatio: true,\r\n            columns: void 0,\r\n            regenerateColumnsByVisibleItems: false,\r\n            customizeColumns: null,\r\n            dateSerializationFormat: void 0\r\n        }\r\n    },\r\n    controllers: {\r\n        columns: modules.Controller.inherit(function() {\r\n            var DEFAULT_COLUMN_OPTIONS = {\r\n                visible: true,\r\n                showInColumnChooser: true\r\n            };\r\n            var DATATYPE_OPERATIONS = {\r\n                number: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\r\n                string: [\"contains\", \"notcontains\", \"startswith\", \"endswith\", \"=\", \"<>\"],\r\n                date: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\r\n                datetime: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"]\r\n            };\r\n            var COLUMN_INDEX_OPTIONS = {\r\n                visibleIndex: true,\r\n                groupIndex: true,\r\n                grouped: true,\r\n                sortIndex: true,\r\n                sortOrder: true\r\n            };\r\n            var setFilterOperationsAsDefaultValues = function(column) {\r\n                column.filterOperations = column.defaultFilterOperations\r\n            };\r\n            var createColumn = function(that, columnOptions, userStateColumnOptions, bandColumn) {\r\n                var commonColumnOptions = {};\r\n                if (columnOptions) {\r\n                    if (isString(columnOptions)) {\r\n                        columnOptions = {\r\n                            dataField: columnOptions\r\n                        }\r\n                    }\r\n                    that.setName(columnOptions);\r\n                    var result = {};\r\n                    if (columnOptions.command) {\r\n                        result = deepExtendArraySafe(commonColumnOptions, columnOptions)\r\n                    } else {\r\n                        commonColumnOptions = that.getCommonSettings(columnOptions);\r\n                        if (userStateColumnOptions && userStateColumnOptions.name && userStateColumnOptions.dataField) {\r\n                            columnOptions = extend({}, columnOptions, {\r\n                                dataField: userStateColumnOptions.dataField\r\n                            })\r\n                        }\r\n                        var calculatedColumnOptions = that._createCalculatedColumnOptions(columnOptions, bandColumn);\r\n                        if (!columnOptions.type) {\r\n                            result = {\r\n                                headerId: \"dx-col-\".concat(globalColumnId++)\r\n                            }\r\n                        }\r\n                        result = deepExtendArraySafe(result, DEFAULT_COLUMN_OPTIONS);\r\n                        deepExtendArraySafe(result, commonColumnOptions);\r\n                        deepExtendArraySafe(result, calculatedColumnOptions);\r\n                        deepExtendArraySafe(result, columnOptions);\r\n                        deepExtendArraySafe(result, {\r\n                            selector: null\r\n                        })\r\n                    }\r\n                    if (columnOptions.filterOperations === columnOptions.defaultFilterOperations) {\r\n                        setFilterOperationsAsDefaultValues(result)\r\n                    }\r\n                    return result\r\n                }\r\n            };\r\n            var createColumnsFromOptions = function createColumnsFromOptions(that, columnsOptions, bandColumn) {\r\n                var result = [];\r\n                if (columnsOptions) {\r\n                    each(columnsOptions, (function(index, columnOptions) {\r\n                        var userStateColumnOptions = that._columnsUserState && checkUserStateColumn(columnOptions, that._columnsUserState[index]) && that._columnsUserState[index];\r\n                        var column = createColumn(that, columnOptions, userStateColumnOptions, bandColumn);\r\n                        if (column) {\r\n                            if (bandColumn) {\r\n                                column.ownerBand = bandColumn\r\n                            }\r\n                            result.push(column);\r\n                            if (column.columns) {\r\n                                result = result.concat(createColumnsFromOptions(that, column.columns, column));\r\n                                delete column.columns;\r\n                                column.hasColumns = true\r\n                            }\r\n                        }\r\n                    }))\r\n                }\r\n                return result\r\n            };\r\n            var getParentBandColumns = function(columnIndex, columnParentByIndex) {\r\n                var result = [];\r\n                var parent = columnParentByIndex[columnIndex];\r\n                while (parent) {\r\n                    result.unshift(parent);\r\n                    columnIndex = parent.index;\r\n                    parent = columnParentByIndex[columnIndex]\r\n                }\r\n                return result\r\n            };\r\n            var _getChildrenByBandColumn = function(columnIndex, columnChildrenByIndex, recursive) {\r\n                var result = [];\r\n                var children = columnChildrenByIndex[columnIndex];\r\n                if (children) {\r\n                    for (var i = 0; i < children.length; i++) {\r\n                        var column = children[i];\r\n                        if (!isDefined(column.groupIndex) || column.showWhenGrouped) {\r\n                            result.push(column);\r\n                            if (recursive && column.isBand) {\r\n                                result = result.concat(_getChildrenByBandColumn(column.index, columnChildrenByIndex, recursive))\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return result\r\n            };\r\n            var getColumnFullPath = function(that, column) {\r\n                var result = [];\r\n                var columns;\r\n                var bandColumnsCache = that.getBandColumnsCache();\r\n                var callbackFilter = function(item) {\r\n                    return item.ownerBand === column.ownerBand\r\n                };\r\n                if (bandColumnsCache.isPlain) {\r\n                    var columnIndex = that._columns.indexOf(column);\r\n                    if (columnIndex >= 0) {\r\n                        result = [\"columns[\".concat(columnIndex, \"]\")]\r\n                    }\r\n                } else {\r\n                    columns = that._columns.filter(callbackFilter);\r\n                    while (columns.length && -1 !== columns.indexOf(column)) {\r\n                        result.unshift(\"columns[\".concat(columns.indexOf(column), \"]\"));\r\n                        column = bandColumnsCache.columnParentByIndex[column.index];\r\n                        columns = column ? that._columns.filter(callbackFilter) : []\r\n                    }\r\n                }\r\n                return result.join(\".\")\r\n            };\r\n            var calculateColspan = function calculateColspan(that, columnID) {\r\n                var colspan = 0;\r\n                var columns = that.getChildrenByBandColumn(columnID, true);\r\n                each(columns, (function(_, column) {\r\n                    if (column.isBand) {\r\n                        column.colspan = column.colspan || calculateColspan(that, column.index);\r\n                        colspan += column.colspan || 1\r\n                    } else {\r\n                        colspan += 1\r\n                    }\r\n                }));\r\n                return colspan\r\n            };\r\n            var getValueDataType = function(value) {\r\n                var dataType = type(value);\r\n                if (\"string\" !== dataType && \"boolean\" !== dataType && \"number\" !== dataType && \"date\" !== dataType && \"object\" !== dataType) {\r\n                    dataType = void 0\r\n                }\r\n                return dataType\r\n            };\r\n            var getSerializationFormat = function(dataType, value) {\r\n                switch (dataType) {\r\n                    case \"date\":\r\n                    case \"datetime\":\r\n                        return dateSerialization.getDateSerializationFormat(value);\r\n                    case \"number\":\r\n                        if (isString(value)) {\r\n                            return \"string\"\r\n                        }\r\n                        if (isNumeric(value)) {\r\n                            return null\r\n                        }\r\n                }\r\n            };\r\n            var updateSerializers = function(options, dataType) {\r\n                if (!options.deserializeValue) {\r\n                    if (gridCoreUtils.isDateType(dataType)) {\r\n                        options.deserializeValue = function(value) {\r\n                            return dateSerialization.deserializeDate(value)\r\n                        };\r\n                        options.serializeValue = function(value) {\r\n                            return isString(value) ? value : dateSerialization.serializeDate(value, this.serializationFormat)\r\n                        }\r\n                    }\r\n                    if (\"number\" === dataType) {\r\n                        options.deserializeValue = function(value) {\r\n                            var parsedValue = parseFloat(value);\r\n                            return isNaN(parsedValue) ? value : parsedValue\r\n                        };\r\n                        options.serializeValue = function(value, target) {\r\n                            if (\"filter\" === target) {\r\n                                return value\r\n                            }\r\n                            return isDefined(value) && \"string\" === this.serializationFormat ? value.toString() : value\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            var customizeTextForBooleanDataType = function(e) {\r\n                if (true === e.value) {\r\n                    return this.trueText || \"true\"\r\n                } else if (false === e.value) {\r\n                    return this.falseText || \"false\"\r\n                } else {\r\n                    return e.valueText || \"\"\r\n                }\r\n            };\r\n            var getCustomizeTextByDataType = function(dataType) {\r\n                if (\"boolean\" === dataType) {\r\n                    return customizeTextForBooleanDataType\r\n                }\r\n            };\r\n            var updateColumnIndexes = function(that) {\r\n                each(that._columns, (function(index, column) {\r\n                    column.index = index\r\n                }));\r\n                each(that._columns, (function(index, column) {\r\n                    if (isObject(column.ownerBand)) {\r\n                        column.ownerBand = column.ownerBand.index\r\n                    }\r\n                }));\r\n                each(that._commandColumns, (function(index, column) {\r\n                    column.index = -(index + 1)\r\n                }))\r\n            };\r\n            var updateColumnGroupIndexes = function(that, currentColumn) {\r\n                normalizeIndexes(that._columns, \"groupIndex\", currentColumn, (function(column) {\r\n                    var grouped = column.grouped;\r\n                    delete column.grouped;\r\n                    return grouped\r\n                }))\r\n            };\r\n            var getColumnIndexByVisibleIndex = function(that, visibleIndex, location) {\r\n                var rowIndex = isObject(visibleIndex) ? visibleIndex.rowIndex : null;\r\n                var columns = \"group\" === location ? that.getGroupColumns() : \"columnChooser\" === location ? that.getChooserColumns() : that.getVisibleColumns(rowIndex);\r\n                var column;\r\n                visibleIndex = isObject(visibleIndex) ? visibleIndex.columnIndex : visibleIndex;\r\n                column = columns[visibleIndex];\r\n                if (column && column.type === GROUP_COMMAND_COLUMN_NAME) {\r\n                    column = that._columns.filter(col => column.type === col.type)[0] || column\r\n                }\r\n                return column && isDefined(column.index) ? column.index : -1\r\n            };\r\n\r\n            function checkUserStateColumn(column, userStateColumn) {\r\n                return column && userStateColumn && userStateColumn.name === (column.name || column.dataField) && (userStateColumn.dataField === column.dataField || column.name)\r\n            }\r\n            var applyUserState = function(that) {\r\n                var columnsUserState = that._columnsUserState;\r\n                var ignoreColumnOptionNames = that._ignoreColumnOptionNames || [];\r\n                var columns = that._columns;\r\n                var columnCountById = {};\r\n                var resultColumns = [];\r\n                var allColumnsHaveState = true;\r\n                var userStateColumnIndexes = [];\r\n                var column;\r\n                var userStateColumnIndex;\r\n                var i;\r\n\r\n                function applyFieldsState(column, userStateColumn) {\r\n                    if (!userStateColumn) {\r\n                        return\r\n                    }\r\n                    for (var index = 0; index < USER_STATE_FIELD_NAMES.length; index++) {\r\n                        var fieldName = USER_STATE_FIELD_NAMES[index];\r\n                        if (ignoreColumnOptionNames.includes(fieldName)) {\r\n                            continue\r\n                        }\r\n                        if (\"dataType\" === fieldName) {\r\n                            column[fieldName] = column[fieldName] || userStateColumn[fieldName]\r\n                        } else if (USER_STATE_FIELD_NAMES_15_1.includes(fieldName)) {\r\n                            if (fieldName in userStateColumn) {\r\n                                column[fieldName] = userStateColumn[fieldName]\r\n                            }\r\n                        } else {\r\n                            if (\"selectedFilterOperation\" === fieldName && userStateColumn[fieldName]) {\r\n                                column.defaultSelectedFilterOperation = column[fieldName] || null\r\n                            }\r\n                            column[fieldName] = userStateColumn[fieldName]\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function findUserStateColumn(columnsUserState, column) {\r\n                    var id = column.name || column.dataField;\r\n                    var count = columnCountById[id] || 0;\r\n                    for (var j = 0; j < columnsUserState.length; j++) {\r\n                        if (checkUserStateColumn(column, columnsUserState[j])) {\r\n                            if (count) {\r\n                                count--\r\n                            } else {\r\n                                columnCountById[id] = columnCountById[id] || 0;\r\n                                columnCountById[id]++;\r\n                                return j\r\n                            }\r\n                        }\r\n                    }\r\n                    return -1\r\n                }\r\n                if (columnsUserState) {\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        userStateColumnIndex = findUserStateColumn(columnsUserState, columns[i]);\r\n                        allColumnsHaveState = allColumnsHaveState && userStateColumnIndex >= 0;\r\n                        userStateColumnIndexes.push(userStateColumnIndex)\r\n                    }\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        column = columns[i];\r\n                        userStateColumnIndex = userStateColumnIndexes[i];\r\n                        if (that._hasUserState || allColumnsHaveState) {\r\n                            applyFieldsState(column, columnsUserState[userStateColumnIndex])\r\n                        }\r\n                        if (userStateColumnIndex >= 0 && isDefined(columnsUserState[userStateColumnIndex].initialIndex)) {\r\n                            resultColumns[userStateColumnIndex] = column\r\n                        } else {\r\n                            resultColumns.push(column)\r\n                        }\r\n                    }\r\n                    var hasAddedBands = false;\r\n                    for (i = 0; i < columnsUserState.length; i++) {\r\n                        var columnUserState = columnsUserState[i];\r\n                        if (columnUserState.added && findUserStateColumn(columns, columnUserState) < 0) {\r\n                            column = createColumn(that, columnUserState.added);\r\n                            applyFieldsState(column, columnUserState);\r\n                            resultColumns.push(column);\r\n                            if (columnUserState.added.columns) {\r\n                                hasAddedBands = true\r\n                            }\r\n                        }\r\n                    }\r\n                    if (hasAddedBands) {\r\n                        updateColumnIndexes(that);\r\n                        resultColumns = createColumnsFromOptions(that, resultColumns)\r\n                    }\r\n                    assignColumns(that, resultColumns)\r\n                }\r\n            };\r\n            var updateIndexes = function(that, column) {\r\n                updateColumnIndexes(that);\r\n                updateColumnGroupIndexes(that, column);\r\n                ! function(that, currentColumn) {\r\n                    each(that._columns, (function(index, column) {\r\n                        if (isDefined(column.sortIndex) && !isSortOrderValid(column.sortOrder)) {\r\n                            delete column.sortIndex\r\n                        }\r\n                    }));\r\n                    normalizeIndexes(that._columns, \"sortIndex\", currentColumn, (function(column) {\r\n                        return !isDefined(column.groupIndex) && isSortOrderValid(column.sortOrder)\r\n                    }))\r\n                }(that, column);\r\n                resetBandColumnsCache(that);\r\n                ! function(that, currentColumn) {\r\n                    var column;\r\n                    var result = [];\r\n                    var bandColumnsCache = that.getBandColumnsCache();\r\n                    var bandedColumns = [];\r\n                    var columns = that._columns.filter(column => !column.command);\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        column = columns[i];\r\n                        var parentBandColumns = getParentBandColumns(i, bandColumnsCache.columnParentByIndex);\r\n                        if (parentBandColumns.length) {\r\n                            bandedColumns.push(column)\r\n                        } else {\r\n                            result.push(column)\r\n                        }\r\n                    }\r\n                    normalizeIndexes(bandedColumns, \"visibleIndex\", currentColumn);\r\n                    normalizeIndexes(result, \"visibleIndex\", currentColumn)\r\n                }(that, column)\r\n            };\r\n            var resetColumnsCache = function(that) {\r\n                that.resetColumnsCache()\r\n            };\r\n\r\n            function assignColumns(that, columns) {\r\n                that._previousColumns = that._columns;\r\n                that._columns = columns;\r\n                resetColumnsCache(that);\r\n                that.updateColumnDataTypes()\r\n            }\r\n            var updateColumnChanges = function(that, changeType, optionName, columnIndex) {\r\n                var columnChanges = that._columnChanges || {\r\n                    optionNames: {\r\n                        length: 0\r\n                    },\r\n                    changeTypes: {\r\n                        length: 0\r\n                    },\r\n                    columnIndex: columnIndex\r\n                };\r\n                optionName = optionName || \"all\";\r\n                optionName = optionName.split(\".\")[0];\r\n                var changeTypes = columnChanges.changeTypes;\r\n                if (changeType && !changeTypes[changeType]) {\r\n                    changeTypes[changeType] = true;\r\n                    changeTypes.length++\r\n                }\r\n                var optionNames = columnChanges.optionNames;\r\n                if (optionName && !optionNames[optionName]) {\r\n                    optionNames[optionName] = true;\r\n                    optionNames.length++\r\n                }\r\n                if (void 0 === columnIndex || columnIndex !== columnChanges.columnIndex) {\r\n                    delete columnChanges.columnIndex\r\n                }\r\n                that._columnChanges = columnChanges;\r\n                resetColumnsCache(that)\r\n            };\r\n            var fireColumnsChanged = function(that) {\r\n                var onColumnsChanging = that.option(\"onColumnsChanging\");\r\n                var columnChanges = that._columnChanges;\r\n                var reinitOptionNames = [\"dataField\", \"lookup\", \"dataType\", \"columns\"];\r\n                if (that.isInitialized() && !that._updateLockCount && columnChanges) {\r\n                    if (onColumnsChanging) {\r\n                        that._updateLockCount++;\r\n                        onColumnsChanging(extend({\r\n                            component: that.component\r\n                        }, columnChanges));\r\n                        that._updateLockCount--\r\n                    }\r\n                    that._columnChanges = void 0;\r\n                    if (options = columnChanges.optionNames, options && reinitOptionNames.some(name => options[name])) {\r\n                        that._reinitAfterLookupChanges = null === columnChanges || void 0 === columnChanges ? void 0 : columnChanges.optionNames.lookup;\r\n                        that.reinit();\r\n                        that._reinitAfterLookupChanges = void 0\r\n                    } else {\r\n                        that.columnsChanged.fire(columnChanges)\r\n                    }\r\n                }\r\n                var options\r\n            };\r\n            var updateSortOrderWhenGrouping = function(that, column, groupIndex, prevGroupIndex) {\r\n                var columnWasGrouped = prevGroupIndex >= 0;\r\n                if (groupIndex >= 0) {\r\n                    if (!columnWasGrouped) {\r\n                        column.lastSortOrder = column.sortOrder\r\n                    }\r\n                } else {\r\n                    var sortMode = that.option(\"sorting.mode\");\r\n                    var sortOrder = column.lastSortOrder;\r\n                    if (\"single\" === sortMode) {\r\n                        var sortedByAnotherColumn = that._columns.some(col => col !== column && isDefined(col.sortIndex));\r\n                        if (sortedByAnotherColumn) {\r\n                            sortOrder = void 0\r\n                        }\r\n                    }\r\n                    column.sortOrder = sortOrder\r\n                }\r\n            };\r\n            var fireOptionChanged = function(that, options) {\r\n                var value = options.value;\r\n                var optionName = options.optionName;\r\n                var prevValue = options.prevValue;\r\n                var fullOptionName = options.fullOptionName;\r\n                var fullOptionPath = \"\".concat(fullOptionName, \".\").concat(optionName);\r\n                if (!IGNORE_COLUMN_OPTION_NAMES[optionName] && that._skipProcessingColumnsChange !== fullOptionPath) {\r\n                    that._skipProcessingColumnsChange = fullOptionPath;\r\n                    that.component._notifyOptionChanged(fullOptionPath, value, prevValue);\r\n                    that._skipProcessingColumnsChange = false\r\n                }\r\n            };\r\n            var columnOptionCore = function(that, column, optionName, value, notFireEvent) {\r\n                var optionGetter = compileGetter(optionName);\r\n                var columnIndex = column.index;\r\n                var columns;\r\n                var changeType;\r\n                var initialColumn;\r\n                if (3 === arguments.length) {\r\n                    return optionGetter(column, {\r\n                        functionsAsIs: true\r\n                    })\r\n                }\r\n                var prevValue = optionGetter(column, {\r\n                    functionsAsIs: true\r\n                });\r\n                if (!equalByValue(prevValue, value)) {\r\n                    if (\"groupIndex\" === optionName || \"calculateGroupValue\" === optionName) {\r\n                        changeType = \"grouping\";\r\n                        updateSortOrderWhenGrouping(that, column, value, prevValue)\r\n                    } else if (\"sortIndex\" === optionName || \"sortOrder\" === optionName || \"calculateSortValue\" === optionName) {\r\n                        changeType = \"sorting\"\r\n                    } else {\r\n                        changeType = \"columns\"\r\n                    }\r\n                    var optionSetter = compileSetter(optionName);\r\n                    optionSetter(column, value, {\r\n                        functionsAsIs: true\r\n                    });\r\n                    var fullOptionName = getColumnFullPath(that, column);\r\n                    if (COLUMN_INDEX_OPTIONS[optionName]) {\r\n                        updateIndexes(that, column);\r\n                        value = optionGetter(column)\r\n                    }\r\n                    if (\"name\" === optionName || \"allowEditing\" === optionName) {\r\n                        that._checkColumns()\r\n                    }\r\n                    if (!isDefined(prevValue) && !isDefined(value) && 0 !== optionName.indexOf(\"buffer\")) {\r\n                        notFireEvent = true\r\n                    }\r\n                    if (!notFireEvent) {\r\n                        if (!USER_STATE_FIELD_NAMES.includes(optionName) && \"visibleWidth\" !== optionName) {\r\n                            columns = that.option(\"columns\");\r\n                            initialColumn = that.getColumnByPath(fullOptionName, columns);\r\n                            if (isString(initialColumn)) {\r\n                                initialColumn = columns[columnIndex] = {\r\n                                    dataField: initialColumn\r\n                                }\r\n                            }\r\n                            if (initialColumn && checkUserStateColumn(initialColumn, column)) {\r\n                                optionSetter(initialColumn, value, {\r\n                                    functionsAsIs: true\r\n                                })\r\n                            }\r\n                        }\r\n                        updateColumnChanges(that, changeType, optionName, columnIndex)\r\n                    } else {\r\n                        resetColumnsCache(that)\r\n                    }\r\n                    fullOptionName && fireOptionChanged(that, {\r\n                        fullOptionName: fullOptionName,\r\n                        optionName: optionName,\r\n                        value: value,\r\n                        prevValue: prevValue\r\n                    })\r\n                }\r\n            };\r\n\r\n            function isSortOrderValid(sortOrder) {\r\n                return \"asc\" === sortOrder || \"desc\" === sortOrder\r\n            }\r\n            var defaultSetCellValue = function(data, value) {\r\n                if (!this.dataField) {\r\n                    return\r\n                }\r\n                var path = this.dataField.split(\".\");\r\n                var dotCount = path.length - 1;\r\n                if (this.serializeValue) {\r\n                    value = this.serializeValue(value)\r\n                }\r\n                for (var i = 0; i < dotCount; i++) {\r\n                    var name = path[i];\r\n                    data = data[name] = data[name] || {}\r\n                }\r\n                data[path[dotCount]] = value\r\n            };\r\n            var isCustomCommandColumn = (that, commandColumn) => !!that._columns.filter(column => column.type === commandColumn.type).length;\r\n            var getFixedPosition = function(that, column) {\r\n                var rtlEnabled = that.option(\"rtlEnabled\");\r\n                if (column.command && !isCustomCommandColumn(that, column) || !column.fixedPosition) {\r\n                    return rtlEnabled ? \"right\" : \"left\"\r\n                }\r\n                return column.fixedPosition\r\n            };\r\n            var processExpandColumns = function(columns, expandColumns, type, columnIndex) {\r\n                var customColumnIndex;\r\n                var rowCount = this.getRowCount();\r\n                var rowspan = columns[columnIndex] && columns[columnIndex].rowspan;\r\n                var expandColumnsByType = expandColumns.filter(column => column.type === type);\r\n                columns.forEach((column, index) => {\r\n                    if (column.type === type) {\r\n                        customColumnIndex = index;\r\n                        rowspan = columns[index + 1] ? columns[index + 1].rowspan : rowCount\r\n                    }\r\n                });\r\n                if (rowspan > 1) {\r\n                    expandColumnsByType = map(expandColumnsByType, (function(expandColumn) {\r\n                        return extend({}, expandColumn, {\r\n                            rowspan: rowspan\r\n                        })\r\n                    }))\r\n                }\r\n                expandColumnsByType.unshift.apply(expandColumnsByType, isDefined(customColumnIndex) ? [customColumnIndex, 1] : [columnIndex, 0]);\r\n                columns.splice.apply(columns, expandColumnsByType);\r\n                return rowspan || 1\r\n            };\r\n            var numberToString = function(number, digitsCount) {\r\n                var str = number ? number.toString() : \"0\";\r\n                while (str.length < digitsCount) {\r\n                    str = \"0\" + str\r\n                }\r\n                return str\r\n            };\r\n            var mergeColumns = (that, columns, commandColumns, needToExtend) => {\r\n                var column;\r\n                var commandColumnIndex;\r\n                var result = columns.slice().map(column => extend({}, column));\r\n                var isColumnFixing = that._isColumnFixing();\r\n                var defaultCommandColumns = commandColumns.slice().map(column => extend({\r\n                    fixed: isColumnFixing\r\n                }, column));\r\n                var getCommandColumnIndex = column => commandColumns.reduce((result, commandColumn, index) => {\r\n                    var columnType = needToExtend && column.type === GROUP_COMMAND_COLUMN_NAME ? \"expand\" : column.type;\r\n                    return commandColumn.type === columnType || commandColumn.command === column.command ? index : result\r\n                }, -1);\r\n                var callbackFilter = commandColumn => commandColumn.command !== commandColumns[commandColumnIndex].command;\r\n                for (var i = 0; i < columns.length; i++) {\r\n                    column = columns[i];\r\n                    commandColumnIndex = column && (column.type || column.command) ? getCommandColumnIndex(column) : -1;\r\n                    if (commandColumnIndex >= 0) {\r\n                        if (needToExtend) {\r\n                            result[i] = extend({\r\n                                fixed: isColumnFixing\r\n                            }, commandColumns[commandColumnIndex], column);\r\n                            if (column.type !== GROUP_COMMAND_COLUMN_NAME) {\r\n                                defaultCommandColumns = defaultCommandColumns.filter(callbackFilter)\r\n                            }\r\n                        } else {\r\n                            var columnOptions = {\r\n                                visibleIndex: column.visibleIndex,\r\n                                index: column.index,\r\n                                headerId: column.headerId,\r\n                                allowFixing: 0 === column.groupIndex,\r\n                                allowReordering: 0 === column.groupIndex,\r\n                                groupIndex: column.groupIndex\r\n                            };\r\n                            result[i] = extend({}, column, commandColumns[commandColumnIndex], column.type === GROUP_COMMAND_COLUMN_NAME && columnOptions)\r\n                        }\r\n                    }\r\n                }\r\n                if (columns.length && needToExtend && defaultCommandColumns.length) {\r\n                    result = result.concat(defaultCommandColumns)\r\n                }\r\n                return result\r\n            };\r\n            var isColumnFixed = (that, column) => isDefined(column.fixed) || !column.type ? column.fixed : that._isColumnFixing();\r\n            var resetBandColumnsCache = that => {\r\n                that._bandColumnsCache = void 0\r\n            };\r\n            var findColumn = (columns, identifier) => {\r\n                var identifierOptionName = isString(identifier) && identifier.substr(0, identifier.indexOf(\":\"));\r\n                var column;\r\n                if (void 0 === identifier) {\r\n                    return\r\n                }\r\n                if (identifierOptionName) {\r\n                    identifier = identifier.substr(identifierOptionName.length + 1)\r\n                }\r\n                if (identifierOptionName) {\r\n                    column = columns.filter(column => \"\" + column[identifierOptionName] === identifier)[0]\r\n                } else {\r\n                    [\"index\", \"name\", \"dataField\", \"caption\"].some(optionName => {\r\n                        column = columns.filter(column => column[optionName] === identifier)[0];\r\n                        return !!column\r\n                    })\r\n                }\r\n                return column\r\n            };\r\n            var members = {\r\n                _getExpandColumnOptions: function() {\r\n                    return {\r\n                        type: \"expand\",\r\n                        command: \"expand\",\r\n                        width: \"auto\",\r\n                        cssClass: COMMAND_EXPAND_CLASS,\r\n                        allowEditing: false,\r\n                        allowGrouping: false,\r\n                        allowSorting: false,\r\n                        allowResizing: false,\r\n                        allowReordering: false,\r\n                        allowHiding: false\r\n                    }\r\n                },\r\n                _getFirstItems: function(dataSource) {\r\n                    var groupsCount;\r\n                    var items = [];\r\n                    if (dataSource && dataSource.items().length > 0) {\r\n                        groupsCount = gridCoreUtils.normalizeSortingInfo(dataSource.group()).length;\r\n                        items = function getFirstItemsCore(items, groupsCount) {\r\n                            if (!items || !groupsCount) {\r\n                                return items\r\n                            }\r\n                            for (var i = 0; i < items.length; i++) {\r\n                                var childItems = getFirstItemsCore(items[i].items || items[i].collapsedItems, groupsCount - 1);\r\n                                if (childItems && childItems.length) {\r\n                                    return childItems\r\n                                }\r\n                            }\r\n                        }(dataSource.items(), groupsCount) || []\r\n                    }\r\n                    return items\r\n                },\r\n                _endUpdateCore: function() {\r\n                    !this._skipProcessingColumnsChange && fireColumnsChanged(this)\r\n                },\r\n                init: function(isApplyingUserState) {\r\n                    var columns = this.option(\"columns\");\r\n                    this._commandColumns = this._commandColumns || [];\r\n                    this._columns = this._columns || [];\r\n                    this._isColumnsFromOptions = !!columns;\r\n                    if (this._isColumnsFromOptions) {\r\n                        assignColumns(this, columns ? createColumnsFromOptions(this, columns) : []);\r\n                        applyUserState(this)\r\n                    } else {\r\n                        assignColumns(this, this._columnsUserState ? createColumnsFromOptions(this, this._columnsUserState) : this._columns)\r\n                    }! function(that) {\r\n                        var options = that._getExpandColumnOptions();\r\n                        that.addCommandColumn(options)\r\n                    }(this);\r\n                    if (this._dataSourceApplied) {\r\n                        this.applyDataSource(this._dataSource, true, isApplyingUserState)\r\n                    } else {\r\n                        updateIndexes(this)\r\n                    }\r\n                    this._checkColumns()\r\n                },\r\n                callbackNames: function() {\r\n                    return [\"columnsChanged\"]\r\n                },\r\n                getColumnByPath: function(path, columns) {\r\n                    var column;\r\n                    var columnIndexes = [];\r\n                    path.replace(regExp, (function(_, columnIndex) {\r\n                        columnIndexes.push(parseInt(columnIndex));\r\n                        return \"\"\r\n                    }));\r\n                    if (columnIndexes.length) {\r\n                        if (columns) {\r\n                            column = columnIndexes.reduce((function(column, index) {\r\n                                return column && column.columns && column.columns[index]\r\n                            }), {\r\n                                columns: columns\r\n                            })\r\n                        } else {\r\n                            column = function(that, columnIndexes) {\r\n                                var result;\r\n                                var columns;\r\n                                var bandColumnsCache = that.getBandColumnsCache();\r\n                                var callbackFilter = function(column) {\r\n                                    var ownerBand = result ? result.index : void 0;\r\n                                    return column.ownerBand === ownerBand\r\n                                };\r\n                                if (bandColumnsCache.isPlain) {\r\n                                    result = that._columns[columnIndexes[0]]\r\n                                } else {\r\n                                    columns = that._columns.filter(callbackFilter);\r\n                                    for (var i = 0; i < columnIndexes.length; i++) {\r\n                                        result = columns[columnIndexes[i]];\r\n                                        if (result) {\r\n                                            columns = that._columns.filter(callbackFilter)\r\n                                        }\r\n                                    }\r\n                                }\r\n                                return result\r\n                            }(this, columnIndexes)\r\n                        }\r\n                    }\r\n                    return column\r\n                },\r\n                optionChanged: function(args) {\r\n                    var needUpdateRequireResize;\r\n                    switch (args.name) {\r\n                        case \"adaptColumnWidthByRatio\":\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"dataSource\":\r\n                            if (args.value !== args.previousValue && !this.option(\"columns\") && (!Array.isArray(args.value) || !Array.isArray(args.previousValue))) {\r\n                                this._columns = []\r\n                            }\r\n                            break;\r\n                        case \"columns\":\r\n                            needUpdateRequireResize = this._skipProcessingColumnsChange;\r\n                            args.handled = true;\r\n                            if (!this._skipProcessingColumnsChange) {\r\n                                if (args.name === args.fullName) {\r\n                                    this._columnsUserState = null;\r\n                                    this._ignoreColumnOptionNames = null;\r\n                                    this.init()\r\n                                } else {\r\n                                    this._columnOptionChanged(args);\r\n                                    needUpdateRequireResize = true\r\n                                }\r\n                            }\r\n                            if (needUpdateRequireResize) {\r\n                                this._updateRequireResize(args)\r\n                            }\r\n                            break;\r\n                        case \"commonColumnSettings\":\r\n                        case \"columnAutoWidth\":\r\n                        case \"allowColumnResizing\":\r\n                        case \"allowColumnReordering\":\r\n                        case \"columnFixing\":\r\n                        case \"grouping\":\r\n                        case \"groupPanel\":\r\n                        case \"regenerateColumnsByVisibleItems\":\r\n                        case \"customizeColumns\":\r\n                        case \"columnHidingEnabled\":\r\n                        case \"dateSerializationFormat\":\r\n                        case \"columnResizingMode\":\r\n                        case \"columnMinWidth\":\r\n                        case \"columnWidth\":\r\n                            args.handled = true;\r\n                            var ignoreColumnOptionNames = \"columnWidth\" === args.fullName && [\"width\"];\r\n                            this.reinit(ignoreColumnOptionNames);\r\n                            break;\r\n                        case \"rtlEnabled\":\r\n                            this.reinit();\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                _columnOptionChanged: function(args) {\r\n                    var columnOptionValue = {};\r\n                    var column = this.getColumnByPath(args.fullName);\r\n                    var columnOptionName = args.fullName.replace(regExp, \"\");\r\n                    if (column) {\r\n                        if (columnOptionName) {\r\n                            columnOptionValue[columnOptionName] = args.value\r\n                        } else {\r\n                            columnOptionValue = args.value\r\n                        }\r\n                        this._skipProcessingColumnsChange = args.fullName;\r\n                        this.columnOption(column.index, columnOptionValue);\r\n                        this._skipProcessingColumnsChange = false\r\n                    }\r\n                },\r\n                _updateRequireResize: function(args) {\r\n                    var component = this.component;\r\n                    if (\"width\" === args.fullName.replace(regExp, \"\") && component._updateLockCount) {\r\n                        component._requireResize = true\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    return [\"addColumn\", \"deleteColumn\", \"columnOption\", \"columnCount\", \"clearSorting\", \"clearGrouping\", \"getVisibleColumns\", \"getVisibleColumnIndex\"]\r\n                },\r\n                applyDataSource: function(dataSource, forceApplying, isApplyingUserState) {\r\n                    var isDataSourceLoaded = dataSource && dataSource.isLoaded();\r\n                    this._dataSource = dataSource;\r\n                    if (!this._dataSourceApplied || 0 === this._dataSourceColumnsCount || forceApplying || this.option(\"regenerateColumnsByVisibleItems\")) {\r\n                        if (isDataSourceLoaded) {\r\n                            if (!this._isColumnsFromOptions) {\r\n                                var columnsFromDataSource = function(that, dataSource) {\r\n                                    var firstItems = that._getFirstItems(dataSource);\r\n                                    var fieldName;\r\n                                    var processedFields = {};\r\n                                    var result = [];\r\n                                    for (var i = 0; i < firstItems.length; i++) {\r\n                                        if (firstItems[i]) {\r\n                                            for (fieldName in firstItems[i]) {\r\n                                                if (!isFunction(firstItems[i][fieldName]) || variableWrapper.isWrapped(firstItems[i][fieldName])) {\r\n                                                    processedFields[fieldName] = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    for (fieldName in processedFields) {\r\n                                        if (0 !== fieldName.indexOf(\"__\")) {\r\n                                            var column = createColumn(that, fieldName);\r\n                                            result.push(column)\r\n                                        }\r\n                                    }\r\n                                    return result\r\n                                }(this, dataSource);\r\n                                if (columnsFromDataSource.length) {\r\n                                    assignColumns(this, columnsFromDataSource);\r\n                                    this._dataSourceColumnsCount = this._columns.length;\r\n                                    applyUserState(this)\r\n                                }\r\n                            }\r\n                            return this.updateColumns(dataSource, forceApplying, isApplyingUserState)\r\n                        } else {\r\n                            this._dataSourceApplied = false;\r\n                            updateIndexes(this)\r\n                        }\r\n                    } else if (isDataSourceLoaded && !this.isAllDataTypesDefined(true) && this.updateColumnDataTypes(dataSource)) {\r\n                        updateColumnChanges(this, \"columns\");\r\n                        fireColumnsChanged(this);\r\n                        return (new Deferred).reject().promise()\r\n                    }\r\n                },\r\n                reset: function() {\r\n                    this._dataSource = null;\r\n                    this._dataSourceApplied = false;\r\n                    this._dataSourceColumnsCount = void 0;\r\n                    this.reinit()\r\n                },\r\n                resetColumnsCache: function() {\r\n                    this._visibleColumns = void 0;\r\n                    this._fixedColumns = void 0;\r\n                    this._rowCount = void 0;\r\n                    resetBandColumnsCache(this)\r\n                },\r\n                reinit: function(ignoreColumnOptionNames) {\r\n                    this._columnsUserState = this.getUserState();\r\n                    this._ignoreColumnOptionNames = ignoreColumnOptionNames || null;\r\n                    this.init();\r\n                    if (ignoreColumnOptionNames) {\r\n                        this._ignoreColumnOptionNames = null\r\n                    }\r\n                },\r\n                isInitialized: function() {\r\n                    return !!this._columns.length || !!this.option(\"columns\")\r\n                },\r\n                isDataSourceApplied: function() {\r\n                    return this._dataSourceApplied\r\n                },\r\n                getCommonSettings: function(column) {\r\n                    var commonColumnSettings = (!column || !column.type) && this.option(\"commonColumnSettings\") || {};\r\n                    var groupingOptions = this.option(\"grouping\") || {};\r\n                    var groupPanelOptions = this.option(\"groupPanel\") || {};\r\n                    return extend({\r\n                        allowFixing: this.option(\"columnFixing.enabled\"),\r\n                        allowResizing: this.option(\"allowColumnResizing\") || void 0,\r\n                        allowReordering: this.option(\"allowColumnReordering\"),\r\n                        minWidth: this.option(\"columnMinWidth\"),\r\n                        width: this.option(\"columnWidth\"),\r\n                        autoExpandGroup: groupingOptions.autoExpandAll,\r\n                        allowCollapsing: groupingOptions.allowCollapsing,\r\n                        allowGrouping: groupPanelOptions.allowColumnDragging && groupPanelOptions.visible || groupingOptions.contextMenuEnabled\r\n                    }, commonColumnSettings)\r\n                },\r\n                isColumnOptionUsed: function(optionName) {\r\n                    for (var i = 0; i < this._columns.length; i++) {\r\n                        if (this._columns[i][optionName]) {\r\n                            return true\r\n                        }\r\n                    }\r\n                },\r\n                isAllDataTypesDefined: function(checkSerializers) {\r\n                    var columns = this._columns;\r\n                    if (!columns.length) {\r\n                        return false\r\n                    }\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        if (!columns[i].dataField && columns[i].calculateCellValue === columns[i].defaultCalculateCellValue) {\r\n                            continue\r\n                        }\r\n                        if (!columns[i].dataType || checkSerializers && columns[i].deserializeValue && void 0 === columns[i].serializationFormat) {\r\n                            return false\r\n                        }\r\n                    }\r\n                    return true\r\n                },\r\n                getColumns: function() {\r\n                    return this._columns\r\n                },\r\n                isBandColumnsUsed: function() {\r\n                    return this.getColumns().some((function(column) {\r\n                        return column.isBand\r\n                    }))\r\n                },\r\n                getGroupColumns: function() {\r\n                    var result = [];\r\n                    each(this._columns, (function() {\r\n                        if (isDefined(this.groupIndex)) {\r\n                            result[this.groupIndex] = this\r\n                        }\r\n                    }));\r\n                    return result\r\n                },\r\n                _shouldReturnVisibleColumns: function() {\r\n                    return true\r\n                },\r\n                _compileVisibleColumns: function(rowIndex) {\r\n                    this._visibleColumns = this._visibleColumns || this._compileVisibleColumnsCore();\r\n                    rowIndex = isDefined(rowIndex) ? rowIndex : this._visibleColumns.length - 1;\r\n                    return this._visibleColumns[rowIndex] || []\r\n                },\r\n                getVisibleColumns: function(rowIndex) {\r\n                    if (!this._shouldReturnVisibleColumns()) {\r\n                        return []\r\n                    }\r\n                    return this._compileVisibleColumns.apply(this, arguments)\r\n                },\r\n                getFixedColumns: function(rowIndex) {\r\n                    this._fixedColumns = this._fixedColumns || this._getFixedColumnsCore();\r\n                    rowIndex = isDefined(rowIndex) ? rowIndex : this._fixedColumns.length - 1;\r\n                    return this._fixedColumns[rowIndex] || []\r\n                },\r\n                getFilteringColumns: function() {\r\n                    return this.getColumns().filter(item => (item.dataField || item.name) && (item.allowFiltering || item.allowHeaderFiltering)).map(item => {\r\n                        var field = extend(true, {}, item);\r\n                        if (!isDefined(field.dataField)) {\r\n                            field.dataField = field.name\r\n                        }\r\n                        field.filterOperations = item.filterOperations !== item.defaultFilterOperations ? field.filterOperations : null;\r\n                        return field\r\n                    })\r\n                },\r\n                getColumnIndexOffset: function() {\r\n                    return 0\r\n                },\r\n                _getFixedColumnsCore: function() {\r\n                    var result = [];\r\n                    var rowCount = this.getRowCount();\r\n                    var isColumnFixing = this._isColumnFixing();\r\n                    var transparentColumn = {\r\n                        command: \"transparent\"\r\n                    };\r\n                    var transparentColspan = 0;\r\n                    var notFixedColumnCount;\r\n                    var transparentColumnIndex;\r\n                    var lastFixedPosition;\r\n                    if (isColumnFixing) {\r\n                        for (var i = 0; i <= rowCount; i++) {\r\n                            notFixedColumnCount = 0;\r\n                            lastFixedPosition = null;\r\n                            transparentColumnIndex = null;\r\n                            var visibleColumns = this.getVisibleColumns(i, true);\r\n                            for (var j = 0; j < visibleColumns.length; j++) {\r\n                                var prevColumn = visibleColumns[j - 1];\r\n                                var column = visibleColumns[j];\r\n                                if (!column.fixed) {\r\n                                    if (0 === i) {\r\n                                        if (column.isBand && column.colspan) {\r\n                                            transparentColspan += column.colspan\r\n                                        } else {\r\n                                            transparentColspan++\r\n                                        }\r\n                                    }\r\n                                    notFixedColumnCount++;\r\n                                    if (!isDefined(transparentColumnIndex)) {\r\n                                        transparentColumnIndex = j\r\n                                    }\r\n                                } else if (prevColumn && prevColumn.fixed && getFixedPosition(this, prevColumn) !== getFixedPosition(this, column)) {\r\n                                    if (!isDefined(transparentColumnIndex)) {\r\n                                        transparentColumnIndex = j\r\n                                    }\r\n                                } else {\r\n                                    lastFixedPosition = column.fixedPosition\r\n                                }\r\n                            }\r\n                            if (0 === i && (0 === notFixedColumnCount || notFixedColumnCount >= visibleColumns.length)) {\r\n                                return []\r\n                            }\r\n                            if (!isDefined(transparentColumnIndex)) {\r\n                                transparentColumnIndex = \"right\" === lastFixedPosition ? 0 : visibleColumns.length\r\n                            }\r\n                            result[i] = visibleColumns.slice(0);\r\n                            if (!transparentColumn.colspan) {\r\n                                transparentColumn.colspan = transparentColspan\r\n                            }\r\n                            result[i].splice(transparentColumnIndex, notFixedColumnCount, transparentColumn)\r\n                        }\r\n                    }\r\n                    return result.map(columns => columns.map(column => {\r\n                        var newColumn = _extends({}, column);\r\n                        if (newColumn.headerId) {\r\n                            newColumn.headerId += \"-fixed\"\r\n                        }\r\n                        return newColumn\r\n                    }))\r\n                },\r\n                _isColumnFixing: function() {\r\n                    var isColumnFixing = this.option(\"columnFixing.enabled\");\r\n                    !isColumnFixing && each(this._columns, (function(_, column) {\r\n                        if (column.fixed) {\r\n                            isColumnFixing = true;\r\n                            return false\r\n                        }\r\n                    }));\r\n                    return isColumnFixing\r\n                },\r\n                _getExpandColumnsCore: function() {\r\n                    return this.getGroupColumns()\r\n                },\r\n                getExpandColumns: function() {\r\n                    var expandColumns = this._getExpandColumnsCore();\r\n                    var expandColumn;\r\n                    var firstGroupColumn = expandColumns.filter(column => 0 === column.groupIndex)[0];\r\n                    var isFixedFirstGroupColumn = firstGroupColumn && firstGroupColumn.fixed;\r\n                    var isColumnFixing = this._isColumnFixing();\r\n                    var rtlEnabled = this.option(\"rtlEnabled\");\r\n                    if (expandColumns.length) {\r\n                        expandColumn = this.columnOption(\"command:expand\")\r\n                    }\r\n                    expandColumns = map(expandColumns, column => extend({}, column, {\r\n                        visibleWidth: null,\r\n                        minWidth: null,\r\n                        cellTemplate: !isDefined(column.groupIndex) ? column.cellTemplate : null,\r\n                        headerCellTemplate: null,\r\n                        fixed: !isDefined(column.groupIndex) || !isFixedFirstGroupColumn ? isColumnFixing : true,\r\n                        fixedPosition: rtlEnabled ? \"right\" : \"left\"\r\n                    }, expandColumn, {\r\n                        index: column.index,\r\n                        type: column.type || GROUP_COMMAND_COLUMN_NAME\r\n                    }));\r\n                    return expandColumns\r\n                },\r\n                getBandColumnsCache: function() {\r\n                    if (!this._bandColumnsCache) {\r\n                        var columns = this._columns;\r\n                        var columnChildrenByIndex = {};\r\n                        var columnParentByIndex = {};\r\n                        var isPlain = true;\r\n                        columns.forEach((function(column) {\r\n                            var ownerBand = column.ownerBand;\r\n                            var parentIndex = isObject(ownerBand) ? ownerBand.index : ownerBand;\r\n                            var parent = columns[parentIndex];\r\n                            if (column.hasColumns) {\r\n                                isPlain = false\r\n                            }\r\n                            if (column.colspan) {\r\n                                column.colspan = void 0\r\n                            }\r\n                            if (column.rowspan) {\r\n                                column.rowspan = void 0\r\n                            }\r\n                            if (parent) {\r\n                                columnParentByIndex[column.index] = parent\r\n                            } else {\r\n                                parentIndex = -1\r\n                            }\r\n                            columnChildrenByIndex[parentIndex] = columnChildrenByIndex[parentIndex] || [];\r\n                            columnChildrenByIndex[parentIndex].push(column)\r\n                        }));\r\n                        this._bandColumnsCache = {\r\n                            isPlain: isPlain,\r\n                            columnChildrenByIndex: columnChildrenByIndex,\r\n                            columnParentByIndex: columnParentByIndex\r\n                        }\r\n                    }\r\n                    return this._bandColumnsCache\r\n                },\r\n                _isColumnVisible: function(column) {\r\n                    return column.visible && this.isParentColumnVisible(column.index)\r\n                },\r\n                _compileVisibleColumnsCore: function() {\r\n                    var that = this;\r\n                    var i;\r\n                    var result = [];\r\n                    var rowspanGroupColumns = 0;\r\n                    var rowspanExpandColumns = 0;\r\n                    var rowCount = that.getRowCount();\r\n                    var positiveIndexedColumns = [];\r\n                    var negativeIndexedColumns = [];\r\n                    var notGroupedColumnsCount = 0;\r\n                    var isFixedToEnd;\r\n                    var rtlEnabled = that.option(\"rtlEnabled\");\r\n                    var bandColumnsCache = that.getBandColumnsCache();\r\n                    var expandColumns = mergeColumns(that, that.getExpandColumns(), that._columns);\r\n                    var columns = mergeColumns(that, that._columns, that._commandColumns, true);\r\n                    var columnDigitsCount = function(number) {\r\n                        var i;\r\n                        for (i = 0; number > 1; i++) {\r\n                            number /= 10\r\n                        }\r\n                        return i\r\n                    }(columns.length);\r\n                    ! function(that, columns, bandColumnsCache) {\r\n                        var rowspan;\r\n                        for (var i = 0; i < columns.length; i++) {\r\n                            var column = columns[i];\r\n                            if (column.visible || column.command) {\r\n                                if (column.isBand) {\r\n                                    column.colspan = column.colspan || calculateColspan(that, column.index)\r\n                                }\r\n                                if (!column.isBand || !column.colspan) {\r\n                                    rowspan = that.getRowCount();\r\n                                    if (!column.command && (!isDefined(column.groupIndex) || column.showWhenGrouped)) {\r\n                                        rowspan -= getParentBandColumns(column.index, bandColumnsCache.columnParentByIndex).length\r\n                                    }\r\n                                    if (rowspan > 1) {\r\n                                        column.rowspan = rowspan\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }(that, columns, bandColumnsCache);\r\n                    for (i = 0; i < rowCount; i++) {\r\n                        result[i] = [];\r\n                        negativeIndexedColumns[i] = [{}];\r\n                        positiveIndexedColumns[i] = [{}, {}, {}]\r\n                    }\r\n                    each(columns, (function() {\r\n                        var visibleIndex = this.visibleIndex;\r\n                        var indexedColumns;\r\n                        var parentBandColumns = getParentBandColumns(this.index, bandColumnsCache.columnParentByIndex);\r\n                        var visible = that._isColumnVisible(this);\r\n                        if (visible && (!isDefined(this.groupIndex) || this.showWhenGrouped)) {\r\n                            var rowIndex = parentBandColumns.length;\r\n                            if (visibleIndex < 0) {\r\n                                visibleIndex = -visibleIndex;\r\n                                indexedColumns = negativeIndexedColumns[rowIndex]\r\n                            } else {\r\n                                this.fixed = parentBandColumns.length ? parentBandColumns[0].fixed : this.fixed;\r\n                                this.fixedPosition = parentBandColumns.length ? parentBandColumns[0].fixedPosition : this.fixedPosition;\r\n                                if (this.fixed) {\r\n                                    isFixedToEnd = \"right\" === this.fixedPosition;\r\n                                    if (rtlEnabled && (!this.command || isCustomCommandColumn(that, this))) {\r\n                                        isFixedToEnd = !isFixedToEnd\r\n                                    }\r\n                                    if (isFixedToEnd) {\r\n                                        indexedColumns = positiveIndexedColumns[rowIndex][2]\r\n                                    } else {\r\n                                        indexedColumns = positiveIndexedColumns[rowIndex][0]\r\n                                    }\r\n                                } else {\r\n                                    indexedColumns = positiveIndexedColumns[rowIndex][1]\r\n                                }\r\n                            }\r\n                            if (parentBandColumns.length) {\r\n                                visibleIndex = numberToString(visibleIndex, columnDigitsCount);\r\n                                for (i = parentBandColumns.length - 1; i >= 0; i--) {\r\n                                    visibleIndex = numberToString(parentBandColumns[i].visibleIndex, columnDigitsCount) + visibleIndex\r\n                                }\r\n                            }\r\n                            indexedColumns[visibleIndex] = indexedColumns[visibleIndex] || [];\r\n                            indexedColumns[visibleIndex].push(this);\r\n                            notGroupedColumnsCount++\r\n                        }\r\n                    }));\r\n                    each(result, (function(rowIndex) {\r\n                        orderEach(negativeIndexedColumns[rowIndex], (function(_, columns) {\r\n                            result[rowIndex].unshift.apply(result[rowIndex], columns)\r\n                        }));\r\n                        var firstPositiveIndexColumn = result[rowIndex].length;\r\n                        each(positiveIndexedColumns[rowIndex], (function(index, columnsByFixing) {\r\n                            orderEach(columnsByFixing, (function(_, columnsByVisibleIndex) {\r\n                                result[rowIndex].push.apply(result[rowIndex], columnsByVisibleIndex)\r\n                            }))\r\n                        }));\r\n                        if (rowspanExpandColumns < rowIndex + 1) {\r\n                            rowspanExpandColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, \"detailExpand\", firstPositiveIndexColumn)\r\n                        }\r\n                        if (rowspanGroupColumns < rowIndex + 1) {\r\n                            rowspanGroupColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, GROUP_COMMAND_COLUMN_NAME, firstPositiveIndexColumn)\r\n                        }\r\n                    }));\r\n                    result.push(function getDataColumns(columns, rowIndex, bandColumnID) {\r\n                        var result = [];\r\n                        rowIndex = rowIndex || 0;\r\n                        columns[rowIndex] && each(columns[rowIndex], (function(_, column) {\r\n                            if (column.ownerBand === bandColumnID || column.type === GROUP_COMMAND_COLUMN_NAME) {\r\n                                if (!column.isBand || !column.colspan) {\r\n                                    if (!column.command || rowIndex < 1) {\r\n                                        result.push(column)\r\n                                    }\r\n                                } else {\r\n                                    result.push.apply(result, getDataColumns(columns, rowIndex + 1, column.index))\r\n                                }\r\n                            }\r\n                        }));\r\n                        return result\r\n                    }(result));\r\n                    if (!notGroupedColumnsCount && that._columns.length) {\r\n                        result[rowCount].push({\r\n                            command: \"empty\"\r\n                        })\r\n                    }\r\n                    return result\r\n                },\r\n                getInvisibleColumns: function(columns, bandColumnIndex) {\r\n                    var that = this;\r\n                    var result = [];\r\n                    var hiddenColumnsByBand;\r\n                    columns = columns || that._columns;\r\n                    each(columns, (function(_, column) {\r\n                        if (column.ownerBand !== bandColumnIndex) {\r\n                            return\r\n                        }\r\n                        if (column.isBand) {\r\n                            if (!column.visible) {\r\n                                hiddenColumnsByBand = that.getChildrenByBandColumn(column.index)\r\n                            } else {\r\n                                hiddenColumnsByBand = that.getInvisibleColumns(that.getChildrenByBandColumn(column.index), column.index)\r\n                            }\r\n                            if (hiddenColumnsByBand.length) {\r\n                                result.push(column);\r\n                                result = result.concat(hiddenColumnsByBand)\r\n                            }\r\n                            return\r\n                        }\r\n                        if (!column.visible) {\r\n                            result.push(column)\r\n                        }\r\n                    }));\r\n                    return result\r\n                },\r\n                getChooserColumns: function(getAllColumns) {\r\n                    var columns = getAllColumns ? this.getColumns() : this.getInvisibleColumns();\r\n                    var columnChooserColumns = columns.filter(column => column.showInColumnChooser);\r\n                    var sortOrder = this.option(\"columnChooser.sortOrder\");\r\n                    return ((columns, sortOrder) => {\r\n                        if (\"asc\" !== sortOrder && \"desc\" !== sortOrder) {\r\n                            return columns\r\n                        }\r\n                        var sign = \"asc\" === sortOrder ? 1 : -1;\r\n                        columns.sort((function(column1, column2) {\r\n                            var caption1 = column1.caption || \"\";\r\n                            var caption2 = column2.caption || \"\";\r\n                            return sign * caption1.localeCompare(caption2)\r\n                        }));\r\n                        return columns\r\n                    })(columnChooserColumns, sortOrder)\r\n                },\r\n                allowMoveColumn: function(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\r\n                    var columnIndex = getColumnIndexByVisibleIndex(this, fromVisibleIndex, sourceLocation);\r\n                    var sourceColumn = this._columns[columnIndex];\r\n                    if (sourceColumn && (sourceColumn.allowReordering || sourceColumn.allowGrouping || sourceColumn.allowHiding)) {\r\n                        if (sourceLocation === targetLocation) {\r\n                            if (\"columnChooser\" === sourceLocation) {\r\n                                return false\r\n                            }\r\n                            fromVisibleIndex = isObject(fromVisibleIndex) ? fromVisibleIndex.columnIndex : fromVisibleIndex;\r\n                            toVisibleIndex = isObject(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\r\n                            return fromVisibleIndex !== toVisibleIndex && fromVisibleIndex + 1 !== toVisibleIndex\r\n                        } else if (\"group\" === sourceLocation && \"columnChooser\" !== targetLocation || \"group\" === targetLocation) {\r\n                            return sourceColumn && sourceColumn.allowGrouping\r\n                        } else if (\"columnChooser\" === sourceLocation || \"columnChooser\" === targetLocation) {\r\n                            return sourceColumn && sourceColumn.allowHiding\r\n                        }\r\n                        return true\r\n                    }\r\n                    return false\r\n                },\r\n                moveColumn: function(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\r\n                    var options = {};\r\n                    var prevGroupIndex;\r\n                    var fromIndex = getColumnIndexByVisibleIndex(this, fromVisibleIndex, sourceLocation);\r\n                    var toIndex = getColumnIndexByVisibleIndex(this, toVisibleIndex, targetLocation);\r\n                    var targetGroupIndex;\r\n                    if (fromIndex >= 0) {\r\n                        var column = this._columns[fromIndex];\r\n                        toVisibleIndex = isObject(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\r\n                        targetGroupIndex = toIndex >= 0 ? this._columns[toIndex].groupIndex : -1;\r\n                        if (isDefined(column.groupIndex) && \"group\" === sourceLocation) {\r\n                            if (targetGroupIndex > column.groupIndex) {\r\n                                targetGroupIndex--\r\n                            }\r\n                            if (\"group\" !== targetLocation) {\r\n                                options.groupIndex = void 0\r\n                            } else {\r\n                                prevGroupIndex = column.groupIndex;\r\n                                delete column.groupIndex;\r\n                                updateColumnGroupIndexes(this)\r\n                            }\r\n                        }\r\n                        if (\"group\" === targetLocation) {\r\n                            options.groupIndex = function(that, column, groupIndex) {\r\n                                var groupColumns = that.getGroupColumns();\r\n                                var i;\r\n                                if (groupIndex >= 0) {\r\n                                    for (i = 0; i < groupColumns.length; i++) {\r\n                                        if (groupColumns[i].groupIndex >= groupIndex) {\r\n                                            groupColumns[i].groupIndex++\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    groupIndex = 0;\r\n                                    for (i = 0; i < groupColumns.length; i++) {\r\n                                        groupIndex = Math.max(groupIndex, groupColumns[i].groupIndex + 1)\r\n                                    }\r\n                                }\r\n                                return groupIndex\r\n                            }(this, 0, targetGroupIndex);\r\n                            column.groupIndex = prevGroupIndex\r\n                        } else if (toVisibleIndex >= 0) {\r\n                            var targetColumn = this._columns[toIndex];\r\n                            if (!targetColumn || column.ownerBand !== targetColumn.ownerBand) {\r\n                                options.visibleIndex = MAX_SAFE_INTEGER\r\n                            } else if (isColumnFixed(this, column) ^ isColumnFixed(this, targetColumn)) {\r\n                                options.visibleIndex = MAX_SAFE_INTEGER\r\n                            } else {\r\n                                options.visibleIndex = targetColumn.visibleIndex\r\n                            }\r\n                        }\r\n                        var isVisible = \"columnChooser\" !== targetLocation;\r\n                        if (column.visible !== isVisible) {\r\n                            options.visible = isVisible\r\n                        }\r\n                        this.columnOption(column.index, options)\r\n                    }\r\n                },\r\n                changeSortOrder: function(columnIndex, sortOrder) {\r\n                    var options = {};\r\n                    var sortingOptions = this.option(\"sorting\");\r\n                    var sortingMode = sortingOptions && sortingOptions.mode;\r\n                    var needResetSorting = \"single\" === sortingMode || !sortOrder;\r\n                    var allowSorting = \"single\" === sortingMode || \"multiple\" === sortingMode;\r\n                    var column = this._columns[columnIndex];\r\n                    if (allowSorting && column && column.allowSorting) {\r\n                        if (needResetSorting && !isDefined(column.groupIndex)) {\r\n                            each(this._columns, (function(index) {\r\n                                if (index !== columnIndex && this.sortOrder) {\r\n                                    if (!isDefined(this.groupIndex)) {\r\n                                        delete this.sortOrder\r\n                                    }\r\n                                    delete this.sortIndex\r\n                                }\r\n                            }))\r\n                        }\r\n                        if (isSortOrderValid(sortOrder)) {\r\n                            if (column.sortOrder !== sortOrder) {\r\n                                options.sortOrder = sortOrder\r\n                            }\r\n                        } else if (\"none\" === sortOrder) {\r\n                            if (column.sortOrder) {\r\n                                options.sortIndex = void 0;\r\n                                options.sortOrder = void 0\r\n                            }\r\n                        } else {\r\n                            ! function(column) {\r\n                                if (\"ctrl\" === sortOrder) {\r\n                                    if (!(\"sortOrder\" in column && \"sortIndex\" in column)) {\r\n                                        return false\r\n                                    }\r\n                                    options.sortOrder = void 0;\r\n                                    options.sortIndex = void 0\r\n                                } else if (isDefined(column.groupIndex) || isDefined(column.sortIndex)) {\r\n                                    options.sortOrder = \"desc\" === column.sortOrder ? \"asc\" : \"desc\"\r\n                                } else {\r\n                                    options.sortOrder = \"asc\"\r\n                                }\r\n                                return true\r\n                            }(column)\r\n                        }\r\n                    }\r\n                    this.columnOption(column.index, options)\r\n                },\r\n                getSortDataSourceParameters: function(useLocalSelector) {\r\n                    var sortColumns = [];\r\n                    var sort = [];\r\n                    each(this._columns, (function() {\r\n                        if ((this.dataField || this.selector || this.calculateCellValue) && isDefined(this.sortIndex) && !isDefined(this.groupIndex)) {\r\n                            sortColumns[this.sortIndex] = this\r\n                        }\r\n                    }));\r\n                    each(sortColumns, (function() {\r\n                        var sortOrder = this && this.sortOrder;\r\n                        if (isSortOrderValid(sortOrder)) {\r\n                            var sortItem = {\r\n                                selector: this.calculateSortValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue,\r\n                                desc: \"desc\" === this.sortOrder\r\n                            };\r\n                            if (this.sortingMethod) {\r\n                                sortItem.compare = this.sortingMethod.bind(this)\r\n                            }\r\n                            sort.push(sortItem)\r\n                        }\r\n                    }));\r\n                    return sort.length > 0 ? sort : null\r\n                },\r\n                getGroupDataSourceParameters: function(useLocalSelector) {\r\n                    var group = [];\r\n                    each(this.getGroupColumns(), (function() {\r\n                        var selector = this.calculateGroupValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue;\r\n                        if (selector) {\r\n                            var groupItem = {\r\n                                selector: selector,\r\n                                desc: \"desc\" === this.sortOrder,\r\n                                isExpanded: !!this.autoExpandGroup\r\n                            };\r\n                            if (this.sortingMethod) {\r\n                                groupItem.compare = this.sortingMethod.bind(this)\r\n                            }\r\n                            group.push(groupItem)\r\n                        }\r\n                    }));\r\n                    return group.length > 0 ? group : null\r\n                },\r\n                refresh: function(updateNewLookupsOnly) {\r\n                    var deferreds = [];\r\n                    each(this._columns, (function() {\r\n                        var lookup = this.lookup;\r\n                        if (lookup && !this.calculateDisplayValue) {\r\n                            if (updateNewLookupsOnly && lookup.valueMap) {\r\n                                return\r\n                            }\r\n                            if (lookup.update) {\r\n                                deferreds.push(lookup.update())\r\n                            }\r\n                        }\r\n                    }));\r\n                    return when.apply($, deferreds).done(resetColumnsCache.bind(null, this))\r\n                },\r\n                _updateColumnOptions: function(column, columnIndex) {\r\n                    column.selector = column.selector || function(data) {\r\n                        return column.calculateCellValue(data)\r\n                    };\r\n                    if (this._reinitAfterLookupChanges && this._previousColumns) {\r\n                        column.selector.columnIndex = columnIndex;\r\n                        column.selector.originalCallback = this._previousColumns[columnIndex].selector.originalCallback\r\n                    } else {\r\n                        column.selector.columnIndex = columnIndex;\r\n                        column.selector.originalCallback = column.selector\r\n                    }\r\n                    each([\"calculateSortValue\", \"calculateGroupValue\", \"calculateDisplayValue\"], (function(_, calculateCallbackName) {\r\n                        var calculateCallback = column[calculateCallbackName];\r\n                        if (isFunction(calculateCallback)) {\r\n                            if (!calculateCallback.originalCallback) {\r\n                                var context = {\r\n                                    column: column\r\n                                };\r\n                                column[calculateCallbackName] = function(data) {\r\n                                    return calculateCallback.call(context.column, data)\r\n                                };\r\n                                column[calculateCallbackName].originalCallback = calculateCallback;\r\n                                column[calculateCallbackName].columnIndex = columnIndex;\r\n                                column[calculateCallbackName].context = context\r\n                            } else {\r\n                                column[calculateCallbackName].context.column = column\r\n                            }\r\n                        }\r\n                    }));\r\n                    if (isString(column.calculateDisplayValue)) {\r\n                        column.displayField = column.calculateDisplayValue;\r\n                        column.calculateDisplayValue = compileGetter(column.displayField)\r\n                    }\r\n                    if (column.calculateDisplayValue) {\r\n                        column.displayValueMap = column.displayValueMap || {}\r\n                    }\r\n                    updateSerializers(column, column.dataType);\r\n                    var lookup = column.lookup;\r\n                    if (lookup) {\r\n                        updateSerializers(lookup, lookup.dataType)\r\n                    }\r\n                    var dataType = lookup ? lookup.dataType : column.dataType;\r\n                    if (dataType) {\r\n                        column.alignment = column.alignment || function(dataType, isRTL) {\r\n                            switch (dataType) {\r\n                                case \"number\":\r\n                                    return \"right\";\r\n                                case \"boolean\":\r\n                                    return \"center\";\r\n                                default:\r\n                                    return getDefaultAlignment(isRTL)\r\n                            }\r\n                        }(dataType, this.option(\"rtlEnabled\"));\r\n                        column.format = column.format || gridCoreUtils.getFormatByDataType(dataType);\r\n                        column.customizeText = column.customizeText || getCustomizeTextByDataType(dataType);\r\n                        column.defaultFilterOperations = column.defaultFilterOperations || !lookup && DATATYPE_OPERATIONS[dataType] || [];\r\n                        if (!isDefined(column.filterOperations)) {\r\n                            setFilterOperationsAsDefaultValues(column)\r\n                        }\r\n                        column.defaultFilterOperation = column.filterOperations && column.filterOperations[0] || \"=\";\r\n                        column.showEditorAlways = isDefined(column.showEditorAlways) ? column.showEditorAlways : \"boolean\" === dataType && !column.cellTemplate && !column.lookup\r\n                    }\r\n                },\r\n                updateColumnDataTypes: function(dataSource) {\r\n                    var that = this;\r\n                    var dateSerializationFormat = that.option(\"dateSerializationFormat\");\r\n                    var firstItems = that._getFirstItems(dataSource);\r\n                    var isColumnDataTypesUpdated = false;\r\n                    each(that._columns, (function(index, column) {\r\n                        var i;\r\n                        var value;\r\n                        var dataType;\r\n                        var lookupDataType;\r\n                        var valueDataType;\r\n                        var lookup = column.lookup;\r\n                        if (gridCoreUtils.isDateType(column.dataType) && void 0 === column.serializationFormat) {\r\n                            column.serializationFormat = dateSerializationFormat\r\n                        }\r\n                        if (lookup && gridCoreUtils.isDateType(lookup.dataType) && void 0 === column.serializationFormat) {\r\n                            lookup.serializationFormat = dateSerializationFormat\r\n                        }\r\n                        if (column.calculateCellValue && firstItems.length) {\r\n                            if (!column.dataType || lookup && !lookup.dataType) {\r\n                                for (i = 0; i < firstItems.length; i++) {\r\n                                    value = column.calculateCellValue(firstItems[i]);\r\n                                    if (!column.dataType) {\r\n                                        valueDataType = getValueDataType(value);\r\n                                        dataType = dataType || valueDataType;\r\n                                        if (dataType && valueDataType && dataType !== valueDataType) {\r\n                                            dataType = \"string\"\r\n                                        }\r\n                                    }\r\n                                    if (lookup && !lookup.dataType) {\r\n                                        valueDataType = getValueDataType(gridCoreUtils.getDisplayValue(column, value, firstItems[i]));\r\n                                        lookupDataType = lookupDataType || valueDataType;\r\n                                        if (lookupDataType && valueDataType && lookupDataType !== valueDataType) {\r\n                                            lookupDataType = \"string\"\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (dataType || lookupDataType) {\r\n                                    if (dataType) {\r\n                                        column.dataType = dataType\r\n                                    }\r\n                                    if (lookup && lookupDataType) {\r\n                                        lookup.dataType = lookupDataType\r\n                                    }\r\n                                    isColumnDataTypesUpdated = true\r\n                                }\r\n                            }\r\n                            if (void 0 === column.serializationFormat || lookup && void 0 === lookup.serializationFormat) {\r\n                                for (i = 0; i < firstItems.length; i++) {\r\n                                    value = column.calculateCellValue(firstItems[i], true);\r\n                                    if (void 0 === column.serializationFormat) {\r\n                                        column.serializationFormat = getSerializationFormat(column.dataType, value)\r\n                                    }\r\n                                    if (lookup && void 0 === lookup.serializationFormat) {\r\n                                        lookup.serializationFormat = getSerializationFormat(lookup.dataType, lookup.calculateCellValue(value, true))\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        that._updateColumnOptions(column, index)\r\n                    }));\r\n                    return isColumnDataTypesUpdated\r\n                },\r\n                _customizeColumns: function(columns) {\r\n                    var customizeColumns = this.option(\"customizeColumns\");\r\n                    if (customizeColumns) {\r\n                        var hasOwnerBand = columns.some((function(column) {\r\n                            return isObject(column.ownerBand)\r\n                        }));\r\n                        if (hasOwnerBand) {\r\n                            updateIndexes(this)\r\n                        }\r\n                        customizeColumns(columns);\r\n                        assignColumns(this, createColumnsFromOptions(this, columns))\r\n                    }\r\n                },\r\n                updateColumns: function(dataSource, forceApplying, isApplyingUserState) {\r\n                    if (!forceApplying) {\r\n                        this.updateSortingGrouping(dataSource)\r\n                    }\r\n                    if (!dataSource || dataSource.isLoaded()) {\r\n                        var sortParameters = dataSource ? dataSource.sort() || [] : this.getSortDataSourceParameters();\r\n                        var groupParameters = dataSource ? dataSource.group() || [] : this.getGroupDataSourceParameters();\r\n                        var filterParameters = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().filter;\r\n                        if (!isApplyingUserState) {\r\n                            this._customizeColumns(this._columns)\r\n                        }\r\n                        updateIndexes(this);\r\n                        var columns = this._columns;\r\n                        return when(this.refresh(true)).always(() => {\r\n                            if (this._columns !== columns) {\r\n                                return\r\n                            }\r\n                            this._updateChanges(dataSource, {\r\n                                sorting: sortParameters,\r\n                                grouping: groupParameters,\r\n                                filtering: filterParameters\r\n                            });\r\n                            fireColumnsChanged(this)\r\n                        })\r\n                    }\r\n                },\r\n                _updateChanges: function(dataSource, parameters) {\r\n                    if (dataSource) {\r\n                        this.updateColumnDataTypes(dataSource);\r\n                        this._dataSourceApplied = true\r\n                    }\r\n                    if (!gridCoreUtils.equalSortParameters(parameters.sorting, this.getSortDataSourceParameters())) {\r\n                        updateColumnChanges(this, \"sorting\")\r\n                    }\r\n                    if (!gridCoreUtils.equalSortParameters(parameters.grouping, this.getGroupDataSourceParameters())) {\r\n                        updateColumnChanges(this, \"grouping\")\r\n                    }\r\n                    var dataController = this.getController(\"data\");\r\n                    if (dataController && !gridCoreUtils.equalFilterParameters(parameters.filtering, dataController.getCombinedFilter())) {\r\n                        updateColumnChanges(this, \"filtering\")\r\n                    }\r\n                    updateColumnChanges(this, \"columns\")\r\n                },\r\n                updateSortingGrouping: function(dataSource, fromDataSource) {\r\n                    var that = this;\r\n                    var sortParameters;\r\n                    var isColumnsChanged;\r\n                    var updateSortGroupParameterIndexes = function(columns, sortParameters, indexParameterName) {\r\n                        each(columns, (function(index, column) {\r\n                            delete column[indexParameterName];\r\n                            if (sortParameters) {\r\n                                for (var i = 0; i < sortParameters.length; i++) {\r\n                                    var selector = sortParameters[i].selector;\r\n                                    var isExpanded = sortParameters[i].isExpanded;\r\n                                    if (selector === column.dataField || selector === column.name || selector === column.selector || selector === column.calculateCellValue || selector === column.calculateGroupValue || selector === column.calculateDisplayValue) {\r\n                                        if (fromDataSource) {\r\n                                            column.sortOrder = \"sortOrder\" in column ? column.sortOrder : sortParameters[i].desc ? \"desc\" : \"asc\"\r\n                                        } else {\r\n                                            column.sortOrder = column.sortOrder || (sortParameters[i].desc ? \"desc\" : \"asc\")\r\n                                        }\r\n                                        if (void 0 !== isExpanded) {\r\n                                            column.autoExpandGroup = isExpanded\r\n                                        }\r\n                                        column[indexParameterName] = i;\r\n                                        break\r\n                                    }\r\n                                }\r\n                            }\r\n                        }))\r\n                    };\r\n                    if (dataSource) {\r\n                        sortParameters = gridCoreUtils.normalizeSortingInfo(dataSource.sort());\r\n                        var groupParameters = gridCoreUtils.normalizeSortingInfo(dataSource.group());\r\n                        var columnsGroupParameters = that.getGroupDataSourceParameters();\r\n                        var columnsSortParameters = that.getSortDataSourceParameters();\r\n                        var groupingChanged = !gridCoreUtils.equalSortParameters(groupParameters, columnsGroupParameters, true);\r\n                        var groupExpandingChanged = !groupingChanged && !gridCoreUtils.equalSortParameters(groupParameters, columnsGroupParameters);\r\n                        if (!that._columns.length) {\r\n                            each(groupParameters, (function(index, group) {\r\n                                that._columns.push(group.selector)\r\n                            }));\r\n                            each(sortParameters, (function(index, sort) {\r\n                                if (!isFunction(sort.selector)) {\r\n                                    that._columns.push(sort.selector)\r\n                                }\r\n                            }));\r\n                            assignColumns(that, createColumnsFromOptions(that, that._columns))\r\n                        }\r\n                        if ((fromDataSource || !columnsGroupParameters && !that._hasUserState) && (groupingChanged || groupExpandingChanged)) {\r\n                            updateSortGroupParameterIndexes(that._columns, groupParameters, \"groupIndex\");\r\n                            if (fromDataSource) {\r\n                                groupingChanged && updateColumnChanges(that, \"grouping\");\r\n                                groupExpandingChanged && updateColumnChanges(that, \"groupExpanding\");\r\n                                isColumnsChanged = true\r\n                            }\r\n                        }\r\n                        if ((fromDataSource || !columnsSortParameters && !that._hasUserState) && !gridCoreUtils.equalSortParameters(sortParameters, columnsSortParameters)) {\r\n                            updateSortGroupParameterIndexes(that._columns, sortParameters, \"sortIndex\");\r\n                            if (fromDataSource) {\r\n                                updateColumnChanges(that, \"sorting\");\r\n                                isColumnsChanged = true\r\n                            }\r\n                        }\r\n                        if (isColumnsChanged) {\r\n                            fireColumnsChanged(that)\r\n                        }\r\n                    }\r\n                },\r\n                updateFilter: function(filter, remoteFiltering, columnIndex, filterValue) {\r\n                    if (!Array.isArray(filter)) {\r\n                        return filter\r\n                    }\r\n                    filter = extend([], filter);\r\n                    columnIndex = void 0 !== filter.columnIndex ? filter.columnIndex : columnIndex;\r\n                    filterValue = void 0 !== filter.filterValue ? filter.filterValue : filterValue;\r\n                    if (isString(filter[0]) && \"!\" !== filter[0]) {\r\n                        var column = this.columnOption(filter[0]);\r\n                        if (remoteFiltering) {\r\n                            if (config().forceIsoDateParsing && column && column.serializeValue && filter.length > 1) {\r\n                                filter[filter.length - 1] = column.serializeValue(filter[filter.length - 1], \"filter\")\r\n                            }\r\n                        } else if (column && column.selector) {\r\n                            filter[0] = column.selector;\r\n                            filter[0].columnIndex = column.index\r\n                        }\r\n                    } else if (isFunction(filter[0])) {\r\n                        filter[0].columnIndex = columnIndex;\r\n                        filter[0].filterValue = filterValue\r\n                    }\r\n                    for (var i = 0; i < filter.length; i++) {\r\n                        filter[i] = this.updateFilter(filter[i], remoteFiltering, columnIndex, filterValue)\r\n                    }\r\n                    return filter\r\n                },\r\n                columnCount: function() {\r\n                    return this._columns ? this._columns.length : 0\r\n                },\r\n                columnOption: function(identifier, option, value, notFireEvent) {\r\n                    var that = this;\r\n                    var columns = that._columns.concat(that._commandColumns);\r\n                    var column = findColumn(columns, identifier);\r\n                    if (column) {\r\n                        if (1 === arguments.length) {\r\n                            return extend({}, column)\r\n                        }\r\n                        if (isString(option)) {\r\n                            if (2 === arguments.length) {\r\n                                return columnOptionCore(that, column, option)\r\n                            } else {\r\n                                columnOptionCore(that, column, option, value, notFireEvent)\r\n                            }\r\n                        } else if (isObject(option)) {\r\n                            each(option, (function(optionName, value) {\r\n                                columnOptionCore(that, column, optionName, value, notFireEvent)\r\n                            }))\r\n                        }\r\n                        fireColumnsChanged(that)\r\n                    }\r\n                },\r\n                clearSorting: function() {\r\n                    var columnCount = this.columnCount();\r\n                    this.beginUpdate();\r\n                    for (var i = 0; i < columnCount; i++) {\r\n                        this.columnOption(i, \"sortOrder\", void 0)\r\n                    }\r\n                    this.endUpdate()\r\n                },\r\n                clearGrouping: function() {\r\n                    var columnCount = this.columnCount();\r\n                    this.beginUpdate();\r\n                    for (var i = 0; i < columnCount; i++) {\r\n                        this.columnOption(i, \"groupIndex\", void 0)\r\n                    }\r\n                    this.endUpdate()\r\n                },\r\n                getVisibleIndex: function(index, rowIndex) {\r\n                    var columns = this.getVisibleColumns(rowIndex);\r\n                    for (var i = columns.length - 1; i >= 0; i--) {\r\n                        if (columns[i].index === index) {\r\n                            return i\r\n                        }\r\n                    }\r\n                    return -1\r\n                },\r\n                getVisibleIndexByColumn: function(column, rowIndex) {\r\n                    var visibleColumns = this.getVisibleColumns(rowIndex);\r\n                    var visibleColumn = visibleColumns.filter(col => col.index === column.index && col.command === column.command)[0];\r\n                    return visibleColumns.indexOf(visibleColumn)\r\n                },\r\n                getVisibleColumnIndex: function(id, rowIndex) {\r\n                    var index = this.columnOption(id, \"index\");\r\n                    return this.getVisibleIndex(index, rowIndex)\r\n                },\r\n                addColumn: function(options) {\r\n                    var column = createColumn(this, options);\r\n                    var index = this._columns.length;\r\n                    this._columns.push(column);\r\n                    if (column.isBand) {\r\n                        this._columns = createColumnsFromOptions(this, this._columns);\r\n                        column = this._columns[index]\r\n                    }\r\n                    column.added = options;\r\n                    updateIndexes(this, column);\r\n                    this.updateColumns(this._dataSource);\r\n                    this._checkColumns()\r\n                },\r\n                deleteColumn: function(id) {\r\n                    var column = this.columnOption(id);\r\n                    if (column && column.index >= 0) {\r\n                        columns = this._columns, void columns.forEach(column => {\r\n                            if (isDefined(column.ownerBand)) {\r\n                                column.ownerBand = columns[column.ownerBand]\r\n                            }\r\n                        });\r\n                        this._columns.splice(column.index, 1);\r\n                        if (column.isBand) {\r\n                            var childIndexes = this.getChildrenByBandColumn(column.index).map(column => column.index);\r\n                            this._columns = this._columns.filter(column => childIndexes.indexOf(column.index) < 0)\r\n                        }\r\n                        updateIndexes(this);\r\n                        this.updateColumns(this._dataSource)\r\n                    }\r\n                    var columns\r\n                },\r\n                addCommandColumn: function(options) {\r\n                    var commandColumn = this._commandColumns.filter(column => column.command === options.command)[0];\r\n                    if (!commandColumn) {\r\n                        commandColumn = options;\r\n                        this._commandColumns.push(commandColumn)\r\n                    }\r\n                },\r\n                getUserState: function() {\r\n                    var columns = this._columns;\r\n                    var result = [];\r\n                    var i;\r\n\r\n                    function handleStateField(index, value) {\r\n                        if (void 0 !== columns[i][value]) {\r\n                            result[i][value] = columns[i][value]\r\n                        }\r\n                    }\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        result[i] = {};\r\n                        each(USER_STATE_FIELD_NAMES, handleStateField)\r\n                    }\r\n                    return result\r\n                },\r\n                setName: function(column) {\r\n                    column.name = column.name || column.dataField || column.type\r\n                },\r\n                setUserState: function(state) {\r\n                    var dataSource = this._dataSource;\r\n                    var ignoreColumnOptionNames = this.option(\"stateStoring.ignoreColumnOptionNames\");\r\n                    null === state || void 0 === state ? void 0 : state.forEach(this.setName);\r\n                    if (!ignoreColumnOptionNames) {\r\n                        ignoreColumnOptionNames = [];\r\n                        var commonColumnSettings = this.getCommonSettings();\r\n                        if (!this.option(\"columnChooser.enabled\")) {\r\n                            ignoreColumnOptionNames.push(\"visible\")\r\n                        }\r\n                        if (\"none\" === this.option(\"sorting.mode\")) {\r\n                            ignoreColumnOptionNames.push(\"sortIndex\", \"sortOrder\")\r\n                        }\r\n                        if (!commonColumnSettings.allowGrouping) {\r\n                            ignoreColumnOptionNames.push(\"groupIndex\")\r\n                        }\r\n                        if (!commonColumnSettings.allowFixing) {\r\n                            ignoreColumnOptionNames.push(\"fixed\", \"fixedPosition\")\r\n                        }\r\n                        if (!commonColumnSettings.allowResizing) {\r\n                            ignoreColumnOptionNames.push(\"width\", \"visibleWidth\")\r\n                        }\r\n                        var isFilterPanelHidden = !this.option(\"filterPanel.visible\");\r\n                        if (!this.option(\"filterRow.visible\") && isFilterPanelHidden) {\r\n                            ignoreColumnOptionNames.push(\"filterValue\", \"selectedFilterOperation\")\r\n                        }\r\n                        if (!this.option(\"headerFilter.visible\") && isFilterPanelHidden) {\r\n                            ignoreColumnOptionNames.push(\"filterValues\", \"filterType\")\r\n                        }\r\n                    }\r\n                    this._columnsUserState = state;\r\n                    this._ignoreColumnOptionNames = ignoreColumnOptionNames;\r\n                    this._hasUserState = !!state;\r\n                    updateColumnChanges(this, \"filtering\");\r\n                    this.init(true);\r\n                    if (dataSource) {\r\n                        dataSource.sort(this.getSortDataSourceParameters());\r\n                        dataSource.group(this.getGroupDataSourceParameters())\r\n                    }\r\n                },\r\n                _checkColumns: function() {\r\n                    var usedNames = {};\r\n                    var hasEditableColumnWithoutName = false;\r\n                    var duplicatedNames = [];\r\n                    this._columns.forEach(column => {\r\n                        var _column$columns;\r\n                        var name = column.name;\r\n                        var isBand = null === (_column$columns = column.columns) || void 0 === _column$columns ? void 0 : _column$columns.length;\r\n                        var isEditable = column.allowEditing && (column.dataField || column.setCellValue) && !isBand;\r\n                        if (name) {\r\n                            if (usedNames[name]) {\r\n                                duplicatedNames.push('\"'.concat(name, '\"'))\r\n                            }\r\n                            usedNames[name] = true\r\n                        } else if (isEditable) {\r\n                            hasEditableColumnWithoutName = true\r\n                        }\r\n                    });\r\n                    if (duplicatedNames.length) {\r\n                        errors.log(\"E1059\", duplicatedNames.join(\", \"))\r\n                    }\r\n                    if (hasEditableColumnWithoutName) {\r\n                        errors.log(\"E1060\")\r\n                    }\r\n                },\r\n                _createCalculatedColumnOptions: function(columnOptions, bandColumn) {\r\n                    var calculatedColumnOptions = {};\r\n                    var dataField = columnOptions.dataField;\r\n                    if (Array.isArray(columnOptions.columns) && columnOptions.columns.length || columnOptions.isBand) {\r\n                        calculatedColumnOptions.isBand = true;\r\n                        dataField = null\r\n                    }\r\n                    if (dataField) {\r\n                        if (isString(dataField)) {\r\n                            var getter = compileGetter(dataField);\r\n                            calculatedColumnOptions = {\r\n                                caption: captionize(dataField),\r\n                                calculateCellValue: function(data, skipDeserialization) {\r\n                                    var value = getter(data);\r\n                                    return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value\r\n                                },\r\n                                setCellValue: defaultSetCellValue,\r\n                                parseValue: function(text) {\r\n                                    var result;\r\n                                    var parsedValue;\r\n                                    if (\"number\" === this.dataType) {\r\n                                        if (isString(text) && this.format) {\r\n                                            result = function(text, format) {\r\n                                                var parsedValue = numberLocalization.parse(text);\r\n                                                if (isNumeric(parsedValue)) {\r\n                                                    var formattedValue = numberLocalization.format(parsedValue, format);\r\n                                                    var formattedValueWithDefaultFormat = numberLocalization.format(parsedValue, \"decimal\");\r\n                                                    if (formattedValue === text || formattedValueWithDefaultFormat === text) {\r\n                                                        return parsedValue\r\n                                                    }\r\n                                                }\r\n                                            }(text.trim(), this.format)\r\n                                        } else if (isDefined(text) && isNumeric(text)) {\r\n                                            result = Number(text)\r\n                                        }\r\n                                    } else if (\"boolean\" === this.dataType) {\r\n                                        if (text === this.trueText) {\r\n                                            result = true\r\n                                        } else if (text === this.falseText) {\r\n                                            result = false\r\n                                        }\r\n                                    } else if (gridCoreUtils.isDateType(this.dataType)) {\r\n                                        parsedValue = dateLocalization.parse(text, this.format);\r\n                                        if (parsedValue) {\r\n                                            result = parsedValue\r\n                                        }\r\n                                    } else {\r\n                                        result = text\r\n                                    }\r\n                                    return result\r\n                                }\r\n                            }\r\n                        }\r\n                        calculatedColumnOptions.allowFiltering = true\r\n                    } else {\r\n                        calculatedColumnOptions.allowFiltering = !!columnOptions.calculateFilterExpression\r\n                    }\r\n                    calculatedColumnOptions.calculateFilterExpression = function() {\r\n                        return filterUtils.defaultCalculateFilterExpression.apply(this, arguments)\r\n                    };\r\n                    calculatedColumnOptions.defaultFilterOperation = \"=\";\r\n                    calculatedColumnOptions.createFilterExpression = function(filterValue) {\r\n                        var result;\r\n                        if (this.calculateFilterExpression) {\r\n                            result = this.calculateFilterExpression.apply(this, arguments)\r\n                        }\r\n                        if (isFunction(result)) {\r\n                            result = [result, \"=\", true]\r\n                        }\r\n                        if (result) {\r\n                            result.columnIndex = this.index;\r\n                            result.filterValue = filterValue\r\n                        }\r\n                        return result\r\n                    };\r\n                    if (!dataField || !isString(dataField)) {\r\n                        extend(true, calculatedColumnOptions, {\r\n                            allowSorting: false,\r\n                            allowGrouping: false,\r\n                            calculateCellValue: function() {\r\n                                return null\r\n                            }\r\n                        })\r\n                    }\r\n                    if (bandColumn) {\r\n                        calculatedColumnOptions.allowFixing = false\r\n                    }\r\n                    if (columnOptions.dataType) {\r\n                        calculatedColumnOptions.userDataType = columnOptions.dataType\r\n                    }\r\n                    if (columnOptions.selectedFilterOperation && !(\"defaultSelectedFilterOperation\" in calculatedColumnOptions)) {\r\n                        calculatedColumnOptions.defaultSelectedFilterOperation = columnOptions.selectedFilterOperation\r\n                    }\r\n                    if (columnOptions.lookup) {\r\n                        calculatedColumnOptions.lookup = {\r\n                            calculateCellValue: function(value, skipDeserialization) {\r\n                                if (this.valueExpr) {\r\n                                    value = this.valueMap && this.valueMap[value]\r\n                                }\r\n                                return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value\r\n                            },\r\n                            updateValueMap: function() {\r\n                                this.valueMap = {};\r\n                                if (this.items) {\r\n                                    var calculateValue = compileGetter(this.valueExpr);\r\n                                    var calculateDisplayValue = compileGetter(this.displayExpr);\r\n                                    for (var i = 0; i < this.items.length; i++) {\r\n                                        var item = this.items[i];\r\n                                        var displayValue = calculateDisplayValue(item);\r\n                                        this.valueMap[calculateValue(item)] = displayValue;\r\n                                        this.dataType = this.dataType || getValueDataType(displayValue)\r\n                                    }\r\n                                }\r\n                            },\r\n                            update: function() {\r\n                                var that = this;\r\n                                var dataSource = that.dataSource;\r\n                                if (dataSource) {\r\n                                    if (isFunction(dataSource) && !variableWrapper.isWrapped(dataSource)) {\r\n                                        dataSource = dataSource({})\r\n                                    }\r\n                                    if (isPlainObject(dataSource) || dataSource instanceof Store || Array.isArray(dataSource)) {\r\n                                        if (that.valueExpr) {\r\n                                            var dataSourceOptions = normalizeDataSourceOptions(dataSource);\r\n                                            dataSourceOptions.paginate = false;\r\n                                            dataSource = new DataSource(dataSourceOptions);\r\n                                            return dataSource.load().done((function(data) {\r\n                                                that.items = data;\r\n                                                that.updateValueMap && that.updateValueMap()\r\n                                            }))\r\n                                        }\r\n                                    } else {\r\n                                        errors.log(\"E1016\")\r\n                                    }\r\n                                } else {\r\n                                    that.updateValueMap && that.updateValueMap()\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    calculatedColumnOptions.resizedCallbacks = Callbacks();\r\n                    if (columnOptions.resized) {\r\n                        calculatedColumnOptions.resizedCallbacks.add(columnOptions.resized.bind(columnOptions))\r\n                    }\r\n                    each(calculatedColumnOptions, (function(optionName) {\r\n                        if (isFunction(calculatedColumnOptions[optionName]) && 0 !== optionName.indexOf(\"default\")) {\r\n                            var defaultOptionName = \"default\" + optionName.charAt(0).toUpperCase() + optionName.substr(1);\r\n                            calculatedColumnOptions[defaultOptionName] = calculatedColumnOptions[optionName]\r\n                        }\r\n                    }));\r\n                    return calculatedColumnOptions\r\n                },\r\n                getRowCount: function() {\r\n                    this._rowCount = this._rowCount || function(that) {\r\n                        var rowCount = 1;\r\n                        var bandColumnsCache = that.getBandColumnsCache();\r\n                        var columnParentByIndex = bandColumnsCache.columnParentByIndex;\r\n                        that._columns.forEach((function(column) {\r\n                            var parents = getParentBandColumns(column.index, columnParentByIndex);\r\n                            var invisibleParents = parents.filter((function(column) {\r\n                                return !column.visible\r\n                            }));\r\n                            if (column.visible && !invisibleParents.length) {\r\n                                rowCount = Math.max(rowCount, parents.length + 1)\r\n                            }\r\n                        }));\r\n                        return rowCount\r\n                    }(this);\r\n                    return this._rowCount\r\n                },\r\n                getRowIndex: function(columnIndex, alwaysGetRowIndex) {\r\n                    var column = this._columns[columnIndex];\r\n                    var bandColumnsCache = this.getBandColumnsCache();\r\n                    return column && (alwaysGetRowIndex || column.visible && !(column.command || isDefined(column.groupIndex))) ? getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex).length : 0\r\n                },\r\n                getChildrenByBandColumn: function(bandColumnIndex, onlyVisibleDirectChildren) {\r\n                    var bandColumnsCache = this.getBandColumnsCache();\r\n                    var result = _getChildrenByBandColumn(bandColumnIndex, bandColumnsCache.columnChildrenByIndex, !onlyVisibleDirectChildren);\r\n                    if (onlyVisibleDirectChildren) {\r\n                        return result.filter((function(column) {\r\n                            return column.visible && !column.command\r\n                        })).sort((function(column1, column2) {\r\n                            return column1.visibleIndex - column2.visibleIndex\r\n                        }))\r\n                    }\r\n                    return result\r\n                },\r\n                isParentBandColumn: function(columnIndex, bandColumnIndex) {\r\n                    var result = false;\r\n                    var column = this._columns[columnIndex];\r\n                    var bandColumnsCache = this.getBandColumnsCache();\r\n                    var parentBandColumns = column && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\r\n                    if (parentBandColumns) {\r\n                        each(parentBandColumns, (function(_, bandColumn) {\r\n                            if (bandColumn.index === bandColumnIndex) {\r\n                                result = true;\r\n                                return false\r\n                            }\r\n                        }))\r\n                    }\r\n                    return result\r\n                },\r\n                isParentColumnVisible: function(columnIndex) {\r\n                    var result = true;\r\n                    var bandColumnsCache = this.getBandColumnsCache();\r\n                    var bandColumns = columnIndex >= 0 && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\r\n                    bandColumns && each(bandColumns, (function(_, bandColumn) {\r\n                        result = result && bandColumn.visible;\r\n                        return result\r\n                    }));\r\n                    return result\r\n                },\r\n                getColumnId: function(column) {\r\n                    if (column.command && column.type === GROUP_COMMAND_COLUMN_NAME) {\r\n                        if (isCustomCommandColumn(this, column)) {\r\n                            return \"type:\" + column.type\r\n                        }\r\n                        return \"command:\" + column.command\r\n                    }\r\n                    return column.index\r\n                },\r\n                getCustomizeTextByDataType: getCustomizeTextByDataType,\r\n                getHeaderContentAlignment: function(columnAlignment) {\r\n                    var rtlEnabled = this.option(\"rtlEnabled\");\r\n                    if (rtlEnabled) {\r\n                        return \"left\" === columnAlignment ? \"right\" : \"left\"\r\n                    }\r\n                    return columnAlignment\r\n                }\r\n            };\r\n            return members\r\n        }())\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}