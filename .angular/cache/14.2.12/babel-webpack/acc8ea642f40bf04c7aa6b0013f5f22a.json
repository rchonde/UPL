{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.data_controller.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport modules from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport ArrayStore from \"../../data/array_store\";\nimport CustomStore from \"../../data/custom_store\";\nimport errors from \"../widget/ui.errors\";\nimport { noop, deferRender, equalByValue } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport DataHelperMixin from \"../../data_helper\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport { findChanges } from \"../../core/utils/array_compare\";\nexport var dataControllerModule = {\n  defaultOptions: function () {\n    return {\n      loadingTimeout: 0,\n      dataSource: null,\n      cacheEnabled: true,\n      repaintChangesOnly: false,\n      highlightChanges: false,\n      onDataErrorOccurred: null,\n      remoteOperations: \"auto\",\n      paging: {\n        enabled: true,\n        pageSize: void 0,\n        pageIndex: void 0\n      }\n    };\n  },\n  controllers: {\n    data: modules.Controller.inherit({}).include(DataHelperMixin).inherit(function () {\n      var changePaging = function (that, optionName, value) {\n        var dataSource = that._dataSource;\n\n        if (dataSource) {\n          if (void 0 !== value) {\n            var oldValue = that._getPagingOptionValue(optionName);\n\n            if (oldValue !== value) {\n              if (\"pageSize\" === optionName) {\n                dataSource.pageIndex(0);\n              }\n\n              dataSource[optionName](value);\n              that._skipProcessingPagingChange = true;\n              that.option(\"paging.\" + optionName, value);\n              that._skipProcessingPagingChange = false;\n              var pageIndex = dataSource.pageIndex();\n              that._isPaging = \"pageIndex\" === optionName;\n              return dataSource[\"pageIndex\" === optionName ? \"load\" : \"reload\"]().done(() => {\n                that._isPaging = false;\n                that.pageChanged.fire(pageIndex);\n              });\n            }\n\n            return Deferred().resolve().promise();\n          }\n\n          return dataSource[optionName]();\n        }\n\n        return 0;\n      };\n\n      var members = {\n        init: function () {\n          var that = this;\n          that._items = [];\n          that._cachedProcessedItems = null;\n          that._columnsController = that.getController(\"columns\");\n          that._isPaging = false;\n          that._currentOperationTypes = null;\n\n          that._dataChangedHandler = e => {\n            that._currentOperationTypes = this._dataSource.operationTypes();\n\n            that._handleDataChanged(e);\n\n            that._currentOperationTypes = null;\n          };\n\n          that._columnsChangedHandler = that._handleColumnsChanged.bind(that);\n          that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\n          that._loadErrorHandler = that._handleLoadError.bind(that);\n          that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);\n          that._changingHandler = that._handleChanging.bind(that);\n          that._dataPushedHandler = that._handleDataPushed.bind(that);\n\n          that._columnsController.columnsChanged.add(that._columnsChangedHandler);\n\n          that._isLoading = false;\n          that._isCustomLoading = false;\n          that._repaintChangesOnly = void 0;\n          that._changes = [];\n          that.createAction(\"onDataErrorOccurred\");\n          that.dataErrorOccurred.add(function (error) {\n            return that.executeAction(\"onDataErrorOccurred\", {\n              error: error\n            });\n          });\n\n          that._refreshDataSource();\n        },\n        _getPagingOptionValue: function (optionName) {\n          return this._dataSource[optionName]();\n        },\n        callbackNames: function () {\n          return [\"changed\", \"loadingChanged\", \"dataErrorOccurred\", \"pageChanged\", \"dataSourceChanged\", \"pushed\"];\n        },\n        callbackFlags: function (name) {\n          if (\"dataErrorOccurred\" === name) {\n            return {\n              stopOnFalse: true\n            };\n          }\n        },\n        publicMethods: function () {\n          return [\"beginCustomLoading\", \"endCustomLoading\", \"refresh\", \"filter\", \"clearFilter\", \"getCombinedFilter\", \"keyOf\", \"byKey\", \"getDataByKeys\", \"pageIndex\", \"pageSize\", \"pageCount\", \"totalCount\", \"_disposeDataSource\", \"getKeyByRowIndex\", \"getRowIndexByKey\", \"getDataSource\", \"getVisibleRows\", \"repaintRows\"];\n        },\n        reset: function () {\n          this._columnsController.reset();\n\n          this._items = [];\n\n          this._refreshDataSource();\n        },\n\n        _handleDataSourceChange(args) {\n          if (args.value === args.previousValue || this.option(\"columns\") && Array.isArray(args.value) && Array.isArray(args.previousValue)) {\n            var isValueChanged = args.value !== args.previousValue;\n\n            if (isValueChanged) {\n              var store = this.store();\n\n              if (store) {\n                store._array = args.value;\n              }\n            }\n\n            if (this.needToRefreshOnDataSourceChange(args)) {\n              this.refresh(this.option(\"repaintChangesOnly\"));\n            }\n\n            return true;\n          }\n\n          return false;\n        },\n\n        needToRefreshOnDataSourceChange: function (args) {\n          return true;\n        },\n        optionChanged: function (args) {\n          var that = this;\n          var dataSource;\n          var changedPagingOptions;\n\n          function handled() {\n            args.handled = true;\n          }\n\n          if (\"dataSource\" === args.name && args.name === args.fullName && this._handleDataSourceChange(args)) {\n            handled();\n            return;\n          }\n\n          switch (args.name) {\n            case \"cacheEnabled\":\n            case \"repaintChangesOnly\":\n            case \"highlightChanges\":\n            case \"loadingTimeout\":\n              handled();\n              break;\n\n            case \"remoteOperations\":\n            case \"keyExpr\":\n            case \"dataSource\":\n            case \"scrolling\":\n              handled();\n              that.reset();\n              break;\n\n            case \"paging\":\n              dataSource = that.dataSource();\n\n              if (dataSource) {\n                changedPagingOptions = that._setPagingOptions(dataSource);\n\n                if (changedPagingOptions) {\n                  var pageIndex = dataSource.pageIndex();\n                  this._isPaging = changedPagingOptions.isPageIndexChanged;\n                  dataSource.load().done(() => {\n                    this._isPaging = false;\n                    that.pageChanged.fire(pageIndex);\n                  });\n                }\n              }\n\n              handled();\n              break;\n\n            case \"rtlEnabled\":\n              that.reset();\n              break;\n\n            case \"columns\":\n              dataSource = that.dataSource();\n\n              if (dataSource && dataSource.isLoading() && args.name === args.fullName) {\n                this._useSortingGroupingFromColumns = true;\n                dataSource.load();\n              }\n\n              break;\n\n            default:\n              that.callBase(args);\n          }\n        },\n        isReady: function () {\n          return !this._isLoading;\n        },\n        getDataSource: function () {\n          return this._dataSource && this._dataSource._dataSource;\n        },\n        getCombinedFilter: function (returnDataField) {\n          return this.combinedFilter(void 0, returnDataField);\n        },\n        combinedFilter: function (filter, returnDataField) {\n          var dataSource = this._dataSource;\n          var columnsController = this._columnsController;\n\n          if (dataSource) {\n            if (void 0 === filter) {\n              filter = dataSource.filter();\n            }\n\n            var additionalFilter = this._calculateAdditionalFilter();\n\n            if (additionalFilter) {\n              if (columnsController.isDataSourceApplied() || columnsController.isAllDataTypesDefined()) {\n                filter = gridCoreUtils.combineFilters([additionalFilter, filter]);\n              }\n            }\n\n            filter = columnsController.updateFilter(filter, returnDataField || dataSource.remoteOperations().filtering);\n          }\n\n          return filter;\n        },\n        waitReady: function () {\n          if (this._updateLockCount) {\n            this._readyDeferred = new Deferred();\n            return this._readyDeferred;\n          }\n\n          return when();\n        },\n        _endUpdateCore: function () {\n          var changes = this._changes;\n\n          if (changes.length) {\n            this._changes = [];\n            var repaintChangesOnly = changes.every(change => change.repaintChangesOnly);\n            this.updateItems(1 === changes.length ? changes[0] : {\n              repaintChangesOnly: repaintChangesOnly\n            });\n          }\n\n          if (this._readyDeferred) {\n            this._readyDeferred.resolve();\n\n            this._readyDeferred = null;\n          }\n        },\n        _handleCustomizeStoreLoadOptions: function (e) {\n          var _storeLoadOptions$fil;\n\n          var columnsController = this._columnsController;\n          var dataSource = this._dataSource;\n          var storeLoadOptions = e.storeLoadOptions;\n\n          if (e.isCustomLoading && !storeLoadOptions.isLoadingAll) {\n            return;\n          }\n\n          storeLoadOptions.filter = this.combinedFilter(storeLoadOptions.filter);\n\n          if (1 === (null === (_storeLoadOptions$fil = storeLoadOptions.filter) || void 0 === _storeLoadOptions$fil ? void 0 : _storeLoadOptions$fil.length) && \"!\" === storeLoadOptions.filter[0]) {\n            e.data = [];\n            e.extra = e.extra || {};\n            e.extra.totalCount = 0;\n          }\n\n          if (!columnsController.isDataSourceApplied()) {\n            columnsController.updateColumnDataTypes(dataSource);\n          }\n\n          this._columnsUpdating = true;\n          columnsController.updateSortingGrouping(dataSource, !this._useSortingGroupingFromColumns);\n          this._columnsUpdating = false;\n          storeLoadOptions.sort = columnsController.getSortDataSourceParameters();\n          storeLoadOptions.group = columnsController.getGroupDataSourceParameters();\n          dataSource.sort(storeLoadOptions.sort);\n          dataSource.group(storeLoadOptions.group);\n          storeLoadOptions.sort = columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().sorting);\n          e.group = columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().grouping);\n        },\n        _handleColumnsChanged: function (e) {\n          var that = this;\n          var changeTypes = e.changeTypes;\n          var optionNames = e.optionNames;\n          var filterValue;\n          var filterValues;\n          var filterApplied;\n\n          if (changeTypes.sorting || changeTypes.grouping) {\n            if (that._dataSource && !that._columnsUpdating) {\n              that._dataSource.group(that._columnsController.getGroupDataSourceParameters());\n\n              that._dataSource.sort(that._columnsController.getSortDataSourceParameters());\n\n              that.reload();\n            }\n          } else if (changeTypes.columns) {\n            filterValues = that._columnsController.columnOption(e.columnIndex, \"filterValues\");\n\n            if (optionNames.filterValues || optionNames.filterType && Array.isArray(filterValues) || optionNames.filterValue || optionNames.selectedFilterOperation || optionNames.allowFiltering) {\n              filterValue = that._columnsController.columnOption(e.columnIndex, \"filterValue\");\n\n              if (Array.isArray(filterValues) || void 0 === e.columnIndex || isDefined(filterValue) || !optionNames.selectedFilterOperation || optionNames.filterValue) {\n                that._applyFilter();\n\n                filterApplied = true;\n              }\n            }\n\n            if (!that._needApplyFilter && !gridCoreUtils.checkChanges(optionNames, [\"width\", \"visibleWidth\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"filterValues\", \"filterType\"])) {\n              that._columnsController.columnsChanged.add(function updateItemsHandler(change) {\n                var _change$changeTypes;\n\n                that._columnsController.columnsChanged.remove(updateItemsHandler);\n\n                that.updateItems({\n                  repaintChangesOnly: false,\n                  virtualColumnsScrolling: null === change || void 0 === change ? void 0 : null === (_change$changeTypes = change.changeTypes) || void 0 === _change$changeTypes ? void 0 : _change$changeTypes.virtualColumnsScrolling\n                });\n              });\n            }\n\n            if (isDefined(optionNames.visible)) {\n              var column = that._columnsController.columnOption(e.columnIndex);\n\n              if (column && (isDefined(column.filterValue) || isDefined(column.filterValues))) {\n                that._applyFilter();\n\n                filterApplied = true;\n              }\n            }\n          }\n\n          if (!filterApplied && changeTypes.filtering) {\n            that.reload();\n          }\n        },\n        _handleDataChanged: function (e) {\n          var that = this;\n          var dataSource = that._dataSource;\n          var columnsController = that._columnsController;\n          var isAsyncDataSourceApplying = false;\n          this._useSortingGroupingFromColumns = false;\n\n          if (dataSource && !that._isDataSourceApplying) {\n            that._isDataSourceApplying = true;\n            when(that._columnsController.applyDataSource(dataSource)).done(function () {\n              if (that._isLoading) {\n                that._handleLoadingChanged(false);\n              }\n\n              if (isAsyncDataSourceApplying && e && e.isDelayed) {\n                e.isDelayed = false;\n              }\n\n              that._isDataSourceApplying = false;\n              var needApplyFilter = that._needApplyFilter;\n              that._needApplyFilter = false;\n\n              if (needApplyFilter && !that._isAllDataTypesDefined && (additionalFilter = that._calculateAdditionalFilter(), additionalFilter && additionalFilter.length)) {\n                errors.log(\"W1005\", that.component.NAME);\n\n                that._applyFilter();\n              } else {\n                that.updateItems(e, true);\n              }\n\n              var additionalFilter;\n            }).fail(function () {\n              that._isDataSourceApplying = false;\n            });\n\n            if (that._isDataSourceApplying) {\n              isAsyncDataSourceApplying = true;\n\n              that._handleLoadingChanged(true);\n            }\n\n            that._needApplyFilter = !that._columnsController.isDataSourceApplied();\n            that._isAllDataTypesDefined = columnsController.isAllDataTypesDefined();\n          }\n        },\n        _handleLoadingChanged: function (isLoading) {\n          this._isLoading = isLoading;\n\n          this._fireLoadingChanged();\n        },\n        _handleLoadError: function (e) {\n          this.dataErrorOccurred.fire(e);\n        },\n        _handleDataPushed: function (changes) {\n          this.pushed.fire(changes);\n        },\n        fireError: function () {\n          this.dataErrorOccurred.fire(errors.Error.apply(errors, arguments));\n        },\n        _setPagingOptions: function (dataSource) {\n          var pageIndex = this.option(\"paging.pageIndex\");\n          var pageSize = this.option(\"paging.pageSize\");\n          var pagingEnabled = this.option(\"paging.enabled\");\n          var scrollingMode = this.option(\"scrolling.mode\");\n          var appendMode = \"infinite\" === scrollingMode;\n          var virtualMode = \"virtual\" === scrollingMode;\n          var paginate = pagingEnabled || virtualMode || appendMode;\n          var isPaginateChanged = false;\n          var isPageSizeChanged = false;\n          var isPageIndexChanged = false;\n          dataSource.requireTotalCount(!appendMode);\n\n          if (void 0 !== pagingEnabled && dataSource.paginate() !== paginate) {\n            dataSource.paginate(paginate);\n            isPaginateChanged = true;\n          }\n\n          if (void 0 !== pageSize && dataSource.pageSize() !== pageSize) {\n            dataSource.pageSize(pageSize);\n            isPageSizeChanged = true;\n          }\n\n          if (void 0 !== pageIndex && dataSource.pageIndex() !== pageIndex) {\n            dataSource.pageIndex(pageIndex);\n            isPageIndexChanged = true;\n          }\n\n          if (isPaginateChanged || isPageSizeChanged || isPageIndexChanged) {\n            return {\n              isPaginateChanged: isPaginateChanged,\n              isPageSizeChanged: isPageSizeChanged,\n              isPageIndexChanged: isPageIndexChanged\n            };\n          }\n\n          return false;\n        },\n        _getSpecificDataSourceOption: function () {\n          var dataSource = this.option(\"dataSource\");\n\n          if (Array.isArray(dataSource)) {\n            return {\n              store: {\n                type: \"array\",\n                data: dataSource,\n                key: this.option(\"keyExpr\")\n              }\n            };\n          }\n\n          return dataSource;\n        },\n        _initDataSource: function () {\n          var oldDataSource = this._dataSource;\n          this.callBase();\n          var dataSource = this._dataSource;\n          this._useSortingGroupingFromColumns = true;\n          this._cachedProcessedItems = null;\n\n          if (dataSource) {\n            var changedPagingOptions = this._setPagingOptions(dataSource);\n\n            this._isPaging = null === changedPagingOptions || void 0 === changedPagingOptions ? void 0 : changedPagingOptions.isPageIndexChanged;\n            this.setDataSource(dataSource);\n          } else if (oldDataSource) {\n            this.updateItems();\n          }\n        },\n        _loadDataSource: function () {\n          var that = this;\n          var dataSource = that._dataSource;\n          var result = new Deferred();\n          when(this._columnsController.refresh(true)).always(function () {\n            if (dataSource) {\n              dataSource.load().done(function () {\n                that._isPaging = false;\n                result.resolve.apply(result, arguments);\n              }).fail(result.reject);\n            } else {\n              result.resolve();\n            }\n          });\n          return result.promise();\n        },\n        _beforeProcessItems: function (items) {\n          return items.slice(0);\n        },\n        getRowIndexDelta: function () {\n          return 0;\n        },\n        getDataIndex: function (change) {\n          var visibleItems = this._items;\n          var lastVisibleItem = \"append\" === change.changeType && visibleItems.length > 0 ? visibleItems[visibleItems.length - 1] : null;\n          return isDefined(null === lastVisibleItem || void 0 === lastVisibleItem ? void 0 : lastVisibleItem.dataIndex) ? lastVisibleItem.dataIndex + 1 : 0;\n        },\n        _processItems: function (items, change) {\n          var that = this;\n          var rowIndexDelta = that.getRowIndexDelta();\n          var changeType = change.changeType;\n\n          var visibleColumns = that._columnsController.getVisibleColumns(null, \"loadingAll\" === changeType);\n\n          var dataIndex = this.getDataIndex(change);\n          var options = {\n            visibleColumns: visibleColumns,\n            dataIndex: dataIndex\n          };\n          var result = [];\n          each(items, function (index, item) {\n            if (isDefined(item)) {\n              options.rowIndex = index - rowIndexDelta;\n              item = that._processItem(item, options);\n              result.push(item);\n            }\n          });\n          return result;\n        },\n        _processItem: function (item, options) {\n          item = this._generateDataItem(item, options);\n          item = this._processDataItem(item, options);\n          item.dataIndex = options.dataIndex++;\n          return item;\n        },\n        _generateDataItem: function (data) {\n          return {\n            rowType: \"data\",\n            data: data,\n            key: this.keyOf(data)\n          };\n        },\n        _processDataItem: function (dataItem, options) {\n          dataItem.values = this.generateDataValues(dataItem.data, options.visibleColumns);\n          return dataItem;\n        },\n        generateDataValues: function (data, columns, isModified) {\n          var values = [];\n          var value;\n\n          for (var i = 0; i < columns.length; i++) {\n            var column = columns[i];\n            value = isModified ? void 0 : null;\n\n            if (!column.command) {\n              if (column.calculateCellValue) {\n                value = column.calculateCellValue(data);\n              } else if (column.dataField) {\n                value = data[column.dataField];\n              }\n            }\n\n            values.push(value);\n          }\n\n          return values;\n        },\n        _applyChange: function (change) {\n          if (\"update\" === change.changeType) {\n            this._applyChangeUpdate(change);\n          } else if (this.items().length && change.repaintChangesOnly && \"refresh\" === change.changeType) {\n            this._applyChangesOnly(change);\n          } else if (\"refresh\" === change.changeType) {\n            this._applyChangeFull(change);\n          }\n        },\n        _applyChangeFull: function (change) {\n          this._items = change.items.slice(0);\n        },\n        _getRowIndices: function (change) {\n          var rowIndices = change.rowIndices.slice(0);\n          var rowIndexDelta = this.getRowIndexDelta();\n          rowIndices.sort(function (a, b) {\n            return a - b;\n          });\n\n          for (var i = 0; i < rowIndices.length; i++) {\n            var correctedRowIndex = rowIndices[i];\n\n            if (change.allowInvisibleRowIndices) {\n              correctedRowIndex += rowIndexDelta;\n            }\n\n            if (correctedRowIndex < 0) {\n              rowIndices.splice(i, 1);\n              i--;\n            }\n          }\n\n          return rowIndices;\n        },\n        _applyChangeUpdate: function (change) {\n          var that = this;\n          var items = change.items;\n\n          var rowIndices = that._getRowIndices(change);\n\n          var rowIndexDelta = that.getRowIndexDelta();\n          var repaintChangesOnly = that.option(\"repaintChangesOnly\");\n          var prevIndex = -1;\n          var rowIndexCorrection = 0;\n          var changeType;\n          change.items = [];\n          change.rowIndices = [];\n          change.columnIndices = [];\n          change.changeTypes = [];\n\n          var equalItems = function (item1, item2, strict) {\n            var result = item1 && item2 && equalByValue(item1.key, item2.key);\n\n            if (result && strict) {\n              result = item1.rowType === item2.rowType && (\"detail\" !== item2.rowType || item1.isEditing === item2.isEditing);\n            }\n\n            return result;\n          };\n\n          each(rowIndices, function (index, rowIndex) {\n            var columnIndices;\n            rowIndex += rowIndexCorrection + rowIndexDelta;\n\n            if (prevIndex === rowIndex) {\n              return;\n            }\n\n            prevIndex = rowIndex;\n            var oldItem = that._items[rowIndex];\n            var oldNextItem = that._items[rowIndex + 1];\n            var newItem = items[rowIndex];\n            var newNextItem = items[rowIndex + 1];\n            var strict = equalItems(oldItem, oldNextItem) || equalItems(newItem, newNextItem);\n\n            if (newItem) {\n              newItem.rowIndex = rowIndex;\n              change.items.push(newItem);\n            }\n\n            if (oldItem && newItem && equalItems(oldItem, newItem, strict)) {\n              changeType = \"update\";\n              that._items[rowIndex] = newItem;\n\n              if (oldItem.visible !== newItem.visible) {\n                change.items.splice(-1, 1, {\n                  visible: newItem.visible\n                });\n              } else if (repaintChangesOnly && !change.isFullUpdate) {\n                columnIndices = that._partialUpdateRow(oldItem, newItem, rowIndex - rowIndexDelta);\n              }\n            } else if (newItem && !oldItem || newNextItem && equalItems(oldItem, newNextItem, strict)) {\n              changeType = \"insert\";\n\n              that._items.splice(rowIndex, 0, newItem);\n\n              rowIndexCorrection++;\n            } else if (oldItem && !newItem || oldNextItem && equalItems(newItem, oldNextItem, strict)) {\n              changeType = \"remove\";\n\n              that._items.splice(rowIndex, 1);\n\n              rowIndexCorrection--;\n              prevIndex = -1;\n            } else if (newItem) {\n              changeType = \"update\";\n              that._items[rowIndex] = newItem;\n            } else {\n              return;\n            }\n\n            change.rowIndices.push(rowIndex - rowIndexDelta);\n            change.changeTypes.push(changeType);\n            change.columnIndices.push(columnIndices);\n          });\n        },\n        _isCellChanged: function (oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          if (JSON.stringify(oldRow.values[columnIndex]) !== JSON.stringify(newRow.values[columnIndex])) {\n            return true;\n          }\n\n          function isCellModified(row, columnIndex) {\n            return row.modifiedValues ? void 0 !== row.modifiedValues[columnIndex] : false;\n          }\n\n          if (isCellModified(oldRow, columnIndex) !== isCellModified(newRow, columnIndex)) {\n            return true;\n          }\n\n          return false;\n        },\n        _getChangedColumnIndices: function (oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n          var columnIndices;\n\n          if (oldItem.rowType === newItem.rowType) {\n            if (\"group\" !== newItem.rowType && \"groupFooter\" !== newItem.rowType) {\n              columnIndices = [];\n\n              if (\"detail\" !== newItem.rowType) {\n                for (var columnIndex = 0; columnIndex < oldItem.values.length; columnIndex++) {\n                  if (this._isCellChanged(oldItem, newItem, visibleRowIndex, columnIndex, isLiveUpdate)) {\n                    columnIndices.push(columnIndex);\n                  }\n                }\n              }\n            }\n\n            if (\"group\" === newItem.rowType && newItem.isExpanded === oldItem.isExpanded && oldItem.cells) {\n              columnIndices = oldItem.cells.map((cell, index) => {\n                var _cell$column;\n\n                return \"groupExpand\" !== (null === (_cell$column = cell.column) || void 0 === _cell$column ? void 0 : _cell$column.type) ? index : -1;\n              }).filter(index => index >= 0);\n            }\n          }\n\n          return columnIndices;\n        },\n        _partialUpdateRow: function (oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n          var _changedColumnIndices;\n\n          var changedColumnIndices = this._getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate);\n\n          if (null !== (_changedColumnIndices = changedColumnIndices) && void 0 !== _changedColumnIndices && _changedColumnIndices.length && this.option(\"dataRowTemplate\")) {\n            changedColumnIndices = void 0;\n          }\n\n          if (changedColumnIndices) {\n            oldItem.cells && oldItem.cells.forEach(function (cell, columnIndex) {\n              var isCellChanged = changedColumnIndices.indexOf(columnIndex) >= 0;\n\n              if (!isCellChanged && cell && cell.update) {\n                cell.update(newItem);\n              }\n            });\n            newItem.update = oldItem.update;\n            newItem.watch = oldItem.watch;\n            newItem.cells = oldItem.cells;\n\n            if (isLiveUpdate) {\n              newItem.oldValues = oldItem.values;\n            }\n\n            oldItem.update && oldItem.update(newItem);\n          }\n\n          return changedColumnIndices;\n        },\n        _isItemEquals: function (item1, item2) {\n          if (JSON.stringify(item1.values) !== JSON.stringify(item2.values)) {\n            return false;\n          }\n\n          if ([\"modified\", \"isNewRow\", \"removed\", \"isEditing\"].some(field => item1[field] !== item2[field])) {\n            return false;\n          }\n\n          if (\"group\" === item1.rowType || \"groupFooter\" === item1.rowType) {\n            var _item1$data, _item2$data, _item1$data2, _item2$data2;\n\n            var expandedMatch = item1.isExpanded === item2.isExpanded;\n            var summaryCellsMatch = JSON.stringify(item1.summaryCells) === JSON.stringify(item2.summaryCells);\n            var continuationMatch = (null === (_item1$data = item1.data) || void 0 === _item1$data ? void 0 : _item1$data.isContinuation) === (null === (_item2$data = item2.data) || void 0 === _item2$data ? void 0 : _item2$data.isContinuation) && (null === (_item1$data2 = item1.data) || void 0 === _item1$data2 ? void 0 : _item1$data2.isContinuationOnNextPage) === (null === (_item2$data2 = item2.data) || void 0 === _item2$data2 ? void 0 : _item2$data2.isContinuationOnNextPage);\n\n            if (!expandedMatch || !summaryCellsMatch || !continuationMatch) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        _applyChangesOnly: function (change) {\n          var _change$isLiveUpdate;\n\n          var rowIndices = [];\n          var columnIndices = [];\n          var changeTypes = [];\n          var items = [];\n          var newIndexByKey = {};\n          var isLiveUpdate = null !== (_change$isLiveUpdate = null === change || void 0 === change ? void 0 : change.isLiveUpdate) && void 0 !== _change$isLiveUpdate ? _change$isLiveUpdate : true;\n\n          function getRowKey(row) {\n            if (row) {\n              return row.rowType + \",\" + JSON.stringify(row.key);\n            }\n          }\n\n          var currentItems = this._items;\n          var oldItems = currentItems.slice();\n          change.items.forEach(function (item, index) {\n            var key = getRowKey(item);\n            newIndexByKey[key] = index;\n            item.rowIndex = index;\n          });\n          var result = findChanges(oldItems, change.items, getRowKey, (item1, item2) => {\n            if (!this._isItemEquals(item1, item2)) {\n              return false;\n            }\n\n            if (item1.cells) {\n              item1.update && item1.update(item2);\n              item1.cells.forEach(function (cell) {\n                if (cell && cell.update) {\n                  cell.update(item2, true);\n                }\n              });\n            }\n\n            return true;\n          });\n\n          if (!result) {\n            this._applyChangeFull(change);\n\n            return;\n          }\n\n          result.forEach(change => {\n            switch (change.type) {\n              case \"update\":\n                var index = change.index;\n                var newItem = change.data;\n                var oldItem = change.oldItem;\n\n                var changedColumnIndices = this._partialUpdateRow(oldItem, newItem, index, isLiveUpdate);\n\n                rowIndices.push(index);\n                changeTypes.push(\"update\");\n                items.push(newItem);\n                currentItems[index] = newItem;\n                columnIndices.push(changedColumnIndices);\n                break;\n\n              case \"insert\":\n                rowIndices.push(change.index);\n                changeTypes.push(\"insert\");\n                items.push(change.data);\n                columnIndices.push(void 0);\n                currentItems.splice(change.index, 0, change.data);\n                break;\n\n              case \"remove\":\n                rowIndices.push(change.index);\n                changeTypes.push(\"remove\");\n                currentItems.splice(change.index, 1);\n                items.push(change.oldItem);\n                columnIndices.push(void 0);\n            }\n          });\n          change.repaintChangesOnly = true;\n          change.changeType = \"update\";\n          change.rowIndices = rowIndices;\n          change.columnIndices = columnIndices;\n          change.changeTypes = changeTypes;\n          change.items = items;\n\n          if (oldItems.length) {\n            change.isLiveUpdate = true;\n          }\n\n          this._correctRowIndices(rowIndex => {\n            var oldRowIndexOffset = this._rowIndexOffset || 0;\n            var rowIndexOffset = this.getRowIndexOffset();\n            var oldItem = oldItems[rowIndex - oldRowIndexOffset];\n            var key = getRowKey(oldItem);\n            var newVisibleRowIndex = newIndexByKey[key];\n            return newVisibleRowIndex >= 0 ? newVisibleRowIndex + rowIndexOffset - rowIndex : 0;\n          });\n        },\n        _correctRowIndices: noop,\n        _afterProcessItems: function (items) {\n          return items;\n        },\n        _updateItemsCore: function (change) {\n          var items;\n          var dataSource = this._dataSource;\n          var changeType = change.changeType || \"refresh\";\n          change.changeType = changeType;\n\n          if (dataSource) {\n            var cachedProcessedItems = this._cachedProcessedItems;\n\n            if (change.useProcessedItemsCache && cachedProcessedItems) {\n              items = cachedProcessedItems;\n            } else {\n              items = change.items || dataSource.items();\n              items = this._beforeProcessItems(items);\n              items = this._processItems(items, change);\n              this._cachedProcessedItems = items;\n            }\n\n            items = this._afterProcessItems(items, change);\n            change.items = items;\n            var oldItems = this._items.length === items.length && this._items;\n\n            this._applyChange(change);\n\n            var rowIndexDelta = this.getRowIndexDelta();\n            each(this._items, (index, item) => {\n              item.rowIndex = index - rowIndexDelta;\n\n              if (oldItems) {\n                item.cells = oldItems[index].cells || [];\n              }\n\n              var newItem = items[index];\n\n              if (newItem) {\n                item.loadIndex = newItem.loadIndex;\n              }\n            });\n            this._rowIndexOffset = this.getRowIndexOffset();\n          } else {\n            this._items = [];\n          }\n        },\n        _handleChanging: function (e) {\n          var rows = this.getVisibleRows();\n          var dataSource = this.dataSource();\n\n          if (dataSource) {\n            e.changes.forEach(function (change) {\n              if (\"insert\" === change.type && change.index >= 0) {\n                var dataIndex = 0;\n\n                for (var i = 0; i < change.index; i++) {\n                  var row = rows[i];\n\n                  if (row && (\"data\" === row.rowType || \"group\" === row.rowType)) {\n                    dataIndex++;\n                  }\n                }\n\n                change.index = dataIndex;\n              }\n            });\n          }\n        },\n        updateItems: function (change, isDataChanged) {\n          change = change || {};\n\n          if (void 0 !== this._repaintChangesOnly) {\n            var _change$repaintChange;\n\n            change.repaintChangesOnly = null !== (_change$repaintChange = change.repaintChangesOnly) && void 0 !== _change$repaintChange ? _change$repaintChange : this._repaintChangesOnly;\n            change.needUpdateDimensions = change.needUpdateDimensions || this._needUpdateDimensions;\n          } else if (change.changes) {\n            change.repaintChangesOnly = this.option(\"repaintChangesOnly\");\n          } else if (isDataChanged) {\n            var operationTypes = this.dataSource().operationTypes();\n            change.repaintChangesOnly = operationTypes && !operationTypes.grouping && !operationTypes.filtering && this.option(\"repaintChangesOnly\");\n            change.isDataChanged = true;\n\n            if (operationTypes && (operationTypes.reload || operationTypes.paging || operationTypes.groupExpanding)) {\n              change.needUpdateDimensions = true;\n            }\n          }\n\n          if (this._updateLockCount && !change.cancel) {\n            this._changes.push(change);\n\n            return;\n          }\n\n          this._updateItemsCore(change);\n\n          if (change.cancel) {\n            return;\n          }\n\n          this._fireChanged(change);\n        },\n        loadingOperationTypes: function () {\n          var dataSource = this.dataSource();\n          return dataSource && dataSource.loadingOperationTypes() || {};\n        },\n        _fireChanged: function (change) {\n          if (this._currentOperationTypes) {\n            change.operationTypes = this._currentOperationTypes;\n            this._currentOperationTypes = null;\n          }\n\n          deferRender(() => {\n            this.changed.fire(change);\n          });\n        },\n        isLoading: function () {\n          return this._isLoading || this._isCustomLoading;\n        },\n        _fireLoadingChanged: function () {\n          this.loadingChanged.fire(this.isLoading(), this._loadingText);\n        },\n        _calculateAdditionalFilter: function () {\n          return null;\n        },\n        _applyFilter: function () {\n          var dataSource = this._dataSource;\n\n          if (dataSource) {\n            dataSource.pageIndex(0);\n            this._isFilterApplying = true;\n            return this.reload().done(() => {\n              if (this._isFilterApplying) {\n                this.pageChanged.fire();\n              }\n            });\n          }\n        },\n        resetFilterApplying: function () {\n          this._isFilterApplying = false;\n        },\n        filter: function (filterExpr) {\n          var dataSource = this._dataSource;\n          var filter = dataSource && dataSource.filter();\n\n          if (0 === arguments.length) {\n            return filter;\n          }\n\n          filterExpr = arguments.length > 1 ? Array.prototype.slice.call(arguments, 0) : filterExpr;\n\n          if (gridCoreUtils.equalFilterParameters(filter, filterExpr)) {\n            return;\n          }\n\n          if (dataSource) {\n            dataSource.filter(filterExpr);\n          }\n\n          this._applyFilter();\n        },\n        clearFilter: function (filterName) {\n          var that = this;\n          var columnsController = that._columnsController;\n\n          var clearColumnOption = function (optionName) {\n            var columnCount = columnsController.columnCount();\n\n            for (var index = 0; index < columnCount; index++) {\n              columnsController.columnOption(index, optionName, void 0);\n            }\n          };\n\n          that.component.beginUpdate();\n\n          if (arguments.length > 0) {\n            switch (filterName) {\n              case \"dataSource\":\n                that.filter(null);\n                break;\n\n              case \"search\":\n                that.searchByText(\"\");\n                break;\n\n              case \"header\":\n                clearColumnOption(\"filterValues\");\n                break;\n\n              case \"row\":\n                clearColumnOption(\"filterValue\");\n            }\n          } else {\n            that.filter(null);\n            that.searchByText(\"\");\n            clearColumnOption(\"filterValue\");\n            clearColumnOption(\"bufferedFilterValue\");\n            clearColumnOption(\"filterValues\");\n          }\n\n          that.component.endUpdate();\n        },\n        _fireDataSourceChanged: function () {\n          var that = this;\n          that.changed.add(function changedHandler() {\n            that.changed.remove(changedHandler);\n            that.dataSourceChanged.fire();\n          });\n        },\n        _getDataSourceAdapter: noop,\n        _createDataSourceAdapterCore: function (dataSource, remoteOperations) {\n          var dataSourceAdapterProvider = this._getDataSourceAdapter();\n\n          var dataSourceAdapter = dataSourceAdapterProvider.create(this.component);\n          dataSourceAdapter.init(dataSource, remoteOperations);\n          return dataSourceAdapter;\n        },\n        isLocalStore: function (store) {\n          store = store || this.store();\n          return store instanceof ArrayStore;\n        },\n        isCustomStore: function (store) {\n          store = store || this.store();\n          return store instanceof CustomStore;\n        },\n        _createDataSourceAdapter: function (dataSource) {\n          var remoteOperations = this.option(\"remoteOperations\");\n          var store = dataSource.store();\n          var enabledRemoteOperations = {\n            filtering: true,\n            sorting: true,\n            paging: true,\n            grouping: true,\n            summary: true\n          };\n\n          if (remoteOperations && remoteOperations.groupPaging) {\n            remoteOperations = extend({}, enabledRemoteOperations, remoteOperations);\n          }\n\n          if (\"auto\" === remoteOperations) {\n            remoteOperations = this.isLocalStore(store) || this.isCustomStore(store) ? {} : {\n              filtering: true,\n              sorting: true,\n              paging: true\n            };\n          }\n\n          if (true === remoteOperations) {\n            remoteOperations = enabledRemoteOperations;\n          }\n\n          return this._createDataSourceAdapterCore(dataSource, remoteOperations);\n        },\n        setDataSource: function (dataSource) {\n          var oldDataSource = this._dataSource;\n\n          if (!dataSource && oldDataSource) {\n            oldDataSource.cancelAll();\n            oldDataSource.changed.remove(this._dataChangedHandler);\n            oldDataSource.loadingChanged.remove(this._loadingChangedHandler);\n            oldDataSource.loadError.remove(this._loadErrorHandler);\n            oldDataSource.customizeStoreLoadOptions.remove(this._customizeStoreLoadOptionsHandler);\n            oldDataSource.changing.remove(this._changingHandler);\n            oldDataSource.pushed.remove(this._dataPushedHandler);\n            oldDataSource.dispose(this._isSharedDataSource);\n          }\n\n          if (dataSource) {\n            dataSource = this._createDataSourceAdapter(dataSource);\n          }\n\n          this._dataSource = dataSource;\n\n          if (dataSource) {\n            this._fireDataSourceChanged();\n\n            this._isLoading = !dataSource.isLoaded();\n            this._needApplyFilter = true;\n            this._isAllDataTypesDefined = this._columnsController.isAllDataTypesDefined();\n            dataSource.changed.add(this._dataChangedHandler);\n            dataSource.loadingChanged.add(this._loadingChangedHandler);\n            dataSource.loadError.add(this._loadErrorHandler);\n            dataSource.customizeStoreLoadOptions.add(this._customizeStoreLoadOptionsHandler);\n            dataSource.changing.add(this._changingHandler);\n            dataSource.pushed.add(this._dataPushedHandler);\n          }\n        },\n        items: function () {\n          return this._items;\n        },\n        isEmpty: function () {\n          return !this.items().length;\n        },\n        pageCount: function () {\n          return this._dataSource ? this._dataSource.pageCount() : 1;\n        },\n        dataSource: function () {\n          return this._dataSource;\n        },\n        store: function () {\n          var dataSource = this._dataSource;\n          return dataSource && dataSource.store();\n        },\n        loadAll: function (data) {\n          var that = this;\n          var d = new Deferred();\n          var dataSource = that._dataSource;\n\n          if (dataSource) {\n            if (data) {\n              var options = {\n                data: data,\n                isCustomLoading: true,\n                storeLoadOptions: {\n                  isLoadingAll: true\n                },\n                loadOptions: {\n                  filter: that.getCombinedFilter(),\n                  group: dataSource.group(),\n                  sort: dataSource.sort()\n                }\n              };\n\n              dataSource._handleDataLoaded(options);\n\n              when(options.data).done(function (data) {\n                data = that._beforeProcessItems(data);\n                d.resolve(that._processItems(data, {\n                  changeType: \"loadingAll\"\n                }), options.extra && options.extra.summary);\n              }).fail(d.reject);\n            } else if (!dataSource.isLoading()) {\n              var loadOptions = extend({}, dataSource.loadOptions(), {\n                isLoadingAll: true,\n                requireTotalCount: false\n              });\n              dataSource.load(loadOptions).done(function (items, extra) {\n                items = that._beforeProcessItems(items);\n                items = that._processItems(items, {\n                  changeType: \"loadingAll\"\n                });\n                d.resolve(items, extra && extra.summary);\n              }).fail(d.reject);\n            } else {\n              d.reject();\n            }\n          } else {\n            d.resolve([]);\n          }\n\n          return d;\n        },\n        getKeyByRowIndex: function (rowIndex, byLoaded) {\n          var item = this.items(byLoaded)[rowIndex];\n\n          if (item) {\n            return item.key;\n          }\n        },\n        getRowIndexByKey: function (key, byLoaded) {\n          return gridCoreUtils.getIndexByKey(key, this.items(byLoaded));\n        },\n        keyOf: function (data) {\n          var store = this.store();\n\n          if (store) {\n            return store.keyOf(data);\n          }\n        },\n        byKey: function (key) {\n          var store = this.store();\n          var rowIndex = this.getRowIndexByKey(key);\n          var result;\n\n          if (!store) {\n            return;\n          }\n\n          if (rowIndex >= 0) {\n            result = new Deferred().resolve(this.items()[rowIndex].data);\n          }\n\n          return result || store.byKey(key);\n        },\n        key: function () {\n          var store = this.store();\n\n          if (store) {\n            return store.key();\n          }\n        },\n        getRowIndexOffset: function () {\n          return 0;\n        },\n        getDataByKeys: function (rowKeys) {\n          var that = this;\n          var result = new Deferred();\n          var deferreds = [];\n          var data = [];\n          each(rowKeys, function (index, key) {\n            deferreds.push(that.byKey(key).done(function (keyData) {\n              data[index] = keyData;\n            }));\n          });\n          when.apply($, deferreds).always(function () {\n            result.resolve(data);\n          });\n          return result;\n        },\n        pageIndex: function (value) {\n          return changePaging(this, \"pageIndex\", value);\n        },\n        pageSize: function (value) {\n          return changePaging(this, \"pageSize\", value);\n        },\n        beginCustomLoading: function (messageText) {\n          this._isCustomLoading = true;\n          this._loadingText = messageText || \"\";\n\n          this._fireLoadingChanged();\n        },\n        endCustomLoading: function () {\n          this._isCustomLoading = false;\n          this._loadingText = void 0;\n\n          this._fireLoadingChanged();\n        },\n        refresh: function (options) {\n          if (true === options) {\n            options = {\n              reload: true,\n              changesOnly: true\n            };\n          } else if (!options) {\n            options = {\n              lookup: true,\n              selection: true,\n              reload: true\n            };\n          }\n\n          var that = this;\n          var dataSource = that.getDataSource();\n          var changesOnly = options.changesOnly;\n          var d = new Deferred();\n\n          var customizeLoadResult = function () {\n            that._repaintChangesOnly = !!changesOnly;\n          };\n\n          when(!options.lookup || that._columnsController.refresh()).always(function () {\n            if (options.load || options.reload) {\n              dataSource && dataSource.on(\"customizeLoadResult\", customizeLoadResult);\n              when(that.reload(options.reload, changesOnly)).always(function () {\n                dataSource && dataSource.off(\"customizeLoadResult\", customizeLoadResult);\n                that._repaintChangesOnly = void 0;\n              }).done(d.resolve).fail(d.reject);\n            } else {\n              that.updateItems({\n                repaintChangesOnly: options.changesOnly\n              });\n              d.resolve();\n            }\n          });\n          return d.promise();\n        },\n        getVisibleRows: function () {\n          return this.items();\n        },\n        _disposeDataSource: function () {\n          this.setDataSource(null);\n        },\n        dispose: function () {\n          this._disposeDataSource();\n\n          this.callBase.apply(this, arguments);\n        },\n        repaintRows: function (rowIndexes, changesOnly) {\n          rowIndexes = Array.isArray(rowIndexes) ? rowIndexes : [rowIndexes];\n\n          if (rowIndexes.length > 1 || isDefined(rowIndexes[0])) {\n            this.updateItems({\n              changeType: \"update\",\n              rowIndices: rowIndexes,\n              isFullUpdate: !changesOnly\n            });\n          }\n        },\n        skipProcessingPagingChange: function (fullName) {\n          return this._skipProcessingPagingChange && (\"paging.pageIndex\" === fullName || \"paging.pageSize\" === fullName);\n        },\n        getUserState: function () {\n          return {\n            searchText: this.option(\"searchPanel.text\"),\n            pageIndex: this.pageIndex(),\n            pageSize: this.pageSize()\n          };\n        },\n        getCachedStoreData: function () {\n          return this._dataSource && this._dataSource.getCachedStoreData();\n        },\n        isLastPageLoaded: function () {\n          var pageIndex = this.pageIndex();\n          var pageCount = this.pageCount();\n          return pageIndex === pageCount - 1;\n        }\n      };\n      gridCoreUtils.proxyMethod(members, \"load\");\n      gridCoreUtils.proxyMethod(members, \"reload\");\n      gridCoreUtils.proxyMethod(members, \"push\");\n      gridCoreUtils.proxyMethod(members, \"itemsCount\", 0);\n      gridCoreUtils.proxyMethod(members, \"totalItemsCount\", 0);\n      gridCoreUtils.proxyMethod(members, \"hasKnownLastPage\", true);\n      gridCoreUtils.proxyMethod(members, \"isLoaded\", true);\n      gridCoreUtils.proxyMethod(members, \"totalCount\", 0);\n      return members;\n    }())\n  }\n};","map":{"version":3,"names":["$","modules","gridCoreUtils","ArrayStore","CustomStore","errors","noop","deferRender","equalByValue","each","isDefined","extend","DataHelperMixin","when","Deferred","findChanges","dataControllerModule","defaultOptions","loadingTimeout","dataSource","cacheEnabled","repaintChangesOnly","highlightChanges","onDataErrorOccurred","remoteOperations","paging","enabled","pageSize","pageIndex","controllers","data","Controller","inherit","include","changePaging","that","optionName","value","_dataSource","oldValue","_getPagingOptionValue","_skipProcessingPagingChange","option","_isPaging","done","pageChanged","fire","resolve","promise","members","init","_items","_cachedProcessedItems","_columnsController","getController","_currentOperationTypes","_dataChangedHandler","e","operationTypes","_handleDataChanged","_columnsChangedHandler","_handleColumnsChanged","bind","_loadingChangedHandler","_handleLoadingChanged","_loadErrorHandler","_handleLoadError","_customizeStoreLoadOptionsHandler","_handleCustomizeStoreLoadOptions","_changingHandler","_handleChanging","_dataPushedHandler","_handleDataPushed","columnsChanged","add","_isLoading","_isCustomLoading","_repaintChangesOnly","_changes","createAction","dataErrorOccurred","error","executeAction","_refreshDataSource","callbackNames","callbackFlags","name","stopOnFalse","publicMethods","reset","_handleDataSourceChange","args","previousValue","Array","isArray","isValueChanged","store","_array","needToRefreshOnDataSourceChange","refresh","optionChanged","changedPagingOptions","handled","fullName","_setPagingOptions","isPageIndexChanged","load","isLoading","_useSortingGroupingFromColumns","callBase","isReady","getDataSource","getCombinedFilter","returnDataField","combinedFilter","filter","columnsController","additionalFilter","_calculateAdditionalFilter","isDataSourceApplied","isAllDataTypesDefined","combineFilters","updateFilter","filtering","waitReady","_updateLockCount","_readyDeferred","_endUpdateCore","changes","length","every","change","updateItems","_storeLoadOptions$fil","storeLoadOptions","isCustomLoading","isLoadingAll","extra","totalCount","updateColumnDataTypes","_columnsUpdating","updateSortingGrouping","sort","getSortDataSourceParameters","group","getGroupDataSourceParameters","sorting","grouping","changeTypes","optionNames","filterValue","filterValues","filterApplied","reload","columns","columnOption","columnIndex","filterType","selectedFilterOperation","allowFiltering","_applyFilter","_needApplyFilter","checkChanges","updateItemsHandler","_change$changeTypes","remove","virtualColumnsScrolling","visible","column","isAsyncDataSourceApplying","_isDataSourceApplying","applyDataSource","isDelayed","needApplyFilter","_isAllDataTypesDefined","log","component","NAME","fail","_fireLoadingChanged","pushed","fireError","Error","apply","arguments","pagingEnabled","scrollingMode","appendMode","virtualMode","paginate","isPaginateChanged","isPageSizeChanged","requireTotalCount","_getSpecificDataSourceOption","type","key","_initDataSource","oldDataSource","setDataSource","_loadDataSource","result","always","reject","_beforeProcessItems","items","slice","getRowIndexDelta","getDataIndex","visibleItems","lastVisibleItem","changeType","dataIndex","_processItems","rowIndexDelta","visibleColumns","getVisibleColumns","options","index","item","rowIndex","_processItem","push","_generateDataItem","_processDataItem","rowType","keyOf","dataItem","values","generateDataValues","isModified","i","command","calculateCellValue","dataField","_applyChange","_applyChangeUpdate","_applyChangesOnly","_applyChangeFull","_getRowIndices","rowIndices","a","b","correctedRowIndex","allowInvisibleRowIndices","splice","prevIndex","rowIndexCorrection","columnIndices","equalItems","item1","item2","strict","isEditing","oldItem","oldNextItem","newItem","newNextItem","isFullUpdate","_partialUpdateRow","_isCellChanged","oldRow","newRow","visibleRowIndex","isLiveUpdate","JSON","stringify","isCellModified","row","modifiedValues","_getChangedColumnIndices","isExpanded","cells","map","cell","_cell$column","_changedColumnIndices","changedColumnIndices","forEach","isCellChanged","indexOf","update","watch","oldValues","_isItemEquals","some","field","_item1$data","_item2$data","_item1$data2","_item2$data2","expandedMatch","summaryCellsMatch","summaryCells","continuationMatch","isContinuation","isContinuationOnNextPage","_change$isLiveUpdate","newIndexByKey","getRowKey","currentItems","oldItems","_correctRowIndices","oldRowIndexOffset","_rowIndexOffset","rowIndexOffset","getRowIndexOffset","newVisibleRowIndex","_afterProcessItems","_updateItemsCore","cachedProcessedItems","useProcessedItemsCache","loadIndex","rows","getVisibleRows","isDataChanged","_change$repaintChange","needUpdateDimensions","_needUpdateDimensions","groupExpanding","cancel","_fireChanged","loadingOperationTypes","changed","loadingChanged","_loadingText","_isFilterApplying","resetFilterApplying","filterExpr","prototype","call","equalFilterParameters","clearFilter","filterName","clearColumnOption","columnCount","beginUpdate","searchByText","endUpdate","_fireDataSourceChanged","changedHandler","dataSourceChanged","_getDataSourceAdapter","_createDataSourceAdapterCore","dataSourceAdapterProvider","dataSourceAdapter","create","isLocalStore","isCustomStore","_createDataSourceAdapter","enabledRemoteOperations","summary","groupPaging","cancelAll","loadError","customizeStoreLoadOptions","changing","dispose","_isSharedDataSource","isLoaded","isEmpty","pageCount","loadAll","d","loadOptions","_handleDataLoaded","getKeyByRowIndex","byLoaded","getRowIndexByKey","getIndexByKey","byKey","getDataByKeys","rowKeys","deferreds","keyData","beginCustomLoading","messageText","endCustomLoading","changesOnly","lookup","selection","customizeLoadResult","on","off","_disposeDataSource","repaintRows","rowIndexes","skipProcessingPagingChange","getUserState","searchText","getCachedStoreData","isLastPageLoaded","proxyMethod"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.data_controller.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.data_controller.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport ArrayStore from \"../../data/array_store\";\r\nimport CustomStore from \"../../data/custom_store\";\r\nimport errors from \"../widget/ui.errors\";\r\nimport {\r\n    noop,\r\n    deferRender,\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport DataHelperMixin from \"../../data_helper\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    findChanges\r\n} from \"../../core/utils/array_compare\";\r\nexport var dataControllerModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            loadingTimeout: 0,\r\n            dataSource: null,\r\n            cacheEnabled: true,\r\n            repaintChangesOnly: false,\r\n            highlightChanges: false,\r\n            onDataErrorOccurred: null,\r\n            remoteOperations: \"auto\",\r\n            paging: {\r\n                enabled: true,\r\n                pageSize: void 0,\r\n                pageIndex: void 0\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        data: modules.Controller.inherit({}).include(DataHelperMixin).inherit(function() {\r\n            var changePaging = function(that, optionName, value) {\r\n                var dataSource = that._dataSource;\r\n                if (dataSource) {\r\n                    if (void 0 !== value) {\r\n                        var oldValue = that._getPagingOptionValue(optionName);\r\n                        if (oldValue !== value) {\r\n                            if (\"pageSize\" === optionName) {\r\n                                dataSource.pageIndex(0)\r\n                            }\r\n                            dataSource[optionName](value);\r\n                            that._skipProcessingPagingChange = true;\r\n                            that.option(\"paging.\" + optionName, value);\r\n                            that._skipProcessingPagingChange = false;\r\n                            var pageIndex = dataSource.pageIndex();\r\n                            that._isPaging = \"pageIndex\" === optionName;\r\n                            return dataSource[\"pageIndex\" === optionName ? \"load\" : \"reload\"]().done(() => {\r\n                                that._isPaging = false;\r\n                                that.pageChanged.fire(pageIndex)\r\n                            })\r\n                        }\r\n                        return Deferred().resolve().promise()\r\n                    }\r\n                    return dataSource[optionName]()\r\n                }\r\n                return 0\r\n            };\r\n            var members = {\r\n                init: function() {\r\n                    var that = this;\r\n                    that._items = [];\r\n                    that._cachedProcessedItems = null;\r\n                    that._columnsController = that.getController(\"columns\");\r\n                    that._isPaging = false;\r\n                    that._currentOperationTypes = null;\r\n                    that._dataChangedHandler = e => {\r\n                        that._currentOperationTypes = this._dataSource.operationTypes();\r\n                        that._handleDataChanged(e);\r\n                        that._currentOperationTypes = null\r\n                    };\r\n                    that._columnsChangedHandler = that._handleColumnsChanged.bind(that);\r\n                    that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\r\n                    that._loadErrorHandler = that._handleLoadError.bind(that);\r\n                    that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);\r\n                    that._changingHandler = that._handleChanging.bind(that);\r\n                    that._dataPushedHandler = that._handleDataPushed.bind(that);\r\n                    that._columnsController.columnsChanged.add(that._columnsChangedHandler);\r\n                    that._isLoading = false;\r\n                    that._isCustomLoading = false;\r\n                    that._repaintChangesOnly = void 0;\r\n                    that._changes = [];\r\n                    that.createAction(\"onDataErrorOccurred\");\r\n                    that.dataErrorOccurred.add((function(error) {\r\n                        return that.executeAction(\"onDataErrorOccurred\", {\r\n                            error: error\r\n                        })\r\n                    }));\r\n                    that._refreshDataSource()\r\n                },\r\n                _getPagingOptionValue: function(optionName) {\r\n                    return this._dataSource[optionName]()\r\n                },\r\n                callbackNames: function() {\r\n                    return [\"changed\", \"loadingChanged\", \"dataErrorOccurred\", \"pageChanged\", \"dataSourceChanged\", \"pushed\"]\r\n                },\r\n                callbackFlags: function(name) {\r\n                    if (\"dataErrorOccurred\" === name) {\r\n                        return {\r\n                            stopOnFalse: true\r\n                        }\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    return [\"beginCustomLoading\", \"endCustomLoading\", \"refresh\", \"filter\", \"clearFilter\", \"getCombinedFilter\", \"keyOf\", \"byKey\", \"getDataByKeys\", \"pageIndex\", \"pageSize\", \"pageCount\", \"totalCount\", \"_disposeDataSource\", \"getKeyByRowIndex\", \"getRowIndexByKey\", \"getDataSource\", \"getVisibleRows\", \"repaintRows\"]\r\n                },\r\n                reset: function() {\r\n                    this._columnsController.reset();\r\n                    this._items = [];\r\n                    this._refreshDataSource()\r\n                },\r\n                _handleDataSourceChange(args) {\r\n                    if (args.value === args.previousValue || this.option(\"columns\") && Array.isArray(args.value) && Array.isArray(args.previousValue)) {\r\n                        var isValueChanged = args.value !== args.previousValue;\r\n                        if (isValueChanged) {\r\n                            var store = this.store();\r\n                            if (store) {\r\n                                store._array = args.value\r\n                            }\r\n                        }\r\n                        if (this.needToRefreshOnDataSourceChange(args)) {\r\n                            this.refresh(this.option(\"repaintChangesOnly\"))\r\n                        }\r\n                        return true\r\n                    }\r\n                    return false\r\n                },\r\n                needToRefreshOnDataSourceChange: function(args) {\r\n                    return true\r\n                },\r\n                optionChanged: function(args) {\r\n                    var that = this;\r\n                    var dataSource;\r\n                    var changedPagingOptions;\r\n\r\n                    function handled() {\r\n                        args.handled = true\r\n                    }\r\n                    if (\"dataSource\" === args.name && args.name === args.fullName && this._handleDataSourceChange(args)) {\r\n                        handled();\r\n                        return\r\n                    }\r\n                    switch (args.name) {\r\n                        case \"cacheEnabled\":\r\n                        case \"repaintChangesOnly\":\r\n                        case \"highlightChanges\":\r\n                        case \"loadingTimeout\":\r\n                            handled();\r\n                            break;\r\n                        case \"remoteOperations\":\r\n                        case \"keyExpr\":\r\n                        case \"dataSource\":\r\n                        case \"scrolling\":\r\n                            handled();\r\n                            that.reset();\r\n                            break;\r\n                        case \"paging\":\r\n                            dataSource = that.dataSource();\r\n                            if (dataSource) {\r\n                                changedPagingOptions = that._setPagingOptions(dataSource);\r\n                                if (changedPagingOptions) {\r\n                                    var pageIndex = dataSource.pageIndex();\r\n                                    this._isPaging = changedPagingOptions.isPageIndexChanged;\r\n                                    dataSource.load().done(() => {\r\n                                        this._isPaging = false;\r\n                                        that.pageChanged.fire(pageIndex)\r\n                                    })\r\n                                }\r\n                            }\r\n                            handled();\r\n                            break;\r\n                        case \"rtlEnabled\":\r\n                            that.reset();\r\n                            break;\r\n                        case \"columns\":\r\n                            dataSource = that.dataSource();\r\n                            if (dataSource && dataSource.isLoading() && args.name === args.fullName) {\r\n                                this._useSortingGroupingFromColumns = true;\r\n                                dataSource.load()\r\n                            }\r\n                            break;\r\n                        default:\r\n                            that.callBase(args)\r\n                    }\r\n                },\r\n                isReady: function() {\r\n                    return !this._isLoading\r\n                },\r\n                getDataSource: function() {\r\n                    return this._dataSource && this._dataSource._dataSource\r\n                },\r\n                getCombinedFilter: function(returnDataField) {\r\n                    return this.combinedFilter(void 0, returnDataField)\r\n                },\r\n                combinedFilter: function(filter, returnDataField) {\r\n                    var dataSource = this._dataSource;\r\n                    var columnsController = this._columnsController;\r\n                    if (dataSource) {\r\n                        if (void 0 === filter) {\r\n                            filter = dataSource.filter()\r\n                        }\r\n                        var additionalFilter = this._calculateAdditionalFilter();\r\n                        if (additionalFilter) {\r\n                            if (columnsController.isDataSourceApplied() || columnsController.isAllDataTypesDefined()) {\r\n                                filter = gridCoreUtils.combineFilters([additionalFilter, filter])\r\n                            }\r\n                        }\r\n                        filter = columnsController.updateFilter(filter, returnDataField || dataSource.remoteOperations().filtering)\r\n                    }\r\n                    return filter\r\n                },\r\n                waitReady: function() {\r\n                    if (this._updateLockCount) {\r\n                        this._readyDeferred = new Deferred;\r\n                        return this._readyDeferred\r\n                    }\r\n                    return when()\r\n                },\r\n                _endUpdateCore: function() {\r\n                    var changes = this._changes;\r\n                    if (changes.length) {\r\n                        this._changes = [];\r\n                        var repaintChangesOnly = changes.every(change => change.repaintChangesOnly);\r\n                        this.updateItems(1 === changes.length ? changes[0] : {\r\n                            repaintChangesOnly: repaintChangesOnly\r\n                        })\r\n                    }\r\n                    if (this._readyDeferred) {\r\n                        this._readyDeferred.resolve();\r\n                        this._readyDeferred = null\r\n                    }\r\n                },\r\n                _handleCustomizeStoreLoadOptions: function(e) {\r\n                    var _storeLoadOptions$fil;\r\n                    var columnsController = this._columnsController;\r\n                    var dataSource = this._dataSource;\r\n                    var storeLoadOptions = e.storeLoadOptions;\r\n                    if (e.isCustomLoading && !storeLoadOptions.isLoadingAll) {\r\n                        return\r\n                    }\r\n                    storeLoadOptions.filter = this.combinedFilter(storeLoadOptions.filter);\r\n                    if (1 === (null === (_storeLoadOptions$fil = storeLoadOptions.filter) || void 0 === _storeLoadOptions$fil ? void 0 : _storeLoadOptions$fil.length) && \"!\" === storeLoadOptions.filter[0]) {\r\n                        e.data = [];\r\n                        e.extra = e.extra || {};\r\n                        e.extra.totalCount = 0\r\n                    }\r\n                    if (!columnsController.isDataSourceApplied()) {\r\n                        columnsController.updateColumnDataTypes(dataSource)\r\n                    }\r\n                    this._columnsUpdating = true;\r\n                    columnsController.updateSortingGrouping(dataSource, !this._useSortingGroupingFromColumns);\r\n                    this._columnsUpdating = false;\r\n                    storeLoadOptions.sort = columnsController.getSortDataSourceParameters();\r\n                    storeLoadOptions.group = columnsController.getGroupDataSourceParameters();\r\n                    dataSource.sort(storeLoadOptions.sort);\r\n                    dataSource.group(storeLoadOptions.group);\r\n                    storeLoadOptions.sort = columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().sorting);\r\n                    e.group = columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().grouping)\r\n                },\r\n                _handleColumnsChanged: function(e) {\r\n                    var that = this;\r\n                    var changeTypes = e.changeTypes;\r\n                    var optionNames = e.optionNames;\r\n                    var filterValue;\r\n                    var filterValues;\r\n                    var filterApplied;\r\n                    if (changeTypes.sorting || changeTypes.grouping) {\r\n                        if (that._dataSource && !that._columnsUpdating) {\r\n                            that._dataSource.group(that._columnsController.getGroupDataSourceParameters());\r\n                            that._dataSource.sort(that._columnsController.getSortDataSourceParameters());\r\n                            that.reload()\r\n                        }\r\n                    } else if (changeTypes.columns) {\r\n                        filterValues = that._columnsController.columnOption(e.columnIndex, \"filterValues\");\r\n                        if (optionNames.filterValues || optionNames.filterType && Array.isArray(filterValues) || optionNames.filterValue || optionNames.selectedFilterOperation || optionNames.allowFiltering) {\r\n                            filterValue = that._columnsController.columnOption(e.columnIndex, \"filterValue\");\r\n                            if (Array.isArray(filterValues) || void 0 === e.columnIndex || isDefined(filterValue) || !optionNames.selectedFilterOperation || optionNames.filterValue) {\r\n                                that._applyFilter();\r\n                                filterApplied = true\r\n                            }\r\n                        }\r\n                        if (!that._needApplyFilter && !gridCoreUtils.checkChanges(optionNames, [\"width\", \"visibleWidth\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"filterValues\", \"filterType\"])) {\r\n                            that._columnsController.columnsChanged.add((function updateItemsHandler(change) {\r\n                                var _change$changeTypes;\r\n                                that._columnsController.columnsChanged.remove(updateItemsHandler);\r\n                                that.updateItems({\r\n                                    repaintChangesOnly: false,\r\n                                    virtualColumnsScrolling: null === change || void 0 === change ? void 0 : null === (_change$changeTypes = change.changeTypes) || void 0 === _change$changeTypes ? void 0 : _change$changeTypes.virtualColumnsScrolling\r\n                                })\r\n                            }))\r\n                        }\r\n                        if (isDefined(optionNames.visible)) {\r\n                            var column = that._columnsController.columnOption(e.columnIndex);\r\n                            if (column && (isDefined(column.filterValue) || isDefined(column.filterValues))) {\r\n                                that._applyFilter();\r\n                                filterApplied = true\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!filterApplied && changeTypes.filtering) {\r\n                        that.reload()\r\n                    }\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var columnsController = that._columnsController;\r\n                    var isAsyncDataSourceApplying = false;\r\n                    this._useSortingGroupingFromColumns = false;\r\n                    if (dataSource && !that._isDataSourceApplying) {\r\n                        that._isDataSourceApplying = true;\r\n                        when(that._columnsController.applyDataSource(dataSource)).done((function() {\r\n                            if (that._isLoading) {\r\n                                that._handleLoadingChanged(false)\r\n                            }\r\n                            if (isAsyncDataSourceApplying && e && e.isDelayed) {\r\n                                e.isDelayed = false\r\n                            }\r\n                            that._isDataSourceApplying = false;\r\n                            var needApplyFilter = that._needApplyFilter;\r\n                            that._needApplyFilter = false;\r\n                            if (needApplyFilter && !that._isAllDataTypesDefined && (additionalFilter = that._calculateAdditionalFilter(), additionalFilter && additionalFilter.length)) {\r\n                                errors.log(\"W1005\", that.component.NAME);\r\n                                that._applyFilter()\r\n                            } else {\r\n                                that.updateItems(e, true)\r\n                            }\r\n                            var additionalFilter\r\n                        })).fail((function() {\r\n                            that._isDataSourceApplying = false\r\n                        }));\r\n                        if (that._isDataSourceApplying) {\r\n                            isAsyncDataSourceApplying = true;\r\n                            that._handleLoadingChanged(true)\r\n                        }\r\n                        that._needApplyFilter = !that._columnsController.isDataSourceApplied();\r\n                        that._isAllDataTypesDefined = columnsController.isAllDataTypesDefined()\r\n                    }\r\n                },\r\n                _handleLoadingChanged: function(isLoading) {\r\n                    this._isLoading = isLoading;\r\n                    this._fireLoadingChanged()\r\n                },\r\n                _handleLoadError: function(e) {\r\n                    this.dataErrorOccurred.fire(e)\r\n                },\r\n                _handleDataPushed: function(changes) {\r\n                    this.pushed.fire(changes)\r\n                },\r\n                fireError: function() {\r\n                    this.dataErrorOccurred.fire(errors.Error.apply(errors, arguments))\r\n                },\r\n                _setPagingOptions: function(dataSource) {\r\n                    var pageIndex = this.option(\"paging.pageIndex\");\r\n                    var pageSize = this.option(\"paging.pageSize\");\r\n                    var pagingEnabled = this.option(\"paging.enabled\");\r\n                    var scrollingMode = this.option(\"scrolling.mode\");\r\n                    var appendMode = \"infinite\" === scrollingMode;\r\n                    var virtualMode = \"virtual\" === scrollingMode;\r\n                    var paginate = pagingEnabled || virtualMode || appendMode;\r\n                    var isPaginateChanged = false;\r\n                    var isPageSizeChanged = false;\r\n                    var isPageIndexChanged = false;\r\n                    dataSource.requireTotalCount(!appendMode);\r\n                    if (void 0 !== pagingEnabled && dataSource.paginate() !== paginate) {\r\n                        dataSource.paginate(paginate);\r\n                        isPaginateChanged = true\r\n                    }\r\n                    if (void 0 !== pageSize && dataSource.pageSize() !== pageSize) {\r\n                        dataSource.pageSize(pageSize);\r\n                        isPageSizeChanged = true\r\n                    }\r\n                    if (void 0 !== pageIndex && dataSource.pageIndex() !== pageIndex) {\r\n                        dataSource.pageIndex(pageIndex);\r\n                        isPageIndexChanged = true\r\n                    }\r\n                    if (isPaginateChanged || isPageSizeChanged || isPageIndexChanged) {\r\n                        return {\r\n                            isPaginateChanged: isPaginateChanged,\r\n                            isPageSizeChanged: isPageSizeChanged,\r\n                            isPageIndexChanged: isPageIndexChanged\r\n                        }\r\n                    }\r\n                    return false\r\n                },\r\n                _getSpecificDataSourceOption: function() {\r\n                    var dataSource = this.option(\"dataSource\");\r\n                    if (Array.isArray(dataSource)) {\r\n                        return {\r\n                            store: {\r\n                                type: \"array\",\r\n                                data: dataSource,\r\n                                key: this.option(\"keyExpr\")\r\n                            }\r\n                        }\r\n                    }\r\n                    return dataSource\r\n                },\r\n                _initDataSource: function() {\r\n                    var oldDataSource = this._dataSource;\r\n                    this.callBase();\r\n                    var dataSource = this._dataSource;\r\n                    this._useSortingGroupingFromColumns = true;\r\n                    this._cachedProcessedItems = null;\r\n                    if (dataSource) {\r\n                        var changedPagingOptions = this._setPagingOptions(dataSource);\r\n                        this._isPaging = null === changedPagingOptions || void 0 === changedPagingOptions ? void 0 : changedPagingOptions.isPageIndexChanged;\r\n                        this.setDataSource(dataSource)\r\n                    } else if (oldDataSource) {\r\n                        this.updateItems()\r\n                    }\r\n                },\r\n                _loadDataSource: function() {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var result = new Deferred;\r\n                    when(this._columnsController.refresh(true)).always((function() {\r\n                        if (dataSource) {\r\n                            dataSource.load().done((function() {\r\n                                that._isPaging = false;\r\n                                result.resolve.apply(result, arguments)\r\n                            })).fail(result.reject)\r\n                        } else {\r\n                            result.resolve()\r\n                        }\r\n                    }));\r\n                    return result.promise()\r\n                },\r\n                _beforeProcessItems: function(items) {\r\n                    return items.slice(0)\r\n                },\r\n                getRowIndexDelta: function() {\r\n                    return 0\r\n                },\r\n                getDataIndex: function(change) {\r\n                    var visibleItems = this._items;\r\n                    var lastVisibleItem = \"append\" === change.changeType && visibleItems.length > 0 ? visibleItems[visibleItems.length - 1] : null;\r\n                    return isDefined(null === lastVisibleItem || void 0 === lastVisibleItem ? void 0 : lastVisibleItem.dataIndex) ? lastVisibleItem.dataIndex + 1 : 0\r\n                },\r\n                _processItems: function(items, change) {\r\n                    var that = this;\r\n                    var rowIndexDelta = that.getRowIndexDelta();\r\n                    var changeType = change.changeType;\r\n                    var visibleColumns = that._columnsController.getVisibleColumns(null, \"loadingAll\" === changeType);\r\n                    var dataIndex = this.getDataIndex(change);\r\n                    var options = {\r\n                        visibleColumns: visibleColumns,\r\n                        dataIndex: dataIndex\r\n                    };\r\n                    var result = [];\r\n                    each(items, (function(index, item) {\r\n                        if (isDefined(item)) {\r\n                            options.rowIndex = index - rowIndexDelta;\r\n                            item = that._processItem(item, options);\r\n                            result.push(item)\r\n                        }\r\n                    }));\r\n                    return result\r\n                },\r\n                _processItem: function(item, options) {\r\n                    item = this._generateDataItem(item, options);\r\n                    item = this._processDataItem(item, options);\r\n                    item.dataIndex = options.dataIndex++;\r\n                    return item\r\n                },\r\n                _generateDataItem: function(data) {\r\n                    return {\r\n                        rowType: \"data\",\r\n                        data: data,\r\n                        key: this.keyOf(data)\r\n                    }\r\n                },\r\n                _processDataItem: function(dataItem, options) {\r\n                    dataItem.values = this.generateDataValues(dataItem.data, options.visibleColumns);\r\n                    return dataItem\r\n                },\r\n                generateDataValues: function(data, columns, isModified) {\r\n                    var values = [];\r\n                    var value;\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        var column = columns[i];\r\n                        value = isModified ? void 0 : null;\r\n                        if (!column.command) {\r\n                            if (column.calculateCellValue) {\r\n                                value = column.calculateCellValue(data)\r\n                            } else if (column.dataField) {\r\n                                value = data[column.dataField]\r\n                            }\r\n                        }\r\n                        values.push(value)\r\n                    }\r\n                    return values\r\n                },\r\n                _applyChange: function(change) {\r\n                    if (\"update\" === change.changeType) {\r\n                        this._applyChangeUpdate(change)\r\n                    } else if (this.items().length && change.repaintChangesOnly && \"refresh\" === change.changeType) {\r\n                        this._applyChangesOnly(change)\r\n                    } else if (\"refresh\" === change.changeType) {\r\n                        this._applyChangeFull(change)\r\n                    }\r\n                },\r\n                _applyChangeFull: function(change) {\r\n                    this._items = change.items.slice(0)\r\n                },\r\n                _getRowIndices: function(change) {\r\n                    var rowIndices = change.rowIndices.slice(0);\r\n                    var rowIndexDelta = this.getRowIndexDelta();\r\n                    rowIndices.sort((function(a, b) {\r\n                        return a - b\r\n                    }));\r\n                    for (var i = 0; i < rowIndices.length; i++) {\r\n                        var correctedRowIndex = rowIndices[i];\r\n                        if (change.allowInvisibleRowIndices) {\r\n                            correctedRowIndex += rowIndexDelta\r\n                        }\r\n                        if (correctedRowIndex < 0) {\r\n                            rowIndices.splice(i, 1);\r\n                            i--\r\n                        }\r\n                    }\r\n                    return rowIndices\r\n                },\r\n                _applyChangeUpdate: function(change) {\r\n                    var that = this;\r\n                    var items = change.items;\r\n                    var rowIndices = that._getRowIndices(change);\r\n                    var rowIndexDelta = that.getRowIndexDelta();\r\n                    var repaintChangesOnly = that.option(\"repaintChangesOnly\");\r\n                    var prevIndex = -1;\r\n                    var rowIndexCorrection = 0;\r\n                    var changeType;\r\n                    change.items = [];\r\n                    change.rowIndices = [];\r\n                    change.columnIndices = [];\r\n                    change.changeTypes = [];\r\n                    var equalItems = function(item1, item2, strict) {\r\n                        var result = item1 && item2 && equalByValue(item1.key, item2.key);\r\n                        if (result && strict) {\r\n                            result = item1.rowType === item2.rowType && (\"detail\" !== item2.rowType || item1.isEditing === item2.isEditing)\r\n                        }\r\n                        return result\r\n                    };\r\n                    each(rowIndices, (function(index, rowIndex) {\r\n                        var columnIndices;\r\n                        rowIndex += rowIndexCorrection + rowIndexDelta;\r\n                        if (prevIndex === rowIndex) {\r\n                            return\r\n                        }\r\n                        prevIndex = rowIndex;\r\n                        var oldItem = that._items[rowIndex];\r\n                        var oldNextItem = that._items[rowIndex + 1];\r\n                        var newItem = items[rowIndex];\r\n                        var newNextItem = items[rowIndex + 1];\r\n                        var strict = equalItems(oldItem, oldNextItem) || equalItems(newItem, newNextItem);\r\n                        if (newItem) {\r\n                            newItem.rowIndex = rowIndex;\r\n                            change.items.push(newItem)\r\n                        }\r\n                        if (oldItem && newItem && equalItems(oldItem, newItem, strict)) {\r\n                            changeType = \"update\";\r\n                            that._items[rowIndex] = newItem;\r\n                            if (oldItem.visible !== newItem.visible) {\r\n                                change.items.splice(-1, 1, {\r\n                                    visible: newItem.visible\r\n                                })\r\n                            } else if (repaintChangesOnly && !change.isFullUpdate) {\r\n                                columnIndices = that._partialUpdateRow(oldItem, newItem, rowIndex - rowIndexDelta)\r\n                            }\r\n                        } else if (newItem && !oldItem || newNextItem && equalItems(oldItem, newNextItem, strict)) {\r\n                            changeType = \"insert\";\r\n                            that._items.splice(rowIndex, 0, newItem);\r\n                            rowIndexCorrection++\r\n                        } else if (oldItem && !newItem || oldNextItem && equalItems(newItem, oldNextItem, strict)) {\r\n                            changeType = \"remove\";\r\n                            that._items.splice(rowIndex, 1);\r\n                            rowIndexCorrection--;\r\n                            prevIndex = -1\r\n                        } else if (newItem) {\r\n                            changeType = \"update\";\r\n                            that._items[rowIndex] = newItem\r\n                        } else {\r\n                            return\r\n                        }\r\n                        change.rowIndices.push(rowIndex - rowIndexDelta);\r\n                        change.changeTypes.push(changeType);\r\n                        change.columnIndices.push(columnIndices)\r\n                    }))\r\n                },\r\n                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    if (JSON.stringify(oldRow.values[columnIndex]) !== JSON.stringify(newRow.values[columnIndex])) {\r\n                        return true\r\n                    }\r\n\r\n                    function isCellModified(row, columnIndex) {\r\n                        return row.modifiedValues ? void 0 !== row.modifiedValues[columnIndex] : false\r\n                    }\r\n                    if (isCellModified(oldRow, columnIndex) !== isCellModified(newRow, columnIndex)) {\r\n                        return true\r\n                    }\r\n                    return false\r\n                },\r\n                _getChangedColumnIndices: function(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\r\n                    var columnIndices;\r\n                    if (oldItem.rowType === newItem.rowType) {\r\n                        if (\"group\" !== newItem.rowType && \"groupFooter\" !== newItem.rowType) {\r\n                            columnIndices = [];\r\n                            if (\"detail\" !== newItem.rowType) {\r\n                                for (var columnIndex = 0; columnIndex < oldItem.values.length; columnIndex++) {\r\n                                    if (this._isCellChanged(oldItem, newItem, visibleRowIndex, columnIndex, isLiveUpdate)) {\r\n                                        columnIndices.push(columnIndex)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (\"group\" === newItem.rowType && newItem.isExpanded === oldItem.isExpanded && oldItem.cells) {\r\n                            columnIndices = oldItem.cells.map((cell, index) => {\r\n                                var _cell$column;\r\n                                return \"groupExpand\" !== (null === (_cell$column = cell.column) || void 0 === _cell$column ? void 0 : _cell$column.type) ? index : -1\r\n                            }).filter(index => index >= 0)\r\n                        }\r\n                    }\r\n                    return columnIndices\r\n                },\r\n                _partialUpdateRow: function(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\r\n                    var _changedColumnIndices;\r\n                    var changedColumnIndices = this._getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate);\r\n                    if (null !== (_changedColumnIndices = changedColumnIndices) && void 0 !== _changedColumnIndices && _changedColumnIndices.length && this.option(\"dataRowTemplate\")) {\r\n                        changedColumnIndices = void 0\r\n                    }\r\n                    if (changedColumnIndices) {\r\n                        oldItem.cells && oldItem.cells.forEach((function(cell, columnIndex) {\r\n                            var isCellChanged = changedColumnIndices.indexOf(columnIndex) >= 0;\r\n                            if (!isCellChanged && cell && cell.update) {\r\n                                cell.update(newItem)\r\n                            }\r\n                        }));\r\n                        newItem.update = oldItem.update;\r\n                        newItem.watch = oldItem.watch;\r\n                        newItem.cells = oldItem.cells;\r\n                        if (isLiveUpdate) {\r\n                            newItem.oldValues = oldItem.values\r\n                        }\r\n                        oldItem.update && oldItem.update(newItem)\r\n                    }\r\n                    return changedColumnIndices\r\n                },\r\n                _isItemEquals: function(item1, item2) {\r\n                    if (JSON.stringify(item1.values) !== JSON.stringify(item2.values)) {\r\n                        return false\r\n                    }\r\n                    if ([\"modified\", \"isNewRow\", \"removed\", \"isEditing\"].some(field => item1[field] !== item2[field])) {\r\n                        return false\r\n                    }\r\n                    if (\"group\" === item1.rowType || \"groupFooter\" === item1.rowType) {\r\n                        var _item1$data, _item2$data, _item1$data2, _item2$data2;\r\n                        var expandedMatch = item1.isExpanded === item2.isExpanded;\r\n                        var summaryCellsMatch = JSON.stringify(item1.summaryCells) === JSON.stringify(item2.summaryCells);\r\n                        var continuationMatch = (null === (_item1$data = item1.data) || void 0 === _item1$data ? void 0 : _item1$data.isContinuation) === (null === (_item2$data = item2.data) || void 0 === _item2$data ? void 0 : _item2$data.isContinuation) && (null === (_item1$data2 = item1.data) || void 0 === _item1$data2 ? void 0 : _item1$data2.isContinuationOnNextPage) === (null === (_item2$data2 = item2.data) || void 0 === _item2$data2 ? void 0 : _item2$data2.isContinuationOnNextPage);\r\n                        if (!expandedMatch || !summaryCellsMatch || !continuationMatch) {\r\n                            return false\r\n                        }\r\n                    }\r\n                    return true\r\n                },\r\n                _applyChangesOnly: function(change) {\r\n                    var _change$isLiveUpdate;\r\n                    var rowIndices = [];\r\n                    var columnIndices = [];\r\n                    var changeTypes = [];\r\n                    var items = [];\r\n                    var newIndexByKey = {};\r\n                    var isLiveUpdate = null !== (_change$isLiveUpdate = null === change || void 0 === change ? void 0 : change.isLiveUpdate) && void 0 !== _change$isLiveUpdate ? _change$isLiveUpdate : true;\r\n\r\n                    function getRowKey(row) {\r\n                        if (row) {\r\n                            return row.rowType + \",\" + JSON.stringify(row.key)\r\n                        }\r\n                    }\r\n                    var currentItems = this._items;\r\n                    var oldItems = currentItems.slice();\r\n                    change.items.forEach((function(item, index) {\r\n                        var key = getRowKey(item);\r\n                        newIndexByKey[key] = index;\r\n                        item.rowIndex = index\r\n                    }));\r\n                    var result = findChanges(oldItems, change.items, getRowKey, (item1, item2) => {\r\n                        if (!this._isItemEquals(item1, item2)) {\r\n                            return false\r\n                        }\r\n                        if (item1.cells) {\r\n                            item1.update && item1.update(item2);\r\n                            item1.cells.forEach((function(cell) {\r\n                                if (cell && cell.update) {\r\n                                    cell.update(item2, true)\r\n                                }\r\n                            }))\r\n                        }\r\n                        return true\r\n                    });\r\n                    if (!result) {\r\n                        this._applyChangeFull(change);\r\n                        return\r\n                    }\r\n                    result.forEach(change => {\r\n                        switch (change.type) {\r\n                            case \"update\":\r\n                                var index = change.index;\r\n                                var newItem = change.data;\r\n                                var oldItem = change.oldItem;\r\n                                var changedColumnIndices = this._partialUpdateRow(oldItem, newItem, index, isLiveUpdate);\r\n                                rowIndices.push(index);\r\n                                changeTypes.push(\"update\");\r\n                                items.push(newItem);\r\n                                currentItems[index] = newItem;\r\n                                columnIndices.push(changedColumnIndices);\r\n                                break;\r\n                            case \"insert\":\r\n                                rowIndices.push(change.index);\r\n                                changeTypes.push(\"insert\");\r\n                                items.push(change.data);\r\n                                columnIndices.push(void 0);\r\n                                currentItems.splice(change.index, 0, change.data);\r\n                                break;\r\n                            case \"remove\":\r\n                                rowIndices.push(change.index);\r\n                                changeTypes.push(\"remove\");\r\n                                currentItems.splice(change.index, 1);\r\n                                items.push(change.oldItem);\r\n                                columnIndices.push(void 0)\r\n                        }\r\n                    });\r\n                    change.repaintChangesOnly = true;\r\n                    change.changeType = \"update\";\r\n                    change.rowIndices = rowIndices;\r\n                    change.columnIndices = columnIndices;\r\n                    change.changeTypes = changeTypes;\r\n                    change.items = items;\r\n                    if (oldItems.length) {\r\n                        change.isLiveUpdate = true\r\n                    }\r\n                    this._correctRowIndices(rowIndex => {\r\n                        var oldRowIndexOffset = this._rowIndexOffset || 0;\r\n                        var rowIndexOffset = this.getRowIndexOffset();\r\n                        var oldItem = oldItems[rowIndex - oldRowIndexOffset];\r\n                        var key = getRowKey(oldItem);\r\n                        var newVisibleRowIndex = newIndexByKey[key];\r\n                        return newVisibleRowIndex >= 0 ? newVisibleRowIndex + rowIndexOffset - rowIndex : 0\r\n                    })\r\n                },\r\n                _correctRowIndices: noop,\r\n                _afterProcessItems: function(items) {\r\n                    return items\r\n                },\r\n                _updateItemsCore: function(change) {\r\n                    var items;\r\n                    var dataSource = this._dataSource;\r\n                    var changeType = change.changeType || \"refresh\";\r\n                    change.changeType = changeType;\r\n                    if (dataSource) {\r\n                        var cachedProcessedItems = this._cachedProcessedItems;\r\n                        if (change.useProcessedItemsCache && cachedProcessedItems) {\r\n                            items = cachedProcessedItems\r\n                        } else {\r\n                            items = change.items || dataSource.items();\r\n                            items = this._beforeProcessItems(items);\r\n                            items = this._processItems(items, change);\r\n                            this._cachedProcessedItems = items\r\n                        }\r\n                        items = this._afterProcessItems(items, change);\r\n                        change.items = items;\r\n                        var oldItems = this._items.length === items.length && this._items;\r\n                        this._applyChange(change);\r\n                        var rowIndexDelta = this.getRowIndexDelta();\r\n                        each(this._items, (index, item) => {\r\n                            item.rowIndex = index - rowIndexDelta;\r\n                            if (oldItems) {\r\n                                item.cells = oldItems[index].cells || []\r\n                            }\r\n                            var newItem = items[index];\r\n                            if (newItem) {\r\n                                item.loadIndex = newItem.loadIndex\r\n                            }\r\n                        });\r\n                        this._rowIndexOffset = this.getRowIndexOffset()\r\n                    } else {\r\n                        this._items = []\r\n                    }\r\n                },\r\n                _handleChanging: function(e) {\r\n                    var rows = this.getVisibleRows();\r\n                    var dataSource = this.dataSource();\r\n                    if (dataSource) {\r\n                        e.changes.forEach((function(change) {\r\n                            if (\"insert\" === change.type && change.index >= 0) {\r\n                                var dataIndex = 0;\r\n                                for (var i = 0; i < change.index; i++) {\r\n                                    var row = rows[i];\r\n                                    if (row && (\"data\" === row.rowType || \"group\" === row.rowType)) {\r\n                                        dataIndex++\r\n                                    }\r\n                                }\r\n                                change.index = dataIndex\r\n                            }\r\n                        }))\r\n                    }\r\n                },\r\n                updateItems: function(change, isDataChanged) {\r\n                    change = change || {};\r\n                    if (void 0 !== this._repaintChangesOnly) {\r\n                        var _change$repaintChange;\r\n                        change.repaintChangesOnly = null !== (_change$repaintChange = change.repaintChangesOnly) && void 0 !== _change$repaintChange ? _change$repaintChange : this._repaintChangesOnly;\r\n                        change.needUpdateDimensions = change.needUpdateDimensions || this._needUpdateDimensions\r\n                    } else if (change.changes) {\r\n                        change.repaintChangesOnly = this.option(\"repaintChangesOnly\")\r\n                    } else if (isDataChanged) {\r\n                        var operationTypes = this.dataSource().operationTypes();\r\n                        change.repaintChangesOnly = operationTypes && !operationTypes.grouping && !operationTypes.filtering && this.option(\"repaintChangesOnly\");\r\n                        change.isDataChanged = true;\r\n                        if (operationTypes && (operationTypes.reload || operationTypes.paging || operationTypes.groupExpanding)) {\r\n                            change.needUpdateDimensions = true\r\n                        }\r\n                    }\r\n                    if (this._updateLockCount && !change.cancel) {\r\n                        this._changes.push(change);\r\n                        return\r\n                    }\r\n                    this._updateItemsCore(change);\r\n                    if (change.cancel) {\r\n                        return\r\n                    }\r\n                    this._fireChanged(change)\r\n                },\r\n                loadingOperationTypes: function() {\r\n                    var dataSource = this.dataSource();\r\n                    return dataSource && dataSource.loadingOperationTypes() || {}\r\n                },\r\n                _fireChanged: function(change) {\r\n                    if (this._currentOperationTypes) {\r\n                        change.operationTypes = this._currentOperationTypes;\r\n                        this._currentOperationTypes = null\r\n                    }\r\n                    deferRender(() => {\r\n                        this.changed.fire(change)\r\n                    })\r\n                },\r\n                isLoading: function() {\r\n                    return this._isLoading || this._isCustomLoading\r\n                },\r\n                _fireLoadingChanged: function() {\r\n                    this.loadingChanged.fire(this.isLoading(), this._loadingText)\r\n                },\r\n                _calculateAdditionalFilter: function() {\r\n                    return null\r\n                },\r\n                _applyFilter: function() {\r\n                    var dataSource = this._dataSource;\r\n                    if (dataSource) {\r\n                        dataSource.pageIndex(0);\r\n                        this._isFilterApplying = true;\r\n                        return this.reload().done(() => {\r\n                            if (this._isFilterApplying) {\r\n                                this.pageChanged.fire()\r\n                            }\r\n                        })\r\n                    }\r\n                },\r\n                resetFilterApplying: function() {\r\n                    this._isFilterApplying = false\r\n                },\r\n                filter: function(filterExpr) {\r\n                    var dataSource = this._dataSource;\r\n                    var filter = dataSource && dataSource.filter();\r\n                    if (0 === arguments.length) {\r\n                        return filter\r\n                    }\r\n                    filterExpr = arguments.length > 1 ? Array.prototype.slice.call(arguments, 0) : filterExpr;\r\n                    if (gridCoreUtils.equalFilterParameters(filter, filterExpr)) {\r\n                        return\r\n                    }\r\n                    if (dataSource) {\r\n                        dataSource.filter(filterExpr)\r\n                    }\r\n                    this._applyFilter()\r\n                },\r\n                clearFilter: function(filterName) {\r\n                    var that = this;\r\n                    var columnsController = that._columnsController;\r\n                    var clearColumnOption = function(optionName) {\r\n                        var columnCount = columnsController.columnCount();\r\n                        for (var index = 0; index < columnCount; index++) {\r\n                            columnsController.columnOption(index, optionName, void 0)\r\n                        }\r\n                    };\r\n                    that.component.beginUpdate();\r\n                    if (arguments.length > 0) {\r\n                        switch (filterName) {\r\n                            case \"dataSource\":\r\n                                that.filter(null);\r\n                                break;\r\n                            case \"search\":\r\n                                that.searchByText(\"\");\r\n                                break;\r\n                            case \"header\":\r\n                                clearColumnOption(\"filterValues\");\r\n                                break;\r\n                            case \"row\":\r\n                                clearColumnOption(\"filterValue\")\r\n                        }\r\n                    } else {\r\n                        that.filter(null);\r\n                        that.searchByText(\"\");\r\n                        clearColumnOption(\"filterValue\");\r\n                        clearColumnOption(\"bufferedFilterValue\");\r\n                        clearColumnOption(\"filterValues\")\r\n                    }\r\n                    that.component.endUpdate()\r\n                },\r\n                _fireDataSourceChanged: function() {\r\n                    var that = this;\r\n                    that.changed.add((function changedHandler() {\r\n                        that.changed.remove(changedHandler);\r\n                        that.dataSourceChanged.fire()\r\n                    }))\r\n                },\r\n                _getDataSourceAdapter: noop,\r\n                _createDataSourceAdapterCore: function(dataSource, remoteOperations) {\r\n                    var dataSourceAdapterProvider = this._getDataSourceAdapter();\r\n                    var dataSourceAdapter = dataSourceAdapterProvider.create(this.component);\r\n                    dataSourceAdapter.init(dataSource, remoteOperations);\r\n                    return dataSourceAdapter\r\n                },\r\n                isLocalStore: function(store) {\r\n                    store = store || this.store();\r\n                    return store instanceof ArrayStore\r\n                },\r\n                isCustomStore: function(store) {\r\n                    store = store || this.store();\r\n                    return store instanceof CustomStore\r\n                },\r\n                _createDataSourceAdapter: function(dataSource) {\r\n                    var remoteOperations = this.option(\"remoteOperations\");\r\n                    var store = dataSource.store();\r\n                    var enabledRemoteOperations = {\r\n                        filtering: true,\r\n                        sorting: true,\r\n                        paging: true,\r\n                        grouping: true,\r\n                        summary: true\r\n                    };\r\n                    if (remoteOperations && remoteOperations.groupPaging) {\r\n                        remoteOperations = extend({}, enabledRemoteOperations, remoteOperations)\r\n                    }\r\n                    if (\"auto\" === remoteOperations) {\r\n                        remoteOperations = this.isLocalStore(store) || this.isCustomStore(store) ? {} : {\r\n                            filtering: true,\r\n                            sorting: true,\r\n                            paging: true\r\n                        }\r\n                    }\r\n                    if (true === remoteOperations) {\r\n                        remoteOperations = enabledRemoteOperations\r\n                    }\r\n                    return this._createDataSourceAdapterCore(dataSource, remoteOperations)\r\n                },\r\n                setDataSource: function(dataSource) {\r\n                    var oldDataSource = this._dataSource;\r\n                    if (!dataSource && oldDataSource) {\r\n                        oldDataSource.cancelAll();\r\n                        oldDataSource.changed.remove(this._dataChangedHandler);\r\n                        oldDataSource.loadingChanged.remove(this._loadingChangedHandler);\r\n                        oldDataSource.loadError.remove(this._loadErrorHandler);\r\n                        oldDataSource.customizeStoreLoadOptions.remove(this._customizeStoreLoadOptionsHandler);\r\n                        oldDataSource.changing.remove(this._changingHandler);\r\n                        oldDataSource.pushed.remove(this._dataPushedHandler);\r\n                        oldDataSource.dispose(this._isSharedDataSource)\r\n                    }\r\n                    if (dataSource) {\r\n                        dataSource = this._createDataSourceAdapter(dataSource)\r\n                    }\r\n                    this._dataSource = dataSource;\r\n                    if (dataSource) {\r\n                        this._fireDataSourceChanged();\r\n                        this._isLoading = !dataSource.isLoaded();\r\n                        this._needApplyFilter = true;\r\n                        this._isAllDataTypesDefined = this._columnsController.isAllDataTypesDefined();\r\n                        dataSource.changed.add(this._dataChangedHandler);\r\n                        dataSource.loadingChanged.add(this._loadingChangedHandler);\r\n                        dataSource.loadError.add(this._loadErrorHandler);\r\n                        dataSource.customizeStoreLoadOptions.add(this._customizeStoreLoadOptionsHandler);\r\n                        dataSource.changing.add(this._changingHandler);\r\n                        dataSource.pushed.add(this._dataPushedHandler)\r\n                    }\r\n                },\r\n                items: function() {\r\n                    return this._items\r\n                },\r\n                isEmpty: function() {\r\n                    return !this.items().length\r\n                },\r\n                pageCount: function() {\r\n                    return this._dataSource ? this._dataSource.pageCount() : 1\r\n                },\r\n                dataSource: function() {\r\n                    return this._dataSource\r\n                },\r\n                store: function() {\r\n                    var dataSource = this._dataSource;\r\n                    return dataSource && dataSource.store()\r\n                },\r\n                loadAll: function(data) {\r\n                    var that = this;\r\n                    var d = new Deferred;\r\n                    var dataSource = that._dataSource;\r\n                    if (dataSource) {\r\n                        if (data) {\r\n                            var options = {\r\n                                data: data,\r\n                                isCustomLoading: true,\r\n                                storeLoadOptions: {\r\n                                    isLoadingAll: true\r\n                                },\r\n                                loadOptions: {\r\n                                    filter: that.getCombinedFilter(),\r\n                                    group: dataSource.group(),\r\n                                    sort: dataSource.sort()\r\n                                }\r\n                            };\r\n                            dataSource._handleDataLoaded(options);\r\n                            when(options.data).done((function(data) {\r\n                                data = that._beforeProcessItems(data);\r\n                                d.resolve(that._processItems(data, {\r\n                                    changeType: \"loadingAll\"\r\n                                }), options.extra && options.extra.summary)\r\n                            })).fail(d.reject)\r\n                        } else if (!dataSource.isLoading()) {\r\n                            var loadOptions = extend({}, dataSource.loadOptions(), {\r\n                                isLoadingAll: true,\r\n                                requireTotalCount: false\r\n                            });\r\n                            dataSource.load(loadOptions).done((function(items, extra) {\r\n                                items = that._beforeProcessItems(items);\r\n                                items = that._processItems(items, {\r\n                                    changeType: \"loadingAll\"\r\n                                });\r\n                                d.resolve(items, extra && extra.summary)\r\n                            })).fail(d.reject)\r\n                        } else {\r\n                            d.reject()\r\n                        }\r\n                    } else {\r\n                        d.resolve([])\r\n                    }\r\n                    return d\r\n                },\r\n                getKeyByRowIndex: function(rowIndex, byLoaded) {\r\n                    var item = this.items(byLoaded)[rowIndex];\r\n                    if (item) {\r\n                        return item.key\r\n                    }\r\n                },\r\n                getRowIndexByKey: function(key, byLoaded) {\r\n                    return gridCoreUtils.getIndexByKey(key, this.items(byLoaded))\r\n                },\r\n                keyOf: function(data) {\r\n                    var store = this.store();\r\n                    if (store) {\r\n                        return store.keyOf(data)\r\n                    }\r\n                },\r\n                byKey: function(key) {\r\n                    var store = this.store();\r\n                    var rowIndex = this.getRowIndexByKey(key);\r\n                    var result;\r\n                    if (!store) {\r\n                        return\r\n                    }\r\n                    if (rowIndex >= 0) {\r\n                        result = (new Deferred).resolve(this.items()[rowIndex].data)\r\n                    }\r\n                    return result || store.byKey(key)\r\n                },\r\n                key: function() {\r\n                    var store = this.store();\r\n                    if (store) {\r\n                        return store.key()\r\n                    }\r\n                },\r\n                getRowIndexOffset: function() {\r\n                    return 0\r\n                },\r\n                getDataByKeys: function(rowKeys) {\r\n                    var that = this;\r\n                    var result = new Deferred;\r\n                    var deferreds = [];\r\n                    var data = [];\r\n                    each(rowKeys, (function(index, key) {\r\n                        deferreds.push(that.byKey(key).done((function(keyData) {\r\n                            data[index] = keyData\r\n                        })))\r\n                    }));\r\n                    when.apply($, deferreds).always((function() {\r\n                        result.resolve(data)\r\n                    }));\r\n                    return result\r\n                },\r\n                pageIndex: function(value) {\r\n                    return changePaging(this, \"pageIndex\", value)\r\n                },\r\n                pageSize: function(value) {\r\n                    return changePaging(this, \"pageSize\", value)\r\n                },\r\n                beginCustomLoading: function(messageText) {\r\n                    this._isCustomLoading = true;\r\n                    this._loadingText = messageText || \"\";\r\n                    this._fireLoadingChanged()\r\n                },\r\n                endCustomLoading: function() {\r\n                    this._isCustomLoading = false;\r\n                    this._loadingText = void 0;\r\n                    this._fireLoadingChanged()\r\n                },\r\n                refresh: function(options) {\r\n                    if (true === options) {\r\n                        options = {\r\n                            reload: true,\r\n                            changesOnly: true\r\n                        }\r\n                    } else if (!options) {\r\n                        options = {\r\n                            lookup: true,\r\n                            selection: true,\r\n                            reload: true\r\n                        }\r\n                    }\r\n                    var that = this;\r\n                    var dataSource = that.getDataSource();\r\n                    var changesOnly = options.changesOnly;\r\n                    var d = new Deferred;\r\n                    var customizeLoadResult = function() {\r\n                        that._repaintChangesOnly = !!changesOnly\r\n                    };\r\n                    when(!options.lookup || that._columnsController.refresh()).always((function() {\r\n                        if (options.load || options.reload) {\r\n                            dataSource && dataSource.on(\"customizeLoadResult\", customizeLoadResult);\r\n                            when(that.reload(options.reload, changesOnly)).always((function() {\r\n                                dataSource && dataSource.off(\"customizeLoadResult\", customizeLoadResult);\r\n                                that._repaintChangesOnly = void 0\r\n                            })).done(d.resolve).fail(d.reject)\r\n                        } else {\r\n                            that.updateItems({\r\n                                repaintChangesOnly: options.changesOnly\r\n                            });\r\n                            d.resolve()\r\n                        }\r\n                    }));\r\n                    return d.promise()\r\n                },\r\n                getVisibleRows: function() {\r\n                    return this.items()\r\n                },\r\n                _disposeDataSource: function() {\r\n                    this.setDataSource(null)\r\n                },\r\n                dispose: function() {\r\n                    this._disposeDataSource();\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                repaintRows: function(rowIndexes, changesOnly) {\r\n                    rowIndexes = Array.isArray(rowIndexes) ? rowIndexes : [rowIndexes];\r\n                    if (rowIndexes.length > 1 || isDefined(rowIndexes[0])) {\r\n                        this.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: rowIndexes,\r\n                            isFullUpdate: !changesOnly\r\n                        })\r\n                    }\r\n                },\r\n                skipProcessingPagingChange: function(fullName) {\r\n                    return this._skipProcessingPagingChange && (\"paging.pageIndex\" === fullName || \"paging.pageSize\" === fullName)\r\n                },\r\n                getUserState: function() {\r\n                    return {\r\n                        searchText: this.option(\"searchPanel.text\"),\r\n                        pageIndex: this.pageIndex(),\r\n                        pageSize: this.pageSize()\r\n                    }\r\n                },\r\n                getCachedStoreData: function() {\r\n                    return this._dataSource && this._dataSource.getCachedStoreData()\r\n                },\r\n                isLastPageLoaded: function() {\r\n                    var pageIndex = this.pageIndex();\r\n                    var pageCount = this.pageCount();\r\n                    return pageIndex === pageCount - 1\r\n                }\r\n            };\r\n            gridCoreUtils.proxyMethod(members, \"load\");\r\n            gridCoreUtils.proxyMethod(members, \"reload\");\r\n            gridCoreUtils.proxyMethod(members, \"push\");\r\n            gridCoreUtils.proxyMethod(members, \"itemsCount\", 0);\r\n            gridCoreUtils.proxyMethod(members, \"totalItemsCount\", 0);\r\n            gridCoreUtils.proxyMethod(members, \"hasKnownLastPage\", true);\r\n            gridCoreUtils.proxyMethod(members, \"isLoaded\", true);\r\n            gridCoreUtils.proxyMethod(members, \"totalCount\", 0);\r\n            return members\r\n        }())\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}