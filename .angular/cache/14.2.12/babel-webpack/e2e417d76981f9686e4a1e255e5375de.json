{"ast":null,"code":"/**\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n */\nimport { __extends, __values } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { SpriteState } from \"./SpriteState\";\nimport { SpriteEventDispatcher } from \"./SpriteEvents\";\nexport { SpriteEventDispatcher };\nimport { BaseObjectEvents } from \"./Base\";\nimport { Adapter, globalAdapter } from \"./utils/Adapter\";\nimport { Dictionary, DictionaryTemplate, DictionaryDisposer } from \"./utils/Dictionary\";\nimport { ListDisposer, List } from \"./utils/List\";\nimport { MultiDisposer, Disposer, MutableValueDisposer } from \"./utils/Disposer\";\nimport { Animation, AnimationDisposer } from \"./utils/Animation\";\nimport { getGhostPaper } from \"./rendering/Paper\";\nimport { Container } from \"./Container\";\nimport { Pattern } from \"./rendering/fills/Pattern\";\nimport { LinearGradient } from \"./rendering/fills/LinearGradient\";\nimport { RadialGradient } from \"./rendering/fills/RadialGradient\";\nimport { Color, color, toColor } from \"./utils/Color\";\nimport { getInteraction } from \"./interaction/Interaction\";\nimport { MouseCursorStyle } from \"./interaction/Mouse\";\nimport { options } from \"./Options\";\nimport { registry } from \"./Registry\";\nimport { NumberFormatter } from \"./formatters/NumberFormatter\";\nimport { DateFormatter } from \"./formatters/DateFormatter\";\nimport { DurationFormatter } from \"./formatters/DurationFormatter\";\nimport { getTextFormatter } from \"./formatters/TextFormatter\";\nimport { Language } from \"./utils/Language\";\nimport { Export } from \"./export/Export\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $math from \"./utils/Math\";\nimport * as $strings from \"./utils/Strings\";\nimport * as $array from \"./utils/Array\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\nimport * as $iter from \"./utils/Iterator\";\nimport { system } from \"./System\";\nimport { Percent, percent } from \"./utils/Percent\";\n/**\r\n * Defines list ofvisual properties\r\n */\n\nexport var visualProperties = [\"fill\", \"fillOpacity\", \"stroke\", \"strokeOpacity\", \"strokeWidth\", \"strokeDasharray\", \"strokeDashoffset\", \"strokeLinecap\", \"strokeLinejoin\"]; // do not add opacity here, as it is used for showing/hiding\n\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Sprite represents any displayable element.\r\n *\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n *\r\n * [[Sprite]] class represents the a hierarchical structure. Every object that\r\n * extends [[Sprite]] can have children, that would inherit their properties,\r\n * such as language, formatters, etc.\r\n *\r\n * @see {@link SpriteState}\r\n * @see {@link ISpriteEvents} for a list of available events\r\n * @see {@link ISpriteAdapters} for a list of available Adapters\r\n *\r\n * @todo Review child elements that need to go into `_disposers`\r\n * @important\r\n */\n\nvar Sprite =\n/** @class */\nfunction (_super) {\n  __extends(Sprite, _super);\n  /**\r\n   * Constructor:\r\n   * * Creates initial node\r\n   * * Sets default properties\r\n   * * Creates required default states\r\n   * * Inits accessibility\r\n   */\n\n\n  function Sprite() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Holds values for Sprite's properties.\r\n     */\n\n\n    _this.properties = {};\n    /**\r\n     * @ignore\r\n     */\n\n    _this._eventDispatcher = new SpriteEventDispatcher(_this);\n    /**\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this._bindings = {};\n    /**\r\n     * Holds indicator if this Sprite is a \"template\" to be used for creating\r\n     * other Sprites from and should not be treated as full-fledged element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._isTemplate = false;\n    _this._isPath = false;\n    /**\r\n     * Holds indicator whether this sprite was already initialized.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._inited = false;\n    /**\r\n     * Holds indicator whether this sprite was already initialized and ready.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._ready = false;\n    /**\r\n     * If `sprite.hide()` is called and we have \"hidden\" state and\r\n     * `transitionDuration > 0`, we set `isHiding` flag to `true` in order to\r\n     * avoid restarting animations in case `hide()` method is called multiple\r\n     * times.\r\n     */\n\n    _this.isHiding = false;\n    /**\r\n     * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n     * This was added becaus hidden state might have visibility set to true and so\r\n     * there would not be possible to find out if a sprite is technically hidden or not.\r\n     */\n\n    _this._isHidden = false;\n    /**\r\n     * This property indicates if Sprite is currently being revealed from hidden\r\n     * state. This is used to prevent multiple calls to `sprite.show()` to\r\n     * restart reveal animation. (if enabled)\r\n     */\n\n    _this.isShowing = false;\n    /**\r\n     * Indicates if this element is a standalone instance. A \"standalone\r\n     * instance\" means this is a autonomous object which maintains its own\r\n     * set of controls like Preloader, Export, etc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.isStandaloneInstance = false;\n    /**\r\n     * Indicates if togglable Sprite is currently active (toggled on).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._isActive = false;\n    /**\r\n     * A Sprite element to use as a mask for this Sprite.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._mask = new MutableValueDisposer();\n    /**\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this._positionPrecision = 3;\n    /**\r\n     * An instance of [[Language]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._language = new MutableValueDisposer();\n    /**\r\n     * Holds [[Export]] object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._exporting = new MutableValueDisposer();\n    /**\r\n     * Should this Sprite be included when exporting?\r\n     */\n\n    _this._exportable = true;\n    /**\r\n     * Defines bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._bbox = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    /**\r\n     * Indicates if this element is invalid and should be re-validated (redrawn).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.invalid = false;\n    /**\r\n     * Indicates if this elements position is invalid and should be repositioned\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.positionInvalid = false;\n    /**\r\n     * A collection of key/value pairs that can be used to bind specific Sprite\r\n     * properties to [[DataItem]].\r\n     *\r\n     * For example: `fill` property can be bound to `myCustomColor` field in\r\n     * DataItem. The Sprite will automatically get the value for `fill` from its\r\n     * DataItem.\r\n     *\r\n     * Can be set for each [[SpriteState]] individually to override default\r\n     * bindings.\r\n     *\r\n     * @see {@link SpriteState}\r\n     */\n\n    _this.propertyFields = {};\n    /**\r\n     * Specifies if property changes on this object should be propagated to the\r\n     * objects cloned from this object.\r\n     *\r\n     * This setting affects property changes *after* cloning, since at the moment\r\n     * of cloning all of properties from source object are copied to the clone\r\n     * anyway.\r\n     *\r\n     * @default false\r\n     */\n\n    _this.applyOnClones = false; // unrotated unscaled\n\n    _this._measuredWidthSelf = 0;\n    _this._measuredHeightSelf = 0; // read only, sprite extreme coordinates\n\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxLeft = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxRight = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxTop = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxBottom = 0; // not rotated and not scaled\n\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxLeftSelf = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxRightSelf = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxTopSelf = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxBottomSelf = 0;\n    _this._isDragged = false;\n    _this._isResized = false;\n    /**\r\n     * @deprecated Moved to [[SpriteProperties]]\r\n     */\n\n    _this._disabled = false;\n    _this._internalDisabled = false;\n    _this._updateDisabled = false;\n    _this._internalDefaultsApplied = false;\n    /**\r\n     * Time in milliseconds after which rollout event happens when user rolls-out of the sprite. This helps to avoid flickering in some cases.\r\n     */\n\n    _this.rollOutDelay = 0;\n    /**\r\n     * This flag is set to `true` for the initial sprite you create and place\r\n     * to the div so that we could clear all additional\r\n     * sprites/containers when this sprite is disposed.\r\n     *\r\n     * @ignore\r\n     */\n\n    _this.isBaseSprite = false;\n    /**\r\n     * Indicates whether this sprite should be cloned when cloning its parent\r\n     * container. We set this to `false` in those cases when a sprite is created\r\n     * by the class, so that when cloning a duplicate sprite would not appear.\r\n     */\n\n    _this.shouldClone = true;\n    /**\r\n     * A read-only flag which indicates if a sprite has completed its initial\r\n     * animation (if `showOnInit = true`).\r\n     *\r\n     * In case `showOnInit = false`, `appeared` is set to `true` on init.\r\n     *\r\n     * @readonly\r\n     */\n\n    _this.appeared = false;\n    /**\r\n     * [ex description]\r\n     *\r\n     * @todo Description\r\n     * @ignore\r\n     */\n\n    _this.ex = 0;\n    /**\r\n     * [ey description]\r\n     *\r\n     * @todo Description\r\n     * @ignore\r\n     */\n\n    _this.ey = 0;\n    /**\r\n     * Indicates if the sprite can be moved around when resizing it with two fingers (will only work if draggable = false)\r\n     * @ignore\r\n     */\n\n    _this.dragWhileResize = false;\n    /**\r\n     *  @ignore\r\n     */\n\n    _this.measureFailed = false;\n    /**\r\n     * If this flag is set to true, calling show() will not reveal the sprite.\r\n     *\r\n     * @ignore\r\n     */\n\n    _this.preventShow = false;\n    /**\r\n     * When cloning a sprite, if the template has it's own tooltip assigned, this tooltip is also cloned by default.\r\n     * This is not good for cpu and sometimes you might only need one single tooltip for all clones. Set this to false in order not to clone tooltip.\r\n     */\n\n    _this.cloneTooltip = true;\n    _this.className = \"Sprite\";\n\n    _this._disposers.push(_this._eventDispatcher); // Generate a unique ID\n\n\n    $utils.used(_this.uid); // Create SVG group to hold everything in\n\n    _this.group = _this.paper.addGroup(\"g\"); // Set defaults\n    // it is better to set defauls like this in order to save invaliation calls and events\n\n    _this.setPropertyValue(\"scale\", 1);\n\n    _this.setPropertyValue(\"rotation\", 0);\n\n    _this.setPropertyValue(\"align\", \"none\");\n\n    _this.setPropertyValue(\"valign\", \"none\");\n\n    _this.setPropertyValue(\"pixelPerfect\", false);\n\n    _this.setPropertyValue(\"visible\", true);\n\n    _this.setPropertyValue(\"tooltipPosition\", \"fixed\");\n\n    _this.setPropertyValue(\"verticalCenter\", \"none\");\n\n    _this.setPropertyValue(\"horizontalCenter\", \"none\");\n\n    _this.setPropertyValue(\"tooltipX\", percent(50));\n\n    _this.setPropertyValue(\"tooltipX\", percent(50));\n\n    _this.setPropertyValue(\"marginTop\", 0);\n\n    _this.setPropertyValue(\"marginBottom\", 0);\n\n    _this.setPropertyValue(\"marginLeft\", 0);\n\n    _this.setPropertyValue(\"marginRight\", 0);\n\n    _this.setPropertyValue(\"dx\", 0);\n\n    _this.setPropertyValue(\"dy\", 0);\n\n    _this.setPropertyValue(\"paddingTop\", 0);\n\n    _this.setPropertyValue(\"paddingBottom\", 0);\n\n    _this.setPropertyValue(\"paddingRight\", 0);\n\n    _this.setPropertyValue(\"paddingLeft\", 0);\n\n    _this.setPropertyValue(\"togglable\", false);\n\n    _this.setPropertyValue(\"hidden\", false);\n\n    _this.setPropertyValue(\"urlTarget\", \"_self\");\n\n    _this.setPropertyValue(\"alwaysShowTooltip\", false);\n\n    _this.setPropertyValue(\"showTooltipOn\", \"hover\");\n\n    _this._prevMeasuredWidth = 0;\n    _this._prevMeasuredHeight = 0;\n    _this._measuredWidth = 0;\n    _this._measuredHeight = 0;\n    _this._isMeasured = true; // Invalidate the Sprite so that renderer knows it needs to be drawn\n\n    _this.invalidate(); //this.states.create(\"default\").properties.opacity = 1;\n    // Apply the theme\n\n\n    _this.applyTheme(); //this._disposers.push(this._clickable);\n    // Decorate adapter with events so that we can apply its settings whenever\n    // it is modified\n    // @todo Think what to do here. We can't just apply the adapter value to\n    // property since not all of those are for properties. Commented out for\n    // now.\n\n    /*this.adapter.events.on(\"inserted\", (ev: any) => {\r\n        (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n    });\r\n    this.adapter.events.on(\"removed\", (ev: any) => {\r\n        (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n    });*/\n    // Add disposable dependencies to `_disposers` so they are automatically\n    // disposed of when this object is disposed\n\n\n    _this._disposers.push(_this.events);\n\n    _this._disposers.push(_this.group);\n\n    _this._disposers.push(_this._mask);\n\n    _this._disposers.push(_this._language);\n\n    _this._disposers.push(_this._exporting); //this._disposers.push(this._parent);\n    //this._disposers.push(this._modal);\n\n\n    _this._disposers.push(new Disposer(function () {\n      $object.each(_this._bindings, function (key, value) {\n        value.dispose();\n      });\n    }));\n\n    _this.setPropertyValue(\"interactionsEnabled\", true);\n\n    return _this;\n  }\n\n  Object.defineProperty(Sprite.prototype, \"events\", {\n    /**\r\n     * Event dispatcher.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/event-listeners/} for more info about Events\r\n     */\n    get: function () {\n      return this._eventDispatcher;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"adapter\", {\n    /**\r\n     * Holds Adapter.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/adapters/} for more info about Adapters\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        this._adapterO = new Adapter(this);\n      }\n\n      return this._adapterO;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * ELEMENT VALIDATION, INIT, AND DRAWING STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Applies properties from all assigned themes.\r\n   *\r\n   * We do this here so that we can apply class names as well.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype.applyTheme = function () {\n    _super.prototype.applyTheme.call(this);\n\n    if (options.autoSetClassName) {\n      this.setClassName();\n    }\n  };\n  /**\r\n   * Returns theme(s) used by this object either set explicitly on this\r\n   * element, inherited from parent, or inherited from [[System]].\r\n   *\r\n   * @return An array of theme references\r\n   */\n\n\n  Sprite.prototype.getCurrentThemes = function () {\n    var themes = this._themes;\n\n    if (themes) {\n      return themes;\n    } else {\n      var parent_1 = this._parent;\n\n      if (parent_1) {\n        return parent_1.getCurrentThemes();\n      } else {\n        return registry.themes;\n      }\n    }\n  };\n  /**\r\n   * Called just before element's validation, this function allows setting\r\n   * defaults.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.applyInternalDefaults = function () {\n    // Nothing here, but extending classes might override this function\n    // so that they can set their defaults\n    this._internalDefaultsApplied = true;\n  };\n  /**\r\n   * Invalidates element.\r\n   *\r\n   * Object will be redrawn during the next update cycle.\r\n   *\r\n   * Please note that in most cases elements will auto-invalidate when needed. If\r\n   * everything works, DO NOT use this method. Use it only if some changes do\r\n   * not take otherwise.\r\n   */\n\n\n  Sprite.prototype.invalidate = function () {\n    if (this.disabled || this._isTemplate || this.__disabled) {\n      return;\n    } // We no longer reset this on each invalidate, so that they are applied\n    // only once, and do not overwrite user-defined settings\n    //this._internalDefaultsApplied = false;\n\n\n    if (!this.invalid) {\n      this.invalid = true;\n      registry.addToInvalidSprites(this);\n      system.requestFrame();\n    }\n  };\n  /**\r\n   * Validates element:\r\n   * * Triggers events\r\n   * * Redraws the element\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.validate = function () {\n    this.dispatchImmediately(\"beforevalidated\"); // prevents from drawing if topparent is 0x0\n\n    /*\r\n    let topParent = this.topParent;\r\n      if (topParent) {\r\n        if (!topParent.maxWidth || !topParent.maxHeight) {\r\n            this._disposers.push(topParent.events.once(\"maxsizechanged\", this.invalidate, this));\r\n        }\r\n    }*/\n    // Set internal defaults\n\n    if (!this._internalDefaultsApplied) {\n      this.applyInternalDefaults();\n    }\n\n    this.beforeDraw();\n    this.draw();\n    this.invalid = false;\n    registry.removeFromInvalidSprites(this);\n    this.afterDraw();\n  };\n  /**\r\n   * Invalidates element's position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.invalidatePosition = function () {\n    if (this.disabled || this._isTemplate) {\n      return;\n    }\n\n    if (!this.positionInvalid) {\n      this.positionInvalid = true;\n      registry.addToInvalidPositions(this);\n      system.requestFrame();\n    }\n  };\n  /**\r\n   * Transforms the element.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.validatePosition = function () {\n    var pixelX = this.pixelX;\n    var pixelY = this.pixelY;\n    var dx = this.dx;\n    var dy = this.dy;\n    var x = pixelX + dx;\n    var y = pixelY + dy;\n\n    if (this._updateDisabled) {\n      if (this._internalDisabled) {\n        this.group.attr({\n          \"display\": \"none\"\n        });\n      } else {\n        if (!this.disabled) {\n          this.removeSVGAttribute(\"display\");\n        }\n      }\n\n      this._updateDisabled = false;\n    }\n\n    var sizeChanged = this.measure(); //if (!this.invalid) {\n\n    var prevGroupTransform = this.group.transformString;\n    this.group.moveTo({\n      x: x,\n      y: y\n    });\n    this.group.rotation = this.rotation;\n\n    if (this.nonScaling) {\n      this.group.scale = this.scale / this.globalScale;\n    } else {\n      this.group.scale = this.scale;\n    }\n\n    if (prevGroupTransform != this.group.transformString || sizeChanged) {\n      // not yet sure, this is to avoid many transforms=>container layout invalidation on initial buid\n      if (prevGroupTransform == null) {\n        this.dispatch(\"transformed\");\n      } else {\n        this.dispatchImmediately(\"transformed\");\n      } // TODO clear existing positionchanged dispatches ?\n\n\n      this.dispatch(\"positionchanged\");\n\n      if (this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") {\n        this.updateTooltipPosition();\n      }\n    } //}\n    // it might happen that x and y changed again, so we only remove if they didn't\n\n\n    if (pixelX + dx == x && pixelY + dy == y) {\n      registry.removeFromInvalidPositions(this);\n      this.positionInvalid = false;\n    }\n\n    var maskRectangle = this._maskRectangle; // todo: verify this\n\n    if (maskRectangle) {\n      this._clipElement.moveTo({\n        x: maskRectangle.x - pixelX,\n        y: maskRectangle.y - pixelY\n      });\n    }\n  };\n  /**\r\n   * A placeholder method that is called **before** element begins to be drawn.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.beforeDraw = function () {};\n  /**\r\n   * A placeholder method that draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.draw = function () {};\n  /**\r\n   * A placeholder method that is called **after** element finishes drawing\r\n   * itself.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.afterDraw = function () {\n    var e_1, _a;\n\n    if (this.isMeasured || this.horizontalCenter !== \"none\" || this.verticalCenter !== \"none\") {\n      this.measureElement();\n    } //this.applyMask();\n\n\n    if (!this._inited) {\n      if (this._adapterO) {\n        try {\n          // used to be applySVGAttrbutes here, this is more efficient\n          for (var _b = __values(this._adapterO.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var key = _c.value;\n\n            switch (key) {\n              case \"mask\":\n              case \"fill\":\n              case \"opacity\":\n              case \"fillOpacity\":\n              case \"stroke\":\n              case \"strokeOpacity\":\n              case \"strokeWidth\":\n              case \"shapeRendering\":\n              case \"strokeDasharray\":\n              case \"strokeDashoffset\":\n              case \"strokeLinecap\":\n              case \"strokeLinejoin\":\n              case \"textDecoration\":\n              case \"fontSize\":\n              case \"fontFamily\":\n              case \"fontWeight\":\n                //case \"focusable\":\n                //case \"tabindex\":\n                //case \"role\":\n                this[key] = this[key];\n                break;\n            }\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n\n      this.applyFilters();\n      this.visible = this.visible;\n      this.interactionsEnabled = this.getPropertyValue(\"interactionsEnabled\"); // can't use .interactionsEnabled as it get's parent's\n\n      this._inited = true;\n\n      if (!this.showOnInit) {\n        this.appeared = true;\n      }\n\n      if (this.hidden) {\n        this.hide(0);\n      }\n\n      this.applyMask();\n      this.dispatch(\"validated\");\n      this.dispatch(\"inited\");\n      this.dispatchReady();\n    } else {\n      this.dispatch(\"validated\");\n    }\n\n    if (this.showTooltipOn == \"always\") {\n      if (this.visible && !this.disabled && !this.__disabled) {\n        this.showTooltip();\n      } else {\n        this.hideTooltip(0);\n      }\n    }\n  };\n  /**\r\n   * Dispatches `\"ready\"` event. Sprite dispatches it right after `\"inited\"` event.\r\n   *\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.dispatchReady = function () {\n    if (!this.isReady()) {\n      this._ready = true;\n      this.dispatch(\"ready\");\n    }\n  };\n  /**\r\n   * Triggers a re-initialization of this element.\r\n   *\r\n   * Will result in complete redrawing of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.reinit = function () {\n    this._inited = false;\n    this.setState(this.defaultState);\n    this.invalidate();\n  };\n  /**\r\n   * Handles the situation where parent element is resized.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.handleGlobalScale = function () {\n    this.dispatch(\"globalscalechanged\");\n\n    if (this.nonScalingStroke) {\n      this.strokeWidth = this.strokeWidth;\n    }\n\n    if (this.nonScaling) {\n      this.validatePosition();\n    }\n\n    this.updateFilterScale();\n  };\n  /**\r\n   * Updates filter properties which might depend on scale\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.updateFilterScale = function () {\n    var _this = this;\n\n    $iter.each(this.filters.iterator(), function (filter) {\n      filter.scale = _this.globalScale;\n    });\n  };\n  /**\r\n   * Removes itself from system's invalid lists.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.removeFromInvalids = function () {\n    registry.removeFromInvalidSprites(this);\n    registry.removeFromInvalidPositions(this);\n  };\n  /**\r\n   * Copies all parameters from another [[Sprite]].\r\n   *\r\n   * @param source Source Sprite\r\n   */\n\n\n  Sprite.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    _super.prototype.copyFrom.call(this, source);\n\n    this.isMeasured = source.isMeasured;\n    this.states.copyFrom(source.states);\n\n    if (source.filters.length > 0) {\n      source.filters.each(function (filter) {\n        _this.filters.push(filter.clone());\n      });\n    }\n\n    if (source._adapterO) {\n      this.adapter.copyFrom(source._adapterO);\n    } //helps to avoid calling getter which creates instance\n\n\n    if (source[\"_interaction\"]) {\n      this.interactions.copyFrom(source.interactions);\n    }\n\n    if (source[\"_plugins\"]) {\n      this.plugins.copyFrom(source.plugins);\n    }\n\n    this.configField = source.configField;\n    this.applyOnClones = source.applyOnClones; // this.numberFormatter = source.numberFormatter; // todo: this creates loose number formatter and copies it to all clones. somehow we need to know if source had numberFormatter explicitly created and not just because a getter was called.\n    //this.mask = source.mask; need to think about this, generally this causes a lot of problems\n\n    this.disabled = source.disabled;\n    this.virtualParent = source.virtualParent;\n    this.exportable = source.exportable; //@todo: create tooltip if it's on source but not on this?\n    //const tooltip = this._tooltip;\n    //if (tooltip) {\n    //\ttooltip.copyFrom(source.tooltip);\n    //}\n\n    if (source._tooltip) {\n      if (this._tooltip) {\n        this._tooltip.copyFrom(source.tooltip);\n      } else {\n        if (source.cloneTooltip) {\n          this.tooltip = source.tooltip.clone();\n        } else {\n          this._tooltip = source.tooltip;\n        }\n      }\n    } //if ((<any>source)[\"_tooltip\"] && !this._tooltip) {\n    //\tthis._tooltip = (<any>source)[\"_tooltip\"];\n    //}\n\n\n    this._showSystemTooltip = source.showSystemTooltip;\n    $utils.copyProperties(source.propertyFields, this.propertyFields);\n    $utils.copyProperties(source.properties, this);\n\n    if (source.fillModifier) {\n      this.fillModifier = source.fillModifier.clone();\n    }\n\n    if (source.strokeModifier) {\n      this.strokeModifier = source.strokeModifier.clone();\n    }\n\n    if (source.focusFilter) {\n      this.focusFilter = source.focusFilter.clone();\n    }\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n\n  Sprite.prototype.dispose = function () {\n    if (!this.isDisposed()) {\n      if (this.showTooltipOn == \"always\" && this.tooltip) {\n        this.tooltip.hide();\n      }\n\n      this.dispatchImmediately(\"beforedisposed\");\n\n      if (this.isBaseSprite) {\n        if (this.htmlContainer) {\n          while (this.htmlContainer.childNodes.length > 0) {\n            this.htmlContainer.removeChild(this.htmlContainer.firstChild);\n          }\n        }\n\n        this.isBaseSprite = false;\n      }\n\n      _super.prototype.dispose.call(this); // Clear adapters\n\n\n      if (this._adapterO) {\n        this._adapterO.clear();\n      }\n\n      if (this.applyOnClones) {\n        if (this._clones) {\n          for (var i = this._clones.length - 1; i >= 0; i--) {\n            var clone = this._clones.getIndex(i);\n\n            clone.dispose();\n          }\n        }\n      }\n\n      if (this._svgContainer) {\n        this._svgContainer.dispose();\n      }\n\n      if (this._interactionDisposer) {\n        this._interactionDisposer.dispose();\n\n        this._interactionDisposer = undefined;\n      }\n\n      if (this._urlDisposer) {\n        this._urlDisposer.dispose();\n      }\n\n      this.removeFromInvalids();\n\n      if (this.element) {\n        this.element.dispose();\n      }\n\n      if (this.group) {\n        this.group.dispose();\n      }\n\n      if (this._numberFormatter) {\n        this._numberFormatter.dispose();\n      }\n\n      if (this._focusFilter) {\n        this._focusFilter.dispose();\n      }\n\n      var stroke = this.stroke;\n\n      if (stroke && !(stroke instanceof Color) && stroke.dispose) {\n        if (this.clonedFrom && this.clonedFrom.stroke == stroke) {// do nothing\n        } else {\n          stroke.dispose();\n        }\n      } // TODO a bit hacky\n\n\n      var fill = this.fill;\n\n      if (fill && !(fill instanceof Color) && fill.dispose) {\n        if (this.clonedFrom && this.clonedFrom.fill == fill) {// do nothing\n        } else {\n          fill.dispose();\n        }\n      } // remove from map\n\n\n      if ($type.hasValue(this.id)) {\n        this.map.removeKey(this.id);\n      }\n\n      this.parent = undefined;\n\n      if (this._filters) {\n        while (this._filters.length > 0) {\n          var filter = this._filters.getIndex(0);\n\n          filter.dispose();\n\n          this._filters.removeValue(filter);\n        }\n      }\n\n      this._alwaysShowDisposers = undefined;\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"isTemplate\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Is template?\r\n     */\n    get: function () {\n      return this._isTemplate;\n    },\n\n    /**\r\n     * Indicates if this element is a \"template\".\r\n     *\r\n     * Template Sprites act only as a holders for config for other \"real\"\r\n     * elements to be cloned from.\r\n     *\r\n     * Templates are treated differently, as they are not validated, redrawn, or\r\n     * otherwise are processed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Is template?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this._isTemplate != value) {\n        this._isTemplate = value;\n\n        if (this instanceof Container) {\n          $iter.each(this.children.iterator(), function (child) {\n            child.isTemplate = value;\n          });\n        }\n\n        if (value) {\n          this.parent = this._parent;\n          this.removeFromInvalids();\n        } else {\n          this.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"showSystemTooltip\", {\n    /**\r\n     * @return Show system tooltip?\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._showSystemTooltip)) {\n        if (this.virtualParent) {\n          return this.virtualParent.showSystemTooltip;\n        } else if (this._parent) {\n          return this._parent.showSystemTooltip;\n        } else {\n          return false;\n        }\n      }\n\n      return this._showSystemTooltip;\n    },\n\n    /**\r\n     * Indicates whether the element should attempt to construct itself in a way\r\n     * so that system tooltip is shown if its `readerTitle` is set.\r\n     *\r\n     * @param value Show system tooltip?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this._showSystemTooltip != value) {\n        this._showSystemTooltip = value;\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"topParent\", {\n    /**\r\n     * ==========================================================================\r\n     * HIERARCHY AND STRUCTURE RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Sprites's top-level [[Container]].\r\n     *\r\n     * Please note that in most cases it won't be the chart element.\r\n     *\r\n     * To access base chart element, use `baseSprite` instead.\r\n     *\r\n     * @return Top-level ascendant\r\n     */\n    get: function () {\n      if (this._topParent) {\n        return this._topParent;\n      } else {\n        if (this._parent) {\n          return this._parent.topParent;\n        }\n      }\n    },\n\n    /**\r\n     * @ignore\r\n     * @param value {Container} top parent of a sprite\r\n     */\n    set: function (value) {\n      this._topParent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"parent\", {\n    /**\r\n     * @return Parent container\r\n     */\n    get: function () {\n      return this._parent;\n    },\n\n    /**\r\n     * Elements' parent [[Container]].\r\n     *\r\n     * @param parent  Parent container\r\n     */\n    set: function (parent) {\n      if (this._isTemplate) {\n        return;\n      } // TODO is this needed ?\n\n\n      $utils.used(this.paper);\n      var oldParent = this._parent;\n\n      if (oldParent != parent) {\n        if (oldParent) {\n          oldParent.children.removeValue(this);\n        }\n\n        this._parent = parent;\n\n        if (parent) {\n          this.topParent = parent.topParent;\n\n          if (parent.isTemplate) {\n            this.isTemplate = true;\n          }\n\n          this.baseId = parent.baseId;\n          parent.children.push(this); // insert handler at Container invalidates +  invalidatesLayout + adds to group\n\n          if (this._tooltip && !this._tooltipContainer) {\n            this._tooltip.parent = parent.tooltipContainer;\n          }\n\n          if (!this._dataItem) {\n            this.dataItem = parent.dataItem;\n          }\n\n          this.handleAlwaysShowTooltip();\n\n          if (this.dataItem) {\n            // No need to apply accessibility if there's no data item\n            // The whole reason of applying it here is to populate data\n            // placesholders, and if tehre's no data item, it won't work anyway\n            this.applyAccessibility();\n          }\n\n          this.dispatchImmediately(\"parentset\");\n        } else {\n          this.topParent = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Sprite.prototype.handleAlwaysShow = function () {\n    this.showTooltip();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.handleAlwaysShowTooltip = function () {\n    var sprite = this;\n    var oldDisposers = this._alwaysShowDisposers;\n\n    if (oldDisposers) {\n      $array.each(oldDisposers, function (oldDisposer) {\n        oldDisposer.dispose();\n      });\n    }\n\n    this._alwaysShowDisposers = [];\n\n    if (this.showTooltipOn == \"always\") {\n      while (sprite != undefined) {\n        var disposer = sprite.events.on(\"visibilitychanged\", this.handleAlwaysShow, this, false);\n        this.addDisposer(disposer);\n\n        this._alwaysShowDisposers.push(disposer);\n\n        sprite = sprite.parent;\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"virtualParent\", {\n    /**\r\n     * @return Virtual parent\r\n     */\n    get: function () {\n      return this._virtualParent;\n    },\n\n    /**\r\n     * Element's \"virtual\" parent.\r\n     *\r\n     * This is required in ordere to maintain proper inheritance (like\r\n     * formatters).\r\n     *\r\n     * Sometimes an element is a \"logical\" parent, even though it's not a direct\r\n     * ascendant.\r\n     *\r\n     * Example: a bullet is not a child of the axis, but it would make sense\r\n     * for it to inherit series' formatters.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Virtual parent\r\n     */\n    set: function (value) {\n      this._virtualParent = value;\n\n      if (this.dataItem) {\n        // No need to apply accessibility if there's no data item\n        // The whole reason of applying it here is to populate data\n        // placesholders, and if tehre's no data item, it won't work anyway\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves `<defs>` to correct place in DOM.\r\n   *\r\n   * Some elements are initially created in \"ghost\" container. When moving\r\n   * those into proper place in DOM, their respective `<defs>` need to be moved\r\n   * as well.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype.appendDefs = function () {\n    if (this.filterElement) {\n      this.paper.appendDef(this.filterElement);\n    }\n\n    var fill = this.fill;\n\n    if (fill && fill.element) {\n      this.paper.appendDef(fill.element);\n    }\n\n    var stroke = this.stroke;\n\n    if (stroke && stroke.element) {\n      this.paper.appendDef(stroke.element);\n    }\n\n    if (this.fillModifier && this.fill instanceof Color) {\n      var fill_1 = this.fillModifier.modify(this.fill);\n\n      if (fill_1 && fill_1.element) {\n        this.paper.appendDef(fill_1.element);\n      }\n    }\n\n    if (this.strokeModifier && this.stroke instanceof Color) {\n      var stroke_1 = this.strokeModifier.modify(this.stroke);\n\n      if (stroke_1 && stroke_1.element) {\n        this.paper.appendDef(stroke_1.element);\n      }\n    }\n\n    if (this._clipPath) {\n      this.paper.appendDef(this._clipPath);\n    }\n\n    if (this._exportable === false) {\n      this.exportable = false;\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"map\", {\n    /**\r\n     * Returns a [[Dictionary]] which maps object ids with their respective\r\n     * objects.\r\n     *\r\n     * Can be used to retrieve any object by id, e.g.:\r\n     *\r\n     * ```TypeScript\r\n     * console.log(mySprite.map.getKey(\"myid\"));\r\n     * ```\r\n     * ```JavaScript\r\n     * console.log(mySprite.map.getKey(\"myid\"));\r\n     * ```\r\n     *\r\n     * @return Map collection\r\n     */\n    get: function () {\n      var top = this.topParent;\n\n      if (top) {\n        return top.map;\n      } else if (!this._map) {\n        this._map = new Dictionary();\n      }\n\n      return this._map;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"delayedMap\", {\n    /**\r\n     * @ignore\r\n     * @return Map collection\r\n     */\n    get: function () {\n      var top = this.topParent;\n\n      if (top) {\n        return top.delayedMap;\n      } else if (!this._delayedMap) {\n        this._delayedMap = new Dictionary();\n      }\n\n      return this._delayedMap;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"id\", {\n    /**\r\n     * @return ID\r\n     */\n    get: function () {\n      return this._id;\n    },\n\n    /**\r\n     * Element's user-defined ID.\r\n     *\r\n     * Will throw an Error if there already is an object with the same ID.\r\n     *\r\n     * Please note that above check will be performed withing the scope of the\r\n     * current chart instance. It will not do checks across other chart instances\r\n     * or in globally in DOM.\r\n     *\r\n     * Make sure the IDs are unique.\r\n     *\r\n     * @param value ID\r\n     */\n    set: function (value) {\n      if (this._id != value) {\n        this._id = value;\n\n        if (this.map.hasKey(value)) {\n          throw Error(\"Duplicate id (\" + value + \") used on multiple objects.\");\n        } else {\n          this.map.setKey(value, this);\n        }\n\n        if (options.autoSetClassName) {\n          this.setClassName();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dom\", {\n    /**\r\n     * ==========================================================================\r\n     * ELEMENT AND DOM TREE MANIPULATION AND MEASURING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns DOM element reference associated with this element.\r\n     *\r\n     * @readonly\r\n     * @return DOM element\r\n     */\n    get: function () {\n      return this.group.node;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paper\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Paper\r\n     */\n    get: function () {\n      if (this._paper) {\n        return this._paper;\n      } else {\n        var parent_2 = this._parent;\n\n        if (parent_2) {\n          return parent_2.paper;\n        }\n      }\n\n      return getGhostPaper();\n    },\n\n    /**\r\n     * A [[Paper]] instance to place elements on.\r\n     *\r\n     * If there's no Paper set for this element, it goes up the ascendant tree\r\n     * until it finds one.\r\n     *\r\n     * This method is used by important `addChild()` method, so it's essential\r\n     * to have a [[Paper]] instance.\r\n     *\r\n     * If this element has a separate `htmlContainer` set, it will have a\r\n     * [[Paper]] instance itself.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param paper  Paper\r\n     */\n    set: function (paper) {\n      this.setPaper(paper);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets [[Paper]] instance to use to draw elements.\r\n   * @ignore\r\n   * @param paper Paper\r\n   * @return true if paper was changed, false, if it's the same\r\n   */\n\n  Sprite.prototype.setPaper = function (paper) {\n    var oldPaper = this._paper;\n\n    if (oldPaper != paper) {\n      this._paper = paper;\n      this.appendDefs();\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"htmlContainer\", {\n    /**\r\n     * @return HTML element\r\n     */\n    get: function () {\n      if (this._htmlContainer) {\n        return this._htmlContainer;\n      } else {\n        var parent_3 = this._parent;\n\n        if (parent_3) {\n          return parent_3.htmlContainer;\n        }\n      }\n    },\n\n    /**\r\n     * An HTML element to be used when placing wrapper element (`<div>`)\r\n     * for the whole chart.\r\n     *\r\n     * This is the same for **all** elements within the same chart.\r\n     *\r\n     * @param htmlContainer HTML element\r\n     */\n    set: function (htmlContainer) {\n      this._htmlContainer = htmlContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"titleElement\", {\n    /**\r\n     * Creates (if not yet created) and returns element's `<title>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Title element\r\n     */\n    get: function () {\n      if (!this._titleElement) {\n        this._titleElement = this.paper.add(\"title\");\n        this.group.add(this._titleElement);\n      }\n\n      return this._titleElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"descriptionElement\", {\n    /**\r\n     * Creates (if not yet created) and returns element's `<desc>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Desc element\r\n     */\n    get: function () {\n      if (!this._descriptionElement) {\n        this._descriptionElement = this.paper.add(\"desc\");\n        this.group.add(this._descriptionElement);\n      }\n\n      return this._descriptionElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"filters\", {\n    /**\r\n     * Returns list of SVG filters (effects) applied to element. If the filter\r\n     * list is not yet initilized, creates and returns an empty one.\r\n     * Note, not all filters combine well with one another. We recommend using one filter per sprite.\r\n     *\r\n     * @return List of filters\r\n     */\n    get: function () {\n      if (!this._filters) {\n        this._filters = new List(); // TODO only add certain events ?\n\n        this._disposers.push(this._filters.events.onAll(this.applyFilters, this));\n\n        this._disposers.push(new ListDisposer(this._filters));\n      }\n\n      return this._filters;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets required SVG attributes. Must be called every time an element is\r\n   * redrawn so that attributes are (re)applied.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype.setSVGAttributes = function () {\n    this.fill = this.fill;\n    this.opacity = this.opacity;\n    this.fillOpacity = this.fillOpacity;\n    this.stroke = this.stroke;\n    this.strokeOpacity = this.strokeOpacity;\n    this.shapeRendering = this.shapeRendering;\n    this.strokeDasharray = this.strokeDasharray;\n    this.strokeDashoffset = this.strokeDashoffset;\n    this.strokeLinecap = this.strokeLinecap;\n    this.strokeLinejoin = this.strokeLinejoin;\n    this.focusable = this.focusable;\n    this.tabindex = this.tabindex;\n    this.role = this.role;\n  };\n  /**\r\n   * Sets an attribute directly on an SVG element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param attribute Attribute object\r\n   */\n\n\n  Sprite.prototype.setSVGAttribute = function (attribute) {\n    this.group.attr(attribute);\n  };\n  /**\r\n   * Removes an attribute directly from SVG element.\r\n   *\r\n   * @param attribute Attribute key to remove\r\n   */\n\n\n  Sprite.prototype.removeSVGAttribute = function (attribute) {\n    this.group.removeAttr(attribute);\n  };\n  /**\r\n   * Sets `class` attribute of the elements SVG node.\r\n   *\r\n   * Uses `am4core.options.classNamePrefix`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.setClassName = function () {\n    var className = this.className;\n    var classNamePrefix = options.classNamePrefix;\n\n    if (this.element) {\n      this.element.addClass(classNamePrefix + className);\n    }\n\n    this.group.addClass(classNamePrefix + className + \"-group\");\n\n    if ($type.hasValue(this.id)) {\n      this.group.addClass(classNamePrefix + this.id);\n    }\n\n    if (this.userClassName) {\n      this.group.addClass(this.userClassName);\n    }\n  };\n  /**\r\n   * Adds an `id` attribute the the element and returns the id.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Element's ID\r\n   */\n\n\n  Sprite.prototype.uidAttr = function () {\n    this.setSVGAttribute({\n      \"id\": this.uid\n    });\n    return this.uid;\n  };\n  /**\r\n   * [updateClipPath description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  Sprite.prototype.updateClipPath = function () {\n    var element = this._clipElement;\n\n    if (element) {\n      element.moveTo({\n        x: this.mask.pixelX,\n        y: this.mask.pixelY\n      });\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.createClipPath = function () {\n    if (!this._clipPath) {\n      this._clipPath = this.paper.addGroup(\"clipPath\");\n      this.paper.appendDef(this._clipPath);\n\n      this._disposers.push(this._clipPath);\n\n      var id = registry.getUniqueId();\n\n      this._clipPath.attr({\n        \"id\": id\n      });\n\n      this.group.attr({\n        \"clip-path\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\"\n      });\n    }\n  };\n  /**\r\n   * Applies the mask Sprite.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.applyMask = function () {\n    var mask = this.mask;\n\n    if (this._clipPath && mask) {\n      // Container\n      if (mask instanceof Container) {\n        this._clipElement.attr({\n          \"width\": $math.max(0, mask.pixelWidth),\n          \"height\": $math.max(0, mask.pixelHeight)\n        });\n\n        var point = $utils.spritePointToSprite({\n          x: mask.pixelX,\n          y: mask.pixelY\n        }, mask.parent, this);\n        this._clipPath.x = point.x;\n        this._clipPath.y = point.y;\n      } // Sprite\n      else {\n        if (mask.element && mask.element != this._clipElement) {\n          this._clipElement = mask.element;\n\n          this._clipPath.add(this._clipElement);\n        }\n\n        this._clipPath.scale = mask.scale;\n        this._clipPath.x = mask.pixelX;\n        this._clipPath.y = mask.pixelY;\n        this._clipPath.rotation = mask.rotation;\n      }\n    }\n  };\n  /**\r\n   * Applies filters to the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.applyFilters = function () {\n    var _this = this; // we create a separate filter for each sprite as otherwise it would be impossible to animate filter.\n    // svg doesn't support multiple filters applied to one element, so we put all the primitives to one filterElement of a sprite.\n\n\n    if (this._filters && this._filters.length > 0) {\n      var width_1 = 100;\n      var height_1 = 100;\n\n      if (!this.filterElement) {\n        this.filterElement = this.paper.addGroup(\"filter\");\n\n        this._disposers.push(this.filterElement);\n      } else {\n        this.filterElement.removeChildNodes();\n      }\n\n      this.paper.appendDef(this.filterElement);\n      var id = \"filter-\" + this.uid;\n      this.filterElement.attr({\n        \"id\": id\n      });\n      $iter.each(this.filters.iterator(), function (filter) {\n        filter.sprite = _this;\n        filter.paper = _this.paper;\n\n        _this.filterElement.attr({\n          filterUnits: filter.filterUnits\n        });\n\n        filter.appendPrimitives(_this.filterElement);\n\n        if (filter.width > width_1) {\n          width_1 = filter.width;\n        }\n\n        if (filter.height > height_1) {\n          height_1 = filter.height;\n        }\n\n        filter.scale = _this.globalScale;\n      });\n      var w = width_1 + \"%\";\n      var h = height_1 + \"%\";\n      /* temporarily removed as it is breaking tooltips on Safari @todo come back to this\r\n      if (this._measuredHeight <= 1) {\r\n          h = height + \"\";\r\n      }\r\n        if (this._measuredWidth <= 1) {\r\n          h = width + \"\";\r\n      }*/\n\n      this.filterElement.attr({\n        \"width\": w,\n        \"height\": h,\n        \"x\": -(width_1 - 100) / 2 + \"%\",\n        \"y\": -(height_1 - 100) / 2 + \"%\"\n      });\n      this.group.attr({\n        \"filter\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\"\n      });\n    } else if (this.filterElement) {\n      this.group.removeAttr(\"filter\");\n      this.filterElement.removeChildNodes();\n    }\n  };\n  /**\r\n   * [removeClipPath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Sprite.prototype.removeClipPath = function () {\n    if (this._clipPath) {\n      //this._clipPath.dispose();\n      this.removeDispose(this._clipPath);\n      this._clipPath = undefined;\n    }\n  };\n  /**\r\n   * [setElement description]\r\n   *\r\n   * @ignore\r\n   * @todo Description\r\n   * @param element [description]\r\n   */\n\n\n  Sprite.prototype.setElement = function (element) {\n    this.element = element;\n    this.setSVGAttributes();\n    this.applyAccessibility();\n  };\n\n  Object.defineProperty(Sprite.prototype, \"element\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._element;\n    },\n\n    /**\r\n     * The main element for this Sprite, usually an SVG `<g>`.\r\n     *\r\n     * All other sub-elements are created in it.\r\n     *\r\n     * @param element  Element\r\n     */\n    set: function (element) {\n      // Destroy previous element if there was one before\n      this.removeElement(); // Set new element\n\n      this._element = element; // Add element to group\n      // Since we are adding Element to group, which is already in the\n      // `.disposers` it will be removed automatically when Sprite is disposed\n      // of\n\n      this.group.add(element);\n\n      if (element.node instanceof SVGPathElement) {\n        this._isPath = true;\n      } // This is needed if someone is setting element not in draw method but\n      // from outside\n\n\n      if (!this.invalid) {\n        this.validate();\n      }\n\n      if (options.autoSetClassName) {\n        this.setClassName();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"svgContainer\", {\n    /**\r\n     * HTML container (`<div>`) which is used to place chart's `<svg>` element\r\n     * in.\r\n     *\r\n     * @return Container for chart elements\r\n     */\n    get: function () {\n      if (this._svgContainer) {\n        return this._svgContainer;\n      } else if (this._parent) {\n        return this._parent.svgContainer;\n      }\n    },\n\n    /**\r\n     * Sets HTML container to add SVG and other chart elements to.\r\n     *\r\n     * @param svgContainer Container for chart elements\r\n     */\n    set: function (svgContainer) {\n      this._svgContainer = svgContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Measures main element.\r\n   *\r\n   * Saves measurements into private `_bbox` property.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype.measureElement = function () {\n    if (this.element) {\n      if (this.definedBBox) {\n        this._bbox = this.definedBBox;\n      } else {\n        var svgBBox = this.element.getBBox();\n        this._bbox = {\n          x: svgBBox.x,\n          y: svgBBox.y,\n          width: svgBBox.width,\n          height: svgBBox.height\n        };\n      }\n    }\n  };\n  /**\r\n   * Positions element according its center settings.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.updateCenter = function () {\n    if (this.element) {\n      var prevElementTransform = this.element.transformString;\n      var bbox = this.bbox;\n      var ex = 0;\n      var ey = 0;\n      var elementX = bbox.x;\n      var elementY = bbox.y;\n      var elementWidth = bbox.width;\n      var elementHeigth = bbox.height;\n      var pixelPaddingLeft = this.pixelPaddingLeft;\n      var pixelPaddingRight = this.pixelPaddingRight;\n      var pixelPaddingTop = this.pixelPaddingTop;\n      var pixelPaddingBottom = this.pixelPaddingBottom; // add padding to the measured size\n\n      var measuredWidth = $math.max(elementWidth + pixelPaddingLeft + pixelPaddingRight, this.pixelWidth);\n      var measuredHeight = $math.max(elementHeigth + pixelPaddingTop + pixelPaddingBottom, this.pixelHeight); // extremes\n\n      var left = bbox.x;\n      var right = bbox.x + measuredWidth;\n      var top_1 = bbox.y;\n      var bottom = bbox.y + measuredHeight;\n      var horizontalCenter = this.horizontalCenter;\n      var verticalCenter = this.verticalCenter;\n\n      switch (horizontalCenter) {\n        case \"none\":\n          ex = elementX + pixelPaddingLeft;\n          break;\n\n        case \"left\":\n          ex = pixelPaddingLeft;\n          break;\n\n        case \"middle\":\n          ex = pixelPaddingLeft - (elementWidth + pixelPaddingRight + pixelPaddingLeft) / 2;\n          break;\n\n        case \"right\":\n          ex = -pixelPaddingRight - elementWidth;\n          break;\n      }\n\n      switch (verticalCenter) {\n        case \"none\":\n          ey = elementY + pixelPaddingTop;\n          break;\n\n        case \"top\":\n          ey = pixelPaddingTop;\n          break;\n\n        case \"middle\":\n          ey = pixelPaddingTop - (elementHeigth + pixelPaddingBottom + pixelPaddingTop) / 2;\n          break;\n\n        case \"bottom\":\n          ey = -pixelPaddingBottom - elementHeigth;\n          break;\n      }\n\n      this._measuredHeight = measuredHeight;\n      this._measuredWidth = measuredWidth;\n      var x = $math.round(ex - elementX, this._positionPrecision, true);\n      var y = $math.round(ey - elementY, this._positionPrecision, true);\n      this.ex = x - pixelPaddingLeft;\n      this.ey = y - pixelPaddingTop;\n      this.maxLeft = left + x - pixelPaddingLeft;\n      this.maxRight = right + x - pixelPaddingLeft;\n      this.maxTop = top_1 + y - pixelPaddingTop;\n      this.maxBottom = bottom + y - pixelPaddingTop;\n\n      if (this.pixelPerfect && options.pixelPerfectPrecision == 0) {\n        x -= 0.5;\n        y -= 0.5;\n      }\n\n      this.element.moveTo({\n        x: x,\n        y: y\n      });\n\n      if (prevElementTransform != this.element.transformString) {\n        this.dispatchImmediately(\"transformed\");\n      }\n    }\n  };\n  /**\r\n   * Measures the whole element.\r\n   *\r\n   * Returns `true` if the size has changed from the last measurement.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Did the size changed from the last measurement?\r\n   */\n\n\n  Sprite.prototype.measure = function () {\n    this.updateCenter();\n    var measuredWidth = this._measuredWidth;\n    var measuredHeight = this._measuredHeight; // extremes\n\n    var left = this.maxLeft;\n    var right = this.maxRight;\n    var top = this.maxTop;\n    var bottom = this.maxBottom; // non-parent wise size\n\n    this._measuredWidthSelf = measuredWidth;\n    this._measuredHeightSelf = measuredHeight;\n    var positionPrecision = this._positionPrecision;\n    this.maxLeftSelf = this.maxLeft;\n    this.maxRightSelf = this.maxRight;\n    this.maxTopSelf = this.maxTop;\n    this.maxBottomSelf = this.maxBottom; // if a sprite is rotated or scaled, calculate measured size after transformations\n\n    if (this.rotation !== 0 || this.scale !== 1 || this.nonScaling) {\n      // not good to handleGlobalScale here.\n      if (this.nonScalingStroke) {\n        this.strokeWidth = this.strokeWidth;\n      }\n\n      var svg = this.paper.svg;\n      var matrix = svg.createSVGMatrix();\n      var rotation = this.rotation;\n      var scale = this.scale;\n\n      if (this.nonScaling) {\n        scale = this.scale / this.globalScale;\n      }\n\n      matrix.a = $math.cos(rotation) * scale;\n      matrix.c = -$math.sin(rotation) * scale;\n      matrix.e = 0;\n      matrix.b = $math.sin(rotation) * scale;\n      matrix.d = $math.cos(rotation) * scale;\n      matrix.f = 0;\n      var p1 = svg.createSVGPoint();\n      p1.x = left;\n      p1.y = top;\n      var p2 = svg.createSVGPoint();\n      p2.x = right;\n      p2.y = top;\n      var p3 = svg.createSVGPoint();\n      p3.x = right;\n      p3.y = bottom;\n      var p4 = svg.createSVGPoint();\n      p4.x = left;\n      p4.y = bottom;\n      var pt1 = p1.matrixTransform(matrix);\n      var pt2 = p2.matrixTransform(matrix);\n      var pt3 = p3.matrixTransform(matrix);\n      var pt4 = p4.matrixTransform(matrix);\n      left = Math.min(pt1.x, pt2.x, pt3.x, pt4.x);\n      right = Math.max(pt1.x, pt2.x, pt3.x, pt4.x);\n      top = Math.min(pt1.y, pt2.y, pt3.y, pt4.y);\n      bottom = Math.max(pt1.y, pt2.y, pt3.y, pt4.y);\n      measuredWidth = right - left;\n      measuredHeight = bottom - top;\n      this.maxLeft = $math.round(left, positionPrecision, true);\n      this.maxRight = $math.round(right, positionPrecision, true);\n      this.maxTop = $math.round(top, positionPrecision, true);\n      this.maxBottom = $math.round(bottom, positionPrecision, true);\n    }\n\n    this._measuredWidth = $math.round(measuredWidth, positionPrecision, true);\n    this._measuredHeight = $math.round(measuredHeight, positionPrecision, true); // dispatch event\n\n    if (this._measuredWidth != this._prevMeasuredWidth || this._measuredHeight != this._prevMeasuredHeight) {\n      this._prevMeasuredHeight = this._measuredHeight;\n      this._prevMeasuredWidth = this._measuredWidth; // TODO clear existing sizechanged dispatches ?\n\n      this.dispatch(\"sizechanged\");\n\n      if ((this.isHover || this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") && this.tooltip && this.tooltip.visible && ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML))) {\n        this.updateTooltipPosition();\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Insert this element before sibling element.\r\n   *\r\n   * @param sprite  Target element\r\n   * @return This element\r\n   */\n\n\n  Sprite.prototype.insertBefore = function (sprite) {\n    var parent = this._parent;\n\n    if (parent) {\n      var index = parent.children.indexOf(sprite);\n\n      if (index !== -1) {\n        parent.children.moveValue(this, index);\n        parent.sortChildren();\n      }\n    }\n\n    return this;\n  };\n  /**\r\n   * Insert this element after sibling element.\r\n   *\r\n   * @param sprite  Target element\r\n   * @return This element\r\n   */\n\n\n  Sprite.prototype.insertAfter = function (sprite) {\n    var parent = this._parent;\n\n    if (parent) {\n      var index = parent.children.indexOf(sprite);\n\n      if (index !== -1) {\n        parent.children.moveValue(this, index + 1);\n        parent.sortChildren();\n      }\n    }\n\n    return this;\n  };\n  /**\r\n   * Removes the main SVG element.\r\n   *\r\n   * This does not destroy the whole Sprite element. To do that use\r\n   * `dispose()` instead.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.removeElement = function () {\n    // remove visual element\n    if (this._element) {\n      this.removeDispose(this._element);\n      this._element = undefined;\n    }\n  };\n  /**\r\n   * Returns relative (percent) value of the X coordindate within this element.\r\n   *\r\n   * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n   * as relative value.\r\n   *\r\n   * @param value  Absolute or relative X coordinate\r\n   * @return Relative value\r\n   */\n\n\n  Sprite.prototype.getRelativeX = function (value) {\n    if (value instanceof Percent) {\n      return value.value;\n    } else if (this._parent) {\n      return value / this._parent.innerWidth;\n    }\n\n    return 0;\n  };\n  /**\r\n   * Returns relative (percent) value of the Y coordindate within this element.\r\n   *\r\n   * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n   * as relative value.\r\n   *\r\n   * @param value  Absolute or relative Y coordinate\r\n   * @return Relative value\r\n   */\n\n\n  Sprite.prototype.getRelativeY = function (value) {\n    if (value instanceof Percent) {\n      return value.value;\n    } else if (this._parent) {\n      return value / this._parent.innerHeight;\n    }\n\n    return 0;\n  };\n  /**\r\n   * Returns an X coordinate in pixel within the element.\r\n   *\r\n   * If number is passed in as parameter, the same number will be returned\r\n   * back.\r\n   *\r\n   * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n   *\r\n   * @param value  Absolute or relative X coordinate\r\n   * @return X coordinate in pixels\r\n   */\n\n\n  Sprite.prototype.getPixelX = function (value) {\n    // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\n    // all the time and this would result chain of the same actions and will slow down the system a lot\n    var pixel = 0;\n\n    if ($type.isNumber(value)) {\n      pixel = value;\n    } else if (value instanceof Percent) {\n      var relative = value.value;\n\n      if (this._parent) {\n        pixel = $math.round(this._parent.innerWidth * relative, this._positionPrecision, true);\n      }\n    }\n\n    return pixel;\n  };\n  /**\r\n   * Returns an Y coordinate in pixel within the element.\r\n   *\r\n   * If number is passed in as parameter, the same number will be returned\r\n   * back.\r\n   *\r\n   * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n   *\r\n   * @param value  Absolute or relative Y coordinate\r\n   * @return Y coordinate in pixels\r\n   */\n\n\n  Sprite.prototype.getPixelY = function (value) {\n    // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\n    // all the time and this would result chain of the same actions and will slow down the system a lot\n    var pixel = 0;\n\n    if ($type.isNumber(value)) {\n      pixel = value;\n    } else if (value instanceof Percent) {\n      var relative = value.value;\n\n      if (this._parent) {\n        pixel = $math.round(this._parent.innerHeight * relative, this._positionPrecision, true);\n      }\n    }\n\n    return pixel;\n  };\n  /**\r\n   * Moves the element to a specified coordinates.\r\n   *\r\n   * Using this method is preferred method of moving element, as it saves some\r\n   * CPU processing power over setting `x` and `y` properties separately.\r\n   *\r\n   * The method respects element's center settings. The element will be\r\n   * positioned so that `point` coordinates come in whatever \"center\" of the\r\n   * element is, as set in `horizontalCenter` and `verticalCenter`.\r\n   *\r\n   * Besides moving the element, you can also at the same time scale and\r\n   * rotate the element.\r\n   *\r\n   * @param point     New coordinates\r\n   * @param rotation  New rotation\r\n   * @param scale     New Scale\r\n   */\n\n\n  Sprite.prototype.moveTo = function (point, rotation, scale, isDragged) {\n    if (this.isDragged && !isDragged) {\n      return;\n    }\n\n    if (point) {\n      if ($type.isNumber(point.x)) {\n        this.setPropertyValue(\"x\", $math.round(point.x, this._positionPrecision, true));\n      }\n\n      if ($type.isNumber(point.y)) {\n        this.setPropertyValue(\"y\", $math.round(point.y, this._positionPrecision, true));\n      }\n    }\n\n    if ($type.isNumber(rotation)) {\n      this.rotation = rotation;\n    }\n\n    if ($type.isNumber(scale)) {\n      this.scale = scale;\n    } // must leave this\n\n\n    this.invalidatePosition();\n  };\n\n  Object.defineProperty(Sprite.prototype, \"mask\", {\n    /**\r\n     * Returns [[Sprite]] element currently used as mask for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return A [[Sprite]] to use as mask\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this._mask.get();\n      } else {\n        return this._adapterO.apply(\"mask\", this._mask.get());\n      }\n    },\n\n    /**\r\n     * Sets another [[Sprite]] element as this elements mask.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param mask A [[Sprite]] to use as mask\r\n     */\n    set: function (mask) {\n      var _this = this;\n\n      if (this._mask.get() !== mask) {\n        // this is good\n        if (mask) {\n          this.createClipPath();\n\n          if (!(mask instanceof Container)) {\n            mask.isMeasured = false;\n\n            if (mask.element) {\n              this._clipElement = mask.element;\n            }\n          } else {\n            this._clipElement = this.paper.add(\"rect\");\n          }\n\n          if (this._clipElement) {\n            this._clipPath.add(this._clipElement);\n          }\n\n          this._mask.set(mask, new MultiDisposer([//mask.addEventListener(SpriteEvent.TRANSFORMED, this.applyMask, false, this);\n          mask.events.on(\"maxsizechanged\", function () {\n            if (_this.inited) {\n              _this.applyMask();\n            }\n          }, undefined, false), mask.events.on(\"validated\", this.applyMask, this, false), mask.events.on(\"positionchanged\", this.applyMask, this, false)]));\n\n          this.applyMask();\n        } else {\n          this._mask.reset();\n\n          this.group.removeAttr(\"clip-path\");\n          this.removeClipPath();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maskRectangle\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Mask Rectangle\r\n     */\n    get: function () {\n      return this._maskRectangle;\n    },\n    // you can set IRectangle as a mask instead o a sprite. Note, the changes of the object won't be monitored\n\n    /**\r\n     * Instead of creating a [[Sprite]] for mask, you can just use a\r\n     * [[Rectangle]] by setting this accessor.\r\n     *\r\n     * Please note that the element will not monitor any changes to the mask\r\n     * rectangle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param rect Mask Rectangle\r\n     */\n    set: function (rect) {\n      if (rect) {\n        this.createClipPath();\n\n        if (!this._clipElement) {\n          this._clipElement = this.paper.add(\"rect\");\n\n          this._clipPath.add(this._clipElement);\n        }\n\n        this._clipElement.attr({\n          \"width\": rect.width,\n          \"height\": rect.height\n        });\n      } else {\n        this.removeClipPath();\n        this._clipElement = undefined;\n      }\n\n      this._maskRectangle = rect;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isMeasured\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Was element already measured?\r\n     */\n    get: function () {\n      return this._isMeasured;\n    },\n\n    /**\r\n     * Indicates if this element was already measured.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Was element already measured?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (!value) {\n        this._measuredWidth = 0;\n        this._measuredHeight = 0; //this._pixelHeight = 0;\n        //this._pixelWidth = 0;\n      }\n\n      if (this._isMeasured != value) {\n        this._isMeasured = value;\n        this.invalidatePosition();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if the this element has any of its parts overlapping with another\r\n   * element.\r\n   *\r\n   * @todo Description (review)\r\n   * @param sprite  Second element to test again\r\n   * @return Overlapping?\r\n   */\n\n  Sprite.prototype.hitTest = function (sprite) {\n    // validate, otherwise we will not know measuredWidth and measuredHeight\n    if (this.invalid) {\n      this.validate();\n    }\n\n    if (sprite.invalid) {\n      sprite.validate();\n    }\n\n    var ax1 = this.pixelX + this.maxLeft;\n    var ay1 = this.pixelY + this.maxTop;\n    var ax2 = ax1 + this.maxRight;\n    var ay2 = ay1 + this.maxBottom;\n    var bx1 = sprite.pixelX + sprite.maxLeft;\n    var by1 = sprite.pixelY + sprite.maxTop;\n    var bx2 = bx1 + sprite.maxRight;\n    var by2 = by1 + sprite.maxBottom;\n    return !(bx1 > ax2 || bx2 < ax1 || by1 > ay2 || by2 < ay1);\n  };\n\n  Object.defineProperty(Sprite.prototype, \"inited\", {\n    /**\r\n     * ==========================================================================\r\n     * STATE-RELATED\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns `true` if Sprite has already finished initializing.\r\n     *\r\n     * @return Initialized?\r\n     */\n    get: function () {\n      return this._inited;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns `true` if Sprite has already finished initializing and is ready.\r\n   *\r\n   * If this object is a [[Container]] it will wait for all of its children\r\n   * are ready before becoming ready itself and firing a `\"ready\"` event.\r\n   *\r\n   * @return is ready?\r\n   */\n\n  Sprite.prototype.isReady = function () {\n    return this._ready;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"states\", {\n    /**\r\n     * Returns a collection of element's available [[SpriteState]] entries.\r\n     *\r\n     * @see {@link SpriteState}\r\n     * @return States\r\n     */\n    get: function () {\n      if (!this._states) {\n        var state = new SpriteState(); // works\n\n        this._states = new DictionaryTemplate(state); // TODO what about removeKey ?\n\n        this._disposers.push(this._states.events.on(\"insertKey\", this.processState, this, false));\n\n        this._disposers.push(this._states.events.on(\"setKey\", this.processState, this, false));\n\n        this._disposers.push(new DictionaryDisposer(this._states));\n\n        this._disposers.push(state);\n      }\n\n      return this._states;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hiddenState\", {\n    /**\r\n     * Returns a [[SpriteState]] object for \"hidden\" state.\r\n     *\r\n     * This is a shortcut to `this.states.getKey(\"hidden\")`.\r\n     *\r\n     * @return Hidden state\r\n     */\n    get: function () {\n      if (!this.states.getKey(\"hidden\")) {\n        var hiddenState = this.states.create(\"hidden\");\n        hiddenState.properties.opacity = 0;\n        hiddenState.properties.visible = false;\n      }\n\n      return this.states.getKey(\"hidden\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"defaultState\", {\n    /**\r\n     * Returns a [[SpriteState]] object for \"default\" state.\r\n     *\r\n     * This is a shortcut to `this.states.getKey(\"default\")`.\r\n     *\r\n     * @return Hidden state\r\n     */\n    get: function () {\n      if (!this.states.getKey(\"default\")) {\n        var defaultState = this.states.create(\"default\");\n        defaultState.properties.opacity = 1;\n      }\n\n      return this.states.getKey(\"default\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if some key states are defined and updates Sprite properties\r\n   * accordingly.\r\n   *\r\n   * For example if there's a state \"down\" defined for Sprite, we automatically\r\n   * make it \"clickable\".\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event which caused state list update\r\n   */\n\n  Sprite.prototype.processState = function (event) {\n    var state = event.newValue;\n    state.sprite = this;\n    state.name = event.key;\n\n    if (this.states.hasKey(\"hover\") || this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText))) {\n      this.hoverable = true;\n    }\n\n    if (this.states.hasKey(\"down\") || this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText))) {\n      this.clickable = true;\n    }\n\n    if (this.states.hasKey(\"focus\")) {\n      this.focusable = true;\n    } // Propagate the new state to clones\n\n\n    if (this.applyOnClones) {\n      var clones = this.clones.values;\n      var length_1 = clones.length;\n\n      for (var i = 0; i < length_1; ++i) {\n        var clone = clones[i];\n\n        if (!clone.isDisposed()) {\n          clone.states.setKey(state.name, state);\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"animations\", {\n    /**\r\n     * Returns a list elements's animations currently being played.\r\n     *\r\n     * If the list has not been initialized it is created.\r\n     *\r\n     * @return List of animations\r\n     */\n    get: function () {\n      if (!this._animations) {\n        this._animations = [];\n\n        this._disposers.push(new AnimationDisposer(this._animations));\n      }\n\n      return this._animations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts element's local coordinates to the coordinates within the main\r\n   * chart container.\r\n   *\r\n   * @param point  Local point\r\n   * @return Global point\r\n   */\n\n  Sprite.prototype.getSvgPoint = function (point) {\n    try {\n      // Calculate SVG point\n      var bbox = this.htmlContainer.getBoundingClientRect();\n      return {\n        \"x\": point.x - bbox.left,\n        \"y\": point.y - bbox.top\n      };\n    } catch (e) {\n      return point;\n    }\n  };\n  /**\r\n   * Creates and starts an [[Animation]] with given `animationOptions`.\r\n   *\r\n   * @see {@link Animation} for additional information about available options\r\n   * @param animationOptions  Animation options\r\n   * @param duration          Duration in milliseconds\r\n   * @param easing            Easing function\r\n   * @return Animation instance\r\n   */\n\n\n  Sprite.prototype.animate = function (animationOptions, duration, easing) {\n    return new Animation(this, animationOptions, duration, easing).start();\n  };\n  /**\r\n   * Applies a [[SpriteState]] on this element.\r\n   *\r\n   * The first parameter can either be a name state or a [[SpriteState]]\r\n   * instance.\r\n   *\r\n   * When run, this method will apply SVG properties defined in a\r\n   * [[SpriteState]], but only those that are relevant to this particular\r\n   * element, i.e. are in the `properties` array.\r\n   *\r\n   * @see {@link SpriteState}\r\n   * @param value               A state - name key or instance\r\n   * @param transitionDuration  Duration of the transition between current and new state\r\n   * @param easing              An easing function\r\n   */\n\n\n  Sprite.prototype.setState = function (value, transitionDuration, easing) {\n    var state;\n\n    if (value instanceof SpriteState) {\n      this.states.setKey(value.name, value);\n      state = value;\n    } else {\n      state = this.states.getKey(value);\n\n      if (!state) {\n        return;\n      }\n    } // stop previous transition\n    // not good - foe expample, we are animating to some \"active\" state and in them middle \"hover\" state happens. then \"active\" stat won't be applied\n    //if (this._transition) {\n    //this._transition.stop();\n    //}\n\n\n    if (state.name == \"hover\") {\n      if (this.isHidden) {\n        return;\n      }\n\n      this.isHover = true;\n    }\n\n    if (state.name == \"hidden\") {\n      this.isHiding = true;\n    } else {\n      if (!this.visible) {\n        this.setVisibility(state.properties.visible || this.defaultState.properties.visible);\n      }\n    }\n\n    if (state.name == \"active\") {\n      this.isActive = true;\n    } // we do not set isActive = false here if it's not active, but container does that if setStateOnChildren = true\n\n\n    if (!$type.isNumber(transitionDuration)) {\n      transitionDuration = state.transitionDuration;\n    }\n\n    if (!$type.hasValue(easing)) {\n      easing = state.transitionEasing;\n    }\n\n    return this.transitTo(state, transitionDuration, easing);\n  };\n  /**\r\n   * Applies proper state based on the condition of the element. A condition is\r\n   * deducted in this order:\r\n   * * \"hover\" if Sprite has currently any pointers over it\r\n   * * \"down\" if Sprite has any pointers (touch or mouse) currently pressed over it\r\n   * * \"focus\" if Sprite has currently got focus (accessibility)\r\n   * * \"hidden\" if Sprite is currently hidden\r\n   *\r\n   * Returns an [[Animation]] object, which is handling gradual transition from\r\n   * current values of properties, to the new target state(s).\r\n   *\r\n   * @param duration  Duration for the animation (ms)\r\n   * @return [[Animation]] object which is handling the transition\r\n   */\n\n\n  Sprite.prototype.applyCurrentState = function (duration) {\n    //if (!this.isHidden) { // this was done for hover state not to take effect if \"hidden\" is actually visible, need to think about it.\n    var animation = this.setState(this.defaultState, duration);\n\n    if (this.isHover) {\n      animation = this.setState(\"hover\", duration);\n    }\n\n    if (this.isDown && this.interactions.downPointers.length) {\n      animation = this.setState(\"down\", duration);\n    }\n\n    this.isFocused = this.isFocused;\n\n    if (this.isActive) {\n      animation = this.setState(\"active\", duration);\n\n      if (this.isHover && this.states.hasKey(\"hoverActive\")) {\n        animation = this.setState(\"hoverActive\", duration);\n      }\n    }\n\n    return animation; //}\n  };\n  /**\r\n   * Starts an [[Animation]] of the properties to specific values as they are\r\n   * set in `state`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param state     Target State\r\n   * @param duration  Duration in milliseconds\r\n   * @param easing    Easing function\r\n   * @return Transition Animation\r\n   */\n\n\n  Sprite.prototype.transitTo = function (state, duration, easing) {\n    var _this = this; // Init\n\n\n    var options = [],\n        propValues = state.allValues,\n        transition; // todo: do this for numeric/color properties only?\n    // @todo use state.getPropertyValue instead\n\n    $object.each(propValues, function (propertyName, finalValue) {\n      var currentValue = _this[propertyName]; // save current value to default state. this solves a big problem where values must be set both on sprite and default state\n\n      if (finalValue != currentValue && _this.defaultState.properties[propertyName] == undefined) {\n        _this.defaultState.properties[propertyName] = currentValue;\n      } //if (finalValue != currentValue && $type.hasValue(finalValue)) {\n\n\n      if (finalValue != \"__unset\") {\n        var option = {\n          from: currentValue,\n          to: finalValue,\n          property: propertyName\n        };\n        options.push(option);\n      }\n    });\n\n    if (options.length > 0) {\n      transition = this.animate(options, duration, easing);\n\n      if (transition && !transition.isFinished()) {\n        // TODO should this use events.once ?\n        // TODO push onto _disposers array ?\n        this._disposers.push(transition.events.on(\"animationended\", function () {\n          _this.dispatchImmediately(\"transitionended\");\n        }));\n      } else {\n        this.dispatchImmediately(\"transitionended\");\n      }\n    } // apply filters if set\n\n\n    if (state.filters.length > 0) {\n      var newFilters_1 = []; // check for the same filters\n\n      $iter.each(state.filters.iterator(), function (stateFilter) {\n        var newFilter = stateFilter.clone();\n        newFilters_1.push(newFilter);\n        var animationOptions = [];\n        $iter.each(_this.filters.iterator(), function (currentFilter) {\n          // if we have the same filters\n          if (currentFilter.className == newFilter.className) {\n            if (!$iter.contains(_this.defaultState.filters.iterator(), function (x) {\n              return x.className === newFilter.className;\n            })) {\n              _this.defaultState.filters.push(currentFilter);\n            }\n\n            $object.each(newFilter.properties, function (propertyName, newValue) {\n              var currentValue = currentFilter.properties[propertyName]; // if values are not the same, push to animation options array\n\n              if (currentValue != newValue) {\n                animationOptions.push({\n                  property: propertyName,\n                  from: currentValue,\n                  to: newValue\n                });\n              }\n            });\n          }\n        }); // animate to new value\n\n        newFilter.animate(animationOptions, duration, easing);\n      });\n      this.filters.clear();\n      this.filters.pushAll(newFilters_1);\n    }\n\n    return transition;\n  };\n  /**\r\n   * Returns `true` if Sprite is currently transiting from one state/value to\r\n   * another.\r\n   *\r\n   * @return Is in transition?\r\n   */\n\n\n  Sprite.prototype.isInTransition = function () {\n    return this.animations.length > 0;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"isHover\", {\n    /**\r\n     * @return Is hovered?\r\n     */\n    get: function () {\n      if (this.isInteractive()) {\n        return this.interactions.isHover;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Indicates if this element has a mouse pointer currently hovering\r\n     * over it, or if it has any touch pointers pressed on it.\r\n     *\r\n     * You can force element to be \"hovered\" manually, by setting this property\r\n     * to `true`.\r\n     *\r\n     * @param value Is hovered?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (value !== this.isHover) {\n        if (this.isInteractive()) {\n          this.interactions.isHover = value;\n\n          if (value) {\n            this.handleOver();\n          } else {\n            this.interactions.isRealHover = false;\n            this.handleOut();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isDragged\", {\n    /**\r\n     * Returns indicator if this element is being dragged at the moment.\r\n     *\r\n     * @return Is dragged?\r\n     */\n    get: function () {\n      return this._isDragged;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isResized\", {\n    /**\r\n     * Returns indicator if this element is being resized at the moment.\r\n     *\r\n     * @return Is resized?\r\n     */\n    get: function () {\n      return this._isResized;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isDown\", {\n    /**\r\n     * @return Is down?\r\n     */\n    get: function () {\n      if (this.isInteractive()) {\n        return this.interactions.isDown;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Indicates if this element has any pointers (mouse or touch) pressing down\r\n     * on it.\r\n     *\r\n     * @param value Is down?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.isInteractive() && this.isDown != value) {\n        this.interactions.isDown = value;\n\n        if (value) {\n          this.handleDown();\n        } else {\n          this.handleUp();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isFocused\", {\n    /**\r\n     * @return Is focused?\r\n     */\n    get: function () {\n      if (this.isInteractive()) {\n        return this.interactions.isFocused;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Indicates if this element is focused (possibly by tab navigation).\r\n     *\r\n     * @param value Is focused?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.focusable && this.isFocused != value) {\n        if (this.isInteractive()) {\n          this.interactions.isFocused = value;\n\n          if (value === true) {\n            this.handleFocus();\n          } else {\n            this.handleBlur();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isActive\", {\n    /**\r\n     * @return Is active?\r\n     */\n    get: function () {\n      return this._isActive;\n    },\n\n    /**\r\n     * Indicates if this element is currently active (toggled on) or not\r\n     * (toggled off).\r\n     *\r\n     * @param value Is active?\r\n     */\n    set: function (value) {\n      this.setActive(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sprite.prototype.setActive = function (value) {\n    value = $type.toBoolean(value);\n\n    if (this._isActive !== value) {\n      this._isActive = value;\n\n      if (value && this.states.hasKey(\"active\")) {\n        this.setState(\"active\");\n\n        if (this.isHover && this.states.hasKey(\"hoverActive\")) {\n          this.setState(\"hoverActive\");\n        }\n      } else {\n        this.applyCurrentState();\n      }\n\n      this.dispatchImmediately(\"toggled\");\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"disabled\", {\n    /**\r\n     * @return Disabled?\r\n     */\n    get: function () {\n      //if(this._internalDisabled){\n      //\treturn true;\n      //}\n      var current = this.getPropertyValue(\"disabled\");\n\n      if ($type.hasValue(current)) {\n        return current;\n      } else {\n        if (this.virtualParent) {\n          return this.virtualParent.disabled;\n        }\n\n        if (this._parent) {\n          return this._parent.disabled;\n        }\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Controls if element is disabled.\r\n     *\r\n     * A disabled element is hidden, and is removed from any processing, layout\r\n     * calculations, and generally treated as if it does not exist.\r\n     *\r\n     * The element itself is not destroyed, though. Setting this back to `false`,\r\n     * will \"resurrect\" the element.\r\n     *\r\n     * @param value  Disabled?\r\n     */\n    set: function (value) {\n      this.setDisabled(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sprite.prototype.setDisabled = function (value) {\n    value = $type.toBoolean(value);\n    var current = this.getPropertyValue(\"disabled\");\n\n    if (current != value) {\n      this.setPropertyValue(\"disabled\", value, true);\n\n      if (value) {\n        this.parent = this._parent;\n        this.removeFromInvalids();\n        this.group.attr({\n          \"display\": \"none\"\n        });\n        this.dispatch(\"disabled\");\n      } else {\n        if (this._parent) {\n          var group = this._parent.element;\n\n          if (!group.hasChild(this.group)) {\n            group.add(this.group);\n          }\n        }\n\n        if (this instanceof Container) {\n          this.deepInvalidate();\n\n          if (this._background) {\n            this._background.invalidate();\n          }\n        } else {\n          this.invalidate();\n        }\n\n        if (!this.__disabled) {\n          this.removeSVGAttribute(\"display\");\n        }\n\n        this.dispatch(\"enabled\");\n      }\n\n      this.dispatch(\"transformed\");\n      system.requestFrame();\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"__disabled\", {\n    /**\r\n     * @ignore\r\n     * @return Disabled?\r\n     */\n    get: function () {\n      return this._internalDisabled;\n    },\n\n    /**\r\n     * Internal disable method.\r\n     *\r\n     * Do not use it for disabling elements. Use `disabled` accessor instead.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Disabled?\r\n     */\n    set: function (value) {\n      if (this._internalDisabled != value) {\n        this._internalDisabled = value;\n        this._updateDisabled = true;\n        this.invalidatePosition(); // better use this instead of invalidate()\n\n        if (!value) {\n          this.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"numberFormatter\", {\n    /**\r\n     * @return A [[NumberFormatter]] instance to be used\r\n     */\n    get: function () {\n      if (this._numberFormatter) {\n        return this._numberFormatter;\n      } else if (this.virtualParent) {\n        return this.virtualParent.numberFormatter;\n      } else if (this._parent) {\n        return this._parent.numberFormatter;\n      }\n\n      this._numberFormatter = new NumberFormatter();\n      this._numberFormatter.language = this.language;\n      return this.numberFormatter;\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * FORMATTERS AND OTHER EXTERNAL HELPERS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * A [[NumberFormatter]] instance.\r\n     *\r\n     * This is used to format numbers.\r\n     *\r\n     * ```TypeScript\r\n     * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"numberFormatter\": {\r\n     *     \"numberFormat\": \"#,###.#####\"\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * You can set a separate instance of formatter for each\r\n     * individual element. However that would be unnecessary overhead as\r\n     * all elements would automatically inherit formatter from their parents,\r\n     * all the way up to the chart itself.\r\n     *\r\n     *\r\n     * @see {@link NumberFormatter} for more info on formatting numbers\r\n     * @param value  An instance of NumberFormatter\r\n     */\n    set: function (value) {\n      this._numberFormatter = value;\n      this._numberFormatter.language = this.language;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dateFormatter\", {\n    /**\r\n     * @return An instance of DateFormatter\r\n     */\n    get: function () {\n      if (this._dateFormatter) {\n        return this._dateFormatter;\n      } else if (this.virtualParent) {\n        return this.virtualParent.dateFormatter;\n      } else if (this._parent) {\n        return this._parent.dateFormatter;\n      }\n\n      this._dateFormatter = new DateFormatter();\n      this._dateFormatter.language = this.language;\n      return this.dateFormatter;\n    },\n\n    /**\r\n     * A [[DateFormatter]] instance.\r\n     *\r\n     * This is used to format dates, e.g. on a date axes, balloons, etc.\r\n     *\r\n     * ```TypeScript\r\n     * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"dateFormatter\": {\r\n     *     \"dateFormat\": \"yyyy-MM-dd\"\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * You can set a separate instance of formatter for each\r\n     * individual element. However that would be unnecessary overhead as\r\n     * all elements would automatically inherit formatter from their parents,\r\n     * all the way up to the chart itself.\r\n     *\r\n     * @see {@link DateFormatter} for more info on dates formatting\r\n     * @param value  An instance of DateFormatter\r\n     */\n    set: function (value) {\n      this._dateFormatter = value;\n      this._dateFormatter.language = this.language;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"durationFormatter\", {\n    /**\r\n     * @return An instance of DurationFormatter\r\n     */\n    get: function () {\n      if (this._durationFormatter) {\n        return this._durationFormatter;\n      } else if (this.virtualParent) {\n        return this.virtualParent.durationFormatter;\n      } else if (this._parent) {\n        return this._parent.durationFormatter;\n      }\n\n      this._durationFormatter = new DurationFormatter();\n      this._durationFormatter.language = this.language;\n      return this.durationFormatter;\n    },\n\n    /**\r\n     * A [[DurationFormatter]] instance.\r\n     *\r\n     * This is used to format numbers as durations, e.g. on a value axes.\r\n     *\r\n     * You can set a separate instance of formatter for each\r\n     * individual element. However that would be unnecessary overhead as\r\n     * all elements would automatically inherit formatter from their parents,\r\n     * all the way up to the chart itself.\r\n     *\r\n     * @see {@link DurationFormatter} for more info on durations\r\n     * @param value  An instance of DurationFormatter\r\n     */\n    set: function (value) {\n      this._durationFormatter = value;\n      this._durationFormatter.language = this.language;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"language\", {\n    /**\r\n     * @return An instance of Language\r\n     */\n    get: function () {\n      var language = this._language.get();\n\n      if (language) {\n        return language;\n      } else if (this.virtualParent) {\n        return this.virtualParent.language;\n      } else if (this._parent) {\n        return this._parent.language;\n      }\n\n      language = new Language();\n      this.language = language;\n      return language;\n    },\n\n    /**\r\n     * A [[Language]] instance to use for translations.\r\n     *\r\n     * Normally it is enough to set language for the top-most element - chart.\r\n     *\r\n     * All other element child elements will automatically re-use that language\r\n     * object.\r\n     *\r\n     * @param value  An instance of Language\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (this._language.get() !== value) {\n        this._language.set(value, value.events.on(\"localechanged\", function (ev) {\n          if (_this._numberFormatter) {\n            _this._numberFormatter.language = _this.language;\n          }\n\n          if (_this._dateFormatter) {\n            _this._dateFormatter.language = _this.language;\n          }\n\n          if (_this._durationFormatter) {\n            _this._durationFormatter.language = _this.language;\n          }\n\n          if (_this._exporting.get()) {\n            var exporting = _this._exporting.get();\n\n            exporting.numberFormatter.language = _this.language;\n            exporting.dateFormatter.language = _this.language;\n            exporting.durationFormatter.language = _this.language;\n            exporting.language = _this.language;\n          }\n\n          if (_this instanceof Container) {\n            _this.deepInvalidate();\n          }\n        }));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * DATA-RELATED STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Parses the string for meta tags `{tag}` and replaces them with a real\r\n   * value. Supports straight up tags referring to the field in data, i.e.\r\n   * `{value}` or tags with additional formatting info. E.g.:\r\n   *\r\n   * ```Text\r\n   * {myfield.formatDate(\"yyyy-MM-dd\")}\r\n   * {myfield.formatDate()}\r\n   * {myfield.formatNumber(\"#,####.00\")}\r\n   * {myfield.formatNumber()}\r\n   * {myField.formatDuration(\"mm:ss\")}\r\n   * ```\r\n   *\r\n   * Etc.\r\n   *\r\n   * This method Will automatically detect and use proper formatter for the\r\n   * value.\r\n   *\r\n   * The source value will be looked up in various places: (in order)\r\n   * * Sprite's own `dataItem`\r\n   * * Sprite's properties\r\n   * * Parent's `dataItem`\r\n   * * Parent's properties\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param string            A string to format\r\n   * @param dataItem          DataItem\r\n   * @return Formatted string\r\n   */\n\n  Sprite.prototype.populateString = function (string, dataItem) {\n    if ($type.hasValue(string)) {\n      string = $type.castString(string);\n      string = getTextFormatter().escape(string);\n      var tags = string.match(/\\{([^}]+)\\}/g);\n      var i = void 0;\n\n      if (tags) {\n        for (i = 0; i < tags.length; i++) {\n          var tag = tags[i].replace(/\\{([^}]+)\\}/, \"$1\");\n          var value = this.getTagValue(tag, \"\", dataItem);\n\n          if (!$type.hasValue(value)) {\n            value = \"\";\n          }\n\n          string = string.split(tags[i]).join(value);\n        }\n      }\n\n      string = getTextFormatter().unescape(string);\n    } else {\n      string = \"\";\n    }\n\n    if (!this._adapterO) {\n      return string;\n    } else {\n      return this._adapterO.apply(\"populateString\", string);\n    }\n  };\n  /**\r\n   * Gets the value from data item and formats it according to specified format.\r\n   *\r\n   * If `format` is specified, it will use its contents to choose formatter for\r\n   * the value. Otherwise it will select formatter accordingly to actual value\r\n   * type.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Ability to force certain formatter on known numeric and date values\r\n   * @see {@link NumberFormatter}\r\n   * @see {@link DateFormatter}\r\n   * @see {@link DurationFormatter}\r\n   * @param tagName           Tag name to replace\r\n   * @param format            Format to use\r\n   * @param dataItem          DataItem\r\n   * @return Formatted value\r\n   */\n\n\n  Sprite.prototype.getTagValue = function (tagName, format, dataItem) {\n    var value;\n\n    if (!$type.hasValue(dataItem)) {\n      dataItem = this.dataItem;\n    } // Parse parts\n\n\n    var parts = [];\n    var reg = /([^.]+)\\(([^)]*)\\)|([^.]+)/g;\n    ;\n    var matches;\n\n    while (true) {\n      matches = reg.exec(tagName);\n\n      if (matches === null) {\n        break;\n      }\n\n      if (matches[3]) {\n        // Simple property\n        parts.push({\n          prop: matches[3]\n        });\n      } else {\n        // Method\n        // Parse parameters\n        var params = [];\n\n        if ($utils.trim(matches[2]) != \"\") {\n          var reg2 = /'([^']*)'|\"([^\"]*)\"|([0-9\\-]+)/g;\n          var matches2 = void 0;\n\n          while (true) {\n            matches2 = reg2.exec(matches[2]);\n\n            if (matches2 === null) {\n              break;\n            }\n\n            params.push(matches2[1] || matches2[2] || matches2[3]);\n          }\n        }\n\n        parts.push({\n          method: matches[1],\n          params: params\n        });\n      }\n    } // Check if we can retrieve the value from data item\n\n\n    if (dataItem) {\n      // Check values\n      value = this.getTagValueFromObject(parts, dataItem.values); // Check properties\n\n      if (!$type.hasValue(value) || $type.isObject(value)) {\n        // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and won't get to the dateX date.\n        value = this.getTagValueFromObject(parts, dataItem);\n      } // Check data context\n\n\n      var dataContext = dataItem.dataContext;\n\n      if (!$type.hasValue(value) && dataContext) {\n        value = this.getTagValueFromObject(parts, dataItem.dataContext); // Maybe it's a literal dot-separated name of the key in dataContext?\n\n        if (!$type.hasValue(value)) {\n          value = this.getTagValueFromObject([{\n            prop: tagName\n          }], dataContext);\n        } // scond data context level sometimes exist (tree map)\n\n\n        if (!$type.hasValue(value) && dataContext.dataContext) {\n          value = this.getTagValueFromObject(parts, dataContext.dataContext);\n        }\n      } // Check component's data item\n\n\n      if (!$type.hasValue(value) && dataItem.component && dataItem.component.dataItem !== dataItem) {\n        value = dataItem.component.getTagValue(tagName, format);\n      }\n    } // Check sprite's properties\n\n\n    if (!$type.hasValue(value)) {\n      value = this.getTagValueFromObject(parts, this.populateStringFrom || this);\n    } // Finally, check the parent\n\n\n    if (!$type.hasValue(value) && this._parent) {\n      value = this._parent.getTagValue(tagName, format);\n    }\n\n    return value;\n  };\n  /**\r\n   * Tries to retrieve values from properties of any object, then applies\r\n   * proper formatting to it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (improve)\r\n   * @param parts   Properties ant methods to access\r\n   * @param object  Source object\r\n   * @param format  A specific format to apply\r\n   * @return Formatted value\r\n   */\n\n\n  Sprite.prototype.getTagValueFromObject = function (parts, object, format) {\n    var current = object;\n    var formatApplied = false;\n\n    for (var i = 0, len = parts.length; i < len; i++) {\n      var part = parts[i];\n\n      if (part.prop) {\n        // Regular property\n        current = current[part.prop];\n\n        if (!$type.hasValue(current)) {\n          // Not set, return undefined\n          return;\n        }\n      } else {\n        // Method\n        switch (part.method) {\n          case \"formatNumber\":\n            var numberValue = $utils.anyToNumber(current);\n\n            if ($type.hasValue(numberValue)) {\n              current = this.numberFormatter.format(numberValue, format || part.params[0] || undefined);\n              formatApplied = true;\n            }\n\n            break;\n\n          case \"formatDate\":\n            var dateValue = void 0;\n\n            if ($type.isString(current)) {\n              dateValue = this.dateFormatter.parse(current);\n            } else {\n              dateValue = $utils.anyToDate(current);\n            }\n\n            if (!$type.isDate(dateValue) || $type.isNaN(dateValue.getTime())) {\n              // Was not able to get date out of value, quitting and letting\n              // calling method try another value\n              return;\n            }\n\n            if ($type.hasValue(dateValue)) {\n              current = this.dateFormatter.format(dateValue, format || part.params[0] || undefined);\n              formatApplied = true;\n            }\n\n            break;\n\n          case \"formatDuration\":\n            var durationValue = $utils.anyToNumber(current);\n\n            if ($type.hasValue(durationValue)) {\n              current = this.durationFormatter.format(durationValue, format || part.params[0] || undefined, part.params[1] || undefined);\n              formatApplied = true;\n            }\n\n            break;\n\n          case \"urlEncode\":\n          case \"encodeURIComponent\":\n            current = encodeURIComponent(current);\n            break;\n\n          default:\n            if (current[part.method]) {\n              current[part.method].apply(this, part.params);\n            }\n\n            break;\n        }\n      }\n    } // Apply default format if it wasn't applied explicitly\n\n\n    if (!formatApplied) {\n      var formatParts = [{\n        method: \"\",\n        params: format\n      }];\n\n      if (!$type.hasValue(format)) {\n        // Format is not set\n        // Determine from the type of the value\n        if ($type.isNumber(current)) {\n          formatParts[0].method = \"formatNumber\";\n          formatParts[0].params = \"\";\n        } else if ($type.isDate(current)) {\n          formatParts[0].method = \"formatDate\";\n          formatParts[0].params = \"\";\n        }\n      } else {\n        // Format set\n        // Try to determine formatter based on the format\n        var formatterType = $utils.getFormat(format); // format\n\n        if (formatterType === $strings.NUMBER) {\n          formatParts[0].method = \"formatNumber\";\n        } else if (formatterType === $strings.DATE) {\n          formatParts[0].method = \"formatDate\";\n        } else if (formatterType === $strings.DURATION) {\n          formatParts[0].method = \"formatDuration\";\n        }\n      } // Apply format\n\n\n      if (formatParts[0].method) {\n        current = this.getTagValueFromObject(formatParts, current);\n      }\n    }\n\n    return current;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"dataItem\", {\n    /**\r\n     * @return [[DataItem]]\r\n     */\n    get: function () {\n      if (!this._dataItem) {\n        if (this.virtualParent) {\n          return this.virtualParent.dataItem;\n        }\n\n        if (this._parent) {\n          return this._parent.dataItem;\n        }\n      }\n\n      return this._dataItem;\n    },\n\n    /**\r\n     * A [[DataItem]] to use as element's data source.\r\n     *\r\n     * @todo Review type\r\n     * @param dataItem  DataItem\r\n     */\n    set: function (dataItem) {\n      //an not use this[\"_dataItem\"] here, as we return parent data item if this sprite doesn't have one.\n      // @todo:think about it\n      this.setDataItem(dataItem);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets currently used [[DataItem]].\r\n   *\r\n   * If the element has also `configField` set, it will also look for any\r\n   * config in DataItem's data context to apply to this element.\r\n   *\r\n   * @param dataItem DataItem\r\n   */\n\n  Sprite.prototype.setDataItem = function (dataItem) {\n    var _this = this;\n\n    if (this._dataItem != dataItem) {\n      this._dataItem = dataItem;\n\n      if (dataItem) {\n        if (this.configField) {\n          var dataContext_1 = dataItem.dataContext;\n\n          if (dataContext_1) {\n            this.config = dataContext_1[this.configField];\n\n            if (!this.config && dataContext_1.dataContext) {\n              this.config = dataContext_1.dataContext[this.configField];\n            }\n          }\n        }\n\n        var dataContext_2 = dataItem.dataContext;\n\n        if (dataContext_2) {\n          var dataContext2_1 = dataContext_2.dataContext;\n          $object.each(this.propertyFields, function (propertyName, fieldValue) {\n            if ($type.hasValue(dataContext_2[fieldValue])) {\n              var anyThis = _this;\n              anyThis[propertyName] = dataContext_2[fieldValue];\n            } else {\n              if (dataContext2_1) {\n                var value = dataContext2_1[fieldValue];\n\n                if ($type.hasValue(value)) {\n                  var anyThis = _this;\n                  anyThis[propertyName] = value;\n                }\n              }\n            }\n          });\n        }\n      }\n\n      this.invalidate();\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * PROPERTY UTILITIES\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Returns element's property value.\r\n   *\r\n   * Will check if there are any bindings with [[DataItem]].\r\n   *\r\n   * Will also apply any adapters bound to `propertyName`.\r\n   *\r\n   * @param propertyName  Property name\r\n   * @return Property value\r\n   */\n\n\n  Sprite.prototype.getPropertyValue = function (propertyName) {\n    var propValue = this.properties[propertyName]; // Apply adapter\n\n    if (!this._isTemplate) {\n      if (this._adapterO) {\n        propValue = this._adapterO.apply(propertyName, propValue);\n      }\n\n      propValue = globalAdapter.applyAll(this, propertyName, propValue);\n    }\n\n    return propValue;\n  };\n\n  Sprite.prototype.setColorProperty = function (property, value, invalidate) {\n    var currentValue = this.properties[property];\n\n    if (value instanceof Color && currentValue instanceof Color && value.toString() == currentValue.toString()) {\n      return false;\n    } else {\n      return this.setPropertyValue(property, value, invalidate);\n    }\n  };\n\n  Sprite.prototype.setPercentProperty = function (property, value, invalidate, transform, precision, floor) {\n    value = $type.toNumberOrPercent(value);\n\n    if ($type.isNumber(value)) {\n      if ($type.isNumber(precision)) {\n        value = $math.round(value, precision, floor);\n      }\n\n      return this.setPropertyValue(property, value, invalidate, transform);\n    } else {\n      var currentValue = this.properties[property];\n\n      if (value instanceof Percent && currentValue instanceof Percent && value.value == currentValue.value) {\n        return false;\n      } else {\n        return this.setPropertyValue(property, value, invalidate, transform);\n      }\n    }\n  };\n  /**\r\n   * Sets elements's property value. Will also propagate the same property value\r\n   * on all element's clones.\r\n   *\r\n   * @param property    Property\r\n   * @param value       Value\r\n   * @param invalidate  Should the sprite be invalidated, cause it's re-rendering\r\n   * @param transform   Re-apply positioning of the element\r\n   * @return Did the value change? It will return `true` if the new value and the old value of the property are not the same\r\n   * @todo Review propagation to clones. Right now we simply check if clone is disposed before setting the same property on it. It's better to remove from clone list altogether.\r\n   */\n\n\n  Sprite.prototype.setPropertyValue = function (property, value, invalidate, transform) {\n    if (this.properties[property] !== value && !this.isDisposed()) {\n      this.properties[property] = value;\n\n      if (this.events.isEnabled(\"propertychanged\")) {\n        var event_1 = {\n          type: \"propertychanged\",\n          target: this,\n          property: property\n        };\n        this.events.dispatchImmediately(\"propertychanged\", event_1);\n      }\n\n      if (invalidate) {\n        this.invalidate();\n      }\n\n      if (transform) {\n        this.invalidatePosition();\n      }\n\n      if (this.applyOnClones) {\n        var clones = this.clones.values;\n        var length_2 = clones.length;\n\n        for (var i = 0; i < length_2; ++i) {\n          var clone = clones[i];\n\n          if (!clone.isDisposed()) {\n            //(<Sprite>clone).setPropertyValue(<any>property, value, invalidate, transform);\n            clone[property] = value;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  Sprite.prototype.bind = function (property, source, bindToProperty, modifier) {\n    var _this = this;\n\n    if (bindToProperty === void 0) {\n      bindToProperty = property;\n    }\n\n    if ($type.hasValue(this._bindings[property])) {\n      this._bindings[property].dispose();\n    } // set current value\n\n\n    this[property] = source[bindToProperty]; //source.addEventListener(AMEvent.PROPERTY_CHANGED, this.handleBindings, false, this);\n\n    this._bindings[property] = source.events.on(\"propertychanged\", function (event) {\n      if (event.property === bindToProperty) {\n        var value = source[bindToProperty];\n\n        if (modifier) {\n          value = modifier(value);\n        } // TODO clonesById\n\n\n        _this[property] = value;\n      }\n    });\n  };\n  /**\r\n   * Sets up and obeserver function to monitor changes in particular property\r\n   * or properties.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param property  Element's property name\r\n   * @param listener  Handler function\r\n   * @param context   Context for handler function\r\n   * @returns Event Disposer\r\n   */\n\n\n  Sprite.prototype.observe = function (property, listener, context, shouldClone) {\n    var _this = this;\n\n    return new MultiDisposer($array.map($array.toArray(property), function (prop) {\n      return _this.events.on(\"propertychanged\", function (e) {\n        if (e.property === prop) {\n          listener.call(context, e);\n        }\n      }, context, shouldClone);\n    }));\n  };\n  /**\r\n   * ==========================================================================\r\n   * ACCESSIBILITY-RELATED PROPERTIES\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Applies accessibility to the SVG element.\r\n   *\r\n   * Adds `<title>` and `<description>` elements as well as `aria-labelledby`\r\n   * and `role` properties.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.applyAccessibility = function () {\n    // Check if we need to add label and description\n    var title = this.readerTitle,\n        description = this.readerDescription,\n        role = this.role,\n        hidden = this.readerHidden,\n        checked = this.readerChecked,\n        controls = this.readerControls,\n        live = this.readerLive,\n        orientation = this.readerOrientation,\n        valueNow = this.readerValueNow,\n        valueText = this.readerValueText; // Init label/describe ids\n\n    var labelledByIds = [];\n    var describedByIds = [];\n    var labelledBy = this.readerLabelledBy;\n\n    if (labelledBy) {\n      labelledByIds.push(labelledBy);\n    }\n\n    var describedBy = this.readerDescribedBy;\n\n    if (describedBy) {\n      describedByIds.push(describedBy);\n    } // Add arial-label attribute if present\n    // If not readerTitle and labelledBy is set we will use <title> element\n    // instead of aria-label\n    // TODO: should we check agains this.showSystemTooltip?\n\n\n    if (title) {\n      if (labelledByIds.length || this.showSystemTooltip) {\n        var titleElement = this.titleElement;\n        var titleId = this.uid + \"-title\";\n\n        if (titleElement.node.textContent != title) {\n          titleElement.node.textContent = title;\n          titleElement.attr({\n            id: titleId\n          });\n        }\n\n        labelledByIds.push(titleId);\n      } else {\n        if (this._titleElement) {\n          this.group.removeElement(this._titleElement);\n          this._titleElement = undefined;\n        }\n\n        this.setSVGAttribute({\n          \"aria-label\": title\n        });\n      }\n    } else {\n      this.removeSVGAttribute(\"aria-label\");\n\n      if (this._titleElement) {\n        this.group.removeElement(this._titleElement);\n        this._titleElement = undefined;\n      }\n    } // Add description\n\n\n    if (description) {\n      var descriptionElement = this.descriptionElement;\n      var descriptionId = this.uid + \"-description\";\n\n      if (descriptionElement.node.textContent != description) {\n        descriptionElement.node.textContent = description;\n        descriptionElement.attr({\n          id: descriptionId\n        });\n      }\n\n      describedByIds.push(descriptionId);\n    } else if (this._descriptionElement) {\n      this.group.removeElement(this._descriptionElement);\n      this._descriptionElement = undefined;\n    } // Add label and described properties\n\n\n    if (labelledByIds.length) {\n      this.setSVGAttribute({\n        \"aria-labelledby\": labelledByIds.join(\" \")\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-labelledby\");\n    }\n\n    if (describedByIds.length) {\n      this.setSVGAttribute({\n        \"aria-describedby\": describedByIds.join(\" \")\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-describedby\");\n    } // Apply role\n\n\n    if (role) {\n      this.setSVGAttribute({\n        \"role\": role\n      });\n    } else {\n      this.removeSVGAttribute(\"role\");\n    } // Apply aria-hidden\n\n\n    if (hidden) {\n      this.setSVGAttribute({\n        \"aria-hidden\": \"true\"\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-hidden\");\n    } // Apply aria-checked\n\n\n    if (checked) {\n      this.setSVGAttribute({\n        \"aria-checked\": \"true\"\n      });\n    } else if (checked === false) {\n      this.setSVGAttribute({\n        \"aria-checked\": \"false\"\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-checked\");\n    } // Apply aria-controls\n\n\n    if (controls) {\n      this.setSVGAttribute({\n        \"aria-controls\": controls\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-controls\");\n    } // Apply aria-live\n\n\n    if (live) {\n      this.setSVGAttribute({\n        \"aria-live\": live\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-live\");\n    } // Apply aria-orientation\n\n\n    if (orientation) {\n      this.setSVGAttribute({\n        \"aria-orientation\": orientation\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-orientation\");\n    } // Apply aria-valuenow\n\n\n    if (valueNow) {\n      this.setSVGAttribute({\n        \"aria-valuenow\": valueNow\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-valuenow\");\n    } // Apply aria-valuetext\n\n\n    if (valueText) {\n      this.setSVGAttribute({\n        \"aria-valuetext\": valueText\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-valuetext\");\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"readerTitle\", {\n    /**\r\n     * @return Title\r\n     */\n    get: function () {\n      var title = this.getPropertyValue(\"readerTitle\");\n\n      if ($type.hasValue(title) && this.dataItem) {\n        return this.populateString(title);\n      }\n\n      return title;\n    },\n\n    /**\r\n     * Screen reader title of the element.\r\n     *\r\n     * @param value Title\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerTitle\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerDescription\", {\n    /**\r\n     * @return Description\r\n     */\n    get: function () {\n      var description = this.getPropertyValue(\"readerDescription\");\n\n      if ($type.hasValue(description) && this.dataItem) {\n        return this.populateString(description);\n      }\n\n      return this.getPropertyValue(\"readerDescription\");\n    },\n\n    /**\r\n     * Screen reader description of the element.\r\n     *\r\n     * @param value Description\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerDescription\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"role\", {\n    /**\r\n     * @return Role\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"role\");\n    },\n\n    /**\r\n     * A WAI-ARIA role for the element.\r\n     *\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#role_definitions} for more information on WAI-ARIA roles\r\n     * @param value  Role\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"role\", value)) {\n        this.applyAccessibility();\n\n        if (value == \"slider\") {\n          this.setSVGAttribute({\n            \"aria-valuemin\": \"0\"\n          });\n          this.setSVGAttribute({\n            \"aria-valuemax\": \"100\"\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerHidden\", {\n    /**\r\n     * @return Hidden?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerHidden\");\n    },\n\n    /**\r\n     * Controls if element should be hidden from screen readers.\r\n     *\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden} for more information\r\n     * @param value  Hidden?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"readerHidden\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerChecked\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Checked?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerChecked\");\n    },\n\n    /**\r\n     * Controls if element is currently marked as \"checked\".\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-checked} for more information\r\n     * @param value Checked?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"readerChecked\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerControls\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Setting value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerControls\");\n    },\n\n    /**\r\n     * A `uid` of an element this element controls.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls} for more information\r\n     * @param value Setting value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerControls\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerLive\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Setting value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerLive\");\n    },\n\n    /**\r\n     * Controls accessibility setting \"aria-live\" for the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions} for more information\r\n     * @param value Setting value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerLive\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerLabelledBy\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Target element\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerLabelledBy\");\n    },\n\n    /**\r\n     * A `uid` of an element that describes this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby} for more information\r\n     * @param value Target element\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerLabelledBy\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerDescribedBy\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Target element\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerDescribedBy\");\n    },\n\n    /**\r\n     * A `uid` of an element that describes this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby} for more information\r\n     * @param value Target element\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerDescribedBy\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerOrientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerOrientation\");\n    },\n\n    /**\r\n     * Orientation of the element.\r\n     *\r\n     * @since 4.7.16\r\n     * @param value Orientation\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerOrientation\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerValueNow\", {\n    /**\r\n     * @return Current value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerValueNow\");\n    },\n\n    /**\r\n     * Current value of the element.\r\n     *\r\n     * @since 4.7.16\r\n     * @param value Current value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerValueNow\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerValueText\", {\n    /**\r\n     * @return Current value (text)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerValueText\");\n    },\n\n    /**\r\n     * Text representation of the current value of the element.\r\n     *\r\n     * @since 4.7.16\r\n     * @param value Current value (text)\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerValueText\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"keyboardOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * USER INTERACTIONS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns elements keyboard options.\r\n     *\r\n     * @return Keyboard options\r\n     */\n    get: function () {\n      if (!this.interactions.keyboardOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.keyboardOptions;\n        }\n\n        if (this._parent) {\n          return this._parent.keyboardOptions;\n        }\n      }\n\n      return this.interactions.keyboardOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"mouseOptions\", {\n    /**\r\n     * Mouse options.\r\n     *\r\n     * Enables controlling options related to the mouse, for example sensitivity\r\n     * of its mouse wheel.\r\n     *\r\n     * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n     * speed:\r\n     *\r\n     * ```TypeScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"plotContainer\": {\r\n     *     \"mouseOptions\": {\r\n     *       \"sensitivity\": 0.5\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @return Mouse options\r\n     */\n    get: function () {\n      if (!this.interactions.mouseOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.mouseOptions;\n        }\n\n        if (this._parent) {\n          return this._parent.mouseOptions;\n        }\n      }\n\n      return this.interactions.mouseOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"interactions\", {\n    /**\r\n     * Returns (creates if necessary) an [[InteractionObject]] associated with\r\n     * this element.\r\n     *\r\n     * [[InteractionObject]] is used to attach all kinds of user-interactions to\r\n     * the element, e.g. click/touch, dragging, hovering, and similar events.\r\n     *\r\n     * @return Interaction object\r\n     */\n    get: function () {\n      if (!this._interaction) {\n        var interaction = getInteraction().getInteraction(this.dom);\n        this._interaction = interaction;\n        interaction.clickable = this.clickable;\n        interaction.hoverable = this.hoverable;\n        interaction.trackable = this.trackable;\n        interaction.draggable = this.draggable;\n        interaction.swipeable = this.swipeable;\n        interaction.resizable = this.resizable;\n        interaction.wheelable = this.wheelable;\n        interaction.contextMenuDisabled = this.contextMenuDisabled;\n        interaction.inert = this.inert;\n        interaction.sprite = this;\n\n        this._disposers.push(interaction);\n      }\n\n      return this._interaction;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns true if interactions object was created. Mostly used just to avoid creating interactions object if not needed.\r\n   * @return Is Sprite interactive?\r\n   */\n\n  Sprite.prototype.isInteractive = function () {\n    if (this._interaction) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"focusable\", {\n    /**\r\n     * @return Can element be focused?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"focusable\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * ELEMENT FOCUS-RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Controls if the element can gain focus.\r\n     *\r\n     * Focusable element will be selectable via TAB key.\r\n     *\r\n     * Please note, clicking it with a mouse or touching will not add focus to\r\n     * it.\r\n     *\r\n     * Focused element will show a system-specific highlight, which might ruin\r\n     * the overal look. This is why we don't focus element on click/touch.\r\n     *\r\n     * A default setting varies for different elements. By default all elements\r\n     * are not focusable, except certain items like buttons, legend items, etc.\r\n     *\r\n     * @default undefined (auto)\r\n     * @param value  Can element be focused?\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"focusable\", value)) {\n        if (!value && !this.isInteractive()) {} else {\n          this.interactions.focusable = value;\n\n          if (value) {\n            this.setSVGAttribute({\n              \"focusable\": value\n            });\n\n            if (!$type.hasValue(this._tabindex)) {\n              this.tabindex = 0;\n            }\n          } else {\n            this.removeSVGAttribute(\"focusable\");\n            this.tabindex = undefined;\n          } // Set focus events that would apply \"focus\" state\n          // setEventDisposer will also remove listeners if value == false\n\n\n          this.interactions.setEventDisposer(\"sprite-focusable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"blur\", _this.handleBlur, _this, false), _this.events.on(\"focus\", _this.handleFocus, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Applies filters (if set) when element gains focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Original event\r\n   */\n\n  Sprite.prototype.handleFocus = function (ev) {\n    if (this.focusable) {\n      if (this.topParent) {\n        this.topParent.hasFocused = true;\n        this.topParent.focusedElement = this;\n      }\n\n      if (this.focusFilter) {\n        // Any `filters` manipulation will trigger `applyFilters()` so we don't\n        // need to call it here\n        this.filters.push(this.focusFilter);\n      }\n\n      if (this.hoverOnFocus) {\n        // Trigger a hover event as well\n        this.isHover = true;\n        this.handleOver();\n      }\n    }\n  };\n  /**\r\n   * Removes focus filter (if set) when elementloses focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Original event\r\n   */\n\n\n  Sprite.prototype.handleBlur = function (ev) {\n    if (this.focusable) {\n      if (this.topParent) {\n        this.topParent.hasFocused = false;\n        this.topParent.focusedElement = undefined;\n      }\n\n      if (this.focusFilter) {\n        // Any `filters` manipulation will trigger `applyFilters()` so we don't\n        // need to call it here\n        this.filters.removeValue(this.focusFilter);\n      }\n\n      if (this.hoverOnFocus) {\n        // Trigger a out event as well\n        this.isHover = false;\n        this.handleOut();\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"focusFilter\", {\n    /**\r\n     * A reference to a [[Filter]] to apply to element when it gains focus.\r\n     *\r\n     * Normally, browsers will draw a default ugly square around focused element,\r\n     * which totally makes sense because its purpose is to help identify active\r\n     * element for visually impaired people.\r\n     *\r\n     * However, if you would rather apply a filter, so you can modify how focused\r\n     * element looks like, use `focusFilter`.\r\n     *\r\n     * Simply set it to an anstance of [[FocusFilter]], or any other filter\r\n     * object.\r\n     *\r\n     * ```TypeScript\r\n     * chart.focusFilter = new am4core.FocusFilter();\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.focusFilter = new am4core.FocusFilter();\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"focusFilter\": {\r\n     *     \"type\": \"FocusFilter\"\r\n     *   },\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link Filter}\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n     * @ignore Exclude from docs\r\n     * @return Focused element filter\r\n     */\n    get: function () {\n      /*if (!this._focusFilter) {\r\n          this._focusFilter = new FocusFilter();\r\n          this._disposers.push(this._focusFilter);\r\n      }*/\n      //return this._focusFilter;\n      var focusFilter = this._focusFilter;\n\n      if (focusFilter) {\n        return focusFilter;\n      }\n\n      if (this.virtualParent) {\n        return this.virtualParent.focusFilter;\n      } else if (this._parent) {\n        return this._parent.focusFilter;\n      } //this._focusFilter = new FocusFilter();\n      //this._disposers.push(this._focusFilter);\n\n    },\n\n    /**\r\n     * @see {@link Filter}\r\n     * @ignore Exclude from docs\r\n     * @todo This is still experimental, don't use it\r\n     */\n    set: function (value) {\n      this._focusFilter = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hoverOnFocus\", {\n    /**\r\n     * @return Trigger hover on focus?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hoverOnFocus\");\n    },\n\n    /**\r\n     * If set to `true`, this element will also trigger `\"over\"` event with all\r\n     * the related consequences, like \"hover\" state being applied and tooltip\r\n     * being shown.\r\n     *\r\n     * Useful as an accessibility feature to display rollover tooltips on items\r\n     * selected via keyboard.\r\n     *\r\n     * @param value  Trigger hover on focus?\r\n     * @default false\r\n     */\n    set: function (value) {\n      if (value !== this.hoverOnFocus) {\n        this.setPropertyValue(\"hoverOnFocus\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tabindex\", {\n    /**\r\n     * @return TAB index\r\n     */\n    get: function () {\n      var index = this._tabindex;\n\n      if (index != null) {\n        return index;\n      } else if (this.virtualParent) {\n        return this.virtualParent.tabindex;\n      } else if (this._parent) {\n        return this._parent.tabindex;\n      }\n    },\n\n    /**\r\n     * Sets or returns TAB index.\r\n     *\r\n     * Tab index maintains the order in which focusable elements gain focus when\r\n     * TAB key is pressed.\r\n     *\r\n     * Please note, tab index is not local to the chart. It affects the whole\r\n     * of the page, including non-SVG elements. Maintain extreme causion when\r\n     * setting tab indexes, as it affects the user experience for the whole\r\n     * web page.\r\n     *\r\n     * @param value TAB index\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n\n      if (this.setPropertyValue(\"tabindex\", value) && $type.isNumber(value)) {\n        this.interactions.tabindex = value;\n        this.setSVGAttribute({\n          \"tabindex\": value\n        });\n        this._tabindex = value;\n        this.focusable = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"inertiaOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * DRAGGING AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns element's options to be used for inertia. This setting is\r\n     * inheritable, meaning that if not set directly, it will search in all its\r\n     * ascendants until very top.\r\n     *\r\n     * Inertia is used only if element's `inert` is set to `true`.\r\n     *\r\n     * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n     * movement, and will continue moving in the same drag direction, gradually\r\n     * reducing in speed until finally stops.\r\n     *\r\n     * Check [[IInertiaOptions]] for how you tweak inertia animations.\r\n     *\r\n     * @return Inertia options\r\n     */\n    get: function () {\n      if (!this.interactions.inertiaOptions) {\n        if (this._parent) {\n          return this._parent.inertiaOptions;\n        }\n      }\n\n      return this.interactions.inertiaOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"draggable\", {\n    /**\r\n     * @return `true` if element can be dragged\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"draggable\");\n    },\n\n    /**\r\n     * Controls if the element is draggable.\r\n     *\r\n     * @param value  `true` if element can be dragged\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"draggable\", value)) {\n        if (!value && !this.isInteractive()) {} else {\n          this.applyCursorStyle();\n          this.interactions.draggable = value; //interaction.processDraggable(this);\n          // Add events\n          // @todo Maybe attach to InteractionObject's multidisposer so that\n          // sprites events get disposed together with them?\n          // this.interactions.disposers.getItem(\"movable\")\n          // setEventDisposer will also remove listeners if value == false\n\n          this.interactions.setEventDisposer(\"sprite-draggable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"down\", _this.handleDown, _this, false), _this.events.on(\"dragstart\", _this.handleDragStart, _this, false), _this.events.on(\"drag\", _this.handleDragMove, _this, false), _this.events.on(\"dragstop\", _this.handleDragStop, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Executes when dragged element is being started to drag.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype.handleDragStart = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      this.interactions.originalPosition = {\n        x: this.pixelX,\n        y: this.pixelY\n      };\n      this._isDragged = true;\n      this.hideTooltip(0);\n    }\n  };\n  /**\r\n   * Tell this element to start being dragged. This is useful if you want to\r\n   * drag items by interactions performed not directly on the target element.\r\n   *\r\n   * Parameter `pointer` is highly recommended. By passing in the Pointer you\r\n   * will ensure that movement is tracked for the pointer that you want. If not\r\n   * supplied, the system will try to determine the most logical pointer.\r\n   *\r\n   * However this may fail if you have more than one pointer active, which\r\n   * might happen if you have several objects being dragged on a touch device.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer Pointer to use for movement\r\n   */\n\n\n  Sprite.prototype.dragStart = function (pointer) {\n    //this.dragStop(pointer);\n    //this.draggable = true;\n    this._isDragged = true;\n    getInteraction().dragStart(this.interactions, pointer);\n  };\n  /**\r\n   * Executes when dragged element is being dropped.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.handleDragStop = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      this._isDragged = false;\n      this.showTooltip();\n      this.interactions.originalPosition = undefined;\n    }\n  };\n  /**\r\n   * Stops manually initiated dragging of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer Pointer to use as a reference\r\n   */\n\n\n  Sprite.prototype.dragStop = function (pointer, cancelled) {\n    //this.draggable = false;\n    this._isDragged = false;\n    getInteraction().dragStop(this.interactions, pointer, cancelled); //this.handleDragStop();\n  };\n  /**\r\n   * Executes when {Sprite} is being dragged.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   * @todo Implement parent position offset calculation\r\n   */\n\n\n  Sprite.prototype.handleDragMove = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      var point = this.interactions.originalPosition;\n\n      if (point && this._isDragged) {\n        var globalScale = this._parent.globalScale * this.svgContainer.cssScale;\n        this.moveTo({\n          x: point.x + ev.shift.x / globalScale,\n          y: point.y + ev.shift.y / globalScale\n        }, undefined, undefined, true);\n      }\n\n      this.dispatchImmediately(\"dragged\", ev);\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"inert\", {\n    /**\r\n     * @return `true` if element should use inertia when animated\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"inert\");\n    },\n\n    /**\r\n     * Controls if the element should use inertia when interacted with.\r\n     *\r\n     * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n     * movement, and will continue moving in the same drag direction, gradually\r\n     * reducing in speed until finally stops.\r\n     *\r\n     * @default false\r\n     * @param value `true` if element should use inertia when animated\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"inert\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.interactions.inert = value;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hoverOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * HOVERING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns Sprite's hover options.\r\n     *\r\n     * @see {@link IHoverOptions} for available options.\r\n     * @return Options\r\n     */\n    get: function () {\n      if (!this.interactions.hoverOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.hoverOptions;\n        }\n\n        if (this._parent) {\n          return this._parent.hoverOptions;\n        }\n      }\n\n      return this.interactions.hoverOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hoverable\", {\n    /**\r\n     * @return `true` if element is hoverable\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hoverable\");\n    },\n\n    /**\r\n     * Controls if the element is hoverable (hover events are registered).\r\n     *\r\n     * Use `over` and `out` events, to watch for those respective actions.\r\n     *\r\n     * @default false\r\n     * @param value `true` if element can be hovered\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"hoverable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.hoverable = value; // setEventDisposer will also remove listeners if value == false\n\n          this.interactions.setEventDisposer(\"sprite-hoverable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"over\", _this.handleOver, _this, false), _this.events.on(\"out\", _this.handleOut, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles tasks when element becomes hovered:\r\n   * * Shows [[Tooltip]] if applicable\r\n   * * Applies \"hover\" state\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n  Sprite.prototype.handleOver = function (ev) {\n    if (this._outTimeout) {\n      this._outTimeout.dispose();\n    }\n\n    if (this.isHover) {\n      if (this.states.hasKey(\"hover\")) {\n        //this.setState(\"hover\");\n        // This will check `isHover` and will set \"hover\" state\n        if (!this.isHidden) {\n          this.applyCurrentState();\n        }\n      }\n\n      var point = void 0;\n\n      if (ev && ev.pointer) {\n        point = $utils.documentPointToSvg(ev.pointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\n      }\n\n      if (this.showTooltipOn == \"hover\") {\n        this.showTooltip(point);\n      }\n    } else {\n      if (this.showTooltipOn == \"hover\") {\n        this.hideTooltip();\n      }\n\n      if (!this.isHidden && this.states.hasKey(\"hover\")) {\n        this.applyCurrentState();\n      }\n    }\n  };\n  /**\r\n   * Handles tasks when element loses hover:\r\n   *\r\n   * * Hides [[Tooltip]]\r\n   * * Applies default state\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev [description]\r\n   */\n\n\n  Sprite.prototype.handleOut = function (ev) {\n    var _this = this;\n\n    if (this.tooltip && this.tooltip.targetSprite == this && this.tooltip.keepTargetHover) {\n      this._outTimeout = this.setTimeout(function () {\n        if (!_this.tooltip.isHover) {\n          if (_this.tooltip.targetSprite == _this) {\n            _this.hideTooltip();\n          }\n\n          _this._outTimeout = _this.setTimeout(_this.handleOutReal.bind(_this), _this.rollOutDelay);\n        }\n      }, 10);\n      return;\n    }\n\n    if (this.showTooltipOn == \"hover\") {\n      this.hideTooltip();\n    }\n\n    this._outTimeout = this.setTimeout(this.handleOutReal.bind(this), this.rollOutDelay);\n  };\n  /**\r\n   * [handleOutReal description]\r\n   *\r\n   * @ignore\r\n   * @todo description\r\n   */\n\n\n  Sprite.prototype.handleOutReal = function () {\n    if (!this.isHidden && !this.isHiding && this.states.hasKey(\"hover\")) {\n      this.applyCurrentState();\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"hitOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * CLICKING/TAPPING AND TOGGLING STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns Sprite's click (hit) options.\r\n     *\r\n     * Click (hit) options control things like double-click, timeouts, etc.\r\n     *\r\n     * @see {@link IHitOptions} for available options.\r\n     * @return Options\r\n     */\n    get: function () {\n      if (!this.interactions.hitOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.hitOptions;\n        }\n\n        if (this._parent) {\n          return this._parent.hitOptions;\n        }\n      }\n\n      return this.interactions.hitOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Prepares element's after `down` event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n\n  Sprite.prototype.handleDown = function (ev) {\n    if (this.interactions.downPointers.length === 1) {\n      this.interactions.originalPosition = {\n        x: this.pixelX,\n        y: this.pixelY\n      };\n      this.interactions.originalAngle = this.rotation;\n      this.interactions.originalScale = this.scale;\n\n      if (this.states.hasKey(\"down\")) {\n        this.setState(\"down\");\n      }\n    }\n  };\n  /**\r\n   * Prepares element's after `up` event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n\n\n  Sprite.prototype.handleUp = function (ev) {\n    var _this = this;\n    /*if (!this.isDown) {\r\n        this.interactions.originalPosition = null;\r\n        this.interactions.originalAngle = null;\r\n        this.interactions.originalScale = null;\r\n    }*/\n\n\n    this._isResized = false;\n\n    if (this.states.hasKey(\"down\")) {\n      this.applyCurrentState();\n    }\n\n    if (this.showTooltipOn == \"hit\") {\n      this.updateTooltipPosition(ev.pointer ? ev.pointer.point : undefined);\n\n      this._disposers.push(registry.events.once(\"exitframe\", function () {\n        _this.showTooltip();\n      }));\n\n      this._disposers.push(getInteraction().body.events.once(\"down\", function (ev) {\n        _this.hideTooltip();\n      }));\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"clickable\", {\n    /**\r\n     * @return {boolean}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"clickable\");\n    },\n\n    /**\r\n     * Indicates if the element is clickable.\r\n     *\r\n     * Some type of the elements, like buttons are clickable by default.\r\n     *\r\n     * Most of the elements are not clickable by default.\r\n     *\r\n     * Use `hit`, `doublehit`, `up`, `down`, `toggled` events to watch for\r\n     * respective click/touch actions.\r\n     *\r\n     * @param value `true` if element can be clicked\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"clickable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.clickable = value; // setEventDisposer will also remove listeners if value == false\n\n          this.interactions.setEventDisposer(\"sprite-clickable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"down\", _this.handleDown, _this, false), _this.events.on(\"up\", _this.handleUp, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"togglable\", {\n    /**\r\n     * @return Is togglable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"togglable\");\n    },\n\n    /**\r\n     * Indicates if element can be toggled on and off by subsequent clicks/taps.\r\n     *\r\n     * Togglable element will alternate its `isActive` property between `true`\r\n     * and `false` with each click.\r\n     *\r\n     * @param value Is togglable?\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"togglable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          // setEventDisposer will also remove listeners if value == false\n          this.interactions.setEventDisposer(\"sprite-togglable\", value, function () {\n            return _this.events.on(\"hit\", _this.handleToggle, _this, false);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles toggling of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n\n  Sprite.prototype.handleToggle = function (ev) {\n    this.isActive = !this.isActive;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"contextMenuDisabled\", {\n    /**\r\n     * @return Context menu disabled?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"contextMenuDisabled\");\n    },\n\n    /**\r\n     * Should element prevent context menu to be displayed, e.g. when\r\n     * right-clicked?\r\n     *\r\n     * @default false\r\n     * @param value Context menu disabled?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"contextMenuDisabled\", value)) {\n        this.interactions.contextMenuDisabled = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"url\", {\n    /**\r\n     * @return URL\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"url\");\n    },\n\n    /**\r\n     * Click-through URL for this element.\r\n     *\r\n     * If set, clicking/tapping this element will open the new URL in a target\r\n     * window/tab as set by `urlTarget`.\r\n     *\r\n     * Please note that URL will be parsed by data placeholders in curly\r\n     * brackets, to be populated from data. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n     * ```\r\n     * ```JavaScript\r\n     * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"columns\": {\r\n     *       \"url\": \"https://www.google.com/search?q={category.urlEncode()}\"\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @param value URL\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"url\", value)) {\n        if (this._urlDisposer) {\n          this._urlDisposer.dispose();\n        } // If URL is not empty, set up events\n\n\n        if ($utils.isNotEmpty(value)) {\n          this._urlDisposer = this.events.on(\"hit\", this.urlHandler, this, false); // Set other required parameters\n\n          this.clickable = true;\n          this.cursorOverStyle = MouseCursorStyle.pointer;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"baseId\", {\n    /**\r\n     * [baseId description]\r\n     *\r\n     * @ignore\r\n     * @return [description]\r\n     */\n    get: function () {\n      if (!this._baseId && this._parent) {\n        this.baseId = this._parent.baseId;\n      }\n\n      return this._baseId;\n    },\n\n    /**\r\n     * [baseId description]\r\n     *\r\n     * @ignore\r\n     * @param  value  [description]\r\n     */\n    set: function (value) {\n      this.setBaseId(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sprite.prototype.setBaseId = function (value) {\n    if (value != this._baseId) {\n      if (this.invalid) {\n        this.invalid = false;\n        registry.removeFromInvalidSprites(this);\n        this.invalidate();\n      }\n\n      this._baseId = value;\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"baseSprite\", {\n    /**\r\n     * Returns the mail chart object that this element belongs to.\r\n     *\r\n     * In most cases it will mean the chart object.\r\n     *\r\n     * Can be used to retrieve chart object in various events and adapters.\r\n     *\r\n     * ```TypeScript\r\n     * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n     *   console.log(ev.target.baseSprite);\r\n     * });\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n     *   console.log(ev.target.baseSprite);\r\n     * });\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"seriesContainer\": {\r\n     *     \"events\": {\r\n     *       \"hit\": function(ev) {\r\n     *         console.log(ev.target.baseSprite);\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @readonly\r\n     * @return  Base chart object\r\n     */\n    get: function () {\n      if (this.isBaseSprite) {\n        return this;\n      } else if (this._parent) {\n        return this._parent.baseSprite;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"urlTarget\", {\n    /**\r\n     * @return URL target\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"urlTarget\");\n    },\n\n    /**\r\n     * Target to use for URL clicks:\r\n     *\r\n     * * _blank\r\n     * * _self (default)\r\n     * * _parent\r\n     * * _top\r\n     * * Name of the window/frame\r\n     *\r\n     * Ignored if `url` is not set.\r\n     *\r\n     * @param value URL target\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"urlTarget\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles URL transition on element click.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev An event object\r\n   */\n\n  Sprite.prototype.urlHandler = function (ev) {\n    // Is URL set?\n    if ($utils.isNotEmpty(this.url)) {\n      // Proceed to the URL\n      var url = this.populateString(this.url);\n\n      if (this.urlTarget === \"_self\") {\n        window.location.href = url;\n      } else {\n        window.open(url, this.urlTarget);\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"swipeOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * SWIPING GESTURE TRACKING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns element's swipe gesture options.\r\n     *\r\n     * @return Swipe gesture options\r\n     */\n    get: function () {\n      if (!this.interactions.swipeOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.swipeOptions;\n        }\n\n        if (this._parent) {\n          return this._parent.swipeOptions;\n        }\n      }\n\n      return this.interactions.swipeOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"swipeable\", {\n    /**\r\n     * @return Element swipable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"swipeable\");\n    },\n\n    /**\r\n     * Controls if element is swipeable.\r\n     *\r\n     * Swipable element will invoke `swipe`, `swipeleft` and `swiperight` events,\r\n     * when quick horizontal drag action is performed with either mouse or touch.\r\n     *\r\n     * Please note that combining swipe and drag is possible, however will incur\r\n     * a slight but noticeable delay in drag start.\r\n     *\r\n     * @param value  Element swipable?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"swipeable\", value)) {\n        this.applyCursorStyle();\n\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.interactions.swipeable = value;\n        } //interaction.processSwipeable(this);\n\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"trackable\", {\n    /**\r\n     * @return Track cursor movement over element?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"trackable\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * POINTER TRACKING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Indicates if the element is trackable (mouse position over it is reported to\r\n     * event listeners).\r\n     *\r\n     * Will invoke `track` events whenever pointer (cursor) changes position\r\n     * while over element.\r\n     *\r\n     * Please note, touch devices will also invoke `track` events when touch\r\n     * point is moved while holding down on a trackable element.\r\n     *\r\n     * @param value Track cursor movement over element?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"trackable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.trackable = value;\n        } //interaction.processTrackable(this);\n\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"wheelable\", {\n    /**\r\n     * @return Mouse wheel events enabled?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"wheelable\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * MOUSE-WHEEL RELATED\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Indicates if the element can be interacted with mouse wheel.\r\n     *\r\n     * Will invoke `wheel`, `wheelup`, `wheeldown`, `wheelleft`, and `wheelright`\r\n     * events when using mouse wheel over the element.\r\n     *\r\n     * @param value Mouse wheel events enabled?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"wheelable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.wheelable = value;\n        } //interaction.processWheelable(this);\n\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"resizable\", {\n    /**\r\n     * @return Element resizable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"resizable\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * RESIZE\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Indicates if this element is resizable.\r\n     *\r\n     * Enabling resize will turn on various interactions on the element. Their\r\n     * actual functionality will depend on other properties.\r\n     *\r\n     * If the element also `draggable`, resize will only happen with two points\r\n     * of contact on a touch device.\r\n     *\r\n     * If the element is not draggable, resize can be performed with just one\r\n     * point of contact, touch or mouse.\r\n     *\r\n     * Will invoke `resize` event every time the size of the element changes.\r\n     *\r\n     * @param value  Element resizable?\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"resizable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.resizable = value; // setEventDisposer will also remove listeners if value == false\n\n          this.interactions.setEventDisposer(\"sprite-resizable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"down\", _this.handleDown, _this, false), _this.events.on(\"resize\", _this.handleResize, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles resize intermediate step.\r\n   *\r\n   * By default this method resizes actual element. Each element, can override\r\n   * this method to implement their own resize logic.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n  Sprite.prototype.handleResize = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      this._isResized = true;\n      this.scale = this.interactions.originalScale * ev.scale;\n      this.validatePosition();\n      /*center: (io.draggable\r\n      ? $math.getMidPoint(point1, point2)\r\n      : {\r\n          \"x\": io.originalPosition.x,\r\n          \"y\": io.originalPosition.y\r\n      })*/\n      //this.moveTo(this.originalPosition.x + ev.shift.x, this.originalPosition.y + ev.shift.y);\n\n      if (this.draggable || this.dragWhileResize) {\n        this._isDragged = false;\n        var svgPoint1 = $utils.documentPointToSvg(ev.point1, this.htmlContainer, this.svgContainer.cssScale);\n        var svgPoint2 = $utils.documentPointToSvg(ev.point2, this.htmlContainer, this.svgContainer.cssScale);\n        var svgMidPoint = $math.getMidPoint(svgPoint1, svgPoint2);\n        var parentPoint1 = $utils.documentPointToSprite(ev.startPoint1, this._parent);\n        var parentPoint2 = $utils.documentPointToSprite(ev.startPoint2, this._parent);\n        var originalPosition = this.interactions.originalPosition;\n        var originalScale = this.interactions.originalScale;\n\n        if (originalPosition) {\n          var spritePoint1 = {\n            x: (parentPoint1.x - originalPosition.x) / originalScale,\n            y: (parentPoint1.y - originalPosition.y) / originalScale\n          };\n          var spritePoint2 = {\n            x: (parentPoint2.x - originalPosition.x) / originalScale,\n            y: (parentPoint2.y - originalPosition.y) / originalScale\n          };\n          var spriteMidPoint = $math.getMidPoint(spritePoint1, spritePoint2);\n          var parentPoint = $utils.svgPointToSprite(svgMidPoint, this._parent);\n          this.moveTo({\n            x: parentPoint.x - spriteMidPoint.x * this.scale,\n            y: parentPoint.y - spriteMidPoint.y * this.scale\n          }, undefined, undefined, true);\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"cursorOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * MOUSE-RELATED\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns element's cursor options.\r\n     *\r\n     * Cursor options usually define cursor style for various states of the\r\n     * hovered element.\r\n     *\r\n     * Elements inherit `cursorOptions` from their parents if they don't have\r\n     * them set explicitly.\r\n     *\r\n     * @see {@link ICursorOptions} for a list of available options\r\n     * @return Cursor options\r\n     */\n    get: function () {\n      if (!this.interactions.cursorOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.cursorOptions;\n        }\n\n        if (this._parent) {\n          return this._parent.cursorOptions;\n        }\n      }\n\n      return this.interactions.cursorOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"cursorOverStyle\", {\n    /**\r\n     * A shortcut to setting mouse cursor on hover.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```TypeScript\r\n     * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": {\r\n     *     // ...\r\n     *     \"slices\": {\r\n     *       \"cursorOverStyle\": \"pointer\"\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @param style An array of styles to apply onhover\r\n     */\n    set: function (style) {\n      if (!this.cursorOptions.overStyle) {\n        this.interactions.cursorOptions = {\n          defaultStyle: this.cursorOptions.defaultStyle\n        };\n      }\n\n      this.cursorOptions.overStyle = style;\n      getInteraction().applyCursorOverStyle(this.interactions);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"cursorDownStyle\", {\n    /**\r\n     * A shortcut to setting mouse cursor when button is pressed down.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```TypeScript\r\n     * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": {\r\n     *     // ...\r\n     *     \"slices\": {\r\n     *       \"cursorDownStyle\": \"grabbing\"\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @param style An array of styles to apply onhover\r\n     */\n    set: function (style) {\n      this.cursorOptions.downStyle = style;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Applies default cursor styles for interactable elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Determine if this is necessary. Maybe let's not apply any cursor styles by default\r\n   */\n\n  Sprite.prototype.applyCursorStyle = function () {// Draggable styles\n\n    /*if (this.draggable) {\r\n          if (!$type.hasValue(this.cursorOptions.overStyle)) {\r\n            this.cursorOptions.overStyle = MouseCursorStyle.grab;\r\n        }\r\n          if (!$type.hasValue(this.cursorOptions.downStyle)) {\r\n            this.cursorOptions.downStyle = MouseCursorStyle.grabbing;\r\n        }\r\n    }*/\n  };\n\n  Object.defineProperty(Sprite.prototype, \"interactionsEnabled\", {\n    /**\r\n     * @return Is interaction enabled for this element?\r\n     */\n    get: function () {\n      var value = this.getPropertyValue(\"interactionsEnabled\");\n\n      if (value === false) {\n        return false;\n      }\n\n      if (this.virtualParent) {\n        return this.virtualParent.interactionsEnabled;\n      }\n\n      if (this._parent) {\n        return this._parent.interactionsEnabled;\n      }\n\n      return true;\n    },\n\n    /**\r\n     * Setting this to `false` will effectively disable all interactivity on the\r\n     * element.\r\n     *\r\n     * @param value  Is interaction enabled for this element?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"interactionsEnabled\", value)) {\n        var pointerEvents = null; // must be null, not \"null\"!\n\n        if (!value) {\n          pointerEvents = \"none\";\n        } else {\n          // this is for IE\n          this.group.node.style.pointerEvents = \"\";\n        }\n\n        this.group.node.style.pointerEvents = pointerEvents;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"exporting\", {\n    /**\r\n     * @return Export instance\r\n     */\n    get: function () {\n      return this.getExporting();\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * EXPORT-RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * An [[Export]] instance.\r\n     *\r\n     * Used to access API of the chart export functionality.\r\n     *\r\n     * If `exporting` is not set, the element inherits [[Export]] instance from\r\n     * its parents.\r\n     *\r\n     * Upon request, if no parent has such instance, a new one is created, using\r\n     * default settings, what in most cases is just enough.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/} for more info about exporting\r\n     * @param exp  Export\r\n     */\n    set: function (exp) {\n      this._exporting.set(exp, exp);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * This is here as a method so that inheriting classes could override it.\r\n   *\r\n   * @return Export instance\r\n   */\n\n  Sprite.prototype.getExporting = function () {\n    var _export = this._exporting.get();\n\n    if (_export) {\n      return _export;\n    } else {\n      if (this.isStandaloneInstance || !this._parent) {\n        _export = new Export(this.svgContainer.SVGContainer);\n        _export.sprite = this;\n        _export.language = this.language;\n        _export.numberFormatter = this.numberFormatter;\n        _export.dateFormatter = this.dateFormatter;\n        _export.durationFormatter = this.durationFormatter;\n\n        this._exporting.set(_export, _export);\n      } else {\n        return this._parent.exporting;\n      }\n    }\n\n    return _export;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"exportable\", {\n    /**\r\n     * @return Export?\r\n     */\n    get: function () {\n      return this._exportable;\n      /*const svgContainer = this.svgContainer;\r\n      return !svgContainer || $array.indexOf(svgContainer.nonExportableSprites, this) == -1;*/\n    },\n\n    /**\r\n     * If set to `false` this element will be omitted when exporting the chart\r\n     * to an image.\r\n     *\r\n     * @default true\r\n     * @param value  Export?\r\n     */\n    set: function (value) {\n      var svgContainer = this.svgContainer;\n      this._exportable = value;\n\n      if (svgContainer) {\n        if (value) {\n          $array.remove(svgContainer.nonExportableSprites, this);\n        } else if ($array.indexOf(svgContainer.nonExportableSprites, this) == -1) {\n          svgContainer.nonExportableSprites.push(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * MODAL/POPUP RELATED STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Private method to be used for \"classPrefix\" adapter for modals/popups.\r\n   *\r\n   * @param value  Prefix\r\n   */\n\n  Sprite.prototype.modalPrefix = function (value) {\n    value = options.classNamePrefix + value;\n    return value;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"modal\", {\n    /**\r\n     * Returns a [[Modal]] instance, associated with this chart.\r\n     * (elements top parent)\r\n     *\r\n     * Accessing modal does not make it appear. To make a modal appear, use\r\n     * `showModal()` method.\r\n     *\r\n     * @see {@link Modal} for more information about using Modal windows\r\n     * @return Modal instance\r\n     */\n    get: function () {\n      var svgContainer = this.svgContainer;\n\n      if (svgContainer) {\n        var modal = svgContainer.modal;\n\n        if (!modal.adapter.has(\"classPrefix\", this.modalPrefix)) {\n          modal.adapter.add(\"classPrefix\", this.modalPrefix);\n        }\n\n        return modal;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Opens a modal window with specific content (`text` parameter) and,\r\n   * optionally, `title`.\r\n   *\r\n   * The `text` parameter can contain HTML content.\r\n   *\r\n   * @see {@link Modal} for more information about using Modal windows\r\n   * @param text   Modal contents\r\n   * @param title  Title for the modal window\r\n   */\n\n  Sprite.prototype.openModal = function (text, title) {\n    var svgContainer = this.svgContainer;\n\n    if (svgContainer) {\n      return svgContainer.openModal(text, title);\n    }\n  };\n  /**\r\n   * Hides modal window if there is one currently open.\r\n   */\n\n\n  Sprite.prototype.closeModal = function () {\n    var svgContainer = this.svgContainer;\n\n    if (svgContainer) {\n      svgContainer.closeModal();\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"popups\", {\n    /**\r\n     * A list of popups for this chart.\r\n     *\r\n     * @return Popups\r\n     */\n    get: function () {\n      var svgContainer = this.svgContainer;\n\n      if (svgContainer) {\n        var popups = svgContainer.popups;\n        popups.template.sprite = this;\n\n        if (!popups.template.adapter.has(\"classPrefix\", this.modalPrefix)) {\n          popups.template.adapter.add(\"classPrefix\", this.modalPrefix);\n        }\n\n        return popups;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates, opens, and returns a new [[Popup]] window.\r\n   *\r\n   * `text` can be any valid HTML.\r\n   *\r\n   * `title` is currently not supported.\r\n   *\r\n   * @param text   Popup contents\r\n   * @param title  Popup title\r\n   * @return Popup instance\r\n   */\n\n  Sprite.prototype.openPopup = function (text, title) {\n    var svgContainer = this.svgContainer;\n\n    if (svgContainer) {\n      return svgContainer.openPopup(text, title);\n    }\n  };\n  /**\r\n   * Closes all currently open popup windows\r\n   */\n\n\n  Sprite.prototype.closeAllPopups = function () {\n    var svgContainer = this.svgContainer;\n\n    if (svgContainer) {\n      svgContainer.closeAllPopups();\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"x\", {\n    /**\r\n     * @return X coordinate\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"x\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * POSITIONAL PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Element's absolute or relative X coordinate.\r\n     *\r\n     * If setting both X and Y, please consider using `moveTo()` method instead,\r\n     * as it will be faster to set both coordinates at once.\r\n     *\r\n     * @param value X coordinate\r\n     */\n    set: function (value) {\n      if (!this.isDragged) {\n        this.setPercentProperty(\"x\", value, false, true, this._positionPrecision, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelX\", {\n    /**\r\n     * Returns element's current absolute X coordinate in pixels.\r\n     *\r\n     * @readonly\r\n     * @return X coordinate (px)\r\n     */\n    get: function () {\n      var value = $math.fitToRange(this.getPixelX(this.x), this.minX, this.maxX);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelX\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeX\", {\n    /**\r\n     * Returns element's current relative X coordinate in [[Percent]].\r\n     *\r\n     * @return X coordinate ([[Percent]])\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this.getRelativeX(this.x);\n      } else {\n        return this._adapterO.apply(\"relativeX\", this.getRelativeX(this.x));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"minX\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Min X (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minX\");\n    },\n\n    /**\r\n     * The smallest allowable absolute X coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Min X (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"minX\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maxX\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Max X (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxX\");\n    },\n\n    /**\r\n     * The biggest allowable absolute X coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Max X (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"maxX\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"y\", {\n    /**\r\n     * @return Y coordinate\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"y\");\n    },\n\n    /**\r\n     * Element's absolute or relative Y coordinate.\r\n     *\r\n     * If setting both X and Y, please consider using `moveTo()` method instead,\r\n     * as it will be faster to set both coordinates at once.\r\n     *\r\n     * @param value  Y coordinate\r\n     */\n    set: function (value) {\n      if (!this.isDragged) {\n        this.setPercentProperty(\"y\", value, false, true, this._positionPrecision, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelY\", {\n    /**\r\n     * Returns element's current absolute Y coordinate in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Y coordinate (px)\r\n     */\n    get: function () {\n      var value = $math.fitToRange(this.getPixelY(this.y), this.minY, this.maxY);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelY\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeY\", {\n    /**\r\n     * Returns element's current relative Y coordinate in [[Percent]].\r\n     *\r\n     * @readonly\r\n     * @return Y coordinate ([[Percent]])\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this.getRelativeX(this.y);\n      } else {\n        return this._adapterO.apply(\"relativeY\", this.getRelativeX(this.y));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"minY\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Min Y (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minY\");\n    },\n\n    /**\r\n     * The smallest allowable absolute Y coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Min Y (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"minY\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maxY\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Max Y (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxY\");\n    },\n\n    /**\r\n     * The biggest allowable absolute Y coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Max Y (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"maxY\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dx\", {\n    /**\r\n     * @return Horizontal offset (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"dx\");\n    },\n\n    /**\r\n     * A horizontal offset for the element in pixels.\r\n     *\r\n     * Can be negative value for offset to the left.\r\n     *\r\n     * @param value  Horizontal offset (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"dx\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dy\", {\n    /**\r\n     * @return Vertical offset (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"dy\");\n    },\n\n    /**\r\n     * A vertical offset for the element in pixels.\r\n     *\r\n     * Can be negative value for offset upwards.\r\n     *\r\n     * @param value  Vertical offset (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"dy\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"rotation\", {\n    /**\r\n     * @return Rotation (0-360)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"rotation\");\n    },\n\n    /**\r\n     * Rotation of the element in degrees. (0-360)\r\n     *\r\n     * Note: For convenience purposes, negative values (for counter-clockwise\r\n     * rotation) and values exceeding 360 can also be used.\r\n     *\r\n     * @param value  Rotation (0-360)\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      this.setPropertyValue(\"rotation\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"align\", {\n    /**\r\n     * @return Horizontal align\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"align\");\n    },\n\n    /**\r\n     * Controls horizontal alignment of the element.\r\n     *\r\n     * This is used by parent [[Container]] when layouting its children.\r\n     *\r\n     * @param value  Horizontal align\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"align\", value)) {\n        if (this._parent) {\n          this._parent.invalidateLayout();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"valign\", {\n    /**\r\n     * @return Vertical align\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"valign\");\n    },\n\n    /**\r\n     * Controls vertical alignment of the element.\r\n     *\r\n     * This is used by parent [[Container]] when layouting its children.\r\n     *\r\n     * @param value  Vertical align\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"valign\", value)) {\n        if (this._parent) {\n          this._parent.invalidateLayout();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"horizontalCenter\", {\n    /**\r\n     * @return Horizontal center\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"horizontalCenter\");\n    },\n\n    /**\r\n     * Controls which part of the element to treat as a horizontal center.\r\n     *\r\n     * The setting will be used when positioning, resizing and rotating the\r\n     * element.\r\n     *\r\n     * @param value  Horizontal center\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"horizontalCenter\", value)) {\n        this.updateCenter();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"verticalCenter\", {\n    /**\r\n     * @return Vertical center\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"verticalCenter\");\n    },\n\n    /**\r\n     * Controls which part of the element to treat as a vertical center.\r\n     *\r\n     * The setting will be used when positioning, resizing and rotating the\r\n     * element.\r\n     *\r\n     * @param value  Vertical center\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"verticalCenter\", value)) {\n        this.updateCenter();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maxWidth\", {\n    /**\r\n     * @return Maximum width (px)\r\n     */\n    get: function () {\n      var maxWidth = this.getPropertyValue(\"maxWidth\");\n\n      if (!$type.isNumber(maxWidth)) {\n        if (this._parent) {\n          var parentWidth = this._parent.maxWidth;\n\n          if (this._parent.layout != \"absolute\" && this.align != \"none\" && this.align != undefined) {\n            parentWidth = parentWidth - this.pixelMarginLeft - this.pixelMarginRight;\n          }\n\n          return parentWidth;\n        }\n      }\n\n      return maxWidth;\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * DIMENSIONAL PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Maximum allowed width for the element in pixels.\r\n     *\r\n     * @param value  Maximum width (px)\r\n     */\n    set: function (value) {\n      this.setMaxWidth(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sprite.prototype.setMaxWidth = function (value) {\n    var prevWidth = this.maxWidth;\n    var prevHeight = this.maxHeight;\n\n    if (this.setPropertyValue(\"maxWidth\", value)) {\n      if ($type.isNumber(this.relativeWidth)) {\n        this.invalidate();\n      }\n\n      var event_2 = {\n        type: \"maxsizechanged\",\n        target: this,\n        previousWidth: prevWidth,\n        previousHeight: prevHeight\n      };\n      this.dispatchImmediately(\"maxsizechanged\", event_2);\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"maxHeight\", {\n    /**\r\n     * @return Maximum height (px)\r\n     */\n    get: function () {\n      var maxHeight = this.getPropertyValue(\"maxHeight\");\n\n      if (!$type.isNumber(maxHeight)) {\n        if (this._parent) {\n          var parentHeight = this._parent.maxHeight;\n\n          if (this._parent.layout != \"absolute\" && this.valign != \"none\" && this.valign != undefined) {\n            parentHeight = parentHeight - this.pixelMarginTop - this.pixelMarginBottom;\n          }\n\n          return parentHeight;\n        }\n      }\n\n      return maxHeight;\n    },\n\n    /**\r\n     * Maximum allowed height for the element in pixels.\r\n     *\r\n     * @param value  Maximum height (px)\r\n     */\n    set: function (value) {\n      this.setMaxHeight(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sprite.prototype.setMaxHeight = function (value) {\n    var prevWidth = this.maxWidth;\n    var prevHeight = this.maxHeight;\n\n    if (this.setPropertyValue(\"maxHeight\", value)) {\n      if ($type.isNumber(this.relativeHeight)) {\n        this.invalidate();\n      }\n\n      var event_3 = {\n        type: \"maxsizechanged\",\n        target: this,\n        previousWidth: prevWidth,\n        previousHeight: prevHeight\n      };\n      this.dispatchImmediately(\"maxsizechanged\", event_3);\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"minWidth\", {\n    /**\r\n     * @return Minimum width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minWidth\");\n    },\n\n    /**\r\n     * Minimum width of the element in pixels.\r\n     *\r\n     * Set to `undefined` to remove the limit.\r\n     *\r\n     * @param value  Minimum width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"minHeight\", {\n    /**\r\n     * @return Minimum height (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minHeight\");\n    },\n\n    /**\r\n     * Minimum height for the element in pixels.\r\n     *\r\n     * Set to `undefined` to remove the limit.\r\n     *\r\n     * @param value  Minimum height (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minHeight\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"width\", {\n    /**\r\n     * @return Width (absolute or relative)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"width\");\n    },\n\n    /**\r\n     * Element's absolute or relative width.\r\n     *\r\n     * The width can either be absolute, set in numeric pixels, or relative, set\r\n     * in [[Percent]].\r\n     *\r\n     * Relative width will be calculated using closest measured ancestor\r\n     * [[Container]].\r\n     *\r\n     * NOTE: `width` is an accessor, which allows setting width in pixels or\r\n     * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n     * not ever use it. It uses either `pixelWidth` or `percentWidth`, so if\r\n     * you need to add an adapter for width add it for either of the two\r\n     * properties - whichever suits your requirements.\r\n     *\r\n     * @param value  Width (numeric in pixels or relative)\r\n     */\n    set: function (value) {\n      var changed = this.setPercentProperty(\"width\", value, true, false, this._positionPrecision, true);\n\n      if (changed) {\n        this.percentWidth = undefined;\n        this.relativeWidth = undefined;\n\n        if (value instanceof Percent) {\n          this.percentWidth = value.percent;\n\n          if ($type.isNumber(this._pixelWidth)) {\n            this.maxWidth = undefined;\n          }\n\n          this._pixelWidth = undefined;\n        } else {\n          this._pixelWidth = Number(value); //this._measuredWidth = this._pixelWidth;\n\n          this.maxWidth = this._pixelWidth;\n        }\n\n        this.invalidatePosition();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"height\", {\n    /**\r\n     * @return height (absolute or relative)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"height\");\n    },\n\n    /**\r\n     * Element's absolute or relative height.\r\n     *\r\n     * The height can either be absolute, set in numeric pixels, or relative, set\r\n     * in [[Percent]].\r\n     *\r\n     * Relative height will be calculated using closest measured ancestor\r\n     * [[Container]].\r\n     *\r\n     * NOTE: `height` is an accessor, which allows setting height in pixels or\r\n     * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n     * not ever use it. It uses either `pixelHeight` or `percentHeight`, so if\r\n     * you need to add an adapter for height add it for either of the two\r\n     * properties - whichever suits your requirements.\r\n     *\r\n     * @param value  Height (numeric in pixels or relative)\r\n     */\n    set: function (value) {\n      var changed = this.setPercentProperty(\"height\", value, true, false, this._positionPrecision, true);\n\n      if (changed) {\n        this.percentHeight = undefined;\n        this._relativeHeight = undefined;\n\n        if (value instanceof Percent) {\n          this.percentHeight = value.percent;\n\n          if ($type.isNumber(this._pixelHeight)) {\n            this.maxHeight = undefined;\n          }\n\n          this._pixelHeight = undefined;\n        } else {\n          this._pixelHeight = Number(value); //this._measuredHeight = this._pixelHeight;\n\n          this.maxHeight = this._pixelHeight; // yes, we reset maxWidth\n        }\n\n        this.invalidatePosition();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelWidth\", {\n    /**\r\n     * Returns element's width in pixels, if width was set. For actual width use measuredWidth property.\r\n     *\r\n     * @readonly\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      var width;\n\n      if ($type.isNumber(this.percentWidth)) {\n        width = this.maxWidth;\n      } else if ($type.isNumber(this._pixelWidth)) {\n        width = this._pixelWidth;\n      } else {\n        width = 0;\n      }\n\n      var minWidth = this.minWidth;\n\n      if (minWidth != null && width < minWidth) {\n        width = minWidth;\n      }\n\n      var value = $math.round(width, this._positionPrecision, true);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelWidth\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelHeight\", {\n    /**\r\n     * Returns element's height in pixels. For actual height use measuredHeight property.\r\n     *\r\n     * @readonly\r\n     * @return Height (px)\r\n     */\n    get: function () {\n      var height;\n\n      if ($type.isNumber(this.percentHeight)) {\n        height = this.maxHeight;\n      } else if ($type.isNumber(this._pixelHeight)) {\n        height = this._pixelHeight;\n      } else {\n        height = 0; //this._measuredHeightSelf;\n      }\n\n      var minHeight = this.minHeight;\n\n      if (minHeight != null && height < minHeight) {\n        height = minHeight;\n      }\n\n      var value = $math.round(height, this._positionPrecision, true);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelHeight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeWidth\", {\n    /**\r\n     * @return Relative width\r\n     * @ignore\r\n     */\n    get: function () {\n      var relativeWidth = this._relativeWidth;\n\n      if ($type.isNumber(relativeWidth)) {\n        if (!this._adapterO) {\n          return relativeWidth;\n        } else {\n          return this._adapterO.apply(\"relativeWidth\", relativeWidth);\n        }\n      }\n    },\n\n    /**\r\n     * Element's relative width in [[Percent]].\r\n     * @ignore\r\n     *\r\n     * @param value  Relative width\r\n     */\n    set: function (value) {\n      if (this._relativeWidth != value) {\n        this._relativeWidth = value; //\t\t\tthis.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeHeight\", {\n    /**\r\n     * @return Relative height\r\n     * @ignore\r\n     */\n    get: function () {\n      var relativeHeight = this._relativeHeight;\n\n      if ($type.isNumber(relativeHeight)) {\n        if (!this._adapterO) {\n          return relativeHeight;\n        } else {\n          return this._adapterO.apply(\"relativeHeight\", relativeHeight);\n        }\n      }\n    },\n\n    /**\r\n     * Element's relative height in [[Percent]].\r\n     *\r\n     * @param value  Relative height\r\n     * @ignore\r\n     */\n    set: function (value) {\n      if (this._relativeHeight != value) {\n        this._relativeHeight = value; //\t\t\tthis.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"measuredWidth\", {\n    /**\r\n     * Returns element's measured width in pixels.\r\n     *\r\n     * A measured width is actual width of contents plus `paddingRight` and* `paddingLeft`, relative to sprite parent, meaning that\r\n     * rotation and scale is taken into account.\r\n     *\r\n     * @readonly\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      if (this.disabled || this.__disabled) {\n        return 0;\n      }\n\n      if (!this._adapterO) {\n        return this._measuredWidth;\n      } else {\n        return this._adapterO.apply(\"measuredWidth\", this._measuredWidth);\n      } // it's not good to fit to min/max range as then rotations and scale won't be taken into account\n      //return this.adapter.apply(\"measuredWidth\", $math.fitToRange(this._measuredWidth, this.minWidth, this.maxWidth));\n\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"measuredHeight\", {\n    /**\r\n     * Returns elements's measured height in pixels.\r\n     *\r\n     * A measured height is actual height of contents plus `paddingTop` and `paddingBottom`, relative to sprite parent, meaning that\r\n     * rotation and scale taken into account.\r\n     *\r\n     * @readonly\r\n     * @return Height (px)\r\n     */\n    get: function () {\n      if (this.disabled || this.__disabled) {\n        return 0;\n      } // it's not good to fit to min/max range as then rotations and scale won't be taken into account\n      //return this.adapter.apply(\"measuredHeight\", $math.fitToRange(this._measuredHeight, this.minHeight, this.maxHeight));\n\n\n      if (!this._adapterO) {\n        return this._measuredHeight;\n      } else {\n        return this._adapterO.apply(\"measuredHeight\", this._measuredHeight);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"outerWidth\", {\n    /**\r\n     * Returns element's measured width plus its left and right margins in\r\n     * pixels.\r\n     *\r\n     * @readonly\r\n     * @return Outer width (px)\r\n     */\n    get: function () {\n      var value = this.pixelWidth + this.pixelMarginRight + this.pixelMarginLeft;\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"outerWidth\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"outerHeight\", {\n    /**\r\n     * Returns element's measured height plus its top and bottom margins in\r\n     * pixels.\r\n     *\r\n     * @readonly\r\n     * @return Outer height (px)\r\n     */\n    get: function () {\n      var value = this.pixelHeight + this.pixelMarginTop + this.pixelMarginBottom;\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"outerHeight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"innerWidth\", {\n    /**\r\n     * Returns element's measured inner width in pixels.\r\n     *\r\n     * Inner width is actual available space for content, e.g. element's width\r\n     * minus horizontal padding.\r\n     *\r\n     * @readonly\r\n     * @return Inner width (px)\r\n     */\n    get: function () {\n      var value = Math.max(0, this.pixelWidth - this.pixelPaddingRight - this.pixelPaddingLeft);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"innerWidth\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"innerHeight\", {\n    /**\r\n     * Returns element's measured inner height in pixels.\r\n     *\r\n     * Inner height is actual available space for content, e.g. element's height\r\n     * minus vertical padding.\r\n     *\r\n     * @readonly\r\n     * @return Inner height (px)\r\n     */\n    get: function () {\n      var value = Math.max(0, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"innerHeight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"globalScale\", {\n    /**\r\n     * Returns element's current \"global\" scale.\r\n     *\r\n     * Scale values accumulate over hierarchy of elements.\r\n     *\r\n     * E.g. if a [[Container]] has `scale = 2` and it's child has a `scale = 2`,\r\n     * the child's `globalScale` will be 4. (a multitude of `2 x 2`)\r\n     *\r\n     * @readonly\r\n     * @return Global scale\r\n     */\n    get: function () {\n      var scale = this.scale;\n\n      if (this._parent) {\n        scale = scale * this._parent.globalScale;\n      }\n\n      if (!this._adapterO) {\n        return scale;\n      } else {\n        return this._adapterO.apply(\"globalScale\", scale);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"scale\", {\n    /**\r\n     * @return Scale (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"scale\");\n    },\n\n    /**\r\n     * Scale of the element.\r\n     *\r\n     * The scale is set from 0 (element reduced to nothing) to 1 (default size).\r\n     * * 2 will mean element is increased twice.\r\n     * * 0.5 - reduced by 50%.\r\n     *\r\n     * Etc.\r\n     *\r\n     * @param value  Scale (0-1)\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n\n      if (value < 0) {\n        value = 0;\n      }\n\n      if (value != this.getPropertyValue(\"scale\")) {\n        this.setPropertyValue(\"scale\", value, false, true);\n        this.handleGlobalScale();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets all four margins for the element at once.\r\n   *\r\n   * Margins are set in pixels.\r\n   *\r\n   * @param top     Top margin\r\n   * @param right   Right margin\r\n   * @param bottom  Bottom margin\r\n   * @param left    Left margin\r\n   * @return Current element\r\n   */\n\n  Sprite.prototype.margin = function (top, right, bottom, left) {\n    this.marginTop = top;\n    this.marginRight = right;\n    this.marginBottom = bottom;\n    this.marginLeft = left;\n    return this;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"marginLeft\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginLeft\");\n    },\n\n    /**\r\n     * Left margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginLeft\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"marginRight\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginRight\");\n    },\n\n    /**\r\n     * Right margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginRight\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"marginTop\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginTop\");\n    },\n\n    /**\r\n     * Top margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginTop\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"marginBottom\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginBottom\");\n    },\n\n    /**\r\n     * Bottom margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginBottom\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginRight\", {\n    /**\r\n     * Returns current right margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Right margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelX(this.marginRight);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginRight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginRight\", {\n    /**\r\n     * Returns current relative right margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative right margin\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      var value = this.getRelativeX(this.marginRight);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginRight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginLeft\", {\n    /**\r\n     * Returns current left margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Left margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelX(this.marginLeft);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginLeft\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginLeft\", {\n    /**\r\n     * Returns current relative left margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative left margin\r\n     */\n    get: function () {\n      //@todo Maybe use [[Percent]]?\n      var value = this.getRelativeX(this.marginLeft);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginLeft\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginTop\", {\n    /**\r\n     * Returns current top margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Top margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelY(this.marginTop);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginTop\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginTop\", {\n    /**\r\n     * Returns current relative top margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative top margin\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      var value = this.getRelativeY(this.marginTop);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginTop\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginBottom\", {\n    /**\r\n     * Returns current bottom margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Bottom margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelY(this.marginBottom);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginBottom\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginBottom\", {\n    /**\r\n     * Returns current relative bottom margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative bottom margin\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      var value = this.getRelativeY(this.marginBottom);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginBottom\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets padding for the element in pixels.\r\n   *\r\n   * @param top     Top padding (px)\r\n   * @param right   Right padding (px)\r\n   * @param bottom  Bottom padding (px)\r\n   * @param left    Left padding (px)\r\n   * @return Element\r\n   */\n\n  Sprite.prototype.padding = function (top, right, bottom, left) {\n    this.paddingTop = top;\n    this.paddingRight = right;\n    this.paddingBottom = bottom;\n    this.paddingLeft = left;\n    return this;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"paddingLeft\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingLeft\");\n    },\n\n    /**\r\n     * Left padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingLeft\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paddingRight\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingRight\");\n    },\n\n    /**\r\n     * Right padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingRight\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paddingTop\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingTop\");\n    },\n\n    /**\r\n     * Top padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingTop\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paddingBottom\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingBottom\");\n    },\n\n    /**\r\n     * Bottom padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingBottom\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingRight\", {\n    /**\r\n     * Returns current right padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Right padding (px)\r\n     */\n    get: function () {\n      return this.getPixelX(this.paddingRight);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingRight\", {\n    /**\r\n     * Returns current relative right padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative right padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeX(this.paddingRight);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingLeft\", {\n    /**\r\n     * Returns current left padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Left padding (px)\r\n     */\n    get: function () {\n      return this.getPixelX(this.paddingLeft);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingLeft\", {\n    /**\r\n     * Returns current relative left padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative left padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeX(this.paddingLeft);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingTop\", {\n    /**\r\n     * Returns current top padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Top padding (px)\r\n     */\n    get: function () {\n      return this.getPixelY(this.paddingTop);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingTop\", {\n    /**\r\n     * Returns current relative top padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative top padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeY(this.paddingTop);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingBottom\", {\n    /**\r\n     * Returns current bottom padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Bottom padding (px)\r\n     */\n    get: function () {\n      return this.getPixelY(this.paddingBottom);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingBottom\", {\n    /**\r\n     * Returns current relative bottom padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative bottom padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeY(this.paddingBottom);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"path\", {\n    /**\r\n     * @return Path of a Sprite element\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"path\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * APPEARANCE-RELATED PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Path of Sprite element\r\n     */\n    set: function (value) {\n      this.setPath(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Sprite.prototype.setPath = function (value) {\n    if (this.setPropertyValue(\"path\", value)) {\n      if (this._adapterO) {\n        value = this._adapterO.apply(\"path\", value);\n      }\n\n      if (!this._isPath) {\n        if (!this.element || this.element.node && !(this.element.node instanceof SVGPathElement)) {\n          this.element = this.paper.add(\"path\");\n        }\n\n        this._isPath = true;\n      }\n\n      if ($type.hasValue(value)) {\n        this.element.attr({\n          \"d\": value\n        });\n      } else {\n        this.element.removeAttr(\"d\");\n      }\n\n      this.invalidatePosition(); // otherwise is 0x0\n\n      if (!this.inited) {\n        this.events.once(\"inited\", this.validatePosition, this, false);\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"fillModifier\", {\n    /**\r\n     * @return Fill color modifier\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fillModifier\");\n    },\n\n    /**\r\n     * [[ColorModifier]] that can be used to modify color and pattern of the\r\n     * element's fill, e.g. create gradients.\r\n     *\r\n     * @param value  Fill color modifiier\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"fillModifier\", value)) {\n        this.setFill(this.fill);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeModifier\", {\n    /**\r\n     * @return Stroke color modifier\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeModifier\");\n    },\n\n    /**\r\n     * [[ColorModifier]] that can be used to modify color and pattern of the\r\n     * element's stroke (outline), e.g. create gradients.\r\n     *\r\n     * @param value  Stroke color modifier\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"strokeModifier\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"fillOpacity\", {\n    /**\r\n     * @return Opacity (0-9)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fillOpacity\");\n    },\n\n    /**\r\n     * Element's fill opacity.\r\n     *\r\n     * Opacity ranges from 0 (fully transparent) to 1 (fully opaque).\r\n     *\r\n     * @param value  Opacity (0-1)\r\n     */\n    set: function (value) {\n      value = $math.toNumberRange(value, 0, 1);\n\n      if (this.setPropertyValue(\"fillOpacity\", value)) {\n        this.setSVGAttribute({\n          \"fill-opacity\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"fill\", {\n    /**\r\n     * @return Fill\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fill\");\n    },\n\n    /**\r\n     * Element's fill color or pattern.\r\n     *\r\n     * @param value  Fill\r\n     */\n    set: function (value) {\n      this.setFill(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets actual `fill` property on the SVG element, including applicable color\r\n   * modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Fill\r\n   */\n\n  Sprite.prototype.setFill = function (value) {\n    if (!$type.isObject(value) || \"r\" in value) {\n      value = toColor(value);\n    }\n\n    if (this.setColorProperty(\"fill\", value) || this.fillModifier) {\n      // this can not go into next if, as value is turned to Gradient\n      if (value instanceof Color) {\n        if (this.fillModifier) {\n          value = this.fillModifier.modify(value);\n        }\n      }\n\n      this.realFill = value; // todo: review this place when some Color type will be added\n\n      if (value instanceof Color) {\n        this.setSVGAttribute({\n          \"fill\": value.toString()\n        });\n      } else if (!$type.hasValue(value)) {\n        this.removeSVGAttribute(\"fill\");\n      } else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\n        var fill = value;\n        fill.paper = this.paper;\n        this.setSVGAttribute({\n          \"fill\": \"url(\\\"\" + $utils.getBaseURI() + fill.id + \"\\\")\"\n        });\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"opacity\", {\n    /**\r\n     * @return Opacity (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"opacity\");\n    },\n\n    /**\r\n     * Element's opacity.\r\n     *\r\n     * Opacity setting can range from 0 (fully transparent) to 1 (fully opaque).\r\n     *\r\n     * ATTENTION: It is highly not recommended to use `opacity` directly on the\r\n     * element. The charts use `opacity` to hide/show elements, so your setting\r\n     * might be lost if element is hidden and then later shown.\r\n     *\r\n     * Instead use methods `hide()` and `show()` to completely toggle off and on\r\n     * the element.\r\n     *\r\n     * Or, use properties `fillOpacity` and `strokeOpacity`, if you need to make\r\n     * the element semi-transparent.\r\n     *\r\n     * @param value Opacity (0-1)\r\n     */\n    set: function (value) {\n      value = $math.toNumberRange(value, 0, 1);\n\n      if (this.setPropertyValue(\"opacity\", value)) {\n        this.setSVGAttribute({\n          \"opacity\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"stroke\", {\n    /**\r\n     * @return Stroke setting\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"stroke\");\n    },\n\n    /**\r\n     * Element's stroke (outline) color or pattern.\r\n     *\r\n     * @param value  Stroke setting\r\n     */\n    set: function (value) {\n      this.setStroke(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets actual `stroke` property on the SVG element, including applicable\r\n   * color modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value Stroke setting\r\n   */\n\n  Sprite.prototype.setStroke = function (value) {\n    if (!$type.isObject(value) || \"r\" in value) {\n      value = toColor(value);\n    }\n\n    if (this.setColorProperty(\"stroke\", value) || this.strokeModifier) {\n      // this can not go into next if, as value is turned to Gradient\n      if (value instanceof Color) {\n        if (this.strokeModifier) {\n          value = this.strokeModifier.modify(value);\n        }\n      }\n\n      this.realStroke = value;\n\n      if (value instanceof Color) {\n        if (value.hex == \"none\") {\n          this.removeSVGAttribute(\"stroke\");\n        } else {\n          this.setSVGAttribute({\n            \"stroke\": value.toString()\n          });\n        }\n      } else if (!$type.hasValue(value)) {\n        this.removeSVGAttribute(\"stroke\");\n      } else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\n        var stroke = value;\n        stroke.paper = this.paper;\n        this.setSVGAttribute({\n          \"stroke\": \"url(\\\"\" + $utils.getBaseURI() + stroke.id + \"\\\")\"\n        });\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"strokeOpacity\", {\n    /**\r\n     * @return Opacity (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeOpacity\");\n    },\n\n    /**\r\n     * Stroke (outline) opacity.\r\n     *\r\n     * The values may range from 0 (fully transparent) to 1 (fully opaque).\r\n     *\r\n     * @param value  Opacity (0-1)\r\n     */\n    set: function (value) {\n      value = $math.toNumberRange(value, 0, 1);\n\n      if (this.setPropertyValue(\"strokeOpacity\", value)) {\n        this.setSVGAttribute({\n          \"stroke-opacity\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"nonScalingStroke\", {\n    /**\r\n     * @return Do not scale stroke (outline)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nonScalingStroke\");\n    },\n\n    /**\r\n     * Controls if the element's stroke (outline) should remain keep constant\r\n     * thicnkess and do not scale when the whole element is resized.\r\n     *\r\n     * @param value  Do not scale stroke (outline)\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"nonScalingStroke\", value)) {\n        this.strokeWidth = this.strokeWidth;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"nonScaling\", {\n    /**\r\n     * @return Is element scaleable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nonScaling\");\n    },\n\n    /**\r\n     * Controls if element should keep constant size and not scale even if there is\r\n     * space available, or it does not fit.\r\n     *\r\n     * @param value  Is element scaleable?\r\n     */\n    set: function (value) {\n      // @todo Description (review)\n      value = $type.toBoolean(value);\n      this.setPropertyValue(\"nonScaling\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeWidth\", {\n    /**\r\n     * @return Thickness (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeWidth\");\n    },\n\n    /**\r\n     * Stroke (outline) thickness in pixels.\r\n     *\r\n     * @param value  Thickness (px)\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n      this.setPropertyValue(\"strokeWidth\", value, true);\n\n      if (this.nonScalingStroke) {\n        if (!$type.isNumber(value)) {\n          value = 1;\n        }\n\n        value = value / this.globalScale;\n      }\n\n      this.setSVGAttribute({\n        \"stroke-width\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeDasharray\", {\n    /**\r\n     * @return `stroke-dasharray`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeDasharray\");\n    },\n\n    /**\r\n     * A `stroke-dasharray` for the stroke (outline).\r\n     *\r\n     * \"Dasharray\" allows setting rules to make lines dashed, dotted, etc.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`\r\n     * @param value  `stroke-dasharray`\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"strokeDasharray\", value)) {\n        this.setSVGAttribute({\n          \"stroke-dasharray\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeDashoffset\", {\n    /**\r\n     * @return `stroke-dashoffset`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeDashoffset\");\n    },\n\n    /**\r\n     * A `stroke-dashoffset` for the stroke (outline).\r\n     *\r\n     * \"Dashoffset\" allows setting the start position of the dashes if\r\n     * `strokeDasharray` is used.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset} for more info on `stroke-dashoffset`\r\n     * @param value  `stroke-dashoffset`\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n\n      if (this.setPropertyValue(\"strokeDashoffset\", value)) {\n        this.setSVGAttribute({\n          \"stroke-dashoffset\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeLinecap\", {\n    /**\r\n     * @return `stroke-linecap`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeLinecap\");\n    },\n\n    /**\r\n     * A `stroke-linecap` to indicate how line ends are drawn.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linecap`\r\n     * @param value  `stroke-linecap`\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"strokeLinecap\", value)) {\n        this.setSVGAttribute({\n          \"stroke-linecap\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeLinejoin\", {\n    /**\r\n     * @return `stroke-linejoin`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeLinejoin\");\n    },\n\n    /**\r\n     * A `stroke-linejoin` to indicate how line ends are drawn.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linejoin`\r\n     * @param value  `stroke-linejoin`\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"strokeLinejoin\", value)) {\n        this.setSVGAttribute({\n          \"stroke-linejoin\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"shapeRendering\", {\n    /**\r\n     * @return 'shape-rendering' value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"shapeRendering\");\n    },\n\n    /**\r\n     * An SVG-specific `shape-rendering` value.\r\n     *\r\n     * `shape-rendering` controls how vector graphics are drawn and rendered.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering} for more information about `shape-rendering`\r\n     * @default \"auto\"\r\n     * @param value  'shape-rendering' value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"shapeRendering\", value)) {\n        this.setSVGAttribute({\n          \"shape-rendering\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPerfect\", {\n    /**\r\n     * @return Use pixel perfect?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pixelPerfect\");\n    },\n\n    /**\r\n     * Controls if SVG vectors should be drawn with \"pixel\" precision, producing\r\n     * perfectly crisp lines on retina displays.\r\n     *\r\n     * Setting this to `true` might improve visual quality, but may have a\r\n     * negative effect on performance.\r\n     *\r\n     * Different elements use different default setting for `pixelPerfect`.\r\n     *\r\n     * We recommend leaving this at their default settings, unless there's a\r\n     * specific need.\r\n     *\r\n     * @param value  Use pixel perfect?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (value) {\n        this._positionPrecision = options.pixelPerfectPrecision;\n      } else {\n        this._positionPrecision = 3;\n      }\n\n      this.setPropertyValue(\"pixelPerfect\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"rtl\", {\n    /**\r\n     * @return RTL?\r\n     */\n    get: function () {\n      if ($type.hasValue(this._rtl)) {\n        return this._rtl;\n      } else if (this._topParent) {\n        return this._topParent.rtl;\n      } //this.rtl = false;\n\n\n      return false;\n    },\n\n    /**\r\n     * An RTL (right-to-left) setting.\r\n     *\r\n     * RTL may affect alignment, text, and other visual properties.\r\n     *\r\n     * If you set this on a top-level chart object, it will be used for all\r\n     * child elements, e.g. labels, unless they have their own `rtl` setting\r\n     * set directly on them.\r\n     *\r\n     * @param value  `true` for to use RTL\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.isBaseSprite) {\n        this.topParent.rtl = value;\n      }\n\n      this._rtl = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * VISIBILITY AND ORDER PROPERTIES AND RELATED STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Reveals hidden element.\r\n   *\r\n   * Has no effect if element is already visible.\r\n   *\r\n   * If `duration` is not specified, it will use default.\r\n   *\r\n   * @param duration  Fade in duration (ms)\r\n   * @return Animation object if such object was created\r\n   */\n\n  Sprite.prototype.show = function (duration) {\n    return this.showReal(duration);\n  };\n  /**\r\n   * Performs actual operations to reveal this element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param duration Fade in duration (ms)\r\n   * @return Fade in duration (ms)\r\n   */\n\n\n  Sprite.prototype.showReal = function (duration) {\n    var _this = this;\n\n    if (this.preventShow) {\n      return;\n    }\n\n    var transition;\n    var properties = this.defaultState.properties;\n\n    if (!this.disabled && (this.isHidden || !this.visible || this.isHiding || properties.opacity != null && this.opacity < properties.opacity && !this.isShowing) && !this.isDisposed()) {\n      // helps to avoid flicker, as show might change opacity or visibility but item might be at invalid state/position\n      if (this.invalid) {\n        this.validate();\n      }\n\n      if (this.positionInvalid) {\n        this.validatePosition();\n      }\n\n      if (!$type.isNumber(duration)) {\n        duration = this.defaultState.transitionDuration;\n      }\n\n      if (this._hideAnimation) {\n        this._hideAnimation.kill();\n\n        this._hideAnimation = undefined;\n      } // Cancel hide handler just in case it was there\n\n\n      if (this._showHideDisposer) {\n        this.removeDispose(this._showHideDisposer);\n      }\n\n      this._isHidden = false;\n      this.isHiding = false;\n      this.isShowing = true; // Apply current state\n\n      transition = this.applyCurrentState(duration);\n\n      if (transition && !transition.isFinished()) {\n        this._showHideDisposer = transition.events.on(\"animationended\", function () {\n          _this.isShowing = false;\n        });\n\n        this._disposers.push(this._showHideDisposer);\n      } else {\n        this.isShowing = false;\n      } // Make it visible\n\n\n      var visible = this.defaultState.properties.visible;\n\n      if (!$type.hasValue(visible)) {\n        visible = true;\n      }\n\n      this.visible = visible; // Unhide from screen readers\n\n      this.readerHidden = false; // Dispatch \"show\" event\n\n      this.dispatchImmediately(\"shown\");\n    }\n\n    return transition;\n  };\n  /**\r\n   * Initiates hiding of Sprite.\r\n   * When called it will fade out the the Sprite to transparency, then make it\r\n   * invisible.\r\n   * @param duration Duration in millisecons\r\n   */\n\n  /**\r\n   * Hides the element, by applying `hidden` state.\r\n   *\r\n   * Has no effect if element is already hidden.\r\n   *\r\n   * If `duration` is not specified, it will use default.\r\n   *\r\n   * While element is fading out, its `isHiding` property will resolve to\r\n   * `true`.\r\n   *\r\n   * When element is hidden, its `visible` property will resolve to `false`.\r\n   *\r\n   * @param duration  Fade out duration (ms)\r\n   * @return hide Animation object if such object was created\r\n   */\n\n\n  Sprite.prototype.hide = function (duration) {\n    return this.hideReal(duration);\n  };\n  /**\r\n   * Hides actual SVG elements and handles hiding animations.\r\n   *\r\n   * @param duration  Fade out duration (ms)\r\n   * @return Fade out duration (ms)\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.hideReal = function (duration) {\n    var _this = this;\n\n    var transition;\n\n    if (!this.isHiding && this.visible && !this.isDisposed()) {\n      // added to solve 51375\n      if (this.tooltip && this.tooltip.currentSprite == this) {\n        this.hideTooltip(0);\n      }\n\n      if (this._hideAnimation) {\n        this._hideAnimation.kill();\n\n        this._hideAnimation = undefined;\n      }\n\n      this.isShowing = false; // Cancel hide handler just in case it was there\n\n      if (this._showHideDisposer) {\n        this.removeDispose(this._showHideDisposer);\n      } // Get state\n\n\n      var hiddenState_1 = this.hiddenState; // Transition to \"hidden\" state, provided Sprite has one set\n\n      if (hiddenState_1) {\n        // Yes, we have a \"hidden\" state\n        // `setState` will return an `Animation` object which we can set\n        // events on\n        transition = this.setState(hiddenState_1, duration, undefined);\n\n        if (transition && !transition.isFinished()) {\n          this._hideAnimation = transition;\n          this._showHideDisposer = transition.events.on(\"animationended\", function () {\n            _this.isHiding = false;\n            _this._isHidden = true;\n\n            if (hiddenState_1.properties.visible == false) {\n              _this.visible = false;\n            }\n          }, this);\n\n          this._disposers.push(this._showHideDisposer); // Thrown everything into `_disposers` just in case Sprite gets\n          // destroyed in the meantime\n\n\n          this._disposers.push(transition);\n        } else {\n          this.isHiding = false;\n          this._isHidden = true;\n        }\n      } else {\n        // No hidden state, let's just set `visible` and call it a day\n        this.visible = false;\n        this.isHiding = false;\n        this._isHidden = true;\n      } // Hide from screen readers\n\n\n      this.readerHidden = true; // Dispach \"hidden\" event\n\n      this.dispatchImmediately(\"hidden\");\n      this.invalidate(); // hide it at once to avoid flickers // validate() causes SO\n    }\n\n    if (!$type.isNumber(duration)) {\n      duration = this.hiddenState.transitionDuration;\n    }\n\n    return transition;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"visible\", {\n    /**\r\n     * @return Visible?\r\n     */\n    get: function () {\n      return this.getVisibility();\n    },\n\n    /**\r\n     * Indicates if element is current visible (`true`) or hidden (`false`).\r\n     *\r\n     * @param value Visible?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      this.setVisibility(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns visibility value\r\n   * @ignore\r\n   */\n\n  Sprite.prototype.getVisibility = function () {\n    var value = this.getPropertyValue(\"visible\");\n\n    if (!$type.hasValue(value)) {\n      value = true;\n    }\n\n    return value;\n  };\n  /**\r\n   * Sets `visibility` property:\r\n   *\r\n   * * `true` - visible\r\n   * * `false` - hidden\r\n   *\r\n   * @param value  true - visible, false - hidden\r\n   * @return Current visibility\r\n   */\n\n\n  Sprite.prototype.setVisibility = function (value) {\n    if (this.setPropertyValue(\"visible\", value)) {\n      if (value) {\n        this.group.removeAttr(\"visibility\");\n      } else {\n        this.group.attr({\n          \"visibility\": \"hidden\"\n        });\n      } //this.invalidatePosition();\n\n\n      if (this.events.isEnabled(\"visibilitychanged\")) {\n        var event_4 = {\n          type: \"visibilitychanged\",\n          target: this,\n          visible: value\n        };\n        this.events.dispatchImmediately(\"visibilitychanged\", event_4);\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"zIndex\", {\n    /**\r\n     * @return zIndex\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"zIndex\");\n    },\n\n    /**\r\n     * A \"zIndex\" of the element.\r\n     *\r\n     * \"zIndex\" determines the order of how elements are placed over each other.\r\n     *\r\n     * Higher \"zIndex\" will mean the element will be draw on top of elements\r\n     * with lower \"zIndexes\".\r\n     *\r\n     * @param value  zIndex\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n\n      if (this.setPropertyValue(\"zIndex\", value)) {\n        this.dispatch(\"zIndexChanged\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves the element to the very top in element order, so that it appears\r\n   * in front of other elements.\r\n   */\n\n  Sprite.prototype.toFront = function () {\n    var parent = this._parent;\n\n    if (parent && parent.children.indexOf(this) != parent.children.length - 1) {\n      parent.children.moveValue(this, parent.children.length - 1);\n      this.dispatch(\"zIndexChanged\");\n    }\n  };\n  /**\r\n   * Moves the element to the very bottom in the element order, so that it\r\n   * appears behind other elements.\r\n   */\n\n\n  Sprite.prototype.toBack = function () {\n    var parent = this._parent;\n\n    if (parent && parent.children.indexOf(this) != 0) {\n      parent.children.moveValue(this, 0);\n      this.dispatch(\"zIndexChanged\");\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"userClassName\", {\n    /**\r\n     * @return Class name\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"userClassName\");\n    },\n\n    /**\r\n     * A custom class name to set on the element.\r\n     *\r\n     * If set, the value will be added to element's `class` attribute.\r\n     *\r\n     * @since 4.9.11\r\n     * @param  value  Class name\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"userClassName\", value)) {\n        if (!value && this.userClassName) {\n          this.group.removeClass(this.userClassName);\n        }\n\n        this.setClassName();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltip\", {\n    /**\r\n     * @return Tooltip\r\n     */\n    get: function () {\n      if (this._tooltip) {\n        return this._tooltip;\n      } else if (this.virtualParent) {\n        return this.virtualParent.tooltip;\n      } else if (this._parent) {\n        return this._parent.tooltip;\n      }\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * TOOLTIP-RELATED PROPERTIES STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * A [[Tooltip]] object to be used when displayed rollover information for\r\n     * the element.\r\n     *\r\n     * @param tooltip  Tooltip\r\n     */\n    set: function (tooltip) {\n      if (this._tooltip) {\n        //this._tooltip.dispose();\n        this.removeDispose(this._tooltip);\n      }\n\n      this._tooltip = tooltip;\n\n      if (tooltip) {\n        tooltip.parent = this.tooltipContainer;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipDataItem\", {\n    /**\r\n     * @return Tooltip data item\r\n     */\n    get: function () {\n      var tooltipDataItem = this._tooltipDataItem;\n\n      if (tooltipDataItem) {\n        return tooltipDataItem;\n      } else {\n        return this.dataItem;\n      }\n    },\n\n    /**\r\n     * A [[DataItem]] to use when populating content for the element's\r\n     * [[Tooltip]].\r\n     *\r\n     * @see {@link Tooltip}\r\n     * @see {@link DataItem}\r\n     * @param value  Tooltip data item\r\n     */\n    set: function (value) {\n      // important: do not dispose tooltip dataItem, as it is some actual data item from data!\n      this._tooltipDataItem = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipColorSource\", {\n    /**\r\n     * @return Tooltip color source\r\n     */\n    get: function () {\n      return this._tooltipColorSource;\n    },\n\n    /**\r\n     * A [[Sprite]] or sprite template to use when getting colors for tooltip. If a template is set,\r\n     * tooltip will look for a clone in tooltipDataItem.sprites. If no clone is found, then template colors will be used.\r\n     *\r\n     * @see {@link Tooltip}\r\n     * @see {@link Sprite}\r\n     * @param sprite Sprite\r\n     */\n    set: function (sprite) {\n      this._tooltipColorSource = sprite;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Shows the element's [[Tooltip]].\r\n   *\r\n   * A tooltip will be populated using text templates in either `tooltipHTML` or\r\n   * `tooltipText` as well as data in `tooltipDataItem`.\r\n   *\r\n   * @see {@link Tooltip}\r\n   * @param optional point (sprite-related) to which tooltip must point.\r\n   * @return returns true if the tooltip was shown and false if it wasn't (no text was found)\r\n   */\n\n  Sprite.prototype.showTooltip = function (point) {\n    if (this.showTooltipOn == \"always\" && !this._tooltip && this.tooltip) {\n      this._tooltip = this.tooltip.clone();\n    }\n\n    if (!point && this.tooltipPosition == \"pointer\" && this.isHover) {\n      point = $utils.documentPointToSvg(getInteraction().lastPointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\n    } // do not show if hidden\n\n\n    var sprite = this;\n\n    while (sprite != undefined) {\n      if (!sprite.visible || sprite.disabled || sprite.__disabled) {\n        if (this._tooltip && this._tooltip.visible) {\n          this._tooltip.hide(0);\n        }\n\n        return;\n      }\n\n      sprite = sprite.parent;\n    }\n\n    if ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML)) {\n      var tooltip = this.tooltip;\n      var tooltipDataItem = this.tooltipDataItem;\n\n      if (tooltip) {\n        tooltip.targetSprite = this;\n        var colorSource_1 = this;\n        var tooltipColorSource_1 = this.tooltipColorSource;\n\n        if ((tooltip.getStrokeFromObject || tooltip.getFillFromObject) && tooltipColorSource_1) {\n          if (tooltipColorSource_1.isTemplate) {\n            if (tooltipDataItem) {\n              $array.eachContinue(tooltipDataItem.sprites, function (sprite) {\n                if (sprite.clonedFrom == tooltipColorSource_1) {\n                  colorSource_1 = sprite;\n                  return false;\n                }\n\n                return true;\n              });\n            }\n          } else {\n            colorSource_1 = tooltipColorSource_1;\n          }\n        }\n\n        if (tooltip.getStrokeFromObject) {\n          var stroke = this.stroke;\n          var source = colorSource_1;\n\n          while (source.parent != undefined) {\n            stroke = source.stroke;\n\n            if (stroke == undefined) {\n              source = source.parent;\n            }\n\n            if (stroke != undefined) {\n              break;\n            }\n          }\n\n          if (stroke instanceof Color) {\n            tooltip.background.animate({\n              property: \"stroke\",\n              to: stroke\n            }, tooltip.animationDuration);\n          } else {\n            tooltip.background.stroke = stroke;\n          }\n        } // Set data item\n\n\n        tooltip.dataItem = tooltipDataItem;\n        tooltip.label.populateStringFrom = this;\n\n        if (tooltip.getFillFromObject) {\n          var fill = this.fill;\n          var source = colorSource_1;\n\n          while (source.parent != undefined) {\n            fill = source.fill;\n\n            if (fill == undefined || fill instanceof Color && fill.rgb == undefined) {\n              source = source.parent;\n            } else if (fill != undefined) {\n              break;\n            }\n          }\n\n          if (fill == undefined) {\n            fill = color(\"#000000\");\n          }\n\n          if (fill instanceof Color) {\n            if (!tooltip.visible) {\n              tooltip.background.fill = fill;\n            } else {\n              tooltip.background.animate({\n                property: \"fill\",\n                to: fill\n              }, tooltip.animationDuration);\n            }\n          } else {\n            tooltip.background.fill = fill;\n          }\n\n          if (tooltip.autoTextColor && fill instanceof Color) {\n            tooltip.label.fill = fill.alternative;\n          }\n        } // Apply tooltip text\n\n\n        var text = \"\";\n\n        if (this.tooltipHTML) {\n          tooltip.html = this.tooltipHTML;\n          text = this.tooltipHTML;\n        }\n\n        if (this.tooltipText) {\n          tooltip.text = this.tooltipText;\n          text = this.tooltipText;\n        }\n\n        if (this.updateTooltipPosition(point)) {\n          // Set accessibility option\n          tooltip.readerDescribedBy = this.uidAttr(); // make label to render to be able to check currentText\n\n          if (tooltip.label.invalid) {\n            tooltip.label.validate();\n          }\n\n          if (text != undefined && text != \"\" && tooltip.label.currentText != \"\") {\n            //@todo: think of how to solve this better\n            if (tooltip && !tooltip.parent) {\n              tooltip.parent = this.tooltipContainer;\n            } // Reveal tooltip\n            // showing it in 1 ms helps to avoid strange flickering in IE\n\n\n            var duration = tooltip.defaultState.transitionDuration;\n\n            if (duration <= 0) {\n              duration = 1;\n            }\n\n            tooltip.show(duration);\n            tooltip.currentSprite = this;\n            return true;\n          } else {\n            this.hideTooltip(0);\n          }\n        } else {\n          this.hideTooltip(0);\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.updateTooltipPosition = function (point) {\n    var _this = this;\n\n    if (this.tooltipPosition == \"pointer\") {\n      if (this._interactionDisposer) {\n        this._interactionDisposer.dispose();\n      }\n\n      this._interactionDisposer = getInteraction().body.events.on(\"track\", function (ev) {\n        return _this.pointTooltipTo($utils.documentPointToSvg(ev.point, _this.svgContainer.SVGContainer, _this.svgContainer.cssScale), true);\n      });\n\n      if (point) {\n        return this.pointTooltipTo(point, true);\n      }\n    } else {\n      // Point to the X/Y of this Sprite\n      var globalPoint = $utils.spritePointToSvg({\n        \"x\": this.getTooltipX(),\n        \"y\": this.getTooltipY()\n      }, this);\n      return this.pointTooltipTo(globalPoint);\n    }\n  };\n  /**\r\n   * Sets the point the [[Tooltip]] should point to.\r\n   *\r\n   * @param point      Coordinates to point to\r\n   * @param instantly  Move instantly without animation\r\n   */\n\n\n  Sprite.prototype.pointTooltipTo = function (point, instantly) {\n    var tooltip = this.tooltip;\n\n    if (tooltip && this.topParent) {\n      if (tooltip.showInViewport) {\n        tooltip.pointTo(point, instantly);\n        return true;\n      }\n\n      if ($math.isInRectangle(point, {\n        x: 0,\n        y: 0,\n        width: this.topParent.maxWidth,\n        height: this.topParent.maxHeight\n      })) {\n        tooltip.pointTo(point, instantly);\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Hides element's [[Tooltip]].\r\n   *\r\n   * @see {@link Tooltip}\r\n   */\n\n\n  Sprite.prototype.hideTooltip = function (duration) {\n    if (this.showTooltipOn == \"always\") {\n      return;\n    }\n\n    var tooltip = this.tooltip;\n\n    if (tooltip) {\n      if (tooltip.targetSprite == this) {\n        tooltip.targetSprite = undefined;\n      }\n\n      tooltip.hide(duration);\n\n      if (this._interactionDisposer) {\n        this._interactionDisposer.dispose();\n\n        this._interactionDisposer = undefined;\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"tooltipHTML\", {\n    /**\r\n     * @return Tooltip HTML content template\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipHTML\");\n    },\n\n    /**\r\n     * An HTML template to be used to populate [[Tooltip]] contents.\r\n     *\r\n     * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n     * for any data values to be replaced with the values from respective data\r\n     * items.\r\n     *\r\n     * @param value Tooltip HTML content template\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      this.hoverable = true;\n\n      if (this.setPropertyValue(\"tooltipHTML\", value)) {\n        if (this.tooltip) {\n          if (this.tooltip.visible) {\n            this.showTooltip();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipText\", {\n    /**\r\n     * @return Tooltip content template\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipText\");\n    },\n\n    /**\r\n     * A text template to be used to populate Tooltip's contents.\r\n     *\r\n     * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n     * for any data values to be replaced with the values from respective data\r\n     * items.\r\n     *\r\n     * This template will also be parsed for any special formatting tags.\r\n     *\r\n     * @param value Tooltip content template\r\n     * @see {@link TextFormatter}\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (value) {\n        this.hoverable = true;\n      }\n\n      if (this.setPropertyValue(\"tooltipText\", value)) {\n        if (this.tooltip) {\n          if (this.tooltip.visible) {\n            this.showTooltip();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipContainer\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Container\r\n     */\n    get: function () {\n      if (this._tooltipContainer) {\n        return this._tooltipContainer;\n      } else if (this._parent) {\n        return this._parent.tooltipContainer;\n      }\n    },\n\n    /**\r\n     * A container reference that should be used to place element's\r\n     * [[Tooltip]] in.\r\n     *\r\n     * Will use parent's container if does not have one set.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Container\r\n     * @todo Dispose of the old _tooltipContainer ?\r\n     */\n    set: function (value) {\n      this._tooltipContainer = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipX\", {\n    /**\r\n     * @return Tooltip X (px)\r\n     */\n    get: function () {\n      return this.getTooltipX();\n    },\n\n    /**\r\n     * X coordinate the [[Tooltip]] should be shown at.\r\n     *\r\n     * @param value  Tooltip X (px)\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"tooltipX\", value) && this.tooltip) {\n        this.tooltip.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"alwaysShowTooltip\", {\n    /**\r\n     * @return Always show tooltip?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"showTooltipOn\") == \"always\";\n    },\n\n    /**\r\n     * DEPRECATION NOTICE: This setting is deprecated in favor of a more flexible\r\n     * setting: `showTooltipOn`. Please use `showTooltipOn = \"always\"` instead.\r\n     *\r\n     * Indicates if this element should display a tooltip permanently.\r\n     *\r\n     * Useful, if you want to show permanent tooltips on some items.\r\n     *\r\n     * @default false\r\n     * @since 4.5.4\r\n     * @deprecated Use `showTooltipOn = \"always\"` instead\r\n     * @param  value  Always show tooltip?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (value) {\n        this.showTooltipOn = \"always\";\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"showTooltipOn\", {\n    /**\r\n     * @return When to show tooltip\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"showTooltipOn\");\n    },\n\n    /**\r\n     * Indicates when tooltip needs to be shown on this element:\r\n     *\r\n     * * `\"hover\"` (default) - Tooltip will be shown when element is hovered on.\r\n     * * `\"hit\"` - Tooltip will be shown when element is clicked/tapped. Tooltip will be hidden when clicked/tapped anywhere else.\r\n     * * `\"always\"` - Tooltip will be shown on the element permanently.\r\n     *\r\n     * For example, if you would like to show tooltips on all of the columns of\r\n     * a [[ColumnSeries]]:\r\n     *\r\n     * ```TypeScript\r\n     * series.columns.template.showTooltipOn = \"always\";\r\n     * ```\r\n     * ```JavaScript\r\n     * series.columns.template.showTooltipOn = \"always\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"columns\": {\r\n     *       \"showTooltipOn\": \"always\"\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * It can even be set to display on a selected columns via `propertyFields`:\r\n     *\r\n     * ```TypeScript\r\n     * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n     * ```\r\n     * ```JavaScript\r\n     * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"columns\": {\r\n     *       \"propertyFields\": {\r\n     *         \"showTooltipOn\": \"tooltip\"\r\n     *       }\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @default \"hover\"\r\n     * @since 4.7.9\r\n     * @param  value  When to show tooltip\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"showTooltipOn\", value)) {\n        if (value == \"hit\") {\n          this.clickable = true;\n        }\n\n        if (this.tooltip) {\n          if (value == \"always\") {\n            this.showTooltip();\n          } else {\n            this.handleAlwaysShowTooltip();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipPosition\", {\n    /**\r\n     * Position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipPosition\");\n    },\n\n    /**\r\n     * Specifies if [[Tooltip]] should follow the mouse or touch pointer or stay\r\n     * at the fixed position.\r\n     *\r\n     * @param value  Position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tooltipPosition\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipY\", {\n    /**\r\n     * @return Tooltip Y (px)\r\n     */\n    get: function () {\n      return this.getTooltipY();\n    },\n\n    /**\r\n     * Y coordinate the [[Tooltip]] should be shown at.\r\n     *\r\n     * @param value  Tooltip Y (px)\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"tooltipY\", value) && this.tooltip) {\n        this.tooltip.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns Tooltip X coordinate if it's set, or middle of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return X (px)\r\n   */\n\n  Sprite.prototype.getTooltipX = function () {\n    var x = this.getPropertyValue(\"tooltipX\");\n\n    if (!$type.hasValue(x)) {\n      x = percent(50);\n    }\n\n    var value;\n\n    if ($type.isNumber(x)) {\n      value = x;\n    }\n\n    if (x instanceof Percent) {\n      value = this.maxLeftSelf + this._measuredWidthSelf * x.value - this.pixelPaddingLeft - this.ex; // overflow is know only for measured items, so this is not always good\n    }\n\n    if (!$type.isNumber(value)) {\n      value = 0;\n    }\n\n    return value;\n  };\n  /**\r\n   * Returns Tooltip Y coordinate if it's set, or middle of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Y (px)\r\n   */\n\n\n  Sprite.prototype.getTooltipY = function () {\n    var y = this.getPropertyValue(\"tooltipY\");\n\n    if (!$type.hasValue(y)) {\n      y = percent(50);\n    }\n\n    var value;\n\n    if ($type.isNumber(y)) {\n      value = y;\n    }\n\n    if (y instanceof Percent) {\n      value = this.maxTopSelf + this._measuredHeightSelf * y.value - this.pixelPaddingTop - this.ey; // overflow is know only for measured items, so this is not always good\n    }\n\n    if (!$type.isNumber(value)) {\n      value = 0;\n    }\n\n    return value;\n  };\n  /**\r\n   * Displays a modal or console message with error, and halts any further\r\n   * processing of this item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param e Error\r\n   * @todo Implement from applying further actions to this item\r\n   */\n\n\n  Sprite.prototype.raiseCriticalError = function (e, closable) {\n    if (this.svgContainer) {\n      if (!this._adapterO) {\n        this.modal.content = e.message;\n      } else {\n        this.modal.content = this._adapterO.apply(\"criticalError\", e).message;\n      }\n\n      if (!closable) {\n        this.disabled = true;\n      } else {\n        this.modal.closable = true;\n      }\n\n      if (!options.suppressErrors) {\n        this.modal.open();\n      }\n    }\n\n    if (options.verbose) {\n      console.log(e);\n    }\n  };\n  /**\r\n  * Processes JSON-based config before it is applied to the object.\r\n  *\r\n  * @ignore Exclude from docs\r\n  * @param config  Config\r\n  */\n\n\n  Sprite.prototype.processConfig = function (config) {\n    if (config) {\n      // Tooltip color source\n      if ($type.hasValue(config.tooltipColorSource) && $type.isString(config.tooltipColorSource) && this.map.hasKey(config.tooltipColorSource)) {\n        config.tooltipColorSource = this.map.getKey(config.tooltipColorSource);\n      } // Cursor styles\n\n\n      if ($type.hasValue(config.cursorOverStyle) && $type.isString(config.cursorOverStyle)) {\n        config.cursorOverStyle = this.getCursorStyle(config.cursorOverStyle);\n      }\n\n      if ($type.hasValue(config.cursorDowntyle) && $type.isString(config.cursorDowntyle)) {\n        config.cursorDowntyle = this.getCursorStyle(config.cursorDowntyle);\n      }\n\n      if ($type.hasValue(config.cursorOptions)) {\n        if ($type.hasValue(config.cursorOptions.overStyle) && $type.isString(config.cursorOptions.overStyle)) {\n          config.cursorOptions.overStyle = this.getCursorStyle(config.cursorOptions.overStyle);\n        }\n\n        if ($type.hasValue(config.cursorOptions.downStyle) && $type.isString(config.cursorOptions.downStyle)) {\n          config.cursorOptions.downStyle = this.getCursorStyle(config.cursorOptions.downStyle);\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n\n    this.processDelayedMap();\n  };\n  /**\r\n   * Converts string name of the cursor into actual [[MouseCursorStyle]].\r\n   *\r\n   * @param style  Cursor type\r\n   * @return Cursor definition\r\n   */\n\n\n  Sprite.prototype.getCursorStyle = function (style) {\n    switch (style) {\n      case \"grab\":\n        return MouseCursorStyle.grab;\n\n      case \"grabbing\":\n        return MouseCursorStyle.grabbing;\n\n      case \"pointer\":\n        return MouseCursorStyle.pointer;\n\n      case \"horizontalResize\":\n        return MouseCursorStyle.horizontalResize;\n\n      case \"verticalResize\":\n        return MouseCursorStyle.verticalResize;\n\n      default:\n        return MouseCursorStyle.default;\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n\n\n  Sprite.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } // Must come last\n    else if (a == \"tooltipColorSource\") {\n      return 1;\n    } else if (b == \"tooltipColorSource\") {\n      return -1;\n    } else {\n      return _super.prototype.configOrder.call(this, a, b);\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"isHidden\", {\n    /**\r\n     * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n     * This was added becaus hidden state might have visibility set to true and so\r\n     * there would not be possible to find out if a sprite is technically hidden or not.\r\n     */\n    get: function () {\n      if (this._isHidden) {\n        return this._isHidden;\n      } else if (this._parent) {\n        return this._parent.isHidden;\n      }\n\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"showOnInit\", {\n    /**\r\n     * @return Show on init?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"showOnInit\");\n    },\n\n    /**\r\n     * If this is set to `true`, Sprite, when inited will be instantly hidden\r\n     * (\"hidden\" state applied) and then shown (\"default\" state applied).\r\n     *\r\n     * If your \"default\" state's `transitionDuration > 0` this will result in\r\n     * initial animation from \"hidden\" state to \"default\" state.\r\n     *\r\n     * If you need a Sprite which has `showOnInit = true` not to be shown\r\n     * initially, set `sprite.hidden = true`. Setting `sprite.visible = false`\r\n     * will not prevent the animation and the sprite will be shown.\r\n     *\r\n     * @param value show on init?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      this.setShowOnInit(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Sprite.prototype.setShowOnInit = function (value) {\n    if (this.setPropertyValue(\"showOnInit\", value)) {\n      if (!this.isTemplate) {\n        if (value && !this.inited && !this.hidden) {\n          this._showOnInitDisposer = new MultiDisposer([registry.events.once(\"enterframe\", this.hideInitially, this), this.events.once(\"beforevalidated\", this.hideInitially, this, false), this.events.on(\"inited\", this.appear, this, false)]);\n\n          this._disposers.push(this._showOnInitDisposer);\n        } else {\n          if (this._showOnInitDisposer) {\n            this._showOnInitDisposer.dispose();\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.hideInitially = function () {\n    if (!this.isDisposed()) {\n      this.appeared = false; //if (!this.hidden && !this._isHidden) { // not good for series, as on enterframe it doesn't have data items yet.\n\n      if (!this.inited) {\n        this.hide(0);\n      }\n    }\n  };\n  /**\r\n   * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n   */\n\n\n  Sprite.prototype.appear = function () {\n    var _this = this;\n\n    this.appeared = false;\n\n    if (!this.hidden && !this.isHidden) {\n      this.hide(0);\n    }\n\n    if (!this.hidden) {\n      var animation = this.show();\n\n      if (animation && !animation.isFinished()) {\n        this.addDisposer(animation.events.on(\"animationended\", function () {\n          _this.appeared = true;\n\n          _this.dispatch(\"appeared\");\n        }));\n      } else {\n        this.appeared = true;\n        this.dispatch(\"appeared\");\n      }\n    } else {\n      this.appeared = true;\n      this.dispatch(\"appeared\");\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"hidden\", {\n    /**\r\n     * @return Is initially hidden?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hidden\");\n    },\n\n    /**\r\n     * If a sprite has `showOnInit = true`, it will animate from \"hidden\" to\r\n     * \"default\" state when initialized. To prevent this but keep\r\n     * `showOnInit = true`, you can set `sprite.hidden = true`.\r\n     *\r\n     * @param value initially hidden?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      this.setPropertyValue(\"hidden\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n\n      return this._bbox;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"plugins\", {\n    /**\r\n     * A list of plugins (objects that implement [[IPlugin]] interface) attached\r\n     * to this object.\r\n     *\r\n     * @since 4.2.2\r\n     * @return List of plugins\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._plugins) {\n        this._plugins = new List();\n\n        this._disposers.push(this._plugins.events.on(\"inserted\", function (ev) {\n          ev.newValue.target = _this;\n          ev.newValue.init();\n        }));\n\n        this._disposers.push(new ListDisposer(this._plugins));\n      }\n\n      return this._plugins;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Called during the System.update method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype._systemUpdate = function (skippedSprites) {\n    this.validate();\n  };\n  /**\r\n   * Called during the System.update method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype._systemCheckIfValidate = function () {\n    return true;\n  };\n  /**\r\n   * Called during the System.validatePositions method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype._systemValidatePositions = function () {\n    this.validatePosition();\n  };\n  /**\r\n   * Called during the System.validateLayouts method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype._systemValidateLayouts = function () {};\n\n  return Sprite;\n}(BaseObjectEvents);\n\nexport { Sprite };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Sprite\"] = Sprite;","map":{"version":3,"names":["__extends","__values","SpriteState","SpriteEventDispatcher","BaseObjectEvents","Adapter","globalAdapter","Dictionary","DictionaryTemplate","DictionaryDisposer","ListDisposer","List","MultiDisposer","Disposer","MutableValueDisposer","Animation","AnimationDisposer","getGhostPaper","Container","Pattern","LinearGradient","RadialGradient","Color","color","toColor","getInteraction","MouseCursorStyle","options","registry","NumberFormatter","DateFormatter","DurationFormatter","getTextFormatter","Language","Export","$utils","$math","$strings","$array","$object","$type","$iter","system","Percent","percent","visualProperties","Sprite","_super","_this","call","properties","_eventDispatcher","_bindings","_isTemplate","_isPath","_inited","_ready","isHiding","_isHidden","isShowing","isStandaloneInstance","_isActive","_mask","_positionPrecision","_language","_exporting","_exportable","_bbox","x","y","width","height","invalid","positionInvalid","propertyFields","applyOnClones","_measuredWidthSelf","_measuredHeightSelf","maxLeft","maxRight","maxTop","maxBottom","maxLeftSelf","maxRightSelf","maxTopSelf","maxBottomSelf","_isDragged","_isResized","_disabled","_internalDisabled","_updateDisabled","_internalDefaultsApplied","rollOutDelay","isBaseSprite","shouldClone","appeared","ex","ey","dragWhileResize","measureFailed","preventShow","cloneTooltip","className","_disposers","push","used","uid","group","paper","addGroup","setPropertyValue","_prevMeasuredWidth","_prevMeasuredHeight","_measuredWidth","_measuredHeight","_isMeasured","invalidate","applyTheme","events","each","key","value","dispose","Object","defineProperty","prototype","get","enumerable","configurable","_adapterO","autoSetClassName","setClassName","getCurrentThemes","themes","_themes","parent_1","_parent","applyInternalDefaults","disabled","__disabled","addToInvalidSprites","requestFrame","validate","dispatchImmediately","beforeDraw","draw","removeFromInvalidSprites","afterDraw","invalidatePosition","addToInvalidPositions","validatePosition","pixelX","pixelY","dx","dy","attr","removeSVGAttribute","sizeChanged","measure","prevGroupTransform","transformString","moveTo","rotation","nonScaling","scale","globalScale","dispatch","showTooltipOn","updateTooltipPosition","removeFromInvalidPositions","maskRectangle","_maskRectangle","_clipElement","e_1","_a","isMeasured","horizontalCenter","verticalCenter","measureElement","_b","keys","_c","next","done","e_1_1","error","return","applyFilters","visible","interactionsEnabled","getPropertyValue","showOnInit","hidden","hide","applyMask","dispatchReady","showTooltip","hideTooltip","isReady","reinit","setState","defaultState","handleGlobalScale","nonScalingStroke","strokeWidth","updateFilterScale","filters","iterator","filter","removeFromInvalids","copyFrom","source","states","length","clone","adapter","interactions","plugins","configField","virtualParent","exportable","_tooltip","tooltip","_showSystemTooltip","showSystemTooltip","copyProperties","fillModifier","strokeModifier","focusFilter","isDisposed","htmlContainer","childNodes","removeChild","firstChild","clear","_clones","i","getIndex","_svgContainer","_interactionDisposer","undefined","_urlDisposer","element","_numberFormatter","_focusFilter","stroke","clonedFrom","fill","hasValue","id","map","removeKey","parent","_filters","removeValue","_alwaysShowDisposers","set","toBoolean","children","child","isTemplate","applyAccessibility","_topParent","topParent","oldParent","baseId","_tooltipContainer","tooltipContainer","_dataItem","dataItem","handleAlwaysShowTooltip","handleAlwaysShow","sprite","oldDisposers","oldDisposer","disposer","on","addDisposer","_virtualParent","appendDefs","filterElement","appendDef","fill_1","modify","stroke_1","_clipPath","top","_map","delayedMap","_delayedMap","_id","hasKey","Error","setKey","node","_paper","parent_2","setPaper","oldPaper","_htmlContainer","parent_3","_titleElement","add","_descriptionElement","onAll","setSVGAttributes","opacity","fillOpacity","strokeOpacity","shapeRendering","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","focusable","tabindex","role","setSVGAttribute","attribute","removeAttr","classNamePrefix","addClass","userClassName","uidAttr","updateClipPath","mask","createClipPath","getUniqueId","getBaseURI","max","pixelWidth","pixelHeight","point","spritePointToSprite","width_1","height_1","removeChildNodes","filterUnits","appendPrimitives","w","h","removeClipPath","removeDispose","setElement","_element","removeElement","SVGPathElement","svgContainer","definedBBox","svgBBox","getBBox","updateCenter","prevElementTransform","bbox","elementX","elementY","elementWidth","elementHeigth","pixelPaddingLeft","pixelPaddingRight","pixelPaddingTop","pixelPaddingBottom","measuredWidth","measuredHeight","left","right","top_1","bottom","round","pixelPerfect","pixelPerfectPrecision","positionPrecision","svg","matrix","createSVGMatrix","a","cos","c","sin","e","b","d","f","p1","createSVGPoint","p2","p3","p4","pt1","matrixTransform","pt2","pt3","pt4","Math","min","isHover","tooltipText","tooltipHTML","insertBefore","index","indexOf","moveValue","sortChildren","insertAfter","getRelativeX","innerWidth","getRelativeY","innerHeight","getPixelX","pixel","isNumber","relative","getPixelY","isDragged","apply","inited","reset","rect","hitTest","ax1","ay1","ax2","ay2","bx1","by1","bx2","by2","_states","state","processState","getKey","hiddenState","create","event","newValue","name","hoverable","clickable","clones","values","length_1","_animations","getSvgPoint","getBoundingClientRect","animate","animationOptions","duration","easing","start","transitionDuration","isHidden","setVisibility","isActive","transitionEasing","transitTo","applyCurrentState","animation","isDown","downPointers","isFocused","propValues","allValues","transition","propertyName","finalValue","currentValue","option","from","to","property","isFinished","newFilters_1","stateFilter","newFilter","currentFilter","contains","pushAll","isInTransition","animations","isInteractive","handleOver","isRealHover","handleOut","handleDown","handleUp","handleFocus","handleBlur","setActive","current","setDisabled","hasChild","deepInvalidate","_background","numberFormatter","language","_dateFormatter","dateFormatter","_durationFormatter","durationFormatter","ev","exporting","populateString","string","castString","escape","tags","match","tag","replace","getTagValue","split","join","unescape","tagName","format","parts","reg","matches","exec","prop","params","trim","reg2","matches2","method","getTagValueFromObject","isObject","dataContext","component","populateStringFrom","object","formatApplied","len","part","numberValue","anyToNumber","dateValue","isString","parse","anyToDate","isDate","isNaN","getTime","durationValue","encodeURIComponent","formatParts","formatterType","getFormat","NUMBER","DATE","DURATION","setDataItem","dataContext_1","config","dataContext_2","dataContext2_1","fieldValue","anyThis","propValue","applyAll","setColorProperty","toString","setPercentProperty","transform","precision","floor","toNumberOrPercent","isEnabled","event_1","type","target","length_2","bind","bindToProperty","modifier","observe","listener","context","toArray","title","readerTitle","description","readerDescription","readerHidden","checked","readerChecked","controls","readerControls","live","readerLive","orientation","readerOrientation","valueNow","readerValueNow","valueText","readerValueText","labelledByIds","describedByIds","labelledBy","readerLabelledBy","describedBy","readerDescribedBy","titleElement","titleId","textContent","descriptionElement","descriptionId","toText","keyboardOptions","mouseOptions","_interaction","interaction","dom","trackable","draggable","swipeable","resizable","wheelable","contextMenuDisabled","inert","_tabindex","setEventDisposer","hasFocused","focusedElement","hoverOnFocus","toNumber","inertiaOptions","applyCursorStyle","handleDragStart","handleDragMove","handleDragStop","isTouchProtected","touch","originalPosition","dragStart","pointer","dragStop","cancelled","cssScale","shift","hoverOptions","_outTimeout","documentPointToSvg","SVGContainer","targetSprite","keepTargetHover","setTimeout","handleOutReal","hitOptions","originalAngle","originalScale","once","body","handleToggle","isNotEmpty","urlHandler","cursorOverStyle","_baseId","setBaseId","baseSprite","url","urlTarget","window","location","href","open","swipeOptions","handleResize","svgPoint1","point1","svgPoint2","point2","svgMidPoint","getMidPoint","parentPoint1","documentPointToSprite","startPoint1","parentPoint2","startPoint2","spritePoint1","spritePoint2","spriteMidPoint","parentPoint","svgPointToSprite","cursorOptions","style","overStyle","defaultStyle","applyCursorOverStyle","downStyle","pointerEvents","getExporting","exp","_export","remove","nonExportableSprites","modalPrefix","modal","has","openModal","text","closeModal","popups","template","openPopup","closeAllPopups","fitToRange","minX","maxX","minY","maxY","invalidateLayout","maxWidth","parentWidth","layout","align","pixelMarginLeft","pixelMarginRight","setMaxWidth","prevWidth","prevHeight","maxHeight","relativeWidth","event_2","previousWidth","previousHeight","parentHeight","valign","pixelMarginTop","pixelMarginBottom","setMaxHeight","relativeHeight","event_3","changed","percentWidth","_pixelWidth","Number","percentHeight","_relativeHeight","_pixelHeight","minWidth","minHeight","_relativeWidth","margin","marginTop","marginRight","marginBottom","marginLeft","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","setPath","setFill","toNumberRange","realFill","setStroke","realStroke","hex","_rtl","rtl","show","showReal","_hideAnimation","kill","_showHideDisposer","hideReal","currentSprite","hiddenState_1","getVisibility","event_4","toFront","toBack","removeClass","tooltipDataItem","_tooltipDataItem","_tooltipColorSource","tooltipPosition","lastPointer","colorSource_1","tooltipColorSource_1","tooltipColorSource","getStrokeFromObject","getFillFromObject","eachContinue","sprites","background","animationDuration","label","rgb","autoTextColor","alternative","html","currentText","pointTooltipTo","globalPoint","spritePointToSvg","getTooltipX","getTooltipY","instantly","showInViewport","pointTo","isInRectangle","raiseCriticalError","closable","content","message","suppressErrors","verbose","console","log","processConfig","getCursorStyle","cursorDowntyle","processDelayedMap","grab","grabbing","horizontalResize","verticalResize","default","configOrder","setShowOnInit","_showOnInitDisposer","hideInitially","appear","_plugins","init","_systemUpdate","skippedSprites","_systemCheckIfValidate","_systemValidatePositions","_systemValidateLayouts","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/Sprite.js"],"sourcesContent":["/**\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n */\r\nimport { __extends, __values } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteState } from \"./SpriteState\";\r\nimport { SpriteEventDispatcher } from \"./SpriteEvents\";\r\nexport { SpriteEventDispatcher };\r\nimport { BaseObjectEvents } from \"./Base\";\r\nimport { Adapter, globalAdapter } from \"./utils/Adapter\";\r\nimport { Dictionary, DictionaryTemplate, DictionaryDisposer } from \"./utils/Dictionary\";\r\nimport { ListDisposer, List } from \"./utils/List\";\r\nimport { MultiDisposer, Disposer, MutableValueDisposer } from \"./utils/Disposer\";\r\nimport { Animation, AnimationDisposer } from \"./utils/Animation\";\r\nimport { getGhostPaper } from \"./rendering/Paper\";\r\nimport { Container } from \"./Container\";\r\nimport { Pattern } from \"./rendering/fills/Pattern\";\r\nimport { LinearGradient } from \"./rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"./rendering/fills/RadialGradient\";\r\nimport { Color, color, toColor } from \"./utils/Color\";\r\nimport { getInteraction } from \"./interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"./interaction/Mouse\";\r\nimport { options } from \"./Options\";\r\nimport { registry } from \"./Registry\";\r\nimport { NumberFormatter } from \"./formatters/NumberFormatter\";\r\nimport { DateFormatter } from \"./formatters/DateFormatter\";\r\nimport { DurationFormatter } from \"./formatters/DurationFormatter\";\r\nimport { getTextFormatter } from \"./formatters/TextFormatter\";\r\nimport { Language } from \"./utils/Language\";\r\nimport { Export } from \"./export/Export\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $math from \"./utils/Math\";\r\nimport * as $strings from \"./utils/Strings\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\nimport * as $iter from \"./utils/Iterator\";\r\nimport { system } from \"./System\";\r\nimport { Percent, percent } from \"./utils/Percent\";\r\n/**\r\n * Defines list ofvisual properties\r\n */\r\nexport var visualProperties = [\"fill\", \"fillOpacity\", \"stroke\", \"strokeOpacity\", \"strokeWidth\", \"strokeDasharray\", \"strokeDashoffset\", \"strokeLinecap\", \"strokeLinejoin\"]; // do not add opacity here, as it is used for showing/hiding\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Sprite represents any displayable element.\r\n *\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n *\r\n * [[Sprite]] class represents the a hierarchical structure. Every object that\r\n * extends [[Sprite]] can have children, that would inherit their properties,\r\n * such as language, formatters, etc.\r\n *\r\n * @see {@link SpriteState}\r\n * @see {@link ISpriteEvents} for a list of available events\r\n * @see {@link ISpriteAdapters} for a list of available Adapters\r\n *\r\n * @todo Review child elements that need to go into `_disposers`\r\n * @important\r\n */\r\nvar Sprite = /** @class */ (function (_super) {\r\n    __extends(Sprite, _super);\r\n    /**\r\n     * Constructor:\r\n     * * Creates initial node\r\n     * * Sets default properties\r\n     * * Creates required default states\r\n     * * Inits accessibility\r\n     */\r\n    function Sprite() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Holds values for Sprite's properties.\r\n         */\r\n        _this.properties = {};\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this._eventDispatcher = new SpriteEventDispatcher(_this);\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this._bindings = {};\r\n        /**\r\n         * Holds indicator if this Sprite is a \"template\" to be used for creating\r\n         * other Sprites from and should not be treated as full-fledged element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._isTemplate = false;\r\n        _this._isPath = false;\r\n        /**\r\n         * Holds indicator whether this sprite was already initialized.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._inited = false;\r\n        /**\r\n         * Holds indicator whether this sprite was already initialized and ready.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._ready = false;\r\n        /**\r\n         * If `sprite.hide()` is called and we have \"hidden\" state and\r\n         * `transitionDuration > 0`, we set `isHiding` flag to `true` in order to\r\n         * avoid restarting animations in case `hide()` method is called multiple\r\n         * times.\r\n         */\r\n        _this.isHiding = false;\r\n        /**\r\n         * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n         * This was added becaus hidden state might have visibility set to true and so\r\n         * there would not be possible to find out if a sprite is technically hidden or not.\r\n         */\r\n        _this._isHidden = false;\r\n        /**\r\n         * This property indicates if Sprite is currently being revealed from hidden\r\n         * state. This is used to prevent multiple calls to `sprite.show()` to\r\n         * restart reveal animation. (if enabled)\r\n         */\r\n        _this.isShowing = false;\r\n        /**\r\n         * Indicates if this element is a standalone instance. A \"standalone\r\n         * instance\" means this is a autonomous object which maintains its own\r\n         * set of controls like Preloader, Export, etc.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.isStandaloneInstance = false;\r\n        /**\r\n         * Indicates if togglable Sprite is currently active (toggled on).\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._isActive = false;\r\n        /**\r\n         * A Sprite element to use as a mask for this Sprite.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._mask = new MutableValueDisposer();\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this._positionPrecision = 3;\r\n        /**\r\n         * An instance of [[Language]].\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._language = new MutableValueDisposer();\r\n        /**\r\n         * Holds [[Export]] object.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._exporting = new MutableValueDisposer();\r\n        /**\r\n         * Should this Sprite be included when exporting?\r\n         */\r\n        _this._exportable = true;\r\n        /**\r\n         * Defines bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._bbox = { x: 0, y: 0, width: 0, height: 0 };\r\n        /**\r\n         * Indicates if this element is invalid and should be re-validated (redrawn).\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.invalid = false;\r\n        /**\r\n         * Indicates if this elements position is invalid and should be repositioned\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.positionInvalid = false;\r\n        /**\r\n         * A collection of key/value pairs that can be used to bind specific Sprite\r\n         * properties to [[DataItem]].\r\n         *\r\n         * For example: `fill` property can be bound to `myCustomColor` field in\r\n         * DataItem. The Sprite will automatically get the value for `fill` from its\r\n         * DataItem.\r\n         *\r\n         * Can be set for each [[SpriteState]] individually to override default\r\n         * bindings.\r\n         *\r\n         * @see {@link SpriteState}\r\n         */\r\n        _this.propertyFields = {};\r\n        /**\r\n         * Specifies if property changes on this object should be propagated to the\r\n         * objects cloned from this object.\r\n         *\r\n         * This setting affects property changes *after* cloning, since at the moment\r\n         * of cloning all of properties from source object are copied to the clone\r\n         * anyway.\r\n         *\r\n         * @default false\r\n         */\r\n        _this.applyOnClones = false;\r\n        // unrotated unscaled\r\n        _this._measuredWidthSelf = 0;\r\n        _this._measuredHeightSelf = 0;\r\n        // read only, sprite extreme coordinates\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxLeft = 0;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxRight = 0;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxTop = 0;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxBottom = 0;\r\n        // not rotated and not scaled\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxLeftSelf = 0;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxRightSelf = 0;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxTopSelf = 0;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxBottomSelf = 0;\r\n        _this._isDragged = false;\r\n        _this._isResized = false;\r\n        /**\r\n         * @deprecated Moved to [[SpriteProperties]]\r\n         */\r\n        _this._disabled = false;\r\n        _this._internalDisabled = false;\r\n        _this._updateDisabled = false;\r\n        _this._internalDefaultsApplied = false;\r\n        /**\r\n         * Time in milliseconds after which rollout event happens when user rolls-out of the sprite. This helps to avoid flickering in some cases.\r\n         */\r\n        _this.rollOutDelay = 0;\r\n        /**\r\n         * This flag is set to `true` for the initial sprite you create and place\r\n         * to the div so that we could clear all additional\r\n         * sprites/containers when this sprite is disposed.\r\n         *\r\n         * @ignore\r\n         */\r\n        _this.isBaseSprite = false;\r\n        /**\r\n         * Indicates whether this sprite should be cloned when cloning its parent\r\n         * container. We set this to `false` in those cases when a sprite is created\r\n         * by the class, so that when cloning a duplicate sprite would not appear.\r\n         */\r\n        _this.shouldClone = true;\r\n        /**\r\n         * A read-only flag which indicates if a sprite has completed its initial\r\n         * animation (if `showOnInit = true`).\r\n         *\r\n         * In case `showOnInit = false`, `appeared` is set to `true` on init.\r\n         *\r\n         * @readonly\r\n         */\r\n        _this.appeared = false;\r\n        /**\r\n         * [ex description]\r\n         *\r\n         * @todo Description\r\n         * @ignore\r\n         */\r\n        _this.ex = 0;\r\n        /**\r\n         * [ey description]\r\n         *\r\n         * @todo Description\r\n         * @ignore\r\n         */\r\n        _this.ey = 0;\r\n        /**\r\n         * Indicates if the sprite can be moved around when resizing it with two fingers (will only work if draggable = false)\r\n         * @ignore\r\n         */\r\n        _this.dragWhileResize = false;\r\n        /**\r\n         *  @ignore\r\n         */\r\n        _this.measureFailed = false;\r\n        /**\r\n         * If this flag is set to true, calling show() will not reveal the sprite.\r\n         *\r\n         * @ignore\r\n         */\r\n        _this.preventShow = false;\r\n        /**\r\n         * When cloning a sprite, if the template has it's own tooltip assigned, this tooltip is also cloned by default.\r\n         * This is not good for cpu and sometimes you might only need one single tooltip for all clones. Set this to false in order not to clone tooltip.\r\n         */\r\n        _this.cloneTooltip = true;\r\n        _this.className = \"Sprite\";\r\n        _this._disposers.push(_this._eventDispatcher);\r\n        // Generate a unique ID\r\n        $utils.used(_this.uid);\r\n        // Create SVG group to hold everything in\r\n        _this.group = _this.paper.addGroup(\"g\");\r\n        // Set defaults\r\n        // it is better to set defauls like this in order to save invaliation calls and events\r\n        _this.setPropertyValue(\"scale\", 1);\r\n        _this.setPropertyValue(\"rotation\", 0);\r\n        _this.setPropertyValue(\"align\", \"none\");\r\n        _this.setPropertyValue(\"valign\", \"none\");\r\n        _this.setPropertyValue(\"pixelPerfect\", false);\r\n        _this.setPropertyValue(\"visible\", true);\r\n        _this.setPropertyValue(\"tooltipPosition\", \"fixed\");\r\n        _this.setPropertyValue(\"verticalCenter\", \"none\");\r\n        _this.setPropertyValue(\"horizontalCenter\", \"none\");\r\n        _this.setPropertyValue(\"tooltipX\", percent(50));\r\n        _this.setPropertyValue(\"tooltipX\", percent(50));\r\n        _this.setPropertyValue(\"marginTop\", 0);\r\n        _this.setPropertyValue(\"marginBottom\", 0);\r\n        _this.setPropertyValue(\"marginLeft\", 0);\r\n        _this.setPropertyValue(\"marginRight\", 0);\r\n        _this.setPropertyValue(\"dx\", 0);\r\n        _this.setPropertyValue(\"dy\", 0);\r\n        _this.setPropertyValue(\"paddingTop\", 0);\r\n        _this.setPropertyValue(\"paddingBottom\", 0);\r\n        _this.setPropertyValue(\"paddingRight\", 0);\r\n        _this.setPropertyValue(\"paddingLeft\", 0);\r\n        _this.setPropertyValue(\"togglable\", false);\r\n        _this.setPropertyValue(\"hidden\", false);\r\n        _this.setPropertyValue(\"urlTarget\", \"_self\");\r\n        _this.setPropertyValue(\"alwaysShowTooltip\", false);\r\n        _this.setPropertyValue(\"showTooltipOn\", \"hover\");\r\n        _this._prevMeasuredWidth = 0;\r\n        _this._prevMeasuredHeight = 0;\r\n        _this._measuredWidth = 0;\r\n        _this._measuredHeight = 0;\r\n        _this._isMeasured = true;\r\n        // Invalidate the Sprite so that renderer knows it needs to be drawn\r\n        _this.invalidate();\r\n        //this.states.create(\"default\").properties.opacity = 1;\r\n        // Apply the theme\r\n        _this.applyTheme();\r\n        //this._disposers.push(this._clickable);\r\n        // Decorate adapter with events so that we can apply its settings whenever\r\n        // it is modified\r\n        // @todo Think what to do here. We can't just apply the adapter value to\r\n        // property since not all of those are for properties. Commented out for\r\n        // now.\r\n        /*this.adapter.events.on(\"inserted\", (ev: any) => {\r\n            (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n        });\r\n        this.adapter.events.on(\"removed\", (ev: any) => {\r\n            (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n        });*/\r\n        // Add disposable dependencies to `_disposers` so they are automatically\r\n        // disposed of when this object is disposed\r\n        _this._disposers.push(_this.events);\r\n        _this._disposers.push(_this.group);\r\n        _this._disposers.push(_this._mask);\r\n        _this._disposers.push(_this._language);\r\n        _this._disposers.push(_this._exporting);\r\n        //this._disposers.push(this._parent);\r\n        //this._disposers.push(this._modal);\r\n        _this._disposers.push(new Disposer(function () {\r\n            $object.each(_this._bindings, function (key, value) {\r\n                value.dispose();\r\n            });\r\n        }));\r\n        _this.setPropertyValue(\"interactionsEnabled\", true);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Sprite.prototype, \"events\", {\r\n        /**\r\n         * Event dispatcher.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/event-listeners/} for more info about Events\r\n         */\r\n        get: function () {\r\n            return this._eventDispatcher;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"adapter\", {\r\n        /**\r\n         * Holds Adapter.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/adapters/} for more info about Adapters\r\n         */\r\n        get: function () {\r\n            if (!this._adapterO) {\r\n                this._adapterO = new Adapter(this);\r\n            }\r\n            return this._adapterO;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * ==========================================================================\r\n     * ELEMENT VALIDATION, INIT, AND DRAWING STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Applies properties from all assigned themes.\r\n     *\r\n     * We do this here so that we can apply class names as well.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.applyTheme = function () {\r\n        _super.prototype.applyTheme.call(this);\r\n        if (options.autoSetClassName) {\r\n            this.setClassName();\r\n        }\r\n    };\r\n    /**\r\n     * Returns theme(s) used by this object either set explicitly on this\r\n     * element, inherited from parent, or inherited from [[System]].\r\n     *\r\n     * @return An array of theme references\r\n     */\r\n    Sprite.prototype.getCurrentThemes = function () {\r\n        var themes = this._themes;\r\n        if (themes) {\r\n            return themes;\r\n        }\r\n        else {\r\n            var parent_1 = this._parent;\r\n            if (parent_1) {\r\n                return parent_1.getCurrentThemes();\r\n            }\r\n            else {\r\n                return registry.themes;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Called just before element's validation, this function allows setting\r\n     * defaults.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.applyInternalDefaults = function () {\r\n        // Nothing here, but extending classes might override this function\r\n        // so that they can set their defaults\r\n        this._internalDefaultsApplied = true;\r\n    };\r\n    /**\r\n     * Invalidates element.\r\n     *\r\n     * Object will be redrawn during the next update cycle.\r\n     *\r\n     * Please note that in most cases elements will auto-invalidate when needed. If\r\n     * everything works, DO NOT use this method. Use it only if some changes do\r\n     * not take otherwise.\r\n     */\r\n    Sprite.prototype.invalidate = function () {\r\n        if (this.disabled || this._isTemplate || this.__disabled) {\r\n            return;\r\n        }\r\n        // We no longer reset this on each invalidate, so that they are applied\r\n        // only once, and do not overwrite user-defined settings\r\n        //this._internalDefaultsApplied = false;\r\n        if (!this.invalid) {\r\n            this.invalid = true;\r\n            registry.addToInvalidSprites(this);\r\n            system.requestFrame();\r\n        }\r\n    };\r\n    /**\r\n     * Validates element:\r\n     * * Triggers events\r\n     * * Redraws the element\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.validate = function () {\r\n        this.dispatchImmediately(\"beforevalidated\");\r\n        // prevents from drawing if topparent is 0x0\r\n        /*\r\n        let topParent = this.topParent;\r\n\r\n        if (topParent) {\r\n            if (!topParent.maxWidth || !topParent.maxHeight) {\r\n                this._disposers.push(topParent.events.once(\"maxsizechanged\", this.invalidate, this));\r\n            }\r\n        }*/\r\n        // Set internal defaults\r\n        if (!this._internalDefaultsApplied) {\r\n            this.applyInternalDefaults();\r\n        }\r\n        this.beforeDraw();\r\n        this.draw();\r\n        this.invalid = false;\r\n        registry.removeFromInvalidSprites(this);\r\n        this.afterDraw();\r\n    };\r\n    /**\r\n     * Invalidates element's position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.invalidatePosition = function () {\r\n        if (this.disabled || this._isTemplate) {\r\n            return;\r\n        }\r\n        if (!this.positionInvalid) {\r\n            this.positionInvalid = true;\r\n            registry.addToInvalidPositions(this);\r\n            system.requestFrame();\r\n        }\r\n    };\r\n    /**\r\n     * Transforms the element.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.validatePosition = function () {\r\n        var pixelX = this.pixelX;\r\n        var pixelY = this.pixelY;\r\n        var dx = this.dx;\r\n        var dy = this.dy;\r\n        var x = pixelX + dx;\r\n        var y = pixelY + dy;\r\n        if (this._updateDisabled) {\r\n            if (this._internalDisabled) {\r\n                this.group.attr({ \"display\": \"none\" });\r\n            }\r\n            else {\r\n                if (!this.disabled) {\r\n                    this.removeSVGAttribute(\"display\");\r\n                }\r\n            }\r\n            this._updateDisabled = false;\r\n        }\r\n        var sizeChanged = this.measure();\r\n        //if (!this.invalid) {\r\n        var prevGroupTransform = this.group.transformString;\r\n        this.group.moveTo({ x: x, y: y });\r\n        this.group.rotation = this.rotation;\r\n        if (this.nonScaling) {\r\n            this.group.scale = this.scale / this.globalScale;\r\n        }\r\n        else {\r\n            this.group.scale = this.scale;\r\n        }\r\n        if (prevGroupTransform != this.group.transformString || sizeChanged) {\r\n            // not yet sure, this is to avoid many transforms=>container layout invalidation on initial buid\r\n            if (prevGroupTransform == null) {\r\n                this.dispatch(\"transformed\");\r\n            }\r\n            else {\r\n                this.dispatchImmediately(\"transformed\");\r\n            }\r\n            // TODO clear existing positionchanged dispatches ?\r\n            this.dispatch(\"positionchanged\");\r\n            if (this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") {\r\n                this.updateTooltipPosition();\r\n            }\r\n        }\r\n        //}\r\n        // it might happen that x and y changed again, so we only remove if they didn't\r\n        if (pixelX + dx == x && pixelY + dy == y) {\r\n            registry.removeFromInvalidPositions(this);\r\n            this.positionInvalid = false;\r\n        }\r\n        var maskRectangle = this._maskRectangle;\r\n        // todo: verify this\r\n        if (maskRectangle) {\r\n            this._clipElement.moveTo({ x: maskRectangle.x - pixelX, y: maskRectangle.y - pixelY });\r\n        }\r\n    };\r\n    /**\r\n     * A placeholder method that is called **before** element begins to be drawn.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.beforeDraw = function () {\r\n    };\r\n    /**\r\n     * A placeholder method that draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.draw = function () {\r\n    };\r\n    /**\r\n     * A placeholder method that is called **after** element finishes drawing\r\n     * itself.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.afterDraw = function () {\r\n        var e_1, _a;\r\n        if (this.isMeasured || this.horizontalCenter !== \"none\" || this.verticalCenter !== \"none\") {\r\n            this.measureElement();\r\n        }\r\n        //this.applyMask();\r\n        if (!this._inited) {\r\n            if (this._adapterO) {\r\n                try {\r\n                    // used to be applySVGAttrbutes here, this is more efficient\r\n                    for (var _b = __values(this._adapterO.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                        var key = _c.value;\r\n                        switch (key) {\r\n                            case \"mask\":\r\n                            case \"fill\":\r\n                            case \"opacity\":\r\n                            case \"fillOpacity\":\r\n                            case \"stroke\":\r\n                            case \"strokeOpacity\":\r\n                            case \"strokeWidth\":\r\n                            case \"shapeRendering\":\r\n                            case \"strokeDasharray\":\r\n                            case \"strokeDashoffset\":\r\n                            case \"strokeLinecap\":\r\n                            case \"strokeLinejoin\":\r\n                            case \"textDecoration\":\r\n                            case \"fontSize\":\r\n                            case \"fontFamily\":\r\n                            case \"fontWeight\":\r\n                                //case \"focusable\":\r\n                                //case \"tabindex\":\r\n                                //case \"role\":\r\n                                this[key] = this[key];\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                    }\r\n                    finally { if (e_1) throw e_1.error; }\r\n                }\r\n            }\r\n            this.applyFilters();\r\n            this.visible = this.visible;\r\n            this.interactionsEnabled = this.getPropertyValue(\"interactionsEnabled\"); // can't use .interactionsEnabled as it get's parent's\r\n            this._inited = true;\r\n            if (!this.showOnInit) {\r\n                this.appeared = true;\r\n            }\r\n            if (this.hidden) {\r\n                this.hide(0);\r\n            }\r\n            this.applyMask();\r\n            this.dispatch(\"validated\");\r\n            this.dispatch(\"inited\");\r\n            this.dispatchReady();\r\n        }\r\n        else {\r\n            this.dispatch(\"validated\");\r\n        }\r\n        if (this.showTooltipOn == \"always\") {\r\n            if (this.visible && !this.disabled && !this.__disabled) {\r\n                this.showTooltip();\r\n            }\r\n            else {\r\n                this.hideTooltip(0);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Dispatches `\"ready\"` event. Sprite dispatches it right after `\"inited\"` event.\r\n     *\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.dispatchReady = function () {\r\n        if (!this.isReady()) {\r\n            this._ready = true;\r\n            this.dispatch(\"ready\");\r\n        }\r\n    };\r\n    /**\r\n     * Triggers a re-initialization of this element.\r\n     *\r\n     * Will result in complete redrawing of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.reinit = function () {\r\n        this._inited = false;\r\n        this.setState(this.defaultState);\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * Handles the situation where parent element is resized.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.handleGlobalScale = function () {\r\n        this.dispatch(\"globalscalechanged\");\r\n        if (this.nonScalingStroke) {\r\n            this.strokeWidth = this.strokeWidth;\r\n        }\r\n        if (this.nonScaling) {\r\n            this.validatePosition();\r\n        }\r\n        this.updateFilterScale();\r\n    };\r\n    /**\r\n     * Updates filter properties which might depend on scale\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.updateFilterScale = function () {\r\n        var _this = this;\r\n        $iter.each(this.filters.iterator(), function (filter) {\r\n            filter.scale = _this.globalScale;\r\n        });\r\n    };\r\n    /**\r\n     * Removes itself from system's invalid lists.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.removeFromInvalids = function () {\r\n        registry.removeFromInvalidSprites(this);\r\n        registry.removeFromInvalidPositions(this);\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Sprite]].\r\n     *\r\n     * @param source Source Sprite\r\n     */\r\n    Sprite.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.isMeasured = source.isMeasured;\r\n        this.states.copyFrom(source.states);\r\n        if (source.filters.length > 0) {\r\n            source.filters.each(function (filter) {\r\n                _this.filters.push(filter.clone());\r\n            });\r\n        }\r\n        if (source._adapterO) {\r\n            this.adapter.copyFrom(source._adapterO);\r\n        }\r\n        //helps to avoid calling getter which creates instance\r\n        if (source[\"_interaction\"]) {\r\n            this.interactions.copyFrom(source.interactions);\r\n        }\r\n        if (source[\"_plugins\"]) {\r\n            this.plugins.copyFrom(source.plugins);\r\n        }\r\n        this.configField = source.configField;\r\n        this.applyOnClones = source.applyOnClones;\r\n        // this.numberFormatter = source.numberFormatter; // todo: this creates loose number formatter and copies it to all clones. somehow we need to know if source had numberFormatter explicitly created and not just because a getter was called.\r\n        //this.mask = source.mask; need to think about this, generally this causes a lot of problems\r\n        this.disabled = source.disabled;\r\n        this.virtualParent = source.virtualParent;\r\n        this.exportable = source.exportable;\r\n        //@todo: create tooltip if it's on source but not on this?\r\n        //const tooltip = this._tooltip;\r\n        //if (tooltip) {\r\n        //\ttooltip.copyFrom(source.tooltip);\r\n        //}\r\n        if (source._tooltip) {\r\n            if (this._tooltip) {\r\n                this._tooltip.copyFrom(source.tooltip);\r\n            }\r\n            else {\r\n                if (source.cloneTooltip) {\r\n                    this.tooltip = source.tooltip.clone();\r\n                }\r\n                else {\r\n                    this._tooltip = source.tooltip;\r\n                }\r\n            }\r\n        }\r\n        //if ((<any>source)[\"_tooltip\"] && !this._tooltip) {\r\n        //\tthis._tooltip = (<any>source)[\"_tooltip\"];\r\n        //}\r\n        this._showSystemTooltip = source.showSystemTooltip;\r\n        $utils.copyProperties(source.propertyFields, this.propertyFields);\r\n        $utils.copyProperties(source.properties, this);\r\n        if (source.fillModifier) {\r\n            this.fillModifier = source.fillModifier.clone();\r\n        }\r\n        if (source.strokeModifier) {\r\n            this.strokeModifier = source.strokeModifier.clone();\r\n        }\r\n        if (source.focusFilter) {\r\n            this.focusFilter = source.focusFilter.clone();\r\n        }\r\n    };\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    Sprite.prototype.dispose = function () {\r\n        if (!this.isDisposed()) {\r\n            if (this.showTooltipOn == \"always\" && this.tooltip) {\r\n                this.tooltip.hide();\r\n            }\r\n            this.dispatchImmediately(\"beforedisposed\");\r\n            if (this.isBaseSprite) {\r\n                if (this.htmlContainer) {\r\n                    while (this.htmlContainer.childNodes.length > 0) {\r\n                        this.htmlContainer.removeChild(this.htmlContainer.firstChild);\r\n                    }\r\n                }\r\n                this.isBaseSprite = false;\r\n            }\r\n            _super.prototype.dispose.call(this);\r\n            // Clear adapters\r\n            if (this._adapterO) {\r\n                this._adapterO.clear();\r\n            }\r\n            if (this.applyOnClones) {\r\n                if (this._clones) {\r\n                    for (var i = this._clones.length - 1; i >= 0; i--) {\r\n                        var clone = this._clones.getIndex(i);\r\n                        clone.dispose();\r\n                    }\r\n                }\r\n            }\r\n            if (this._svgContainer) {\r\n                this._svgContainer.dispose();\r\n            }\r\n            if (this._interactionDisposer) {\r\n                this._interactionDisposer.dispose();\r\n                this._interactionDisposer = undefined;\r\n            }\r\n            if (this._urlDisposer) {\r\n                this._urlDisposer.dispose();\r\n            }\r\n            this.removeFromInvalids();\r\n            if (this.element) {\r\n                this.element.dispose();\r\n            }\r\n            if (this.group) {\r\n                this.group.dispose();\r\n            }\r\n            if (this._numberFormatter) {\r\n                this._numberFormatter.dispose();\r\n            }\r\n            if (this._focusFilter) {\r\n                this._focusFilter.dispose();\r\n            }\r\n            var stroke = this.stroke;\r\n            if (stroke && !(stroke instanceof Color) && stroke.dispose) {\r\n                if (this.clonedFrom && this.clonedFrom.stroke == stroke) {\r\n                    // do nothing\r\n                }\r\n                else {\r\n                    stroke.dispose();\r\n                }\r\n            }\r\n            // TODO a bit hacky\r\n            var fill = this.fill;\r\n            if (fill && !(fill instanceof Color) && fill.dispose) {\r\n                if (this.clonedFrom && this.clonedFrom.fill == fill) {\r\n                    // do nothing\r\n                }\r\n                else {\r\n                    fill.dispose();\r\n                }\r\n            }\r\n            // remove from map\r\n            if ($type.hasValue(this.id)) {\r\n                this.map.removeKey(this.id);\r\n            }\r\n            this.parent = undefined;\r\n            if (this._filters) {\r\n                while (this._filters.length > 0) {\r\n                    var filter = this._filters.getIndex(0);\r\n                    filter.dispose();\r\n                    this._filters.removeValue(filter);\r\n                }\r\n            }\r\n            this._alwaysShowDisposers = undefined;\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"isTemplate\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Is template?\r\n         */\r\n        get: function () {\r\n            return this._isTemplate;\r\n        },\r\n        /**\r\n         * Indicates if this element is a \"template\".\r\n         *\r\n         * Template Sprites act only as a holders for config for other \"real\"\r\n         * elements to be cloned from.\r\n         *\r\n         * Templates are treated differently, as they are not validated, redrawn, or\r\n         * otherwise are processed.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Is template?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this._isTemplate != value) {\r\n                this._isTemplate = value;\r\n                if (this instanceof Container) {\r\n                    $iter.each(this.children.iterator(), function (child) {\r\n                        child.isTemplate = value;\r\n                    });\r\n                }\r\n                if (value) {\r\n                    this.parent = this._parent;\r\n                    this.removeFromInvalids();\r\n                }\r\n                else {\r\n                    this.invalidate();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"showSystemTooltip\", {\r\n        /**\r\n         * @return Show system tooltip?\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._showSystemTooltip)) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.showSystemTooltip;\r\n                }\r\n                else if (this._parent) {\r\n                    return this._parent.showSystemTooltip;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            return this._showSystemTooltip;\r\n        },\r\n        /**\r\n         * Indicates whether the element should attempt to construct itself in a way\r\n         * so that system tooltip is shown if its `readerTitle` is set.\r\n         *\r\n         * @param value Show system tooltip?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this._showSystemTooltip != value) {\r\n                this._showSystemTooltip = value;\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"topParent\", {\r\n        /**\r\n         * ==========================================================================\r\n         * HIERARCHY AND STRUCTURE RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Sprites's top-level [[Container]].\r\n         *\r\n         * Please note that in most cases it won't be the chart element.\r\n         *\r\n         * To access base chart element, use `baseSprite` instead.\r\n         *\r\n         * @return Top-level ascendant\r\n         */\r\n        get: function () {\r\n            if (this._topParent) {\r\n                return this._topParent;\r\n            }\r\n            else {\r\n                if (this._parent) {\r\n                    return this._parent.topParent;\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * @ignore\r\n         * @param value {Container} top parent of a sprite\r\n         */\r\n        set: function (value) {\r\n            this._topParent = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"parent\", {\r\n        /**\r\n         * @return Parent container\r\n         */\r\n        get: function () {\r\n            return this._parent;\r\n        },\r\n        /**\r\n         * Elements' parent [[Container]].\r\n         *\r\n         * @param parent  Parent container\r\n         */\r\n        set: function (parent) {\r\n            if (this._isTemplate) {\r\n                return;\r\n            }\r\n            // TODO is this needed ?\r\n            $utils.used(this.paper);\r\n            var oldParent = this._parent;\r\n            if (oldParent != parent) {\r\n                if (oldParent) {\r\n                    oldParent.children.removeValue(this);\r\n                }\r\n                this._parent = parent;\r\n                if (parent) {\r\n                    this.topParent = parent.topParent;\r\n                    if (parent.isTemplate) {\r\n                        this.isTemplate = true;\r\n                    }\r\n                    this.baseId = parent.baseId;\r\n                    parent.children.push(this);\r\n                    // insert handler at Container invalidates +  invalidatesLayout + adds to group\r\n                    if (this._tooltip && !this._tooltipContainer) {\r\n                        this._tooltip.parent = parent.tooltipContainer;\r\n                    }\r\n                    if (!this._dataItem) {\r\n                        this.dataItem = parent.dataItem;\r\n                    }\r\n                    this.handleAlwaysShowTooltip();\r\n                    if (this.dataItem) {\r\n                        // No need to apply accessibility if there's no data item\r\n                        // The whole reason of applying it here is to populate data\r\n                        // placesholders, and if tehre's no data item, it won't work anyway\r\n                        this.applyAccessibility();\r\n                    }\r\n                    this.dispatchImmediately(\"parentset\");\r\n                }\r\n                else {\r\n                    this.topParent = undefined;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.handleAlwaysShow = function () {\r\n        this.showTooltip();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.handleAlwaysShowTooltip = function () {\r\n        var sprite = this;\r\n        var oldDisposers = this._alwaysShowDisposers;\r\n        if (oldDisposers) {\r\n            $array.each(oldDisposers, function (oldDisposer) {\r\n                oldDisposer.dispose();\r\n            });\r\n        }\r\n        this._alwaysShowDisposers = [];\r\n        if (this.showTooltipOn == \"always\") {\r\n            while (sprite != undefined) {\r\n                var disposer = sprite.events.on(\"visibilitychanged\", this.handleAlwaysShow, this, false);\r\n                this.addDisposer(disposer);\r\n                this._alwaysShowDisposers.push(disposer);\r\n                sprite = sprite.parent;\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"virtualParent\", {\r\n        /**\r\n         * @return Virtual parent\r\n         */\r\n        get: function () {\r\n            return this._virtualParent;\r\n        },\r\n        /**\r\n         * Element's \"virtual\" parent.\r\n         *\r\n         * This is required in ordere to maintain proper inheritance (like\r\n         * formatters).\r\n         *\r\n         * Sometimes an element is a \"logical\" parent, even though it's not a direct\r\n         * ascendant.\r\n         *\r\n         * Example: a bullet is not a child of the axis, but it would make sense\r\n         * for it to inherit series' formatters.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Virtual parent\r\n         */\r\n        set: function (value) {\r\n            this._virtualParent = value;\r\n            if (this.dataItem) {\r\n                // No need to apply accessibility if there's no data item\r\n                // The whole reason of applying it here is to populate data\r\n                // placesholders, and if tehre's no data item, it won't work anyway\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Moves `<defs>` to correct place in DOM.\r\n     *\r\n     * Some elements are initially created in \"ghost\" container. When moving\r\n     * those into proper place in DOM, their respective `<defs>` need to be moved\r\n     * as well.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.appendDefs = function () {\r\n        if (this.filterElement) {\r\n            this.paper.appendDef(this.filterElement);\r\n        }\r\n        var fill = this.fill;\r\n        if (fill && fill.element) {\r\n            this.paper.appendDef(fill.element);\r\n        }\r\n        var stroke = this.stroke;\r\n        if (stroke && stroke.element) {\r\n            this.paper.appendDef(stroke.element);\r\n        }\r\n        if (this.fillModifier && this.fill instanceof Color) {\r\n            var fill_1 = this.fillModifier.modify(this.fill);\r\n            if (fill_1 && fill_1.element) {\r\n                this.paper.appendDef(fill_1.element);\r\n            }\r\n        }\r\n        if (this.strokeModifier && this.stroke instanceof Color) {\r\n            var stroke_1 = this.strokeModifier.modify(this.stroke);\r\n            if (stroke_1 && stroke_1.element) {\r\n                this.paper.appendDef(stroke_1.element);\r\n            }\r\n        }\r\n        if (this._clipPath) {\r\n            this.paper.appendDef(this._clipPath);\r\n        }\r\n        if (this._exportable === false) {\r\n            this.exportable = false;\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"map\", {\r\n        /**\r\n         * Returns a [[Dictionary]] which maps object ids with their respective\r\n         * objects.\r\n         *\r\n         * Can be used to retrieve any object by id, e.g.:\r\n         *\r\n         * ```TypeScript\r\n         * console.log(mySprite.map.getKey(\"myid\"));\r\n         * ```\r\n         * ```JavaScript\r\n         * console.log(mySprite.map.getKey(\"myid\"));\r\n         * ```\r\n         *\r\n         * @return Map collection\r\n         */\r\n        get: function () {\r\n            var top = this.topParent;\r\n            if (top) {\r\n                return top.map;\r\n            }\r\n            else if (!this._map) {\r\n                this._map = new Dictionary();\r\n            }\r\n            return this._map;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"delayedMap\", {\r\n        /**\r\n         * @ignore\r\n         * @return Map collection\r\n         */\r\n        get: function () {\r\n            var top = this.topParent;\r\n            if (top) {\r\n                return top.delayedMap;\r\n            }\r\n            else if (!this._delayedMap) {\r\n                this._delayedMap = new Dictionary();\r\n            }\r\n            return this._delayedMap;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"id\", {\r\n        /**\r\n         * @return ID\r\n         */\r\n        get: function () {\r\n            return this._id;\r\n        },\r\n        /**\r\n         * Element's user-defined ID.\r\n         *\r\n         * Will throw an Error if there already is an object with the same ID.\r\n         *\r\n         * Please note that above check will be performed withing the scope of the\r\n         * current chart instance. It will not do checks across other chart instances\r\n         * or in globally in DOM.\r\n         *\r\n         * Make sure the IDs are unique.\r\n         *\r\n         * @param value ID\r\n         */\r\n        set: function (value) {\r\n            if (this._id != value) {\r\n                this._id = value;\r\n                if (this.map.hasKey(value)) {\r\n                    throw Error(\"Duplicate id (\" + value + \") used on multiple objects.\");\r\n                }\r\n                else {\r\n                    this.map.setKey(value, this);\r\n                }\r\n                if (options.autoSetClassName) {\r\n                    this.setClassName();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"dom\", {\r\n        /**\r\n         * ==========================================================================\r\n         * ELEMENT AND DOM TREE MANIPULATION AND MEASURING\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns DOM element reference associated with this element.\r\n         *\r\n         * @readonly\r\n         * @return DOM element\r\n         */\r\n        get: function () {\r\n            return this.group.node;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"paper\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Paper\r\n         */\r\n        get: function () {\r\n            if (this._paper) {\r\n                return this._paper;\r\n            }\r\n            else {\r\n                var parent_2 = this._parent;\r\n                if (parent_2) {\r\n                    return parent_2.paper;\r\n                }\r\n            }\r\n            return getGhostPaper();\r\n        },\r\n        /**\r\n         * A [[Paper]] instance to place elements on.\r\n         *\r\n         * If there's no Paper set for this element, it goes up the ascendant tree\r\n         * until it finds one.\r\n         *\r\n         * This method is used by important `addChild()` method, so it's essential\r\n         * to have a [[Paper]] instance.\r\n         *\r\n         * If this element has a separate `htmlContainer` set, it will have a\r\n         * [[Paper]] instance itself.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param paper  Paper\r\n         */\r\n        set: function (paper) {\r\n            this.setPaper(paper);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets [[Paper]] instance to use to draw elements.\r\n     * @ignore\r\n     * @param paper Paper\r\n     * @return true if paper was changed, false, if it's the same\r\n     */\r\n    Sprite.prototype.setPaper = function (paper) {\r\n        var oldPaper = this._paper;\r\n        if (oldPaper != paper) {\r\n            this._paper = paper;\r\n            this.appendDefs();\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"htmlContainer\", {\r\n        /**\r\n         * @return HTML element\r\n         */\r\n        get: function () {\r\n            if (this._htmlContainer) {\r\n                return this._htmlContainer;\r\n            }\r\n            else {\r\n                var parent_3 = this._parent;\r\n                if (parent_3) {\r\n                    return parent_3.htmlContainer;\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * An HTML element to be used when placing wrapper element (`<div>`)\r\n         * for the whole chart.\r\n         *\r\n         * This is the same for **all** elements within the same chart.\r\n         *\r\n         * @param htmlContainer HTML element\r\n         */\r\n        set: function (htmlContainer) {\r\n            this._htmlContainer = htmlContainer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"titleElement\", {\r\n        /**\r\n         * Creates (if not yet created) and returns element's `<title>` element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Title element\r\n         */\r\n        get: function () {\r\n            if (!this._titleElement) {\r\n                this._titleElement = this.paper.add(\"title\");\r\n                this.group.add(this._titleElement);\r\n            }\r\n            return this._titleElement;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"descriptionElement\", {\r\n        /**\r\n         * Creates (if not yet created) and returns element's `<desc>` element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Desc element\r\n         */\r\n        get: function () {\r\n            if (!this._descriptionElement) {\r\n                this._descriptionElement = this.paper.add(\"desc\");\r\n                this.group.add(this._descriptionElement);\r\n            }\r\n            return this._descriptionElement;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"filters\", {\r\n        /**\r\n         * Returns list of SVG filters (effects) applied to element. If the filter\r\n         * list is not yet initilized, creates and returns an empty one.\r\n         * Note, not all filters combine well with one another. We recommend using one filter per sprite.\r\n         *\r\n         * @return List of filters\r\n         */\r\n        get: function () {\r\n            if (!this._filters) {\r\n                this._filters = new List();\r\n                // TODO only add certain events ?\r\n                this._disposers.push(this._filters.events.onAll(this.applyFilters, this));\r\n                this._disposers.push(new ListDisposer(this._filters));\r\n            }\r\n            return this._filters;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets required SVG attributes. Must be called every time an element is\r\n     * redrawn so that attributes are (re)applied.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.setSVGAttributes = function () {\r\n        this.fill = this.fill;\r\n        this.opacity = this.opacity;\r\n        this.fillOpacity = this.fillOpacity;\r\n        this.stroke = this.stroke;\r\n        this.strokeOpacity = this.strokeOpacity;\r\n        this.shapeRendering = this.shapeRendering;\r\n        this.strokeDasharray = this.strokeDasharray;\r\n        this.strokeDashoffset = this.strokeDashoffset;\r\n        this.strokeLinecap = this.strokeLinecap;\r\n        this.strokeLinejoin = this.strokeLinejoin;\r\n        this.focusable = this.focusable;\r\n        this.tabindex = this.tabindex;\r\n        this.role = this.role;\r\n    };\r\n    /**\r\n     * Sets an attribute directly on an SVG element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param attribute Attribute object\r\n     */\r\n    Sprite.prototype.setSVGAttribute = function (attribute) {\r\n        this.group.attr(attribute);\r\n    };\r\n    /**\r\n     * Removes an attribute directly from SVG element.\r\n     *\r\n     * @param attribute Attribute key to remove\r\n     */\r\n    Sprite.prototype.removeSVGAttribute = function (attribute) {\r\n        this.group.removeAttr(attribute);\r\n    };\r\n    /**\r\n     * Sets `class` attribute of the elements SVG node.\r\n     *\r\n     * Uses `am4core.options.classNamePrefix`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.setClassName = function () {\r\n        var className = this.className;\r\n        var classNamePrefix = options.classNamePrefix;\r\n        if (this.element) {\r\n            this.element.addClass(classNamePrefix + className);\r\n        }\r\n        this.group.addClass(classNamePrefix + className + \"-group\");\r\n        if ($type.hasValue(this.id)) {\r\n            this.group.addClass(classNamePrefix + this.id);\r\n        }\r\n        if (this.userClassName) {\r\n            this.group.addClass(this.userClassName);\r\n        }\r\n    };\r\n    /**\r\n     * Adds an `id` attribute the the element and returns the id.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Element's ID\r\n     */\r\n    Sprite.prototype.uidAttr = function () {\r\n        this.setSVGAttribute({ \"id\": this.uid });\r\n        return this.uid;\r\n    };\r\n    /**\r\n     * [updateClipPath description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    Sprite.prototype.updateClipPath = function () {\r\n        var element = this._clipElement;\r\n        if (element) {\r\n            element.moveTo({ x: this.mask.pixelX, y: this.mask.pixelY });\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.createClipPath = function () {\r\n        if (!this._clipPath) {\r\n            this._clipPath = this.paper.addGroup(\"clipPath\");\r\n            this.paper.appendDef(this._clipPath);\r\n            this._disposers.push(this._clipPath);\r\n            var id = registry.getUniqueId();\r\n            this._clipPath.attr({ \"id\": id });\r\n            this.group.attr({ \"clip-path\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\" });\r\n        }\r\n    };\r\n    /**\r\n     * Applies the mask Sprite.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.applyMask = function () {\r\n        var mask = this.mask;\r\n        if (this._clipPath && mask) {\r\n            // Container\r\n            if (mask instanceof Container) {\r\n                this._clipElement.attr({ \"width\": $math.max(0, mask.pixelWidth), \"height\": $math.max(0, mask.pixelHeight) });\r\n                var point = $utils.spritePointToSprite({ x: mask.pixelX, y: mask.pixelY }, mask.parent, this);\r\n                this._clipPath.x = point.x;\r\n                this._clipPath.y = point.y;\r\n            }\r\n            // Sprite\r\n            else {\r\n                if (mask.element && mask.element != this._clipElement) {\r\n                    this._clipElement = mask.element;\r\n                    this._clipPath.add(this._clipElement);\r\n                }\r\n                this._clipPath.scale = mask.scale;\r\n                this._clipPath.x = mask.pixelX;\r\n                this._clipPath.y = mask.pixelY;\r\n                this._clipPath.rotation = mask.rotation;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Applies filters to the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.applyFilters = function () {\r\n        var _this = this;\r\n        // we create a separate filter for each sprite as otherwise it would be impossible to animate filter.\r\n        // svg doesn't support multiple filters applied to one element, so we put all the primitives to one filterElement of a sprite.\r\n        if (this._filters && this._filters.length > 0) {\r\n            var width_1 = 100;\r\n            var height_1 = 100;\r\n            if (!this.filterElement) {\r\n                this.filterElement = this.paper.addGroup(\"filter\");\r\n                this._disposers.push(this.filterElement);\r\n            }\r\n            else {\r\n                this.filterElement.removeChildNodes();\r\n            }\r\n            this.paper.appendDef(this.filterElement);\r\n            var id = \"filter-\" + this.uid;\r\n            this.filterElement.attr({ \"id\": id });\r\n            $iter.each(this.filters.iterator(), function (filter) {\r\n                filter.sprite = _this;\r\n                filter.paper = _this.paper;\r\n                _this.filterElement.attr({ filterUnits: filter.filterUnits });\r\n                filter.appendPrimitives(_this.filterElement);\r\n                if (filter.width > width_1) {\r\n                    width_1 = filter.width;\r\n                }\r\n                if (filter.height > height_1) {\r\n                    height_1 = filter.height;\r\n                }\r\n                filter.scale = _this.globalScale;\r\n            });\r\n            var w = width_1 + \"%\";\r\n            var h = height_1 + \"%\";\r\n            /* temporarily removed as it is breaking tooltips on Safari @todo come back to this\r\n            if (this._measuredHeight <= 1) {\r\n                h = height + \"\";\r\n            }\r\n\r\n            if (this._measuredWidth <= 1) {\r\n                h = width + \"\";\r\n            }*/\r\n            this.filterElement.attr({ \"width\": w, \"height\": h, \"x\": -(width_1 - 100) / 2 + \"%\", \"y\": -(height_1 - 100) / 2 + \"%\" });\r\n            this.group.attr({ \"filter\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\" });\r\n        }\r\n        else if (this.filterElement) {\r\n            this.group.removeAttr(\"filter\");\r\n            this.filterElement.removeChildNodes();\r\n        }\r\n    };\r\n    /**\r\n     * [removeClipPath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Sprite.prototype.removeClipPath = function () {\r\n        if (this._clipPath) {\r\n            //this._clipPath.dispose();\r\n            this.removeDispose(this._clipPath);\r\n            this._clipPath = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * [setElement description]\r\n     *\r\n     * @ignore\r\n     * @todo Description\r\n     * @param element [description]\r\n     */\r\n    Sprite.prototype.setElement = function (element) {\r\n        this.element = element;\r\n        this.setSVGAttributes();\r\n        this.applyAccessibility();\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"element\", {\r\n        /**\r\n         * @return Element\r\n         */\r\n        get: function () {\r\n            return this._element;\r\n        },\r\n        /**\r\n         * The main element for this Sprite, usually an SVG `<g>`.\r\n         *\r\n         * All other sub-elements are created in it.\r\n         *\r\n         * @param element  Element\r\n         */\r\n        set: function (element) {\r\n            // Destroy previous element if there was one before\r\n            this.removeElement();\r\n            // Set new element\r\n            this._element = element;\r\n            // Add element to group\r\n            // Since we are adding Element to group, which is already in the\r\n            // `.disposers` it will be removed automatically when Sprite is disposed\r\n            // of\r\n            this.group.add(element);\r\n            if (element.node instanceof SVGPathElement) {\r\n                this._isPath = true;\r\n            }\r\n            // This is needed if someone is setting element not in draw method but\r\n            // from outside\r\n            if (!this.invalid) {\r\n                this.validate();\r\n            }\r\n            if (options.autoSetClassName) {\r\n                this.setClassName();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"svgContainer\", {\r\n        /**\r\n         * HTML container (`<div>`) which is used to place chart's `<svg>` element\r\n         * in.\r\n         *\r\n         * @return Container for chart elements\r\n         */\r\n        get: function () {\r\n            if (this._svgContainer) {\r\n                return this._svgContainer;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.svgContainer;\r\n            }\r\n        },\r\n        /**\r\n         * Sets HTML container to add SVG and other chart elements to.\r\n         *\r\n         * @param svgContainer Container for chart elements\r\n         */\r\n        set: function (svgContainer) {\r\n            this._svgContainer = svgContainer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Measures main element.\r\n     *\r\n     * Saves measurements into private `_bbox` property.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.measureElement = function () {\r\n        if (this.element) {\r\n            if (this.definedBBox) {\r\n                this._bbox = this.definedBBox;\r\n            }\r\n            else {\r\n                var svgBBox = this.element.getBBox();\r\n                this._bbox = { x: svgBBox.x, y: svgBBox.y, width: svgBBox.width, height: svgBBox.height };\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Positions element according its center settings.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.updateCenter = function () {\r\n        if (this.element) {\r\n            var prevElementTransform = this.element.transformString;\r\n            var bbox = this.bbox;\r\n            var ex = 0;\r\n            var ey = 0;\r\n            var elementX = bbox.x;\r\n            var elementY = bbox.y;\r\n            var elementWidth = bbox.width;\r\n            var elementHeigth = bbox.height;\r\n            var pixelPaddingLeft = this.pixelPaddingLeft;\r\n            var pixelPaddingRight = this.pixelPaddingRight;\r\n            var pixelPaddingTop = this.pixelPaddingTop;\r\n            var pixelPaddingBottom = this.pixelPaddingBottom;\r\n            // add padding to the measured size\r\n            var measuredWidth = $math.max(elementWidth + pixelPaddingLeft + pixelPaddingRight, this.pixelWidth);\r\n            var measuredHeight = $math.max(elementHeigth + pixelPaddingTop + pixelPaddingBottom, this.pixelHeight);\r\n            // extremes\r\n            var left = bbox.x;\r\n            var right = bbox.x + measuredWidth;\r\n            var top_1 = bbox.y;\r\n            var bottom = bbox.y + measuredHeight;\r\n            var horizontalCenter = this.horizontalCenter;\r\n            var verticalCenter = this.verticalCenter;\r\n            switch (horizontalCenter) {\r\n                case \"none\":\r\n                    ex = elementX + pixelPaddingLeft;\r\n                    break;\r\n                case \"left\":\r\n                    ex = pixelPaddingLeft;\r\n                    break;\r\n                case \"middle\":\r\n                    ex = pixelPaddingLeft - (elementWidth + pixelPaddingRight + pixelPaddingLeft) / 2;\r\n                    break;\r\n                case \"right\":\r\n                    ex = -pixelPaddingRight - elementWidth;\r\n                    break;\r\n            }\r\n            switch (verticalCenter) {\r\n                case \"none\":\r\n                    ey = elementY + pixelPaddingTop;\r\n                    break;\r\n                case \"top\":\r\n                    ey = pixelPaddingTop;\r\n                    break;\r\n                case \"middle\":\r\n                    ey = pixelPaddingTop - (elementHeigth + pixelPaddingBottom + pixelPaddingTop) / 2;\r\n                    break;\r\n                case \"bottom\":\r\n                    ey = -pixelPaddingBottom - elementHeigth;\r\n                    break;\r\n            }\r\n            this._measuredHeight = measuredHeight;\r\n            this._measuredWidth = measuredWidth;\r\n            var x = $math.round(ex - elementX, this._positionPrecision, true);\r\n            var y = $math.round(ey - elementY, this._positionPrecision, true);\r\n            this.ex = x - pixelPaddingLeft;\r\n            this.ey = y - pixelPaddingTop;\r\n            this.maxLeft = left + x - pixelPaddingLeft;\r\n            this.maxRight = right + x - pixelPaddingLeft;\r\n            this.maxTop = top_1 + y - pixelPaddingTop;\r\n            this.maxBottom = bottom + y - pixelPaddingTop;\r\n            if (this.pixelPerfect && options.pixelPerfectPrecision == 0) {\r\n                x -= 0.5;\r\n                y -= 0.5;\r\n            }\r\n            this.element.moveTo({ x: x, y: y });\r\n            if (prevElementTransform != this.element.transformString) {\r\n                this.dispatchImmediately(\"transformed\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Measures the whole element.\r\n     *\r\n     * Returns `true` if the size has changed from the last measurement.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Did the size changed from the last measurement?\r\n     */\r\n    Sprite.prototype.measure = function () {\r\n        this.updateCenter();\r\n        var measuredWidth = this._measuredWidth;\r\n        var measuredHeight = this._measuredHeight;\r\n        // extremes\r\n        var left = this.maxLeft;\r\n        var right = this.maxRight;\r\n        var top = this.maxTop;\r\n        var bottom = this.maxBottom;\r\n        // non-parent wise size\r\n        this._measuredWidthSelf = measuredWidth;\r\n        this._measuredHeightSelf = measuredHeight;\r\n        var positionPrecision = this._positionPrecision;\r\n        this.maxLeftSelf = this.maxLeft;\r\n        this.maxRightSelf = this.maxRight;\r\n        this.maxTopSelf = this.maxTop;\r\n        this.maxBottomSelf = this.maxBottom;\r\n        // if a sprite is rotated or scaled, calculate measured size after transformations\r\n        if (this.rotation !== 0 || this.scale !== 1 || this.nonScaling) {\r\n            // not good to handleGlobalScale here.\r\n            if (this.nonScalingStroke) {\r\n                this.strokeWidth = this.strokeWidth;\r\n            }\r\n            var svg = this.paper.svg;\r\n            var matrix = svg.createSVGMatrix();\r\n            var rotation = this.rotation;\r\n            var scale = this.scale;\r\n            if (this.nonScaling) {\r\n                scale = this.scale / this.globalScale;\r\n            }\r\n            matrix.a = $math.cos(rotation) * scale;\r\n            matrix.c = -$math.sin(rotation) * scale;\r\n            matrix.e = 0;\r\n            matrix.b = $math.sin(rotation) * scale;\r\n            matrix.d = $math.cos(rotation) * scale;\r\n            matrix.f = 0;\r\n            var p1 = svg.createSVGPoint();\r\n            p1.x = left;\r\n            p1.y = top;\r\n            var p2 = svg.createSVGPoint();\r\n            p2.x = right;\r\n            p2.y = top;\r\n            var p3 = svg.createSVGPoint();\r\n            p3.x = right;\r\n            p3.y = bottom;\r\n            var p4 = svg.createSVGPoint();\r\n            p4.x = left;\r\n            p4.y = bottom;\r\n            var pt1 = p1.matrixTransform(matrix);\r\n            var pt2 = p2.matrixTransform(matrix);\r\n            var pt3 = p3.matrixTransform(matrix);\r\n            var pt4 = p4.matrixTransform(matrix);\r\n            left = Math.min(pt1.x, pt2.x, pt3.x, pt4.x);\r\n            right = Math.max(pt1.x, pt2.x, pt3.x, pt4.x);\r\n            top = Math.min(pt1.y, pt2.y, pt3.y, pt4.y);\r\n            bottom = Math.max(pt1.y, pt2.y, pt3.y, pt4.y);\r\n            measuredWidth = right - left;\r\n            measuredHeight = bottom - top;\r\n            this.maxLeft = $math.round(left, positionPrecision, true);\r\n            this.maxRight = $math.round(right, positionPrecision, true);\r\n            this.maxTop = $math.round(top, positionPrecision, true);\r\n            this.maxBottom = $math.round(bottom, positionPrecision, true);\r\n        }\r\n        this._measuredWidth = $math.round(measuredWidth, positionPrecision, true);\r\n        this._measuredHeight = $math.round(measuredHeight, positionPrecision, true);\r\n        // dispatch event\r\n        if (this._measuredWidth != this._prevMeasuredWidth || this._measuredHeight != this._prevMeasuredHeight) {\r\n            this._prevMeasuredHeight = this._measuredHeight;\r\n            this._prevMeasuredWidth = this._measuredWidth;\r\n            // TODO clear existing sizechanged dispatches ?\r\n            this.dispatch(\"sizechanged\");\r\n            if ((this.isHover || this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") && this.tooltip && this.tooltip.visible && ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML))) {\r\n                this.updateTooltipPosition();\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Insert this element before sibling element.\r\n     *\r\n     * @param sprite  Target element\r\n     * @return This element\r\n     */\r\n    Sprite.prototype.insertBefore = function (sprite) {\r\n        var parent = this._parent;\r\n        if (parent) {\r\n            var index = parent.children.indexOf(sprite);\r\n            if (index !== -1) {\r\n                parent.children.moveValue(this, index);\r\n                parent.sortChildren();\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Insert this element after sibling element.\r\n     *\r\n     * @param sprite  Target element\r\n     * @return This element\r\n     */\r\n    Sprite.prototype.insertAfter = function (sprite) {\r\n        var parent = this._parent;\r\n        if (parent) {\r\n            var index = parent.children.indexOf(sprite);\r\n            if (index !== -1) {\r\n                parent.children.moveValue(this, index + 1);\r\n                parent.sortChildren();\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Removes the main SVG element.\r\n     *\r\n     * This does not destroy the whole Sprite element. To do that use\r\n     * `dispose()` instead.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.removeElement = function () {\r\n        // remove visual element\r\n        if (this._element) {\r\n            this.removeDispose(this._element);\r\n            this._element = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Returns relative (percent) value of the X coordindate within this element.\r\n     *\r\n     * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n     * as relative value.\r\n     *\r\n     * @param value  Absolute or relative X coordinate\r\n     * @return Relative value\r\n     */\r\n    Sprite.prototype.getRelativeX = function (value) {\r\n        if (value instanceof Percent) {\r\n            return value.value;\r\n        }\r\n        else if (this._parent) {\r\n            return value / this._parent.innerWidth;\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Returns relative (percent) value of the Y coordindate within this element.\r\n     *\r\n     * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n     * as relative value.\r\n     *\r\n     * @param value  Absolute or relative Y coordinate\r\n     * @return Relative value\r\n     */\r\n    Sprite.prototype.getRelativeY = function (value) {\r\n        if (value instanceof Percent) {\r\n            return value.value;\r\n        }\r\n        else if (this._parent) {\r\n            return value / this._parent.innerHeight;\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Returns an X coordinate in pixel within the element.\r\n     *\r\n     * If number is passed in as parameter, the same number will be returned\r\n     * back.\r\n     *\r\n     * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n     *\r\n     * @param value  Absolute or relative X coordinate\r\n     * @return X coordinate in pixels\r\n     */\r\n    Sprite.prototype.getPixelX = function (value) {\r\n        // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\r\n        // all the time and this would result chain of the same actions and will slow down the system a lot\r\n        var pixel = 0;\r\n        if ($type.isNumber(value)) {\r\n            pixel = value;\r\n        }\r\n        else if (value instanceof Percent) {\r\n            var relative = value.value;\r\n            if (this._parent) {\r\n                pixel = $math.round(this._parent.innerWidth * relative, this._positionPrecision, true);\r\n            }\r\n        }\r\n        return pixel;\r\n    };\r\n    /**\r\n     * Returns an Y coordinate in pixel within the element.\r\n     *\r\n     * If number is passed in as parameter, the same number will be returned\r\n     * back.\r\n     *\r\n     * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n     *\r\n     * @param value  Absolute or relative Y coordinate\r\n     * @return Y coordinate in pixels\r\n     */\r\n    Sprite.prototype.getPixelY = function (value) {\r\n        // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\r\n        // all the time and this would result chain of the same actions and will slow down the system a lot\r\n        var pixel = 0;\r\n        if ($type.isNumber(value)) {\r\n            pixel = value;\r\n        }\r\n        else if (value instanceof Percent) {\r\n            var relative = value.value;\r\n            if (this._parent) {\r\n                pixel = $math.round(this._parent.innerHeight * relative, this._positionPrecision, true);\r\n            }\r\n        }\r\n        return pixel;\r\n    };\r\n    /**\r\n     * Moves the element to a specified coordinates.\r\n     *\r\n     * Using this method is preferred method of moving element, as it saves some\r\n     * CPU processing power over setting `x` and `y` properties separately.\r\n     *\r\n     * The method respects element's center settings. The element will be\r\n     * positioned so that `point` coordinates come in whatever \"center\" of the\r\n     * element is, as set in `horizontalCenter` and `verticalCenter`.\r\n     *\r\n     * Besides moving the element, you can also at the same time scale and\r\n     * rotate the element.\r\n     *\r\n     * @param point     New coordinates\r\n     * @param rotation  New rotation\r\n     * @param scale     New Scale\r\n     */\r\n    Sprite.prototype.moveTo = function (point, rotation, scale, isDragged) {\r\n        if (this.isDragged && !isDragged) {\r\n            return;\r\n        }\r\n        if (point) {\r\n            if ($type.isNumber(point.x)) {\r\n                this.setPropertyValue(\"x\", $math.round(point.x, this._positionPrecision, true));\r\n            }\r\n            if ($type.isNumber(point.y)) {\r\n                this.setPropertyValue(\"y\", $math.round(point.y, this._positionPrecision, true));\r\n            }\r\n        }\r\n        if ($type.isNumber(rotation)) {\r\n            this.rotation = rotation;\r\n        }\r\n        if ($type.isNumber(scale)) {\r\n            this.scale = scale;\r\n        }\r\n        // must leave this\r\n        this.invalidatePosition();\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"mask\", {\r\n        /**\r\n         * Returns [[Sprite]] element currently used as mask for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return A [[Sprite]] to use as mask\r\n         */\r\n        get: function () {\r\n            if (!this._adapterO) {\r\n                return this._mask.get();\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"mask\", this._mask.get());\r\n            }\r\n        },\r\n        /**\r\n         * Sets another [[Sprite]] element as this elements mask.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param mask A [[Sprite]] to use as mask\r\n         */\r\n        set: function (mask) {\r\n            var _this = this;\r\n            if (this._mask.get() !== mask) {\r\n                // this is good\r\n                if (mask) {\r\n                    this.createClipPath();\r\n                    if (!(mask instanceof Container)) {\r\n                        mask.isMeasured = false;\r\n                        if (mask.element) {\r\n                            this._clipElement = mask.element;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this._clipElement = this.paper.add(\"rect\");\r\n                    }\r\n                    if (this._clipElement) {\r\n                        this._clipPath.add(this._clipElement);\r\n                    }\r\n                    this._mask.set(mask, new MultiDisposer([\r\n                        //mask.addEventListener(SpriteEvent.TRANSFORMED, this.applyMask, false, this);\r\n                        mask.events.on(\"maxsizechanged\", function () { if (_this.inited) {\r\n                            _this.applyMask();\r\n                        } }, undefined, false),\r\n                        mask.events.on(\"validated\", this.applyMask, this, false),\r\n                        mask.events.on(\"positionchanged\", this.applyMask, this, false)\r\n                    ]));\r\n                    this.applyMask();\r\n                }\r\n                else {\r\n                    this._mask.reset();\r\n                    this.group.removeAttr(\"clip-path\");\r\n                    this.removeClipPath();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"maskRectangle\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Mask Rectangle\r\n         */\r\n        get: function () {\r\n            return this._maskRectangle;\r\n        },\r\n        // you can set IRectangle as a mask instead o a sprite. Note, the changes of the object won't be monitored\r\n        /**\r\n         * Instead of creating a [[Sprite]] for mask, you can just use a\r\n         * [[Rectangle]] by setting this accessor.\r\n         *\r\n         * Please note that the element will not monitor any changes to the mask\r\n         * rectangle.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param rect Mask Rectangle\r\n         */\r\n        set: function (rect) {\r\n            if (rect) {\r\n                this.createClipPath();\r\n                if (!this._clipElement) {\r\n                    this._clipElement = this.paper.add(\"rect\");\r\n                    this._clipPath.add(this._clipElement);\r\n                }\r\n                this._clipElement.attr({ \"width\": rect.width, \"height\": rect.height });\r\n            }\r\n            else {\r\n                this.removeClipPath();\r\n                this._clipElement = undefined;\r\n            }\r\n            this._maskRectangle = rect;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isMeasured\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Was element already measured?\r\n         */\r\n        get: function () {\r\n            return this._isMeasured;\r\n        },\r\n        /**\r\n         * Indicates if this element was already measured.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Was element already measured?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (!value) {\r\n                this._measuredWidth = 0;\r\n                this._measuredHeight = 0;\r\n                //this._pixelHeight = 0;\r\n                //this._pixelWidth = 0;\r\n            }\r\n            if (this._isMeasured != value) {\r\n                this._isMeasured = value;\r\n                this.invalidatePosition();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks if the this element has any of its parts overlapping with another\r\n     * element.\r\n     *\r\n     * @todo Description (review)\r\n     * @param sprite  Second element to test again\r\n     * @return Overlapping?\r\n     */\r\n    Sprite.prototype.hitTest = function (sprite) {\r\n        // validate, otherwise we will not know measuredWidth and measuredHeight\r\n        if (this.invalid) {\r\n            this.validate();\r\n        }\r\n        if (sprite.invalid) {\r\n            sprite.validate();\r\n        }\r\n        var ax1 = this.pixelX + this.maxLeft;\r\n        var ay1 = this.pixelY + this.maxTop;\r\n        var ax2 = ax1 + this.maxRight;\r\n        var ay2 = ay1 + this.maxBottom;\r\n        var bx1 = sprite.pixelX + sprite.maxLeft;\r\n        var by1 = sprite.pixelY + sprite.maxTop;\r\n        var bx2 = bx1 + sprite.maxRight;\r\n        var by2 = by1 + sprite.maxBottom;\r\n        return !(bx1 > ax2 || bx2 < ax1 || by1 > ay2 || by2 < ay1);\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"inited\", {\r\n        /**\r\n         * ==========================================================================\r\n         * STATE-RELATED\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns `true` if Sprite has already finished initializing.\r\n         *\r\n         * @return Initialized?\r\n         */\r\n        get: function () {\r\n            return this._inited;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns `true` if Sprite has already finished initializing and is ready.\r\n     *\r\n     * If this object is a [[Container]] it will wait for all of its children\r\n     * are ready before becoming ready itself and firing a `\"ready\"` event.\r\n     *\r\n     * @return is ready?\r\n     */\r\n    Sprite.prototype.isReady = function () {\r\n        return this._ready;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"states\", {\r\n        /**\r\n         * Returns a collection of element's available [[SpriteState]] entries.\r\n         *\r\n         * @see {@link SpriteState}\r\n         * @return States\r\n         */\r\n        get: function () {\r\n            if (!this._states) {\r\n                var state = new SpriteState();\r\n                // works\r\n                this._states = new DictionaryTemplate(state);\r\n                // TODO what about removeKey ?\r\n                this._disposers.push(this._states.events.on(\"insertKey\", this.processState, this, false));\r\n                this._disposers.push(this._states.events.on(\"setKey\", this.processState, this, false));\r\n                this._disposers.push(new DictionaryDisposer(this._states));\r\n                this._disposers.push(state);\r\n            }\r\n            return this._states;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"hiddenState\", {\r\n        /**\r\n         * Returns a [[SpriteState]] object for \"hidden\" state.\r\n         *\r\n         * This is a shortcut to `this.states.getKey(\"hidden\")`.\r\n         *\r\n         * @return Hidden state\r\n         */\r\n        get: function () {\r\n            if (!this.states.getKey(\"hidden\")) {\r\n                var hiddenState = this.states.create(\"hidden\");\r\n                hiddenState.properties.opacity = 0;\r\n                hiddenState.properties.visible = false;\r\n            }\r\n            return this.states.getKey(\"hidden\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"defaultState\", {\r\n        /**\r\n         * Returns a [[SpriteState]] object for \"default\" state.\r\n         *\r\n         * This is a shortcut to `this.states.getKey(\"default\")`.\r\n         *\r\n         * @return Hidden state\r\n         */\r\n        get: function () {\r\n            if (!this.states.getKey(\"default\")) {\r\n                var defaultState = this.states.create(\"default\");\r\n                defaultState.properties.opacity = 1;\r\n            }\r\n            return this.states.getKey(\"default\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks if some key states are defined and updates Sprite properties\r\n     * accordingly.\r\n     *\r\n     * For example if there's a state \"down\" defined for Sprite, we automatically\r\n     * make it \"clickable\".\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event An event which caused state list update\r\n     */\r\n    Sprite.prototype.processState = function (event) {\r\n        var state = event.newValue;\r\n        state.sprite = this;\r\n        state.name = event.key;\r\n        if (this.states.hasKey(\"hover\") || (this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText)))) {\r\n            this.hoverable = true;\r\n        }\r\n        if (this.states.hasKey(\"down\") || (this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText)))) {\r\n            this.clickable = true;\r\n        }\r\n        if (this.states.hasKey(\"focus\")) {\r\n            this.focusable = true;\r\n        }\r\n        // Propagate the new state to clones\r\n        if (this.applyOnClones) {\r\n            var clones = this.clones.values;\r\n            var length_1 = clones.length;\r\n            for (var i = 0; i < length_1; ++i) {\r\n                var clone = clones[i];\r\n                if (!clone.isDisposed()) {\r\n                    clone.states.setKey(state.name, state);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"animations\", {\r\n        /**\r\n         * Returns a list elements's animations currently being played.\r\n         *\r\n         * If the list has not been initialized it is created.\r\n         *\r\n         * @return List of animations\r\n         */\r\n        get: function () {\r\n            if (!this._animations) {\r\n                this._animations = [];\r\n                this._disposers.push(new AnimationDisposer(this._animations));\r\n            }\r\n            return this._animations;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts element's local coordinates to the coordinates within the main\r\n     * chart container.\r\n     *\r\n     * @param point  Local point\r\n     * @return Global point\r\n     */\r\n    Sprite.prototype.getSvgPoint = function (point) {\r\n        try {\r\n            // Calculate SVG point\r\n            var bbox = this.htmlContainer.getBoundingClientRect();\r\n            return {\r\n                \"x\": point.x - bbox.left,\r\n                \"y\": point.y - bbox.top\r\n            };\r\n        }\r\n        catch (e) {\r\n            return point;\r\n        }\r\n    };\r\n    /**\r\n     * Creates and starts an [[Animation]] with given `animationOptions`.\r\n     *\r\n     * @see {@link Animation} for additional information about available options\r\n     * @param animationOptions  Animation options\r\n     * @param duration          Duration in milliseconds\r\n     * @param easing            Easing function\r\n     * @return Animation instance\r\n     */\r\n    Sprite.prototype.animate = function (animationOptions, duration, easing) {\r\n        return new Animation(this, animationOptions, duration, easing).start();\r\n    };\r\n    /**\r\n     * Applies a [[SpriteState]] on this element.\r\n     *\r\n     * The first parameter can either be a name state or a [[SpriteState]]\r\n     * instance.\r\n     *\r\n     * When run, this method will apply SVG properties defined in a\r\n     * [[SpriteState]], but only those that are relevant to this particular\r\n     * element, i.e. are in the `properties` array.\r\n     *\r\n     * @see {@link SpriteState}\r\n     * @param value               A state - name key or instance\r\n     * @param transitionDuration  Duration of the transition between current and new state\r\n     * @param easing              An easing function\r\n     */\r\n    Sprite.prototype.setState = function (value, transitionDuration, easing) {\r\n        var state;\r\n        if (value instanceof SpriteState) {\r\n            this.states.setKey(value.name, value);\r\n            state = value;\r\n        }\r\n        else {\r\n            state = this.states.getKey(value);\r\n            if (!state) {\r\n                return;\r\n            }\r\n        }\r\n        // stop previous transition\r\n        // not good - foe expample, we are animating to some \"active\" state and in them middle \"hover\" state happens. then \"active\" stat won't be applied\r\n        //if (this._transition) {\r\n        //this._transition.stop();\r\n        //}\r\n        if (state.name == \"hover\") {\r\n            if (this.isHidden) {\r\n                return;\r\n            }\r\n            this.isHover = true;\r\n        }\r\n        if (state.name == \"hidden\") {\r\n            this.isHiding = true;\r\n        }\r\n        else {\r\n            if (!this.visible) {\r\n                this.setVisibility(state.properties.visible || this.defaultState.properties.visible);\r\n            }\r\n        }\r\n        if (state.name == \"active\") {\r\n            this.isActive = true;\r\n        }\r\n        // we do not set isActive = false here if it's not active, but container does that if setStateOnChildren = true\r\n        if (!$type.isNumber(transitionDuration)) {\r\n            transitionDuration = state.transitionDuration;\r\n        }\r\n        if (!$type.hasValue(easing)) {\r\n            easing = state.transitionEasing;\r\n        }\r\n        return this.transitTo(state, transitionDuration, easing);\r\n    };\r\n    /**\r\n     * Applies proper state based on the condition of the element. A condition is\r\n     * deducted in this order:\r\n     * * \"hover\" if Sprite has currently any pointers over it\r\n     * * \"down\" if Sprite has any pointers (touch or mouse) currently pressed over it\r\n     * * \"focus\" if Sprite has currently got focus (accessibility)\r\n     * * \"hidden\" if Sprite is currently hidden\r\n     *\r\n     * Returns an [[Animation]] object, which is handling gradual transition from\r\n     * current values of properties, to the new target state(s).\r\n     *\r\n     * @param duration  Duration for the animation (ms)\r\n     * @return [[Animation]] object which is handling the transition\r\n     */\r\n    Sprite.prototype.applyCurrentState = function (duration) {\r\n        //if (!this.isHidden) { // this was done for hover state not to take effect if \"hidden\" is actually visible, need to think about it.\r\n        var animation = this.setState(this.defaultState, duration);\r\n        if (this.isHover) {\r\n            animation = this.setState(\"hover\", duration);\r\n        }\r\n        if (this.isDown && this.interactions.downPointers.length) {\r\n            animation = this.setState(\"down\", duration);\r\n        }\r\n        this.isFocused = this.isFocused;\r\n        if (this.isActive) {\r\n            animation = this.setState(\"active\", duration);\r\n            if (this.isHover && this.states.hasKey(\"hoverActive\")) {\r\n                animation = this.setState(\"hoverActive\", duration);\r\n            }\r\n        }\r\n        return animation;\r\n        //}\r\n    };\r\n    /**\r\n     * Starts an [[Animation]] of the properties to specific values as they are\r\n     * set in `state`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param state     Target State\r\n     * @param duration  Duration in milliseconds\r\n     * @param easing    Easing function\r\n     * @return Transition Animation\r\n     */\r\n    Sprite.prototype.transitTo = function (state, duration, easing) {\r\n        var _this = this;\r\n        // Init\r\n        var options = [], propValues = state.allValues, transition;\r\n        // todo: do this for numeric/color properties only?\r\n        // @todo use state.getPropertyValue instead\r\n        $object.each(propValues, function (propertyName, finalValue) {\r\n            var currentValue = _this[propertyName];\r\n            // save current value to default state. this solves a big problem where values must be set both on sprite and default state\r\n            if (finalValue != currentValue && _this.defaultState.properties[propertyName] == undefined) {\r\n                _this.defaultState.properties[propertyName] = currentValue;\r\n            }\r\n            //if (finalValue != currentValue && $type.hasValue(finalValue)) {\r\n            if (finalValue != \"__unset\") {\r\n                var option = { from: currentValue, to: finalValue, property: propertyName };\r\n                options.push(option);\r\n            }\r\n        });\r\n        if (options.length > 0) {\r\n            transition = this.animate(options, duration, easing);\r\n            if (transition && !transition.isFinished()) {\r\n                // TODO should this use events.once ?\r\n                // TODO push onto _disposers array ?\r\n                this._disposers.push(transition.events.on(\"animationended\", function () {\r\n                    _this.dispatchImmediately(\"transitionended\");\r\n                }));\r\n            }\r\n            else {\r\n                this.dispatchImmediately(\"transitionended\");\r\n            }\r\n        }\r\n        // apply filters if set\r\n        if (state.filters.length > 0) {\r\n            var newFilters_1 = [];\r\n            // check for the same filters\r\n            $iter.each(state.filters.iterator(), function (stateFilter) {\r\n                var newFilter = stateFilter.clone();\r\n                newFilters_1.push(newFilter);\r\n                var animationOptions = [];\r\n                $iter.each(_this.filters.iterator(), function (currentFilter) {\r\n                    // if we have the same filters\r\n                    if (currentFilter.className == newFilter.className) {\r\n                        if (!$iter.contains(_this.defaultState.filters.iterator(), function (x) { return x.className === newFilter.className; })) {\r\n                            _this.defaultState.filters.push(currentFilter);\r\n                        }\r\n                        $object.each(newFilter.properties, function (propertyName, newValue) {\r\n                            var currentValue = currentFilter.properties[propertyName];\r\n                            // if values are not the same, push to animation options array\r\n                            if (currentValue != newValue) {\r\n                                animationOptions.push({ property: propertyName, from: currentValue, to: newValue });\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                // animate to new value\r\n                newFilter.animate(animationOptions, duration, easing);\r\n            });\r\n            this.filters.clear();\r\n            this.filters.pushAll(newFilters_1);\r\n        }\r\n        return transition;\r\n    };\r\n    /**\r\n     * Returns `true` if Sprite is currently transiting from one state/value to\r\n     * another.\r\n     *\r\n     * @return Is in transition?\r\n     */\r\n    Sprite.prototype.isInTransition = function () {\r\n        return this.animations.length > 0;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"isHover\", {\r\n        /**\r\n         * @return Is hovered?\r\n         */\r\n        get: function () {\r\n            if (this.isInteractive()) {\r\n                return this.interactions.isHover;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Indicates if this element has a mouse pointer currently hovering\r\n         * over it, or if it has any touch pointers pressed on it.\r\n         *\r\n         * You can force element to be \"hovered\" manually, by setting this property\r\n         * to `true`.\r\n         *\r\n         * @param value Is hovered?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (value !== this.isHover) {\r\n                if (this.isInteractive()) {\r\n                    this.interactions.isHover = value;\r\n                    if (value) {\r\n                        this.handleOver();\r\n                    }\r\n                    else {\r\n                        this.interactions.isRealHover = false;\r\n                        this.handleOut();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isDragged\", {\r\n        /**\r\n         * Returns indicator if this element is being dragged at the moment.\r\n         *\r\n         * @return Is dragged?\r\n         */\r\n        get: function () {\r\n            return this._isDragged;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isResized\", {\r\n        /**\r\n         * Returns indicator if this element is being resized at the moment.\r\n         *\r\n         * @return Is resized?\r\n         */\r\n        get: function () {\r\n            return this._isResized;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isDown\", {\r\n        /**\r\n         * @return Is down?\r\n         */\r\n        get: function () {\r\n            if (this.isInteractive()) {\r\n                return this.interactions.isDown;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Indicates if this element has any pointers (mouse or touch) pressing down\r\n         * on it.\r\n         *\r\n         * @param value Is down?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.isInteractive() && this.isDown != value) {\r\n                this.interactions.isDown = value;\r\n                if (value) {\r\n                    this.handleDown();\r\n                }\r\n                else {\r\n                    this.handleUp();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isFocused\", {\r\n        /**\r\n         * @return Is focused?\r\n         */\r\n        get: function () {\r\n            if (this.isInteractive()) {\r\n                return this.interactions.isFocused;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Indicates if this element is focused (possibly by tab navigation).\r\n         *\r\n         * @param value Is focused?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.focusable && this.isFocused != value) {\r\n                if (this.isInteractive()) {\r\n                    this.interactions.isFocused = value;\r\n                    if (value === true) {\r\n                        this.handleFocus();\r\n                    }\r\n                    else {\r\n                        this.handleBlur();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isActive\", {\r\n        /**\r\n         * @return Is active?\r\n         */\r\n        get: function () {\r\n            return this._isActive;\r\n        },\r\n        /**\r\n         * Indicates if this element is currently active (toggled on) or not\r\n         * (toggled off).\r\n         *\r\n         * @param value Is active?\r\n         */\r\n        set: function (value) {\r\n            this.setActive(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Sprite.prototype.setActive = function (value) {\r\n        value = $type.toBoolean(value);\r\n        if (this._isActive !== value) {\r\n            this._isActive = value;\r\n            if (value && this.states.hasKey(\"active\")) {\r\n                this.setState(\"active\");\r\n                if (this.isHover && this.states.hasKey(\"hoverActive\")) {\r\n                    this.setState(\"hoverActive\");\r\n                }\r\n            }\r\n            else {\r\n                this.applyCurrentState();\r\n            }\r\n            this.dispatchImmediately(\"toggled\");\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"disabled\", {\r\n        /**\r\n         * @return Disabled?\r\n         */\r\n        get: function () {\r\n            //if(this._internalDisabled){\r\n            //\treturn true;\r\n            //}\r\n            var current = this.getPropertyValue(\"disabled\");\r\n            if ($type.hasValue(current)) {\r\n                return current;\r\n            }\r\n            else {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.disabled;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.disabled;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Controls if element is disabled.\r\n         *\r\n         * A disabled element is hidden, and is removed from any processing, layout\r\n         * calculations, and generally treated as if it does not exist.\r\n         *\r\n         * The element itself is not destroyed, though. Setting this back to `false`,\r\n         * will \"resurrect\" the element.\r\n         *\r\n         * @param value  Disabled?\r\n         */\r\n        set: function (value) {\r\n            this.setDisabled(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Sprite.prototype.setDisabled = function (value) {\r\n        value = $type.toBoolean(value);\r\n        var current = this.getPropertyValue(\"disabled\");\r\n        if (current != value) {\r\n            this.setPropertyValue(\"disabled\", value, true);\r\n            if (value) {\r\n                this.parent = this._parent;\r\n                this.removeFromInvalids();\r\n                this.group.attr({ \"display\": \"none\" });\r\n                this.dispatch(\"disabled\");\r\n            }\r\n            else {\r\n                if (this._parent) {\r\n                    var group = this._parent.element;\r\n                    if (!group.hasChild(this.group)) {\r\n                        group.add(this.group);\r\n                    }\r\n                }\r\n                if (this instanceof Container) {\r\n                    this.deepInvalidate();\r\n                    if (this._background) {\r\n                        this._background.invalidate();\r\n                    }\r\n                }\r\n                else {\r\n                    this.invalidate();\r\n                }\r\n                if (!this.__disabled) {\r\n                    this.removeSVGAttribute(\"display\");\r\n                }\r\n                this.dispatch(\"enabled\");\r\n            }\r\n            this.dispatch(\"transformed\");\r\n            system.requestFrame();\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"__disabled\", {\r\n        /**\r\n         * @ignore\r\n         * @return Disabled?\r\n         */\r\n        get: function () {\r\n            return this._internalDisabled;\r\n        },\r\n        /**\r\n         * Internal disable method.\r\n         *\r\n         * Do not use it for disabling elements. Use `disabled` accessor instead.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Disabled?\r\n         */\r\n        set: function (value) {\r\n            if (this._internalDisabled != value) {\r\n                this._internalDisabled = value;\r\n                this._updateDisabled = true;\r\n                this.invalidatePosition(); // better use this instead of invalidate()\r\n                if (!value) {\r\n                    this.invalidate();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"numberFormatter\", {\r\n        /**\r\n         * @return A [[NumberFormatter]] instance to be used\r\n         */\r\n        get: function () {\r\n            if (this._numberFormatter) {\r\n                return this._numberFormatter;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.numberFormatter;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.numberFormatter;\r\n            }\r\n            this._numberFormatter = new NumberFormatter();\r\n            this._numberFormatter.language = this.language;\r\n            return this.numberFormatter;\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * FORMATTERS AND OTHER EXTERNAL HELPERS\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * A [[NumberFormatter]] instance.\r\n         *\r\n         * This is used to format numbers.\r\n         *\r\n         * ```TypeScript\r\n         * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"numberFormatter\": {\r\n         *     \"numberFormat\": \"#,###.#####\"\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * You can set a separate instance of formatter for each\r\n         * individual element. However that would be unnecessary overhead as\r\n         * all elements would automatically inherit formatter from their parents,\r\n         * all the way up to the chart itself.\r\n         *\r\n         *\r\n         * @see {@link NumberFormatter} for more info on formatting numbers\r\n         * @param value  An instance of NumberFormatter\r\n         */\r\n        set: function (value) {\r\n            this._numberFormatter = value;\r\n            this._numberFormatter.language = this.language;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"dateFormatter\", {\r\n        /**\r\n         * @return An instance of DateFormatter\r\n         */\r\n        get: function () {\r\n            if (this._dateFormatter) {\r\n                return this._dateFormatter;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.dateFormatter;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.dateFormatter;\r\n            }\r\n            this._dateFormatter = new DateFormatter();\r\n            this._dateFormatter.language = this.language;\r\n            return this.dateFormatter;\r\n        },\r\n        /**\r\n         * A [[DateFormatter]] instance.\r\n         *\r\n         * This is used to format dates, e.g. on a date axes, balloons, etc.\r\n         *\r\n         * ```TypeScript\r\n         * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"dateFormatter\": {\r\n         *     \"dateFormat\": \"yyyy-MM-dd\"\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * You can set a separate instance of formatter for each\r\n         * individual element. However that would be unnecessary overhead as\r\n         * all elements would automatically inherit formatter from their parents,\r\n         * all the way up to the chart itself.\r\n         *\r\n         * @see {@link DateFormatter} for more info on dates formatting\r\n         * @param value  An instance of DateFormatter\r\n         */\r\n        set: function (value) {\r\n            this._dateFormatter = value;\r\n            this._dateFormatter.language = this.language;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"durationFormatter\", {\r\n        /**\r\n         * @return An instance of DurationFormatter\r\n         */\r\n        get: function () {\r\n            if (this._durationFormatter) {\r\n                return this._durationFormatter;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.durationFormatter;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.durationFormatter;\r\n            }\r\n            this._durationFormatter = new DurationFormatter();\r\n            this._durationFormatter.language = this.language;\r\n            return this.durationFormatter;\r\n        },\r\n        /**\r\n         * A [[DurationFormatter]] instance.\r\n         *\r\n         * This is used to format numbers as durations, e.g. on a value axes.\r\n         *\r\n         * You can set a separate instance of formatter for each\r\n         * individual element. However that would be unnecessary overhead as\r\n         * all elements would automatically inherit formatter from their parents,\r\n         * all the way up to the chart itself.\r\n         *\r\n         * @see {@link DurationFormatter} for more info on durations\r\n         * @param value  An instance of DurationFormatter\r\n         */\r\n        set: function (value) {\r\n            this._durationFormatter = value;\r\n            this._durationFormatter.language = this.language;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"language\", {\r\n        /**\r\n         * @return An instance of Language\r\n         */\r\n        get: function () {\r\n            var language = this._language.get();\r\n            if (language) {\r\n                return language;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.language;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.language;\r\n            }\r\n            language = new Language();\r\n            this.language = language;\r\n            return language;\r\n        },\r\n        /**\r\n         * A [[Language]] instance to use for translations.\r\n         *\r\n         * Normally it is enough to set language for the top-most element - chart.\r\n         *\r\n         * All other element child elements will automatically re-use that language\r\n         * object.\r\n         *\r\n         * @param value  An instance of Language\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            if (this._language.get() !== value) {\r\n                this._language.set(value, value.events.on(\"localechanged\", function (ev) {\r\n                    if (_this._numberFormatter) {\r\n                        _this._numberFormatter.language = _this.language;\r\n                    }\r\n                    if (_this._dateFormatter) {\r\n                        _this._dateFormatter.language = _this.language;\r\n                    }\r\n                    if (_this._durationFormatter) {\r\n                        _this._durationFormatter.language = _this.language;\r\n                    }\r\n                    if (_this._exporting.get()) {\r\n                        var exporting = _this._exporting.get();\r\n                        exporting.numberFormatter.language = _this.language;\r\n                        exporting.dateFormatter.language = _this.language;\r\n                        exporting.durationFormatter.language = _this.language;\r\n                        exporting.language = _this.language;\r\n                    }\r\n                    if (_this instanceof Container) {\r\n                        _this.deepInvalidate();\r\n                    }\r\n                }));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * ==========================================================================\r\n     * DATA-RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Parses the string for meta tags `{tag}` and replaces them with a real\r\n     * value. Supports straight up tags referring to the field in data, i.e.\r\n     * `{value}` or tags with additional formatting info. E.g.:\r\n     *\r\n     * ```Text\r\n     * {myfield.formatDate(\"yyyy-MM-dd\")}\r\n     * {myfield.formatDate()}\r\n     * {myfield.formatNumber(\"#,####.00\")}\r\n     * {myfield.formatNumber()}\r\n     * {myField.formatDuration(\"mm:ss\")}\r\n     * ```\r\n     *\r\n     * Etc.\r\n     *\r\n     * This method Will automatically detect and use proper formatter for the\r\n     * value.\r\n     *\r\n     * The source value will be looked up in various places: (in order)\r\n     * * Sprite's own `dataItem`\r\n     * * Sprite's properties\r\n     * * Parent's `dataItem`\r\n     * * Parent's properties\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param string            A string to format\r\n     * @param dataItem          DataItem\r\n     * @return Formatted string\r\n     */\r\n    Sprite.prototype.populateString = function (string, dataItem) {\r\n        if ($type.hasValue(string)) {\r\n            string = $type.castString(string);\r\n            string = getTextFormatter().escape(string);\r\n            var tags = string.match(/\\{([^}]+)\\}/g);\r\n            var i = void 0;\r\n            if (tags) {\r\n                for (i = 0; i < tags.length; i++) {\r\n                    var tag = tags[i].replace(/\\{([^}]+)\\}/, \"$1\");\r\n                    var value = this.getTagValue(tag, \"\", dataItem);\r\n                    if (!$type.hasValue(value)) {\r\n                        value = \"\";\r\n                    }\r\n                    string = string.split(tags[i]).join(value);\r\n                }\r\n            }\r\n            string = getTextFormatter().unescape(string);\r\n        }\r\n        else {\r\n            string = \"\";\r\n        }\r\n        if (!this._adapterO) {\r\n            return string;\r\n        }\r\n        else {\r\n            return this._adapterO.apply(\"populateString\", string);\r\n        }\r\n    };\r\n    /**\r\n     * Gets the value from data item and formats it according to specified format.\r\n     *\r\n     * If `format` is specified, it will use its contents to choose formatter for\r\n     * the value. Otherwise it will select formatter accordingly to actual value\r\n     * type.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Ability to force certain formatter on known numeric and date values\r\n     * @see {@link NumberFormatter}\r\n     * @see {@link DateFormatter}\r\n     * @see {@link DurationFormatter}\r\n     * @param tagName           Tag name to replace\r\n     * @param format            Format to use\r\n     * @param dataItem          DataItem\r\n     * @return Formatted value\r\n     */\r\n    Sprite.prototype.getTagValue = function (tagName, format, dataItem) {\r\n        var value;\r\n        if (!$type.hasValue(dataItem)) {\r\n            dataItem = this.dataItem;\r\n        }\r\n        // Parse parts\r\n        var parts = [];\r\n        var reg = /([^.]+)\\(([^)]*)\\)|([^.]+)/g;\r\n        ;\r\n        var matches;\r\n        while (true) {\r\n            matches = reg.exec(tagName);\r\n            if (matches === null) {\r\n                break;\r\n            }\r\n            if (matches[3]) {\r\n                // Simple property\r\n                parts.push({\r\n                    prop: matches[3]\r\n                });\r\n            }\r\n            else {\r\n                // Method\r\n                // Parse parameters\r\n                var params = [];\r\n                if ($utils.trim(matches[2]) != \"\") {\r\n                    var reg2 = /'([^']*)'|\"([^\"]*)\"|([0-9\\-]+)/g;\r\n                    var matches2 = void 0;\r\n                    while (true) {\r\n                        matches2 = reg2.exec(matches[2]);\r\n                        if (matches2 === null) {\r\n                            break;\r\n                        }\r\n                        params.push(matches2[1] || matches2[2] || matches2[3]);\r\n                    }\r\n                }\r\n                parts.push({\r\n                    method: matches[1],\r\n                    params: params\r\n                });\r\n            }\r\n        }\r\n        // Check if we can retrieve the value from data item\r\n        if (dataItem) {\r\n            // Check values\r\n            value = this.getTagValueFromObject(parts, dataItem.values);\r\n            // Check properties\r\n            if (!$type.hasValue(value) || $type.isObject(value)) { // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and won't get to the dateX date.\r\n                value = this.getTagValueFromObject(parts, dataItem);\r\n            }\r\n            // Check data context\r\n            var dataContext = dataItem.dataContext;\r\n            if (!$type.hasValue(value) && dataContext) {\r\n                value = this.getTagValueFromObject(parts, dataItem.dataContext);\r\n                // Maybe it's a literal dot-separated name of the key in dataContext?\r\n                if (!$type.hasValue(value)) {\r\n                    value = this.getTagValueFromObject([{\r\n                            prop: tagName\r\n                        }], dataContext);\r\n                }\r\n                // scond data context level sometimes exist (tree map)\r\n                if (!$type.hasValue(value) && dataContext.dataContext) {\r\n                    value = this.getTagValueFromObject(parts, dataContext.dataContext);\r\n                }\r\n            }\r\n            // Check component's data item\r\n            if (!$type.hasValue(value) && dataItem.component && dataItem.component.dataItem !== dataItem) {\r\n                value = dataItem.component.getTagValue(tagName, format);\r\n            }\r\n        }\r\n        // Check sprite's properties\r\n        if (!$type.hasValue(value)) {\r\n            value = this.getTagValueFromObject(parts, this.populateStringFrom || this);\r\n        }\r\n        // Finally, check the parent\r\n        if (!$type.hasValue(value) && this._parent) {\r\n            value = this._parent.getTagValue(tagName, format);\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Tries to retrieve values from properties of any object, then applies\r\n     * proper formatting to it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (improve)\r\n     * @param parts   Properties ant methods to access\r\n     * @param object  Source object\r\n     * @param format  A specific format to apply\r\n     * @return Formatted value\r\n     */\r\n    Sprite.prototype.getTagValueFromObject = function (parts, object, format) {\r\n        var current = object;\r\n        var formatApplied = false;\r\n        for (var i = 0, len = parts.length; i < len; i++) {\r\n            var part = parts[i];\r\n            if (part.prop) {\r\n                // Regular property\r\n                current = current[part.prop];\r\n                if (!$type.hasValue(current)) {\r\n                    // Not set, return undefined\r\n                    return;\r\n                }\r\n            }\r\n            else {\r\n                // Method\r\n                switch (part.method) {\r\n                    case \"formatNumber\":\r\n                        var numberValue = $utils.anyToNumber(current);\r\n                        if ($type.hasValue(numberValue)) {\r\n                            current = this.numberFormatter.format(numberValue, format || part.params[0] || undefined);\r\n                            formatApplied = true;\r\n                        }\r\n                        break;\r\n                    case \"formatDate\":\r\n                        var dateValue = void 0;\r\n                        if ($type.isString(current)) {\r\n                            dateValue = this.dateFormatter.parse(current);\r\n                        }\r\n                        else {\r\n                            dateValue = $utils.anyToDate(current);\r\n                        }\r\n                        if (!$type.isDate(dateValue) || $type.isNaN(dateValue.getTime())) {\r\n                            // Was not able to get date out of value, quitting and letting\r\n                            // calling method try another value\r\n                            return;\r\n                        }\r\n                        if ($type.hasValue(dateValue)) {\r\n                            current = this.dateFormatter.format(dateValue, format || part.params[0] || undefined);\r\n                            formatApplied = true;\r\n                        }\r\n                        break;\r\n                    case \"formatDuration\":\r\n                        var durationValue = $utils.anyToNumber(current);\r\n                        if ($type.hasValue(durationValue)) {\r\n                            current = this.durationFormatter.format(durationValue, format || part.params[0] || undefined, part.params[1] || undefined);\r\n                            formatApplied = true;\r\n                        }\r\n                        break;\r\n                    case \"urlEncode\":\r\n                    case \"encodeURIComponent\":\r\n                        current = encodeURIComponent(current);\r\n                        break;\r\n                    default:\r\n                        if (current[part.method]) {\r\n                            current[part.method].apply(this, part.params);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        // Apply default format if it wasn't applied explicitly\r\n        if (!formatApplied) {\r\n            var formatParts = [{\r\n                    method: \"\",\r\n                    params: format\r\n                }];\r\n            if (!$type.hasValue(format)) {\r\n                // Format is not set\r\n                // Determine from the type of the value\r\n                if ($type.isNumber(current)) {\r\n                    formatParts[0].method = \"formatNumber\";\r\n                    formatParts[0].params = \"\";\r\n                }\r\n                else if ($type.isDate(current)) {\r\n                    formatParts[0].method = \"formatDate\";\r\n                    formatParts[0].params = \"\";\r\n                }\r\n            }\r\n            else {\r\n                // Format set\r\n                // Try to determine formatter based on the format\r\n                var formatterType = $utils.getFormat(format);\r\n                // format\r\n                if (formatterType === $strings.NUMBER) {\r\n                    formatParts[0].method = \"formatNumber\";\r\n                }\r\n                else if (formatterType === $strings.DATE) {\r\n                    formatParts[0].method = \"formatDate\";\r\n                }\r\n                else if (formatterType === $strings.DURATION) {\r\n                    formatParts[0].method = \"formatDuration\";\r\n                }\r\n            }\r\n            // Apply format\r\n            if (formatParts[0].method) {\r\n                current = this.getTagValueFromObject(formatParts, current);\r\n            }\r\n        }\r\n        return current;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"dataItem\", {\r\n        /**\r\n         * @return [[DataItem]]\r\n         */\r\n        get: function () {\r\n            if (!this._dataItem) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.dataItem;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.dataItem;\r\n                }\r\n            }\r\n            return this._dataItem;\r\n        },\r\n        /**\r\n         * A [[DataItem]] to use as element's data source.\r\n         *\r\n         * @todo Review type\r\n         * @param dataItem  DataItem\r\n         */\r\n        set: function (dataItem) {\r\n            //an not use this[\"_dataItem\"] here, as we return parent data item if this sprite doesn't have one.\r\n            // @todo:think about it\r\n            this.setDataItem(dataItem);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets currently used [[DataItem]].\r\n     *\r\n     * If the element has also `configField` set, it will also look for any\r\n     * config in DataItem's data context to apply to this element.\r\n     *\r\n     * @param dataItem DataItem\r\n     */\r\n    Sprite.prototype.setDataItem = function (dataItem) {\r\n        var _this = this;\r\n        if (this._dataItem != dataItem) {\r\n            this._dataItem = dataItem;\r\n            if (dataItem) {\r\n                if (this.configField) {\r\n                    var dataContext_1 = dataItem.dataContext;\r\n                    if (dataContext_1) {\r\n                        this.config = dataContext_1[this.configField];\r\n                        if (!this.config && dataContext_1.dataContext) {\r\n                            this.config = dataContext_1.dataContext[this.configField];\r\n                        }\r\n                    }\r\n                }\r\n                var dataContext_2 = dataItem.dataContext;\r\n                if (dataContext_2) {\r\n                    var dataContext2_1 = dataContext_2.dataContext;\r\n                    $object.each(this.propertyFields, function (propertyName, fieldValue) {\r\n                        if ($type.hasValue(dataContext_2[fieldValue])) {\r\n                            var anyThis = _this;\r\n                            anyThis[propertyName] = dataContext_2[fieldValue];\r\n                        }\r\n                        else {\r\n                            if (dataContext2_1) {\r\n                                var value = dataContext2_1[fieldValue];\r\n                                if ($type.hasValue(value)) {\r\n                                    var anyThis = _this;\r\n                                    anyThis[propertyName] = value;\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            this.invalidate();\r\n        }\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * PROPERTY UTILITIES\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Returns element's property value.\r\n     *\r\n     * Will check if there are any bindings with [[DataItem]].\r\n     *\r\n     * Will also apply any adapters bound to `propertyName`.\r\n     *\r\n     * @param propertyName  Property name\r\n     * @return Property value\r\n     */\r\n    Sprite.prototype.getPropertyValue = function (propertyName) {\r\n        var propValue = this.properties[propertyName];\r\n        // Apply adapter\r\n        if (!this._isTemplate) {\r\n            if (this._adapterO) {\r\n                propValue = this._adapterO.apply(propertyName, propValue);\r\n            }\r\n            propValue = globalAdapter.applyAll(this, propertyName, propValue);\r\n        }\r\n        return propValue;\r\n    };\r\n    Sprite.prototype.setColorProperty = function (property, value, invalidate) {\r\n        var currentValue = this.properties[property];\r\n        if (value instanceof Color && currentValue instanceof Color && value.toString() == currentValue.toString()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return this.setPropertyValue(property, value, invalidate);\r\n        }\r\n    };\r\n    Sprite.prototype.setPercentProperty = function (property, value, invalidate, transform, precision, floor) {\r\n        value = $type.toNumberOrPercent(value);\r\n        if ($type.isNumber(value)) {\r\n            if ($type.isNumber(precision)) {\r\n                value = $math.round(value, precision, floor);\r\n            }\r\n            return this.setPropertyValue(property, value, invalidate, transform);\r\n        }\r\n        else {\r\n            var currentValue = this.properties[property];\r\n            if (value instanceof Percent && currentValue instanceof Percent && value.value == currentValue.value) {\r\n                return false;\r\n            }\r\n            else {\r\n                return this.setPropertyValue(property, value, invalidate, transform);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets elements's property value. Will also propagate the same property value\r\n     * on all element's clones.\r\n     *\r\n     * @param property    Property\r\n     * @param value       Value\r\n     * @param invalidate  Should the sprite be invalidated, cause it's re-rendering\r\n     * @param transform   Re-apply positioning of the element\r\n     * @return Did the value change? It will return `true` if the new value and the old value of the property are not the same\r\n     * @todo Review propagation to clones. Right now we simply check if clone is disposed before setting the same property on it. It's better to remove from clone list altogether.\r\n     */\r\n    Sprite.prototype.setPropertyValue = function (property, value, invalidate, transform) {\r\n        if (this.properties[property] !== value && !this.isDisposed()) {\r\n            this.properties[property] = value;\r\n            if (this.events.isEnabled(\"propertychanged\")) {\r\n                var event_1 = {\r\n                    type: \"propertychanged\",\r\n                    target: this,\r\n                    property: property\r\n                };\r\n                this.events.dispatchImmediately(\"propertychanged\", event_1);\r\n            }\r\n            if (invalidate) {\r\n                this.invalidate();\r\n            }\r\n            if (transform) {\r\n                this.invalidatePosition();\r\n            }\r\n            if (this.applyOnClones) {\r\n                var clones = this.clones.values;\r\n                var length_2 = clones.length;\r\n                for (var i = 0; i < length_2; ++i) {\r\n                    var clone = clones[i];\r\n                    if (!clone.isDisposed()) {\r\n                        //(<Sprite>clone).setPropertyValue(<any>property, value, invalidate, transform);\r\n                        clone[property] = value;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Sprite.prototype.bind = function (property, source, bindToProperty, modifier) {\r\n        var _this = this;\r\n        if (bindToProperty === void 0) { bindToProperty = property; }\r\n        if ($type.hasValue(this._bindings[property])) {\r\n            this._bindings[property].dispose();\r\n        }\r\n        // set current value\r\n        this[property] = source[bindToProperty];\r\n        //source.addEventListener(AMEvent.PROPERTY_CHANGED, this.handleBindings, false, this);\r\n        this._bindings[property] = source.events.on(\"propertychanged\", function (event) {\r\n            if (event.property === bindToProperty) {\r\n                var value = source[bindToProperty];\r\n                if (modifier) {\r\n                    value = modifier(value);\r\n                }\r\n                // TODO clonesById\r\n                _this[property] = value;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Sets up and obeserver function to monitor changes in particular property\r\n     * or properties.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param property  Element's property name\r\n     * @param listener  Handler function\r\n     * @param context   Context for handler function\r\n     * @returns Event Disposer\r\n     */\r\n    Sprite.prototype.observe = function (property, listener, context, shouldClone) {\r\n        var _this = this;\r\n        return new MultiDisposer($array.map($array.toArray(property), function (prop) {\r\n            return _this.events.on(\"propertychanged\", function (e) {\r\n                if (e.property === prop) {\r\n                    listener.call(context, e);\r\n                }\r\n            }, context, shouldClone);\r\n        }));\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * ACCESSIBILITY-RELATED PROPERTIES\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Applies accessibility to the SVG element.\r\n     *\r\n     * Adds `<title>` and `<description>` elements as well as `aria-labelledby`\r\n     * and `role` properties.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.applyAccessibility = function () {\r\n        // Check if we need to add label and description\r\n        var title = this.readerTitle, description = this.readerDescription, role = this.role, hidden = this.readerHidden, checked = this.readerChecked, controls = this.readerControls, live = this.readerLive, orientation = this.readerOrientation, valueNow = this.readerValueNow, valueText = this.readerValueText;\r\n        // Init label/describe ids\r\n        var labelledByIds = [];\r\n        var describedByIds = [];\r\n        var labelledBy = this.readerLabelledBy;\r\n        if (labelledBy) {\r\n            labelledByIds.push(labelledBy);\r\n        }\r\n        var describedBy = this.readerDescribedBy;\r\n        if (describedBy) {\r\n            describedByIds.push(describedBy);\r\n        }\r\n        // Add arial-label attribute if present\r\n        // If not readerTitle and labelledBy is set we will use <title> element\r\n        // instead of aria-label\r\n        // TODO: should we check agains this.showSystemTooltip?\r\n        if (title) {\r\n            if (labelledByIds.length || this.showSystemTooltip) {\r\n                var titleElement = this.titleElement;\r\n                var titleId = this.uid + \"-title\";\r\n                if (titleElement.node.textContent != title) {\r\n                    titleElement.node.textContent = title;\r\n                    titleElement.attr({ id: titleId });\r\n                }\r\n                labelledByIds.push(titleId);\r\n            }\r\n            else {\r\n                if (this._titleElement) {\r\n                    this.group.removeElement(this._titleElement);\r\n                    this._titleElement = undefined;\r\n                }\r\n                this.setSVGAttribute({\r\n                    \"aria-label\": title\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-label\");\r\n            if (this._titleElement) {\r\n                this.group.removeElement(this._titleElement);\r\n                this._titleElement = undefined;\r\n            }\r\n        }\r\n        // Add description\r\n        if (description) {\r\n            var descriptionElement = this.descriptionElement;\r\n            var descriptionId = this.uid + \"-description\";\r\n            if (descriptionElement.node.textContent != description) {\r\n                descriptionElement.node.textContent = description;\r\n                descriptionElement.attr({ id: descriptionId });\r\n            }\r\n            describedByIds.push(descriptionId);\r\n        }\r\n        else if (this._descriptionElement) {\r\n            this.group.removeElement(this._descriptionElement);\r\n            this._descriptionElement = undefined;\r\n        }\r\n        // Add label and described properties\r\n        if (labelledByIds.length) {\r\n            this.setSVGAttribute({ \"aria-labelledby\": labelledByIds.join(\" \") });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-labelledby\");\r\n        }\r\n        if (describedByIds.length) {\r\n            this.setSVGAttribute({ \"aria-describedby\": describedByIds.join(\" \") });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-describedby\");\r\n        }\r\n        // Apply role\r\n        if (role) {\r\n            this.setSVGAttribute({ \"role\": role });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"role\");\r\n        }\r\n        // Apply aria-hidden\r\n        if (hidden) {\r\n            this.setSVGAttribute({ \"aria-hidden\": \"true\" });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-hidden\");\r\n        }\r\n        // Apply aria-checked\r\n        if (checked) {\r\n            this.setSVGAttribute({ \"aria-checked\": \"true\" });\r\n        }\r\n        else if (checked === false) {\r\n            this.setSVGAttribute({ \"aria-checked\": \"false\" });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-checked\");\r\n        }\r\n        // Apply aria-controls\r\n        if (controls) {\r\n            this.setSVGAttribute({ \"aria-controls\": controls });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-controls\");\r\n        }\r\n        // Apply aria-live\r\n        if (live) {\r\n            this.setSVGAttribute({ \"aria-live\": live });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-live\");\r\n        }\r\n        // Apply aria-orientation\r\n        if (orientation) {\r\n            this.setSVGAttribute({ \"aria-orientation\": orientation });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-orientation\");\r\n        }\r\n        // Apply aria-valuenow\r\n        if (valueNow) {\r\n            this.setSVGAttribute({ \"aria-valuenow\": valueNow });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-valuenow\");\r\n        }\r\n        // Apply aria-valuetext\r\n        if (valueText) {\r\n            this.setSVGAttribute({ \"aria-valuetext\": valueText });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-valuetext\");\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"readerTitle\", {\r\n        /**\r\n         * @return Title\r\n         */\r\n        get: function () {\r\n            var title = this.getPropertyValue(\"readerTitle\");\r\n            if ($type.hasValue(title) && this.dataItem) {\r\n                return this.populateString(title);\r\n            }\r\n            return title;\r\n        },\r\n        /**\r\n         * Screen reader title of the element.\r\n         *\r\n         * @param value Title\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerTitle\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerDescription\", {\r\n        /**\r\n         * @return Description\r\n         */\r\n        get: function () {\r\n            var description = this.getPropertyValue(\"readerDescription\");\r\n            if ($type.hasValue(description) && this.dataItem) {\r\n                return this.populateString(description);\r\n            }\r\n            return this.getPropertyValue(\"readerDescription\");\r\n        },\r\n        /**\r\n         * Screen reader description of the element.\r\n         *\r\n         * @param value Description\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerDescription\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"role\", {\r\n        /**\r\n         * @return Role\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"role\");\r\n        },\r\n        /**\r\n         * A WAI-ARIA role for the element.\r\n         *\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#role_definitions} for more information on WAI-ARIA roles\r\n         * @param value  Role\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"role\", value)) {\r\n                this.applyAccessibility();\r\n                if (value == \"slider\") {\r\n                    this.setSVGAttribute({ \"aria-valuemin\": \"0\" });\r\n                    this.setSVGAttribute({ \"aria-valuemax\": \"100\" });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerHidden\", {\r\n        /**\r\n         * @return Hidden?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerHidden\");\r\n        },\r\n        /**\r\n         * Controls if element should be hidden from screen readers.\r\n         *\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden} for more information\r\n         * @param value  Hidden?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"readerHidden\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerChecked\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Checked?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerChecked\");\r\n        },\r\n        /**\r\n         * Controls if element is currently marked as \"checked\".\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-checked} for more information\r\n         * @param value Checked?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"readerChecked\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerControls\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Setting value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerControls\");\r\n        },\r\n        /**\r\n         * A `uid` of an element this element controls.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls} for more information\r\n         * @param value Setting value\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerControls\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerLive\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Setting value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerLive\");\r\n        },\r\n        /**\r\n         * Controls accessibility setting \"aria-live\" for the element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions} for more information\r\n         * @param value Setting value\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerLive\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerLabelledBy\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Target element\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerLabelledBy\");\r\n        },\r\n        /**\r\n         * A `uid` of an element that describes this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby} for more information\r\n         * @param value Target element\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerLabelledBy\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerDescribedBy\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Target element\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerDescribedBy\");\r\n        },\r\n        /**\r\n         * A `uid` of an element that describes this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby} for more information\r\n         * @param value Target element\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerDescribedBy\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerOrientation\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerOrientation\");\r\n        },\r\n        /**\r\n         * Orientation of the element.\r\n         *\r\n         * @since 4.7.16\r\n         * @param value Orientation\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerOrientation\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerValueNow\", {\r\n        /**\r\n         * @return Current value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerValueNow\");\r\n        },\r\n        /**\r\n         * Current value of the element.\r\n         *\r\n         * @since 4.7.16\r\n         * @param value Current value\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerValueNow\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerValueText\", {\r\n        /**\r\n         * @return Current value (text)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerValueText\");\r\n        },\r\n        /**\r\n         * Text representation of the current value of the element.\r\n         *\r\n         * @since 4.7.16\r\n         * @param value Current value (text)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerValueText\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"keyboardOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * USER INTERACTIONS\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns elements keyboard options.\r\n         *\r\n         * @return Keyboard options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.keyboardOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.keyboardOptions;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.keyboardOptions;\r\n                }\r\n            }\r\n            return this.interactions.keyboardOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"mouseOptions\", {\r\n        /**\r\n         * Mouse options.\r\n         *\r\n         * Enables controlling options related to the mouse, for example sensitivity\r\n         * of its mouse wheel.\r\n         *\r\n         * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n         * speed:\r\n         *\r\n         * ```TypeScript\r\n         * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"plotContainer\": {\r\n         *     \"mouseOptions\": {\r\n         *       \"sensitivity\": 0.5\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * @return Mouse options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.mouseOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.mouseOptions;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.mouseOptions;\r\n                }\r\n            }\r\n            return this.interactions.mouseOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"interactions\", {\r\n        /**\r\n         * Returns (creates if necessary) an [[InteractionObject]] associated with\r\n         * this element.\r\n         *\r\n         * [[InteractionObject]] is used to attach all kinds of user-interactions to\r\n         * the element, e.g. click/touch, dragging, hovering, and similar events.\r\n         *\r\n         * @return Interaction object\r\n         */\r\n        get: function () {\r\n            if (!this._interaction) {\r\n                var interaction = getInteraction().getInteraction(this.dom);\r\n                this._interaction = interaction;\r\n                interaction.clickable = this.clickable;\r\n                interaction.hoverable = this.hoverable;\r\n                interaction.trackable = this.trackable;\r\n                interaction.draggable = this.draggable;\r\n                interaction.swipeable = this.swipeable;\r\n                interaction.resizable = this.resizable;\r\n                interaction.wheelable = this.wheelable;\r\n                interaction.contextMenuDisabled = this.contextMenuDisabled;\r\n                interaction.inert = this.inert;\r\n                interaction.sprite = this;\r\n                this._disposers.push(interaction);\r\n            }\r\n            return this._interaction;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns true if interactions object was created. Mostly used just to avoid creating interactions object if not needed.\r\n     * @return Is Sprite interactive?\r\n     */\r\n    Sprite.prototype.isInteractive = function () {\r\n        if (this._interaction) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"focusable\", {\r\n        /**\r\n         * @return Can element be focused?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"focusable\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * ELEMENT FOCUS-RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Controls if the element can gain focus.\r\n         *\r\n         * Focusable element will be selectable via TAB key.\r\n         *\r\n         * Please note, clicking it with a mouse or touching will not add focus to\r\n         * it.\r\n         *\r\n         * Focused element will show a system-specific highlight, which might ruin\r\n         * the overal look. This is why we don't focus element on click/touch.\r\n         *\r\n         * A default setting varies for different elements. By default all elements\r\n         * are not focusable, except certain items like buttons, legend items, etc.\r\n         *\r\n         * @default undefined (auto)\r\n         * @param value  Can element be focused?\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"focusable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                }\r\n                else {\r\n                    this.interactions.focusable = value;\r\n                    if (value) {\r\n                        this.setSVGAttribute({ \"focusable\": value });\r\n                        if (!$type.hasValue(this._tabindex)) {\r\n                            this.tabindex = 0;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.removeSVGAttribute(\"focusable\");\r\n                        this.tabindex = undefined;\r\n                    }\r\n                    // Set focus events that would apply \"focus\" state\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-focusable\", value, function () { return new MultiDisposer([\r\n                        _this.events.on(\"blur\", _this.handleBlur, _this, false),\r\n                        _this.events.on(\"focus\", _this.handleFocus, _this, false)\r\n                    ]); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Applies filters (if set) when element gains focus.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Original event\r\n     */\r\n    Sprite.prototype.handleFocus = function (ev) {\r\n        if (this.focusable) {\r\n            if (this.topParent) {\r\n                this.topParent.hasFocused = true;\r\n                this.topParent.focusedElement = this;\r\n            }\r\n            if (this.focusFilter) {\r\n                // Any `filters` manipulation will trigger `applyFilters()` so we don't\r\n                // need to call it here\r\n                this.filters.push(this.focusFilter);\r\n            }\r\n            if (this.hoverOnFocus) {\r\n                // Trigger a hover event as well\r\n                this.isHover = true;\r\n                this.handleOver();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Removes focus filter (if set) when elementloses focus.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Original event\r\n     */\r\n    Sprite.prototype.handleBlur = function (ev) {\r\n        if (this.focusable) {\r\n            if (this.topParent) {\r\n                this.topParent.hasFocused = false;\r\n                this.topParent.focusedElement = undefined;\r\n            }\r\n            if (this.focusFilter) {\r\n                // Any `filters` manipulation will trigger `applyFilters()` so we don't\r\n                // need to call it here\r\n                this.filters.removeValue(this.focusFilter);\r\n            }\r\n            if (this.hoverOnFocus) {\r\n                // Trigger a out event as well\r\n                this.isHover = false;\r\n                this.handleOut();\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"focusFilter\", {\r\n        /**\r\n         * A reference to a [[Filter]] to apply to element when it gains focus.\r\n         *\r\n         * Normally, browsers will draw a default ugly square around focused element,\r\n         * which totally makes sense because its purpose is to help identify active\r\n         * element for visually impaired people.\r\n         *\r\n         * However, if you would rather apply a filter, so you can modify how focused\r\n         * element looks like, use `focusFilter`.\r\n         *\r\n         * Simply set it to an anstance of [[FocusFilter]], or any other filter\r\n         * object.\r\n         *\r\n         * ```TypeScript\r\n         * chart.focusFilter = new am4core.FocusFilter();\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.focusFilter = new am4core.FocusFilter();\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"focusFilter\": {\r\n         *     \"type\": \"FocusFilter\"\r\n         *   },\r\n         *   // ...\r\n         * }\r\n         * ```\r\n         *\r\n         * @see {@link Filter}\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n         * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n         * @ignore Exclude from docs\r\n         * @return Focused element filter\r\n         */\r\n        get: function () {\r\n            /*if (!this._focusFilter) {\r\n                this._focusFilter = new FocusFilter();\r\n                this._disposers.push(this._focusFilter);\r\n            }*/\r\n            //return this._focusFilter;\r\n            var focusFilter = this._focusFilter;\r\n            if (focusFilter) {\r\n                return focusFilter;\r\n            }\r\n            if (this.virtualParent) {\r\n                return this.virtualParent.focusFilter;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.focusFilter;\r\n            }\r\n            //this._focusFilter = new FocusFilter();\r\n            //this._disposers.push(this._focusFilter);\r\n        },\r\n        /**\r\n         * @see {@link Filter}\r\n         * @ignore Exclude from docs\r\n         * @todo This is still experimental, don't use it\r\n         */\r\n        set: function (value) {\r\n            this._focusFilter = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"hoverOnFocus\", {\r\n        /**\r\n         * @return Trigger hover on focus?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hoverOnFocus\");\r\n        },\r\n        /**\r\n         * If set to `true`, this element will also trigger `\"over\"` event with all\r\n         * the related consequences, like \"hover\" state being applied and tooltip\r\n         * being shown.\r\n         *\r\n         * Useful as an accessibility feature to display rollover tooltips on items\r\n         * selected via keyboard.\r\n         *\r\n         * @param value  Trigger hover on focus?\r\n         * @default false\r\n         */\r\n        set: function (value) {\r\n            if (value !== this.hoverOnFocus) {\r\n                this.setPropertyValue(\"hoverOnFocus\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tabindex\", {\r\n        /**\r\n         * @return TAB index\r\n         */\r\n        get: function () {\r\n            var index = this._tabindex;\r\n            if (index != null) {\r\n                return index;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.tabindex;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.tabindex;\r\n            }\r\n        },\r\n        /**\r\n         * Sets or returns TAB index.\r\n         *\r\n         * Tab index maintains the order in which focusable elements gain focus when\r\n         * TAB key is pressed.\r\n         *\r\n         * Please note, tab index is not local to the chart. It affects the whole\r\n         * of the page, including non-SVG elements. Maintain extreme causion when\r\n         * setting tab indexes, as it affects the user experience for the whole\r\n         * web page.\r\n         *\r\n         * @param value TAB index\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (this.setPropertyValue(\"tabindex\", value) && $type.isNumber(value)) {\r\n                this.interactions.tabindex = value;\r\n                this.setSVGAttribute({ \"tabindex\": value });\r\n                this._tabindex = value;\r\n                this.focusable = true;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"inertiaOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * DRAGGING AND RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns element's options to be used for inertia. This setting is\r\n         * inheritable, meaning that if not set directly, it will search in all its\r\n         * ascendants until very top.\r\n         *\r\n         * Inertia is used only if element's `inert` is set to `true`.\r\n         *\r\n         * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n         * movement, and will continue moving in the same drag direction, gradually\r\n         * reducing in speed until finally stops.\r\n         *\r\n         * Check [[IInertiaOptions]] for how you tweak inertia animations.\r\n         *\r\n         * @return Inertia options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.inertiaOptions) {\r\n                if (this._parent) {\r\n                    return this._parent.inertiaOptions;\r\n                }\r\n            }\r\n            return this.interactions.inertiaOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"draggable\", {\r\n        /**\r\n         * @return `true` if element can be dragged\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"draggable\");\r\n        },\r\n        /**\r\n         * Controls if the element is draggable.\r\n         *\r\n         * @param value  `true` if element can be dragged\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"draggable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.draggable = value;\r\n                    //interaction.processDraggable(this);\r\n                    // Add events\r\n                    // @todo Maybe attach to InteractionObject's multidisposer so that\r\n                    // sprites events get disposed together with them?\r\n                    // this.interactions.disposers.getItem(\"movable\")\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-draggable\", value, function () { return new MultiDisposer([\r\n                        _this.events.on(\"down\", _this.handleDown, _this, false),\r\n                        _this.events.on(\"dragstart\", _this.handleDragStart, _this, false),\r\n                        _this.events.on(\"drag\", _this.handleDragMove, _this, false),\r\n                        _this.events.on(\"dragstop\", _this.handleDragStop, _this, false)\r\n                    ]); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Executes when dragged element is being started to drag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.handleDragStart = function (ev) {\r\n        if (!this.interactions.isTouchProtected || !ev.touch) {\r\n            this.interactions.originalPosition = {\r\n                x: this.pixelX,\r\n                y: this.pixelY\r\n            };\r\n            this._isDragged = true;\r\n            this.hideTooltip(0);\r\n        }\r\n    };\r\n    /**\r\n     * Tell this element to start being dragged. This is useful if you want to\r\n     * drag items by interactions performed not directly on the target element.\r\n     *\r\n     * Parameter `pointer` is highly recommended. By passing in the Pointer you\r\n     * will ensure that movement is tracked for the pointer that you want. If not\r\n     * supplied, the system will try to determine the most logical pointer.\r\n     *\r\n     * However this may fail if you have more than one pointer active, which\r\n     * might happen if you have several objects being dragged on a touch device.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param pointer Pointer to use for movement\r\n     */\r\n    Sprite.prototype.dragStart = function (pointer) {\r\n        //this.dragStop(pointer);\r\n        //this.draggable = true;\r\n        this._isDragged = true;\r\n        getInteraction().dragStart(this.interactions, pointer);\r\n    };\r\n    /**\r\n     * Executes when dragged element is being dropped.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.handleDragStop = function (ev) {\r\n        if (!this.interactions.isTouchProtected || !ev.touch) {\r\n            this._isDragged = false;\r\n            this.showTooltip();\r\n            this.interactions.originalPosition = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Stops manually initiated dragging of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param pointer Pointer to use as a reference\r\n     */\r\n    Sprite.prototype.dragStop = function (pointer, cancelled) {\r\n        //this.draggable = false;\r\n        this._isDragged = false;\r\n        getInteraction().dragStop(this.interactions, pointer, cancelled);\r\n        //this.handleDragStop();\r\n    };\r\n    /**\r\n     * Executes when {Sprite} is being dragged.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event object\r\n     * @todo Implement parent position offset calculation\r\n     */\r\n    Sprite.prototype.handleDragMove = function (ev) {\r\n        if (!this.interactions.isTouchProtected || !ev.touch) {\r\n            var point = this.interactions.originalPosition;\r\n            if (point && this._isDragged) {\r\n                var globalScale = this._parent.globalScale * this.svgContainer.cssScale;\r\n                this.moveTo({ x: point.x + ev.shift.x / globalScale, y: point.y + ev.shift.y / globalScale }, undefined, undefined, true);\r\n            }\r\n            this.dispatchImmediately(\"dragged\", ev);\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"inert\", {\r\n        /**\r\n         * @return `true` if element should use inertia when animated\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"inert\");\r\n        },\r\n        /**\r\n         * Controls if the element should use inertia when interacted with.\r\n         *\r\n         * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n         * movement, and will continue moving in the same drag direction, gradually\r\n         * reducing in speed until finally stops.\r\n         *\r\n         * @default false\r\n         * @param value `true` if element should use inertia when animated\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"inert\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.interactions.inert = value;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"hoverOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * HOVERING\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns Sprite's hover options.\r\n         *\r\n         * @see {@link IHoverOptions} for available options.\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.hoverOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.hoverOptions;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.hoverOptions;\r\n                }\r\n            }\r\n            return this.interactions.hoverOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"hoverable\", {\r\n        /**\r\n         * @return `true` if element is hoverable\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hoverable\");\r\n        },\r\n        /**\r\n         * Controls if the element is hoverable (hover events are registered).\r\n         *\r\n         * Use `over` and `out` events, to watch for those respective actions.\r\n         *\r\n         * @default false\r\n         * @param value `true` if element can be hovered\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"hoverable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.hoverable = value;\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-hoverable\", value, function () { return new MultiDisposer([\r\n                        _this.events.on(\"over\", _this.handleOver, _this, false),\r\n                        _this.events.on(\"out\", _this.handleOut, _this, false),\r\n                    ]); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles tasks when element becomes hovered:\r\n     * * Shows [[Tooltip]] if applicable\r\n     * * Applies \"hover\" state\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event object\r\n     */\r\n    Sprite.prototype.handleOver = function (ev) {\r\n        if (this._outTimeout) {\r\n            this._outTimeout.dispose();\r\n        }\r\n        if (this.isHover) {\r\n            if (this.states.hasKey(\"hover\")) {\r\n                //this.setState(\"hover\");\r\n                // This will check `isHover` and will set \"hover\" state\r\n                if (!this.isHidden) {\r\n                    this.applyCurrentState();\r\n                }\r\n            }\r\n            var point = void 0;\r\n            if (ev && ev.pointer) {\r\n                point = $utils.documentPointToSvg(ev.pointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\r\n            }\r\n            if (this.showTooltipOn == \"hover\") {\r\n                this.showTooltip(point);\r\n            }\r\n        }\r\n        else {\r\n            if (this.showTooltipOn == \"hover\") {\r\n                this.hideTooltip();\r\n            }\r\n            if (!this.isHidden && this.states.hasKey(\"hover\")) {\r\n                this.applyCurrentState();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles tasks when element loses hover:\r\n     *\r\n     * * Hides [[Tooltip]]\r\n     * * Applies default state\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev [description]\r\n     */\r\n    Sprite.prototype.handleOut = function (ev) {\r\n        var _this = this;\r\n        if (this.tooltip && this.tooltip.targetSprite == this && this.tooltip.keepTargetHover) {\r\n            this._outTimeout = this.setTimeout(function () {\r\n                if (!_this.tooltip.isHover) {\r\n                    if (_this.tooltip.targetSprite == _this) {\r\n                        _this.hideTooltip();\r\n                    }\r\n                    _this._outTimeout = _this.setTimeout(_this.handleOutReal.bind(_this), _this.rollOutDelay);\r\n                }\r\n            }, 10);\r\n            return;\r\n        }\r\n        if (this.showTooltipOn == \"hover\") {\r\n            this.hideTooltip();\r\n        }\r\n        this._outTimeout = this.setTimeout(this.handleOutReal.bind(this), this.rollOutDelay);\r\n    };\r\n    /**\r\n     * [handleOutReal description]\r\n     *\r\n     * @ignore\r\n     * @todo description\r\n     */\r\n    Sprite.prototype.handleOutReal = function () {\r\n        if (!this.isHidden && !this.isHiding && this.states.hasKey(\"hover\")) {\r\n            this.applyCurrentState();\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"hitOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * CLICKING/TAPPING AND TOGGLING STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns Sprite's click (hit) options.\r\n         *\r\n         * Click (hit) options control things like double-click, timeouts, etc.\r\n         *\r\n         * @see {@link IHitOptions} for available options.\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.hitOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.hitOptions;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.hitOptions;\r\n                }\r\n            }\r\n            return this.interactions.hitOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Prepares element's after `down` event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event\r\n     */\r\n    Sprite.prototype.handleDown = function (ev) {\r\n        if (this.interactions.downPointers.length === 1) {\r\n            this.interactions.originalPosition = {\r\n                x: this.pixelX,\r\n                y: this.pixelY\r\n            };\r\n            this.interactions.originalAngle = this.rotation;\r\n            this.interactions.originalScale = this.scale;\r\n            if (this.states.hasKey(\"down\")) {\r\n                this.setState(\"down\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Prepares element's after `up` event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event\r\n     */\r\n    Sprite.prototype.handleUp = function (ev) {\r\n        var _this = this;\r\n        /*if (!this.isDown) {\r\n            this.interactions.originalPosition = null;\r\n            this.interactions.originalAngle = null;\r\n            this.interactions.originalScale = null;\r\n        }*/\r\n        this._isResized = false;\r\n        if (this.states.hasKey(\"down\")) {\r\n            this.applyCurrentState();\r\n        }\r\n        if (this.showTooltipOn == \"hit\") {\r\n            this.updateTooltipPosition(ev.pointer ? ev.pointer.point : undefined);\r\n            this._disposers.push(registry.events.once(\"exitframe\", function () {\r\n                _this.showTooltip();\r\n            }));\r\n            this._disposers.push(getInteraction().body.events.once(\"down\", function (ev) {\r\n                _this.hideTooltip();\r\n            }));\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"clickable\", {\r\n        /**\r\n         * @return {boolean}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"clickable\");\r\n        },\r\n        /**\r\n         * Indicates if the element is clickable.\r\n         *\r\n         * Some type of the elements, like buttons are clickable by default.\r\n         *\r\n         * Most of the elements are not clickable by default.\r\n         *\r\n         * Use `hit`, `doublehit`, `up`, `down`, `toggled` events to watch for\r\n         * respective click/touch actions.\r\n         *\r\n         * @param value `true` if element can be clicked\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"clickable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.clickable = value;\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-clickable\", value, function () { return new MultiDisposer([\r\n                        _this.events.on(\"down\", _this.handleDown, _this, false),\r\n                        _this.events.on(\"up\", _this.handleUp, _this, false)\r\n                    ]); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"togglable\", {\r\n        /**\r\n         * @return Is togglable?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"togglable\");\r\n        },\r\n        /**\r\n         * Indicates if element can be toggled on and off by subsequent clicks/taps.\r\n         *\r\n         * Togglable element will alternate its `isActive` property between `true`\r\n         * and `false` with each click.\r\n         *\r\n         * @param value Is togglable?\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"togglable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-togglable\", value, function () { return _this.events.on(\"hit\", _this.handleToggle, _this, false); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles toggling of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event\r\n     */\r\n    Sprite.prototype.handleToggle = function (ev) {\r\n        this.isActive = !this.isActive;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"contextMenuDisabled\", {\r\n        /**\r\n         * @return Context menu disabled?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"contextMenuDisabled\");\r\n        },\r\n        /**\r\n         * Should element prevent context menu to be displayed, e.g. when\r\n         * right-clicked?\r\n         *\r\n         * @default false\r\n         * @param value Context menu disabled?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"contextMenuDisabled\", value)) {\r\n                this.interactions.contextMenuDisabled = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"url\", {\r\n        /**\r\n         * @return URL\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"url\");\r\n        },\r\n        /**\r\n         * Click-through URL for this element.\r\n         *\r\n         * If set, clicking/tapping this element will open the new URL in a target\r\n         * window/tab as set by `urlTarget`.\r\n         *\r\n         * Please note that URL will be parsed by data placeholders in curly\r\n         * brackets, to be populated from data. E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n         * ```\r\n         * ```JavaScript\r\n         * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     // ...\r\n         *     \"columns\": {\r\n         *       \"url\": \"https://www.google.com/search?q={category.urlEncode()}\"\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @param value URL\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"url\", value)) {\r\n                if (this._urlDisposer) {\r\n                    this._urlDisposer.dispose();\r\n                }\r\n                // If URL is not empty, set up events\r\n                if ($utils.isNotEmpty(value)) {\r\n                    this._urlDisposer = this.events.on(\"hit\", this.urlHandler, this, false);\r\n                    // Set other required parameters\r\n                    this.clickable = true;\r\n                    this.cursorOverStyle = MouseCursorStyle.pointer;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"baseId\", {\r\n        /**\r\n         * [baseId description]\r\n         *\r\n         * @ignore\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            if (!this._baseId && this._parent) {\r\n                this.baseId = this._parent.baseId;\r\n            }\r\n            return this._baseId;\r\n        },\r\n        /**\r\n         * [baseId description]\r\n         *\r\n         * @ignore\r\n         * @param  value  [description]\r\n         */\r\n        set: function (value) {\r\n            this.setBaseId(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Sprite.prototype.setBaseId = function (value) {\r\n        if (value != this._baseId) {\r\n            if (this.invalid) {\r\n                this.invalid = false;\r\n                registry.removeFromInvalidSprites(this);\r\n                this.invalidate();\r\n            }\r\n            this._baseId = value;\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"baseSprite\", {\r\n        /**\r\n         * Returns the mail chart object that this element belongs to.\r\n         *\r\n         * In most cases it will mean the chart object.\r\n         *\r\n         * Can be used to retrieve chart object in various events and adapters.\r\n         *\r\n         * ```TypeScript\r\n         * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n         *   console.log(ev.target.baseSprite);\r\n         * });\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n         *   console.log(ev.target.baseSprite);\r\n         * });\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"seriesContainer\": {\r\n         *     \"events\": {\r\n         *       \"hit\": function(ev) {\r\n         *         console.log(ev.target.baseSprite);\r\n         *       }\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * @readonly\r\n         * @return  Base chart object\r\n         */\r\n        get: function () {\r\n            if (this.isBaseSprite) {\r\n                return this;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.baseSprite;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"urlTarget\", {\r\n        /**\r\n         * @return URL target\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"urlTarget\");\r\n        },\r\n        /**\r\n         * Target to use for URL clicks:\r\n         *\r\n         * * _blank\r\n         * * _self (default)\r\n         * * _parent\r\n         * * _top\r\n         * * Name of the window/frame\r\n         *\r\n         * Ignored if `url` is not set.\r\n         *\r\n         * @param value URL target\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"urlTarget\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles URL transition on element click.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev An event object\r\n     */\r\n    Sprite.prototype.urlHandler = function (ev) {\r\n        // Is URL set?\r\n        if ($utils.isNotEmpty(this.url)) {\r\n            // Proceed to the URL\r\n            var url = this.populateString(this.url);\r\n            if (this.urlTarget === \"_self\") {\r\n                window.location.href = url;\r\n            }\r\n            else {\r\n                window.open(url, this.urlTarget);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"swipeOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * SWIPING GESTURE TRACKING\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns element's swipe gesture options.\r\n         *\r\n         * @return Swipe gesture options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.swipeOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.swipeOptions;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.swipeOptions;\r\n                }\r\n            }\r\n            return this.interactions.swipeOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"swipeable\", {\r\n        /**\r\n         * @return Element swipable?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"swipeable\");\r\n        },\r\n        /**\r\n         * Controls if element is swipeable.\r\n         *\r\n         * Swipable element will invoke `swipe`, `swipeleft` and `swiperight` events,\r\n         * when quick horizontal drag action is performed with either mouse or touch.\r\n         *\r\n         * Please note that combining swipe and drag is possible, however will incur\r\n         * a slight but noticeable delay in drag start.\r\n         *\r\n         * @param value  Element swipable?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"swipeable\", value)) {\r\n                this.applyCursorStyle();\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.interactions.swipeable = value;\r\n                }\r\n                //interaction.processSwipeable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"trackable\", {\r\n        /**\r\n         * @return Track cursor movement over element?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"trackable\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * POINTER TRACKING\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Indicates if the element is trackable (mouse position over it is reported to\r\n         * event listeners).\r\n         *\r\n         * Will invoke `track` events whenever pointer (cursor) changes position\r\n         * while over element.\r\n         *\r\n         * Please note, touch devices will also invoke `track` events when touch\r\n         * point is moved while holding down on a trackable element.\r\n         *\r\n         * @param value Track cursor movement over element?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"trackable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.trackable = value;\r\n                }\r\n                //interaction.processTrackable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"wheelable\", {\r\n        /**\r\n         * @return Mouse wheel events enabled?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"wheelable\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * MOUSE-WHEEL RELATED\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Indicates if the element can be interacted with mouse wheel.\r\n         *\r\n         * Will invoke `wheel`, `wheelup`, `wheeldown`, `wheelleft`, and `wheelright`\r\n         * events when using mouse wheel over the element.\r\n         *\r\n         * @param value Mouse wheel events enabled?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"wheelable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.wheelable = value;\r\n                }\r\n                //interaction.processWheelable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"resizable\", {\r\n        /**\r\n         * @return Element resizable?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"resizable\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * RESIZE\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Indicates if this element is resizable.\r\n         *\r\n         * Enabling resize will turn on various interactions on the element. Their\r\n         * actual functionality will depend on other properties.\r\n         *\r\n         * If the element also `draggable`, resize will only happen with two points\r\n         * of contact on a touch device.\r\n         *\r\n         * If the element is not draggable, resize can be performed with just one\r\n         * point of contact, touch or mouse.\r\n         *\r\n         * Will invoke `resize` event every time the size of the element changes.\r\n         *\r\n         * @param value  Element resizable?\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"resizable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.resizable = value;\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-resizable\", value, function () { return new MultiDisposer([\r\n                        _this.events.on(\"down\", _this.handleDown, _this, false),\r\n                        _this.events.on(\"resize\", _this.handleResize, _this, false)\r\n                    ]); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles resize intermediate step.\r\n     *\r\n     * By default this method resizes actual element. Each element, can override\r\n     * this method to implement their own resize logic.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event object\r\n     */\r\n    Sprite.prototype.handleResize = function (ev) {\r\n        if (!this.interactions.isTouchProtected || !ev.touch) {\r\n            this._isResized = true;\r\n            this.scale = this.interactions.originalScale * ev.scale;\r\n            this.validatePosition();\r\n            /*center: (io.draggable\r\n            ? $math.getMidPoint(point1, point2)\r\n            : {\r\n                \"x\": io.originalPosition.x,\r\n                \"y\": io.originalPosition.y\r\n            })*/\r\n            //this.moveTo(this.originalPosition.x + ev.shift.x, this.originalPosition.y + ev.shift.y);\r\n            if (this.draggable || this.dragWhileResize) {\r\n                this._isDragged = false;\r\n                var svgPoint1 = $utils.documentPointToSvg(ev.point1, this.htmlContainer, this.svgContainer.cssScale);\r\n                var svgPoint2 = $utils.documentPointToSvg(ev.point2, this.htmlContainer, this.svgContainer.cssScale);\r\n                var svgMidPoint = $math.getMidPoint(svgPoint1, svgPoint2);\r\n                var parentPoint1 = $utils.documentPointToSprite(ev.startPoint1, this._parent);\r\n                var parentPoint2 = $utils.documentPointToSprite(ev.startPoint2, this._parent);\r\n                var originalPosition = this.interactions.originalPosition;\r\n                var originalScale = this.interactions.originalScale;\r\n                if (originalPosition) {\r\n                    var spritePoint1 = { x: (parentPoint1.x - originalPosition.x) / originalScale, y: (parentPoint1.y - originalPosition.y) / originalScale };\r\n                    var spritePoint2 = { x: (parentPoint2.x - originalPosition.x) / originalScale, y: (parentPoint2.y - originalPosition.y) / originalScale };\r\n                    var spriteMidPoint = $math.getMidPoint(spritePoint1, spritePoint2);\r\n                    var parentPoint = $utils.svgPointToSprite(svgMidPoint, this._parent);\r\n                    this.moveTo({ x: parentPoint.x - spriteMidPoint.x * this.scale, y: parentPoint.y - spriteMidPoint.y * this.scale }, undefined, undefined, true);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"cursorOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * MOUSE-RELATED\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns element's cursor options.\r\n         *\r\n         * Cursor options usually define cursor style for various states of the\r\n         * hovered element.\r\n         *\r\n         * Elements inherit `cursorOptions` from their parents if they don't have\r\n         * them set explicitly.\r\n         *\r\n         * @see {@link ICursorOptions} for a list of available options\r\n         * @return Cursor options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.cursorOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.cursorOptions;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.cursorOptions;\r\n                }\r\n            }\r\n            return this.interactions.cursorOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"cursorOverStyle\", {\r\n        /**\r\n         * A shortcut to setting mouse cursor on hover.\r\n         *\r\n         * Example:\r\n         *\r\n         * ```TypeScript\r\n         * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n         * ```\r\n         * ```JavaScript\r\n         * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": {\r\n         *     // ...\r\n         *     \"slices\": {\r\n         *       \"cursorOverStyle\": \"pointer\"\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * @param style An array of styles to apply onhover\r\n         */\r\n        set: function (style) {\r\n            if (!this.cursorOptions.overStyle) {\r\n                this.interactions.cursorOptions = {\r\n                    defaultStyle: this.cursorOptions.defaultStyle\r\n                };\r\n            }\r\n            this.cursorOptions.overStyle = style;\r\n            getInteraction().applyCursorOverStyle(this.interactions);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"cursorDownStyle\", {\r\n        /**\r\n         * A shortcut to setting mouse cursor when button is pressed down.\r\n         *\r\n         * Example:\r\n         *\r\n         * ```TypeScript\r\n         * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n         * ```\r\n         * ```JavaScript\r\n         * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": {\r\n         *     // ...\r\n         *     \"slices\": {\r\n         *       \"cursorDownStyle\": \"grabbing\"\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * @param style An array of styles to apply onhover\r\n         */\r\n        set: function (style) {\r\n            this.cursorOptions.downStyle = style;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Applies default cursor styles for interactable elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Determine if this is necessary. Maybe let's not apply any cursor styles by default\r\n     */\r\n    Sprite.prototype.applyCursorStyle = function () {\r\n        // Draggable styles\r\n        /*if (this.draggable) {\r\n\r\n            if (!$type.hasValue(this.cursorOptions.overStyle)) {\r\n                this.cursorOptions.overStyle = MouseCursorStyle.grab;\r\n            }\r\n\r\n            if (!$type.hasValue(this.cursorOptions.downStyle)) {\r\n                this.cursorOptions.downStyle = MouseCursorStyle.grabbing;\r\n            }\r\n        }*/\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"interactionsEnabled\", {\r\n        /**\r\n         * @return Is interaction enabled for this element?\r\n         */\r\n        get: function () {\r\n            var value = this.getPropertyValue(\"interactionsEnabled\");\r\n            if (value === false) {\r\n                return false;\r\n            }\r\n            if (this.virtualParent) {\r\n                return this.virtualParent.interactionsEnabled;\r\n            }\r\n            if (this._parent) {\r\n                return this._parent.interactionsEnabled;\r\n            }\r\n            return true;\r\n        },\r\n        /**\r\n         * Setting this to `false` will effectively disable all interactivity on the\r\n         * element.\r\n         *\r\n         * @param value  Is interaction enabled for this element?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"interactionsEnabled\", value)) {\r\n                var pointerEvents = null; // must be null, not \"null\"!\r\n                if (!value) {\r\n                    pointerEvents = \"none\";\r\n                }\r\n                else {\r\n                    // this is for IE\r\n                    this.group.node.style.pointerEvents = \"\";\r\n                }\r\n                this.group.node.style.pointerEvents = pointerEvents;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"exporting\", {\r\n        /**\r\n         * @return Export instance\r\n         */\r\n        get: function () {\r\n            return this.getExporting();\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * EXPORT-RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * An [[Export]] instance.\r\n         *\r\n         * Used to access API of the chart export functionality.\r\n         *\r\n         * If `exporting` is not set, the element inherits [[Export]] instance from\r\n         * its parents.\r\n         *\r\n         * Upon request, if no parent has such instance, a new one is created, using\r\n         * default settings, what in most cases is just enough.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/} for more info about exporting\r\n         * @param exp  Export\r\n         */\r\n        set: function (exp) {\r\n            this._exporting.set(exp, exp);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * This is here as a method so that inheriting classes could override it.\r\n     *\r\n     * @return Export instance\r\n     */\r\n    Sprite.prototype.getExporting = function () {\r\n        var _export = this._exporting.get();\r\n        if (_export) {\r\n            return _export;\r\n        }\r\n        else {\r\n            if (this.isStandaloneInstance || !this._parent) {\r\n                _export = new Export(this.svgContainer.SVGContainer);\r\n                _export.sprite = this;\r\n                _export.language = this.language;\r\n                _export.numberFormatter = this.numberFormatter;\r\n                _export.dateFormatter = this.dateFormatter;\r\n                _export.durationFormatter = this.durationFormatter;\r\n                this._exporting.set(_export, _export);\r\n            }\r\n            else {\r\n                return this._parent.exporting;\r\n            }\r\n        }\r\n        return _export;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"exportable\", {\r\n        /**\r\n         * @return Export?\r\n         */\r\n        get: function () {\r\n            return this._exportable;\r\n            /*const svgContainer = this.svgContainer;\r\n            return !svgContainer || $array.indexOf(svgContainer.nonExportableSprites, this) == -1;*/\r\n        },\r\n        /**\r\n         * If set to `false` this element will be omitted when exporting the chart\r\n         * to an image.\r\n         *\r\n         * @default true\r\n         * @param value  Export?\r\n         */\r\n        set: function (value) {\r\n            var svgContainer = this.svgContainer;\r\n            this._exportable = value;\r\n            if (svgContainer) {\r\n                if (value) {\r\n                    $array.remove(svgContainer.nonExportableSprites, this);\r\n                }\r\n                else if ($array.indexOf(svgContainer.nonExportableSprites, this) == -1) {\r\n                    svgContainer.nonExportableSprites.push(this);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * ==========================================================================\r\n     * MODAL/POPUP RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Private method to be used for \"classPrefix\" adapter for modals/popups.\r\n     *\r\n     * @param value  Prefix\r\n     */\r\n    Sprite.prototype.modalPrefix = function (value) {\r\n        value = options.classNamePrefix + value;\r\n        return value;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"modal\", {\r\n        /**\r\n         * Returns a [[Modal]] instance, associated with this chart.\r\n         * (elements top parent)\r\n         *\r\n         * Accessing modal does not make it appear. To make a modal appear, use\r\n         * `showModal()` method.\r\n         *\r\n         * @see {@link Modal} for more information about using Modal windows\r\n         * @return Modal instance\r\n         */\r\n        get: function () {\r\n            var svgContainer = this.svgContainer;\r\n            if (svgContainer) {\r\n                var modal = svgContainer.modal;\r\n                if (!modal.adapter.has(\"classPrefix\", this.modalPrefix)) {\r\n                    modal.adapter.add(\"classPrefix\", this.modalPrefix);\r\n                }\r\n                return modal;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Opens a modal window with specific content (`text` parameter) and,\r\n     * optionally, `title`.\r\n     *\r\n     * The `text` parameter can contain HTML content.\r\n     *\r\n     * @see {@link Modal} for more information about using Modal windows\r\n     * @param text   Modal contents\r\n     * @param title  Title for the modal window\r\n     */\r\n    Sprite.prototype.openModal = function (text, title) {\r\n        var svgContainer = this.svgContainer;\r\n        if (svgContainer) {\r\n            return svgContainer.openModal(text, title);\r\n        }\r\n    };\r\n    /**\r\n     * Hides modal window if there is one currently open.\r\n     */\r\n    Sprite.prototype.closeModal = function () {\r\n        var svgContainer = this.svgContainer;\r\n        if (svgContainer) {\r\n            svgContainer.closeModal();\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"popups\", {\r\n        /**\r\n         * A list of popups for this chart.\r\n         *\r\n         * @return Popups\r\n         */\r\n        get: function () {\r\n            var svgContainer = this.svgContainer;\r\n            if (svgContainer) {\r\n                var popups = svgContainer.popups;\r\n                popups.template.sprite = this;\r\n                if (!popups.template.adapter.has(\"classPrefix\", this.modalPrefix)) {\r\n                    popups.template.adapter.add(\"classPrefix\", this.modalPrefix);\r\n                }\r\n                return popups;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates, opens, and returns a new [[Popup]] window.\r\n     *\r\n     * `text` can be any valid HTML.\r\n     *\r\n     * `title` is currently not supported.\r\n     *\r\n     * @param text   Popup contents\r\n     * @param title  Popup title\r\n     * @return Popup instance\r\n     */\r\n    Sprite.prototype.openPopup = function (text, title) {\r\n        var svgContainer = this.svgContainer;\r\n        if (svgContainer) {\r\n            return svgContainer.openPopup(text, title);\r\n        }\r\n    };\r\n    /**\r\n     * Closes all currently open popup windows\r\n     */\r\n    Sprite.prototype.closeAllPopups = function () {\r\n        var svgContainer = this.svgContainer;\r\n        if (svgContainer) {\r\n            svgContainer.closeAllPopups();\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"x\", {\r\n        /**\r\n         * @return X coordinate\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"x\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * POSITIONAL PROPERTIES AND RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Element's absolute or relative X coordinate.\r\n         *\r\n         * If setting both X and Y, please consider using `moveTo()` method instead,\r\n         * as it will be faster to set both coordinates at once.\r\n         *\r\n         * @param value X coordinate\r\n         */\r\n        set: function (value) {\r\n            if (!this.isDragged) {\r\n                this.setPercentProperty(\"x\", value, false, true, this._positionPrecision, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelX\", {\r\n        /**\r\n         * Returns element's current absolute X coordinate in pixels.\r\n         *\r\n         * @readonly\r\n         * @return X coordinate (px)\r\n         */\r\n        get: function () {\r\n            var value = $math.fitToRange(this.getPixelX(this.x), this.minX, this.maxX);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelX\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeX\", {\r\n        /**\r\n         * Returns element's current relative X coordinate in [[Percent]].\r\n         *\r\n         * @return X coordinate ([[Percent]])\r\n         */\r\n        get: function () {\r\n            if (!this._adapterO) {\r\n                return this.getRelativeX(this.x);\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"relativeX\", this.getRelativeX(this.x));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"minX\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Min X (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minX\");\r\n        },\r\n        /**\r\n         * The smallest allowable absolute X coordinate for this element.\r\n         *\r\n         * This is used to contain element movement within certain boundaries.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Min X (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"minX\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"maxX\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Max X (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxX\");\r\n        },\r\n        /**\r\n         * The biggest allowable absolute X coordinate for this element.\r\n         *\r\n         * This is used to contain element movement within certain boundaries.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Max X (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"maxX\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"y\", {\r\n        /**\r\n         * @return Y coordinate\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"y\");\r\n        },\r\n        /**\r\n         * Element's absolute or relative Y coordinate.\r\n         *\r\n         * If setting both X and Y, please consider using `moveTo()` method instead,\r\n         * as it will be faster to set both coordinates at once.\r\n         *\r\n         * @param value  Y coordinate\r\n         */\r\n        set: function (value) {\r\n            if (!this.isDragged) {\r\n                this.setPercentProperty(\"y\", value, false, true, this._positionPrecision, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelY\", {\r\n        /**\r\n         * Returns element's current absolute Y coordinate in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Y coordinate (px)\r\n         */\r\n        get: function () {\r\n            var value = $math.fitToRange(this.getPixelY(this.y), this.minY, this.maxY);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelY\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeY\", {\r\n        /**\r\n         * Returns element's current relative Y coordinate in [[Percent]].\r\n         *\r\n         * @readonly\r\n         * @return Y coordinate ([[Percent]])\r\n         */\r\n        get: function () {\r\n            if (!this._adapterO) {\r\n                return this.getRelativeX(this.y);\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"relativeY\", this.getRelativeX(this.y));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"minY\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Min Y (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minY\");\r\n        },\r\n        /**\r\n         * The smallest allowable absolute Y coordinate for this element.\r\n         *\r\n         * This is used to contain element movement within certain boundaries.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Min Y (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"minY\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"maxY\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Max Y (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxY\");\r\n        },\r\n        /**\r\n         * The biggest allowable absolute Y coordinate for this element.\r\n         *\r\n         * This is used to contain element movement within certain boundaries.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Max Y (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"maxY\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"dx\", {\r\n        /**\r\n         * @return Horizontal offset (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"dx\");\r\n        },\r\n        /**\r\n         * A horizontal offset for the element in pixels.\r\n         *\r\n         * Can be negative value for offset to the left.\r\n         *\r\n         * @param value  Horizontal offset (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"dx\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"dy\", {\r\n        /**\r\n         * @return Vertical offset (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"dy\");\r\n        },\r\n        /**\r\n         * A vertical offset for the element in pixels.\r\n         *\r\n         * Can be negative value for offset upwards.\r\n         *\r\n         * @param value  Vertical offset (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"dy\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"rotation\", {\r\n        /**\r\n         * @return Rotation (0-360)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"rotation\");\r\n        },\r\n        /**\r\n         * Rotation of the element in degrees. (0-360)\r\n         *\r\n         * Note: For convenience purposes, negative values (for counter-clockwise\r\n         * rotation) and values exceeding 360 can also be used.\r\n         *\r\n         * @param value  Rotation (0-360)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            this.setPropertyValue(\"rotation\", value, false, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"align\", {\r\n        /**\r\n         * @return Horizontal align\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"align\");\r\n        },\r\n        /**\r\n         * Controls horizontal alignment of the element.\r\n         *\r\n         * This is used by parent [[Container]] when layouting its children.\r\n         *\r\n         * @param value  Horizontal align\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"align\", value)) {\r\n                if (this._parent) {\r\n                    this._parent.invalidateLayout();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"valign\", {\r\n        /**\r\n         * @return Vertical align\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"valign\");\r\n        },\r\n        /**\r\n         * Controls vertical alignment of the element.\r\n         *\r\n         * This is used by parent [[Container]] when layouting its children.\r\n         *\r\n         * @param value  Vertical align\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"valign\", value)) {\r\n                if (this._parent) {\r\n                    this._parent.invalidateLayout();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"horizontalCenter\", {\r\n        /**\r\n         * @return Horizontal center\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"horizontalCenter\");\r\n        },\r\n        /**\r\n         * Controls which part of the element to treat as a horizontal center.\r\n         *\r\n         * The setting will be used when positioning, resizing and rotating the\r\n         * element.\r\n         *\r\n         * @param value  Horizontal center\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"horizontalCenter\", value)) {\r\n                this.updateCenter();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"verticalCenter\", {\r\n        /**\r\n         * @return Vertical center\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"verticalCenter\");\r\n        },\r\n        /**\r\n         * Controls which part of the element to treat as a vertical center.\r\n         *\r\n         * The setting will be used when positioning, resizing and rotating the\r\n         * element.\r\n         *\r\n         * @param value  Vertical center\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"verticalCenter\", value)) {\r\n                this.updateCenter();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"maxWidth\", {\r\n        /**\r\n         * @return Maximum width (px)\r\n         */\r\n        get: function () {\r\n            var maxWidth = this.getPropertyValue(\"maxWidth\");\r\n            if (!$type.isNumber(maxWidth)) {\r\n                if (this._parent) {\r\n                    var parentWidth = this._parent.maxWidth;\r\n                    if (this._parent.layout != \"absolute\" && this.align != \"none\" && this.align != undefined) {\r\n                        parentWidth = parentWidth - this.pixelMarginLeft - this.pixelMarginRight;\r\n                    }\r\n                    return parentWidth;\r\n                }\r\n            }\r\n            return maxWidth;\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * DIMENSIONAL PROPERTIES AND RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Maximum allowed width for the element in pixels.\r\n         *\r\n         * @param value  Maximum width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setMaxWidth(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Sprite.prototype.setMaxWidth = function (value) {\r\n        var prevWidth = this.maxWidth;\r\n        var prevHeight = this.maxHeight;\r\n        if (this.setPropertyValue(\"maxWidth\", value)) {\r\n            if ($type.isNumber(this.relativeWidth)) {\r\n                this.invalidate();\r\n            }\r\n            var event_2 = {\r\n                type: \"maxsizechanged\",\r\n                target: this,\r\n                previousWidth: prevWidth,\r\n                previousHeight: prevHeight\r\n            };\r\n            this.dispatchImmediately(\"maxsizechanged\", event_2);\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"maxHeight\", {\r\n        /**\r\n         * @return Maximum height (px)\r\n         */\r\n        get: function () {\r\n            var maxHeight = this.getPropertyValue(\"maxHeight\");\r\n            if (!$type.isNumber(maxHeight)) {\r\n                if (this._parent) {\r\n                    var parentHeight = this._parent.maxHeight;\r\n                    if (this._parent.layout != \"absolute\" && this.valign != \"none\" && this.valign != undefined) {\r\n                        parentHeight = parentHeight - this.pixelMarginTop - this.pixelMarginBottom;\r\n                    }\r\n                    return parentHeight;\r\n                }\r\n            }\r\n            return maxHeight;\r\n        },\r\n        /**\r\n         * Maximum allowed height for the element in pixels.\r\n         *\r\n         * @param value  Maximum height (px)\r\n         */\r\n        set: function (value) {\r\n            this.setMaxHeight(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Sprite.prototype.setMaxHeight = function (value) {\r\n        var prevWidth = this.maxWidth;\r\n        var prevHeight = this.maxHeight;\r\n        if (this.setPropertyValue(\"maxHeight\", value)) {\r\n            if ($type.isNumber(this.relativeHeight)) {\r\n                this.invalidate();\r\n            }\r\n            var event_3 = {\r\n                type: \"maxsizechanged\",\r\n                target: this,\r\n                previousWidth: prevWidth,\r\n                previousHeight: prevHeight\r\n            };\r\n            this.dispatchImmediately(\"maxsizechanged\", event_3);\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"minWidth\", {\r\n        /**\r\n         * @return Minimum width (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minWidth\");\r\n        },\r\n        /**\r\n         * Minimum width of the element in pixels.\r\n         *\r\n         * Set to `undefined` to remove the limit.\r\n         *\r\n         * @param value  Minimum width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minWidth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"minHeight\", {\r\n        /**\r\n         * @return Minimum height (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minHeight\");\r\n        },\r\n        /**\r\n         * Minimum height for the element in pixels.\r\n         *\r\n         * Set to `undefined` to remove the limit.\r\n         *\r\n         * @param value  Minimum height (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minHeight\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"width\", {\r\n        /**\r\n         * @return Width (absolute or relative)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"width\");\r\n        },\r\n        /**\r\n         * Element's absolute or relative width.\r\n         *\r\n         * The width can either be absolute, set in numeric pixels, or relative, set\r\n         * in [[Percent]].\r\n         *\r\n         * Relative width will be calculated using closest measured ancestor\r\n         * [[Container]].\r\n         *\r\n         * NOTE: `width` is an accessor, which allows setting width in pixels or\r\n         * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n         * not ever use it. It uses either `pixelWidth` or `percentWidth`, so if\r\n         * you need to add an adapter for width add it for either of the two\r\n         * properties - whichever suits your requirements.\r\n         *\r\n         * @param value  Width (numeric in pixels or relative)\r\n         */\r\n        set: function (value) {\r\n            var changed = this.setPercentProperty(\"width\", value, true, false, this._positionPrecision, true);\r\n            if (changed) {\r\n                this.percentWidth = undefined;\r\n                this.relativeWidth = undefined;\r\n                if (value instanceof Percent) {\r\n                    this.percentWidth = value.percent;\r\n                    if ($type.isNumber(this._pixelWidth)) {\r\n                        this.maxWidth = undefined;\r\n                    }\r\n                    this._pixelWidth = undefined;\r\n                }\r\n                else {\r\n                    this._pixelWidth = Number(value);\r\n                    //this._measuredWidth = this._pixelWidth;\r\n                    this.maxWidth = this._pixelWidth;\r\n                }\r\n                this.invalidatePosition();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"height\", {\r\n        /**\r\n         * @return height (absolute or relative)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"height\");\r\n        },\r\n        /**\r\n         * Element's absolute or relative height.\r\n         *\r\n         * The height can either be absolute, set in numeric pixels, or relative, set\r\n         * in [[Percent]].\r\n         *\r\n         * Relative height will be calculated using closest measured ancestor\r\n         * [[Container]].\r\n         *\r\n         * NOTE: `height` is an accessor, which allows setting height in pixels or\r\n         * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n         * not ever use it. It uses either `pixelHeight` or `percentHeight`, so if\r\n         * you need to add an adapter for height add it for either of the two\r\n         * properties - whichever suits your requirements.\r\n         *\r\n         * @param value  Height (numeric in pixels or relative)\r\n         */\r\n        set: function (value) {\r\n            var changed = this.setPercentProperty(\"height\", value, true, false, this._positionPrecision, true);\r\n            if (changed) {\r\n                this.percentHeight = undefined;\r\n                this._relativeHeight = undefined;\r\n                if (value instanceof Percent) {\r\n                    this.percentHeight = value.percent;\r\n                    if ($type.isNumber(this._pixelHeight)) {\r\n                        this.maxHeight = undefined;\r\n                    }\r\n                    this._pixelHeight = undefined;\r\n                }\r\n                else {\r\n                    this._pixelHeight = Number(value);\r\n                    //this._measuredHeight = this._pixelHeight;\r\n                    this.maxHeight = this._pixelHeight; // yes, we reset maxWidth\r\n                }\r\n                this.invalidatePosition();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelWidth\", {\r\n        /**\r\n         * Returns element's width in pixels, if width was set. For actual width use measuredWidth property.\r\n         *\r\n         * @readonly\r\n         * @return Width (px)\r\n         */\r\n        get: function () {\r\n            var width;\r\n            if ($type.isNumber(this.percentWidth)) {\r\n                width = this.maxWidth;\r\n            }\r\n            else if ($type.isNumber(this._pixelWidth)) {\r\n                width = this._pixelWidth;\r\n            }\r\n            else {\r\n                width = 0;\r\n            }\r\n            var minWidth = this.minWidth;\r\n            if (minWidth != null && width < minWidth) {\r\n                width = minWidth;\r\n            }\r\n            var value = $math.round(width, this._positionPrecision, true);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelWidth\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelHeight\", {\r\n        /**\r\n         * Returns element's height in pixels. For actual height use measuredHeight property.\r\n         *\r\n         * @readonly\r\n         * @return Height (px)\r\n         */\r\n        get: function () {\r\n            var height;\r\n            if ($type.isNumber(this.percentHeight)) {\r\n                height = this.maxHeight;\r\n            }\r\n            else if ($type.isNumber(this._pixelHeight)) {\r\n                height = this._pixelHeight;\r\n            }\r\n            else {\r\n                height = 0; //this._measuredHeightSelf;\r\n            }\r\n            var minHeight = this.minHeight;\r\n            if (minHeight != null && height < minHeight) {\r\n                height = minHeight;\r\n            }\r\n            var value = $math.round(height, this._positionPrecision, true);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelHeight\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeWidth\", {\r\n        /**\r\n         * @return Relative width\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            var relativeWidth = this._relativeWidth;\r\n            if ($type.isNumber(relativeWidth)) {\r\n                if (!this._adapterO) {\r\n                    return relativeWidth;\r\n                }\r\n                else {\r\n                    return this._adapterO.apply(\"relativeWidth\", relativeWidth);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Element's relative width in [[Percent]].\r\n         * @ignore\r\n         *\r\n         * @param value  Relative width\r\n         */\r\n        set: function (value) {\r\n            if (this._relativeWidth != value) {\r\n                this._relativeWidth = value;\r\n                //\t\t\tthis.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeHeight\", {\r\n        /**\r\n         * @return Relative height\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            var relativeHeight = this._relativeHeight;\r\n            if ($type.isNumber(relativeHeight)) {\r\n                if (!this._adapterO) {\r\n                    return relativeHeight;\r\n                }\r\n                else {\r\n                    return this._adapterO.apply(\"relativeHeight\", relativeHeight);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Element's relative height in [[Percent]].\r\n         *\r\n         * @param value  Relative height\r\n         * @ignore\r\n         */\r\n        set: function (value) {\r\n            if (this._relativeHeight != value) {\r\n                this._relativeHeight = value;\r\n                //\t\t\tthis.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"measuredWidth\", {\r\n        /**\r\n         * Returns element's measured width in pixels.\r\n         *\r\n         * A measured width is actual width of contents plus `paddingRight` and* `paddingLeft`, relative to sprite parent, meaning that\r\n         * rotation and scale is taken into account.\r\n         *\r\n         * @readonly\r\n         * @return Width (px)\r\n         */\r\n        get: function () {\r\n            if (this.disabled || this.__disabled) {\r\n                return 0;\r\n            }\r\n            if (!this._adapterO) {\r\n                return this._measuredWidth;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"measuredWidth\", this._measuredWidth);\r\n            }\r\n            // it's not good to fit to min/max range as then rotations and scale won't be taken into account\r\n            //return this.adapter.apply(\"measuredWidth\", $math.fitToRange(this._measuredWidth, this.minWidth, this.maxWidth));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"measuredHeight\", {\r\n        /**\r\n         * Returns elements's measured height in pixels.\r\n         *\r\n         * A measured height is actual height of contents plus `paddingTop` and `paddingBottom`, relative to sprite parent, meaning that\r\n         * rotation and scale taken into account.\r\n         *\r\n         * @readonly\r\n         * @return Height (px)\r\n         */\r\n        get: function () {\r\n            if (this.disabled || this.__disabled) {\r\n                return 0;\r\n            }\r\n            // it's not good to fit to min/max range as then rotations and scale won't be taken into account\r\n            //return this.adapter.apply(\"measuredHeight\", $math.fitToRange(this._measuredHeight, this.minHeight, this.maxHeight));\r\n            if (!this._adapterO) {\r\n                return this._measuredHeight;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"measuredHeight\", this._measuredHeight);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"outerWidth\", {\r\n        /**\r\n         * Returns element's measured width plus its left and right margins in\r\n         * pixels.\r\n         *\r\n         * @readonly\r\n         * @return Outer width (px)\r\n         */\r\n        get: function () {\r\n            var value = this.pixelWidth + this.pixelMarginRight + this.pixelMarginLeft;\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"outerWidth\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"outerHeight\", {\r\n        /**\r\n         * Returns element's measured height plus its top and bottom margins in\r\n         * pixels.\r\n         *\r\n         * @readonly\r\n         * @return Outer height (px)\r\n         */\r\n        get: function () {\r\n            var value = this.pixelHeight + this.pixelMarginTop + this.pixelMarginBottom;\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"outerHeight\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"innerWidth\", {\r\n        /**\r\n         * Returns element's measured inner width in pixels.\r\n         *\r\n         * Inner width is actual available space for content, e.g. element's width\r\n         * minus horizontal padding.\r\n         *\r\n         * @readonly\r\n         * @return Inner width (px)\r\n         */\r\n        get: function () {\r\n            var value = Math.max(0, this.pixelWidth - this.pixelPaddingRight - this.pixelPaddingLeft);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"innerWidth\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"innerHeight\", {\r\n        /**\r\n         * Returns element's measured inner height in pixels.\r\n         *\r\n         * Inner height is actual available space for content, e.g. element's height\r\n         * minus vertical padding.\r\n         *\r\n         * @readonly\r\n         * @return Inner height (px)\r\n         */\r\n        get: function () {\r\n            var value = Math.max(0, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"innerHeight\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"globalScale\", {\r\n        /**\r\n         * Returns element's current \"global\" scale.\r\n         *\r\n         * Scale values accumulate over hierarchy of elements.\r\n         *\r\n         * E.g. if a [[Container]] has `scale = 2` and it's child has a `scale = 2`,\r\n         * the child's `globalScale` will be 4. (a multitude of `2 x 2`)\r\n         *\r\n         * @readonly\r\n         * @return Global scale\r\n         */\r\n        get: function () {\r\n            var scale = this.scale;\r\n            if (this._parent) {\r\n                scale = scale * this._parent.globalScale;\r\n            }\r\n            if (!this._adapterO) {\r\n                return scale;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"globalScale\", scale);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"scale\", {\r\n        /**\r\n         * @return Scale (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"scale\");\r\n        },\r\n        /**\r\n         * Scale of the element.\r\n         *\r\n         * The scale is set from 0 (element reduced to nothing) to 1 (default size).\r\n         * * 2 will mean element is increased twice.\r\n         * * 0.5 - reduced by 50%.\r\n         *\r\n         * Etc.\r\n         *\r\n         * @param value  Scale (0-1)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (value < 0) {\r\n                value = 0;\r\n            }\r\n            if (value != this.getPropertyValue(\"scale\")) {\r\n                this.setPropertyValue(\"scale\", value, false, true);\r\n                this.handleGlobalScale();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets all four margins for the element at once.\r\n     *\r\n     * Margins are set in pixels.\r\n     *\r\n     * @param top     Top margin\r\n     * @param right   Right margin\r\n     * @param bottom  Bottom margin\r\n     * @param left    Left margin\r\n     * @return Current element\r\n     */\r\n    Sprite.prototype.margin = function (top, right, bottom, left) {\r\n        this.marginTop = top;\r\n        this.marginRight = right;\r\n        this.marginBottom = bottom;\r\n        this.marginLeft = left;\r\n        return this;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"marginLeft\", {\r\n        /**\r\n         * @return Margin value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"marginLeft\");\r\n        },\r\n        /**\r\n         * Left margin - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Margin value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"marginLeft\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"marginRight\", {\r\n        /**\r\n         * @return Margin value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"marginRight\");\r\n        },\r\n        /**\r\n         * Right margin - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Margin value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"marginRight\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"marginTop\", {\r\n        /**\r\n         * @return Margin value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"marginTop\");\r\n        },\r\n        /**\r\n         * Top margin - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Margin value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"marginTop\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"marginBottom\", {\r\n        /**\r\n         * @return Margin value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"marginBottom\");\r\n        },\r\n        /**\r\n         * Bottom margin - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Margin value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"marginBottom\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelMarginRight\", {\r\n        /**\r\n         * Returns current right margin in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Right margin (px)\r\n         */\r\n        get: function () {\r\n            var value = this.getPixelX(this.marginRight);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelMarginRight\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeMarginRight\", {\r\n        /**\r\n         * Returns current relative right margin.\r\n         *\r\n         * @readonly\r\n         * @return Relative right margin\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            var value = this.getRelativeX(this.marginRight);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"relativeMarginRight\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelMarginLeft\", {\r\n        /**\r\n         * Returns current left margin in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Left margin (px)\r\n         */\r\n        get: function () {\r\n            var value = this.getPixelX(this.marginLeft);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelMarginLeft\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeMarginLeft\", {\r\n        /**\r\n         * Returns current relative left margin.\r\n         *\r\n         * @readonly\r\n         * @return Relative left margin\r\n         */\r\n        get: function () {\r\n            //@todo Maybe use [[Percent]]?\r\n            var value = this.getRelativeX(this.marginLeft);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"relativeMarginLeft\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelMarginTop\", {\r\n        /**\r\n         * Returns current top margin in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Top margin (px)\r\n         */\r\n        get: function () {\r\n            var value = this.getPixelY(this.marginTop);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelMarginTop\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeMarginTop\", {\r\n        /**\r\n         * Returns current relative top margin.\r\n         *\r\n         * @readonly\r\n         * @return Relative top margin\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            var value = this.getRelativeY(this.marginTop);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"relativeMarginTop\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelMarginBottom\", {\r\n        /**\r\n         * Returns current bottom margin in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Bottom margin (px)\r\n         */\r\n        get: function () {\r\n            var value = this.getPixelY(this.marginBottom);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelMarginBottom\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeMarginBottom\", {\r\n        /**\r\n         * Returns current relative bottom margin.\r\n         *\r\n         * @readonly\r\n         * @return Relative bottom margin\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            var value = this.getRelativeY(this.marginBottom);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"relativeMarginBottom\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets padding for the element in pixels.\r\n     *\r\n     * @param top     Top padding (px)\r\n     * @param right   Right padding (px)\r\n     * @param bottom  Bottom padding (px)\r\n     * @param left    Left padding (px)\r\n     * @return Element\r\n     */\r\n    Sprite.prototype.padding = function (top, right, bottom, left) {\r\n        this.paddingTop = top;\r\n        this.paddingRight = right;\r\n        this.paddingBottom = bottom;\r\n        this.paddingLeft = left;\r\n        return this;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"paddingLeft\", {\r\n        /**\r\n         * @return Padding value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"paddingLeft\");\r\n        },\r\n        /**\r\n         * Left padding - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Padding value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"paddingLeft\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"paddingRight\", {\r\n        /**\r\n         * @return Padding value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"paddingRight\");\r\n        },\r\n        /**\r\n         * Right padding - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Padding value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"paddingRight\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"paddingTop\", {\r\n        /**\r\n         * @return Padding value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"paddingTop\");\r\n        },\r\n        /**\r\n         * Top padding - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Padding value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"paddingTop\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"paddingBottom\", {\r\n        /**\r\n         * @return Padding value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"paddingBottom\");\r\n        },\r\n        /**\r\n         * Bottom padding - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Padding value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"paddingBottom\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelPaddingRight\", {\r\n        /**\r\n         * Returns current right padding in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Right padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPixelX(this.paddingRight);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativePaddingRight\", {\r\n        /**\r\n         * Returns current relative right padding.\r\n         *\r\n         * @readonly\r\n         * @return Relative right padding\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            return this.getRelativeX(this.paddingRight);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelPaddingLeft\", {\r\n        /**\r\n         * Returns current left padding in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Left padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPixelX(this.paddingLeft);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativePaddingLeft\", {\r\n        /**\r\n         * Returns current relative left padding.\r\n         *\r\n         * @readonly\r\n         * @return Relative left padding\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            return this.getRelativeX(this.paddingLeft);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelPaddingTop\", {\r\n        /**\r\n         * Returns current top padding in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Top padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPixelY(this.paddingTop);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativePaddingTop\", {\r\n        /**\r\n         * Returns current relative top padding.\r\n         *\r\n         * @readonly\r\n         * @return Relative top padding\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            return this.getRelativeY(this.paddingTop);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelPaddingBottom\", {\r\n        /**\r\n         * Returns current bottom padding in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Bottom padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPixelY(this.paddingBottom);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativePaddingBottom\", {\r\n        /**\r\n         * Returns current relative bottom padding.\r\n         *\r\n         * @readonly\r\n         * @return Relative bottom padding\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            return this.getRelativeY(this.paddingBottom);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"path\", {\r\n        /**\r\n         * @return Path of a Sprite element\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"path\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * APPEARANCE-RELATED PROPERTIES AND RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Path of Sprite element\r\n         */\r\n        set: function (value) {\r\n            this.setPath(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.setPath = function (value) {\r\n        if (this.setPropertyValue(\"path\", value)) {\r\n            if (this._adapterO) {\r\n                value = this._adapterO.apply(\"path\", value);\r\n            }\r\n            if (!this._isPath) {\r\n                if (!this.element || (this.element.node && !(this.element.node instanceof SVGPathElement))) {\r\n                    this.element = this.paper.add(\"path\");\r\n                }\r\n                this._isPath = true;\r\n            }\r\n            if ($type.hasValue(value)) {\r\n                this.element.attr({ \"d\": value });\r\n            }\r\n            else {\r\n                this.element.removeAttr(\"d\");\r\n            }\r\n            this.invalidatePosition();\r\n            // otherwise is 0x0\r\n            if (!this.inited) {\r\n                this.events.once(\"inited\", this.validatePosition, this, false);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"fillModifier\", {\r\n        /**\r\n         * @return Fill color modifier\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fillModifier\");\r\n        },\r\n        /**\r\n         * [[ColorModifier]] that can be used to modify color and pattern of the\r\n         * element's fill, e.g. create gradients.\r\n         *\r\n         * @param value  Fill color modifiier\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"fillModifier\", value)) {\r\n                this.setFill(this.fill);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"strokeModifier\", {\r\n        /**\r\n         * @return Stroke color modifier\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeModifier\");\r\n        },\r\n        /**\r\n         * [[ColorModifier]] that can be used to modify color and pattern of the\r\n         * element's stroke (outline), e.g. create gradients.\r\n         *\r\n         * @param value  Stroke color modifier\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"strokeModifier\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"fillOpacity\", {\r\n        /**\r\n         * @return Opacity (0-9)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fillOpacity\");\r\n        },\r\n        /**\r\n         * Element's fill opacity.\r\n         *\r\n         * Opacity ranges from 0 (fully transparent) to 1 (fully opaque).\r\n         *\r\n         * @param value  Opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            value = $math.toNumberRange(value, 0, 1);\r\n            if (this.setPropertyValue(\"fillOpacity\", value)) {\r\n                this.setSVGAttribute({ \"fill-opacity\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"fill\", {\r\n        /**\r\n         * @return Fill\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fill\");\r\n        },\r\n        /**\r\n         * Element's fill color or pattern.\r\n         *\r\n         * @param value  Fill\r\n         */\r\n        set: function (value) {\r\n            this.setFill(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets actual `fill` property on the SVG element, including applicable color\r\n     * modifiers.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Fill\r\n     */\r\n    Sprite.prototype.setFill = function (value) {\r\n        if (!$type.isObject(value) || \"r\" in value) {\r\n            value = toColor(value);\r\n        }\r\n        if (this.setColorProperty(\"fill\", value) || this.fillModifier) {\r\n            // this can not go into next if, as value is turned to Gradient\r\n            if (value instanceof Color) {\r\n                if (this.fillModifier) {\r\n                    value = this.fillModifier.modify(value);\r\n                }\r\n            }\r\n            this.realFill = value;\r\n            // todo: review this place when some Color type will be added\r\n            if (value instanceof Color) {\r\n                this.setSVGAttribute({ \"fill\": value.toString() });\r\n            }\r\n            else if (!$type.hasValue(value)) {\r\n                this.removeSVGAttribute(\"fill\");\r\n            }\r\n            else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\r\n                var fill = value;\r\n                fill.paper = this.paper;\r\n                this.setSVGAttribute({ \"fill\": \"url(\\\"\" + $utils.getBaseURI() + fill.id + \"\\\")\" });\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"opacity\", {\r\n        /**\r\n         * @return Opacity (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"opacity\");\r\n        },\r\n        /**\r\n         * Element's opacity.\r\n         *\r\n         * Opacity setting can range from 0 (fully transparent) to 1 (fully opaque).\r\n         *\r\n         * ATTENTION: It is highly not recommended to use `opacity` directly on the\r\n         * element. The charts use `opacity` to hide/show elements, so your setting\r\n         * might be lost if element is hidden and then later shown.\r\n         *\r\n         * Instead use methods `hide()` and `show()` to completely toggle off and on\r\n         * the element.\r\n         *\r\n         * Or, use properties `fillOpacity` and `strokeOpacity`, if you need to make\r\n         * the element semi-transparent.\r\n         *\r\n         * @param value Opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            value = $math.toNumberRange(value, 0, 1);\r\n            if (this.setPropertyValue(\"opacity\", value)) {\r\n                this.setSVGAttribute({ \"opacity\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"stroke\", {\r\n        /**\r\n         * @return Stroke setting\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"stroke\");\r\n        },\r\n        /**\r\n         * Element's stroke (outline) color or pattern.\r\n         *\r\n         * @param value  Stroke setting\r\n         */\r\n        set: function (value) {\r\n            this.setStroke(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets actual `stroke` property on the SVG element, including applicable\r\n     * color modifiers.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Stroke setting\r\n     */\r\n    Sprite.prototype.setStroke = function (value) {\r\n        if (!$type.isObject(value) || \"r\" in value) {\r\n            value = toColor(value);\r\n        }\r\n        if (this.setColorProperty(\"stroke\", value) || this.strokeModifier) {\r\n            // this can not go into next if, as value is turned to Gradient\r\n            if (value instanceof Color) {\r\n                if (this.strokeModifier) {\r\n                    value = this.strokeModifier.modify(value);\r\n                }\r\n            }\r\n            this.realStroke = value;\r\n            if (value instanceof Color) {\r\n                if (value.hex == \"none\") {\r\n                    this.removeSVGAttribute(\"stroke\");\r\n                }\r\n                else {\r\n                    this.setSVGAttribute({ \"stroke\": value.toString() });\r\n                }\r\n            }\r\n            else if (!$type.hasValue(value)) {\r\n                this.removeSVGAttribute(\"stroke\");\r\n            }\r\n            else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\r\n                var stroke = value;\r\n                stroke.paper = this.paper;\r\n                this.setSVGAttribute({ \"stroke\": \"url(\\\"\" + $utils.getBaseURI() + stroke.id + \"\\\")\" });\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"strokeOpacity\", {\r\n        /**\r\n         * @return Opacity (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeOpacity\");\r\n        },\r\n        /**\r\n         * Stroke (outline) opacity.\r\n         *\r\n         * The values may range from 0 (fully transparent) to 1 (fully opaque).\r\n         *\r\n         * @param value  Opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            value = $math.toNumberRange(value, 0, 1);\r\n            if (this.setPropertyValue(\"strokeOpacity\", value)) {\r\n                this.setSVGAttribute({ \"stroke-opacity\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"nonScalingStroke\", {\r\n        /**\r\n         * @return Do not scale stroke (outline)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nonScalingStroke\");\r\n        },\r\n        /**\r\n         * Controls if the element's stroke (outline) should remain keep constant\r\n         * thicnkess and do not scale when the whole element is resized.\r\n         *\r\n         * @param value  Do not scale stroke (outline)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"nonScalingStroke\", value)) {\r\n                this.strokeWidth = this.strokeWidth;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"nonScaling\", {\r\n        /**\r\n         * @return Is element scaleable?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nonScaling\");\r\n        },\r\n        /**\r\n         * Controls if element should keep constant size and not scale even if there is\r\n         * space available, or it does not fit.\r\n         *\r\n         * @param value  Is element scaleable?\r\n         */\r\n        set: function (value) {\r\n            // @todo Description (review)\r\n            value = $type.toBoolean(value);\r\n            this.setPropertyValue(\"nonScaling\", value, false, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"strokeWidth\", {\r\n        /**\r\n         * @return Thickness (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeWidth\");\r\n        },\r\n        /**\r\n         * Stroke (outline) thickness in pixels.\r\n         *\r\n         * @param value  Thickness (px)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            this.setPropertyValue(\"strokeWidth\", value, true);\r\n            if (this.nonScalingStroke) {\r\n                if (!$type.isNumber(value)) {\r\n                    value = 1;\r\n                }\r\n                value = value / this.globalScale;\r\n            }\r\n            this.setSVGAttribute({ \"stroke-width\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"strokeDasharray\", {\r\n        /**\r\n         * @return `stroke-dasharray`\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeDasharray\");\r\n        },\r\n        /**\r\n         * A `stroke-dasharray` for the stroke (outline).\r\n         *\r\n         * \"Dasharray\" allows setting rules to make lines dashed, dotted, etc.\r\n         *\r\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`\r\n         * @param value  `stroke-dasharray`\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"strokeDasharray\", value)) {\r\n                this.setSVGAttribute({ \"stroke-dasharray\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"strokeDashoffset\", {\r\n        /**\r\n         * @return `stroke-dashoffset`\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeDashoffset\");\r\n        },\r\n        /**\r\n         * A `stroke-dashoffset` for the stroke (outline).\r\n         *\r\n         * \"Dashoffset\" allows setting the start position of the dashes if\r\n         * `strokeDasharray` is used.\r\n         *\r\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset} for more info on `stroke-dashoffset`\r\n         * @param value  `stroke-dashoffset`\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (this.setPropertyValue(\"strokeDashoffset\", value)) {\r\n                this.setSVGAttribute({ \"stroke-dashoffset\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"strokeLinecap\", {\r\n        /**\r\n         * @return `stroke-linecap`\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeLinecap\");\r\n        },\r\n        /**\r\n         * A `stroke-linecap` to indicate how line ends are drawn.\r\n         *\r\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linecap`\r\n         * @param value  `stroke-linecap`\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"strokeLinecap\", value)) {\r\n                this.setSVGAttribute({ \"stroke-linecap\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"strokeLinejoin\", {\r\n        /**\r\n         * @return `stroke-linejoin`\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeLinejoin\");\r\n        },\r\n        /**\r\n         * A `stroke-linejoin` to indicate how line ends are drawn.\r\n         *\r\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linejoin`\r\n         * @param value  `stroke-linejoin`\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"strokeLinejoin\", value)) {\r\n                this.setSVGAttribute({ \"stroke-linejoin\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"shapeRendering\", {\r\n        /**\r\n         * @return 'shape-rendering' value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"shapeRendering\");\r\n        },\r\n        /**\r\n         * An SVG-specific `shape-rendering` value.\r\n         *\r\n         * `shape-rendering` controls how vector graphics are drawn and rendered.\r\n         *\r\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering} for more information about `shape-rendering`\r\n         * @default \"auto\"\r\n         * @param value  'shape-rendering' value\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"shapeRendering\", value)) {\r\n                this.setSVGAttribute({ \"shape-rendering\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelPerfect\", {\r\n        /**\r\n         * @return Use pixel perfect?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pixelPerfect\");\r\n        },\r\n        /**\r\n         * Controls if SVG vectors should be drawn with \"pixel\" precision, producing\r\n         * perfectly crisp lines on retina displays.\r\n         *\r\n         * Setting this to `true` might improve visual quality, but may have a\r\n         * negative effect on performance.\r\n         *\r\n         * Different elements use different default setting for `pixelPerfect`.\r\n         *\r\n         * We recommend leaving this at their default settings, unless there's a\r\n         * specific need.\r\n         *\r\n         * @param value  Use pixel perfect?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (value) {\r\n                this._positionPrecision = options.pixelPerfectPrecision;\r\n            }\r\n            else {\r\n                this._positionPrecision = 3;\r\n            }\r\n            this.setPropertyValue(\"pixelPerfect\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"rtl\", {\r\n        /**\r\n         * @return RTL?\r\n         */\r\n        get: function () {\r\n            if ($type.hasValue(this._rtl)) {\r\n                return this._rtl;\r\n            }\r\n            else if (this._topParent) {\r\n                return this._topParent.rtl;\r\n            }\r\n            //this.rtl = false;\r\n            return false;\r\n        },\r\n        /**\r\n         * An RTL (right-to-left) setting.\r\n         *\r\n         * RTL may affect alignment, text, and other visual properties.\r\n         *\r\n         * If you set this on a top-level chart object, it will be used for all\r\n         * child elements, e.g. labels, unless they have their own `rtl` setting\r\n         * set directly on them.\r\n         *\r\n         * @param value  `true` for to use RTL\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.isBaseSprite) {\r\n                this.topParent.rtl = value;\r\n            }\r\n            this._rtl = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * ==========================================================================\r\n     * VISIBILITY AND ORDER PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Reveals hidden element.\r\n     *\r\n     * Has no effect if element is already visible.\r\n     *\r\n     * If `duration` is not specified, it will use default.\r\n     *\r\n     * @param duration  Fade in duration (ms)\r\n     * @return Animation object if such object was created\r\n     */\r\n    Sprite.prototype.show = function (duration) {\r\n        return this.showReal(duration);\r\n    };\r\n    /**\r\n     * Performs actual operations to reveal this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param duration Fade in duration (ms)\r\n     * @return Fade in duration (ms)\r\n     */\r\n    Sprite.prototype.showReal = function (duration) {\r\n        var _this = this;\r\n        if (this.preventShow) {\r\n            return;\r\n        }\r\n        var transition;\r\n        var properties = this.defaultState.properties;\r\n        if (!this.disabled && (this.isHidden || !this.visible || this.isHiding || (properties.opacity != null && this.opacity < properties.opacity && !this.isShowing)) && !this.isDisposed()) {\r\n            // helps to avoid flicker, as show might change opacity or visibility but item might be at invalid state/position\r\n            if (this.invalid) {\r\n                this.validate();\r\n            }\r\n            if (this.positionInvalid) {\r\n                this.validatePosition();\r\n            }\r\n            if (!$type.isNumber(duration)) {\r\n                duration = this.defaultState.transitionDuration;\r\n            }\r\n            if (this._hideAnimation) {\r\n                this._hideAnimation.kill();\r\n                this._hideAnimation = undefined;\r\n            }\r\n            // Cancel hide handler just in case it was there\r\n            if (this._showHideDisposer) {\r\n                this.removeDispose(this._showHideDisposer);\r\n            }\r\n            this._isHidden = false;\r\n            this.isHiding = false;\r\n            this.isShowing = true;\r\n            // Apply current state\r\n            transition = this.applyCurrentState(duration);\r\n            if (transition && !transition.isFinished()) {\r\n                this._showHideDisposer = transition.events.on(\"animationended\", function () {\r\n                    _this.isShowing = false;\r\n                });\r\n                this._disposers.push(this._showHideDisposer);\r\n            }\r\n            else {\r\n                this.isShowing = false;\r\n            }\r\n            // Make it visible\r\n            var visible = this.defaultState.properties.visible;\r\n            if (!$type.hasValue(visible)) {\r\n                visible = true;\r\n            }\r\n            this.visible = visible;\r\n            // Unhide from screen readers\r\n            this.readerHidden = false;\r\n            // Dispatch \"show\" event\r\n            this.dispatchImmediately(\"shown\");\r\n        }\r\n        return transition;\r\n    };\r\n    /**\r\n     * Initiates hiding of Sprite.\r\n     * When called it will fade out the the Sprite to transparency, then make it\r\n     * invisible.\r\n     * @param duration Duration in millisecons\r\n     */\r\n    /**\r\n     * Hides the element, by applying `hidden` state.\r\n     *\r\n     * Has no effect if element is already hidden.\r\n     *\r\n     * If `duration` is not specified, it will use default.\r\n     *\r\n     * While element is fading out, its `isHiding` property will resolve to\r\n     * `true`.\r\n     *\r\n     * When element is hidden, its `visible` property will resolve to `false`.\r\n     *\r\n     * @param duration  Fade out duration (ms)\r\n     * @return hide Animation object if such object was created\r\n     */\r\n    Sprite.prototype.hide = function (duration) {\r\n        return this.hideReal(duration);\r\n    };\r\n    /**\r\n     * Hides actual SVG elements and handles hiding animations.\r\n     *\r\n     * @param duration  Fade out duration (ms)\r\n     * @return Fade out duration (ms)\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.hideReal = function (duration) {\r\n        var _this = this;\r\n        var transition;\r\n        if (!this.isHiding && this.visible && !this.isDisposed()) {\r\n            // added to solve 51375\r\n            if (this.tooltip && this.tooltip.currentSprite == this) {\r\n                this.hideTooltip(0);\r\n            }\r\n            if (this._hideAnimation) {\r\n                this._hideAnimation.kill();\r\n                this._hideAnimation = undefined;\r\n            }\r\n            this.isShowing = false;\r\n            // Cancel hide handler just in case it was there\r\n            if (this._showHideDisposer) {\r\n                this.removeDispose(this._showHideDisposer);\r\n            }\r\n            // Get state\r\n            var hiddenState_1 = this.hiddenState;\r\n            // Transition to \"hidden\" state, provided Sprite has one set\r\n            if (hiddenState_1) {\r\n                // Yes, we have a \"hidden\" state\r\n                // `setState` will return an `Animation` object which we can set\r\n                // events on\r\n                transition = this.setState(hiddenState_1, duration, undefined);\r\n                if (transition && !transition.isFinished()) {\r\n                    this._hideAnimation = transition;\r\n                    this._showHideDisposer = transition.events.on(\"animationended\", function () {\r\n                        _this.isHiding = false;\r\n                        _this._isHidden = true;\r\n                        if (hiddenState_1.properties.visible == false) {\r\n                            _this.visible = false;\r\n                        }\r\n                    }, this);\r\n                    this._disposers.push(this._showHideDisposer);\r\n                    // Thrown everything into `_disposers` just in case Sprite gets\r\n                    // destroyed in the meantime\r\n                    this._disposers.push(transition);\r\n                }\r\n                else {\r\n                    this.isHiding = false;\r\n                    this._isHidden = true;\r\n                }\r\n            }\r\n            else {\r\n                // No hidden state, let's just set `visible` and call it a day\r\n                this.visible = false;\r\n                this.isHiding = false;\r\n                this._isHidden = true;\r\n            }\r\n            // Hide from screen readers\r\n            this.readerHidden = true;\r\n            // Dispach \"hidden\" event\r\n            this.dispatchImmediately(\"hidden\");\r\n            this.invalidate(); // hide it at once to avoid flickers // validate() causes SO\r\n        }\r\n        if (!$type.isNumber(duration)) {\r\n            duration = this.hiddenState.transitionDuration;\r\n        }\r\n        return transition;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"visible\", {\r\n        /**\r\n         * @return Visible?\r\n         */\r\n        get: function () {\r\n            return this.getVisibility();\r\n        },\r\n        /**\r\n         * Indicates if element is current visible (`true`) or hidden (`false`).\r\n         *\r\n         * @param value Visible?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            this.setVisibility(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns visibility value\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.getVisibility = function () {\r\n        var value = this.getPropertyValue(\"visible\");\r\n        if (!$type.hasValue(value)) {\r\n            value = true;\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Sets `visibility` property:\r\n     *\r\n     * * `true` - visible\r\n     * * `false` - hidden\r\n     *\r\n     * @param value  true - visible, false - hidden\r\n     * @return Current visibility\r\n     */\r\n    Sprite.prototype.setVisibility = function (value) {\r\n        if (this.setPropertyValue(\"visible\", value)) {\r\n            if (value) {\r\n                this.group.removeAttr(\"visibility\");\r\n            }\r\n            else {\r\n                this.group.attr({ \"visibility\": \"hidden\" });\r\n            }\r\n            //this.invalidatePosition();\r\n            if (this.events.isEnabled(\"visibilitychanged\")) {\r\n                var event_4 = {\r\n                    type: \"visibilitychanged\",\r\n                    target: this,\r\n                    visible: value\r\n                };\r\n                this.events.dispatchImmediately(\"visibilitychanged\", event_4);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"zIndex\", {\r\n        /**\r\n         * @return zIndex\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"zIndex\");\r\n        },\r\n        /**\r\n         * A \"zIndex\" of the element.\r\n         *\r\n         * \"zIndex\" determines the order of how elements are placed over each other.\r\n         *\r\n         * Higher \"zIndex\" will mean the element will be draw on top of elements\r\n         * with lower \"zIndexes\".\r\n         *\r\n         * @param value  zIndex\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (this.setPropertyValue(\"zIndex\", value)) {\r\n                this.dispatch(\"zIndexChanged\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Moves the element to the very top in element order, so that it appears\r\n     * in front of other elements.\r\n     */\r\n    Sprite.prototype.toFront = function () {\r\n        var parent = this._parent;\r\n        if (parent && parent.children.indexOf(this) != parent.children.length - 1) {\r\n            parent.children.moveValue(this, parent.children.length - 1);\r\n            this.dispatch(\"zIndexChanged\");\r\n        }\r\n    };\r\n    /**\r\n     * Moves the element to the very bottom in the element order, so that it\r\n     * appears behind other elements.\r\n     */\r\n    Sprite.prototype.toBack = function () {\r\n        var parent = this._parent;\r\n        if (parent && parent.children.indexOf(this) != 0) {\r\n            parent.children.moveValue(this, 0);\r\n            this.dispatch(\"zIndexChanged\");\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"userClassName\", {\r\n        /**\r\n         * @return Class name\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"userClassName\");\r\n        },\r\n        /**\r\n         * A custom class name to set on the element.\r\n         *\r\n         * If set, the value will be added to element's `class` attribute.\r\n         *\r\n         * @since 4.9.11\r\n         * @param  value  Class name\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"userClassName\", value)) {\r\n                if (!value && this.userClassName) {\r\n                    this.group.removeClass(this.userClassName);\r\n                }\r\n                this.setClassName();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltip\", {\r\n        /**\r\n         * @return Tooltip\r\n         */\r\n        get: function () {\r\n            if (this._tooltip) {\r\n                return this._tooltip;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.tooltip;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.tooltip;\r\n            }\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * TOOLTIP-RELATED PROPERTIES STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * A [[Tooltip]] object to be used when displayed rollover information for\r\n         * the element.\r\n         *\r\n         * @param tooltip  Tooltip\r\n         */\r\n        set: function (tooltip) {\r\n            if (this._tooltip) {\r\n                //this._tooltip.dispose();\r\n                this.removeDispose(this._tooltip);\r\n            }\r\n            this._tooltip = tooltip;\r\n            if (tooltip) {\r\n                tooltip.parent = this.tooltipContainer;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipDataItem\", {\r\n        /**\r\n         * @return Tooltip data item\r\n         */\r\n        get: function () {\r\n            var tooltipDataItem = this._tooltipDataItem;\r\n            if (tooltipDataItem) {\r\n                return tooltipDataItem;\r\n            }\r\n            else {\r\n                return this.dataItem;\r\n            }\r\n        },\r\n        /**\r\n         * A [[DataItem]] to use when populating content for the element's\r\n         * [[Tooltip]].\r\n         *\r\n         * @see {@link Tooltip}\r\n         * @see {@link DataItem}\r\n         * @param value  Tooltip data item\r\n         */\r\n        set: function (value) {\r\n            // important: do not dispose tooltip dataItem, as it is some actual data item from data!\r\n            this._tooltipDataItem = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipColorSource\", {\r\n        /**\r\n         * @return Tooltip color source\r\n         */\r\n        get: function () {\r\n            return this._tooltipColorSource;\r\n        },\r\n        /**\r\n         * A [[Sprite]] or sprite template to use when getting colors for tooltip. If a template is set,\r\n         * tooltip will look for a clone in tooltipDataItem.sprites. If no clone is found, then template colors will be used.\r\n         *\r\n         * @see {@link Tooltip}\r\n         * @see {@link Sprite}\r\n         * @param sprite Sprite\r\n         */\r\n        set: function (sprite) {\r\n            this._tooltipColorSource = sprite;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Shows the element's [[Tooltip]].\r\n     *\r\n     * A tooltip will be populated using text templates in either `tooltipHTML` or\r\n     * `tooltipText` as well as data in `tooltipDataItem`.\r\n     *\r\n     * @see {@link Tooltip}\r\n     * @param optional point (sprite-related) to which tooltip must point.\r\n     * @return returns true if the tooltip was shown and false if it wasn't (no text was found)\r\n     */\r\n    Sprite.prototype.showTooltip = function (point) {\r\n        if (this.showTooltipOn == \"always\" && !this._tooltip && this.tooltip) {\r\n            this._tooltip = this.tooltip.clone();\r\n        }\r\n        if (!point && this.tooltipPosition == \"pointer\" && this.isHover) {\r\n            point = $utils.documentPointToSvg(getInteraction().lastPointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\r\n        }\r\n        // do not show if hidden\r\n        var sprite = this;\r\n        while (sprite != undefined) {\r\n            if (!sprite.visible || sprite.disabled || sprite.__disabled) {\r\n                if (this._tooltip && this._tooltip.visible) {\r\n                    this._tooltip.hide(0);\r\n                }\r\n                return;\r\n            }\r\n            sprite = sprite.parent;\r\n        }\r\n        if ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML)) {\r\n            var tooltip = this.tooltip;\r\n            var tooltipDataItem = this.tooltipDataItem;\r\n            if (tooltip) {\r\n                tooltip.targetSprite = this;\r\n                var colorSource_1 = this;\r\n                var tooltipColorSource_1 = this.tooltipColorSource;\r\n                if ((tooltip.getStrokeFromObject || tooltip.getFillFromObject) && tooltipColorSource_1) {\r\n                    if (tooltipColorSource_1.isTemplate) {\r\n                        if (tooltipDataItem) {\r\n                            $array.eachContinue(tooltipDataItem.sprites, function (sprite) {\r\n                                if (sprite.clonedFrom == tooltipColorSource_1) {\r\n                                    colorSource_1 = sprite;\r\n                                    return false;\r\n                                }\r\n                                return true;\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        colorSource_1 = tooltipColorSource_1;\r\n                    }\r\n                }\r\n                if (tooltip.getStrokeFromObject) {\r\n                    var stroke = this.stroke;\r\n                    var source = colorSource_1;\r\n                    while (source.parent != undefined) {\r\n                        stroke = source.stroke;\r\n                        if (stroke == undefined) {\r\n                            source = source.parent;\r\n                        }\r\n                        if (stroke != undefined) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (stroke instanceof Color) {\r\n                        tooltip.background.animate({ property: \"stroke\", to: stroke }, tooltip.animationDuration);\r\n                    }\r\n                    else {\r\n                        tooltip.background.stroke = stroke;\r\n                    }\r\n                }\r\n                // Set data item\r\n                tooltip.dataItem = tooltipDataItem;\r\n                tooltip.label.populateStringFrom = this;\r\n                if (tooltip.getFillFromObject) {\r\n                    var fill = this.fill;\r\n                    var source = colorSource_1;\r\n                    while (source.parent != undefined) {\r\n                        fill = source.fill;\r\n                        if (fill == undefined || (fill instanceof Color && fill.rgb == undefined)) {\r\n                            source = source.parent;\r\n                        }\r\n                        else if (fill != undefined) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (fill == undefined) {\r\n                        fill = color(\"#000000\");\r\n                    }\r\n                    if (fill instanceof Color) {\r\n                        if (!tooltip.visible) {\r\n                            tooltip.background.fill = fill;\r\n                        }\r\n                        else {\r\n                            tooltip.background.animate({ property: \"fill\", to: fill }, tooltip.animationDuration);\r\n                        }\r\n                    }\r\n                    else {\r\n                        tooltip.background.fill = fill;\r\n                    }\r\n                    if (tooltip.autoTextColor && fill instanceof Color) {\r\n                        tooltip.label.fill = fill.alternative;\r\n                    }\r\n                }\r\n                // Apply tooltip text\r\n                var text = \"\";\r\n                if (this.tooltipHTML) {\r\n                    tooltip.html = this.tooltipHTML;\r\n                    text = this.tooltipHTML;\r\n                }\r\n                if (this.tooltipText) {\r\n                    tooltip.text = this.tooltipText;\r\n                    text = this.tooltipText;\r\n                }\r\n                if (this.updateTooltipPosition(point)) {\r\n                    // Set accessibility option\r\n                    tooltip.readerDescribedBy = this.uidAttr();\r\n                    // make label to render to be able to check currentText\r\n                    if (tooltip.label.invalid) {\r\n                        tooltip.label.validate();\r\n                    }\r\n                    if (text != undefined && text != \"\" && tooltip.label.currentText != \"\") {\r\n                        //@todo: think of how to solve this better\r\n                        if (tooltip && !tooltip.parent) {\r\n                            tooltip.parent = this.tooltipContainer;\r\n                        }\r\n                        // Reveal tooltip\r\n                        // showing it in 1 ms helps to avoid strange flickering in IE\r\n                        var duration = tooltip.defaultState.transitionDuration;\r\n                        if (duration <= 0) {\r\n                            duration = 1;\r\n                        }\r\n                        tooltip.show(duration);\r\n                        tooltip.currentSprite = this;\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        this.hideTooltip(0);\r\n                    }\r\n                }\r\n                else {\r\n                    this.hideTooltip(0);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.updateTooltipPosition = function (point) {\r\n        var _this = this;\r\n        if (this.tooltipPosition == \"pointer\") {\r\n            if (this._interactionDisposer) {\r\n                this._interactionDisposer.dispose();\r\n            }\r\n            this._interactionDisposer = getInteraction().body.events.on(\"track\", function (ev) {\r\n                return _this.pointTooltipTo($utils.documentPointToSvg(ev.point, _this.svgContainer.SVGContainer, _this.svgContainer.cssScale), true);\r\n            });\r\n            if (point) {\r\n                return this.pointTooltipTo(point, true);\r\n            }\r\n        }\r\n        else {\r\n            // Point to the X/Y of this Sprite\r\n            var globalPoint = $utils.spritePointToSvg({\r\n                \"x\": this.getTooltipX(),\r\n                \"y\": this.getTooltipY()\r\n            }, this);\r\n            return this.pointTooltipTo(globalPoint);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the point the [[Tooltip]] should point to.\r\n     *\r\n     * @param point      Coordinates to point to\r\n     * @param instantly  Move instantly without animation\r\n     */\r\n    Sprite.prototype.pointTooltipTo = function (point, instantly) {\r\n        var tooltip = this.tooltip;\r\n        if (tooltip && this.topParent) {\r\n            if (tooltip.showInViewport) {\r\n                tooltip.pointTo(point, instantly);\r\n                return true;\r\n            }\r\n            if ($math.isInRectangle(point, { x: 0, y: 0, width: this.topParent.maxWidth, height: this.topParent.maxHeight })) {\r\n                tooltip.pointTo(point, instantly);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Hides element's [[Tooltip]].\r\n     *\r\n     * @see {@link Tooltip}\r\n     */\r\n    Sprite.prototype.hideTooltip = function (duration) {\r\n        if (this.showTooltipOn == \"always\") {\r\n            return;\r\n        }\r\n        var tooltip = this.tooltip;\r\n        if (tooltip) {\r\n            if (tooltip.targetSprite == this) {\r\n                tooltip.targetSprite = undefined;\r\n            }\r\n            tooltip.hide(duration);\r\n            if (this._interactionDisposer) {\r\n                this._interactionDisposer.dispose();\r\n                this._interactionDisposer = undefined;\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"tooltipHTML\", {\r\n        /**\r\n         * @return Tooltip HTML content template\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tooltipHTML\");\r\n        },\r\n        /**\r\n         * An HTML template to be used to populate [[Tooltip]] contents.\r\n         *\r\n         * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n         * for any data values to be replaced with the values from respective data\r\n         * items.\r\n         *\r\n         * @param value Tooltip HTML content template\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            this.hoverable = true;\r\n            if (this.setPropertyValue(\"tooltipHTML\", value)) {\r\n                if (this.tooltip) {\r\n                    if (this.tooltip.visible) {\r\n                        this.showTooltip();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipText\", {\r\n        /**\r\n         * @return Tooltip content template\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tooltipText\");\r\n        },\r\n        /**\r\n         * A text template to be used to populate Tooltip's contents.\r\n         *\r\n         * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n         * for any data values to be replaced with the values from respective data\r\n         * items.\r\n         *\r\n         * This template will also be parsed for any special formatting tags.\r\n         *\r\n         * @param value Tooltip content template\r\n         * @see {@link TextFormatter}\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (value) {\r\n                this.hoverable = true;\r\n            }\r\n            if (this.setPropertyValue(\"tooltipText\", value)) {\r\n                if (this.tooltip) {\r\n                    if (this.tooltip.visible) {\r\n                        this.showTooltip();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipContainer\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Container\r\n         */\r\n        get: function () {\r\n            if (this._tooltipContainer) {\r\n                return this._tooltipContainer;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.tooltipContainer;\r\n            }\r\n        },\r\n        /**\r\n         * A container reference that should be used to place element's\r\n         * [[Tooltip]] in.\r\n         *\r\n         * Will use parent's container if does not have one set.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Container\r\n         * @todo Dispose of the old _tooltipContainer ?\r\n         */\r\n        set: function (value) {\r\n            this._tooltipContainer = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipX\", {\r\n        /**\r\n         * @return Tooltip X (px)\r\n         */\r\n        get: function () {\r\n            return this.getTooltipX();\r\n        },\r\n        /**\r\n         * X coordinate the [[Tooltip]] should be shown at.\r\n         *\r\n         * @param value  Tooltip X (px)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"tooltipX\", value) && this.tooltip) {\r\n                this.tooltip.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"alwaysShowTooltip\", {\r\n        /**\r\n         * @return Always show tooltip?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"showTooltipOn\") == \"always\";\r\n        },\r\n        /**\r\n         * DEPRECATION NOTICE: This setting is deprecated in favor of a more flexible\r\n         * setting: `showTooltipOn`. Please use `showTooltipOn = \"always\"` instead.\r\n         *\r\n         * Indicates if this element should display a tooltip permanently.\r\n         *\r\n         * Useful, if you want to show permanent tooltips on some items.\r\n         *\r\n         * @default false\r\n         * @since 4.5.4\r\n         * @deprecated Use `showTooltipOn = \"always\"` instead\r\n         * @param  value  Always show tooltip?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (value) {\r\n                this.showTooltipOn = \"always\";\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"showTooltipOn\", {\r\n        /**\r\n         * @return When to show tooltip\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"showTooltipOn\");\r\n        },\r\n        /**\r\n         * Indicates when tooltip needs to be shown on this element:\r\n         *\r\n         * * `\"hover\"` (default) - Tooltip will be shown when element is hovered on.\r\n         * * `\"hit\"` - Tooltip will be shown when element is clicked/tapped. Tooltip will be hidden when clicked/tapped anywhere else.\r\n         * * `\"always\"` - Tooltip will be shown on the element permanently.\r\n         *\r\n         * For example, if you would like to show tooltips on all of the columns of\r\n         * a [[ColumnSeries]]:\r\n         *\r\n         * ```TypeScript\r\n         * series.columns.template.showTooltipOn = \"always\";\r\n         * ```\r\n         * ```JavaScript\r\n         * series.columns.template.showTooltipOn = \"always\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     // ...\r\n         *     \"columns\": {\r\n         *       \"showTooltipOn\": \"always\"\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * It can even be set to display on a selected columns via `propertyFields`:\r\n         *\r\n         * ```TypeScript\r\n         * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n         * ```\r\n         * ```JavaScript\r\n         * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     // ...\r\n         *     \"columns\": {\r\n         *       \"propertyFields\": {\r\n         *         \"showTooltipOn\": \"tooltip\"\r\n         *       }\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @default \"hover\"\r\n         * @since 4.7.9\r\n         * @param  value  When to show tooltip\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"showTooltipOn\", value)) {\r\n                if (value == \"hit\") {\r\n                    this.clickable = true;\r\n                }\r\n                if (this.tooltip) {\r\n                    if (value == \"always\") {\r\n                        this.showTooltip();\r\n                    }\r\n                    else {\r\n                        this.handleAlwaysShowTooltip();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipPosition\", {\r\n        /**\r\n         * Position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tooltipPosition\");\r\n        },\r\n        /**\r\n         * Specifies if [[Tooltip]] should follow the mouse or touch pointer or stay\r\n         * at the fixed position.\r\n         *\r\n         * @param value  Position\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tooltipPosition\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipY\", {\r\n        /**\r\n         * @return Tooltip Y (px)\r\n         */\r\n        get: function () {\r\n            return this.getTooltipY();\r\n        },\r\n        /**\r\n         * Y coordinate the [[Tooltip]] should be shown at.\r\n         *\r\n         * @param value  Tooltip Y (px)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"tooltipY\", value) && this.tooltip) {\r\n                this.tooltip.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns Tooltip X coordinate if it's set, or middle of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return X (px)\r\n     */\r\n    Sprite.prototype.getTooltipX = function () {\r\n        var x = this.getPropertyValue(\"tooltipX\");\r\n        if (!$type.hasValue(x)) {\r\n            x = percent(50);\r\n        }\r\n        var value;\r\n        if ($type.isNumber(x)) {\r\n            value = x;\r\n        }\r\n        if (x instanceof Percent) {\r\n            value = this.maxLeftSelf + this._measuredWidthSelf * x.value - this.pixelPaddingLeft - this.ex; // overflow is know only for measured items, so this is not always good\r\n        }\r\n        if (!$type.isNumber(value)) {\r\n            value = 0;\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Returns Tooltip Y coordinate if it's set, or middle of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Y (px)\r\n     */\r\n    Sprite.prototype.getTooltipY = function () {\r\n        var y = this.getPropertyValue(\"tooltipY\");\r\n        if (!$type.hasValue(y)) {\r\n            y = percent(50);\r\n        }\r\n        var value;\r\n        if ($type.isNumber(y)) {\r\n            value = y;\r\n        }\r\n        if (y instanceof Percent) {\r\n            value = this.maxTopSelf + this._measuredHeightSelf * y.value - this.pixelPaddingTop - this.ey; // overflow is know only for measured items, so this is not always good\r\n        }\r\n        if (!$type.isNumber(value)) {\r\n            value = 0;\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Displays a modal or console message with error, and halts any further\r\n     * processing of this item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param e Error\r\n     * @todo Implement from applying further actions to this item\r\n     */\r\n    Sprite.prototype.raiseCriticalError = function (e, closable) {\r\n        if (this.svgContainer) {\r\n            if (!this._adapterO) {\r\n                this.modal.content = e.message;\r\n            }\r\n            else {\r\n                this.modal.content = this._adapterO.apply(\"criticalError\", e).message;\r\n            }\r\n            if (!closable) {\r\n                this.disabled = true;\r\n            }\r\n            else {\r\n                this.modal.closable = true;\r\n            }\r\n            if (!options.suppressErrors) {\r\n                this.modal.open();\r\n            }\r\n        }\r\n        if (options.verbose) {\r\n            console.log(e);\r\n        }\r\n    };\r\n    /**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n    Sprite.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Tooltip color source\r\n            if ($type.hasValue(config.tooltipColorSource) && $type.isString(config.tooltipColorSource) && this.map.hasKey(config.tooltipColorSource)) {\r\n                config.tooltipColorSource = this.map.getKey(config.tooltipColorSource);\r\n            }\r\n            // Cursor styles\r\n            if ($type.hasValue(config.cursorOverStyle) && $type.isString(config.cursorOverStyle)) {\r\n                config.cursorOverStyle = this.getCursorStyle(config.cursorOverStyle);\r\n            }\r\n            if ($type.hasValue(config.cursorDowntyle) && $type.isString(config.cursorDowntyle)) {\r\n                config.cursorDowntyle = this.getCursorStyle(config.cursorDowntyle);\r\n            }\r\n            if ($type.hasValue(config.cursorOptions)) {\r\n                if ($type.hasValue(config.cursorOptions.overStyle) && $type.isString(config.cursorOptions.overStyle)) {\r\n                    config.cursorOptions.overStyle = this.getCursorStyle(config.cursorOptions.overStyle);\r\n                }\r\n                if ($type.hasValue(config.cursorOptions.downStyle) && $type.isString(config.cursorOptions.downStyle)) {\r\n                    config.cursorOptions.downStyle = this.getCursorStyle(config.cursorOptions.downStyle);\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n        this.processDelayedMap();\r\n    };\r\n    /**\r\n     * Converts string name of the cursor into actual [[MouseCursorStyle]].\r\n     *\r\n     * @param style  Cursor type\r\n     * @return Cursor definition\r\n     */\r\n    Sprite.prototype.getCursorStyle = function (style) {\r\n        switch (style) {\r\n            case \"grab\":\r\n                return MouseCursorStyle.grab;\r\n            case \"grabbing\":\r\n                return MouseCursorStyle.grabbing;\r\n            case \"pointer\":\r\n                return MouseCursorStyle.pointer;\r\n            case \"horizontalResize\":\r\n                return MouseCursorStyle.horizontalResize;\r\n            case \"verticalResize\":\r\n                return MouseCursorStyle.verticalResize;\r\n            default:\r\n                return MouseCursorStyle.default;\r\n        }\r\n    };\r\n    /**\r\n     * This function is used to sort element's JSON config properties, so that\r\n     * some properties that absolutely need to be processed last, can be put at\r\n     * the end.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param a  Element 1\r\n     * @param b  Element 2\r\n     * @return Sorting number\r\n     */\r\n    Sprite.prototype.configOrder = function (a, b) {\r\n        if (a == b) {\r\n            return 0;\r\n        }\r\n        // Must come last\r\n        else if (a == \"tooltipColorSource\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"tooltipColorSource\") {\r\n            return -1;\r\n        }\r\n        else {\r\n            return _super.prototype.configOrder.call(this, a, b);\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"isHidden\", {\r\n        /**\r\n         * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n         * This was added becaus hidden state might have visibility set to true and so\r\n         * there would not be possible to find out if a sprite is technically hidden or not.\r\n         */\r\n        get: function () {\r\n            if (this._isHidden) {\r\n                return this._isHidden;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.isHidden;\r\n            }\r\n            return false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"showOnInit\", {\r\n        /**\r\n         * @return Show on init?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"showOnInit\");\r\n        },\r\n        /**\r\n         * If this is set to `true`, Sprite, when inited will be instantly hidden\r\n         * (\"hidden\" state applied) and then shown (\"default\" state applied).\r\n         *\r\n         * If your \"default\" state's `transitionDuration > 0` this will result in\r\n         * initial animation from \"hidden\" state to \"default\" state.\r\n         *\r\n         * If you need a Sprite which has `showOnInit = true` not to be shown\r\n         * initially, set `sprite.hidden = true`. Setting `sprite.visible = false`\r\n         * will not prevent the animation and the sprite will be shown.\r\n         *\r\n         * @param value show on init?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            this.setShowOnInit(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.setShowOnInit = function (value) {\r\n        if (this.setPropertyValue(\"showOnInit\", value)) {\r\n            if (!this.isTemplate) {\r\n                if (value && !this.inited && !this.hidden) {\r\n                    this._showOnInitDisposer = new MultiDisposer([\r\n                        registry.events.once(\"enterframe\", this.hideInitially, this),\r\n                        this.events.once(\"beforevalidated\", this.hideInitially, this, false),\r\n                        this.events.on(\"inited\", this.appear, this, false)\r\n                    ]);\r\n                    this._disposers.push(this._showOnInitDisposer);\r\n                }\r\n                else {\r\n                    if (this._showOnInitDisposer) {\r\n                        this._showOnInitDisposer.dispose();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.hideInitially = function () {\r\n        if (!this.isDisposed()) {\r\n            this.appeared = false;\r\n            //if (!this.hidden && !this._isHidden) { // not good for series, as on enterframe it doesn't have data items yet.\r\n            if (!this.inited) {\r\n                this.hide(0);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n     */\r\n    Sprite.prototype.appear = function () {\r\n        var _this = this;\r\n        this.appeared = false;\r\n        if (!this.hidden && !this.isHidden) {\r\n            this.hide(0);\r\n        }\r\n        if (!this.hidden) {\r\n            var animation = this.show();\r\n            if (animation && !animation.isFinished()) {\r\n                this.addDisposer(animation.events.on(\"animationended\", function () {\r\n                    _this.appeared = true;\r\n                    _this.dispatch(\"appeared\");\r\n                }));\r\n            }\r\n            else {\r\n                this.appeared = true;\r\n                this.dispatch(\"appeared\");\r\n            }\r\n        }\r\n        else {\r\n            this.appeared = true;\r\n            this.dispatch(\"appeared\");\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"hidden\", {\r\n        /**\r\n         * @return Is initially hidden?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hidden\");\r\n        },\r\n        /**\r\n         * If a sprite has `showOnInit = true`, it will animate from \"hidden\" to\r\n         * \"default\" state when initialized. To prevent this but keep\r\n         * `showOnInit = true`, you can set `sprite.hidden = true`.\r\n         *\r\n         * @param value initially hidden?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            this.setPropertyValue(\"hidden\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        get: function () {\r\n            if (this.definedBBox) {\r\n                return this.definedBBox;\r\n            }\r\n            return this._bbox;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"plugins\", {\r\n        /**\r\n         * A list of plugins (objects that implement [[IPlugin]] interface) attached\r\n         * to this object.\r\n         *\r\n         * @since 4.2.2\r\n         * @return List of plugins\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._plugins) {\r\n                this._plugins = new List();\r\n                this._disposers.push(this._plugins.events.on(\"inserted\", function (ev) {\r\n                    ev.newValue.target = _this;\r\n                    ev.newValue.init();\r\n                }));\r\n                this._disposers.push(new ListDisposer(this._plugins));\r\n            }\r\n            return this._plugins;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Called during the System.update method\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype._systemUpdate = function (skippedSprites) {\r\n        this.validate();\r\n    };\r\n    /**\r\n     * Called during the System.update method\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype._systemCheckIfValidate = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Called during the System.validatePositions method\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype._systemValidatePositions = function () {\r\n        this.validatePosition();\r\n    };\r\n    /**\r\n     * Called during the System.validateLayouts method\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype._systemValidateLayouts = function () {\r\n    };\r\n    return Sprite;\r\n}(BaseObjectEvents));\r\nexport { Sprite };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Sprite\"] = Sprite;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,qBAAT,QAAsC,gBAAtC;AACA,SAASA,qBAAT;AACA,SAASC,gBAAT,QAAiC,QAAjC;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,iBAAvC;AACA,SAASC,UAAT,EAAqBC,kBAArB,EAAyCC,kBAAzC,QAAmE,oBAAnE;AACA,SAASC,YAAT,EAAuBC,IAAvB,QAAmC,cAAnC;AACA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,oBAAlC,QAA8D,kBAA9D;AACA,SAASC,SAAT,EAAoBC,iBAApB,QAA6C,mBAA7C;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,OAAvB,QAAsC,eAAtC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,iBAA1B;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,gBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,iBAAjC;AACA;AACA;AACA;;AACA,OAAO,IAAIC,gBAAgB,GAAG,CAAC,MAAD,EAAS,aAAT,EAAwB,QAAxB,EAAkC,eAAlC,EAAmD,aAAnD,EAAkE,iBAAlE,EAAqF,kBAArF,EAAyG,eAAzG,EAA0H,gBAA1H,CAAvB,C,CAAoK;;AAC3K;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,MAAM;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC1C/C,SAAS,CAAC8C,MAAD,EAASC,MAAT,CAAT;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACI,SAASD,MAAT,GAAkB;IACd,IAAIE,KAAK,GACT;IACAD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAFrB;IAGA;AACR;AACA;;;IACQD,KAAK,CAACE,UAAN,GAAmB,EAAnB;IACA;AACR;AACA;;IACQF,KAAK,CAACG,gBAAN,GAAyB,IAAIhD,qBAAJ,CAA0B6C,KAA1B,CAAzB;IACA;AACR;AACA;AACA;;IACQA,KAAK,CAACI,SAAN,GAAkB,EAAlB;IACA;AACR;AACA;AACA;AACA;AACA;;IACQJ,KAAK,CAACK,WAAN,GAAoB,KAApB;IACAL,KAAK,CAACM,OAAN,GAAgB,KAAhB;IACA;AACR;AACA;AACA;AACA;;IACQN,KAAK,CAACO,OAAN,GAAgB,KAAhB;IACA;AACR;AACA;AACA;AACA;;IACQP,KAAK,CAACQ,MAAN,GAAe,KAAf;IACA;AACR;AACA;AACA;AACA;AACA;;IACQR,KAAK,CAACS,QAAN,GAAiB,KAAjB;IACA;AACR;AACA;AACA;AACA;;IACQT,KAAK,CAACU,SAAN,GAAkB,KAAlB;IACA;AACR;AACA;AACA;AACA;;IACQV,KAAK,CAACW,SAAN,GAAkB,KAAlB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;;IACQX,KAAK,CAACY,oBAAN,GAA6B,KAA7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"},"metadata":{},"sourceType":"module"}