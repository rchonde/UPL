{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.summary.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { noop } from \"../../core/utils/common\";\nimport { isDefined, isPlainObject, isEmptyObject, isString, isFunction } from \"../../core/utils/type\";\nimport { each, map } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport errors from \"../widget/ui.errors\";\nimport gridCore from \"./ui.data_grid.core\";\nimport messageLocalization from \"../../localization/message\";\nimport dataSourceAdapter from \"./ui.data_grid.data_source_adapter\";\nimport { ColumnsView } from \"../grid_core/ui.grid_core.columns_view\";\nimport AggregateCalculator from \"./aggregate_calculator\";\nimport dataQuery from \"../../data/query\";\nimport storeHelper from \"../../data/store_helper\";\nimport { normalizeSortingInfo } from \"../../data/utils\";\nvar DATAGRID_TOTAL_FOOTER_CLASS = \"dx-datagrid-total-footer\";\nvar DATAGRID_SUMMARY_ITEM_CLASS = \"dx-datagrid-summary-item\";\nvar DATAGRID_TEXT_CONTENT_CLASS = \"dx-datagrid-text-content\";\nvar DATAGRID_GROUP_FOOTER_CLASS = \"dx-datagrid-group-footer\";\nvar DATAGRID_GROUP_TEXT_CONTENT_CLASS = \"dx-datagrid-group-text-content\";\nvar DATAGRID_NOWRAP_CLASS = \"dx-datagrid-nowrap\";\nvar DATAGRID_FOOTER_ROW_CLASS = \"dx-footer-row\";\nvar DATAGRID_GROUP_FOOTER_ROW_TYPE = \"groupFooter\";\nvar DATAGRID_TOTAL_FOOTER_ROW_TYPE = \"totalFooter\";\nexport var renderSummaryCell = function (cell, options) {\n  var $cell = $(cell);\n  var column = options.column;\n  var summaryItems = options.summaryItems;\n  var $summaryItems = [];\n\n  if (!column.command && summaryItems) {\n    for (var i = 0; i < summaryItems.length; i++) {\n      var summaryItem = summaryItems[i];\n      $summaryItems.push($(\"<div>\").css(\"textAlign\", summaryItem.alignment || column.alignment).addClass(DATAGRID_SUMMARY_ITEM_CLASS).addClass(DATAGRID_TEXT_CONTENT_CLASS).addClass(summaryItem.cssClass).toggleClass(DATAGRID_GROUP_TEXT_CONTENT_CLASS, \"group\" === options.rowType).text(gridCore.getSummaryText(summaryItem, options.summaryTexts)));\n    }\n\n    $cell.append($summaryItems);\n  }\n};\n\nvar getSummaryCellOptions = function (that, options) {\n  var summaryTexts = that.option(\"summary.texts\") || {};\n  return {\n    totalItem: options.row,\n    summaryItems: options.row.summaryCells[options.columnIndex],\n    summaryTexts: summaryTexts\n  };\n};\n\nvar getGroupAggregates = function (data) {\n  return data.summary || data.aggregates || [];\n};\n\nvar recalculateWhileEditing = function (that) {\n  return that.option(\"summary.recalculateWhileEditing\");\n};\n\nexport var FooterView = ColumnsView.inherit({\n  _getRows: function () {\n    return this._dataController.footerItems();\n  },\n  _getCellOptions: function (options) {\n    return extend(this.callBase(options), getSummaryCellOptions(this, options));\n  },\n  _renderCellContent: function ($cell, options) {\n    renderSummaryCell($cell, options);\n    this.callBase.apply(this, arguments);\n  },\n  _renderCore: function (change) {\n    var needUpdateScrollLeft = false;\n\n    var totalItem = this._dataController.footerItems()[0];\n\n    if (!change || !change.columnIndices) {\n      this.element().empty().addClass(DATAGRID_TOTAL_FOOTER_CLASS).toggleClass(DATAGRID_NOWRAP_CLASS, !this.option(\"wordWrapEnabled\"));\n      needUpdateScrollLeft = true;\n    }\n\n    if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {\n      this._updateContent(this._renderTable({\n        change: change\n      }), change);\n\n      needUpdateScrollLeft && this._updateScrollLeftPosition();\n    }\n  },\n  _updateContent: function ($newTable, change) {\n    if (change && \"update\" === change.changeType && change.columnIndices) {\n      return this._waitAsyncTemplates(change).done(() => {\n        var $row = this.getTableElement().find(\".dx-row\");\n        var $newRow = $newTable.find(\".dx-row\");\n\n        this._updateCells($row, $newRow, change.columnIndices[0]);\n      });\n    } else {\n      return this.callBase.apply(this, arguments);\n    }\n  },\n  _rowClick: function (e) {\n    var item = this._dataController.footerItems()[e.rowIndex] || {};\n    this.executeAction(\"onRowClick\", extend({}, e, item));\n  },\n  _columnOptionChanged: function (e) {\n    var optionNames = e.optionNames;\n\n    if (e.changeTypes.grouping) {\n      return;\n    }\n\n    if (optionNames.width || optionNames.visibleWidth) {\n      this.callBase(e);\n    }\n  },\n  _handleDataChanged: function (e) {\n    var changeType = e.changeType;\n\n    if (\"update\" === e.changeType && e.repaintChangesOnly) {\n      if (!e.totalColumnIndices) {\n        this.render();\n      } else if (e.totalColumnIndices.length) {\n        this.render(null, {\n          changeType: \"update\",\n          columnIndices: [e.totalColumnIndices]\n        });\n      }\n    } else if (\"refresh\" === changeType || \"append\" === changeType || \"prepend\" === changeType) {\n      this.render();\n    }\n  },\n  _createRow: function (row) {\n    var $row = this.callBase.apply(this, arguments);\n\n    if (row.rowType === DATAGRID_TOTAL_FOOTER_ROW_TYPE) {\n      $row.addClass(DATAGRID_FOOTER_ROW_CLASS);\n    }\n\n    return $row;\n  },\n  getHeight: function () {\n    return this.getElementHeight();\n  },\n  isVisible: function () {\n    return !!this._dataController.footerItems().length;\n  }\n});\nvar SummaryDataSourceAdapterExtender = {\n  init: function () {\n    this.callBase.apply(this, arguments);\n    this._totalAggregates = [];\n    this._summaryGetter = noop;\n  },\n  summaryGetter: function (_summaryGetter) {\n    if (!arguments.length) {\n      return this._summaryGetter;\n    }\n\n    if (isFunction(_summaryGetter)) {\n      this._summaryGetter = _summaryGetter;\n    }\n  },\n  summary: function (_summary) {\n    if (!arguments.length) {\n      return this._summaryGetter();\n    }\n\n    this._summaryGetter = function () {\n      return _summary;\n    };\n  },\n  totalAggregates: function () {\n    return this._totalAggregates;\n  },\n  isLastLevelGroupItemsPagingLocal: function () {\n    var summary = this.summary();\n    var sortByGroupsInfo = summary && summary.sortByGroups();\n    return sortByGroupsInfo && sortByGroupsInfo.length;\n  },\n  sortLastLevelGroupItems: function (items, groups, paths) {\n    var groupedItems = storeHelper.multiLevelGroup(dataQuery(items), groups).toArray();\n    var result = [];\n    paths.forEach(function (path) {\n      !function forEachGroup(groups, groupCount, callback, path) {\n        path = path || [];\n\n        for (var i = 0; i < groups.length; i++) {\n          path.push(groups[i].key);\n\n          if (1 === groupCount) {\n            callback(path, groups[i].items);\n          } else {\n            forEachGroup(groups[i].items, groupCount - 1, callback, path);\n          }\n\n          path.pop();\n        }\n      }(groupedItems, groups.length, function (itemsPath, items) {\n        if (path.toString() === itemsPath.toString()) {\n          result = result.concat(items);\n        }\n      });\n    });\n    return result;\n  }\n};\n\nvar SummaryDataSourceAdapterClientExtender = function () {\n  var calculateAggregates = function (that, summary, data, groupLevel) {\n    var calculator;\n\n    if (recalculateWhileEditing(that)) {\n      var editingController = that.getController(\"editing\");\n\n      if (editingController) {\n        var insertedData = editingController.getInsertedData();\n\n        if (insertedData.length) {\n          data = function applyAddedData(data, insertedData, groupLevel) {\n            if (groupLevel) {\n              return applyAddedData(data, insertedData.map(item => ({\n                items: [item]\n              }), groupLevel - 1));\n            }\n\n            return data.concat(insertedData);\n          }(data, insertedData, groupLevel);\n        }\n\n        var removedData = editingController.getRemovedData();\n\n        if (removedData.length) {\n          data = function applyRemovedData(data, removedData, groupLevel) {\n            if (groupLevel) {\n              return data.map(data => {\n                var updatedData = {};\n                var updatedItems = applyRemovedData(data.items || [], removedData, groupLevel - 1);\n                Object.defineProperty(updatedData, \"aggregates\", {\n                  get: () => data.aggregates,\n                  set: value => {\n                    data.aggregates = value;\n                  }\n                });\n                return extend(updatedData, data, {\n                  items: updatedItems\n                });\n              });\n            }\n\n            return data.filter(data => removedData.indexOf(data) < 0);\n          }(data, removedData, groupLevel);\n        }\n      }\n    }\n\n    if (summary) {\n      calculator = new AggregateCalculator({\n        totalAggregates: summary.totalAggregates,\n        groupAggregates: summary.groupAggregates,\n        data: data,\n        groupLevel: groupLevel\n      });\n      calculator.calculate();\n    }\n\n    return calculator ? calculator.totalAggregates() : [];\n  };\n\n  var sortGroupsBySummary = function (data, group, summary) {\n    var sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();\n\n    if (sortByGroups && sortByGroups.length) {\n      return function sortGroupsBySummaryCore(items, groups, sortByGroups) {\n        if (!items || !groups.length) {\n          return items;\n        }\n\n        var group = groups[0];\n        var sorts = sortByGroups[0];\n        var query;\n\n        if (group && sorts && sorts.length) {\n          query = dataQuery(items);\n          each(sorts, function (index) {\n            if (0 === index) {\n              query = query.sortBy(this.selector, this.desc);\n            } else {\n              query = query.thenBy(this.selector, this.desc);\n            }\n          });\n          query.enumerate().done(function (sortedItems) {\n            items = sortedItems;\n          });\n        }\n\n        groups = groups.slice(1);\n        sortByGroups = sortByGroups.slice(1);\n\n        if (groups.length && sortByGroups.length) {\n          each(items, function () {\n            this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups);\n          });\n        }\n\n        return items;\n      }(data, group, sortByGroups);\n    }\n\n    return data;\n  };\n\n  return {\n    _customizeRemoteOperations: function (options) {\n      var summary = this.summary();\n\n      if (summary) {\n        if (options.remoteOperations.summary) {\n          if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n            if (options.storeLoadOptions.group) {\n              if (options.remoteOperations.grouping) {\n                options.storeLoadOptions.groupSummary = summary.groupAggregates;\n              } else if (summary.groupAggregates.length) {\n                options.remoteOperations.paging = false;\n              }\n            }\n\n            options.storeLoadOptions.totalSummary = summary.totalAggregates;\n          }\n        } else if (summary.totalAggregates.length || summary.groupAggregates.length && options.storeLoadOptions.group) {\n          options.remoteOperations.paging = false;\n        }\n      }\n\n      this.callBase.apply(this, arguments);\n      var cachedExtra = options.cachedData.extra;\n\n      if (cachedExtra && cachedExtra.summary && !options.isCustomLoading) {\n        options.storeLoadOptions.totalSummary = void 0;\n      }\n    },\n    _handleDataLoadedCore: function (options) {\n      var groups = normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group || []);\n      var remoteOperations = options.remoteOperations || {};\n      var summary = this.summaryGetter()(remoteOperations);\n\n      if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n        if (remoteOperations.summary) {\n          if (!remoteOperations.paging && groups.length && summary) {\n            if (!remoteOperations.grouping) {\n              calculateAggregates(this, {\n                groupAggregates: summary.groupAggregates\n              }, options.data, groups.length);\n            }\n\n            options.data = sortGroupsBySummary(options.data, groups, summary);\n          }\n        } else if (!remoteOperations.paging && summary) {\n          var _options$cachedData, _options$cachedData$e;\n\n          var operationTypes = options.operationTypes || {};\n          var hasOperations = Object.keys(operationTypes).some(type => operationTypes[type]);\n\n          if (!hasOperations || !(null !== (_options$cachedData = options.cachedData) && void 0 !== _options$cachedData && null !== (_options$cachedData$e = _options$cachedData.extra) && void 0 !== _options$cachedData$e && _options$cachedData$e.summary) || groups.length && summary.groupAggregates.length) {\n            var totalAggregates = calculateAggregates(this, summary, options.data, groups.length);\n            options.extra = isPlainObject(options.extra) ? options.extra : {};\n            options.extra.summary = totalAggregates;\n\n            if (options.cachedData) {\n              options.cachedData.extra = options.extra;\n            }\n          }\n\n          options.data = sortGroupsBySummary(options.data, groups, summary);\n        }\n      }\n\n      if (!options.isCustomLoading) {\n        this._totalAggregates = options.extra && options.extra.summary || this._totalAggregates;\n      }\n\n      this.callBase(options);\n    }\n  };\n}();\n\ndataSourceAdapter.extend(SummaryDataSourceAdapterExtender);\ndataSourceAdapter.extend(SummaryDataSourceAdapterClientExtender);\ngridCore.registerModule(\"summary\", {\n  defaultOptions: function () {\n    return {\n      summary: {\n        groupItems: void 0,\n        totalItems: void 0,\n        calculateCustomSummary: void 0,\n        skipEmptyValues: true,\n        recalculateWhileEditing: false,\n        texts: {\n          sum: messageLocalization.format(\"dxDataGrid-summarySum\"),\n          sumOtherColumn: messageLocalization.format(\"dxDataGrid-summarySumOtherColumn\"),\n          min: messageLocalization.format(\"dxDataGrid-summaryMin\"),\n          minOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMinOtherColumn\"),\n          max: messageLocalization.format(\"dxDataGrid-summaryMax\"),\n          maxOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMaxOtherColumn\"),\n          avg: messageLocalization.format(\"dxDataGrid-summaryAvg\"),\n          avgOtherColumn: messageLocalization.format(\"dxDataGrid-summaryAvgOtherColumn\"),\n          count: messageLocalization.format(\"dxDataGrid-summaryCount\")\n        }\n      },\n      sortByGroupSummaryInfo: void 0\n    };\n  },\n  views: {\n    footerView: FooterView\n  },\n  extenders: {\n    controllers: {\n      data: {\n        _isDataColumn: function (column) {\n          return column && (!isDefined(column.groupIndex) || column.showWhenGrouped);\n        },\n        _isGroupFooterVisible: function () {\n          var groupItems = this.option(\"summary.groupItems\") || [];\n\n          for (var i = 0; i < groupItems.length; i++) {\n            var groupItem = groupItems[i];\n\n            var column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);\n\n            if (groupItem.showInGroupFooter && this._isDataColumn(column)) {\n              return true;\n            }\n          }\n\n          return false;\n        },\n        _processGroupItems: function (items, groupCount, options) {\n          var data = options && options.data;\n          var result = this.callBase.apply(this, arguments);\n\n          if (options) {\n            if (void 0 === options.isGroupFooterVisible) {\n              options.isGroupFooterVisible = this._isGroupFooterVisible();\n            }\n\n            if (data && data.items && options.isGroupFooterVisible && (options.collectContinuationItems || !data.isContinuationOnNextPage)) {\n              result.push({\n                rowType: DATAGRID_GROUP_FOOTER_ROW_TYPE,\n                key: options.path.slice(),\n                data: data,\n                groupIndex: options.path.length - 1,\n                values: []\n              });\n            }\n          }\n\n          return result;\n        },\n        _processGroupItem: function (groupItem, options) {\n          var that = this;\n\n          if (!options.summaryGroupItems) {\n            options.summaryGroupItems = that.option(\"summary.groupItems\") || [];\n          }\n\n          if (\"group\" === groupItem.rowType) {\n            var groupColumnIndex = -1;\n            var afterGroupColumnIndex = -1;\n            each(options.visibleColumns, function (visibleIndex) {\n              var prevColumn = options.visibleColumns[visibleIndex - 1];\n\n              if (groupItem.groupIndex === this.groupIndex) {\n                groupColumnIndex = this.index;\n              }\n\n              if (visibleIndex > 0 && \"expand\" === prevColumn.command && \"expand\" !== this.command) {\n                afterGroupColumnIndex = this.index;\n              }\n            });\n            groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function (summaryItem, column) {\n              if (summaryItem.showInGroupFooter) {\n                return -1;\n              }\n\n              if (summaryItem.alignByColumn && column && !isDefined(column.groupIndex) && column.index !== afterGroupColumnIndex) {\n                return column.index;\n              } else {\n                return groupColumnIndex;\n              }\n            }, true);\n          }\n\n          if (groupItem.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE) {\n            groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function (summaryItem, column) {\n              return summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1;\n            });\n          }\n\n          return groupItem;\n        },\n        _calculateSummaryCells: function (summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex, isGroupRow) {\n          var that = this;\n          var summaryCells = [];\n          var summaryCellsByColumns = {};\n          each(summaryItems, function (summaryIndex, summaryItem) {\n            var column = that._columnsController.columnOption(summaryItem.column);\n\n            var showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column;\n            var columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);\n\n            if (columnIndex >= 0) {\n              if (!summaryCellsByColumns[columnIndex]) {\n                summaryCellsByColumns[columnIndex] = [];\n              }\n\n              var aggregate = aggregates[summaryIndex];\n\n              if (aggregate === aggregate) {\n                var valueFormat;\n\n                if (isDefined(summaryItem.valueFormat)) {\n                  valueFormat = summaryItem.valueFormat;\n                } else if (\"count\" !== summaryItem.summaryType) {\n                  valueFormat = gridCore.getFormatByDataType(column && column.dataType);\n                }\n\n                summaryCellsByColumns[columnIndex].push(extend({}, summaryItem, {\n                  value: isString(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,\n                  valueFormat: valueFormat,\n                  columnCaption: column && column.index !== columnIndex ? column.caption : void 0\n                }));\n              }\n            }\n          });\n\n          if (!isEmptyObject(summaryCellsByColumns)) {\n            visibleColumns.forEach((column, visibleIndex) => {\n              var prevColumn = visibleColumns[visibleIndex - 1];\n              var columnIndex = isGroupRow && (\"expand\" === (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command) || \"expand\" === column.command) ? null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.index : column.index;\n              summaryCells.push(summaryCellsByColumns[columnIndex] || []);\n            });\n          }\n\n          return summaryCells;\n        },\n        _getSummaryCells: function (summaryTotalItems, totalAggregates) {\n          var that = this;\n          var columnsController = that._columnsController;\n          return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), function (summaryItem, column) {\n            return that._isDataColumn(column) ? column.index : -1;\n          });\n        },\n        _updateItemsCore: function (change) {\n          var summaryCells;\n          var dataSource = this._dataSource;\n          var footerItems = this._footerItems;\n          var oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells;\n          var summaryTotalItems = this.option(\"summary.totalItems\");\n          this._footerItems = [];\n\n          if (dataSource && summaryTotalItems && summaryTotalItems.length) {\n            var totalAggregates = dataSource.totalAggregates();\n            summaryCells = this._getSummaryCells(summaryTotalItems, totalAggregates);\n\n            if (change && change.repaintChangesOnly && oldSummaryCells) {\n              change.totalColumnIndices = summaryCells.map(function (summaryCell, index) {\n                if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index])) {\n                  return index;\n                }\n\n                return -1;\n              }).filter(index => index >= 0);\n            }\n\n            if (summaryCells.length) {\n              this._footerItems.push({\n                rowType: DATAGRID_TOTAL_FOOTER_ROW_TYPE,\n                summaryCells: summaryCells\n              });\n            }\n          }\n\n          this.callBase(change);\n        },\n        _prepareUnsavedDataSelector: function (selector) {\n          if (recalculateWhileEditing(this)) {\n            var editingController = this.getController(\"editing\");\n\n            if (editingController) {\n              return function (data) {\n                data = editingController.getUpdatedData(data);\n                return selector(data);\n              };\n            }\n          }\n\n          return selector;\n        },\n        _prepareAggregateSelector: function (selector, aggregator) {\n          selector = this._prepareUnsavedDataSelector(selector);\n\n          if (\"avg\" === aggregator || \"sum\" === aggregator) {\n            return function (data) {\n              var value = selector(data);\n              return isDefined(value) ? Number(value) : value;\n            };\n          }\n\n          return selector;\n        },\n        _getAggregates: function (summaryItems, remoteOperations) {\n          var that = this;\n          var columnsController = that.getController(\"columns\");\n          var calculateCustomSummary = that.option(\"summary.calculateCustomSummary\");\n          var commonSkipEmptyValues = that.option(\"summary.skipEmptyValues\");\n          return map(summaryItems || [], function (summaryItem) {\n            var column = columnsController.columnOption(summaryItem.column);\n            var calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : compileGetter(column ? column.dataField : summaryItem.column);\n            var aggregator = summaryItem.summaryType || \"count\";\n            var skipEmptyValues = isDefined(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;\n\n            if (remoteOperations) {\n              return {\n                selector: summaryItem.column,\n                summaryType: aggregator\n              };\n            } else {\n              var selector = that._prepareAggregateSelector(calculateCellValue, aggregator);\n\n              if (\"custom\" === aggregator) {\n                if (!calculateCustomSummary) {\n                  errors.log(\"E1026\");\n\n                  calculateCustomSummary = function () {};\n                }\n\n                var options = {\n                  component: that.component,\n                  name: summaryItem.name\n                };\n                calculateCustomSummary(options);\n                options.summaryProcess = \"calculate\";\n                aggregator = {\n                  seed: function (groupIndex) {\n                    options.summaryProcess = \"start\";\n                    options.totalValue = void 0;\n                    options.groupIndex = groupIndex;\n                    delete options.value;\n                    calculateCustomSummary(options);\n                    return options.totalValue;\n                  },\n                  step: function (totalValue, value) {\n                    options.summaryProcess = \"calculate\";\n                    options.totalValue = totalValue;\n                    options.value = value;\n                    calculateCustomSummary(options);\n                    return options.totalValue;\n                  },\n                  finalize: function (totalValue) {\n                    options.summaryProcess = \"finalize\";\n                    options.totalValue = totalValue;\n                    delete options.value;\n                    calculateCustomSummary(options);\n                    return options.totalValue;\n                  }\n                };\n              }\n\n              return {\n                selector: selector,\n                aggregator: aggregator,\n                skipEmptyValues: skipEmptyValues\n              };\n            }\n          });\n        },\n        _addSortInfo: function (sortByGroups, groupColumn, selector, sortOrder) {\n          if (groupColumn) {\n            var groupIndex = groupColumn.groupIndex;\n            sortOrder = sortOrder || groupColumn.sortOrder;\n\n            if (isDefined(groupIndex)) {\n              sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];\n              sortByGroups[groupIndex].push({\n                selector: selector,\n                desc: \"desc\" === sortOrder\n              });\n            }\n          }\n        },\n        _findSummaryItem: function (summaryItems, name) {\n          var summaryItemIndex = -1;\n\n          if (isDefined(name)) {\n            each(summaryItems || [], function (index) {\n              if (this.name === name || index === name || this.summaryType === name || this.column === name || (summaryItem = this, summaryType = summaryItem.summaryType, column = summaryItem.column, summaryType && column && summaryType + \"_\" + column) === name) {\n                summaryItemIndex = index;\n                return false;\n              }\n\n              var summaryItem, summaryType, column;\n            });\n          }\n\n          return summaryItemIndex;\n        },\n        _getSummarySortByGroups: function (sortByGroupSummaryInfo, groupSummaryItems) {\n          var that = this;\n          var columnsController = that._columnsController;\n          var groupColumns = columnsController.getGroupColumns();\n          var sortByGroups = [];\n\n          if (!groupSummaryItems || !groupSummaryItems.length) {\n            return;\n          }\n\n          each(sortByGroupSummaryInfo || [], function () {\n            var sortOrder = this.sortOrder;\n            var groupColumn = this.groupColumn;\n\n            var summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);\n\n            if (summaryItemIndex < 0) {\n              return;\n            }\n\n            var selector = function (data) {\n              return getGroupAggregates(data)[summaryItemIndex];\n            };\n\n            if (isDefined(groupColumn)) {\n              groupColumn = columnsController.columnOption(groupColumn);\n\n              that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n            } else {\n              each(groupColumns, function (groupIndex, groupColumn) {\n                that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n              });\n            }\n          });\n          return sortByGroups;\n        },\n        _createDataSourceAdapterCore: function (dataSource, remoteOperations) {\n          var that = this;\n          var dataSourceAdapter = this.callBase(dataSource, remoteOperations);\n          dataSourceAdapter.summaryGetter(function (currentRemoteOperations) {\n            return that._getSummaryOptions(currentRemoteOperations || remoteOperations);\n          });\n          return dataSourceAdapter;\n        },\n        _getSummaryOptions: function (remoteOperations) {\n          var that = this;\n          var groupSummaryItems = that.option(\"summary.groupItems\");\n          var totalSummaryItems = that.option(\"summary.totalItems\");\n          var sortByGroupSummaryInfo = that.option(\"sortByGroupSummaryInfo\");\n\n          var groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary);\n\n          var totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary);\n\n          if (groupAggregates.length || totalAggregates.length) {\n            return {\n              groupAggregates: groupAggregates,\n              totalAggregates: totalAggregates,\n              sortByGroups: function () {\n                return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems);\n              }\n            };\n          }\n        },\n        publicMethods: function () {\n          var methods = this.callBase();\n          methods.push(\"getTotalSummaryValue\");\n          return methods;\n        },\n        getTotalSummaryValue: function (summaryItemName) {\n          var summaryItemIndex = this._findSummaryItem(this.option(\"summary.totalItems\"), summaryItemName);\n\n          var aggregates = this._dataSource.totalAggregates();\n\n          if (aggregates.length && summaryItemIndex > -1) {\n            return aggregates[summaryItemIndex];\n          }\n        },\n        optionChanged: function (args) {\n          if (\"summary\" === args.name || \"sortByGroupSummaryInfo\" === args.name) {\n            args.name = \"dataSource\";\n          }\n\n          this.callBase(args);\n        },\n        init: function () {\n          this._footerItems = [];\n          this.callBase();\n        },\n        footerItems: function () {\n          return this._footerItems;\n        }\n      },\n      editing: {\n        _refreshSummary: function () {\n          if (recalculateWhileEditing(this) && !this.isSaving()) {\n            this._dataController.refresh({\n              load: true,\n              changesOnly: true\n            });\n          }\n        },\n        _addChange: function (params) {\n          var result = this.callBase.apply(this, arguments);\n\n          if (params.type) {\n            this._refreshSummary();\n          }\n\n          return result;\n        },\n        _removeChange: function () {\n          var result = this.callBase.apply(this, arguments);\n\n          this._refreshSummary();\n\n          return result;\n        },\n        cancelEditData: function () {\n          var result = this.callBase.apply(this, arguments);\n\n          this._refreshSummary();\n\n          return result;\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n          row && $row.addClass(row.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE ? DATAGRID_GROUP_FOOTER_CLASS : \"\");\n          return $row;\n        },\n        _renderCells: function ($row, options) {\n          this.callBase.apply(this, arguments);\n\n          if (\"group\" === options.row.rowType && options.row.summaryCells && options.row.summaryCells.length) {\n            this._renderGroupSummaryCells($row, options);\n          }\n        },\n        _hasAlignByColumnSummaryItems: function (columnIndex, options) {\n          return !isDefined(options.columns[columnIndex].groupIndex) && options.row.summaryCells[columnIndex].length;\n        },\n        _getAlignByColumnCellCount: function (groupCellColSpan, options) {\n          var alignByColumnCellCount = 0;\n\n          for (var i = 1; i < groupCellColSpan; i++) {\n            var columnIndex = options.row.summaryCells.length - i;\n            alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options) ? i : alignByColumnCellCount;\n          }\n\n          return alignByColumnCellCount;\n        },\n        _renderGroupSummaryCells: function ($row, options) {\n          var $groupCell = $row.children().last();\n          var groupCellColSpan = Number($groupCell.attr(\"colSpan\")) || 1;\n\n          var alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\n\n          this._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount);\n        },\n        _renderGroupSummaryCellsCore: function ($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\n          if (alignByColumnCellCount > 0) {\n            $groupCell.attr(\"colSpan\", groupCellColSpan - alignByColumnCellCount);\n\n            for (var i = 0; i < alignByColumnCellCount; i++) {\n              var columnIndex = options.columns.length - alignByColumnCellCount + i;\n\n              this._renderCell($groupCell.parent(), extend({\n                column: options.columns[columnIndex],\n                columnIndex: this._getSummaryCellIndex(columnIndex, options.columns)\n              }, options));\n            }\n          }\n        },\n        _getSummaryCellIndex: function (columnIndex) {\n          return columnIndex;\n        },\n        _getCellTemplate: function (options) {\n          if (!options.column.command && !isDefined(options.column.groupIndex) && options.summaryItems && options.summaryItems.length) {\n            return renderSummaryCell;\n          } else {\n            return this.callBase(options);\n          }\n        },\n        _getCellOptions: function (options) {\n          var parameters = this.callBase(options);\n\n          if (options.row.summaryCells) {\n            return extend(parameters, getSummaryCellOptions(this, options));\n          } else {\n            return parameters;\n          }\n        }\n      }\n    }\n  }\n});","map":{"version":3,"names":["$","noop","isDefined","isPlainObject","isEmptyObject","isString","isFunction","each","map","extend","compileGetter","errors","gridCore","messageLocalization","dataSourceAdapter","ColumnsView","AggregateCalculator","dataQuery","storeHelper","normalizeSortingInfo","DATAGRID_TOTAL_FOOTER_CLASS","DATAGRID_SUMMARY_ITEM_CLASS","DATAGRID_TEXT_CONTENT_CLASS","DATAGRID_GROUP_FOOTER_CLASS","DATAGRID_GROUP_TEXT_CONTENT_CLASS","DATAGRID_NOWRAP_CLASS","DATAGRID_FOOTER_ROW_CLASS","DATAGRID_GROUP_FOOTER_ROW_TYPE","DATAGRID_TOTAL_FOOTER_ROW_TYPE","renderSummaryCell","cell","options","$cell","column","summaryItems","$summaryItems","command","i","length","summaryItem","push","css","alignment","addClass","cssClass","toggleClass","rowType","text","getSummaryText","summaryTexts","append","getSummaryCellOptions","that","option","totalItem","row","summaryCells","columnIndex","getGroupAggregates","data","summary","aggregates","recalculateWhileEditing","FooterView","inherit","_getRows","_dataController","footerItems","_getCellOptions","callBase","_renderCellContent","apply","arguments","_renderCore","change","needUpdateScrollLeft","columnIndices","element","empty","_updateContent","_renderTable","_updateScrollLeftPosition","$newTable","changeType","_waitAsyncTemplates","done","$row","getTableElement","find","$newRow","_updateCells","_rowClick","e","item","rowIndex","executeAction","_columnOptionChanged","optionNames","changeTypes","grouping","width","visibleWidth","_handleDataChanged","repaintChangesOnly","totalColumnIndices","render","_createRow","getHeight","getElementHeight","isVisible","SummaryDataSourceAdapterExtender","init","_totalAggregates","_summaryGetter","summaryGetter","_summary","totalAggregates","isLastLevelGroupItemsPagingLocal","sortByGroupsInfo","sortByGroups","sortLastLevelGroupItems","items","groups","paths","groupedItems","multiLevelGroup","toArray","result","forEach","path","forEachGroup","groupCount","callback","key","pop","itemsPath","toString","concat","SummaryDataSourceAdapterClientExtender","calculateAggregates","groupLevel","calculator","editingController","getController","insertedData","getInsertedData","applyAddedData","removedData","getRemovedData","applyRemovedData","updatedData","updatedItems","Object","defineProperty","get","set","value","filter","indexOf","groupAggregates","calculate","sortGroupsBySummary","group","sortGroupsBySummaryCore","sorts","query","index","sortBy","selector","desc","thenBy","enumerate","sortedItems","slice","_customizeRemoteOperations","remoteOperations","isCustomLoading","storeLoadOptions","isLoadingAll","groupSummary","paging","totalSummary","cachedExtra","cachedData","extra","_handleDataLoadedCore","loadOptions","_options$cachedData","_options$cachedData$e","operationTypes","hasOperations","keys","some","type","registerModule","defaultOptions","groupItems","totalItems","calculateCustomSummary","skipEmptyValues","texts","sum","format","sumOtherColumn","min","minOtherColumn","max","maxOtherColumn","avg","avgOtherColumn","count","sortByGroupSummaryInfo","views","footerView","extenders","controllers","_isDataColumn","groupIndex","showWhenGrouped","_isGroupFooterVisible","groupItem","_columnsController","columnOption","showInColumn","showInGroupFooter","_processGroupItems","isGroupFooterVisible","collectContinuationItems","isContinuationOnNextPage","values","_processGroupItem","summaryGroupItems","groupColumnIndex","afterGroupColumnIndex","visibleColumns","visibleIndex","prevColumn","_calculateSummaryCells","alignByColumn","calculateTargetColumnIndex","isGroupRow","summaryCellsByColumns","summaryIndex","aggregate","valueFormat","summaryType","getFormatByDataType","dataType","deserializeValue","columnCaption","caption","_getSummaryCells","summaryTotalItems","columnsController","getVisibleColumns","_updateItemsCore","dataSource","_dataSource","_footerItems","oldSummaryCells","summaryCell","JSON","stringify","_prepareUnsavedDataSelector","getUpdatedData","_prepareAggregateSelector","aggregator","Number","_getAggregates","commonSkipEmptyValues","calculateCellValue","bind","dataField","log","component","name","summaryProcess","seed","totalValue","step","finalize","_addSortInfo","groupColumn","sortOrder","_findSummaryItem","summaryItemIndex","_getSummarySortByGroups","groupSummaryItems","groupColumns","getGroupColumns","_createDataSourceAdapterCore","currentRemoteOperations","_getSummaryOptions","totalSummaryItems","publicMethods","methods","getTotalSummaryValue","summaryItemName","optionChanged","args","editing","_refreshSummary","isSaving","refresh","load","changesOnly","_addChange","params","_removeChange","cancelEditData","rowsView","_renderCells","_renderGroupSummaryCells","_hasAlignByColumnSummaryItems","columns","_getAlignByColumnCellCount","groupCellColSpan","alignByColumnCellCount","$groupCell","children","last","attr","_renderGroupSummaryCellsCore","_renderCell","parent","_getSummaryCellIndex","_getCellTemplate","parameters"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/devextreme/esm/ui/data_grid/ui.data_grid.summary.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.summary.js)\r\n * Version: 22.2.4\r\n * Build date: Thu Jan 19 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    isDefined,\r\n    isPlainObject,\r\n    isEmptyObject,\r\n    isString,\r\n    isFunction\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each,\r\n    map\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    compileGetter\r\n} from \"../../core/utils/data\";\r\nimport errors from \"../widget/ui.errors\";\r\nimport gridCore from \"./ui.data_grid.core\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport dataSourceAdapter from \"./ui.data_grid.data_source_adapter\";\r\nimport {\r\n    ColumnsView\r\n} from \"../grid_core/ui.grid_core.columns_view\";\r\nimport AggregateCalculator from \"./aggregate_calculator\";\r\nimport dataQuery from \"../../data/query\";\r\nimport storeHelper from \"../../data/store_helper\";\r\nimport {\r\n    normalizeSortingInfo\r\n} from \"../../data/utils\";\r\nvar DATAGRID_TOTAL_FOOTER_CLASS = \"dx-datagrid-total-footer\";\r\nvar DATAGRID_SUMMARY_ITEM_CLASS = \"dx-datagrid-summary-item\";\r\nvar DATAGRID_TEXT_CONTENT_CLASS = \"dx-datagrid-text-content\";\r\nvar DATAGRID_GROUP_FOOTER_CLASS = \"dx-datagrid-group-footer\";\r\nvar DATAGRID_GROUP_TEXT_CONTENT_CLASS = \"dx-datagrid-group-text-content\";\r\nvar DATAGRID_NOWRAP_CLASS = \"dx-datagrid-nowrap\";\r\nvar DATAGRID_FOOTER_ROW_CLASS = \"dx-footer-row\";\r\nvar DATAGRID_GROUP_FOOTER_ROW_TYPE = \"groupFooter\";\r\nvar DATAGRID_TOTAL_FOOTER_ROW_TYPE = \"totalFooter\";\r\nexport var renderSummaryCell = function(cell, options) {\r\n    var $cell = $(cell);\r\n    var column = options.column;\r\n    var summaryItems = options.summaryItems;\r\n    var $summaryItems = [];\r\n    if (!column.command && summaryItems) {\r\n        for (var i = 0; i < summaryItems.length; i++) {\r\n            var summaryItem = summaryItems[i];\r\n            $summaryItems.push($(\"<div>\").css(\"textAlign\", summaryItem.alignment || column.alignment).addClass(DATAGRID_SUMMARY_ITEM_CLASS).addClass(DATAGRID_TEXT_CONTENT_CLASS).addClass(summaryItem.cssClass).toggleClass(DATAGRID_GROUP_TEXT_CONTENT_CLASS, \"group\" === options.rowType).text(gridCore.getSummaryText(summaryItem, options.summaryTexts)))\r\n        }\r\n        $cell.append($summaryItems)\r\n    }\r\n};\r\nvar getSummaryCellOptions = function(that, options) {\r\n    var summaryTexts = that.option(\"summary.texts\") || {};\r\n    return {\r\n        totalItem: options.row,\r\n        summaryItems: options.row.summaryCells[options.columnIndex],\r\n        summaryTexts: summaryTexts\r\n    }\r\n};\r\nvar getGroupAggregates = function(data) {\r\n    return data.summary || data.aggregates || []\r\n};\r\nvar recalculateWhileEditing = function(that) {\r\n    return that.option(\"summary.recalculateWhileEditing\")\r\n};\r\nexport var FooterView = ColumnsView.inherit({\r\n    _getRows: function() {\r\n        return this._dataController.footerItems()\r\n    },\r\n    _getCellOptions: function(options) {\r\n        return extend(this.callBase(options), getSummaryCellOptions(this, options))\r\n    },\r\n    _renderCellContent: function($cell, options) {\r\n        renderSummaryCell($cell, options);\r\n        this.callBase.apply(this, arguments)\r\n    },\r\n    _renderCore: function(change) {\r\n        var needUpdateScrollLeft = false;\r\n        var totalItem = this._dataController.footerItems()[0];\r\n        if (!change || !change.columnIndices) {\r\n            this.element().empty().addClass(DATAGRID_TOTAL_FOOTER_CLASS).toggleClass(DATAGRID_NOWRAP_CLASS, !this.option(\"wordWrapEnabled\"));\r\n            needUpdateScrollLeft = true\r\n        }\r\n        if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {\r\n            this._updateContent(this._renderTable({\r\n                change: change\r\n            }), change);\r\n            needUpdateScrollLeft && this._updateScrollLeftPosition()\r\n        }\r\n    },\r\n    _updateContent: function($newTable, change) {\r\n        if (change && \"update\" === change.changeType && change.columnIndices) {\r\n            return this._waitAsyncTemplates(change).done(() => {\r\n                var $row = this.getTableElement().find(\".dx-row\");\r\n                var $newRow = $newTable.find(\".dx-row\");\r\n                this._updateCells($row, $newRow, change.columnIndices[0])\r\n            })\r\n        } else {\r\n            return this.callBase.apply(this, arguments)\r\n        }\r\n    },\r\n    _rowClick: function(e) {\r\n        var item = this._dataController.footerItems()[e.rowIndex] || {};\r\n        this.executeAction(\"onRowClick\", extend({}, e, item))\r\n    },\r\n    _columnOptionChanged: function(e) {\r\n        var optionNames = e.optionNames;\r\n        if (e.changeTypes.grouping) {\r\n            return\r\n        }\r\n        if (optionNames.width || optionNames.visibleWidth) {\r\n            this.callBase(e)\r\n        }\r\n    },\r\n    _handleDataChanged: function(e) {\r\n        var changeType = e.changeType;\r\n        if (\"update\" === e.changeType && e.repaintChangesOnly) {\r\n            if (!e.totalColumnIndices) {\r\n                this.render()\r\n            } else if (e.totalColumnIndices.length) {\r\n                this.render(null, {\r\n                    changeType: \"update\",\r\n                    columnIndices: [e.totalColumnIndices]\r\n                })\r\n            }\r\n        } else if (\"refresh\" === changeType || \"append\" === changeType || \"prepend\" === changeType) {\r\n            this.render()\r\n        }\r\n    },\r\n    _createRow: function(row) {\r\n        var $row = this.callBase.apply(this, arguments);\r\n        if (row.rowType === DATAGRID_TOTAL_FOOTER_ROW_TYPE) {\r\n            $row.addClass(DATAGRID_FOOTER_ROW_CLASS)\r\n        }\r\n        return $row\r\n    },\r\n    getHeight: function() {\r\n        return this.getElementHeight()\r\n    },\r\n    isVisible: function() {\r\n        return !!this._dataController.footerItems().length\r\n    }\r\n});\r\nvar SummaryDataSourceAdapterExtender = {\r\n    init: function() {\r\n        this.callBase.apply(this, arguments);\r\n        this._totalAggregates = [];\r\n        this._summaryGetter = noop\r\n    },\r\n    summaryGetter: function(_summaryGetter) {\r\n        if (!arguments.length) {\r\n            return this._summaryGetter\r\n        }\r\n        if (isFunction(_summaryGetter)) {\r\n            this._summaryGetter = _summaryGetter\r\n        }\r\n    },\r\n    summary: function(_summary) {\r\n        if (!arguments.length) {\r\n            return this._summaryGetter()\r\n        }\r\n        this._summaryGetter = function() {\r\n            return _summary\r\n        }\r\n    },\r\n    totalAggregates: function() {\r\n        return this._totalAggregates\r\n    },\r\n    isLastLevelGroupItemsPagingLocal: function() {\r\n        var summary = this.summary();\r\n        var sortByGroupsInfo = summary && summary.sortByGroups();\r\n        return sortByGroupsInfo && sortByGroupsInfo.length\r\n    },\r\n    sortLastLevelGroupItems: function(items, groups, paths) {\r\n        var groupedItems = storeHelper.multiLevelGroup(dataQuery(items), groups).toArray();\r\n        var result = [];\r\n        paths.forEach((function(path) {\r\n            ! function forEachGroup(groups, groupCount, callback, path) {\r\n                path = path || [];\r\n                for (var i = 0; i < groups.length; i++) {\r\n                    path.push(groups[i].key);\r\n                    if (1 === groupCount) {\r\n                        callback(path, groups[i].items)\r\n                    } else {\r\n                        forEachGroup(groups[i].items, groupCount - 1, callback, path)\r\n                    }\r\n                    path.pop()\r\n                }\r\n            }(groupedItems, groups.length, (function(itemsPath, items) {\r\n                if (path.toString() === itemsPath.toString()) {\r\n                    result = result.concat(items)\r\n                }\r\n            }))\r\n        }));\r\n        return result\r\n    }\r\n};\r\nvar SummaryDataSourceAdapterClientExtender = function() {\r\n    var calculateAggregates = function(that, summary, data, groupLevel) {\r\n        var calculator;\r\n        if (recalculateWhileEditing(that)) {\r\n            var editingController = that.getController(\"editing\");\r\n            if (editingController) {\r\n                var insertedData = editingController.getInsertedData();\r\n                if (insertedData.length) {\r\n                    data = function applyAddedData(data, insertedData, groupLevel) {\r\n                        if (groupLevel) {\r\n                            return applyAddedData(data, insertedData.map(item => ({\r\n                                items: [item]\r\n                            }), groupLevel - 1))\r\n                        }\r\n                        return data.concat(insertedData)\r\n                    }(data, insertedData, groupLevel)\r\n                }\r\n                var removedData = editingController.getRemovedData();\r\n                if (removedData.length) {\r\n                    data = function applyRemovedData(data, removedData, groupLevel) {\r\n                        if (groupLevel) {\r\n                            return data.map(data => {\r\n                                var updatedData = {};\r\n                                var updatedItems = applyRemovedData(data.items || [], removedData, groupLevel - 1);\r\n                                Object.defineProperty(updatedData, \"aggregates\", {\r\n                                    get: () => data.aggregates,\r\n                                    set: value => {\r\n                                        data.aggregates = value\r\n                                    }\r\n                                });\r\n                                return extend(updatedData, data, {\r\n                                    items: updatedItems\r\n                                })\r\n                            })\r\n                        }\r\n                        return data.filter(data => removedData.indexOf(data) < 0)\r\n                    }(data, removedData, groupLevel)\r\n                }\r\n            }\r\n        }\r\n        if (summary) {\r\n            calculator = new AggregateCalculator({\r\n                totalAggregates: summary.totalAggregates,\r\n                groupAggregates: summary.groupAggregates,\r\n                data: data,\r\n                groupLevel: groupLevel\r\n            });\r\n            calculator.calculate()\r\n        }\r\n        return calculator ? calculator.totalAggregates() : []\r\n    };\r\n    var sortGroupsBySummary = function(data, group, summary) {\r\n        var sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();\r\n        if (sortByGroups && sortByGroups.length) {\r\n            return function sortGroupsBySummaryCore(items, groups, sortByGroups) {\r\n                if (!items || !groups.length) {\r\n                    return items\r\n                }\r\n                var group = groups[0];\r\n                var sorts = sortByGroups[0];\r\n                var query;\r\n                if (group && sorts && sorts.length) {\r\n                    query = dataQuery(items);\r\n                    each(sorts, (function(index) {\r\n                        if (0 === index) {\r\n                            query = query.sortBy(this.selector, this.desc)\r\n                        } else {\r\n                            query = query.thenBy(this.selector, this.desc)\r\n                        }\r\n                    }));\r\n                    query.enumerate().done((function(sortedItems) {\r\n                        items = sortedItems\r\n                    }))\r\n                }\r\n                groups = groups.slice(1);\r\n                sortByGroups = sortByGroups.slice(1);\r\n                if (groups.length && sortByGroups.length) {\r\n                    each(items, (function() {\r\n                        this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups)\r\n                    }))\r\n                }\r\n                return items\r\n            }(data, group, sortByGroups)\r\n        }\r\n        return data\r\n    };\r\n    return {\r\n        _customizeRemoteOperations: function(options) {\r\n            var summary = this.summary();\r\n            if (summary) {\r\n                if (options.remoteOperations.summary) {\r\n                    if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\r\n                        if (options.storeLoadOptions.group) {\r\n                            if (options.remoteOperations.grouping) {\r\n                                options.storeLoadOptions.groupSummary = summary.groupAggregates\r\n                            } else if (summary.groupAggregates.length) {\r\n                                options.remoteOperations.paging = false\r\n                            }\r\n                        }\r\n                        options.storeLoadOptions.totalSummary = summary.totalAggregates\r\n                    }\r\n                } else if (summary.totalAggregates.length || summary.groupAggregates.length && options.storeLoadOptions.group) {\r\n                    options.remoteOperations.paging = false\r\n                }\r\n            }\r\n            this.callBase.apply(this, arguments);\r\n            var cachedExtra = options.cachedData.extra;\r\n            if (cachedExtra && cachedExtra.summary && !options.isCustomLoading) {\r\n                options.storeLoadOptions.totalSummary = void 0\r\n            }\r\n        },\r\n        _handleDataLoadedCore: function(options) {\r\n            var groups = normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group || []);\r\n            var remoteOperations = options.remoteOperations || {};\r\n            var summary = this.summaryGetter()(remoteOperations);\r\n            if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\r\n                if (remoteOperations.summary) {\r\n                    if (!remoteOperations.paging && groups.length && summary) {\r\n                        if (!remoteOperations.grouping) {\r\n                            calculateAggregates(this, {\r\n                                groupAggregates: summary.groupAggregates\r\n                            }, options.data, groups.length)\r\n                        }\r\n                        options.data = sortGroupsBySummary(options.data, groups, summary)\r\n                    }\r\n                } else if (!remoteOperations.paging && summary) {\r\n                    var _options$cachedData, _options$cachedData$e;\r\n                    var operationTypes = options.operationTypes || {};\r\n                    var hasOperations = Object.keys(operationTypes).some(type => operationTypes[type]);\r\n                    if (!hasOperations || !(null !== (_options$cachedData = options.cachedData) && void 0 !== _options$cachedData && null !== (_options$cachedData$e = _options$cachedData.extra) && void 0 !== _options$cachedData$e && _options$cachedData$e.summary) || groups.length && summary.groupAggregates.length) {\r\n                        var totalAggregates = calculateAggregates(this, summary, options.data, groups.length);\r\n                        options.extra = isPlainObject(options.extra) ? options.extra : {};\r\n                        options.extra.summary = totalAggregates;\r\n                        if (options.cachedData) {\r\n                            options.cachedData.extra = options.extra\r\n                        }\r\n                    }\r\n                    options.data = sortGroupsBySummary(options.data, groups, summary)\r\n                }\r\n            }\r\n            if (!options.isCustomLoading) {\r\n                this._totalAggregates = options.extra && options.extra.summary || this._totalAggregates\r\n            }\r\n            this.callBase(options)\r\n        }\r\n    }\r\n}();\r\ndataSourceAdapter.extend(SummaryDataSourceAdapterExtender);\r\ndataSourceAdapter.extend(SummaryDataSourceAdapterClientExtender);\r\ngridCore.registerModule(\"summary\", {\r\n    defaultOptions: function() {\r\n        return {\r\n            summary: {\r\n                groupItems: void 0,\r\n                totalItems: void 0,\r\n                calculateCustomSummary: void 0,\r\n                skipEmptyValues: true,\r\n                recalculateWhileEditing: false,\r\n                texts: {\r\n                    sum: messageLocalization.format(\"dxDataGrid-summarySum\"),\r\n                    sumOtherColumn: messageLocalization.format(\"dxDataGrid-summarySumOtherColumn\"),\r\n                    min: messageLocalization.format(\"dxDataGrid-summaryMin\"),\r\n                    minOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMinOtherColumn\"),\r\n                    max: messageLocalization.format(\"dxDataGrid-summaryMax\"),\r\n                    maxOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMaxOtherColumn\"),\r\n                    avg: messageLocalization.format(\"dxDataGrid-summaryAvg\"),\r\n                    avgOtherColumn: messageLocalization.format(\"dxDataGrid-summaryAvgOtherColumn\"),\r\n                    count: messageLocalization.format(\"dxDataGrid-summaryCount\")\r\n                }\r\n            },\r\n            sortByGroupSummaryInfo: void 0\r\n        }\r\n    },\r\n    views: {\r\n        footerView: FooterView\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                _isDataColumn: function(column) {\r\n                    return column && (!isDefined(column.groupIndex) || column.showWhenGrouped)\r\n                },\r\n                _isGroupFooterVisible: function() {\r\n                    var groupItems = this.option(\"summary.groupItems\") || [];\r\n                    for (var i = 0; i < groupItems.length; i++) {\r\n                        var groupItem = groupItems[i];\r\n                        var column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);\r\n                        if (groupItem.showInGroupFooter && this._isDataColumn(column)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                    return false\r\n                },\r\n                _processGroupItems: function(items, groupCount, options) {\r\n                    var data = options && options.data;\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    if (options) {\r\n                        if (void 0 === options.isGroupFooterVisible) {\r\n                            options.isGroupFooterVisible = this._isGroupFooterVisible()\r\n                        }\r\n                        if (data && data.items && options.isGroupFooterVisible && (options.collectContinuationItems || !data.isContinuationOnNextPage)) {\r\n                            result.push({\r\n                                rowType: DATAGRID_GROUP_FOOTER_ROW_TYPE,\r\n                                key: options.path.slice(),\r\n                                data: data,\r\n                                groupIndex: options.path.length - 1,\r\n                                values: []\r\n                            })\r\n                        }\r\n                    }\r\n                    return result\r\n                },\r\n                _processGroupItem: function(groupItem, options) {\r\n                    var that = this;\r\n                    if (!options.summaryGroupItems) {\r\n                        options.summaryGroupItems = that.option(\"summary.groupItems\") || []\r\n                    }\r\n                    if (\"group\" === groupItem.rowType) {\r\n                        var groupColumnIndex = -1;\r\n                        var afterGroupColumnIndex = -1;\r\n                        each(options.visibleColumns, (function(visibleIndex) {\r\n                            var prevColumn = options.visibleColumns[visibleIndex - 1];\r\n                            if (groupItem.groupIndex === this.groupIndex) {\r\n                                groupColumnIndex = this.index\r\n                            }\r\n                            if (visibleIndex > 0 && \"expand\" === prevColumn.command && \"expand\" !== this.command) {\r\n                                afterGroupColumnIndex = this.index\r\n                            }\r\n                        }));\r\n                        groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, (function(summaryItem, column) {\r\n                            if (summaryItem.showInGroupFooter) {\r\n                                return -1\r\n                            }\r\n                            if (summaryItem.alignByColumn && column && !isDefined(column.groupIndex) && column.index !== afterGroupColumnIndex) {\r\n                                return column.index\r\n                            } else {\r\n                                return groupColumnIndex\r\n                            }\r\n                        }), true)\r\n                    }\r\n                    if (groupItem.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE) {\r\n                        groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, (function(summaryItem, column) {\r\n                            return summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1\r\n                        }))\r\n                    }\r\n                    return groupItem\r\n                },\r\n                _calculateSummaryCells: function(summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex, isGroupRow) {\r\n                    var that = this;\r\n                    var summaryCells = [];\r\n                    var summaryCellsByColumns = {};\r\n                    each(summaryItems, (function(summaryIndex, summaryItem) {\r\n                        var column = that._columnsController.columnOption(summaryItem.column);\r\n                        var showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column;\r\n                        var columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);\r\n                        if (columnIndex >= 0) {\r\n                            if (!summaryCellsByColumns[columnIndex]) {\r\n                                summaryCellsByColumns[columnIndex] = []\r\n                            }\r\n                            var aggregate = aggregates[summaryIndex];\r\n                            if (aggregate === aggregate) {\r\n                                var valueFormat;\r\n                                if (isDefined(summaryItem.valueFormat)) {\r\n                                    valueFormat = summaryItem.valueFormat\r\n                                } else if (\"count\" !== summaryItem.summaryType) {\r\n                                    valueFormat = gridCore.getFormatByDataType(column && column.dataType)\r\n                                }\r\n                                summaryCellsByColumns[columnIndex].push(extend({}, summaryItem, {\r\n                                    value: isString(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,\r\n                                    valueFormat: valueFormat,\r\n                                    columnCaption: column && column.index !== columnIndex ? column.caption : void 0\r\n                                }))\r\n                            }\r\n                        }\r\n                    }));\r\n                    if (!isEmptyObject(summaryCellsByColumns)) {\r\n                        visibleColumns.forEach((column, visibleIndex) => {\r\n                            var prevColumn = visibleColumns[visibleIndex - 1];\r\n                            var columnIndex = isGroupRow && (\"expand\" === (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command) || \"expand\" === column.command) ? null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.index : column.index;\r\n                            summaryCells.push(summaryCellsByColumns[columnIndex] || [])\r\n                        })\r\n                    }\r\n                    return summaryCells\r\n                },\r\n                _getSummaryCells: function(summaryTotalItems, totalAggregates) {\r\n                    var that = this;\r\n                    var columnsController = that._columnsController;\r\n                    return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), (function(summaryItem, column) {\r\n                        return that._isDataColumn(column) ? column.index : -1\r\n                    }))\r\n                },\r\n                _updateItemsCore: function(change) {\r\n                    var summaryCells;\r\n                    var dataSource = this._dataSource;\r\n                    var footerItems = this._footerItems;\r\n                    var oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells;\r\n                    var summaryTotalItems = this.option(\"summary.totalItems\");\r\n                    this._footerItems = [];\r\n                    if (dataSource && summaryTotalItems && summaryTotalItems.length) {\r\n                        var totalAggregates = dataSource.totalAggregates();\r\n                        summaryCells = this._getSummaryCells(summaryTotalItems, totalAggregates);\r\n                        if (change && change.repaintChangesOnly && oldSummaryCells) {\r\n                            change.totalColumnIndices = summaryCells.map((function(summaryCell, index) {\r\n                                if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index])) {\r\n                                    return index\r\n                                }\r\n                                return -1\r\n                            })).filter(index => index >= 0)\r\n                        }\r\n                        if (summaryCells.length) {\r\n                            this._footerItems.push({\r\n                                rowType: DATAGRID_TOTAL_FOOTER_ROW_TYPE,\r\n                                summaryCells: summaryCells\r\n                            })\r\n                        }\r\n                    }\r\n                    this.callBase(change)\r\n                },\r\n                _prepareUnsavedDataSelector: function(selector) {\r\n                    if (recalculateWhileEditing(this)) {\r\n                        var editingController = this.getController(\"editing\");\r\n                        if (editingController) {\r\n                            return function(data) {\r\n                                data = editingController.getUpdatedData(data);\r\n                                return selector(data)\r\n                            }\r\n                        }\r\n                    }\r\n                    return selector\r\n                },\r\n                _prepareAggregateSelector: function(selector, aggregator) {\r\n                    selector = this._prepareUnsavedDataSelector(selector);\r\n                    if (\"avg\" === aggregator || \"sum\" === aggregator) {\r\n                        return function(data) {\r\n                            var value = selector(data);\r\n                            return isDefined(value) ? Number(value) : value\r\n                        }\r\n                    }\r\n                    return selector\r\n                },\r\n                _getAggregates: function(summaryItems, remoteOperations) {\r\n                    var that = this;\r\n                    var columnsController = that.getController(\"columns\");\r\n                    var calculateCustomSummary = that.option(\"summary.calculateCustomSummary\");\r\n                    var commonSkipEmptyValues = that.option(\"summary.skipEmptyValues\");\r\n                    return map(summaryItems || [], (function(summaryItem) {\r\n                        var column = columnsController.columnOption(summaryItem.column);\r\n                        var calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : compileGetter(column ? column.dataField : summaryItem.column);\r\n                        var aggregator = summaryItem.summaryType || \"count\";\r\n                        var skipEmptyValues = isDefined(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;\r\n                        if (remoteOperations) {\r\n                            return {\r\n                                selector: summaryItem.column,\r\n                                summaryType: aggregator\r\n                            }\r\n                        } else {\r\n                            var selector = that._prepareAggregateSelector(calculateCellValue, aggregator);\r\n                            if (\"custom\" === aggregator) {\r\n                                if (!calculateCustomSummary) {\r\n                                    errors.log(\"E1026\");\r\n                                    calculateCustomSummary = function() {}\r\n                                }\r\n                                var options = {\r\n                                    component: that.component,\r\n                                    name: summaryItem.name\r\n                                };\r\n                                calculateCustomSummary(options);\r\n                                options.summaryProcess = \"calculate\";\r\n                                aggregator = {\r\n                                    seed: function(groupIndex) {\r\n                                        options.summaryProcess = \"start\";\r\n                                        options.totalValue = void 0;\r\n                                        options.groupIndex = groupIndex;\r\n                                        delete options.value;\r\n                                        calculateCustomSummary(options);\r\n                                        return options.totalValue\r\n                                    },\r\n                                    step: function(totalValue, value) {\r\n                                        options.summaryProcess = \"calculate\";\r\n                                        options.totalValue = totalValue;\r\n                                        options.value = value;\r\n                                        calculateCustomSummary(options);\r\n                                        return options.totalValue\r\n                                    },\r\n                                    finalize: function(totalValue) {\r\n                                        options.summaryProcess = \"finalize\";\r\n                                        options.totalValue = totalValue;\r\n                                        delete options.value;\r\n                                        calculateCustomSummary(options);\r\n                                        return options.totalValue\r\n                                    }\r\n                                }\r\n                            }\r\n                            return {\r\n                                selector: selector,\r\n                                aggregator: aggregator,\r\n                                skipEmptyValues: skipEmptyValues\r\n                            }\r\n                        }\r\n                    }))\r\n                },\r\n                _addSortInfo: function(sortByGroups, groupColumn, selector, sortOrder) {\r\n                    if (groupColumn) {\r\n                        var groupIndex = groupColumn.groupIndex;\r\n                        sortOrder = sortOrder || groupColumn.sortOrder;\r\n                        if (isDefined(groupIndex)) {\r\n                            sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];\r\n                            sortByGroups[groupIndex].push({\r\n                                selector: selector,\r\n                                desc: \"desc\" === sortOrder\r\n                            })\r\n                        }\r\n                    }\r\n                },\r\n                _findSummaryItem: function(summaryItems, name) {\r\n                    var summaryItemIndex = -1;\r\n                    if (isDefined(name)) {\r\n                        each(summaryItems || [], (function(index) {\r\n                            if (this.name === name || index === name || this.summaryType === name || this.column === name || (summaryItem = this, summaryType = summaryItem.summaryType, column = summaryItem.column, summaryType && column && summaryType + \"_\" + column) === name) {\r\n                                summaryItemIndex = index;\r\n                                return false\r\n                            }\r\n                            var summaryItem, summaryType, column\r\n                        }))\r\n                    }\r\n                    return summaryItemIndex\r\n                },\r\n                _getSummarySortByGroups: function(sortByGroupSummaryInfo, groupSummaryItems) {\r\n                    var that = this;\r\n                    var columnsController = that._columnsController;\r\n                    var groupColumns = columnsController.getGroupColumns();\r\n                    var sortByGroups = [];\r\n                    if (!groupSummaryItems || !groupSummaryItems.length) {\r\n                        return\r\n                    }\r\n                    each(sortByGroupSummaryInfo || [], (function() {\r\n                        var sortOrder = this.sortOrder;\r\n                        var groupColumn = this.groupColumn;\r\n                        var summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);\r\n                        if (summaryItemIndex < 0) {\r\n                            return\r\n                        }\r\n                        var selector = function(data) {\r\n                            return getGroupAggregates(data)[summaryItemIndex]\r\n                        };\r\n                        if (isDefined(groupColumn)) {\r\n                            groupColumn = columnsController.columnOption(groupColumn);\r\n                            that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder)\r\n                        } else {\r\n                            each(groupColumns, (function(groupIndex, groupColumn) {\r\n                                that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder)\r\n                            }))\r\n                        }\r\n                    }));\r\n                    return sortByGroups\r\n                },\r\n                _createDataSourceAdapterCore: function(dataSource, remoteOperations) {\r\n                    var that = this;\r\n                    var dataSourceAdapter = this.callBase(dataSource, remoteOperations);\r\n                    dataSourceAdapter.summaryGetter((function(currentRemoteOperations) {\r\n                        return that._getSummaryOptions(currentRemoteOperations || remoteOperations)\r\n                    }));\r\n                    return dataSourceAdapter\r\n                },\r\n                _getSummaryOptions: function(remoteOperations) {\r\n                    var that = this;\r\n                    var groupSummaryItems = that.option(\"summary.groupItems\");\r\n                    var totalSummaryItems = that.option(\"summary.totalItems\");\r\n                    var sortByGroupSummaryInfo = that.option(\"sortByGroupSummaryInfo\");\r\n                    var groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary);\r\n                    var totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary);\r\n                    if (groupAggregates.length || totalAggregates.length) {\r\n                        return {\r\n                            groupAggregates: groupAggregates,\r\n                            totalAggregates: totalAggregates,\r\n                            sortByGroups: function() {\r\n                                return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems)\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    var methods = this.callBase();\r\n                    methods.push(\"getTotalSummaryValue\");\r\n                    return methods\r\n                },\r\n                getTotalSummaryValue: function(summaryItemName) {\r\n                    var summaryItemIndex = this._findSummaryItem(this.option(\"summary.totalItems\"), summaryItemName);\r\n                    var aggregates = this._dataSource.totalAggregates();\r\n                    if (aggregates.length && summaryItemIndex > -1) {\r\n                        return aggregates[summaryItemIndex]\r\n                    }\r\n                },\r\n                optionChanged: function(args) {\r\n                    if (\"summary\" === args.name || \"sortByGroupSummaryInfo\" === args.name) {\r\n                        args.name = \"dataSource\"\r\n                    }\r\n                    this.callBase(args)\r\n                },\r\n                init: function() {\r\n                    this._footerItems = [];\r\n                    this.callBase()\r\n                },\r\n                footerItems: function() {\r\n                    return this._footerItems\r\n                }\r\n            },\r\n            editing: {\r\n                _refreshSummary: function() {\r\n                    if (recalculateWhileEditing(this) && !this.isSaving()) {\r\n                        this._dataController.refresh({\r\n                            load: true,\r\n                            changesOnly: true\r\n                        })\r\n                    }\r\n                },\r\n                _addChange: function(params) {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    if (params.type) {\r\n                        this._refreshSummary()\r\n                    }\r\n                    return result\r\n                },\r\n                _removeChange: function() {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    this._refreshSummary();\r\n                    return result\r\n                },\r\n                cancelEditData: function() {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    this._refreshSummary();\r\n                    return result\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    row && $row.addClass(row.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE ? DATAGRID_GROUP_FOOTER_CLASS : \"\");\r\n                    return $row\r\n                },\r\n                _renderCells: function($row, options) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (\"group\" === options.row.rowType && options.row.summaryCells && options.row.summaryCells.length) {\r\n                        this._renderGroupSummaryCells($row, options)\r\n                    }\r\n                },\r\n                _hasAlignByColumnSummaryItems: function(columnIndex, options) {\r\n                    return !isDefined(options.columns[columnIndex].groupIndex) && options.row.summaryCells[columnIndex].length\r\n                },\r\n                _getAlignByColumnCellCount: function(groupCellColSpan, options) {\r\n                    var alignByColumnCellCount = 0;\r\n                    for (var i = 1; i < groupCellColSpan; i++) {\r\n                        var columnIndex = options.row.summaryCells.length - i;\r\n                        alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options) ? i : alignByColumnCellCount\r\n                    }\r\n                    return alignByColumnCellCount\r\n                },\r\n                _renderGroupSummaryCells: function($row, options) {\r\n                    var $groupCell = $row.children().last();\r\n                    var groupCellColSpan = Number($groupCell.attr(\"colSpan\")) || 1;\r\n                    var alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\r\n                    this._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount)\r\n                },\r\n                _renderGroupSummaryCellsCore: function($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\r\n                    if (alignByColumnCellCount > 0) {\r\n                        $groupCell.attr(\"colSpan\", groupCellColSpan - alignByColumnCellCount);\r\n                        for (var i = 0; i < alignByColumnCellCount; i++) {\r\n                            var columnIndex = options.columns.length - alignByColumnCellCount + i;\r\n                            this._renderCell($groupCell.parent(), extend({\r\n                                column: options.columns[columnIndex],\r\n                                columnIndex: this._getSummaryCellIndex(columnIndex, options.columns)\r\n                            }, options))\r\n                        }\r\n                    }\r\n                },\r\n                _getSummaryCellIndex: function(columnIndex) {\r\n                    return columnIndex\r\n                },\r\n                _getCellTemplate: function(options) {\r\n                    if (!options.column.command && !isDefined(options.column.groupIndex) && options.summaryItems && options.summaryItems.length) {\r\n                        return renderSummaryCell\r\n                    } else {\r\n                        return this.callBase(options)\r\n                    }\r\n                },\r\n                _getCellOptions: function(options) {\r\n                    var parameters = this.callBase(options);\r\n                    if (options.row.summaryCells) {\r\n                        return extend(parameters, getSummaryCellOptions(this, options))\r\n                    } else {\r\n                        return parameters\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}