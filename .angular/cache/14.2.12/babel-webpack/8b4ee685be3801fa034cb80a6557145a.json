{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * AxisFill is a base class used to defines fill shapes for various\r\n * type-specific Axes.\r\n *\r\n * Axis fills are used to add fills to specific ranges of those axes.\r\n *\r\n * @see {@link IAxisFillEvents} for a list of available events\r\n * @see {@link IAxisFillAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar AxisFill =\n/** @class */\nfunction (_super) {\n  __extends(AxisFill, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Axis\r\n   */\n\n\n  function AxisFill(axis) {\n    var _this = _super.call(this) || this;\n\n    _this.axis = axis;\n    _this.element = _this.paper.add(\"path\");\n    _this.className = \"AxisFill\";\n    _this.isMeasured = false;\n    _this.location = 0;\n    _this.above = false;\n    var interfaceColors = new InterfaceColorSet();\n    _this.fill = interfaceColors.getFor(\"alternativeBackground\");\n    _this.fillOpacity = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  AxisFill.prototype.setDisabled = function (value) {\n    var changed = _super.prototype.setDisabled.call(this, value);\n\n    if (this.axis) {\n      this.axis.invalidateDataItems();\n    }\n\n    return changed;\n  };\n  /**\r\n   * Draws the fill element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisFill.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (this.__disabled || this.disabled) {\n      return;\n    }\n\n    if (this.axis && $type.isNumber(this.startPosition) && $type.isNumber(this.endPosition)) {\n      this.fillPath = this.axis.getPositionRangePath(this.startPosition, this.endPosition);\n      this.path = this.fillPath;\n\n      if (this.isMeasured) {\n        this.measure();\n      }\n    }\n  };\n\n  Object.defineProperty(AxisFill.prototype, \"startPosition\", {\n    /**\r\n     * @return Start position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startPosition\");\n    },\n\n    /**\r\n     * An actual starting position of the fill.\r\n     *\r\n     * @param value  Starting position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startPosition\", value);\n      this.invalidate(); // this is needed as relative position might not change when zooming\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisFill.prototype, \"endPosition\", {\n    /**\r\n     * @return End position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endPosition\");\n    },\n\n    /**\r\n     * An actual end position of the fill.\r\n     *\r\n     * @param value End position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endPosition\", value);\n      this.invalidate(); // this is needed as relative position might not change when zooming\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisFill.prototype, \"location\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"location\");\n    },\n\n    /**\r\n     * Relative location of the fill. (0-1)\r\n     *\r\n     * @param value Location (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"location\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  AxisFill.prototype.setPath = function (value) {\n    if (this.setPropertyValue(\"path\", value)) {\n      this.element.attr({\n        \"d\": value\n      });\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(AxisFill.prototype, \"above\", {\n    /**\r\n     * @return Draw above series?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"above\");\n    },\n\n    /**\r\n     * Normally fill goes below series. Set this to `true` to go above.\r\n     *\r\n     * @default false\r\n     * @since 4.5.9\r\n     * @param  value  Draw above series?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"above\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisFill;\n}(Sprite);\n\nexport { AxisFill };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisFill\"] = AxisFill;","map":{"version":3,"names":["__extends","Sprite","registry","InterfaceColorSet","$type","AxisFill","_super","axis","_this","call","element","paper","add","className","isMeasured","location","above","interfaceColors","fill","getFor","fillOpacity","applyTheme","prototype","setDisabled","value","changed","invalidateDataItems","draw","__disabled","disabled","isNumber","startPosition","endPosition","fillPath","getPositionRangePath","path","measure","Object","defineProperty","get","getPropertyValue","set","setPropertyValue","invalidate","enumerable","configurable","setPath","attr","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisFill.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * AxisFill is a base class used to defines fill shapes for various\r\n * type-specific Axes.\r\n *\r\n * Axis fills are used to add fills to specific ranges of those axes.\r\n *\r\n * @see {@link IAxisFillEvents} for a list of available events\r\n * @see {@link IAxisFillAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar AxisFill = /** @class */ (function (_super) {\r\n    __extends(AxisFill, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param axis Axis\r\n     */\r\n    function AxisFill(axis) {\r\n        var _this = _super.call(this) || this;\r\n        _this.axis = axis;\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.className = \"AxisFill\";\r\n        _this.isMeasured = false;\r\n        _this.location = 0;\r\n        _this.above = false;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        _this.fillOpacity = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    AxisFill.prototype.setDisabled = function (value) {\r\n        var changed = _super.prototype.setDisabled.call(this, value);\r\n        if (this.axis) {\r\n            this.axis.invalidateDataItems();\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * Draws the fill element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisFill.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this.__disabled || this.disabled) {\r\n            return;\r\n        }\r\n        if (this.axis && $type.isNumber(this.startPosition) && $type.isNumber(this.endPosition)) {\r\n            this.fillPath = this.axis.getPositionRangePath(this.startPosition, this.endPosition);\r\n            this.path = this.fillPath;\r\n            if (this.isMeasured) {\r\n                this.measure();\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(AxisFill.prototype, \"startPosition\", {\r\n        /**\r\n         * @return Start position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startPosition\");\r\n        },\r\n        /**\r\n         * An actual starting position of the fill.\r\n         *\r\n         * @param value  Starting position\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startPosition\", value);\r\n            this.invalidate(); // this is needed as relative position might not change when zooming\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisFill.prototype, \"endPosition\", {\r\n        /**\r\n         * @return End position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endPosition\");\r\n        },\r\n        /**\r\n         * An actual end position of the fill.\r\n         *\r\n         * @param value End position\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endPosition\", value);\r\n            this.invalidate(); // this is needed as relative position might not change when zooming\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisFill.prototype, \"location\", {\r\n        /**\r\n         * @return Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"location\");\r\n        },\r\n        /**\r\n         * Relative location of the fill. (0-1)\r\n         *\r\n         * @param value Location (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"location\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    AxisFill.prototype.setPath = function (value) {\r\n        if (this.setPropertyValue(\"path\", value)) {\r\n            this.element.attr({ \"d\": value });\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(AxisFill.prototype, \"above\", {\r\n        /**\r\n         * @return Draw above series?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"above\");\r\n        },\r\n        /**\r\n         * Normally fill goes below series. Set this to `true` to go above.\r\n         *\r\n         * @default false\r\n         * @since 4.5.9\r\n         * @param  value  Draw above series?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"above\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return AxisFill;\r\n}(Sprite));\r\nexport { AxisFill };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFill\"] = AxisFill;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}