{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Optional, ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, Input, Output, HostListener, Directive, ViewContainerRef, TemplateRef, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n/**\r\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nlet ClipboardService = class ClipboardService {\n  constructor(document, window) {\n    this.document = document;\n    this.window = window;\n    this.copySubject = new Subject();\n    this.copyResponse$ = this.copySubject.asObservable();\n    this.config = {};\n  }\n\n  configure(config) {\n    this.config = config;\n  }\n\n  copy(content) {\n    if (!this.isSupported || !content) {\n      return this.pushCopyResponse({\n        isSuccess: false,\n        content\n      });\n    }\n\n    const copyResult = this.copyFromContent(content);\n\n    if (copyResult) {\n      return this.pushCopyResponse({\n        content,\n        isSuccess: copyResult\n      });\n    }\n\n    return this.pushCopyResponse({\n      isSuccess: false,\n      content\n    });\n  }\n\n  get isSupported() {\n    return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\n  }\n\n  isTargetValid(element) {\n    if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n      if (element.hasAttribute('disabled')) {\n        throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n      }\n\n      return true;\n    }\n\n    throw new Error('Target should be input or textarea');\n  }\n  /**\r\n   * Attempts to copy from an input `targetElm`\r\n   */\n\n\n  copyFromInputElement(targetElm, isFocus = true) {\n    try {\n      this.selectTarget(targetElm);\n      const re = this.copyText();\n      this.clearSelection(isFocus ? targetElm : undefined, this.window);\n      return re && this.isCopySuccessInIE11();\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\r\n   * This is a hack for IE11 to return `true` even if copy fails.\r\n   */\n\n\n  isCopySuccessInIE11() {\n    const clipboardData = this.window['clipboardData'];\n\n    if (clipboardData && clipboardData.getData) {\n      if (!clipboardData.getData('Text')) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\r\n   * Creates a fake textarea element, sets its value from `text` property,\r\n   * and makes a selection on it.\r\n   */\n\n\n  copyFromContent(content, container = this.document.body) {\n    // check if the temp textarea still belongs to the current container.\n    // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\n    if (this.tempTextArea && !container.contains(this.tempTextArea)) {\n      this.destroy(this.tempTextArea.parentElement);\n    }\n\n    if (!this.tempTextArea) {\n      this.tempTextArea = this.createTempTextArea(this.document, this.window);\n\n      try {\n        container.appendChild(this.tempTextArea);\n      } catch (error) {\n        throw new Error('Container should be a Dom element');\n      }\n    }\n\n    this.tempTextArea.value = content;\n    const toReturn = this.copyFromInputElement(this.tempTextArea, false);\n\n    if (this.config.cleanUpAfterCopy) {\n      this.destroy(this.tempTextArea.parentElement);\n    }\n\n    return toReturn;\n  }\n  /**\r\n   * Remove temporary textarea if any exists.\r\n   */\n\n\n  destroy(container = this.document.body) {\n    if (this.tempTextArea) {\n      container.removeChild(this.tempTextArea); // removeChild doesn't remove the reference from memory\n\n      this.tempTextArea = undefined;\n    }\n  }\n  /**\r\n   * Select the target html input element.\r\n   */\n\n\n  selectTarget(inputElement) {\n    inputElement.select();\n    inputElement.setSelectionRange(0, inputElement.value.length);\n    return inputElement.value.length;\n  }\n\n  copyText() {\n    return this.document.execCommand('copy');\n  }\n  /**\r\n   * Moves focus away from `target` and back to the trigger, removes current selection.\r\n   */\n\n\n  clearSelection(inputElement, window) {\n    inputElement && inputElement.focus();\n    window.getSelection().removeAllRanges();\n  }\n  /**\r\n   * Creates a fake textarea for copy command.\r\n   */\n\n\n  createTempTextArea(doc, window) {\n    const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n    let ta;\n    ta = doc.createElement('textarea'); // Prevent zooming on iOS\n\n    ta.style.fontSize = '12pt'; // Reset box model\n\n    ta.style.border = '0';\n    ta.style.padding = '0';\n    ta.style.margin = '0'; // Move element out of screen horizontally\n\n    ta.style.position = 'absolute';\n    ta.style[isRTL ? 'right' : 'left'] = '-9999px'; // Move element to the same position vertically\n\n    const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n    ta.style.top = yPosition + 'px';\n    ta.setAttribute('readonly', '');\n    return ta;\n  }\n  /**\r\n   * Pushes copy operation response to copySubject, to provide global access\r\n   * to the response.\r\n   */\n\n\n  pushCopyResponse(response) {\n    this.copySubject.next(response);\n  }\n  /**\r\n   * @deprecated use pushCopyResponse instead.\r\n   */\n\n\n  pushCopyReponse(response) {\n    this.pushCopyResponse(response);\n  }\n\n};\n\nClipboardService.ɵfac = function ClipboardService_Factory(t) {\n  return new (t || ClipboardService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(WINDOW, 8));\n};\n\nClipboardService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [WINDOW]\n  }]\n}];\n\nClipboardService.ɵprov = ɵɵdefineInjectable({\n  factory: function ClipboardService_Factory() {\n    return new ClipboardService(ɵɵinject(DOCUMENT), ɵɵinject(WINDOW, 8));\n  },\n  token: ClipboardService,\n  providedIn: \"root\"\n});\nClipboardService = __decorate([__param(0, Inject(DOCUMENT)), __param(1, Optional()), __param(1, Inject(WINDOW))], ClipboardService);\nlet ClipboardDirective = class ClipboardDirective {\n  constructor(clipboardSrv) {\n    this.clipboardSrv = clipboardSrv;\n    this.cbOnSuccess = new EventEmitter();\n    this.cbOnError = new EventEmitter();\n  } // tslint:disable-next-line:no-empty\n\n\n  ngOnInit() {}\n\n  ngOnDestroy() {\n    this.clipboardSrv.destroy(this.container);\n  }\n\n  onClick(event) {\n    if (!this.clipboardSrv.isSupported) {\n      this.handleResult(false, undefined, event);\n    } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n      this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\n    } else if (this.cbContent) {\n      this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\n    }\n  }\n  /**\r\n   * Fires an event based on the copy operation result.\r\n   * @param succeeded\r\n   */\n\n\n  handleResult(succeeded, copiedContent, event) {\n    let response = {\n      isSuccess: succeeded,\n      event\n    };\n\n    if (succeeded) {\n      response = Object.assign(response, {\n        content: copiedContent,\n        successMessage: this.cbSuccessMsg\n      });\n      this.cbOnSuccess.emit(response);\n    } else {\n      this.cbOnError.emit(response);\n    }\n\n    this.clipboardSrv.pushCopyResponse(response);\n  }\n\n};\n\nClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) {\n  return new (t || ClipboardDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService));\n};\n\nClipboardDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: ClipboardDirective,\n  selectors: [[\"\", \"ngxClipboard\", \"\"]],\n  hostBindings: function ClipboardDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function ClipboardDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event.target);\n      });\n    }\n  },\n  inputs: {\n    targetElm: [\"ngxClipboard\", \"targetElm\"],\n    container: \"container\",\n    cbContent: \"cbContent\",\n    cbSuccessMsg: \"cbSuccessMsg\"\n  },\n  outputs: {\n    cbOnSuccess: \"cbOnSuccess\",\n    cbOnError: \"cbOnError\"\n  }\n});\n\nClipboardDirective.ctorParameters = () => [{\n  type: ClipboardService\n}];\n\n__decorate([Input('ngxClipboard')], ClipboardDirective.prototype, \"targetElm\", void 0);\n\n__decorate([Input()], ClipboardDirective.prototype, \"container\", void 0);\n\n__decorate([Input()], ClipboardDirective.prototype, \"cbContent\", void 0);\n\n__decorate([Input()], ClipboardDirective.prototype, \"cbSuccessMsg\", void 0);\n\n__decorate([Output()], ClipboardDirective.prototype, \"cbOnSuccess\", void 0);\n\n__decorate([Output()], ClipboardDirective.prototype, \"cbOnError\", void 0);\n\n__decorate([HostListener('click', ['$event.target'])], ClipboardDirective.prototype, \"onClick\", null);\n\nlet ClipboardIfSupportedDirective = class ClipboardIfSupportedDirective {\n  constructor(_clipboardService, _viewContainerRef, _templateRef) {\n    this._clipboardService = _clipboardService;\n    this._viewContainerRef = _viewContainerRef;\n    this._templateRef = _templateRef;\n  }\n\n  ngOnInit() {\n    if (this._clipboardService.isSupported) {\n      this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n  }\n\n};\n\nClipboardIfSupportedDirective.ɵfac = function ClipboardIfSupportedDirective_Factory(t) {\n  return new (t || ClipboardIfSupportedDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nClipboardIfSupportedDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: ClipboardIfSupportedDirective,\n  selectors: [[\"\", \"ngxClipboardIfSupported\", \"\"]]\n});\n\nClipboardIfSupportedDirective.ctorParameters = () => [{\n  type: ClipboardService\n}, {\n  type: ViewContainerRef\n}, {\n  type: TemplateRef\n}];\n\nlet ClipboardModule = class ClipboardModule {};\n\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) {\n  return new (t || ClipboardModule)();\n};\n\nClipboardModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: ClipboardModule\n});\nClipboardModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [WINDOW]\n      }]\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxClipboard]'\n    }]\n  }], function () {\n    return [{\n      type: ClipboardService\n    }];\n  }, {\n    cbOnSuccess: [{\n      type: Output\n    }],\n    cbOnError: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event.target']]\n    }],\n    targetElm: [{\n      type: Input,\n      args: ['ngxClipboard']\n    }],\n    container: [{\n      type: Input\n    }],\n    cbContent: [{\n      type: Input\n    }],\n    cbSuccessMsg: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardIfSupportedDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxClipboardIfSupported]'\n    }]\n  }], function () {\n    return [{\n      type: ClipboardService\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n      exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, {\n    declarations: function () {\n      return [ClipboardDirective, ClipboardIfSupportedDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClipboardDirective, ClipboardIfSupportedDirective];\n    }\n  });\n})();\n/*\r\n * Public API Surface of ngx-clipboard\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService };","map":{"version":3,"names":["__decorate","__param","DOCUMENT","CommonModule","Inject","Optional","ɵɵdefineInjectable","ɵɵinject","Injectable","EventEmitter","Input","Output","HostListener","Directive","ViewContainerRef","TemplateRef","NgModule","WINDOW","Subject","ɵngcc0","ClipboardService","constructor","document","window","copySubject","copyResponse$","asObservable","config","configure","copy","content","isSupported","pushCopyResponse","isSuccess","copyResult","copyFromContent","queryCommandSupported","isTargetValid","element","HTMLInputElement","HTMLTextAreaElement","hasAttribute","Error","copyFromInputElement","targetElm","isFocus","selectTarget","re","copyText","clearSelection","undefined","isCopySuccessInIE11","error","clipboardData","getData","container","body","tempTextArea","contains","destroy","parentElement","createTempTextArea","appendChild","value","toReturn","cleanUpAfterCopy","removeChild","inputElement","select","setSelectionRange","length","execCommand","focus","getSelection","removeAllRanges","doc","isRTL","documentElement","getAttribute","ta","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","response","next","pushCopyReponse","ɵfac","ClipboardService_Factory","t","ctorParameters","type","decorators","args","ɵprov","factory","token","providedIn","ClipboardDirective","clipboardSrv","cbOnSuccess","cbOnError","ngOnInit","ngOnDestroy","onClick","event","handleResult","cbContent","succeeded","copiedContent","Object","assign","successMessage","cbSuccessMsg","emit","ClipboardDirective_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","hostBindings","ClipboardDirective_HostBindings","rf","ctx","ɵɵlistener","ClipboardDirective_click_HostBindingHandler","$event","target","inputs","outputs","prototype","ClipboardIfSupportedDirective","_clipboardService","_viewContainerRef","_templateRef","createEmbeddedView","ClipboardIfSupportedDirective_Factory","ClipboardModule","ClipboardModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngDevMode","ɵsetClassMetadata","selector","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/ngx-clipboard/__ivy_ngcc__/fesm2015/ngx-clipboard.js"],"sourcesContent":["import { __decorate, __param } from 'tslib';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Optional, ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, Input, Output, HostListener, Directive, ViewContainerRef, TemplateRef, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n\n/**\r\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\nlet ClipboardService = class ClipboardService {\r\n    constructor(document, window) {\r\n        this.document = document;\r\n        this.window = window;\r\n        this.copySubject = new Subject();\r\n        this.copyResponse$ = this.copySubject.asObservable();\r\n        this.config = {};\r\n    }\r\n    configure(config) {\r\n        this.config = config;\r\n    }\r\n    copy(content) {\r\n        if (!this.isSupported || !content) {\r\n            return this.pushCopyResponse({ isSuccess: false, content });\r\n        }\r\n        const copyResult = this.copyFromContent(content);\r\n        if (copyResult) {\r\n            return this.pushCopyResponse({ content, isSuccess: copyResult });\r\n        }\r\n        return this.pushCopyResponse({ isSuccess: false, content });\r\n    }\r\n    get isSupported() {\r\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\r\n    }\r\n    isTargetValid(element) {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    }\r\n    /**\r\n     * Attempts to copy from an input `targetElm`\r\n     */\r\n    copyFromInputElement(targetElm, isFocus = true) {\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            const re = this.copyText();\r\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        }\r\n        catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * This is a hack for IE11 to return `true` even if copy fails.\r\n     */\r\n    isCopySuccessInIE11() {\r\n        const clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    copyFromContent(content, container = this.document.body) {\r\n        // check if the temp textarea still belongs to the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement);\r\n        }\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            }\r\n            catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n        const toReturn = this.copyFromInputElement(this.tempTextArea, false);\r\n        if (this.config.cleanUpAfterCopy) {\r\n            this.destroy(this.tempTextArea.parentElement);\r\n        }\r\n        return toReturn;\r\n    }\r\n    /**\r\n     * Remove temporary textarea if any exists.\r\n     */\r\n    destroy(container = this.document.body) {\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * Select the target html input element.\r\n     */\r\n    selectTarget(inputElement) {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    }\r\n    copyText() {\r\n        return this.document.execCommand('copy');\r\n    }\r\n    /**\r\n     * Moves focus away from `target` and back to the trigger, removes current selection.\r\n     */\r\n    clearSelection(inputElement, window) {\r\n        inputElement && inputElement.focus();\r\n        window.getSelection().removeAllRanges();\r\n    }\r\n    /**\r\n     * Creates a fake textarea for copy command.\r\n     */\r\n    createTempTextArea(doc, window) {\r\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        let ta;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    }\r\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     */\r\n    pushCopyResponse(response) {\r\n        this.copySubject.next(response);\r\n    }\r\n    /**\r\n     * @deprecated use pushCopyResponse instead.\r\n     */\r\n    pushCopyReponse(response) {\r\n        this.pushCopyResponse(response);\r\n    }\r\n};\nClipboardService.ɵfac = function ClipboardService_Factory(t) { return new (t || ClipboardService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(WINDOW, 8)); };\r\nClipboardService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [WINDOW,] }] }\r\n];\r\nClipboardService.ɵprov = ɵɵdefineInjectable({ factory: function ClipboardService_Factory() { return new ClipboardService(ɵɵinject(DOCUMENT), ɵɵinject(WINDOW, 8)); }, token: ClipboardService, providedIn: \"root\" });\r\nClipboardService = __decorate([ __param(0, Inject(DOCUMENT)), __param(1, Optional()), __param(1, Inject(WINDOW))\r\n], ClipboardService);\n\nlet ClipboardDirective = class ClipboardDirective {\r\n    constructor(clipboardSrv) {\r\n        this.clipboardSrv = clipboardSrv;\r\n        this.cbOnSuccess = new EventEmitter();\r\n        this.cbOnError = new EventEmitter();\r\n    }\r\n    // tslint:disable-next-line:no-empty\r\n    ngOnInit() { }\r\n    ngOnDestroy() {\r\n        this.clipboardSrv.destroy(this.container);\r\n    }\r\n    onClick(event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        }\r\n        else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        }\r\n        else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    }\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\r\n    handleResult(succeeded, copiedContent, event) {\r\n        let response = {\r\n            isSuccess: succeeded,\r\n            event\r\n        };\r\n        if (succeeded) {\r\n            response = Object.assign(response, {\r\n                content: copiedContent,\r\n                successMessage: this.cbSuccessMsg\r\n            });\r\n            this.cbOnSuccess.emit(response);\r\n        }\r\n        else {\r\n            this.cbOnError.emit(response);\r\n        }\r\n        this.clipboardSrv.pushCopyResponse(response);\r\n    }\r\n};\nClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) { return new (t || ClipboardDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService)); };\nClipboardDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ClipboardDirective, selectors: [[\"\", \"ngxClipboard\", \"\"]], hostBindings: function ClipboardDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ClipboardDirective_click_HostBindingHandler($event) { return ctx.onClick($event.target); });\n    } }, inputs: { targetElm: [\"ngxClipboard\", \"targetElm\"], container: \"container\", cbContent: \"cbContent\", cbSuccessMsg: \"cbSuccessMsg\" }, outputs: { cbOnSuccess: \"cbOnSuccess\", cbOnError: \"cbOnError\" } });\r\nClipboardDirective.ctorParameters = () => [\r\n    { type: ClipboardService }\r\n];\r\n__decorate([\r\n    Input('ngxClipboard')\r\n], ClipboardDirective.prototype, \"targetElm\", void 0);\r\n__decorate([\r\n    Input()\r\n], ClipboardDirective.prototype, \"container\", void 0);\r\n__decorate([\r\n    Input()\r\n], ClipboardDirective.prototype, \"cbContent\", void 0);\r\n__decorate([\r\n    Input()\r\n], ClipboardDirective.prototype, \"cbSuccessMsg\", void 0);\r\n__decorate([\r\n    Output()\r\n], ClipboardDirective.prototype, \"cbOnSuccess\", void 0);\r\n__decorate([\r\n    Output()\r\n], ClipboardDirective.prototype, \"cbOnError\", void 0);\r\n__decorate([\r\n    HostListener('click', ['$event.target'])\r\n], ClipboardDirective.prototype, \"onClick\", null);\n\nlet ClipboardIfSupportedDirective = class ClipboardIfSupportedDirective {\r\n    constructor(_clipboardService, _viewContainerRef, _templateRef) {\r\n        this._clipboardService = _clipboardService;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._templateRef = _templateRef;\r\n    }\r\n    ngOnInit() {\r\n        if (this._clipboardService.isSupported) {\r\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n        }\r\n    }\r\n};\nClipboardIfSupportedDirective.ɵfac = function ClipboardIfSupportedDirective_Factory(t) { return new (t || ClipboardIfSupportedDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nClipboardIfSupportedDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ClipboardIfSupportedDirective, selectors: [[\"\", \"ngxClipboardIfSupported\", \"\"]] });\r\nClipboardIfSupportedDirective.ctorParameters = () => [\r\n    { type: ClipboardService },\r\n    { type: ViewContainerRef },\r\n    { type: TemplateRef }\r\n];\n\nlet ClipboardModule = class ClipboardModule {\r\n};\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) { return new (t || ClipboardModule)(); };\nClipboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ClipboardModule });\nClipboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardService, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [WINDOW]\n            }] }]; }, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngxClipboard]'\n            }]\n    }], function () { return [{ type: ClipboardService }]; }, { cbOnSuccess: [{\n            type: Output\n        }], cbOnError: [{\n            type: Output\n        }], onClick: [{\n            type: HostListener,\n            args: ['click', ['$event.target']]\n        }], targetElm: [{\n            type: Input,\n            args: ['ngxClipboard']\n        }], container: [{\n            type: Input\n        }], cbContent: [{\n            type: Input\n        }], cbSuccessMsg: [{\n            type: Input\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardIfSupportedDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngxClipboardIfSupported]'\n            }]\n    }], function () { return [{ type: ClipboardService }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }]; }, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n                exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, { declarations: function () { return [ClipboardDirective, ClipboardIfSupportedDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ClipboardDirective, ClipboardIfSupportedDirective]; } }); })();\n\n/*\r\n * Public API Surface of ngx-clipboard\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}