{"ast":null,"code":"import * as $type from \"../utils/Type\";\n/**\r\n * Maps time period names to their numeric representations in milliseconds.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport var timeUnitDurations = {\n  millisecond: 1,\n  second: 1000,\n  minute: 60000,\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n  month: 2592000000,\n  year: 31536000000\n};\n/**\r\n * Returns the next time unit that goes after source `unit`.\r\n *\r\n * E.g. \"hour\" is the next unit after \"minute\", etc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit  Source time unit\r\n * @return Next time unit\r\n */\n\nexport function getNextUnit(unit) {\n  switch (unit) {\n    case \"year\":\n      return;\n\n    case \"month\":\n      return \"year\";\n\n    case \"week\":\n      return \"month\";\n\n    case \"day\":\n      return \"month\";\n    // not a mistake\n\n    case \"hour\":\n      return \"day\";\n\n    case \"minute\":\n      return \"hour\";\n\n    case \"second\":\n      return \"minute\";\n\n    case \"millisecond\":\n      return \"second\";\n  }\n}\n/**\r\n * Returns number of milliseconds in the `count` of time `unit`.\r\n *\r\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\r\n * \"month\", and \"year\".\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit   Time unit\r\n * @param count  Number of units\r\n * @return Milliseconds\r\n */\n\nexport function getDuration(unit, count) {\n  if (!$type.hasValue(count)) {\n    count = 1;\n  }\n\n  return timeUnitDurations[unit] * count;\n}\n/**\r\n * Returns current `Date` object.\r\n *\r\n * @return Current date\r\n */\n\nexport function now() {\n  return new Date();\n}\n/**\r\n * Returns current timestamp.\r\n *\r\n * @return Current timestamp\r\n */\n\nexport function getTime() {\n  return now().getTime();\n}\n/**\r\n * Returns a copy of the `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date  Source date\r\n * @return Copy\r\n */\n\nexport function copy(date) {\n  return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\n}\n/**\r\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\r\n * represent a \"range\" of time, rather the same time date.\r\n *\r\n * @ignore Exclude from docs\r\n * @param dateOne  Date 1\r\n * @param dateTwo  Date 2\r\n * @param unit     Time unit to check\r\n * @return Range?\r\n */\n\nexport function checkChange(dateOne, dateTwo, unit, utc) {\n  dateOne = new Date(dateOne.getTime());\n  dateTwo = new Date(dateTwo.getTime());\n  var timeZoneOffset1 = 0;\n  var timeZoneOffset2 = 0;\n\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset1 = dateOne.getTimezoneOffset();\n    dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\n    timeZoneOffset2 = dateTwo.getTimezoneOffset();\n    dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\n  }\n\n  var changed = false;\n\n  switch (unit) {\n    case \"year\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"month\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      } else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"day\":\n      if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      } else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"hour\":\n      if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"minute\":\n      if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"second\":\n      if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"millisecond\":\n      if (dateOne.getTime() != dateTwo.getTime()) {\n        changed = true;\n      }\n\n      break;\n  }\n\n  if (changed) {\n    return true;\n  }\n\n  var nextUnit = getNextUnit(unit);\n\n  if (nextUnit) {\n    dateOne.setUTCMinutes(dateOne.getUTCMinutes() + timeZoneOffset1);\n    dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() + timeZoneOffset2);\n    return checkChange(dateOne, dateTwo, nextUnit, utc);\n  } else {\n    return false;\n  }\n}\n/**\r\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date   Source date\r\n * @param unit   Time unit\r\n * @param count  Number of units to add\r\n * @return Modified date\r\n */\n\nexport function add(date, unit, count, utc) {\n  var timeZoneOffset = 0;\n\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset = date.getTimezoneOffset();\n    date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n  }\n\n  switch (unit) {\n    case \"day\":\n      var day = date.getUTCDate();\n      date.setUTCDate(day + count);\n      break;\n\n    case \"second\":\n      var seconds = date.getUTCSeconds();\n      date.setUTCSeconds(seconds + count);\n      break;\n\n    case \"millisecond\":\n      var milliseconds = date.getUTCMilliseconds();\n      date.setUTCMilliseconds(milliseconds + count);\n      break;\n\n    case \"hour\":\n      var hours = date.getUTCHours();\n      date.setUTCHours(hours + count);\n      break;\n\n    case \"minute\":\n      var minutes = date.getUTCMinutes();\n      date.setUTCMinutes(minutes + count);\n      break;\n\n    case \"year\":\n      var year = date.getUTCFullYear();\n      date.setUTCFullYear(year + count);\n      break;\n\n    case \"month\":\n      var month = date.getUTCMonth();\n      date.setUTCMonth(month + count);\n      break;\n\n    case \"week\":\n      var wday = date.getUTCDate();\n      date.setUTCDate(wday + count * 7);\n      break;\n  }\n\n  if (!utc && unit != \"millisecond\") {\n    date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n    if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n      var newTimeZoneOffset = date.getTimezoneOffset();\n\n      if (newTimeZoneOffset != timeZoneOffset) {\n        var diff = newTimeZoneOffset - timeZoneOffset;\n        date.setUTCMinutes(date.getUTCMinutes() + diff); // solves issues if newe time falls back to old time zone\n\n        if (date.getTimezoneOffset() != newTimeZoneOffset) {\n          date.setUTCMinutes(date.getUTCMinutes() - diff);\n        }\n      }\n    }\n  }\n\n  return date;\n}\n/**\r\n * \"Rounds\" the date to specific time unit.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date             Source date\r\n * @param unit             Time unit\r\n * @param count            Number of units to round to\r\n * @param firstDateOfWeek  First day of week\r\n * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)\r\n * @param timezone         Use specific named timezone when rounding\r\n * @return New date\r\n */\n\nexport function round(date, unit, count, firstDateOfWeek, utc, firstDate, roundMinutes, timezone) {\n  if (roundMinutes === void 0) {\n    roundMinutes = 0;\n  }\n\n  if (!$type.isNumber(count)) {\n    count = 1;\n  }\n\n  var timeZoneOffset = 0;\n\n  if (timezone && [\"day\", \"month\", \"week\", \"year\"].indexOf(unit) != -1) {\n    date = setTimezone(date, timezone);\n  }\n\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset = date.getTimezoneOffset();\n    date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n  }\n\n  switch (unit) {\n    case \"day\":\n      var day = date.getUTCDate();\n\n      if (count > 1) {\n        //\tday = Math.floor(day / count) * count;\n        if (firstDate) {\n          firstDate = round(firstDate, \"day\", 1);\n          var difference = date.getTime() - firstDate.getTime();\n          var unitCount = Math.floor(difference / getDuration(\"day\") / count);\n          var duration = getDuration(\"day\", unitCount * count);\n          date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n        }\n      } else {\n        date.setUTCDate(day);\n      }\n\n      date.setUTCHours(0, 0, 0, 0);\n      break;\n\n    case \"second\":\n      var seconds = date.getUTCSeconds();\n\n      if (count > 1) {\n        seconds = Math.floor(seconds / count) * count;\n      }\n\n      date.setUTCSeconds(seconds, 0);\n      break;\n\n    case \"millisecond\":\n      if (count == 1) {\n        return date; // much better for perf!\n      }\n\n      var milliseconds = date.getUTCMilliseconds();\n      milliseconds = Math.floor(milliseconds / count) * count;\n      date.setUTCMilliseconds(milliseconds);\n      break;\n\n    case \"hour\":\n      var hours = date.getUTCHours();\n\n      if (count > 1) {\n        hours = Math.floor(hours / count) * count;\n      }\n\n      date.setUTCHours(hours, roundMinutes, 0, 0);\n      break;\n\n    case \"minute\":\n      var minutes = date.getUTCMinutes();\n      milliseconds = date.getUTCMilliseconds();\n\n      if (count > 1) {\n        minutes = Math.floor(minutes / count) * count;\n      }\n\n      date.setUTCMinutes(minutes, 0, 0);\n      break;\n\n    case \"month\":\n      var month = date.getUTCMonth();\n\n      if (count > 1) {\n        month = Math.floor(month / count) * count;\n      }\n\n      date.setUTCMonth(month, 1);\n      date.setUTCHours(0, roundMinutes, 0, 0);\n      break;\n\n    case \"year\":\n      var year = date.getUTCFullYear();\n\n      if (count > 1) {\n        year = Math.floor(year / count) * count;\n      }\n\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, roundMinutes, 0, 0); //let nonUTCDateY = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n      //timeZoneOffset = nonUTCDateY.getTimezoneOffset();\n\n      break;\n\n    case \"week\":\n      var wday = date.getUTCDate();\n      var weekDay = date.getUTCDay();\n\n      if (!$type.isNumber(firstDateOfWeek)) {\n        firstDateOfWeek = 1;\n      } // todo: rounding when count is not 1\n\n\n      if (weekDay >= firstDateOfWeek) {\n        wday = wday - weekDay + firstDateOfWeek;\n      } else {\n        wday = wday - (7 + weekDay) + firstDateOfWeek;\n      }\n\n      date.setUTCDate(wday);\n      date.setUTCHours(0, roundMinutes, 0, 0);\n      break;\n  }\n\n  if (!utc && unit != \"millisecond\") {\n    date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n    if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n      var newTimeZoneOffset = date.getTimezoneOffset();\n\n      if (newTimeZoneOffset != timeZoneOffset) {\n        var diff = newTimeZoneOffset - timeZoneOffset;\n        date.setUTCMinutes(date.getUTCMinutes() + diff);\n      }\n    }\n  }\n\n  return date;\n}\n/**\r\n * Returns a new `Date` object which corresponds to the source date in a\r\n * specific timezone.\r\n *\r\n * @since 4.10.1\r\n * @param   date      Source date\r\n * @param   timezone  Timezone identifier\r\n * @return            Recalculated new Date\r\n */\n\nexport function setTimezone(date, timezone) {\n  var d = new Date(date.toLocaleString(\"en-US\", {\n    timeZone: timezone\n  }));\n  return d;\n}\n/**\r\n * Returns minute fraction of the set timezone.\r\n *\r\n * @since 4.10.12\r\n * @param  timezone  Timezone identifier\r\n * @return           Minutes\r\n */\n\nexport function getTimezoneMinutes(timezone) {\n  var d = new Date();\n  d.setHours(0, 0, 0, 0);\n  var d2 = setTimezone(d, timezone);\n  return d2.getMinutes();\n}","map":{"version":3,"names":["$type","timeUnitDurations","millisecond","second","minute","hour","day","week","month","year","getNextUnit","unit","getDuration","count","hasValue","now","Date","getTime","copy","date","checkChange","dateOne","dateTwo","utc","timeZoneOffset1","timeZoneOffset2","getTimezoneOffset","setUTCMinutes","getUTCMinutes","changed","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCSeconds","nextUnit","add","timeZoneOffset","setUTCDate","seconds","setUTCSeconds","milliseconds","getUTCMilliseconds","setUTCMilliseconds","hours","setUTCHours","minutes","setUTCFullYear","setUTCMonth","wday","newTimeZoneOffset","diff","round","firstDateOfWeek","firstDate","roundMinutes","timezone","isNumber","indexOf","setTimezone","difference","unitCount","Math","floor","duration","setTime","weekDay","getUTCDay","d","toLocaleString","timeZone","getTimezoneMinutes","setHours","d2","getMinutes"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/Time.js"],"sourcesContent":["import * as $type from \"../utils/Type\";\r\n/**\r\n * Maps time period names to their numeric representations in milliseconds.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport var timeUnitDurations = {\r\n    millisecond: 1,\r\n    second: 1000,\r\n    minute: 60000,\r\n    hour: 3600000,\r\n    day: 86400000,\r\n    week: 604800000,\r\n    month: 2592000000,\r\n    year: 31536000000\r\n};\r\n/**\r\n * Returns the next time unit that goes after source `unit`.\r\n *\r\n * E.g. \"hour\" is the next unit after \"minute\", etc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit  Source time unit\r\n * @return Next time unit\r\n */\r\nexport function getNextUnit(unit) {\r\n    switch (unit) {\r\n        case \"year\":\r\n            return;\r\n        case \"month\":\r\n            return \"year\";\r\n        case \"week\":\r\n            return \"month\";\r\n        case \"day\":\r\n            return \"month\"; // not a mistake\r\n        case \"hour\":\r\n            return \"day\";\r\n        case \"minute\":\r\n            return \"hour\";\r\n        case \"second\":\r\n            return \"minute\";\r\n        case \"millisecond\":\r\n            return \"second\";\r\n    }\r\n}\r\n/**\r\n * Returns number of milliseconds in the `count` of time `unit`.\r\n *\r\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\r\n * \"month\", and \"year\".\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit   Time unit\r\n * @param count  Number of units\r\n * @return Milliseconds\r\n */\r\nexport function getDuration(unit, count) {\r\n    if (!$type.hasValue(count)) {\r\n        count = 1;\r\n    }\r\n    return timeUnitDurations[unit] * count;\r\n}\r\n/**\r\n * Returns current `Date` object.\r\n *\r\n * @return Current date\r\n */\r\nexport function now() {\r\n    return new Date();\r\n}\r\n/**\r\n * Returns current timestamp.\r\n *\r\n * @return Current timestamp\r\n */\r\nexport function getTime() {\r\n    return now().getTime();\r\n}\r\n/**\r\n * Returns a copy of the `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date  Source date\r\n * @return Copy\r\n */\r\nexport function copy(date) {\r\n    return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\r\n}\r\n/**\r\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\r\n * represent a \"range\" of time, rather the same time date.\r\n *\r\n * @ignore Exclude from docs\r\n * @param dateOne  Date 1\r\n * @param dateTwo  Date 2\r\n * @param unit     Time unit to check\r\n * @return Range?\r\n */\r\nexport function checkChange(dateOne, dateTwo, unit, utc) {\r\n    dateOne = new Date(dateOne.getTime());\r\n    dateTwo = new Date(dateTwo.getTime());\r\n    var timeZoneOffset1 = 0;\r\n    var timeZoneOffset2 = 0;\r\n    if (!utc && unit != \"millisecond\") {\r\n        timeZoneOffset1 = dateOne.getTimezoneOffset();\r\n        dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\r\n        timeZoneOffset2 = dateTwo.getTimezoneOffset();\r\n        dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\r\n    }\r\n    var changed = false;\r\n    switch (unit) {\r\n        case \"year\":\r\n            if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\r\n                changed = true;\r\n            }\r\n            break;\r\n        case \"month\":\r\n            if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\r\n                changed = true;\r\n            }\r\n            else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\r\n                changed = true;\r\n            }\r\n            break;\r\n        case \"day\":\r\n            if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\r\n                changed = true;\r\n            }\r\n            else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\r\n                changed = true;\r\n            }\r\n            break;\r\n        case \"hour\":\r\n            if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\r\n                changed = true;\r\n            }\r\n            break;\r\n        case \"minute\":\r\n            if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\r\n                changed = true;\r\n            }\r\n            break;\r\n        case \"second\":\r\n            if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\r\n                changed = true;\r\n            }\r\n            break;\r\n        case \"millisecond\":\r\n            if (dateOne.getTime() != dateTwo.getTime()) {\r\n                changed = true;\r\n            }\r\n            break;\r\n    }\r\n    if (changed) {\r\n        return true;\r\n    }\r\n    var nextUnit = getNextUnit(unit);\r\n    if (nextUnit) {\r\n        dateOne.setUTCMinutes(dateOne.getUTCMinutes() + timeZoneOffset1);\r\n        dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() + timeZoneOffset2);\r\n        return checkChange(dateOne, dateTwo, nextUnit, utc);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date   Source date\r\n * @param unit   Time unit\r\n * @param count  Number of units to add\r\n * @return Modified date\r\n */\r\nexport function add(date, unit, count, utc) {\r\n    var timeZoneOffset = 0;\r\n    if (!utc && unit != \"millisecond\") {\r\n        timeZoneOffset = date.getTimezoneOffset();\r\n        date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\r\n    }\r\n    switch (unit) {\r\n        case \"day\":\r\n            var day = date.getUTCDate();\r\n            date.setUTCDate(day + count);\r\n            break;\r\n        case \"second\":\r\n            var seconds = date.getUTCSeconds();\r\n            date.setUTCSeconds(seconds + count);\r\n            break;\r\n        case \"millisecond\":\r\n            var milliseconds = date.getUTCMilliseconds();\r\n            date.setUTCMilliseconds(milliseconds + count);\r\n            break;\r\n        case \"hour\":\r\n            var hours = date.getUTCHours();\r\n            date.setUTCHours(hours + count);\r\n            break;\r\n        case \"minute\":\r\n            var minutes = date.getUTCMinutes();\r\n            date.setUTCMinutes(minutes + count);\r\n            break;\r\n        case \"year\":\r\n            var year = date.getUTCFullYear();\r\n            date.setUTCFullYear(year + count);\r\n            break;\r\n        case \"month\":\r\n            var month = date.getUTCMonth();\r\n            date.setUTCMonth(month + count);\r\n            break;\r\n        case \"week\":\r\n            var wday = date.getUTCDate();\r\n            date.setUTCDate(wday + count * 7);\r\n            break;\r\n    }\r\n    if (!utc && unit != \"millisecond\") {\r\n        date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\r\n        if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\r\n            var newTimeZoneOffset = date.getTimezoneOffset();\r\n            if (newTimeZoneOffset != timeZoneOffset) {\r\n                var diff = newTimeZoneOffset - timeZoneOffset;\r\n                date.setUTCMinutes(date.getUTCMinutes() + diff);\r\n                // solves issues if newe time falls back to old time zone\r\n                if (date.getTimezoneOffset() != newTimeZoneOffset) {\r\n                    date.setUTCMinutes(date.getUTCMinutes() - diff);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return date;\r\n}\r\n/**\r\n * \"Rounds\" the date to specific time unit.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date             Source date\r\n * @param unit             Time unit\r\n * @param count            Number of units to round to\r\n * @param firstDateOfWeek  First day of week\r\n * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)\r\n * @param timezone         Use specific named timezone when rounding\r\n * @return New date\r\n */\r\nexport function round(date, unit, count, firstDateOfWeek, utc, firstDate, roundMinutes, timezone) {\r\n    if (roundMinutes === void 0) { roundMinutes = 0; }\r\n    if (!$type.isNumber(count)) {\r\n        count = 1;\r\n    }\r\n    var timeZoneOffset = 0;\r\n    if (timezone && [\"day\", \"month\", \"week\", \"year\"].indexOf(unit) != -1) {\r\n        date = setTimezone(date, timezone);\r\n    }\r\n    if (!utc && unit != \"millisecond\") {\r\n        timeZoneOffset = date.getTimezoneOffset();\r\n        date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\r\n    }\r\n    switch (unit) {\r\n        case \"day\":\r\n            var day = date.getUTCDate();\r\n            if (count > 1) {\r\n                //\tday = Math.floor(day / count) * count;\r\n                if (firstDate) {\r\n                    firstDate = round(firstDate, \"day\", 1);\r\n                    var difference = date.getTime() - firstDate.getTime();\r\n                    var unitCount = Math.floor(difference / getDuration(\"day\") / count);\r\n                    var duration = getDuration(\"day\", unitCount * count);\r\n                    date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\r\n                }\r\n            }\r\n            else {\r\n                date.setUTCDate(day);\r\n            }\r\n            date.setUTCHours(0, 0, 0, 0);\r\n            break;\r\n        case \"second\":\r\n            var seconds = date.getUTCSeconds();\r\n            if (count > 1) {\r\n                seconds = Math.floor(seconds / count) * count;\r\n            }\r\n            date.setUTCSeconds(seconds, 0);\r\n            break;\r\n        case \"millisecond\":\r\n            if (count == 1) {\r\n                return date; // much better for perf!\r\n            }\r\n            var milliseconds = date.getUTCMilliseconds();\r\n            milliseconds = Math.floor(milliseconds / count) * count;\r\n            date.setUTCMilliseconds(milliseconds);\r\n            break;\r\n        case \"hour\":\r\n            var hours = date.getUTCHours();\r\n            if (count > 1) {\r\n                hours = Math.floor(hours / count) * count;\r\n            }\r\n            date.setUTCHours(hours, roundMinutes, 0, 0);\r\n            break;\r\n        case \"minute\":\r\n            var minutes = date.getUTCMinutes();\r\n            milliseconds = date.getUTCMilliseconds();\r\n            if (count > 1) {\r\n                minutes = Math.floor(minutes / count) * count;\r\n            }\r\n            date.setUTCMinutes(minutes, 0, 0);\r\n            break;\r\n        case \"month\":\r\n            var month = date.getUTCMonth();\r\n            if (count > 1) {\r\n                month = Math.floor(month / count) * count;\r\n            }\r\n            date.setUTCMonth(month, 1);\r\n            date.setUTCHours(0, roundMinutes, 0, 0);\r\n            break;\r\n        case \"year\":\r\n            var year = date.getUTCFullYear();\r\n            if (count > 1) {\r\n                year = Math.floor(year / count) * count;\r\n            }\r\n            date.setUTCFullYear(year, 0, 1);\r\n            date.setUTCHours(0, roundMinutes, 0, 0);\r\n            //let nonUTCDateY = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\r\n            //timeZoneOffset = nonUTCDateY.getTimezoneOffset();\r\n            break;\r\n        case \"week\":\r\n            var wday = date.getUTCDate();\r\n            var weekDay = date.getUTCDay();\r\n            if (!$type.isNumber(firstDateOfWeek)) {\r\n                firstDateOfWeek = 1;\r\n            }\r\n            // todo: rounding when count is not 1\r\n            if (weekDay >= firstDateOfWeek) {\r\n                wday = wday - weekDay + firstDateOfWeek;\r\n            }\r\n            else {\r\n                wday = wday - (7 + weekDay) + firstDateOfWeek;\r\n            }\r\n            date.setUTCDate(wday);\r\n            date.setUTCHours(0, roundMinutes, 0, 0);\r\n            break;\r\n    }\r\n    if (!utc && unit != \"millisecond\") {\r\n        date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\r\n        if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\r\n            var newTimeZoneOffset = date.getTimezoneOffset();\r\n            if (newTimeZoneOffset != timeZoneOffset) {\r\n                var diff = newTimeZoneOffset - timeZoneOffset;\r\n                date.setUTCMinutes(date.getUTCMinutes() + diff);\r\n            }\r\n        }\r\n    }\r\n    return date;\r\n}\r\n/**\r\n * Returns a new `Date` object which corresponds to the source date in a\r\n * specific timezone.\r\n *\r\n * @since 4.10.1\r\n * @param   date      Source date\r\n * @param   timezone  Timezone identifier\r\n * @return            Recalculated new Date\r\n */\r\nexport function setTimezone(date, timezone) {\r\n    var d = new Date(date.toLocaleString(\"en-US\", { timeZone: timezone }));\r\n    return d;\r\n}\r\n/**\r\n * Returns minute fraction of the set timezone.\r\n *\r\n * @since 4.10.12\r\n * @param  timezone  Timezone identifier\r\n * @return           Minutes\r\n */\r\nexport function getTimezoneMinutes(timezone) {\r\n    var d = new Date();\r\n    d.setHours(0, 0, 0, 0);\r\n    var d2 = setTimezone(d, timezone);\r\n    return d2.getMinutes();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}