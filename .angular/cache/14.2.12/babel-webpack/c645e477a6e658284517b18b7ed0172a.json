{"ast":null,"code":"/**\r\n * This module contains Color object definition\r\n */\nimport { registry } from \"../Registry\";\nimport * as $colors from \"./Colors\";\nimport * as $type from \"./Type\";\n/**\r\n * Represents a color.\r\n *\r\n * `Color` accepts value only in [[iRGB]] object format. To create `Color`\r\n * object by parsing it from any supported string-based formats, use helper\r\n * [[color]] function:\r\n *\r\n * ```TypeScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n * ```JavaScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\n\nvar Color =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param color Source color\r\n   */\n  function Color(color) {\n    this._value = color;\n  }\n\n  Object.defineProperty(Color.prototype, \"rgb\", {\n    /**\r\n     * Returns [[iRGB]] representation of the color.\r\n     *\r\n     * @return RGB object\r\n     */\n    get: function () {\n      return this._value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"hex\", {\n    /**\r\n     * Returns color hex value string, e.g. \"#FF0000\".\r\n     *\r\n     * @return Hex color code\r\n     */\n    get: function () {\n      return this._value ? $colors.rgbToHex(this._value) : \"none\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"rgba\", {\n    /**\r\n     * Returns an `rgba()` representation of the color, e.g.:\r\n     * `rgba(255, 0, 0, 0.5)`.\r\n     *\r\n     * @return rgba color string\r\n     */\n    get: function () {\n      return this._value ? $colors.rgbToRGBA(this._value) : \"none\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"alpha\", {\n    /**\r\n     * Returns current transparency.\r\n     *\r\n     * @return Alpha (0-1)\r\n     */\n    get: function () {\n      if (this._value != null && this._value.a != null) {\n        return this._value.a;\n      } else {\n        return 1;\n      }\n    },\n\n    /**\r\n     * Set alpha (transparency) of the color.\r\n     *\r\n     * @param value Alpha (0-1)\r\n     */\n    set: function (value) {\n      if (this._value) {\n        this._value.a = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"lightColor\", {\n    /**\r\n     * Returns current light color setting.\r\n     *\r\n     * @return Color\r\n     */\n    get: function () {\n      if (!this._lightColor) {\n        this._lightColor = new Color({\n          r: 255,\n          g: 255,\n          b: 255\n        });\n      }\n\n      return this._lightColor;\n    },\n\n    /**\r\n     * Sets \"light\" color. Used when determining contrasting color.\r\n     *\r\n     * @param color Color\r\n     */\n    set: function (color) {\n      this._lightColor = color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"darkColor\", {\n    /**\r\n     * Returns current dark color setting.\r\n     *\r\n     * @return Color\r\n     */\n    get: function () {\n      if (!this._darkColor) {\n        this._darkColor = new Color({\n          r: 0,\n          g: 0,\n          b: 0\n        });\n      }\n\n      return this._darkColor;\n    },\n\n    /**\r\n     * Sets \"dark\" color. Used when determining contrasting color.\r\n     *\r\n     * @param color Color\r\n     */\n    set: function (color) {\n      this._darkColor = color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Overrides `toString` method so that [[Color]] object can be used as\r\n   * string.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return String represantion of color (usable in CSS)\r\n   */\n\n  Color.prototype.toString = function () {\n    return this.alpha < 1 ? this.rgba : this.hex;\n  };\n  /**\r\n   * Returns a new [[Color]] which is percent lighter (positive value),\r\n   * or darker (negative value).\r\n   *\r\n   * Parameter is in the scale of -1 to 1.\r\n   *\r\n   * @param percent  Increase/decrease lightness by X\r\n   * @return New Color\r\n   */\n\n\n  Color.prototype.lighten = function (percent) {\n    return new Color($colors.lighten(this.rgb, percent));\n  };\n  /**\r\n   * Returns a new [[Color]] which is percent brighter (positive value),\r\n   * or darker (negative value).\r\n   *\r\n   * Parameter is in the scale of -1 to 1.\r\n   *\r\n   * @param percent  Increase/decrease brightness by X\r\n   * @return New Color\r\n   */\n\n\n  Color.prototype.brighten = function (percent) {\n    return new Color($colors.brighten(this.rgb, percent));\n  };\n  /**\r\n   * Returns a new [[Color]] based on current color with specific saturation\r\n   * applied.\r\n   *\r\n   * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n   * saturated).\r\n   *\r\n   * @param saturation  Saturation (0-1)\r\n   * @return New (saturated) color\r\n   */\n\n\n  Color.prototype.saturate = function (saturation) {\n    return new Color($colors.saturate(this.rgb, saturation));\n  };\n\n  Object.defineProperty(Color.prototype, \"alternative\", {\n    /**\r\n     * Returns a either light or dark color that contrasts specifically with\r\n     * this color.\r\n     *\r\n     * Uses properties `darkColor` (default black) and `lightColor` (default\r\n     * white).\r\n     *\r\n     * Useful when determining which color label should be on a colored\r\n     * background, so that it stands out.\r\n     *\r\n     * @return Contrasting color\r\n     */\n    get: function () {\n      if (this.rgb != null) {\n        return $colors.isLight(this.rgb) ? this.darkColor : this.lightColor;\n      } else {\n        throw new Error(\"Color does not exist\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Color;\n}();\n\nexport { Color };\n/**\r\n * Resolves an input variable to a normal [[iRGB]] color and creates [[Color]]\r\n * object for it.\r\n *\r\n * @param value  Input value\r\n * @param alpha  Alpha (0-1)\r\n * @return Color object\r\n */\n\nexport function color(value, alpha) {\n  if (!$type.hasValue(value)) {\n    return new Color(undefined);\n  }\n\n  if (typeof value == \"string\") {\n    var cacheId = \"_color_\" + value + \"_\" + (alpha || \"1\");\n    var cached = registry.getCache(cacheId);\n\n    if (cached) {\n      return new Color({\n        r: cached.r,\n        g: cached.g,\n        b: cached.b,\n        a: cached.a\n      });\n    }\n\n    var rgb = $colors.rgb(value, alpha);\n    registry.setCache(cacheId, rgb);\n    return new Color(rgb);\n  } // Check if it's already a Color object\n\n\n  if (value instanceof Color) {\n    if ($type.hasValue(alpha)) {\n      value.alpha = alpha;\n    }\n\n    return value;\n  } // Not a string or Color instance, it's the iRGB object then\n\n\n  return new Color(value);\n}\n/**\r\n * Checks if supplied argument is instance of [[Color]].\r\n *\r\n * @param value  Input value\r\n * @return Is Color?\r\n */\n\nexport function isColor(value) {\n  return value instanceof Color;\n}\n/**\r\n * Converts any value to [[Color]].\r\n *\r\n * @param value  Input value\r\n * @return Color\r\n */\n\nexport function castColor(value) {\n  return color(value);\n}\n/**\r\n * Converts any value into a [[Color]].\r\n *\r\n * @param value  Source value\r\n * @return Color object\r\n */\n\nexport function toColor(value) {\n  if ($type.hasValue(value) && !isColor(value)) {\n    return castColor(value);\n  }\n\n  return value;\n}","map":{"version":3,"names":["registry","$colors","$type","Color","color","_value","Object","defineProperty","prototype","get","enumerable","configurable","rgbToHex","rgbToRGBA","a","set","value","_lightColor","r","g","b","_darkColor","toString","alpha","rgba","hex","lighten","percent","rgb","brighten","saturate","saturation","isLight","darkColor","lightColor","Error","hasValue","undefined","cacheId","cached","getCache","setCache","isColor","castColor","toColor"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js"],"sourcesContent":["/**\r\n * This module contains Color object definition\r\n */\r\nimport { registry } from \"../Registry\";\r\nimport * as $colors from \"./Colors\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * Represents a color.\r\n *\r\n * `Color` accepts value only in [[iRGB]] object format. To create `Color`\r\n * object by parsing it from any supported string-based formats, use helper\r\n * [[color]] function:\r\n *\r\n * ```TypeScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n * ```JavaScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nvar Color = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param color Source color\r\n     */\r\n    function Color(color) {\r\n        this._value = color;\r\n    }\r\n    Object.defineProperty(Color.prototype, \"rgb\", {\r\n        /**\r\n         * Returns [[iRGB]] representation of the color.\r\n         *\r\n         * @return RGB object\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"hex\", {\r\n        /**\r\n         * Returns color hex value string, e.g. \"#FF0000\".\r\n         *\r\n         * @return Hex color code\r\n         */\r\n        get: function () {\r\n            return this._value ? $colors.rgbToHex(this._value) : \"none\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"rgba\", {\r\n        /**\r\n         * Returns an `rgba()` representation of the color, e.g.:\r\n         * `rgba(255, 0, 0, 0.5)`.\r\n         *\r\n         * @return rgba color string\r\n         */\r\n        get: function () {\r\n            return this._value ? $colors.rgbToRGBA(this._value) : \"none\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"alpha\", {\r\n        /**\r\n         * Returns current transparency.\r\n         *\r\n         * @return Alpha (0-1)\r\n         */\r\n        get: function () {\r\n            if (this._value != null && this._value.a != null) {\r\n                return this._value.a;\r\n            }\r\n            else {\r\n                return 1;\r\n            }\r\n        },\r\n        /**\r\n         * Set alpha (transparency) of the color.\r\n         *\r\n         * @param value Alpha (0-1)\r\n         */\r\n        set: function (value) {\r\n            if (this._value) {\r\n                this._value.a = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"lightColor\", {\r\n        /**\r\n         * Returns current light color setting.\r\n         *\r\n         * @return Color\r\n         */\r\n        get: function () {\r\n            if (!this._lightColor) {\r\n                this._lightColor = new Color({ r: 255, g: 255, b: 255 });\r\n            }\r\n            return this._lightColor;\r\n        },\r\n        /**\r\n         * Sets \"light\" color. Used when determining contrasting color.\r\n         *\r\n         * @param color Color\r\n         */\r\n        set: function (color) {\r\n            this._lightColor = color;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"darkColor\", {\r\n        /**\r\n         * Returns current dark color setting.\r\n         *\r\n         * @return Color\r\n         */\r\n        get: function () {\r\n            if (!this._darkColor) {\r\n                this._darkColor = new Color({ r: 0, g: 0, b: 0 });\r\n            }\r\n            return this._darkColor;\r\n        },\r\n        /**\r\n         * Sets \"dark\" color. Used when determining contrasting color.\r\n         *\r\n         * @param color Color\r\n         */\r\n        set: function (color) {\r\n            this._darkColor = color;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Overrides `toString` method so that [[Color]] object can be used as\r\n     * string.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return String represantion of color (usable in CSS)\r\n     */\r\n    Color.prototype.toString = function () {\r\n        return this.alpha < 1 ? this.rgba : this.hex;\r\n    };\r\n    /**\r\n     * Returns a new [[Color]] which is percent lighter (positive value),\r\n     * or darker (negative value).\r\n     *\r\n     * Parameter is in the scale of -1 to 1.\r\n     *\r\n     * @param percent  Increase/decrease lightness by X\r\n     * @return New Color\r\n     */\r\n    Color.prototype.lighten = function (percent) {\r\n        return new Color($colors.lighten(this.rgb, percent));\r\n    };\r\n    /**\r\n     * Returns a new [[Color]] which is percent brighter (positive value),\r\n     * or darker (negative value).\r\n     *\r\n     * Parameter is in the scale of -1 to 1.\r\n     *\r\n     * @param percent  Increase/decrease brightness by X\r\n     * @return New Color\r\n     */\r\n    Color.prototype.brighten = function (percent) {\r\n        return new Color($colors.brighten(this.rgb, percent));\r\n    };\r\n    /**\r\n     * Returns a new [[Color]] based on current color with specific saturation\r\n     * applied.\r\n     *\r\n     * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n     * saturated).\r\n     *\r\n     * @param saturation  Saturation (0-1)\r\n     * @return New (saturated) color\r\n     */\r\n    Color.prototype.saturate = function (saturation) {\r\n        return new Color($colors.saturate(this.rgb, saturation));\r\n    };\r\n    Object.defineProperty(Color.prototype, \"alternative\", {\r\n        /**\r\n         * Returns a either light or dark color that contrasts specifically with\r\n         * this color.\r\n         *\r\n         * Uses properties `darkColor` (default black) and `lightColor` (default\r\n         * white).\r\n         *\r\n         * Useful when determining which color label should be on a colored\r\n         * background, so that it stands out.\r\n         *\r\n         * @return Contrasting color\r\n         */\r\n        get: function () {\r\n            if (this.rgb != null) {\r\n                return $colors.isLight(this.rgb) ? this.darkColor : this.lightColor;\r\n            }\r\n            else {\r\n                throw new Error(\"Color does not exist\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Color;\r\n}());\r\nexport { Color };\r\n/**\r\n * Resolves an input variable to a normal [[iRGB]] color and creates [[Color]]\r\n * object for it.\r\n *\r\n * @param value  Input value\r\n * @param alpha  Alpha (0-1)\r\n * @return Color object\r\n */\r\nexport function color(value, alpha) {\r\n    if (!$type.hasValue(value)) {\r\n        return new Color(undefined);\r\n    }\r\n    if (typeof value == \"string\") {\r\n        var cacheId = \"_color_\" + value + \"_\" + (alpha || \"1\");\r\n        var cached = registry.getCache(cacheId);\r\n        if (cached) {\r\n            return new Color({\r\n                r: cached.r,\r\n                g: cached.g,\r\n                b: cached.b,\r\n                a: cached.a\r\n            });\r\n        }\r\n        var rgb = $colors.rgb(value, alpha);\r\n        registry.setCache(cacheId, rgb);\r\n        return new Color(rgb);\r\n    }\r\n    // Check if it's already a Color object\r\n    if (value instanceof Color) {\r\n        if ($type.hasValue(alpha)) {\r\n            value.alpha = alpha;\r\n        }\r\n        return value;\r\n    }\r\n    // Not a string or Color instance, it's the iRGB object then\r\n    return new Color(value);\r\n}\r\n/**\r\n * Checks if supplied argument is instance of [[Color]].\r\n *\r\n * @param value  Input value\r\n * @return Is Color?\r\n */\r\nexport function isColor(value) {\r\n    return value instanceof Color;\r\n}\r\n/**\r\n * Converts any value to [[Color]].\r\n *\r\n * @param value  Input value\r\n * @return Color\r\n */\r\nexport function castColor(value) {\r\n    return color(value);\r\n}\r\n/**\r\n * Converts any value into a [[Color]].\r\n *\r\n * @param value  Source value\r\n * @return Color object\r\n */\r\nexport function toColor(value) {\r\n    if ($type.hasValue(value) && !isColor(value)) {\r\n        return castColor(value);\r\n    }\r\n    return value;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}