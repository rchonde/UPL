{"ast":null,"code":"/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\nimport { registry } from \"../../core/Registry\";\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar TreeMapDataItem =\n/** @class */\nfunction (_super) {\n  __extends(TreeMapDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function TreeMapDataItem() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Required for squarify functionality.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n\n    _this.rows = [];\n    _this.className = \"TreeMapDataItem\";\n    _this.values.value = {\n      workingValue: 0\n    };\n    _this.values.x0 = {};\n    _this.values.y0 = {};\n    _this.values.x1 = {};\n    _this.values.y1 = {};\n    _this.hasChildren.children = true;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(TreeMapDataItem.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Legend data item\r\n     */\n    get: function () {\n      return this._legendDataItem;\n    },\n\n    /**\r\n     * A legend's data item, that corresponds to this data item.\r\n     *\r\n     * @param value  Legend data item\r\n     */\n    set: function (value) {\n      this._legendDataItem = value;\n\n      if (value.label) {\n        value.label.dataItem = this;\n      }\n\n      if (value.valueLabel) {\n        value.valueLabel.dataItem = this;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a duration (ms) the Data Item should take to animate from one\r\n   * value to another.\r\n   *\r\n   * If the duration is not specified via parameter, this method will try to\r\n   * request a default duration from the related `Component`.\r\n   *\r\n   * @param duration  Default duration (ms)\r\n   * @return Duration (ms)\r\n   */\n\n  TreeMapDataItem.prototype.getDuration = function () {\n    return 0;\n  };\n\n  Object.defineProperty(TreeMapDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      var value = 0;\n\n      if (!this.children || this.children.length == 0) {\n        value = this.values[\"value\"].workingValue;\n      } else {\n        $iter.each(this.children.iterator(), function (child) {\n          var childValue = child.value;\n\n          if ($type.isNumber(childValue)) {\n            value += childValue;\n          }\n        });\n      }\n\n      return value;\n      /*\r\n      let value = this.values[\"value\"].workingValue;\r\n            if (!$type.isNumber(value)) {\r\n          value = 0;\r\n          if (this.children) {\r\n              $iter.each(this.children.iterator(), (child) => {\r\n                  if ($type.isNumber(child.value)) {\r\n                      value += child.value;\r\n                  }\r\n              });\r\n          }\r\n      }\r\n      return value;*/\n    },\n\n    /**\r\n     * Numeric value of the item.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"percent\", {\n    /**\r\n     * Percent value of a node\r\n     */\n    get: function () {\n      if (this.parent) {\n        return this.value / this.parent.value * 100;\n      }\n\n      return 100;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"x0\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      return this.values.x0.value;\n    },\n\n    /**\r\n     * Item's X position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  X\r\n     */\n    set: function (value) {\n      this.setValue(\"x0\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"x1\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      return this.values.x1.value;\n    },\n\n    /**\r\n     * Item's X position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  X\r\n     */\n    set: function (value) {\n      this.setValue(\"x1\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"y0\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.values.y0.value;\n    },\n\n    /**\r\n     * Item's Y position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  Y\r\n     */\n    set: function (value) {\n      this.setValue(\"y0\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"y1\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.values.y1.value;\n    },\n\n    /**\r\n     * Item's Y position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  Y\r\n     */\n    set: function (value) {\n      this.setValue(\"y1\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function () {\n      return this.properties.name;\n    },\n\n    /**\r\n     * Item's name.\r\n     *\r\n     * @param name  Name\r\n     */\n    set: function (name) {\n      this.setProperty(\"name\", name);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"children\", {\n    /**\r\n     * @return Item's children\r\n     */\n    get: function () {\n      return this.properties.children;\n    },\n\n    /**\r\n     * A list of item's sub-children.\r\n     *\r\n     * Having children means that the TreeMap chat will automatically be\r\n     * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n     * display its children.\r\n     *\r\n     * Treemap can have any level of nesting.\r\n     *\r\n     * @param children  Item's children\r\n     */\n    set: function (children) {\n      this.setProperty(\"children\", children);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"level\", {\n    /**\r\n     * Depth level in the treemap hierarchy.\r\n     *\r\n     * The top-level item will have level set at 0. Its children will have\r\n     * level 1, and so on.\r\n     *\r\n     * @readonly\r\n     * @return Level\r\n     */\n    get: function () {\n      if (!this.parent) {\n        return 0;\n      } else {\n        return this.parent.level + 1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"color\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function () {\n      var color = this.properties.color;\n\n      if (color == undefined) {\n        if (this.parent) {\n          color = this.parent.color;\n        }\n      }\n\n      if (color == undefined) {\n        if (this.component) {\n          color = this.component.colors.getIndex(this.component.colors.step * this.index);\n        }\n      }\n\n      return color;\n    },\n\n    /**\r\n     * Item's color.\r\n     *\r\n     * If not set, will use parent's color, or, if that is not set either,\r\n     * automatically assigned color from chart's color set. (`chart.colors`)\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function (value) {\n      this.setProperty(\"color\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"fill\", {\n    /**\r\n     * @ignore\r\n     * For the legend to work properly\r\n     */\n    get: function () {\n      return this.color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"series\", {\n    get: function () {\n      return this._series;\n    },\n\n    /**\r\n     * Series of children data items\r\n     * @todo: proper descrition\r\n     */\n    set: function (series) {\n      if (series != this._series) {\n        if (this._series) {\n          this.component.series.removeValue(this._series);\n\n          this._series.dispose();\n        }\n\n        this._series = series;\n\n        this._disposers.push(series);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Hides the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param toValue   A value to set to `fields` when hiding\r\n   * @param fields    A list of data fields to set value to `toValue`\r\n   */\n\n  TreeMapDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    this.setWorkingValue(\"value\", 0);\n\n    if (this.children) {\n      this.children.each(function (child) {\n        child.hide(duration, delay, toValue, fields);\n      });\n    }\n\n    var seriesDataItem = this.seriesDataItem;\n\n    if (seriesDataItem) {\n      seriesDataItem.bullets.each(function (key, value) {\n        value.hide();\n        value.preventShow = true;\n      });\n    }\n\n    return _super.prototype.hide.call(this, duration, delay, toValue, fields);\n  };\n  /**\r\n   * Shows the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param fields    A list of fields to set values of\r\n   */\n\n\n  TreeMapDataItem.prototype.show = function (duration, delay, fields) {\n    this.setWorkingValue(\"value\", this.values.value.value);\n\n    if (this.children) {\n      this.children.each(function (child) {\n        child.show(duration, delay, fields);\n      });\n    }\n\n    var seriesDataItem = this.seriesDataItem;\n\n    if (seriesDataItem) {\n      seriesDataItem.bullets.each(function (key, value) {\n        value.preventShow = false;\n      });\n    }\n\n    return _super.prototype.show.call(this, duration, delay, fields);\n  };\n\n  return TreeMapDataItem;\n}(XYChartDataItem);\n\nexport { TreeMapDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\n\nvar TreeMap =\n/** @class */\nfunction (_super) {\n  __extends(TreeMap, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function TreeMap() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * An algorithm used to divide area into squares based on their value.\r\n     *\r\n     * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n     *\r\n     * ```TypeScript\r\n     * chart.layoutAlgorithm = chart.sliceDice;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.layoutAlgorithm = chart.sliceDice;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"layoutAlgorithm\": \"sliceDice\",\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n     * @default squarify\r\n     */\n\n\n    _this.layoutAlgorithm = _this.squarify;\n    /**\r\n     * Is the chart zoomable?\r\n     *\r\n     * If the chart is `zoomable`, and items have sub-items, the chart will\r\n     * drill-down to sub-items when click on their parent item.\r\n     *\r\n     * @default true\r\n     */\n\n    _this.zoomable = true;\n    _this.className = \"TreeMap\";\n    _this._usesData = true;\n    _this.maxLevels = 2;\n    _this.currentLevel = 0;\n    _this.hideParentColumns = false;\n    _this.colors = new ColorSet();\n    _this.sorting = \"descending\"; // create two value axes for the chart\n\n    var xAxis = _this.xAxes.push(new ValueAxis());\n\n    xAxis.title.disabled = true;\n    xAxis.strictMinMax = true;\n    var xRenderer = xAxis.renderer;\n    xRenderer.inside = true;\n    xRenderer.labels.template.disabled = true;\n    xRenderer.ticks.template.disabled = true;\n    xRenderer.grid.template.disabled = true;\n    xRenderer.axisFills.template.disabled = true;\n    xRenderer.minGridDistance = 100;\n    xRenderer.line.disabled = true;\n    xRenderer.baseGrid.disabled = true; //xRenderer.inversed = true;\n\n    var yAxis = _this.yAxes.push(new ValueAxis());\n\n    yAxis.title.disabled = true;\n    yAxis.strictMinMax = true;\n    var yRenderer = yAxis.renderer;\n    yRenderer.inside = true;\n    yRenderer.labels.template.disabled = true;\n    yRenderer.ticks.template.disabled = true;\n    yRenderer.grid.template.disabled = true;\n    yRenderer.axisFills.template.disabled = true;\n    yRenderer.minGridDistance = 100;\n    yRenderer.line.disabled = true;\n    yRenderer.baseGrid.disabled = true;\n    yRenderer.inversed = true; // shortcuts\n\n    _this.xAxis = xAxis;\n    _this.yAxis = yAxis;\n    var template = new TreeMapSeries();\n    _this.seriesTemplates = new DictionaryTemplate(template);\n    template.virtualParent = _this;\n\n    _this._disposers.push(new DictionaryDisposer(_this.seriesTemplates));\n\n    _this._disposers.push(template);\n\n    _this.zoomOutButton.events.on(\"hit\", function () {\n      _this.zoomToChartDataItem(_this._homeDataItem);\n    }, undefined, false);\n\n    _this.seriesTemplates.events.on(\"insertKey\", function (event) {\n      event.newValue.isTemplate = true;\n    }, undefined, false); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(TreeMap.prototype, \"navigationBar\", {\n    /**\r\n     * Returns navigationBar if it is added to a chart\r\n     */\n    get: function () {\n      return this._navigationBar;\n    },\n\n    /**\r\n     * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n     * drill-down path.\r\n     */\n    set: function (navigationBar) {\n      var _this = this;\n\n      if (this._navigationBar != navigationBar) {\n        this._navigationBar = navigationBar;\n        navigationBar.parent = this;\n        navigationBar.toBack();\n        navigationBar.links.template.events.on(\"hit\", function (event) {\n          var dataItem = event.target.dataItem.dataContext;\n\n          if (!dataItem.isDisposed()) {\n            _this.zoomToChartDataItem(dataItem);\n\n            _this.createTreeSeries(dataItem);\n          }\n        }, undefined, true);\n\n        this._disposers.push(navigationBar);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * (Re)validates chart's data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  TreeMap.prototype.validateData = function () {\n    this.series.clear();\n    this._tempSeries = [];\n\n    _super.prototype.validateData.call(this);\n\n    if (this._homeDataItem) {\n      this._homeDataItem.dispose();\n    }\n\n    var homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\n\n    this._homeDataItem = homeDataItem;\n    $iter.each(this.dataItems.iterator(), function (dataItem) {\n      dataItem.parent = homeDataItem;\n    });\n    homeDataItem.children = this.dataItems;\n    homeDataItem.x0 = 0;\n    homeDataItem.y0 = 0;\n    homeDataItem.name = this._homeText;\n    var maxX = 1000;\n    var maxY = Math.round(maxX * this.pixelHeight / this.pixelWidth / 10) * 10 || 1000;\n    homeDataItem.x1 = maxX;\n    homeDataItem.y1 = maxY;\n    this.xAxis.min = 0;\n    this.xAxis.max = maxX;\n    this.xAxis.getMinMax();\n    this.yAxis.min = 0;\n    this.yAxis.max = maxY;\n    this.yAxis.getMinMax();\n    this.layoutItems(homeDataItem);\n    this.createTreeSeries(homeDataItem);\n    this.feedLegend();\n  };\n  /**\r\n   * Layouts and sizes all items according to their value and\r\n   * `layoutAlgorithm`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Parent data item\r\n   */\n\n\n  TreeMap.prototype.layoutItems = function (parent, sorting) {\n    if (parent) {\n      var children = parent.children;\n\n      if (!sorting) {\n        sorting = this.sorting;\n      }\n\n      if (sorting == \"ascending\") {\n        children.values.sort(function (a, b) {\n          return a.value - b.value;\n        });\n      }\n\n      if (sorting == \"descending\") {\n        children.values.sort(function (a, b) {\n          return b.value - a.value;\n        });\n      }\n\n      this._updateDataItemIndexes(0);\n\n      this.layoutAlgorithm(parent);\n\n      for (var i = 0, len = children.length; i < len; i++) {\n        var node = children.getIndex(i);\n\n        if (node.children) {\n          this.layoutItems(node);\n        }\n      }\n    }\n  };\n  /**\r\n   * Creates and returns a new treemap series.\r\n   *\r\n   * @todo Description\r\n   * @param dataItem  Data item to create series out of\r\n   */\n\n\n  TreeMap.prototype.createTreeSeries = function (dataItem) {\n    var _this = this;\n\n    this._tempSeries = [];\n    var navigationData = [dataItem]; // create parent series and navigation data\n\n    var parentDataItem = dataItem.parent;\n\n    while (parentDataItem != undefined) {\n      this.initSeries(parentDataItem);\n      navigationData.push(parentDataItem);\n      parentDataItem = parentDataItem.parent;\n    }\n\n    navigationData.reverse();\n\n    if (this.navigationBar) {\n      this.navigationBar.data = navigationData;\n    } // create series and children series\n\n\n    this.createTreeSeriesReal(dataItem); // add those which are not in the list\n\n    $array.each(this._tempSeries, function (series) {\n      if (_this.series.indexOf(series) == -1) {\n        _this.series.push(series);\n      }\n\n      series.zIndex = series.level;\n    });\n  };\n  /**\r\n   * [createTreeSeriesReal description]\r\n   *\r\n   * @todo Description\r\n   * @param dataItem [description]\r\n   */\n\n\n  TreeMap.prototype.createTreeSeriesReal = function (dataItem) {\n    if (dataItem.children) {\n      var level = dataItem.level;\n\n      if (level < this.currentLevel + this.maxLevels) {\n        this.initSeries(dataItem);\n\n        for (var i = 0; i < dataItem.children.length; i++) {\n          var child = dataItem.children.getIndex(i);\n\n          if (child.children) {\n            this.createTreeSeriesReal(child);\n          }\n        }\n      }\n    }\n  };\n\n  TreeMap.prototype.setData = function (value) {\n    this.currentLevel = 0;\n    this.currentlyZoomed = undefined;\n    this.xAxis.start = 0;\n    this.xAxis.end = 1;\n    this.yAxis.start = 0;\n    this.yAxis.end = 1;\n\n    _super.prototype.setData.call(this, value);\n  };\n  /**\r\n   * @ignore\r\n   * Overriding, as tree map series are created on the fly all the time\r\n   */\n\n\n  TreeMap.prototype.seriesAppeared = function () {\n    return true;\n  };\n  /**\r\n   * Initializes the treemap series.\r\n   *\r\n   * @todo Description\r\n   * @param dataItem  Chart data item\r\n   */\n\n\n  TreeMap.prototype.initSeries = function (dataItem) {\n    var _this = this;\n\n    if (!dataItem.series) {\n      var series = void 0;\n      var template = this.seriesTemplates.getKey(dataItem.level.toString());\n\n      if (template) {\n        series = template.clone();\n      } else {\n        series = this.series.create();\n      } // for the legend to get {value}\n\n\n      series.dataItem.dataContext = dataItem;\n      series.name = dataItem.name;\n      series.parentDataItem = dataItem;\n      dataItem.series = series;\n      var level = dataItem.level;\n      series.level = level;\n      var dataContext = dataItem.dataContext;\n\n      if (dataContext) {\n        series.config = dataContext.config;\n      }\n\n      this.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\n\n      series.data = dataItem.children.values;\n      series.fill = dataItem.color;\n      series.columnsContainer.hide(0);\n      series.bulletsContainer.hide(0);\n      series.columns.template.adapter.add(\"fill\", function (fill, target) {\n        var dataItem = target.dataItem;\n\n        if (dataItem) {\n          var treeMapDataItem = dataItem.treeMapDataItem;\n\n          if (treeMapDataItem) {\n            target.fill = treeMapDataItem.color;\n            target.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\n\n            return treeMapDataItem.color;\n          }\n        }\n      });\n\n      if (this.zoomable && (dataItem.level > this.currentLevel || dataItem.children && dataItem.children.length > 0)) {\n        series.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\n\n        if (this.zoomable) {\n          series.columns.template.events.on(\"hit\", function (event) {\n            var seriesDataItem = event.target.dataItem;\n\n            if (dataItem.level > _this.currentLevel) {\n              _this.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\n            } else {\n              _this.zoomToSeriesDataItem(seriesDataItem);\n            }\n          }, this, undefined);\n        }\n      }\n    }\n\n    this._tempSeries.push(dataItem.series);\n  };\n  /**\r\n   * Toggles bullets so that labels that belong to current drill level are\r\n   * shown.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   */\n\n\n  TreeMap.prototype.toggleBullets = function (duration) {\n    var _this = this; // hide all series which are not in tempSeries\n\n\n    $iter.each(this.series.iterator(), function (series) {\n      if (_this._tempSeries.indexOf(series) == -1) {\n        //series.hideReal(duration);\n        series.columnsContainer.hide();\n        series.bulletsContainer.hide(duration);\n      } else {\n        //series.showReal(duration);\n        series.columnsContainer.show();\n        series.bulletsContainer.show(duration);\n        series.dataItems.each(function (dataItem) {\n          dataItem.bullets.each(function (key, bullet) {\n            bullet.show();\n          });\n        });\n\n        if (series.level < _this.currentLevel) {\n          if (_this.hideParentColumns) {\n            series.columnsContainer.hide();\n          }\n\n          series.bulletsContainer.hide(duration);\n        } else if (series.level == _this.currentLevel) {\n          if (_this.maxLevels > 1) {\n            series.dataItems.each(function (dataItem) {\n              if (dataItem.treeMapDataItem.children) {\n                dataItem.bullets.each(function (key, bullet) {\n                  bullet.hide();\n                });\n              }\n            });\n          }\n        }\n      }\n    });\n  };\n  /**\r\n   * Zooms to particular item in series.\r\n   *\r\n   * @param dataItem  Data item\r\n   */\n\n\n  TreeMap.prototype.zoomToSeriesDataItem = function (dataItem) {\n    this.zoomToChartDataItem(dataItem.treeMapDataItem);\n  };\n  /**\r\n   * Zooms to particular item. If dataItem is not specified, the chart will zoom-out.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  TreeMap.prototype.zoomToChartDataItem = function (dataItem) {\n    var _this = this;\n\n    if (!dataItem) {\n      dataItem = this._homeDataItem;\n    }\n\n    var zoomOutButton = this.zoomOutButton; // this is needed because if there is only one fist level, it won't be shown\n\n    if (zoomOutButton) {\n      if (dataItem != this._homeDataItem) {\n        zoomOutButton.show();\n      } else {\n        zoomOutButton.hide();\n      }\n    }\n\n    if (dataItem && dataItem.children) {\n      this.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\n      this.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\n      this.currentLevel = dataItem.level;\n      this.currentlyZoomed = dataItem;\n      this.createTreeSeries(dataItem);\n      var rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\n\n      if (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\n        this._dataDisposers.push(rangeChangeAnimation);\n\n        rangeChangeAnimation.events.once(\"animationended\", function () {\n          _this.toggleBullets();\n        });\n      } else {\n        this.toggleBullets();\n      }\n    }\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  TreeMap.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"TreeMap chart\");\n    } //this.homeText = this.language.translate(\"Home\");\n\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  TreeMap.prototype.createDataItem = function () {\n    return new TreeMapDataItem();\n  };\n\n  Object.defineProperty(TreeMap.prototype, \"maxLevels\", {\n    /**\r\n     * @return Maximum drill-down level\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxLevels\");\n    },\n\n    /**\r\n     * Maximum number of levels the chart will display initially.\r\n     *\r\n     * @default 2\r\n     * @param value  Maximum drill-down level\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxLevels\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMap.prototype, \"currentLevel\", {\n    /**\r\n     * @return Current level\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"currentLevel\");\n    },\n\n    /**\r\n     * Current drill-down level the chart is at.\r\n     *\r\n     * @param value  Current level\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"currentLevel\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMap.prototype, \"hideParentColumns\", {\n    /**\r\n     * @return Hide?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hideParentColumns\");\n    },\n\n    /**\r\n     * If set to `true`, columns of parent nodes will be hidden when user\r\n     * drills-down into deeper levels.\r\n     *\r\n     * @sice 4.7.4\r\n     * @default false\r\n     * @param  value  Hide?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"hideParentColumns\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMap.prototype, \"sorting\", {\n    get: function () {\n      return this.getPropertyValue(\"sorting\");\n    },\n\n    /**\r\n     * Sorting direction of treemap items.\r\n     *\r\n     * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n     *\r\n     * @default \"descending\"\r\n     * @param value [description]\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"sorting\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and returns a new series of the suitable type.\r\n   *\r\n   * @return new series\r\n   */\n\n  TreeMap.prototype.createSeries = function () {\n    return new TreeMapSeries();\n  };\n\n  Object.defineProperty(TreeMap.prototype, \"homeText\", {\n    /**\r\n     * @return Home text\r\n     */\n    get: function () {\n      return this._homeText;\n    },\n\n    /**\r\n     * A text displayed on the \"home\" button which is used to go back to level 0\r\n     * after drill into sub-items.\r\n     *\r\n     * @param value  Home text\r\n     */\n    set: function (value) {\n      this._homeText = value;\n\n      if (this._homeDataItem) {\n        this._homeDataItem.name = this._homeText;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n  TreeMap.prototype.processConfig = function (config) {\n    if (config) {\n      // Instantiate layout algorithm\n      if ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\n        switch (config[\"layoutAlgorithm\"]) {\n          case \"squarify\":\n            config[\"layoutAlgorithm\"] = this.squarify;\n            break;\n\n          case \"binaryTree\":\n            config[\"layoutAlgorithm\"] = this.binaryTree;\n            break;\n\n          case \"slice\":\n            config[\"layoutAlgorithm\"] = this.slice;\n            break;\n\n          case \"dice\":\n            config[\"layoutAlgorithm\"] = this.dice;\n            break;\n\n          case \"sliceDice\":\n            config[\"layoutAlgorithm\"] = this.sliceDice;\n            break;\n\n          default:\n            delete config[\"layoutAlgorithm\"];\n            break;\n        }\n      } // Set type for navigation bar\n\n\n      if ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\n        config.navigationBar.type = \"NavigationBar\";\n      }\n\n      _super.prototype.processConfig.call(this, config);\n    }\n  };\n  /**\r\n   * Measures the size of container and informs its children of how much size\r\n   * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n   * properties.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  TreeMap.prototype.validateLayout = function () {\n    _super.prototype.validateLayout.call(this);\n\n    this.layoutItems(this.currentlyZoomed);\n  };\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  TreeMap.prototype.validateDataItems = function () {\n    _super.prototype.validateDataItems.call(this);\n\n    this.layoutItems(this._homeDataItem);\n    $iter.each(this.series.iterator(), function (series) {\n      series.validateRawData();\n    });\n    this.zoomToChartDataItem(this._homeDataItem);\n  };\n  /**\r\n   * ==========================================================================\r\n   * TREEMAP LAYOUT FUNCTIONS\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * The functions below are from D3.js library (https://d3js.org/)\r\n   *\r\n   * --------------------------------------------------------------------------\r\n   * Copyright 2017 Mike Bostock\r\n   *\r\n   * Redistribution and use in source and binary forms, with or without\r\n   * modification, are permitted provided that the following conditions are met:\r\n   *\r\n   * 1. Redistributions of source code must retain the above copyright notice,\r\n   *    this list of conditions and the following disclaimer.\r\n   *\r\n   * 2. Redistributions in binary form must reproduce the above copyright\r\n   *    notice,this list of conditions and the following disclaimer in the\r\n   *    documentation and/or other materials provided with the distribution.\r\n   *\r\n   * 3. Neither the name of the copyright holder nor the names of its\r\n   *    contributors may be used to endorse or promote products derived from\r\n   *    this software without specific prior written permission.\r\n   *\r\n   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n   * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n   * POSSIBILITY OF SUCH DAMAGE.\r\n   * --------------------------------------------------------------------------\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Treemap layout algorithm: binaryTree.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n\n\n  TreeMap.prototype.binaryTree = function (parent) {\n    var nodes = parent.children,\n        i,\n        n = nodes.length,\n        sum,\n        sums = new Array(n + 1);\n\n    for (sums[0] = sum = i = 0; i < n; ++i) {\n      sums[i + 1] = sum += nodes.getIndex(i).value;\n    }\n\n    if (n > 0) {\n      partition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\n    }\n\n    function partition(i, j, value, x0, y0, x1, y1) {\n      if (i >= j - 1) {\n        var node = nodes.getIndex(i);\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n        return;\n      }\n\n      var valueOffset = sums[i],\n          valueTarget = value / 2 + valueOffset,\n          k = i + 1,\n          hi = j - 1;\n\n      while (k < hi) {\n        var mid = k + hi >>> 1;\n\n        if (sums[mid] < valueTarget) {\n          k = mid + 1;\n        } else {\n          hi = mid;\n        }\n      }\n\n      if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) {\n        --k;\n      }\n\n      var valueLeft = sums[k] - valueOffset,\n          valueRight = value - valueLeft;\n\n      if (value == 0) {\n        var node = nodes.getIndex(i);\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n        return;\n      }\n\n      if (x1 - x0 > y1 - y0) {\n        var xk = (x0 * valueRight + x1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, xk, y1);\n        partition(k, j, valueRight, xk, y0, x1, y1);\n      } else {\n        var yk = (y0 * valueRight + y1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, x1, yk);\n        partition(k, j, valueRight, x0, yk, x1, y1);\n      }\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: slice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n\n\n  TreeMap.prototype.slice = function (parent) {\n    var x0 = parent.x0;\n    var x1 = parent.x1;\n    var y0 = parent.y0;\n    var y1 = parent.y1;\n    var nodes = parent.children;\n    var node;\n    var i = -1;\n    var n = nodes.length;\n    var k = parent.value && (y1 - y0) / parent.value;\n\n    while (++i < n) {\n      node = nodes.getIndex(i);\n      node.x0 = x0;\n      node.x1 = x1;\n      node.y0 = y0;\n      y0 += node.value * k;\n      node.y1 = y0;\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: dice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n\n\n  TreeMap.prototype.dice = function (parent) {\n    var x0 = parent.x0;\n    var x1 = parent.x1;\n    var y0 = parent.y0;\n    var y1 = parent.y1;\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (x1 - x0) / parent.value;\n\n    while (++i < n) {\n      node = nodes.getIndex(i);\n      node.y0 = y0;\n      node.y1 = y1;\n      node.x0 = x0;\n      x0 += node.value * k;\n      node.x1 = x0;\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: slideDice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n\n\n  TreeMap.prototype.sliceDice = function (parent) {\n    if (parent.level & 1) {\n      this.slice(parent);\n    } else {\n      this.dice(parent);\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: squarify.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n\n\n  TreeMap.prototype.squarify = function (parent) {\n    var ratio = (1 + Math.sqrt(5)) / 2;\n    var x0 = parent.x0;\n    var x1 = parent.x1;\n    var y0 = parent.y0;\n    var y1 = parent.y1;\n    var nodes = parent.children;\n    var nodeValue;\n    var i0 = 0;\n    var i1 = 0;\n    var n = nodes.length;\n    var dx;\n    var dy;\n    var value = parent.value;\n    var sumValue;\n    var minValue;\n    var maxValue;\n    var newRatio;\n    var minRatio;\n    var alpha;\n    var beta;\n\n    while (i0 < n) {\n      dx = x1 - x0;\n      dy = y1 - y0; // Find the next non-empty node.\n\n      do {\n        sumValue = nodes.getIndex(i1++).value;\n      } while (!sumValue && i1 < n);\n\n      minValue = maxValue = sumValue;\n      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n      beta = sumValue * sumValue * alpha;\n      minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.\n\n      for (; i1 < n; ++i1) {\n        sumValue += nodeValue = nodes.getIndex(i1).value;\n\n        if (nodeValue < minValue) {\n          minValue = nodeValue;\n        }\n\n        if (nodeValue > maxValue) {\n          maxValue = nodeValue;\n        }\n\n        beta = sumValue * sumValue * alpha;\n        newRatio = Math.max(maxValue / beta, beta / minValue);\n\n        if (newRatio > minRatio) {\n          sumValue -= nodeValue;\n          break;\n        }\n\n        minRatio = newRatio;\n      } // Position and record the row orientation.\n\n\n      var row = this.dataItems.template.clone();\n      row.value = sumValue;\n      row.dice = dx < dy;\n      row.children = nodes.slice(i0, i1);\n      row.x0 = x0;\n      row.y0 = y0;\n      row.x1 = x1;\n      row.y1 = y1;\n\n      if (row.dice) {\n        row.y1 = value ? y0 += dy * sumValue / value : y1;\n        this.dice(row);\n      } else {\n        row.x1 = value ? x0 += dx * sumValue / value : x1;\n        this.slice(row);\n      }\n\n      value -= sumValue;\n      i0 = i1;\n    }\n  };\n\n  TreeMap.prototype.handleSeriesAdded2 = function () {// void\n  };\n  /**\r\n   * [handleDataItemValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  TreeMap.prototype.handleDataItemValueChange = function (dataItem, name) {\n    if (name == \"value\") {\n      this.invalidateDataItems();\n    }\n  };\n\n  TreeMap.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\n    if (name == \"value\") {\n      this.invalidateDataItems();\n    }\n  };\n\n  TreeMap.prototype.getLegendLevel = function (dataItem) {\n    if (!dataItem) {\n      return;\n    }\n\n    if (!dataItem.children) {\n      return;\n    }\n\n    if (dataItem.children.length > 1) {\n      return dataItem;\n    } else if (dataItem.children.length == 1) {\n      var child = dataItem.children.getIndex(0);\n\n      if (child.children) {\n        return this.getLegendLevel(child);\n      } else {\n        return dataItem;\n      }\n    } else {\n      return dataItem;\n    }\n  };\n\n  TreeMap.prototype.handleLegendSeriesAdded = function (series) {// void\n  };\n\n  Object.defineProperty(TreeMap.prototype, \"homeDataItem\", {\n    /**\r\n     * A data item associated with top node.\r\n     *\r\n     * @since 4.8.2\r\n     */\n    get: function () {\n      return this._homeDataItem;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n\n  TreeMap.prototype.feedLegend = function () {\n    var legend = this.legend;\n\n    if (legend) {\n      legend.dataFields.name = \"name\";\n      var legendParent = this.getLegendLevel(this._homeDataItem);\n\n      if (legendParent) {\n        var legendData_1 = [];\n        legendParent.children.each(function (dataItem) {\n          //if (!dataItem.hiddenInLegend) {\n          legendData_1.push(dataItem); //}\n        });\n        legend.data = legendData_1;\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  TreeMap.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    this._homeDataItem = undefined;\n    this.series.clear();\n\n    if (this.navigationBar) {\n      this.navigationBar.disposeData();\n    }\n\n    this.xAxis.disposeData();\n    this.yAxis.disposeData();\n  };\n  /**\r\n   * Since this chart uses hierarchical data, we need to remove childrent\r\n   * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n   *\r\n   * @return Export\r\n   */\n\n\n  TreeMap.prototype.getExporting = function () {\n    var _this = this;\n\n    var exporting = _super.prototype.getExporting.call(this);\n\n    exporting.adapter.add(\"formatDataFields\", function (info) {\n      if (info.format == \"csv\" || info.format == \"xlsx\") {\n        if ($type.hasValue(_this.dataFields.children)) {\n          delete info.dataFields[_this.dataFields.children];\n        }\n      }\n\n      return info;\n    });\n    return exporting;\n  };\n\n  return TreeMap;\n}(XYChart);\n\nexport { TreeMap };\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;","map":{"version":3,"names":["__extends","XYChart","XYChartDataItem","registry","DictionaryTemplate","DictionaryDisposer","ValueAxis","TreeMapSeries","ColorSet","MouseCursorStyle","$iter","$type","$array","TreeMapDataItem","_super","_this","call","rows","className","values","value","workingValue","x0","y0","x1","y1","hasChildren","children","applyTheme","Object","defineProperty","prototype","get","_legendDataItem","set","label","dataItem","valueLabel","enumerable","configurable","getDuration","length","each","iterator","child","childValue","isNumber","setValue","parent","properties","name","setProperty","level","color","undefined","component","colors","getIndex","step","index","_series","series","removeValue","dispose","_disposers","push","hide","duration","delay","toValue","fields","setWorkingValue","seriesDataItem","bullets","key","preventShow","show","TreeMap","layoutAlgorithm","squarify","zoomable","_usesData","maxLevels","currentLevel","hideParentColumns","sorting","xAxis","xAxes","title","disabled","strictMinMax","xRenderer","renderer","inside","labels","template","ticks","grid","axisFills","minGridDistance","line","baseGrid","yAxis","yAxes","yRenderer","inversed","seriesTemplates","virtualParent","zoomOutButton","events","on","zoomToChartDataItem","_homeDataItem","event","newValue","isTemplate","_navigationBar","navigationBar","toBack","links","target","dataContext","isDisposed","createTreeSeries","validateData","clear","_tempSeries","homeDataItem","dataItems","clone","_homeText","maxX","maxY","Math","round","pixelHeight","pixelWidth","min","max","getMinMax","layoutItems","feedLegend","sort","a","b","_updateDataItemIndexes","i","len","node","navigationData","parentDataItem","initSeries","reverse","data","createTreeSeriesReal","indexOf","zIndex","setData","currentlyZoomed","start","end","seriesAppeared","getKey","toString","create","config","dataUsers","fill","columnsContainer","bulletsContainer","columns","adapter","add","treeMapDataItem","remove","cursorOverStyle","pointer","zoomToSeriesDataItem","toggleBullets","bullet","zoomToValues","rangeChangeAnimation","isFinished","_dataDisposers","once","applyInternalDefaults","hasValue","readerTitle","language","translate","createDataItem","getPropertyValue","setPropertyValue","createSeries","processConfig","isString","binaryTree","slice","dice","sliceDice","type","validateLayout","validateDataItems","validateRawData","nodes","n","sum","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","ratio","sqrt","nodeValue","i0","i1","dx","dy","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","row","handleSeriesAdded2","handleDataItemValueChange","invalidateDataItems","handleDataItemWorkingValueChange","getLegendLevel","handleLegendSeriesAdded","legend","dataFields","legendParent","legendData_1","disposeData","getExporting","exporting","info","format","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/types/TreeMap.js"],"sourcesContent":["/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar TreeMapDataItem = /** @class */ (function (_super) {\r\n    __extends(TreeMapDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TreeMapDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Required for squarify functionality.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.rows = [];\r\n        _this.className = \"TreeMapDataItem\";\r\n        _this.values.value = { workingValue: 0 };\r\n        _this.values.x0 = {};\r\n        _this.values.y0 = {};\r\n        _this.values.x1 = {};\r\n        _this.values.y1 = {};\r\n        _this.hasChildren.children = true;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"legendDataItem\", {\r\n        /**\r\n         * @return Legend data item\r\n         */\r\n        get: function () {\r\n            return this._legendDataItem;\r\n        },\r\n        /**\r\n         * A legend's data item, that corresponds to this data item.\r\n         *\r\n         * @param value  Legend data item\r\n         */\r\n        set: function (value) {\r\n            this._legendDataItem = value;\r\n            if (value.label) {\r\n                value.label.dataItem = this;\r\n            }\r\n            if (value.valueLabel) {\r\n                value.valueLabel.dataItem = this;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a duration (ms) the Data Item should take to animate from one\r\n     * value to another.\r\n     *\r\n     * If the duration is not specified via parameter, this method will try to\r\n     * request a default duration from the related `Component`.\r\n     *\r\n     * @param duration  Default duration (ms)\r\n     * @return Duration (ms)\r\n     */\r\n    TreeMapDataItem.prototype.getDuration = function () {\r\n        return 0;\r\n    };\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"value\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            var value = 0;\r\n            if (!this.children || this.children.length == 0) {\r\n                value = this.values[\"value\"].workingValue;\r\n            }\r\n            else {\r\n                $iter.each(this.children.iterator(), function (child) {\r\n                    var childValue = child.value;\r\n                    if ($type.isNumber(childValue)) {\r\n                        value += childValue;\r\n                    }\r\n                });\r\n            }\r\n            return value;\r\n            /*\r\n            let value = this.values[\"value\"].workingValue;\r\n    \r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n                if (this.children) {\r\n                    $iter.each(this.children.iterator(), (child) => {\r\n                        if ($type.isNumber(child.value)) {\r\n                            value += child.value;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            return value;*/\r\n        },\r\n        /**\r\n         * Numeric value of the item.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"value\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"percent\", {\r\n        /**\r\n         * Percent value of a node\r\n         */\r\n        get: function () {\r\n            if (this.parent) {\r\n                return this.value / this.parent.value * 100;\r\n            }\r\n            return 100;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"x0\", {\r\n        /**\r\n         * @return X\r\n         */\r\n        get: function () {\r\n            return this.values.x0.value;\r\n        },\r\n        /**\r\n         * Item's X position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param value  X\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"x0\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"x1\", {\r\n        /**\r\n         * @return X\r\n         */\r\n        get: function () {\r\n            return this.values.x1.value;\r\n        },\r\n        /**\r\n         * Item's X position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param value  X\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"x1\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"y0\", {\r\n        /**\r\n         * @return Y\r\n         */\r\n        get: function () {\r\n            return this.values.y0.value;\r\n        },\r\n        /**\r\n         * Item's Y position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param value  Y\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"y0\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"y1\", {\r\n        /**\r\n         * @return Y\r\n         */\r\n        get: function () {\r\n            return this.values.y1.value;\r\n        },\r\n        /**\r\n         * Item's Y position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param value  Y\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"y1\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"name\", {\r\n        /**\r\n         * @return Name\r\n         */\r\n        get: function () {\r\n            return this.properties.name;\r\n        },\r\n        /**\r\n         * Item's name.\r\n         *\r\n         * @param name  Name\r\n         */\r\n        set: function (name) {\r\n            this.setProperty(\"name\", name);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"children\", {\r\n        /**\r\n         * @return Item's children\r\n         */\r\n        get: function () {\r\n            return this.properties.children;\r\n        },\r\n        /**\r\n         * A list of item's sub-children.\r\n         *\r\n         * Having children means that the TreeMap chat will automatically be\r\n         * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n         * display its children.\r\n         *\r\n         * Treemap can have any level of nesting.\r\n         *\r\n         * @param children  Item's children\r\n         */\r\n        set: function (children) {\r\n            this.setProperty(\"children\", children);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"level\", {\r\n        /**\r\n         * Depth level in the treemap hierarchy.\r\n         *\r\n         * The top-level item will have level set at 0. Its children will have\r\n         * level 1, and so on.\r\n         *\r\n         * @readonly\r\n         * @return Level\r\n         */\r\n        get: function () {\r\n            if (!this.parent) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return this.parent.level + 1;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"color\", {\r\n        /**\r\n         * @return Color\r\n         */\r\n        get: function () {\r\n            var color = this.properties.color;\r\n            if (color == undefined) {\r\n                if (this.parent) {\r\n                    color = this.parent.color;\r\n                }\r\n            }\r\n            if (color == undefined) {\r\n                if (this.component) {\r\n                    color = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n                }\r\n            }\r\n            return color;\r\n        },\r\n        /**\r\n         * Item's color.\r\n         *\r\n         * If not set, will use parent's color, or, if that is not set either,\r\n         * automatically assigned color from chart's color set. (`chart.colors`)\r\n         *\r\n         * @param value  Color\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"color\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"fill\", {\r\n        /**\r\n         * @ignore\r\n         * For the legend to work properly\r\n         */\r\n        get: function () {\r\n            return this.color;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"series\", {\r\n        get: function () {\r\n            return this._series;\r\n        },\r\n        /**\r\n         * Series of children data items\r\n         * @todo: proper descrition\r\n         */\r\n        set: function (series) {\r\n            if (series != this._series) {\r\n                if (this._series) {\r\n                    this.component.series.removeValue(this._series);\r\n                    this._series.dispose();\r\n                }\r\n                this._series = series;\r\n                this._disposers.push(series);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Hides the Data Item and related visual elements.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     * @param delay     Delay animation (ms)\r\n     * @param toValue   A value to set to `fields` when hiding\r\n     * @param fields    A list of data fields to set value to `toValue`\r\n     */\r\n    TreeMapDataItem.prototype.hide = function (duration, delay, toValue, fields) {\r\n        this.setWorkingValue(\"value\", 0);\r\n        if (this.children) {\r\n            this.children.each(function (child) {\r\n                child.hide(duration, delay, toValue, fields);\r\n            });\r\n        }\r\n        var seriesDataItem = this.seriesDataItem;\r\n        if (seriesDataItem) {\r\n            seriesDataItem.bullets.each(function (key, value) {\r\n                value.hide();\r\n                value.preventShow = true;\r\n            });\r\n        }\r\n        return _super.prototype.hide.call(this, duration, delay, toValue, fields);\r\n    };\r\n    /**\r\n     * Shows the Data Item and related visual elements.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     * @param delay     Delay animation (ms)\r\n     * @param fields    A list of fields to set values of\r\n     */\r\n    TreeMapDataItem.prototype.show = function (duration, delay, fields) {\r\n        this.setWorkingValue(\"value\", this.values.value.value);\r\n        if (this.children) {\r\n            this.children.each(function (child) {\r\n                child.show(duration, delay, fields);\r\n            });\r\n        }\r\n        var seriesDataItem = this.seriesDataItem;\r\n        if (seriesDataItem) {\r\n            seriesDataItem.bullets.each(function (key, value) {\r\n                value.preventShow = false;\r\n            });\r\n        }\r\n        return _super.prototype.show.call(this, duration, delay, fields);\r\n    };\r\n    return TreeMapDataItem;\r\n}(XYChartDataItem));\r\nexport { TreeMapDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nvar TreeMap = /** @class */ (function (_super) {\r\n    __extends(TreeMap, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TreeMap() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * An algorithm used to divide area into squares based on their value.\r\n         *\r\n         * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n         *\r\n         * ```TypeScript\r\n         * chart.layoutAlgorithm = chart.sliceDice;\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.layoutAlgorithm = chart.sliceDice;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"layoutAlgorithm\": \"sliceDice\",\r\n         *   // ...\r\n         * }\r\n         * ```\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n         * @default squarify\r\n         */\r\n        _this.layoutAlgorithm = _this.squarify;\r\n        /**\r\n         * Is the chart zoomable?\r\n         *\r\n         * If the chart is `zoomable`, and items have sub-items, the chart will\r\n         * drill-down to sub-items when click on their parent item.\r\n         *\r\n         * @default true\r\n         */\r\n        _this.zoomable = true;\r\n        _this.className = \"TreeMap\";\r\n        _this._usesData = true;\r\n        _this.maxLevels = 2;\r\n        _this.currentLevel = 0;\r\n        _this.hideParentColumns = false;\r\n        _this.colors = new ColorSet();\r\n        _this.sorting = \"descending\";\r\n        // create two value axes for the chart\r\n        var xAxis = _this.xAxes.push(new ValueAxis());\r\n        xAxis.title.disabled = true;\r\n        xAxis.strictMinMax = true;\r\n        var xRenderer = xAxis.renderer;\r\n        xRenderer.inside = true;\r\n        xRenderer.labels.template.disabled = true;\r\n        xRenderer.ticks.template.disabled = true;\r\n        xRenderer.grid.template.disabled = true;\r\n        xRenderer.axisFills.template.disabled = true;\r\n        xRenderer.minGridDistance = 100;\r\n        xRenderer.line.disabled = true;\r\n        xRenderer.baseGrid.disabled = true;\r\n        //xRenderer.inversed = true;\r\n        var yAxis = _this.yAxes.push(new ValueAxis());\r\n        yAxis.title.disabled = true;\r\n        yAxis.strictMinMax = true;\r\n        var yRenderer = yAxis.renderer;\r\n        yRenderer.inside = true;\r\n        yRenderer.labels.template.disabled = true;\r\n        yRenderer.ticks.template.disabled = true;\r\n        yRenderer.grid.template.disabled = true;\r\n        yRenderer.axisFills.template.disabled = true;\r\n        yRenderer.minGridDistance = 100;\r\n        yRenderer.line.disabled = true;\r\n        yRenderer.baseGrid.disabled = true;\r\n        yRenderer.inversed = true;\r\n        // shortcuts\r\n        _this.xAxis = xAxis;\r\n        _this.yAxis = yAxis;\r\n        var template = new TreeMapSeries();\r\n        _this.seriesTemplates = new DictionaryTemplate(template);\r\n        template.virtualParent = _this;\r\n        _this._disposers.push(new DictionaryDisposer(_this.seriesTemplates));\r\n        _this._disposers.push(template);\r\n        _this.zoomOutButton.events.on(\"hit\", function () {\r\n            _this.zoomToChartDataItem(_this._homeDataItem);\r\n        }, undefined, false);\r\n        _this.seriesTemplates.events.on(\"insertKey\", function (event) {\r\n            event.newValue.isTemplate = true;\r\n        }, undefined, false);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TreeMap.prototype, \"navigationBar\", {\r\n        /**\r\n         * Returns navigationBar if it is added to a chart\r\n         */\r\n        get: function () {\r\n            return this._navigationBar;\r\n        },\r\n        /**\r\n         * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n         * drill-down path.\r\n         */\r\n        set: function (navigationBar) {\r\n            var _this = this;\r\n            if (this._navigationBar != navigationBar) {\r\n                this._navigationBar = navigationBar;\r\n                navigationBar.parent = this;\r\n                navigationBar.toBack();\r\n                navigationBar.links.template.events.on(\"hit\", function (event) {\r\n                    var dataItem = event.target.dataItem.dataContext;\r\n                    if (!dataItem.isDisposed()) {\r\n                        _this.zoomToChartDataItem(dataItem);\r\n                        _this.createTreeSeries(dataItem);\r\n                    }\r\n                }, undefined, true);\r\n                this._disposers.push(navigationBar);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * (Re)validates chart's data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    TreeMap.prototype.validateData = function () {\r\n        this.series.clear();\r\n        this._tempSeries = [];\r\n        _super.prototype.validateData.call(this);\r\n        if (this._homeDataItem) {\r\n            this._homeDataItem.dispose();\r\n        }\r\n        var homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n        this._homeDataItem = homeDataItem;\r\n        $iter.each(this.dataItems.iterator(), function (dataItem) {\r\n            dataItem.parent = homeDataItem;\r\n        });\r\n        homeDataItem.children = this.dataItems;\r\n        homeDataItem.x0 = 0;\r\n        homeDataItem.y0 = 0;\r\n        homeDataItem.name = this._homeText;\r\n        var maxX = 1000;\r\n        var maxY = Math.round((maxX * this.pixelHeight / this.pixelWidth) / 10) * 10 || 1000;\r\n        homeDataItem.x1 = maxX;\r\n        homeDataItem.y1 = maxY;\r\n        this.xAxis.min = 0;\r\n        this.xAxis.max = maxX;\r\n        this.xAxis.getMinMax();\r\n        this.yAxis.min = 0;\r\n        this.yAxis.max = maxY;\r\n        this.yAxis.getMinMax();\r\n        this.layoutItems(homeDataItem);\r\n        this.createTreeSeries(homeDataItem);\r\n        this.feedLegend();\r\n    };\r\n    /**\r\n     * Layouts and sizes all items according to their value and\r\n     * `layoutAlgorithm`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Parent data item\r\n     */\r\n    TreeMap.prototype.layoutItems = function (parent, sorting) {\r\n        if (parent) {\r\n            var children = parent.children;\r\n            if (!sorting) {\r\n                sorting = this.sorting;\r\n            }\r\n            if (sorting == \"ascending\") {\r\n                children.values.sort(function (a, b) {\r\n                    return a.value - b.value;\r\n                });\r\n            }\r\n            if (sorting == \"descending\") {\r\n                children.values.sort(function (a, b) {\r\n                    return b.value - a.value;\r\n                });\r\n            }\r\n            this._updateDataItemIndexes(0);\r\n            this.layoutAlgorithm(parent);\r\n            for (var i = 0, len = children.length; i < len; i++) {\r\n                var node = children.getIndex(i);\r\n                if (node.children) {\r\n                    this.layoutItems(node);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new treemap series.\r\n     *\r\n     * @todo Description\r\n     * @param dataItem  Data item to create series out of\r\n     */\r\n    TreeMap.prototype.createTreeSeries = function (dataItem) {\r\n        var _this = this;\r\n        this._tempSeries = [];\r\n        var navigationData = [dataItem];\r\n        // create parent series and navigation data\r\n        var parentDataItem = dataItem.parent;\r\n        while (parentDataItem != undefined) {\r\n            this.initSeries(parentDataItem);\r\n            navigationData.push(parentDataItem);\r\n            parentDataItem = parentDataItem.parent;\r\n        }\r\n        navigationData.reverse();\r\n        if (this.navigationBar) {\r\n            this.navigationBar.data = navigationData;\r\n        }\r\n        // create series and children series\r\n        this.createTreeSeriesReal(dataItem);\r\n        // add those which are not in the list\r\n        $array.each(this._tempSeries, function (series) {\r\n            if (_this.series.indexOf(series) == -1) {\r\n                _this.series.push(series);\r\n            }\r\n            series.zIndex = series.level;\r\n        });\r\n    };\r\n    /**\r\n     * [createTreeSeriesReal description]\r\n     *\r\n     * @todo Description\r\n     * @param dataItem [description]\r\n     */\r\n    TreeMap.prototype.createTreeSeriesReal = function (dataItem) {\r\n        if (dataItem.children) {\r\n            var level = dataItem.level;\r\n            if (level < this.currentLevel + this.maxLevels) {\r\n                this.initSeries(dataItem);\r\n                for (var i = 0; i < dataItem.children.length; i++) {\r\n                    var child = dataItem.children.getIndex(i);\r\n                    if (child.children) {\r\n                        this.createTreeSeriesReal(child);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    TreeMap.prototype.setData = function (value) {\r\n        this.currentLevel = 0;\r\n        this.currentlyZoomed = undefined;\r\n        this.xAxis.start = 0;\r\n        this.xAxis.end = 1;\r\n        this.yAxis.start = 0;\r\n        this.yAxis.end = 1;\r\n        _super.prototype.setData.call(this, value);\r\n    };\r\n    /**\r\n     * @ignore\r\n     * Overriding, as tree map series are created on the fly all the time\r\n     */\r\n    TreeMap.prototype.seriesAppeared = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Initializes the treemap series.\r\n     *\r\n     * @todo Description\r\n     * @param dataItem  Chart data item\r\n     */\r\n    TreeMap.prototype.initSeries = function (dataItem) {\r\n        var _this = this;\r\n        if (!dataItem.series) {\r\n            var series = void 0;\r\n            var template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n            if (template) {\r\n                series = template.clone();\r\n            }\r\n            else {\r\n                series = this.series.create();\r\n            }\r\n            // for the legend to get {value}\r\n            series.dataItem.dataContext = dataItem;\r\n            series.name = dataItem.name;\r\n            series.parentDataItem = dataItem;\r\n            dataItem.series = series;\r\n            var level = dataItem.level;\r\n            series.level = level;\r\n            var dataContext = dataItem.dataContext;\r\n            if (dataContext) {\r\n                series.config = dataContext.config;\r\n            }\r\n            this.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n            series.data = dataItem.children.values;\r\n            series.fill = dataItem.color;\r\n            series.columnsContainer.hide(0);\r\n            series.bulletsContainer.hide(0);\r\n            series.columns.template.adapter.add(\"fill\", function (fill, target) {\r\n                var dataItem = target.dataItem;\r\n                if (dataItem) {\r\n                    var treeMapDataItem = dataItem.treeMapDataItem;\r\n                    if (treeMapDataItem) {\r\n                        target.fill = treeMapDataItem.color;\r\n                        target.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n                        return treeMapDataItem.color;\r\n                    }\r\n                }\r\n            });\r\n            if (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n                series.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n                if (this.zoomable) {\r\n                    series.columns.template.events.on(\"hit\", function (event) {\r\n                        var seriesDataItem = event.target.dataItem;\r\n                        if (dataItem.level > _this.currentLevel) {\r\n                            _this.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n                        }\r\n                        else {\r\n                            _this.zoomToSeriesDataItem(seriesDataItem);\r\n                        }\r\n                    }, this, undefined);\r\n                }\r\n            }\r\n        }\r\n        this._tempSeries.push(dataItem.series);\r\n    };\r\n    /**\r\n     * Toggles bullets so that labels that belong to current drill level are\r\n     * shown.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     */\r\n    TreeMap.prototype.toggleBullets = function (duration) {\r\n        var _this = this;\r\n        // hide all series which are not in tempSeries\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (_this._tempSeries.indexOf(series) == -1) {\r\n                //series.hideReal(duration);\r\n                series.columnsContainer.hide();\r\n                series.bulletsContainer.hide(duration);\r\n            }\r\n            else {\r\n                //series.showReal(duration);\r\n                series.columnsContainer.show();\r\n                series.bulletsContainer.show(duration);\r\n                series.dataItems.each(function (dataItem) {\r\n                    dataItem.bullets.each(function (key, bullet) {\r\n                        bullet.show();\r\n                    });\r\n                });\r\n                if (series.level < _this.currentLevel) {\r\n                    if (_this.hideParentColumns) {\r\n                        series.columnsContainer.hide();\r\n                    }\r\n                    series.bulletsContainer.hide(duration);\r\n                }\r\n                else if (series.level == _this.currentLevel) {\r\n                    if (_this.maxLevels > 1) {\r\n                        series.dataItems.each(function (dataItem) {\r\n                            if (dataItem.treeMapDataItem.children) {\r\n                                dataItem.bullets.each(function (key, bullet) {\r\n                                    bullet.hide();\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Zooms to particular item in series.\r\n     *\r\n     * @param dataItem  Data item\r\n     */\r\n    TreeMap.prototype.zoomToSeriesDataItem = function (dataItem) {\r\n        this.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n    };\r\n    /**\r\n     * Zooms to particular item. If dataItem is not specified, the chart will zoom-out.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    TreeMap.prototype.zoomToChartDataItem = function (dataItem) {\r\n        var _this = this;\r\n        if (!dataItem) {\r\n            dataItem = this._homeDataItem;\r\n        }\r\n        var zoomOutButton = this.zoomOutButton;\r\n        // this is needed because if there is only one fist level, it won't be shown\r\n        if (zoomOutButton) {\r\n            if (dataItem != this._homeDataItem) {\r\n                zoomOutButton.show();\r\n            }\r\n            else {\r\n                zoomOutButton.hide();\r\n            }\r\n        }\r\n        if (dataItem && dataItem.children) {\r\n            this.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n            this.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n            this.currentLevel = dataItem.level;\r\n            this.currentlyZoomed = dataItem;\r\n            this.createTreeSeries(dataItem);\r\n            var rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n            if (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\r\n                this._dataDisposers.push(rangeChangeAnimation);\r\n                rangeChangeAnimation.events.once(\"animationended\", function () {\r\n                    _this.toggleBullets();\r\n                });\r\n            }\r\n            else {\r\n                this.toggleBullets();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    TreeMap.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"TreeMap chart\");\r\n        }\r\n        //this.homeText = this.language.translate(\"Home\");\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    TreeMap.prototype.createDataItem = function () {\r\n        return new TreeMapDataItem();\r\n    };\r\n    Object.defineProperty(TreeMap.prototype, \"maxLevels\", {\r\n        /**\r\n         * @return Maximum drill-down level\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxLevels\");\r\n        },\r\n        /**\r\n         * Maximum number of levels the chart will display initially.\r\n         *\r\n         * @default 2\r\n         * @param value  Maximum drill-down level\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maxLevels\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMap.prototype, \"currentLevel\", {\r\n        /**\r\n         * @return Current level\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"currentLevel\");\r\n        },\r\n        /**\r\n         * Current drill-down level the chart is at.\r\n         *\r\n         * @param value  Current level\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"currentLevel\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMap.prototype, \"hideParentColumns\", {\r\n        /**\r\n         * @return Hide?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hideParentColumns\");\r\n        },\r\n        /**\r\n         * If set to `true`, columns of parent nodes will be hidden when user\r\n         * drills-down into deeper levels.\r\n         *\r\n         * @sice 4.7.4\r\n         * @default false\r\n         * @param  value  Hide?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"hideParentColumns\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMap.prototype, \"sorting\", {\r\n        get: function () {\r\n            return this.getPropertyValue(\"sorting\");\r\n        },\r\n        /**\r\n         * Sorting direction of treemap items.\r\n         *\r\n         * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n         *\r\n         * @default \"descending\"\r\n         * @param value [description]\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"sorting\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates and returns a new series of the suitable type.\r\n     *\r\n     * @return new series\r\n     */\r\n    TreeMap.prototype.createSeries = function () {\r\n        return new TreeMapSeries();\r\n    };\r\n    Object.defineProperty(TreeMap.prototype, \"homeText\", {\r\n        /**\r\n         * @return Home text\r\n         */\r\n        get: function () {\r\n            return this._homeText;\r\n        },\r\n        /**\r\n         * A text displayed on the \"home\" button which is used to go back to level 0\r\n         * after drill into sub-items.\r\n         *\r\n         * @param value  Home text\r\n         */\r\n        set: function (value) {\r\n            this._homeText = value;\r\n            if (this._homeDataItem) {\r\n                this._homeDataItem.name = this._homeText;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    TreeMap.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Instantiate layout algorithm\r\n            if ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n                switch (config[\"layoutAlgorithm\"]) {\r\n                    case \"squarify\":\r\n                        config[\"layoutAlgorithm\"] = this.squarify;\r\n                        break;\r\n                    case \"binaryTree\":\r\n                        config[\"layoutAlgorithm\"] = this.binaryTree;\r\n                        break;\r\n                    case \"slice\":\r\n                        config[\"layoutAlgorithm\"] = this.slice;\r\n                        break;\r\n                    case \"dice\":\r\n                        config[\"layoutAlgorithm\"] = this.dice;\r\n                        break;\r\n                    case \"sliceDice\":\r\n                        config[\"layoutAlgorithm\"] = this.sliceDice;\r\n                        break;\r\n                    default:\r\n                        delete config[\"layoutAlgorithm\"];\r\n                        break;\r\n                }\r\n            }\r\n            // Set type for navigation bar\r\n            if ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n                config.navigationBar.type = \"NavigationBar\";\r\n            }\r\n            _super.prototype.processConfig.call(this, config);\r\n        }\r\n    };\r\n    /**\r\n     * Measures the size of container and informs its children of how much size\r\n     * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n     * properties.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    TreeMap.prototype.validateLayout = function () {\r\n        _super.prototype.validateLayout.call(this);\r\n        this.layoutItems(this.currentlyZoomed);\r\n    };\r\n    /**\r\n     * Validates (processes) data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    TreeMap.prototype.validateDataItems = function () {\r\n        _super.prototype.validateDataItems.call(this);\r\n        this.layoutItems(this._homeDataItem);\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            series.validateRawData();\r\n        });\r\n        this.zoomToChartDataItem(this._homeDataItem);\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * TREEMAP LAYOUT FUNCTIONS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * The functions below are from D3.js library (https://d3js.org/)\r\n     *\r\n     * --------------------------------------------------------------------------\r\n     * Copyright 2017 Mike Bostock\r\n     *\r\n     * Redistribution and use in source and binary forms, with or without\r\n     * modification, are permitted provided that the following conditions are met:\r\n     *\r\n     * 1. Redistributions of source code must retain the above copyright notice,\r\n     *    this list of conditions and the following disclaimer.\r\n     *\r\n     * 2. Redistributions in binary form must reproduce the above copyright\r\n     *    notice,this list of conditions and the following disclaimer in the\r\n     *    documentation and/or other materials provided with the distribution.\r\n     *\r\n     * 3. Neither the name of the copyright holder nor the names of its\r\n     *    contributors may be used to endorse or promote products derived from\r\n     *    this software without specific prior written permission.\r\n     *\r\n     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n     * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n     * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n     * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n     * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n     * POSSIBILITY OF SUCH DAMAGE.\r\n     * --------------------------------------------------------------------------\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Treemap layout algorithm: binaryTree.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Data item\r\n     */\r\n    TreeMap.prototype.binaryTree = function (parent) {\r\n        var nodes = parent.children, i, n = nodes.length, sum, sums = new Array(n + 1);\r\n        for (sums[0] = sum = i = 0; i < n; ++i) {\r\n            sums[i + 1] = sum += nodes.getIndex(i).value;\r\n        }\r\n        if (n > 0) {\r\n            partition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n        }\r\n        function partition(i, j, value, x0, y0, x1, y1) {\r\n            if (i >= j - 1) {\r\n                var node = nodes.getIndex(i);\r\n                node.x0 = x0;\r\n                node.y0 = y0;\r\n                node.x1 = x1;\r\n                node.y1 = y1;\r\n                return;\r\n            }\r\n            var valueOffset = sums[i], valueTarget = (value / 2) + valueOffset, k = i + 1, hi = j - 1;\r\n            while (k < hi) {\r\n                var mid = k + hi >>> 1;\r\n                if (sums[mid] < valueTarget) {\r\n                    k = mid + 1;\r\n                }\r\n                else {\r\n                    hi = mid;\r\n                }\r\n            }\r\n            if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) {\r\n                --k;\r\n            }\r\n            var valueLeft = sums[k] - valueOffset, valueRight = value - valueLeft;\r\n            if (value == 0) {\r\n                var node = nodes.getIndex(i);\r\n                node.x0 = x0;\r\n                node.y0 = y0;\r\n                node.x1 = x1;\r\n                node.y1 = y1;\r\n                return;\r\n            }\r\n            if ((x1 - x0) > (y1 - y0)) {\r\n                var xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n                partition(i, k, valueLeft, x0, y0, xk, y1);\r\n                partition(k, j, valueRight, xk, y0, x1, y1);\r\n            }\r\n            else {\r\n                var yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n                partition(i, k, valueLeft, x0, y0, x1, yk);\r\n                partition(k, j, valueRight, x0, yk, x1, y1);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: slice.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Data item\r\n     */\r\n    TreeMap.prototype.slice = function (parent) {\r\n        var x0 = parent.x0;\r\n        var x1 = parent.x1;\r\n        var y0 = parent.y0;\r\n        var y1 = parent.y1;\r\n        var nodes = parent.children;\r\n        var node;\r\n        var i = -1;\r\n        var n = nodes.length;\r\n        var k = parent.value && (y1 - y0) / parent.value;\r\n        while (++i < n) {\r\n            node = nodes.getIndex(i);\r\n            node.x0 = x0;\r\n            node.x1 = x1;\r\n            node.y0 = y0;\r\n            y0 += node.value * k;\r\n            node.y1 = y0;\r\n        }\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: dice.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Data item\r\n     */\r\n    TreeMap.prototype.dice = function (parent) {\r\n        var x0 = parent.x0;\r\n        var x1 = parent.x1;\r\n        var y0 = parent.y0;\r\n        var y1 = parent.y1;\r\n        var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (x1 - x0) / parent.value;\r\n        while (++i < n) {\r\n            node = nodes.getIndex(i);\r\n            node.y0 = y0;\r\n            node.y1 = y1;\r\n            node.x0 = x0;\r\n            x0 += node.value * k;\r\n            node.x1 = x0;\r\n        }\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: slideDice.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Data item\r\n     */\r\n    TreeMap.prototype.sliceDice = function (parent) {\r\n        if (parent.level & 1) {\r\n            this.slice(parent);\r\n        }\r\n        else {\r\n            this.dice(parent);\r\n        }\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: squarify.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Data item\r\n     */\r\n    TreeMap.prototype.squarify = function (parent) {\r\n        var ratio = (1 + Math.sqrt(5)) / 2;\r\n        var x0 = parent.x0;\r\n        var x1 = parent.x1;\r\n        var y0 = parent.y0;\r\n        var y1 = parent.y1;\r\n        var nodes = parent.children;\r\n        var nodeValue;\r\n        var i0 = 0;\r\n        var i1 = 0;\r\n        var n = nodes.length;\r\n        var dx;\r\n        var dy;\r\n        var value = parent.value;\r\n        var sumValue;\r\n        var minValue;\r\n        var maxValue;\r\n        var newRatio;\r\n        var minRatio;\r\n        var alpha;\r\n        var beta;\r\n        while (i0 < n) {\r\n            dx = x1 - x0;\r\n            dy = y1 - y0;\r\n            // Find the next non-empty node.\r\n            do {\r\n                sumValue = nodes.getIndex(i1++).value;\r\n            } while (!sumValue && i1 < n);\r\n            minValue = maxValue = sumValue;\r\n            alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n            beta = sumValue * sumValue * alpha;\r\n            minRatio = Math.max(maxValue / beta, beta / minValue);\r\n            // Keep adding nodes while the aspect ratio maintains or improves.\r\n            for (; i1 < n; ++i1) {\r\n                sumValue += nodeValue = nodes.getIndex(i1).value;\r\n                if (nodeValue < minValue) {\r\n                    minValue = nodeValue;\r\n                }\r\n                if (nodeValue > maxValue) {\r\n                    maxValue = nodeValue;\r\n                }\r\n                beta = sumValue * sumValue * alpha;\r\n                newRatio = Math.max(maxValue / beta, beta / minValue);\r\n                if (newRatio > minRatio) {\r\n                    sumValue -= nodeValue;\r\n                    break;\r\n                }\r\n                minRatio = newRatio;\r\n            }\r\n            // Position and record the row orientation.\r\n            var row = this.dataItems.template.clone();\r\n            row.value = sumValue;\r\n            row.dice = dx < dy;\r\n            row.children = nodes.slice(i0, i1);\r\n            row.x0 = x0;\r\n            row.y0 = y0;\r\n            row.x1 = x1;\r\n            row.y1 = y1;\r\n            if (row.dice) {\r\n                row.y1 = value ? (y0 += (dy * sumValue) / value) : y1;\r\n                this.dice(row);\r\n            }\r\n            else {\r\n                row.x1 = value ? (x0 += (dx * sumValue) / value) : x1;\r\n                this.slice(row);\r\n            }\r\n            value -= sumValue;\r\n            i0 = i1;\r\n        }\r\n    };\r\n    TreeMap.prototype.handleSeriesAdded2 = function () {\r\n        // void\r\n    };\r\n    /**\r\n     * [handleDataItemValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    TreeMap.prototype.handleDataItemValueChange = function (dataItem, name) {\r\n        if (name == \"value\") {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    TreeMap.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n        if (name == \"value\") {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    TreeMap.prototype.getLegendLevel = function (dataItem) {\r\n        if (!dataItem) {\r\n            return;\r\n        }\r\n        if (!dataItem.children) {\r\n            return;\r\n        }\r\n        if (dataItem.children.length > 1) {\r\n            return dataItem;\r\n        }\r\n        else if (dataItem.children.length == 1) {\r\n            var child = dataItem.children.getIndex(0);\r\n            if (child.children) {\r\n                return this.getLegendLevel(child);\r\n            }\r\n            else {\r\n                return dataItem;\r\n            }\r\n        }\r\n        else {\r\n            return dataItem;\r\n        }\r\n    };\r\n    TreeMap.prototype.handleLegendSeriesAdded = function (series) {\r\n        // void\r\n    };\r\n    Object.defineProperty(TreeMap.prototype, \"homeDataItem\", {\r\n        /**\r\n         * A data item associated with top node.\r\n         *\r\n         * @since 4.8.2\r\n         */\r\n        get: function () {\r\n            return this._homeDataItem;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Setups the legend to use the chart's data.\r\n     * @ignore\r\n     */\r\n    TreeMap.prototype.feedLegend = function () {\r\n        var legend = this.legend;\r\n        if (legend) {\r\n            legend.dataFields.name = \"name\";\r\n            var legendParent = this.getLegendLevel(this._homeDataItem);\r\n            if (legendParent) {\r\n                var legendData_1 = [];\r\n                legendParent.children.each(function (dataItem) {\r\n                    //if (!dataItem.hiddenInLegend) {\r\n                    legendData_1.push(dataItem);\r\n                    //}\r\n                });\r\n                legend.data = legendData_1;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    TreeMap.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this._homeDataItem = undefined;\r\n        this.series.clear();\r\n        if (this.navigationBar) {\r\n            this.navigationBar.disposeData();\r\n        }\r\n        this.xAxis.disposeData();\r\n        this.yAxis.disposeData();\r\n    };\r\n    /**\r\n     * Since this chart uses hierarchical data, we need to remove childrent\r\n     * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n     *\r\n     * @return Export\r\n     */\r\n    TreeMap.prototype.getExporting = function () {\r\n        var _this = this;\r\n        var exporting = _super.prototype.getExporting.call(this);\r\n        exporting.adapter.add(\"formatDataFields\", function (info) {\r\n            if (info.format == \"csv\" || info.format == \"xlsx\") {\r\n                if ($type.hasValue(_this.dataFields.children)) {\r\n                    delete info.dataFields[_this.dataFields.children];\r\n                }\r\n            }\r\n            return info;\r\n        });\r\n        return exporting;\r\n    };\r\n    return TreeMap;\r\n}(XYChart));\r\nexport { TreeMap };\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}