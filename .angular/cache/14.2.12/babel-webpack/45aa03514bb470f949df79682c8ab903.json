{"ast":null,"code":"/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Column } from \"./Column\";\nimport { Cone } from \"../../core/elements/3d/Cone\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\n\nvar ConeColumn =\n/** @class */\nfunction (_super) {\n  __extends(ConeColumn, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ConeColumn() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ConeColumn\";\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  ConeColumn.prototype.createAssets = function () {\n    this.coneColumn = this.createChild(Cone);\n    this.coneColumn.shouldClone = false; // some dirty hack so that if user access column, it won't get error\n\n    this.column = this.coneColumn;\n  };\n  /**\r\n   * Copies all parameters from another [[ConeColumn]].\r\n   *\r\n   * @param source Source ConeColumn\r\n   */\n\n\n  ConeColumn.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (this.coneColumn) {\n      this.coneColumn.copyFrom(source.coneColumn);\n    }\n  };\n\n  return ConeColumn;\n}(Column);\n\nexport { ConeColumn };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;","map":{"version":3,"names":["__extends","Column","Cone","registry","ConeColumn","_super","_this","call","className","prototype","createAssets","coneColumn","createChild","shouldClone","column","copyFrom","source","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/elements/ConeColumn.js"],"sourcesContent":["/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar ConeColumn = /** @class */ (function (_super) {\r\n    __extends(ConeColumn, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ConeColumn() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ConeColumn\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    ConeColumn.prototype.createAssets = function () {\r\n        this.coneColumn = this.createChild(Cone);\r\n        this.coneColumn.shouldClone = false;\r\n        // some dirty hack so that if user access column, it won't get error\r\n        this.column = this.coneColumn;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[ConeColumn]].\r\n     *\r\n     * @param source Source ConeColumn\r\n     */\r\n    ConeColumn.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.coneColumn) {\r\n            this.coneColumn.copyFrom(source.coneColumn);\r\n        }\r\n    };\r\n    return ConeColumn;\r\n}(Column));\r\nexport { ConeColumn };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,IAAT,QAAqB,6BAArB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC9CL,SAAS,CAACI,UAAD,EAAaC,MAAb,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,UAAT,GAAsB;IAClB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;IACAD,KAAK,CAACE,SAAN,GAAkB,YAAlB;IACA,OAAOF,KAAP;EACH;EACD;AACJ;AACA;;;EACIF,UAAU,CAACK,SAAX,CAAqBC,YAArB,GAAoC,YAAY;IAC5C,KAAKC,UAAL,GAAkB,KAAKC,WAAL,CAAiBV,IAAjB,CAAlB;IACA,KAAKS,UAAL,CAAgBE,WAAhB,GAA8B,KAA9B,CAF4C,CAG5C;;IACA,KAAKC,MAAL,GAAc,KAAKH,UAAnB;EACH,CALD;EAMA;AACJ;AACA;AACA;AACA;;;EACIP,UAAU,CAACK,SAAX,CAAqBM,QAArB,GAAgC,UAAUC,MAAV,EAAkB;IAC9CX,MAAM,CAACI,SAAP,CAAiBM,QAAjB,CAA0BR,IAA1B,CAA+B,IAA/B,EAAqCS,MAArC;;IACA,IAAI,KAAKL,UAAT,EAAqB;MACjB,KAAKA,UAAL,CAAgBI,QAAhB,CAAyBC,MAAM,CAACL,UAAhC;IACH;EACJ,CALD;;EAMA,OAAOP,UAAP;AACH,CA/B+B,CA+B9BH,MA/B8B,CAAhC;;AAgCA,SAASG,UAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,QAAQ,CAACc,iBAAT,CAA2B,YAA3B,IAA2Cb,UAA3C"},"metadata":{},"sourceType":"module"}