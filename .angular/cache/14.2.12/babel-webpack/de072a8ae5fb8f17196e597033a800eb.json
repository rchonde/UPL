{"ast":null,"code":"/**\r\n * Polyline module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { color } from \"../utils/Color\";\nimport { registry } from \"../Registry\";\nimport * as $path from \"../rendering/Path\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a polyline.\r\n *\r\n * @see {@link IPolylineEvents} for a list of available events\r\n * @see {@link IPolylineAdapters} for a list of available Adapters\r\n */\n\nvar Polyline =\n/** @class */\nfunction (_super) {\n  __extends(Polyline, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Polyline() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * [_distance description]\r\n     *\r\n     * @todo Description\r\n     */\n\n\n    _this._distance = 0;\n    _this.className = \"Polyline\";\n    _this.element = _this.paper.add(\"path\");\n    _this.shapeRendering = \"auto\";\n    _this.fill = color();\n    _this.strokeOpacity = 1;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Creats and adds an SVG path for the arc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Polyline.prototype.makePath = function () {\n    this._distance = 0;\n    var segments = this.segments;\n\n    if (segments && segments.length > 0) {\n      var path = \"\";\n\n      for (var i = 0, len = segments.length; i < len; i++) {\n        var points = segments[i];\n\n        if (points.length > 0) {\n          path += $path.moveTo(points[0]);\n\n          for (var p = 1; p < points.length; p++) {\n            var point = points[p];\n            path += $path.lineTo(point);\n            this._distance += $math.getDistance(points[p - 1], point);\n          }\n        }\n      }\n\n      this.path = path;\n    }\n\n    this._realSegments = segments;\n  };\n\n  Object.defineProperty(Polyline.prototype, \"segments\", {\n    /**\r\n     * @return Segments\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"segments\");\n    },\n\n    /**\r\n     * A list of segment coordinates for the multi-part line.\r\n     *\r\n     * @todo Example\r\n     * @param segments  Segments\r\n     */\n    set: function (segments) {\n      this.setPropertyValue(\"segments\", segments);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Polyline.prototype, \"distance\", {\n    /**\r\n     * [distance description]\r\n     *\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._distance;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n\n  Polyline.prototype.positionToPoint = function (position) {\n    var deltaAngle = 0;\n\n    if (position < 0) {\n      position = Math.abs(position);\n      deltaAngle = 180;\n    }\n\n    var segments = this._realSegments;\n\n    if (segments) {\n      var totalDistance = this.distance;\n      var currentDistance = 0;\n      var distanceAB = void 0;\n      var positionA = 0;\n      var positionB = 0;\n      var pointA = void 0;\n      var pointB = void 0;\n\n      for (var s = 0; s < segments.length; s++) {\n        var points = segments[s];\n\n        if (points.length > 1) {\n          for (var p = 1; p < points.length; p++) {\n            pointA = points[p - 1];\n            pointB = points[p];\n            positionA = currentDistance / totalDistance;\n            distanceAB = $math.getDistance(pointA, pointB);\n            currentDistance += distanceAB;\n            positionB = currentDistance / totalDistance;\n\n            if (positionA <= position && positionB > position) {\n              s = segments.length;\n              break;\n            }\n          }\n        } else if (points.length == 1) {\n          pointA = points[0];\n          pointB = points[0];\n          positionA = 0;\n          positionB = 1;\n        }\n      }\n\n      if (pointA && pointB) {\n        var positionAB = (position - positionA) / (positionB - positionA);\n        var midPoint = $math.getMidPoint(pointA, pointB, positionAB);\n        return {\n          x: midPoint.x,\n          y: midPoint.y,\n          angle: deltaAngle + $math.getAngle(pointA, pointB)\n        };\n      }\n    }\n\n    return {\n      x: 0,\n      y: 0,\n      angle: 0\n    };\n  };\n\n  Object.defineProperty(Polyline.prototype, \"realSegments\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._realSegments;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Polyline;\n}(Sprite);\n\nexport { Polyline };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Polyline\"] = Polyline;","map":{"version":3,"names":["__extends","Sprite","color","registry","$path","$math","Polyline","_super","_this","call","_distance","className","element","paper","add","shapeRendering","fill","strokeOpacity","applyTheme","prototype","makePath","segments","length","path","i","len","points","moveTo","p","point","lineTo","getDistance","_realSegments","Object","defineProperty","get","getPropertyValue","set","setPropertyValue","enumerable","configurable","positionToPoint","position","deltaAngle","Math","abs","totalDistance","distance","currentDistance","distanceAB","positionA","positionB","pointA","pointB","s","positionAB","midPoint","getMidPoint","x","y","angle","getAngle","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/elements/Polyline.js"],"sourcesContent":["/**\r\n * Polyline module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { color } from \"../utils/Color\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a polyline.\r\n *\r\n * @see {@link IPolylineEvents} for a list of available events\r\n * @see {@link IPolylineAdapters} for a list of available Adapters\r\n */\r\nvar Polyline = /** @class */ (function (_super) {\r\n    __extends(Polyline, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Polyline() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * [_distance description]\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._distance = 0;\r\n        _this.className = \"Polyline\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.shapeRendering = \"auto\";\r\n        _this.fill = color();\r\n        _this.strokeOpacity = 1;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creats and adds an SVG path for the arc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Polyline.prototype.makePath = function () {\r\n        this._distance = 0;\r\n        var segments = this.segments;\r\n        if (segments && segments.length > 0) {\r\n            var path = \"\";\r\n            for (var i = 0, len = segments.length; i < len; i++) {\r\n                var points = segments[i];\r\n                if (points.length > 0) {\r\n                    path += $path.moveTo(points[0]);\r\n                    for (var p = 1; p < points.length; p++) {\r\n                        var point = points[p];\r\n                        path += $path.lineTo(point);\r\n                        this._distance += $math.getDistance(points[p - 1], point);\r\n                    }\r\n                }\r\n            }\r\n            this.path = path;\r\n        }\r\n        this._realSegments = segments;\r\n    };\r\n    Object.defineProperty(Polyline.prototype, \"segments\", {\r\n        /**\r\n         * @return Segments\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"segments\");\r\n        },\r\n        /**\r\n         * A list of segment coordinates for the multi-part line.\r\n         *\r\n         * @todo Example\r\n         * @param segments  Segments\r\n         */\r\n        set: function (segments) {\r\n            this.setPropertyValue(\"segments\", segments);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Polyline.prototype, \"distance\", {\r\n        /**\r\n         * [distance description]\r\n         *\r\n         * @todo Description\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._distance;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position along the line (0-1) into pixel coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @return Coordinates\r\n     */\r\n    Polyline.prototype.positionToPoint = function (position) {\r\n        var deltaAngle = 0;\r\n        if (position < 0) {\r\n            position = Math.abs(position);\r\n            deltaAngle = 180;\r\n        }\r\n        var segments = this._realSegments;\r\n        if (segments) {\r\n            var totalDistance = this.distance;\r\n            var currentDistance = 0;\r\n            var distanceAB = void 0;\r\n            var positionA = 0;\r\n            var positionB = 0;\r\n            var pointA = void 0;\r\n            var pointB = void 0;\r\n            for (var s = 0; s < segments.length; s++) {\r\n                var points = segments[s];\r\n                if (points.length > 1) {\r\n                    for (var p = 1; p < points.length; p++) {\r\n                        pointA = points[p - 1];\r\n                        pointB = points[p];\r\n                        positionA = currentDistance / totalDistance;\r\n                        distanceAB = $math.getDistance(pointA, pointB);\r\n                        currentDistance += distanceAB;\r\n                        positionB = currentDistance / totalDistance;\r\n                        if (positionA <= position && positionB > position) {\r\n                            s = segments.length;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                else if (points.length == 1) {\r\n                    pointA = points[0];\r\n                    pointB = points[0];\r\n                    positionA = 0;\r\n                    positionB = 1;\r\n                }\r\n            }\r\n            if (pointA && pointB) {\r\n                var positionAB = (position - positionA) / (positionB - positionA);\r\n                var midPoint = $math.getMidPoint(pointA, pointB, positionAB);\r\n                return { x: midPoint.x, y: midPoint.y, angle: deltaAngle + $math.getAngle(pointA, pointB) };\r\n            }\r\n        }\r\n        return { x: 0, y: 0, angle: 0 };\r\n    };\r\n    Object.defineProperty(Polyline.prototype, \"realSegments\", {\r\n        /**\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return this._realSegments;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Polyline;\r\n}(Sprite));\r\nexport { Polyline };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyline\"] = Polyline;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}