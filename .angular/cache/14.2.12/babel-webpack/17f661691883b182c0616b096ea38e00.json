{"ast":null,"code":"/**\r\n * FlowDiagramNode module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { visualProperties } from \"../../core/Sprite\";\nimport { List } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $string from \"../../core/utils/String\";\nimport * as $order from \"../../core/utils/Order\";\nimport * as $number from \"../../core/utils/Number\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport * as $object from \"../../core/utils/Object\";\nimport { LegendSettings } from \"../Legend\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar FlowDiagramNode =\n/** @class */\nfunction (_super) {\n  __extends(FlowDiagramNode, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FlowDiagramNode() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Settings for the appearance of the related legend items.\r\n     */\n\n\n    _this.legendSettings = new LegendSettings();\n    _this.className = \"FlowDiagramNode\";\n    _this.isMeasured = false; // TODO can this be removed ?\n\n    new InterfaceColorSet();\n    _this.draggable = true;\n    _this.inert = true;\n    _this.setStateOnChildren = true;\n\n    _this.events.on(\"positionchanged\", _this.invalidateLinks, _this, false);\n\n    _this.events.on(\"sizechanged\", _this.invalidateLinks, _this, false);\n\n    return _this; //this.events.on(\"hit\", this.handleHit, this, false);\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  FlowDiagramNode.prototype.handleHit = function (event) {\n    if (this.isHidden || this.isHiding) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n  /**\r\n   * Shows hidden node.\r\n   *\r\n   * @param duration  Duration of reveal animation (ms)\r\n   * @return Animation\r\n   */\n\n\n  FlowDiagramNode.prototype.show = function (duration) {\n    var animation = _super.prototype.show.call(this, duration);\n\n    this.outgoingDataItems.each(function (dataItem) {\n      if (!dataItem.toNode || dataItem.toNode && !dataItem.toNode.isHidden) {\n        dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\n        dataItem.link.show();\n      }\n    });\n    this.incomingDataItems.each(function (dataItem) {\n      if (!dataItem.fromNode || dataItem.fromNode && !dataItem.fromNode.isHidden) {\n        dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\n        dataItem.link.show();\n      }\n    });\n    return animation;\n  };\n  /**\r\n   * Hides node.\r\n   *\r\n   * @param duration  Duration of hiding animation (ms)\r\n   * @return Animation\r\n   */\n\n\n  FlowDiagramNode.prototype.hide = function (duration) {\n    var animation = _super.prototype.hide.call(this, duration);\n\n    this.outgoingDataItems.each(function (dataItem) {\n      dataItem.setWorkingValue(\"value\", 0, duration);\n      dataItem.link.hide();\n    });\n    this.incomingDataItems.each(function (dataItem) {\n      dataItem.setWorkingValue(\"value\", 0, duration);\n      dataItem.link.hide();\n    });\n    return animation;\n  };\n  /**\r\n   * Marks node as invalid, for redrawal in the next update cycle.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FlowDiagramNode.prototype.validate = function () {\n    if (!this.isDisposed()) {\n      _super.prototype.validate.call(this);\n\n      this.invalidateLinks();\n    }\n  };\n  /**\r\n   * Invalidates all links, attached to this node.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FlowDiagramNode.prototype.invalidateLinks = function () {\n    var _this = this;\n\n    this.outgoingDataItems.each(function (dataItem) {\n      var link = dataItem.link;\n\n      if (link.colorMode == \"fromNode\") {\n        link.fill = link.dataItem.fromNode.color;\n      }\n\n      if (link.colorMode == \"gradient\") {\n        link.fill = link.gradient;\n        link.stroke = link.gradient;\n        var stop_1 = link.gradient.stops.getIndex(0);\n\n        if (stop_1) {\n          stop_1.color = _this.color;\n          link.gradient.validate();\n        }\n      }\n    });\n    this.incomingDataItems.each(function (dataItem) {\n      var link = dataItem.link;\n\n      if (link.colorMode == \"toNode\") {\n        link.fill = link.dataItem.toNode.color;\n      }\n\n      if (link.colorMode == \"gradient\") {\n        link.fill = link.gradient;\n        link.stroke = link.gradient;\n        var stop_2 = link.gradient.stops.getIndex(1);\n\n        if (stop_2) {\n          stop_2.color = _this.color;\n          link.gradient.validate();\n        }\n      }\n    });\n  };\n\n  Object.defineProperty(FlowDiagramNode.prototype, \"incomingDataItems\", {\n    /**\r\n     * List of incoming items (links).\r\n     *\r\n     * @readonly\r\n     * @return Incoming items\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._incomingDataItems) {\n        var incomingDataItems = new List();\n        incomingDataItems.events.on(\"inserted\", function () {\n          if (_this.chart.sortBy == \"name\") {\n            _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) {\n              return $string.order(x.fromName, y.fromName);\n            });\n          } else if (_this.chart.sortBy == \"value\") {\n            _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) {\n              return $order.reverse($number.order(x.value, y.value));\n            });\n          } else {\n            _this._incomingSorted = _this._incomingDataItems.iterator();\n          }\n        }, undefined, false);\n        this._incomingDataItems = incomingDataItems;\n      }\n\n      return this._incomingDataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"outgoingDataItems\", {\n    /**\r\n     * List of outgoing items (links).\r\n     *\r\n     * @readonly\r\n     * @return Outgoing items\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._outgoingDataItems) {\n        var outgoingDataItems = new List();\n        outgoingDataItems.events.on(\"inserted\", function () {\n          if (_this.chart.sortBy == \"name\") {\n            _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) {\n              return $string.order(x.fromName, y.fromName);\n            });\n          } else if (_this.chart.sortBy == \"value\") {\n            _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) {\n              return $order.reverse($number.order(x.value, y.value));\n            });\n          } else {\n            _this._outgoingSorted = _this._outgoingDataItems.iterator();\n          }\n        }, undefined, false);\n        this._outgoingDataItems = outgoingDataItems;\n      }\n\n      return this._outgoingDataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"name\");\n    },\n\n    /**\r\n     * A name of the node.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"name\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"total\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"total\");\n    },\n\n    /**\r\n     * Sum of all incoming+outgoing link values\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"total\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"totalIncoming\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"totalIncoming\");\n    },\n\n    /**\r\n     * Sum of all incomming link values.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"totalIncoming\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"totalOutgoing\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"totalOutgoing\");\n    },\n\n    /**\r\n     * Sum of all outgoing link values.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"totalOutgoing\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"color\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"color\");\n    },\n\n    /**\r\n     * Node's color.\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function (value) {\n      this.setColorProperty(\"color\", value);\n\n      if (this._background) {\n        this._background.fill = value;\n      }\n\n      this.fill = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates elements in related legend container, that mimics the look of this\r\n   * Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Legend item container\r\n   */\n\n  FlowDiagramNode.prototype.createLegendMarker = function (marker) {\n    var w = marker.pixelWidth;\n    var h = marker.pixelHeight;\n    marker.removeChildren();\n    var column = marker.createChild(RoundedRectangle);\n    column.shouldClone = false;\n    $object.copyProperties(this, column, visualProperties);\n    column.stroke = this.fill;\n    column.copyFrom(this);\n    column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\n\n    column.width = w;\n    column.height = h;\n    var legendDataItem = marker.dataItem;\n    legendDataItem.color = column.fill;\n    legendDataItem.colorOrig = column.fill;\n  };\n\n  Object.defineProperty(FlowDiagramNode.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Data item\r\n     */\n    get: function () {\n      return this._legendDataItem;\n    },\n\n    /**\r\n     * Legend data item that corresponds to this series.\r\n     *\r\n     * @param value  Data item\r\n     */\n    set: function (value) {\n      this._legendDataItem = value;\n\n      this._legendDataItem.itemContainer.deepInvalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FlowDiagramNode;\n}(Container);\n\nexport { FlowDiagramNode };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;","map":{"version":3,"names":["__extends","Container","visualProperties","List","registry","InterfaceColorSet","$iter","$string","$order","$number","RoundedRectangle","$object","LegendSettings","FlowDiagramNode","_super","_this","call","legendSettings","className","isMeasured","draggable","inert","setStateOnChildren","events","on","invalidateLinks","prototype","handleHit","event","isHidden","isHiding","show","hide","duration","animation","outgoingDataItems","each","dataItem","toNode","setWorkingValue","getValue","link","incomingDataItems","fromNode","validate","isDisposed","colorMode","fill","color","gradient","stroke","stop_1","stops","getIndex","stop_2","Object","defineProperty","get","_incomingDataItems","chart","sortBy","_incomingSorted","sort","iterator","x","y","order","fromName","reverse","value","undefined","enumerable","configurable","_outgoingDataItems","_outgoingSorted","getPropertyValue","set","setPropertyValue","setColorProperty","_background","createLegendMarker","marker","w","pixelWidth","h","pixelHeight","removeChildren","column","createChild","shouldClone","copyProperties","copyFrom","padding","width","height","legendDataItem","colorOrig","_legendDataItem","itemContainer","deepInvalidate","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/elements/FlowDiagramNode.js"],"sourcesContent":["/**\r\n * FlowDiagramNode module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendSettings } from \"../Legend\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar FlowDiagramNode = /** @class */ (function (_super) {\r\n    __extends(FlowDiagramNode, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FlowDiagramNode() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Settings for the appearance of the related legend items.\r\n         */\r\n        _this.legendSettings = new LegendSettings();\r\n        _this.className = \"FlowDiagramNode\";\r\n        _this.isMeasured = false;\r\n        // TODO can this be removed ?\r\n        new InterfaceColorSet();\r\n        _this.draggable = true;\r\n        _this.inert = true;\r\n        _this.setStateOnChildren = true;\r\n        _this.events.on(\"positionchanged\", _this.invalidateLinks, _this, false);\r\n        _this.events.on(\"sizechanged\", _this.invalidateLinks, _this, false);\r\n        return _this;\r\n        //this.events.on(\"hit\", this.handleHit, this, false);\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    FlowDiagramNode.prototype.handleHit = function (event) {\r\n        if (this.isHidden || this.isHiding) {\r\n            this.show();\r\n        }\r\n        else {\r\n            this.hide();\r\n        }\r\n    };\r\n    /**\r\n     * Shows hidden node.\r\n     *\r\n     * @param duration  Duration of reveal animation (ms)\r\n     * @return Animation\r\n     */\r\n    FlowDiagramNode.prototype.show = function (duration) {\r\n        var animation = _super.prototype.show.call(this, duration);\r\n        this.outgoingDataItems.each(function (dataItem) {\r\n            if (!dataItem.toNode || (dataItem.toNode && !dataItem.toNode.isHidden)) {\r\n                dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n                dataItem.link.show();\r\n            }\r\n        });\r\n        this.incomingDataItems.each(function (dataItem) {\r\n            if (!dataItem.fromNode || (dataItem.fromNode && !dataItem.fromNode.isHidden)) {\r\n                dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n                dataItem.link.show();\r\n            }\r\n        });\r\n        return animation;\r\n    };\r\n    /**\r\n     * Hides node.\r\n     *\r\n     * @param duration  Duration of hiding animation (ms)\r\n     * @return Animation\r\n     */\r\n    FlowDiagramNode.prototype.hide = function (duration) {\r\n        var animation = _super.prototype.hide.call(this, duration);\r\n        this.outgoingDataItems.each(function (dataItem) {\r\n            dataItem.setWorkingValue(\"value\", 0, duration);\r\n            dataItem.link.hide();\r\n        });\r\n        this.incomingDataItems.each(function (dataItem) {\r\n            dataItem.setWorkingValue(\"value\", 0, duration);\r\n            dataItem.link.hide();\r\n        });\r\n        return animation;\r\n    };\r\n    /**\r\n     * Marks node as invalid, for redrawal in the next update cycle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagramNode.prototype.validate = function () {\r\n        if (!this.isDisposed()) {\r\n            _super.prototype.validate.call(this);\r\n            this.invalidateLinks();\r\n        }\r\n    };\r\n    /**\r\n     * Invalidates all links, attached to this node.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagramNode.prototype.invalidateLinks = function () {\r\n        var _this = this;\r\n        this.outgoingDataItems.each(function (dataItem) {\r\n            var link = dataItem.link;\r\n            if (link.colorMode == \"fromNode\") {\r\n                link.fill = link.dataItem.fromNode.color;\r\n            }\r\n            if (link.colorMode == \"gradient\") {\r\n                link.fill = link.gradient;\r\n                link.stroke = link.gradient;\r\n                var stop_1 = link.gradient.stops.getIndex(0);\r\n                if (stop_1) {\r\n                    stop_1.color = _this.color;\r\n                    link.gradient.validate();\r\n                }\r\n            }\r\n        });\r\n        this.incomingDataItems.each(function (dataItem) {\r\n            var link = dataItem.link;\r\n            if (link.colorMode == \"toNode\") {\r\n                link.fill = link.dataItem.toNode.color;\r\n            }\r\n            if (link.colorMode == \"gradient\") {\r\n                link.fill = link.gradient;\r\n                link.stroke = link.gradient;\r\n                var stop_2 = link.gradient.stops.getIndex(1);\r\n                if (stop_2) {\r\n                    stop_2.color = _this.color;\r\n                    link.gradient.validate();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"incomingDataItems\", {\r\n        /**\r\n         * List of incoming items (links).\r\n         *\r\n         * @readonly\r\n         * @return Incoming items\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._incomingDataItems) {\r\n                var incomingDataItems = new List();\r\n                incomingDataItems.events.on(\"inserted\", function () {\r\n                    if (_this.chart.sortBy == \"name\") {\r\n                        _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) { return $string.order(x.fromName, y.fromName); });\r\n                    }\r\n                    else if (_this.chart.sortBy == \"value\") {\r\n                        _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) { return $order.reverse($number.order(x.value, y.value)); });\r\n                    }\r\n                    else {\r\n                        _this._incomingSorted = _this._incomingDataItems.iterator();\r\n                    }\r\n                }, undefined, false);\r\n                this._incomingDataItems = incomingDataItems;\r\n            }\r\n            return this._incomingDataItems;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"outgoingDataItems\", {\r\n        /**\r\n         * List of outgoing items (links).\r\n         *\r\n         * @readonly\r\n         * @return Outgoing items\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._outgoingDataItems) {\r\n                var outgoingDataItems = new List();\r\n                outgoingDataItems.events.on(\"inserted\", function () {\r\n                    if (_this.chart.sortBy == \"name\") {\r\n                        _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) { return $string.order(x.fromName, y.fromName); });\r\n                    }\r\n                    else if (_this.chart.sortBy == \"value\") {\r\n                        _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) { return $order.reverse($number.order(x.value, y.value)); });\r\n                    }\r\n                    else {\r\n                        _this._outgoingSorted = _this._outgoingDataItems.iterator();\r\n                    }\r\n                }, undefined, false);\r\n                this._outgoingDataItems = outgoingDataItems;\r\n            }\r\n            return this._outgoingDataItems;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"name\", {\r\n        /**\r\n         * @return Name\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"name\");\r\n        },\r\n        /**\r\n         * A name of the node.\r\n         *\r\n         * @param value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"name\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"total\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"total\");\r\n        },\r\n        /**\r\n         * Sum of all incoming+outgoing link values\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"total\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"totalIncoming\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"totalIncoming\");\r\n        },\r\n        /**\r\n         * Sum of all incomming link values.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"totalIncoming\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"totalOutgoing\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"totalOutgoing\");\r\n        },\r\n        /**\r\n         * Sum of all outgoing link values.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"totalOutgoing\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"color\", {\r\n        /**\r\n         * @return Color\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"color\");\r\n        },\r\n        /**\r\n         * Node's color.\r\n         *\r\n         * @param value  Color\r\n         */\r\n        set: function (value) {\r\n            this.setColorProperty(\"color\", value);\r\n            if (this._background) {\r\n                this._background.fill = value;\r\n            }\r\n            this.fill = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates elements in related legend container, that mimics the look of this\r\n     * Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param marker  Legend item container\r\n     */\r\n    FlowDiagramNode.prototype.createLegendMarker = function (marker) {\r\n        var w = marker.pixelWidth;\r\n        var h = marker.pixelHeight;\r\n        marker.removeChildren();\r\n        var column = marker.createChild(RoundedRectangle);\r\n        column.shouldClone = false;\r\n        $object.copyProperties(this, column, visualProperties);\r\n        column.stroke = this.fill;\r\n        column.copyFrom(this);\r\n        column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n        column.width = w;\r\n        column.height = h;\r\n        var legendDataItem = marker.dataItem;\r\n        legendDataItem.color = column.fill;\r\n        legendDataItem.colorOrig = column.fill;\r\n    };\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"legendDataItem\", {\r\n        /**\r\n         * @return Data item\r\n         */\r\n        get: function () {\r\n            return this._legendDataItem;\r\n        },\r\n        /**\r\n         * Legend data item that corresponds to this series.\r\n         *\r\n         * @param value  Data item\r\n         */\r\n        set: function (value) {\r\n            this._legendDataItem = value;\r\n            this._legendDataItem.itemContainer.deepInvalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FlowDiagramNode;\r\n}(Container));\r\nexport { FlowDiagramNode };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,iBAAT,QAAkC,oCAAlC;AACA,OAAO,KAAKC,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,yBAAzB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,yBAAzB;AACA,SAASC,gBAAT,QAAiC,sCAAjC;AACA,OAAO,KAAKC,OAAZ,MAAyB,yBAAzB;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,eAAe;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACnDd,SAAS,CAACa,eAAD,EAAkBC,MAAlB,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,eAAT,GAA2B;IACvB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAAjC;IACA;AACR;AACA;;;IACQD,KAAK,CAACE,cAAN,GAAuB,IAAIL,cAAJ,EAAvB;IACAG,KAAK,CAACG,SAAN,GAAkB,iBAAlB;IACAH,KAAK,CAACI,UAAN,GAAmB,KAAnB,CAPuB,CAQvB;;IACA,IAAId,iBAAJ;IACAU,KAAK,CAACK,SAAN,GAAkB,IAAlB;IACAL,KAAK,CAACM,KAAN,GAAc,IAAd;IACAN,KAAK,CAACO,kBAAN,GAA2B,IAA3B;;IACAP,KAAK,CAACQ,MAAN,CAAaC,EAAb,CAAgB,iBAAhB,EAAmCT,KAAK,CAACU,eAAzC,EAA0DV,KAA1D,EAAiE,KAAjE;;IACAA,KAAK,CAACQ,MAAN,CAAaC,EAAb,CAAgB,aAAhB,EAA+BT,KAAK,CAACU,eAArC,EAAsDV,KAAtD,EAA6D,KAA7D;;IACA,OAAOA,KAAP,CAfuB,CAgBvB;EACH;EACD;AACJ;AACA;;;EACIF,eAAe,CAACa,SAAhB,CAA0BC,SAA1B,GAAsC,UAAUC,KAAV,EAAiB;IACnD,IAAI,KAAKC,QAAL,IAAiB,KAAKC,QAA1B,EAAoC;MAChC,KAAKC,IAAL;IACH,CAFD,MAGK;MACD,KAAKC,IAAL;IACH;EACJ,CAPD;EAQA;AACJ;AACA;AACA;AACA;AACA;;;EACInB,eAAe,CAACa,SAAhB,CAA0BK,IAA1B,GAAiC,UAAUE,QAAV,EAAoB;IACjD,IAAIC,SAAS,GAAGpB,MAAM,CAACY,SAAP,CAAiBK,IAAjB,CAAsBf,IAAtB,CAA2B,IAA3B,EAAiCiB,QAAjC,CAAhB;;IACA,KAAKE,iBAAL,CAAuBC,IAAvB,CAA4B,UAAUC,QAAV,EAAoB;MAC5C,IAAI,CAACA,QAAQ,CAACC,MAAV,IAAqBD,QAAQ,CAACC,MAAT,IAAmB,CAACD,QAAQ,CAACC,MAAT,CAAgBT,QAA7D,EAAwE;QACpEQ,QAAQ,CAACE,eAAT,CAAyB,OAAzB,EAAkCF,QAAQ,CAACG,QAAT,CAAkB,OAAlB,CAAlC,EAA8DP,QAA9D;QACAI,QAAQ,CAACI,IAAT,CAAcV,IAAd;MACH;IACJ,CALD;IAMA,KAAKW,iBAAL,CAAuBN,IAAvB,CAA4B,UAAUC,QAAV,EAAoB;MAC5C,IAAI,CAACA,QAAQ,CAACM,QAAV,IAAuBN,QAAQ,CAACM,QAAT,IAAqB,CAACN,QAAQ,CAACM,QAAT,CAAkBd,QAAnE,EAA8E;QAC1EQ,QAAQ,CAACE,eAAT,CAAyB,OAAzB,EAAkCF,QAAQ,CAACG,QAAT,CAAkB,OAAlB,CAAlC,EAA8DP,QAA9D;QACAI,QAAQ,CAACI,IAAT,CAAcV,IAAd;MACH;IACJ,CALD;IAMA,OAAOG,SAAP;EACH,CAfD;EAgBA;AACJ;AACA;AACA;AACA;AACA;;;EACIrB,eAAe,CAACa,SAAhB,CAA0BM,IAA1B,GAAiC,UAAUC,QAAV,EAAoB;IACjD,IAAIC,SAAS,GAAGpB,MAAM,CAACY,SAAP,CAAiBM,IAAjB,CAAsBhB,IAAtB,CAA2B,IAA3B,EAAiCiB,QAAjC,CAAhB;;IACA,KAAKE,iBAAL,CAAuBC,IAAvB,CAA4B,UAAUC,QAAV,EAAoB;MAC5CA,QAAQ,CAACE,eAAT,CAAyB,OAAzB,EAAkC,CAAlC,EAAqCN,QAArC;MACAI,QAAQ,CAACI,IAAT,CAAcT,IAAd;IACH,CAHD;IAIA,KAAKU,iBAAL,CAAuBN,IAAvB,CAA4B,UAAUC,QAAV,EAAoB;MAC5CA,QAAQ,CAACE,eAAT,CAAyB,OAAzB,EAAkC,CAAlC,EAAqCN,QAArC;MACAI,QAAQ,CAACI,IAAT,CAAcT,IAAd;IACH,CAHD;IAIA,OAAOE,SAAP;EACH,CAXD;EAYA;AACJ;AACA;AACA;AACA;;;EACIrB,eAAe,CAACa,SAAhB,CAA0BkB,QAA1B,GAAqC,YAAY;IAC7C,IAAI,CAAC,KAAKC,UAAL,EAAL,EAAwB;MACpB/B,MAAM,CAACY,SAAP,CAAiBkB,QAAjB,CAA0B5B,IAA1B,CAA+B,IAA/B;;MACA,KAAKS,eAAL;IACH;EACJ,CALD;EAMA;AACJ;AACA;AACA;AACA;;;EACIZ,eAAe,CAACa,SAAhB,CAA0BD,eAA1B,GAA4C,YAAY;IACpD,IAAIV,KAAK,GAAG,IAAZ;;IACA,KAAKoB,iBAAL,CAAuBC,IAAvB,CAA4B,UAAUC,QAAV,EAAoB;MAC5C,IAAII,IAAI,GAAGJ,QAAQ,CAACI,IAApB;;MACA,IAAIA,IAAI,CAACK,SAAL,IAAkB,UAAtB,EAAkC;QAC9BL,IAAI,CAACM,IAAL,GAAYN,IAAI,CAACJ,QAAL,CAAcM,QAAd,CAAuBK,KAAnC;MACH;;MACD,IAAIP,IAAI,CAACK,SAAL,IAAkB,UAAtB,EAAkC;QAC9BL,IAAI,CAACM,IAAL,GAAYN,IAAI,CAACQ,QAAjB;QACAR,IAAI,CAACS,MAAL,GAAcT,IAAI,CAACQ,QAAnB;QACA,IAAIE,MAAM,GAAGV,IAAI,CAACQ,QAAL,CAAcG,KAAd,CAAoBC,QAApB,CAA6B,CAA7B,CAAb;;QACA,IAAIF,MAAJ,EAAY;UACRA,MAAM,CAACH,KAAP,GAAejC,KAAK,CAACiC,KAArB;UACAP,IAAI,CAACQ,QAAL,CAAcL,QAAd;QACH;MACJ;IACJ,CAdD;IAeA,KAAKF,iBAAL,CAAuBN,IAAvB,CAA4B,UAAUC,QAAV,EAAoB;MAC5C,IAAII,IAAI,GAAGJ,QAAQ,CAACI,IAApB;;MACA,IAAIA,IAAI,CAACK,SAAL,IAAkB,QAAtB,EAAgC;QAC5BL,IAAI,CAACM,IAAL,GAAYN,IAAI,CAACJ,QAAL,CAAcC,MAAd,CAAqBU,KAAjC;MACH;;MACD,IAAIP,IAAI,CAACK,SAAL,IAAkB,UAAtB,EAAkC;QAC9BL,IAAI,CAACM,IAAL,GAAYN,IAAI,CAACQ,QAAjB;QACAR,IAAI,CAACS,MAAL,GAAcT,IAAI,CAACQ,QAAnB;QACA,IAAIK,MAAM,GAAGb,IAAI,CAACQ,QAAL,CAAcG,KAAd,CAAoBC,QAApB,CAA6B,CAA7B,CAAb;;QACA,IAAIC,MAAJ,EAAY;UACRA,MAAM,CAACN,KAAP,GAAejC,KAAK,CAACiC,KAArB;UACAP,IAAI,CAACQ,QAAL,CAAcL,QAAd;QACH;MACJ;IACJ,CAdD;EAeH,CAhCD;;EAiCAW,MAAM,CAACC,cAAP,CAAsB3C,eAAe,CAACa,SAAtC,EAAiD,mBAAjD,EAAsE;IAClE;AACR;AACA;AACA;AACA;AACA;IACQ+B,GAAG,EAAE,YAAY;MACb,IAAI1C,KAAK,GAAG,IAAZ;;MACA,IAAI,CAAC,KAAK2C,kBAAV,EAA8B;QAC1B,IAAIhB,iBAAiB,GAAG,IAAIvC,IAAJ,EAAxB;QACAuC,iBAAiB,CAACnB,MAAlB,CAAyBC,EAAzB,CAA4B,UAA5B,EAAwC,YAAY;UAChD,IAAIT,KAAK,CAAC4C,KAAN,CAAYC,MAAZ,IAAsB,MAA1B,EAAkC;YAC9B7C,KAAK,CAAC8C,eAAN,GAAwBvD,KAAK,CAACwD,IAAN,CAAW/C,KAAK,CAAC2C,kBAAN,CAAyBK,QAAzB,EAAX,EAAgD,UAAUC,CAAV,EAAaC,CAAb,EAAgB;cAAE,OAAO1D,OAAO,CAAC2D,KAAR,CAAcF,CAAC,CAACG,QAAhB,EAA0BF,CAAC,CAACE,QAA5B,CAAP;YAA+C,CAAjH,CAAxB;UACH,CAFD,MAGK,IAAIpD,KAAK,CAAC4C,KAAN,CAAYC,MAAZ,IAAsB,OAA1B,EAAmC;YACpC7C,KAAK,CAAC8C,eAAN,GAAwBvD,KAAK,CAACwD,IAAN,CAAW/C,KAAK,CAAC2C,kBAAN,CAAyBK,QAAzB,EAAX,EAAgD,UAAUC,CAAV,EAAaC,CAAb,EAAgB;cAAE,OAAOzD,MAAM,CAAC4D,OAAP,CAAe3D,OAAO,CAACyD,KAAR,CAAcF,CAAC,CAACK,KAAhB,EAAuBJ,CAAC,CAACI,KAAzB,CAAf,CAAP;YAAyD,CAA3H,CAAxB;UACH,CAFI,MAGA;YACDtD,KAAK,CAAC8C,eAAN,GAAwB9C,KAAK,CAAC2C,kBAAN,CAAyBK,QAAzB,EAAxB;UACH;QACJ,CAVD,EAUGO,SAVH,EAUc,KAVd;QAWA,KAAKZ,kBAAL,GAA0BhB,iBAA1B;MACH;;MACD,OAAO,KAAKgB,kBAAZ;IACH,CAzBiE;IA0BlEa,UAAU,EAAE,IA1BsD;IA2BlEC,YAAY,EAAE;EA3BoD,CAAtE;EA6BAjB,MAAM,CAACC,cAAP,CAAsB3C,eAAe,CAACa,SAAtC,EAAiD,mBAAjD,EAAsE;IAClE;AACR;AACA;AACA;AACA;AACA;IACQ+B,GAAG,EAAE,YAAY;MACb,IAAI1C,KAAK,GAAG,IAAZ;;MACA,IAAI,CAAC,KAAK0D,kBAAV,EAA8B;QAC1B,IAAItC,iBAAiB,GAAG,IAAIhC,IAAJ,EAAxB;QACAgC,iBAAiB,CAACZ,MAAlB,CAAyBC,EAAzB,CAA4B,UAA5B,EAAwC,YAAY;UAChD,IAAIT,KAAK,CAAC4C,KAAN,CAAYC,MAAZ,IAAsB,MAA1B,EAAkC;YAC9B7C,KAAK,CAAC2D,eAAN,GAAwBpE,KAAK,CAACwD,IAAN,CAAW/C,KAAK,CAAC0D,kBAAN,CAAyBV,QAAzB,EAAX,EAAgD,UAAUC,CAAV,EAAaC,CAAb,EAAgB;cAAE,OAAO1D,OAAO,CAAC2D,KAAR,CAAcF,CAAC,CAACG,QAAhB,EAA0BF,CAAC,CAACE,QAA5B,CAAP;YAA+C,CAAjH,CAAxB;UACH,CAFD,MAGK,IAAIpD,KAAK,CAAC4C,KAAN,CAAYC,MAAZ,IAAsB,OAA1B,EAAmC;YACpC7C,KAAK,CAAC2D,eAAN,GAAwBpE,KAAK,CAACwD,IAAN,CAAW/C,KAAK,CAAC0D,kBAAN,CAAyBV,QAAzB,EAAX,EAAgD,UAAUC,CAAV,EAAaC,CAAb,EAAgB;cAAE,OAAOzD,MAAM,CAAC4D,OAAP,CAAe3D,OAAO,CAACyD,KAAR,CAAcF,CAAC,CAACK,KAAhB,EAAuBJ,CAAC,CAACI,KAAzB,CAAf,CAAP;YAAyD,CAA3H,CAAxB;UACH,CAFI,MAGA;YACDtD,KAAK,CAAC2D,eAAN,GAAwB3D,KAAK,CAAC0D,kBAAN,CAAyBV,QAAzB,EAAxB;UACH;QACJ,CAVD,EAUGO,SAVH,EAUc,KAVd;QAWA,KAAKG,kBAAL,GAA0BtC,iBAA1B;MACH;;MACD,OAAO,KAAKsC,kBAAZ;IACH,CAzBiE;IA0BlEF,UAAU,EAAE,IA1BsD;IA2BlEC,YAAY,EAAE;EA3BoD,CAAtE;EA6BAjB,MAAM,CAACC,cAAP,CAAsB3C,eAAe,CAACa,SAAtC,EAAiD,MAAjD,EAAyD;IACrD;AACR;AACA;IACQ+B,GAAG,EAAE,YAAY;MACb,OAAO,KAAKkB,gBAAL,CAAsB,MAAtB,CAAP;IACH,CANoD;;IAOrD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUP,KAAV,EAAiB;MAClB,KAAKQ,gBAAL,CAAsB,MAAtB,EAA8BR,KAA9B,EAAqC,IAArC;IACH,CAdoD;IAerDE,UAAU,EAAE,IAfyC;IAgBrDC,YAAY,EAAE;EAhBuC,CAAzD;EAkBAjB,MAAM,CAACC,cAAP,CAAsB3C,eAAe,CAACa,SAAtC,EAAiD,OAAjD,EAA0D;IACtD;AACR;AACA;IACQ+B,GAAG,EAAE,YAAY;MACb,OAAO,KAAKkB,gBAAL,CAAsB,OAAtB,CAAP;IACH,CANqD;;IAOtD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUP,KAAV,EAAiB;MAClB,KAAKQ,gBAAL,CAAsB,OAAtB,EAA+BR,KAA/B,EAAsC,IAAtC;IACH,CAdqD;IAetDE,UAAU,EAAE,IAf0C;IAgBtDC,YAAY,EAAE;EAhBwC,CAA1D;EAkBAjB,MAAM,CAACC,cAAP,CAAsB3C,eAAe,CAACa,SAAtC,EAAiD,eAAjD,EAAkE;IAC9D;AACR;AACA;IACQ+B,GAAG,EAAE,YAAY;MACb,OAAO,KAAKkB,gBAAL,CAAsB,eAAtB,CAAP;IACH,CAN6D;;IAO9D;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUP,KAAV,EAAiB;MAClB,KAAKQ,gBAAL,CAAsB,eAAtB,EAAuCR,KAAvC,EAA8C,IAA9C;IACH,CAd6D;IAe9DE,UAAU,EAAE,IAfkD;IAgB9DC,YAAY,EAAE;EAhBgD,CAAlE;EAkBAjB,MAAM,CAACC,cAAP,CAAsB3C,eAAe,CAACa,SAAtC,EAAiD,eAAjD,EAAkE;IAC9D;AACR;AACA;IACQ+B,GAAG,EAAE,YAAY;MACb,OAAO,KAAKkB,gBAAL,CAAsB,eAAtB,CAAP;IACH,CAN6D;;IAO9D;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUP,KAAV,EAAiB;MAClB,KAAKQ,gBAAL,CAAsB,eAAtB,EAAuCR,KAAvC,EAA8C,IAA9C;IACH,CAd6D;IAe9DE,UAAU,EAAE,IAfkD;IAgB9DC,YAAY,EAAE;EAhBgD,CAAlE;EAkBAjB,MAAM,CAACC,cAAP,CAAsB3C,eAAe,CAACa,SAAtC,EAAiD,OAAjD,EAA0D;IACtD;AACR;AACA;IACQ+B,GAAG,EAAE,YAAY;MACb,OAAO,KAAKkB,gBAAL,CAAsB,OAAtB,CAAP;IACH,CANqD;;IAOtD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUP,KAAV,EAAiB;MAClB,KAAKS,gBAAL,CAAsB,OAAtB,EAA+BT,KAA/B;;MACA,IAAI,KAAKU,WAAT,EAAsB;QAClB,KAAKA,WAAL,CAAiBhC,IAAjB,GAAwBsB,KAAxB;MACH;;MACD,KAAKtB,IAAL,GAAYsB,KAAZ;IACH,CAlBqD;IAmBtDE,UAAU,EAAE,IAnB0C;IAoBtDC,YAAY,EAAE;EApBwC,CAA1D;EAsBA;AACJ;AACA;AACA;AACA;AACA;AACA;;EACI3D,eAAe,CAACa,SAAhB,CAA0BsD,kBAA1B,GAA+C,UAAUC,MAAV,EAAkB;IAC7D,IAAIC,CAAC,GAAGD,MAAM,CAACE,UAAf;IACA,IAAIC,CAAC,GAAGH,MAAM,CAACI,WAAf;IACAJ,MAAM,CAACK,cAAP;IACA,IAAIC,MAAM,GAAGN,MAAM,CAACO,WAAP,CAAmB9E,gBAAnB,CAAb;IACA6E,MAAM,CAACE,WAAP,GAAqB,KAArB;IACA9E,OAAO,CAAC+E,cAAR,CAAuB,IAAvB,EAA6BH,MAA7B,EAAqCrF,gBAArC;IACAqF,MAAM,CAACrC,MAAP,GAAgB,KAAKH,IAArB;IACAwC,MAAM,CAACI,QAAP,CAAgB,IAAhB;IACAJ,MAAM,CAACK,OAAP,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAT6D,CASjC;;IAC5BL,MAAM,CAACM,KAAP,GAAeX,CAAf;IACAK,MAAM,CAACO,MAAP,GAAgBV,CAAhB;IACA,IAAIW,cAAc,GAAGd,MAAM,CAAC5C,QAA5B;IACA0D,cAAc,CAAC/C,KAAf,GAAuBuC,MAAM,CAACxC,IAA9B;IACAgD,cAAc,CAACC,SAAf,GAA2BT,MAAM,CAACxC,IAAlC;EACH,CAfD;;EAgBAQ,MAAM,CAACC,cAAP,CAAsB3C,eAAe,CAACa,SAAtC,EAAiD,gBAAjD,EAAmE;IAC/D;AACR;AACA;IACQ+B,GAAG,EAAE,YAAY;MACb,OAAO,KAAKwC,eAAZ;IACH,CAN8D;;IAO/D;AACR;AACA;AACA;AACA;IACQrB,GAAG,EAAE,UAAUP,KAAV,EAAiB;MAClB,KAAK4B,eAAL,GAAuB5B,KAAvB;;MACA,KAAK4B,eAAL,CAAqBC,aAArB,CAAmCC,cAAnC;IACH,CAf8D;IAgB/D5B,UAAU,EAAE,IAhBmD;IAiB/DC,YAAY,EAAE;EAjBiD,CAAnE;EAmBA,OAAO3D,eAAP;AACH,CA9ToC,CA8TnCZ,SA9TmC,CAArC;;AA+TA,SAASY,eAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACAT,QAAQ,CAACgG,iBAAT,CAA2B,iBAA3B,IAAgDvF,eAAhD"},"metadata":{},"sourceType":"module"}