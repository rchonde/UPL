{"ast":null,"code":"/**\r\n * TreeMap series module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\nimport { visualProperties } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $type from \"../../core/utils/Type\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport * as $object from \"../../core/utils/Object\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar TreeMapSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(TreeMapSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function TreeMapSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"TreeMapSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(TreeMapSeriesDataItem.prototype, \"parentName\", {\n    /**\r\n     * Data for the this particular item.\r\n     *\r\n     * @param value  Item's data\r\n     */\n    //public set dataContext(value: Object) {\n    //\tthis._dataContext = value;\n    //}\n\n    /**\r\n     * @return Item's data\r\n     */\n\n    /*\r\n    public get dataContext(): Object {\r\n       // It's because data of tree series is TreeMapDataItems.\r\n       if (this._dataContext) {\r\n           return (<any>this._dataContext).dataContext;\r\n       }\r\n    }*/\n\n    /**\r\n     * The name of the item's parent item.\r\n     *\r\n     * @return Parent name\r\n     */\n    get: function () {\n      var treeMapDataItem = this.treeMapDataItem;\n\n      if (treeMapDataItem && treeMapDataItem.parent) {\n        return treeMapDataItem.parent.name;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapSeriesDataItem.prototype, \"value\", {\n    /**\r\n     * Item's numeric value.\r\n     *\r\n     * @readonly\r\n     * @return Value\r\n     */\n    get: function () {\n      var treeMapDataItem = this.treeMapDataItem;\n\n      if (treeMapDataItem) {\n        return treeMapDataItem.value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapSeriesDataItem.prototype, \"treeMapDataItem\", {\n    /**\r\n     * A corresponding data item from the tree map.\r\n     *\r\n     * @readonly\r\n     * @return Data item\r\n     */\n    get: function () {\n      return this._dataContext;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Hides the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param toValue   A value to set to `fields` when hiding\r\n   * @param fields    A list of data fields to set value to `toValue`\r\n   */\n\n  TreeMapSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    var treeMapDataItem = this.treeMapDataItem;\n\n    if (treeMapDataItem) {\n      treeMapDataItem.hide(duration);\n    }\n\n    return _super.prototype.hide.call(this, duration, delay, toValue, fields);\n  };\n  /**\r\n   * Shows the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param fields    A list of fields to set values of\r\n   */\n\n\n  TreeMapSeriesDataItem.prototype.show = function (duration, delay, fields) {\n    var treeMapDataItem = this.treeMapDataItem;\n\n    if (treeMapDataItem) {\n      treeMapDataItem.show(duration, delay, fields);\n    }\n\n    return _super.prototype.show.call(this, duration, delay, fields);\n  };\n\n  return TreeMapSeriesDataItem;\n}(ColumnSeriesDataItem);\n\nexport { TreeMapSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar TreeMapSeries =\n/** @class */\nfunction (_super) {\n  __extends(TreeMapSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function TreeMapSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"TreeMapSeries\";\n\n    _this.applyTheme();\n\n    _this.fillOpacity = 1;\n    _this.strokeOpacity = 1;\n    _this.minBulletDistance = 0;\n    _this.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\n\n    _this.columns.template.configField = \"config\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.stroke = interfaceColors.getFor(\"background\");\n    _this.dataFields.openValueX = \"x0\";\n    _this.dataFields.valueX = \"x1\";\n    _this.dataFields.openValueY = \"y0\";\n    _this.dataFields.valueY = \"y1\";\n    _this.sequencedInterpolation = false;\n    _this.showOnInit = false; // otherwise nodes don't stack nicely to each other\n\n    _this.columns.template.pixelPerfect = false;\n    return _this;\n  }\n  /**\r\n   * Processes data item.\r\n   *\r\n   * @param dataItem     Data item\r\n   * @param dataContext  Raw data\r\n   * @param index        Index of the data item\r\n   */\n\n\n  TreeMapSeries.prototype.processDataItem = function (dataItem, dataContext) {\n    dataContext.seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\n\n    _super.prototype.processDataItem.call(this, dataItem, dataContext);\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  TreeMapSeries.prototype.createDataItem = function () {\n    return new TreeMapSeriesDataItem();\n  };\n  /**\r\n   * Shows series.\r\n   *\r\n   * @param duration  Duration of fade in (ms)\r\n   * @return Animation\r\n   */\n\n\n  TreeMapSeries.prototype.show = function (duration) {\n    if (this.preventShow) {\n      return;\n    }\n\n    var interpolationDuration = this.defaultState.transitionDuration;\n\n    if ($type.isNumber(duration)) {\n      interpolationDuration = duration;\n    }\n\n    this.dataItems.each(function (dataItem) {\n      //dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\n      dataItem.show(duration);\n    });\n    return _super.prototype.showReal.call(this, interpolationDuration);\n  };\n  /**\r\n   * Hides series.\r\n   *\r\n   * @param duration  Duration of fade out (ms)\r\n   * @return Animation\r\n   */\n\n\n  TreeMapSeries.prototype.hide = function (duration) {\n    var interpolationDuration = this.defaultState.transitionDuration;\n\n    if ($type.isNumber(duration)) {\n      interpolationDuration = duration;\n    }\n\n    var animation = _super.prototype.hideReal.call(this, interpolationDuration);\n\n    this.dataItems.each(function (dataItem) {\n      //dataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\n      dataItem.hide(duration);\n    });\n    return animation;\n  };\n  /**\r\n   * Process values.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  TreeMapSeries.prototype.processValues = function () {// Just overriding so that inherited method does not kick in.\n  };\n  /**\r\n   * Returns relative start location for the data item.\r\n   *\r\n   * @param dataItem  Data item\r\n   * @return Location (0-1)\r\n   */\n\n\n  TreeMapSeries.prototype.getStartLocation = function (dataItem) {\n    return 0;\n  };\n  /**\r\n   * Returns relative end location for the data item.\r\n   *\r\n   * @param dataItem  Data item\r\n   * @return Location (0-1)\r\n   */\n\n\n  TreeMapSeries.prototype.getEndLocation = function (dataItem) {\n    return 1;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  TreeMapSeries.prototype.dataChangeUpdate = function () {};\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  TreeMapSeries.prototype.processConfig = function (config) {\n    if (config) {\n      // Add empty data fields if the they are not set, so that XYSeries\n      // dataField check does not result in error.\n      if (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\n        config.dataFields = {};\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n  /**\r\n   * Creates elements in related legend container, that mimics the look of this\r\n   * Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Legend item container\r\n   */\n\n\n  TreeMapSeries.prototype.createLegendMarker = function (marker) {\n    var w = marker.pixelWidth;\n    var h = marker.pixelHeight;\n    marker.removeChildren();\n    var column = marker.createChild(RoundedRectangle);\n    column.shouldClone = false;\n    $object.copyProperties(this, column, visualProperties); //column.copyFrom(<any>this.columns.template);\n\n    column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\n\n    column.width = w;\n    column.height = h;\n    var legendDataItem = marker.dataItem;\n    legendDataItem.color = column.fill;\n    legendDataItem.colorOrig = column.fill;\n  };\n\n  TreeMapSeries.prototype.disableUnusedColumns = function (dataItem) {\n    _super.prototype.disableUnusedColumns.call(this, dataItem);\n\n    if (dataItem.column) {\n      dataItem.column.__disabled = false;\n    }\n  };\n\n  return TreeMapSeries;\n}(ColumnSeries);\n\nexport { TreeMapSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;","map":{"version":3,"names":["__extends","ColumnSeries","ColumnSeriesDataItem","visualProperties","registry","InterfaceColorSet","$type","RoundedRectangle","$object","TreeMapSeriesDataItem","_super","_this","call","className","applyTheme","Object","defineProperty","prototype","get","treeMapDataItem","parent","name","enumerable","configurable","value","_dataContext","hide","duration","delay","toValue","fields","show","TreeMapSeries","fillOpacity","strokeOpacity","minBulletDistance","columns","template","tooltipText","configField","interfaceColors","stroke","getFor","dataFields","openValueX","valueX","openValueY","valueY","sequencedInterpolation","showOnInit","pixelPerfect","processDataItem","dataItem","dataContext","seriesDataItem","createDataItem","preventShow","interpolationDuration","defaultState","transitionDuration","isNumber","dataItems","each","showReal","animation","hideReal","processValues","getStartLocation","getEndLocation","dataChangeUpdate","processConfig","config","hasValue","isObject","createLegendMarker","marker","w","pixelWidth","h","pixelHeight","removeChildren","column","createChild","shouldClone","copyProperties","padding","width","height","legendDataItem","color","fill","colorOrig","disableUnusedColumns","__disabled","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/series/TreeMapSeries.js"],"sourcesContent":["/**\r\n * TreeMap series module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar TreeMapSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(TreeMapSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TreeMapSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"TreeMapSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TreeMapSeriesDataItem.prototype, \"parentName\", {\r\n        /**\r\n         * Data for the this particular item.\r\n         *\r\n         * @param value  Item's data\r\n         */\r\n        //public set dataContext(value: Object) {\r\n        //\tthis._dataContext = value;\r\n        //}\r\n        /**\r\n         * @return Item's data\r\n         */\r\n        /*\r\n       public get dataContext(): Object {\r\n           // It's because data of tree series is TreeMapDataItems.\r\n           if (this._dataContext) {\r\n               return (<any>this._dataContext).dataContext;\r\n           }\r\n       }*/\r\n        /**\r\n         * The name of the item's parent item.\r\n         *\r\n         * @return Parent name\r\n         */\r\n        get: function () {\r\n            var treeMapDataItem = this.treeMapDataItem;\r\n            if (treeMapDataItem && treeMapDataItem.parent) {\r\n                return treeMapDataItem.parent.name;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapSeriesDataItem.prototype, \"value\", {\r\n        /**\r\n         * Item's numeric value.\r\n         *\r\n         * @readonly\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            var treeMapDataItem = this.treeMapDataItem;\r\n            if (treeMapDataItem) {\r\n                return treeMapDataItem.value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapSeriesDataItem.prototype, \"treeMapDataItem\", {\r\n        /**\r\n         * A corresponding data item from the tree map.\r\n         *\r\n         * @readonly\r\n         * @return Data item\r\n         */\r\n        get: function () {\r\n            return this._dataContext;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Hides the Data Item and related visual elements.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     * @param delay     Delay animation (ms)\r\n     * @param toValue   A value to set to `fields` when hiding\r\n     * @param fields    A list of data fields to set value to `toValue`\r\n     */\r\n    TreeMapSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\r\n        var treeMapDataItem = this.treeMapDataItem;\r\n        if (treeMapDataItem) {\r\n            treeMapDataItem.hide(duration);\r\n        }\r\n        return _super.prototype.hide.call(this, duration, delay, toValue, fields);\r\n    };\r\n    /**\r\n     * Shows the Data Item and related visual elements.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     * @param delay     Delay animation (ms)\r\n     * @param fields    A list of fields to set values of\r\n     */\r\n    TreeMapSeriesDataItem.prototype.show = function (duration, delay, fields) {\r\n        var treeMapDataItem = this.treeMapDataItem;\r\n        if (treeMapDataItem) {\r\n            treeMapDataItem.show(duration, delay, fields);\r\n        }\r\n        return _super.prototype.show.call(this, duration, delay, fields);\r\n    };\r\n    return TreeMapSeriesDataItem;\r\n}(ColumnSeriesDataItem));\r\nexport { TreeMapSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar TreeMapSeries = /** @class */ (function (_super) {\r\n    __extends(TreeMapSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TreeMapSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"TreeMapSeries\";\r\n        _this.applyTheme();\r\n        _this.fillOpacity = 1;\r\n        _this.strokeOpacity = 1;\r\n        _this.minBulletDistance = 0;\r\n        _this.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n        _this.columns.template.configField = \"config\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.stroke = interfaceColors.getFor(\"background\");\r\n        _this.dataFields.openValueX = \"x0\";\r\n        _this.dataFields.valueX = \"x1\";\r\n        _this.dataFields.openValueY = \"y0\";\r\n        _this.dataFields.valueY = \"y1\";\r\n        _this.sequencedInterpolation = false;\r\n        _this.showOnInit = false;\r\n        // otherwise nodes don't stack nicely to each other\r\n        _this.columns.template.pixelPerfect = false;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Processes data item.\r\n     *\r\n     * @param dataItem     Data item\r\n     * @param dataContext  Raw data\r\n     * @param index        Index of the data item\r\n     */\r\n    TreeMapSeries.prototype.processDataItem = function (dataItem, dataContext) {\r\n        dataContext.seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n        _super.prototype.processDataItem.call(this, dataItem, dataContext);\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    TreeMapSeries.prototype.createDataItem = function () {\r\n        return new TreeMapSeriesDataItem();\r\n    };\r\n    /**\r\n     * Shows series.\r\n     *\r\n     * @param duration  Duration of fade in (ms)\r\n     * @return Animation\r\n     */\r\n    TreeMapSeries.prototype.show = function (duration) {\r\n        if (this.preventShow) {\r\n            return;\r\n        }\r\n        var interpolationDuration = this.defaultState.transitionDuration;\r\n        if ($type.isNumber(duration)) {\r\n            interpolationDuration = duration;\r\n        }\r\n        this.dataItems.each(function (dataItem) {\r\n            //dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\r\n            dataItem.show(duration);\r\n        });\r\n        return _super.prototype.showReal.call(this, interpolationDuration);\r\n    };\r\n    /**\r\n     * Hides series.\r\n     *\r\n     * @param duration  Duration of fade out (ms)\r\n     * @return Animation\r\n     */\r\n    TreeMapSeries.prototype.hide = function (duration) {\r\n        var interpolationDuration = this.defaultState.transitionDuration;\r\n        if ($type.isNumber(duration)) {\r\n            interpolationDuration = duration;\r\n        }\r\n        var animation = _super.prototype.hideReal.call(this, interpolationDuration);\r\n        this.dataItems.each(function (dataItem) {\r\n            //dataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\r\n            dataItem.hide(duration);\r\n        });\r\n        return animation;\r\n    };\r\n    /**\r\n     * Process values.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    TreeMapSeries.prototype.processValues = function () {\r\n        // Just overriding so that inherited method does not kick in.\r\n    };\r\n    /**\r\n     * Returns relative start location for the data item.\r\n     *\r\n     * @param dataItem  Data item\r\n     * @return Location (0-1)\r\n     */\r\n    TreeMapSeries.prototype.getStartLocation = function (dataItem) {\r\n        return 0;\r\n    };\r\n    /**\r\n     * Returns relative end location for the data item.\r\n     *\r\n     * @param dataItem  Data item\r\n     * @return Location (0-1)\r\n     */\r\n    TreeMapSeries.prototype.getEndLocation = function (dataItem) {\r\n        return 1;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    TreeMapSeries.prototype.dataChangeUpdate = function () {\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    TreeMapSeries.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Add empty data fields if the they are not set, so that XYSeries\r\n            // dataField check does not result in error.\r\n            if (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n                config.dataFields = {};\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    /**\r\n     * Creates elements in related legend container, that mimics the look of this\r\n     * Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param marker  Legend item container\r\n     */\r\n    TreeMapSeries.prototype.createLegendMarker = function (marker) {\r\n        var w = marker.pixelWidth;\r\n        var h = marker.pixelHeight;\r\n        marker.removeChildren();\r\n        var column = marker.createChild(RoundedRectangle);\r\n        column.shouldClone = false;\r\n        $object.copyProperties(this, column, visualProperties);\r\n        //column.copyFrom(<any>this.columns.template);\r\n        column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n        column.width = w;\r\n        column.height = h;\r\n        var legendDataItem = marker.dataItem;\r\n        legendDataItem.color = column.fill;\r\n        legendDataItem.colorOrig = column.fill;\r\n    };\r\n    TreeMapSeries.prototype.disableUnusedColumns = function (dataItem) {\r\n        _super.prototype.disableUnusedColumns.call(this, dataItem);\r\n        if (dataItem.column) {\r\n            dataItem.column.__disabled = false;\r\n        }\r\n    };\r\n    return TreeMapSeries;\r\n}(ColumnSeries));\r\nexport { TreeMapSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}