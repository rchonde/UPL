{"ast":null,"code":"/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Grid } from \"./Grid\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\n\nvar GridCircular =\n/** @class */\nfunction (_super) {\n  __extends(GridCircular, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function GridCircular() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"GridCircular\";\n    _this.pixelPerfect = false;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(GridCircular.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n\n    /**\r\n     * Inner radius of the circular grid. (absolute or relative)\r\n     *\r\n     * @param value Inner radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCircular.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius of the circular grid. (absolute or relative)\r\n     *\r\n     * @param value Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return GridCircular;\n}(Grid);\n\nexport { GridCircular };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;","map":{"version":3,"names":["__extends","Grid","registry","GridCircular","_super","_this","call","className","pixelPerfect","applyTheme","Object","defineProperty","prototype","get","getPropertyValue","set","value","setPercentProperty","enumerable","configurable","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/axes/GridCircular.js"],"sourcesContent":["/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Grid } from \"./Grid\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nvar GridCircular = /** @class */ (function (_super) {\r\n    __extends(GridCircular, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function GridCircular() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"GridCircular\";\r\n        _this.pixelPerfect = false;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(GridCircular.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the circular grid. (absolute or relative)\r\n         *\r\n         * @param value Inner radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GridCircular.prototype, \"radius\", {\r\n        /**\r\n         * @return Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the circular grid. (absolute or relative)\r\n         *\r\n         * @param value Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return GridCircular;\r\n}(Grid));\r\nexport { GridCircular };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,YAAY;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAChDJ,SAAS,CAACG,YAAD,EAAeC,MAAf,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,YAAT,GAAwB;IACpB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;IACAD,KAAK,CAACE,SAAN,GAAkB,cAAlB;IACAF,KAAK,CAACG,YAAN,GAAqB,KAArB;;IACAH,KAAK,CAACI,UAAN;;IACA,OAAOJ,KAAP;EACH;;EACDK,MAAM,CAACC,cAAP,CAAsBR,YAAY,CAACS,SAAnC,EAA8C,aAA9C,EAA6D;IACzD;AACR;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,KAAKC,gBAAL,CAAsB,aAAtB,CAAP;IACH,CANwD;;IAOzD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKC,kBAAL,CAAwB,aAAxB,EAAuCD,KAAvC,EAA8C,IAA9C,EAAoD,KAApD,EAA2D,EAA3D,EAA+D,KAA/D;IACH,CAdwD;IAezDE,UAAU,EAAE,IAf6C;IAgBzDC,YAAY,EAAE;EAhB2C,CAA7D;EAkBAT,MAAM,CAACC,cAAP,CAAsBR,YAAY,CAACS,SAAnC,EAA8C,QAA9C,EAAwD;IACpD;AACR;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,KAAKC,gBAAL,CAAsB,QAAtB,CAAP;IACH,CANmD;;IAOpD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKC,kBAAL,CAAwB,QAAxB,EAAkCD,KAAlC,EAAyC,IAAzC,EAA+C,KAA/C,EAAsD,EAAtD,EAA0D,KAA1D;IACH,CAdmD;IAepDE,UAAU,EAAE,IAfwC;IAgBpDC,YAAY,EAAE;EAhBsC,CAAxD;EAkBA,OAAOhB,YAAP;AACH,CAjDiC,CAiDhCF,IAjDgC,CAAlC;;AAkDA,SAASE,YAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,QAAQ,CAACkB,iBAAT,CAA2B,cAA3B,IAA6CjB,YAA7C"},"metadata":{},"sourceType":"module"}