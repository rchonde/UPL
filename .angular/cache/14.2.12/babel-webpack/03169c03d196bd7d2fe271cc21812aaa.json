{"ast":null,"code":"/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Returns an iterator for all entries in object.\r\n *\r\n * Can be used to safely iterate through all properties of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Iterator\r\n */\n\nexport function entries(object) {\n  return function (push) {\n    // TODO make this more efficient ?\n    for (var key in object) {\n      if (hasKey(object, key)) {\n        if (!push([key, object[key]])) {\n          break;\n        }\n      }\n    }\n  };\n}\n/**\r\n * Returns an array of object's property names.\r\n *\r\n * @param object  Source object\r\n * @returns Object property names\r\n */\n\nexport function keys(object) {\n  var output = [];\n\n  for (var key in object) {\n    if (hasKey(object, key)) {\n      output.push(key);\n    }\n  }\n\n  return output;\n}\n/**\r\n * Returns an array of object's property names ordered using specific ordering\r\n * function.\r\n *\r\n * @param object  Source object\r\n * @param order   Ordering function\r\n * @returns Object property names\r\n */\n\nexport function keysOrdered(object, order) {\n  return keys(object).sort(order);\n}\n/**\r\n * Checks if `object` has a specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Has key?\r\n */\n\nexport function hasKey(object, key) {\n  return {}.hasOwnProperty.call(object, key);\n}\n/**\r\n * Returns value of the specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Key value\r\n */\n\nexport function getKey(object, key) {\n  return object[key];\n}\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * If return value of the function evaluates to `false` further iteration is\r\n * cancelled.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\n\nexport function eachContinue(object, fn) {\n  for (var key in object) {\n    if (hasKey(object, key)) {\n      if (!fn(key, object[key])) {\n        break;\n      }\n    }\n  }\n}\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\n\nexport function each(object, fn) {\n  eachContinue(object, function (key, value) {\n    fn(key, value);\n    return true;\n  });\n}\n/**\r\n * Orders object properties using custom `ord` function and iterates through\r\n * them calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n * @param order   Ordering function\r\n */\n\nexport function eachOrdered(object, fn, ord) {\n  $array.each(keysOrdered(object, ord), function (key) {\n    fn(key, object[key]);\n  });\n}\n/**\r\n * Returns a copy of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Copy of the object\r\n */\n\nexport function copy(object) {\n  return Object.assign({}, object);\n}\n/**\r\n * Merges two objects and returns a new object that contains properties from\r\n * both source objects.\r\n *\r\n * @param object1  Source object #1\r\n * @param object2  Source object #2\r\n * @returns Combined object\r\n */\n\nexport function merge(object1, object2) {\n  return Object.assign({}, object1, object2);\n}\n/**\r\n * Returns object clone.\r\n *\r\n * @param object  Source object\r\n * @returns       Clone\r\n */\n\nexport function clone(object) {\n  return JSON.parse(JSON.stringify(object));\n}\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\n\nexport function copyProperties(source, target, keys) {\n  $array.each(keys, function (key) {\n    if ($type.hasValue(source[key])) {\n      target[key] = source[key];\n    }\n  });\n}\n/**\r\n * Copies a list of properties from one object to another only if target does't have value of the property set.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\n\nexport function softCopyProperties(source, target, keys) {\n  $array.each(keys, function (key) {\n    if ($type.hasValue(source[key]) && !$type.hasValue(target[key])) {\n      target[key] = source[key];\n    }\n  });\n}\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\n\nexport function forceCopyProperties(source, target, keys) {\n  $array.each(keys, function (key) {\n    target[key] = source[key];\n  });\n}\n/**\r\n * Copies all properties from one object to another.\r\n *\r\n * @param from  Source object\r\n * @param to    Target object\r\n */\n\nexport function copyAllProperties(from, to) {\n  copyProperties(from, to, keys(from));\n}","map":{"version":3,"names":["$array","$type","entries","object","push","key","hasKey","keys","output","keysOrdered","order","sort","hasOwnProperty","call","getKey","eachContinue","fn","each","value","eachOrdered","ord","copy","Object","assign","merge","object1","object2","clone","JSON","parse","stringify","copyProperties","source","target","hasValue","softCopyProperties","forceCopyProperties","copyAllProperties","from","to"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Returns an iterator for all entries in object.\r\n *\r\n * Can be used to safely iterate through all properties of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Iterator\r\n */\r\nexport function entries(object) {\r\n    return function (push) {\r\n        // TODO make this more efficient ?\r\n        for (var key in object) {\r\n            if (hasKey(object, key)) {\r\n                if (!push([key, object[key]])) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Returns an array of object's property names.\r\n *\r\n * @param object  Source object\r\n * @returns Object property names\r\n */\r\nexport function keys(object) {\r\n    var output = [];\r\n    for (var key in object) {\r\n        if (hasKey(object, key)) {\r\n            output.push(key);\r\n        }\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Returns an array of object's property names ordered using specific ordering\r\n * function.\r\n *\r\n * @param object  Source object\r\n * @param order   Ordering function\r\n * @returns Object property names\r\n */\r\nexport function keysOrdered(object, order) {\r\n    return keys(object).sort(order);\r\n}\r\n/**\r\n * Checks if `object` has a specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Has key?\r\n */\r\nexport function hasKey(object, key) {\r\n    return {}.hasOwnProperty.call(object, key);\r\n}\r\n/**\r\n * Returns value of the specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Key value\r\n */\r\nexport function getKey(object, key) {\r\n    return object[key];\r\n}\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * If return value of the function evaluates to `false` further iteration is\r\n * cancelled.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\r\nexport function eachContinue(object, fn) {\r\n    for (var key in object) {\r\n        if (hasKey(object, key)) {\r\n            if (!fn(key, object[key])) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\r\nexport function each(object, fn) {\r\n    eachContinue(object, function (key, value) {\r\n        fn(key, value);\r\n        return true;\r\n    });\r\n}\r\n/**\r\n * Orders object properties using custom `ord` function and iterates through\r\n * them calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n * @param order   Ordering function\r\n */\r\nexport function eachOrdered(object, fn, ord) {\r\n    $array.each(keysOrdered(object, ord), function (key) {\r\n        fn(key, object[key]);\r\n    });\r\n}\r\n/**\r\n * Returns a copy of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Copy of the object\r\n */\r\nexport function copy(object) {\r\n    return Object.assign({}, object);\r\n}\r\n/**\r\n * Merges two objects and returns a new object that contains properties from\r\n * both source objects.\r\n *\r\n * @param object1  Source object #1\r\n * @param object2  Source object #2\r\n * @returns Combined object\r\n */\r\nexport function merge(object1, object2) {\r\n    return Object.assign({}, object1, object2);\r\n}\r\n/**\r\n * Returns object clone.\r\n *\r\n * @param object  Source object\r\n * @returns       Clone\r\n */\r\nexport function clone(object) {\r\n    return JSON.parse(JSON.stringify(object));\r\n}\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function copyProperties(source, target, keys) {\r\n    $array.each(keys, function (key) {\r\n        if ($type.hasValue(source[key])) {\r\n            target[key] = source[key];\r\n        }\r\n    });\r\n}\r\n/**\r\n * Copies a list of properties from one object to another only if target does't have value of the property set.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function softCopyProperties(source, target, keys) {\r\n    $array.each(keys, function (key) {\r\n        if ($type.hasValue(source[key]) && !($type.hasValue(target[key]))) {\r\n            target[key] = source[key];\r\n        }\r\n    });\r\n}\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function forceCopyProperties(source, target, keys) {\r\n    $array.each(keys, function (key) {\r\n        target[key] = source[key];\r\n    });\r\n}\r\n/**\r\n * Copies all properties from one object to another.\r\n *\r\n * @param from  Source object\r\n * @param to    Target object\r\n */\r\nexport function copyAllProperties(from, to) {\r\n    copyProperties(from, to, keys(from));\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}