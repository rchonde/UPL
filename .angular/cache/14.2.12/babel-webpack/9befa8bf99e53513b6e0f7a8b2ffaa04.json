{"ast":null,"code":"/**\r\n * Provides functionality used to creating and showing tooltips (balloons).\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../Container\";\nimport { registry } from \"../../core/Registry\";\nimport { PointedRectangle } from \"./PointedRectangle\";\nimport { Label } from \"../elements/Label\";\nimport { Animation } from \"../utils/Animation\";\nimport { color } from \"../utils/Color\";\nimport { DropShadowFilter } from \"../rendering/filters/DropShadowFilter\";\nimport * as $math from \"../utils/Math\";\nimport * as $ease from \"../utils/Ease\";\nimport * as $utils from \"../utils/Utils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Tooltip displays text and/or multimedia information in a balloon over chart\r\n * area.\r\n * @see {@link ITooltipEvents} for a list of available events\r\n * @see {@link ITooltipAdapters} for a list of available Adapters\r\n */\n\nvar Tooltip =\n/** @class */\nfunction (_super) {\n  __extends(Tooltip, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Tooltip() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Holds numeric boundary values. Calculated from the `boundingContainer`.\r\n     * @ignore\r\n     */\n\n\n    _this._boundingRect = {\n      x: -40000,\n      y: -40000,\n      width: 80000,\n      height: 80000\n    };\n    /**\r\n     * Coordinates tooltip's pointer (stem) should point to.\r\n     */\n\n    _this._pointTo = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * If set to `true` the pointer/stem of the Tooltip will not go outside\r\n     * Tooltip's width or height depending on pointer's orientation.\r\n     *\r\n     * @default false\r\n     */\n\n    _this.fitPointerToBounds = false;\n    /**\r\n     * If `tooltipOrientation` is vertical, it can be drawn below or above point\r\n     * We need to know this when solving overlapping.\r\n     */\n\n    _this._verticalOrientation = \"up\";\n    /**\r\n     * @ignore\r\n     */\n\n    _this.fixDoc = true;\n    _this.className = \"Tooltip\";\n    _this.isMeasured = false;\n    _this.getFillFromObject = true;\n\n    _this.margin(5, 5, 5, 5);\n\n    _this.defaultState.transitionDuration = 1;\n    _this.hiddenState.transitionDuration = 1; // Create chrome/background\n\n    var background = _this.background;\n    background.interactionsEnabled = false;\n    background.fillOpacity = 0.9;\n    background.strokeWidth = 1;\n    background.strokeOpacity = 1;\n    background.stroke = color(\"#ffffff\");\n    background.cornerRadius = 3;\n    background.pointerLength = 6;\n    background.pointerBaseWidth = 10;\n    var dropShadow = new DropShadowFilter();\n    dropShadow.dy = 1;\n    dropShadow.dx = 1;\n    dropShadow.opacity = 0.5;\n    background.filters.push(dropShadow);\n    _this.autoTextColor = true; // Create text element\n\n    var label = _this.createChild(Label);\n\n    label.shouldClone = false;\n    _this.label = label;\n    label.padding(7, 12, 4, 12);\n    label.interactionsEnabled = false;\n    label.horizontalCenter = \"middle\";\n    label.fill = color(\"#ffffff\");\n\n    _this._disposers.push(label);\n\n    _this.label.events.on(\"sizechanged\", _this.drawBackground, _this);\n\n    _this.label.zIndex = 1; // @todo remove this line when bg sorting is solved\n    // Set defaults\n\n    _this.pointerOrientation = \"vertical\";\n    _this.animationDuration = 0;\n    _this.animationEasing = $ease.cubicOut;\n\n    _this.setPropertyValue(\"showInViewport\", false); // Set accessibility options\n\n\n    _this.role = \"tooltip\";\n    _this.visible = false;\n    _this.opacity = 0;\n    _this.x = 0;\n    _this.y = 0;\n\n    _this.events.on(\"visibilitychanged\", _this.handleVisibility, _this); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Tooltip.prototype.handleVisibility = function () {\n    if (this.visible) {\n      this.label.invalidate();\n    }\n  };\n\n  Object.defineProperty(Tooltip.prototype, \"getStrokeFromObject\", {\n    /**\r\n     * Specifies if tooltip background should get stroke color from the sprite it is pointing to.\r\n     *\r\n     * @return {boolean}\r\n     * @default false\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"getStrokeFromObject\");\n    },\n\n    /**\r\n     * Specifies if tooltip background should get stroke color from the sprite it is pointing to.\r\n     *\r\n     * @param value boolean\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"getStrokeFromObject\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"autoTextColor\", {\n    /**\r\n     * @return {boolean}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"autoTextColor\");\n    },\n\n    /**\r\n     * Specifies if text color should be chosen automatically for a better\r\n     * readability.\r\n     *\r\n     * IMPORTANT: this feature is generally ignored, if `getFillFromObject = false`.\r\n     *\r\n     * If inheriting of `fill` color from object tooltip is displayed for is\r\n     * disabled, this feature will not work. If you are explicitly setting a\r\n     * color for tooltip background, you may set a color for its label as well\r\n     * using `tooltip.label.fill` property.\r\n     *\r\n     *\r\n     * @param value boolean\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"autoTextColor\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"keepTargetHover\", {\n    /**\r\n     * @return Keep target hovered?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"keepTargetHover\");\n    },\n\n    /**\r\n     * If this tooltip is displayed on hover on some other object, keep that\r\n     * element hovered if hovering on the tooltip.\r\n     *\r\n     * @default false\r\n     * @since 4.1.13\r\n     * @param  value  Keep target hovered?\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (this.setPropertyValue(\"keepTargetHover\", value, true)) {\n        if (value) {\n          this.hoverable = true;\n          this.background.interactionsEnabled = true;\n\n          this._disposers.push(this.events.on(\"over\", function (ev) {\n            if (_this.targetSprite && _this.targetSprite.hoverable) {\n              _this.targetSprite.isHover = true;\n            }\n          }));\n\n          this._disposers.push(this.events.on(\"out\", function (ev) {\n            if (_this.targetSprite && _this.targetSprite.hoverable) {\n              //this.hideTooltip();\n              //this.targetSprite.handleOut();\n              _this.targetSprite.isHover = false;\n            }\n          }));\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"showInViewport\", {\n    /**\r\n     * @return Force showing tooltip?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"showInViewport\");\n    },\n\n    /**\r\n     * Normally, a tooltip will hide itself if it is pointing to a coordinate\r\n     * that is outside viewport.\r\n     *\r\n     * Setting this setting to `true` will override that and make tooltip\r\n     * appear next to the viewport edge closest to the target point.\r\n     *\r\n     * @default false\r\n     * @since 4.5.7\r\n     * @param  value  Force showing tooltip?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"showInViewport\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"getFillFromObject\", {\n    /**\r\n     * Specifies if tooltip background should get fill color from the sprite it is pointing to.\r\n     *\r\n     * @return {boolean}\r\n     * @default true\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"getFillFromObject\");\n    },\n\n    /**\r\n     * @param value boolean\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"getFillFromObject\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and returns a background element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Background\r\n   */\n\n  Tooltip.prototype.createBackground = function () {\n    return new PointedRectangle();\n  };\n\n  Object.defineProperty(Tooltip.prototype, \"pointerOrientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pointerOrientation\");\n    },\n\n    /**\r\n     * Pointer orientation: `\"horizontal\"`, `\"vertical\"`, `\"up\"`, `\"down\"`,\r\n     * `\"right\"`, or `\"left\"`.\r\n     *\r\n     * Options`\"horizontal\"` or `\"vertical\"` are location-aware, meaning they\r\n     * will change position of the Tooltip based on the target point's position\r\n     * in relation to chart center.\r\n     *\r\n     * Options `\"up\"`, `\"down\"`, `\"right\"`, `\"left\"` are static and will point\r\n     * in the specified direction regardless of the position, even if that means\r\n     * going out of chart/screen bounds.\r\n     *\r\n     * IMPORTANT: in some situations, like having multiple tooltips stacked for\r\n     * multiple series, the `\"up\"` and `\"down\"` values might be ignored in order\r\n     * to make tooltip overlap algorithm work.\r\n     *\r\n     * @default \"vertical\"\r\n     * @param  value  Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"pointerOrientation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"animationDuration\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"animationDuration\");\n    },\n\n    /**\r\n     * Duration in milliseconds for the animation to take place when the tooltip\r\n     * is moving from one place to another.\r\n     *\r\n     * @default 0\r\n     * @param value  number\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"animationDuration\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"animationEasing\", {\n    /**\r\n     * @return {Function}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"animationEasing\");\n    },\n\n    /**\r\n     * Tooltip animation (moving from one place to another) easing function.\r\n     *\r\n     * @default $ease.cubicOut\r\n     * @param value (value: number) => number\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"animationEasing\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"html\", {\n    /**\r\n     * @return HTML content\r\n     */\n    get: function () {\n      return this.label.html;\n    },\n\n    /**\r\n     * HTML content for the Tooltip.\r\n     *\r\n     * Provided value will be used as is, without applying any further\r\n     * formatting to it.\r\n     *\r\n     * @param value  HTML content\r\n     */\n    set: function (value) {\n      if (this.label.html != value) {\n        this.label.html = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"text\", {\n    /**\r\n     * @return SVG text\r\n     */\n    get: function () {\n      return this.label.text;\n    },\n\n    /**\r\n     * SVG text content for the Tooltip.\r\n     *\r\n     * Text can have a number of formatting options supported by\r\n     * [[TextFormatter]].\r\n     *\r\n     * @param value  SVG text\r\n     */\n    set: function (value) {\n      if (this.label.text != value) {\n        this.label.text = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates the Tooltip.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Tooltip.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var label = this.label;\n\n    if (label.invalid) {\n      label.validate();\n    }\n\n    var x = this._pointTo.x;\n    var y = this._pointTo.y;\n    var boundingRect = this._boundingRect;\n    var textW = label.measuredWidth;\n    var textH = label.measuredHeight;\n    var pointerLength = this.background.pointerLength;\n    var textX;\n    var textY;\n\n    if (this.ignoreBounds) {\n      boundingRect = undefined;\n    } // try to handle if text is wider than br\n\n\n    if (boundingRect && this.fixDoc && textW > boundingRect.width) {\n      // TODO maybe this isn't needed ?\n      $utils.spritePointToDocument({\n        x: boundingRect.x,\n        y: boundingRect.y\n      }, this.parent);\n      var p1 = $utils.spritePointToDocument({\n        x: boundingRect.x + boundingRect.width,\n        y: boundingRect.y + boundingRect.height\n      }, this.parent);\n      var documentWidth = document.body.offsetWidth; // TODO maybe this isn't needed ?\n\n      $utils.used(document.body.offsetHeight);\n\n      if (p1.x > documentWidth / 2) {\n        boundingRect.x = boundingRect.width - textW;\n      } else {\n        boundingRect.width = boundingRect.x + textW;\n      }\n    }\n\n    var pointerOrientation = this.pointerOrientation; // horizontal\n\n    if (pointerOrientation == \"horizontal\" || pointerOrientation == \"left\" || pointerOrientation == \"right\") {\n      textY = -textH / 2;\n\n      if (pointerOrientation == \"horizontal\") {\n        if (boundingRect && x > boundingRect.x + boundingRect.width / 2) {\n          textX = -textW / 2 - pointerLength;\n        } else {\n          textX = textW / 2 + pointerLength;\n        }\n      } else if (pointerOrientation == \"left\") {\n        textX = textW / 2 + pointerLength;\n      } else {\n        textX = -textW / 2 - pointerLength;\n      }\n    } // vertical pointer\n    else {\n      if (boundingRect) {\n        textX = $math.fitToRange(0, boundingRect.x - x + textW / 2, boundingRect.x - x + boundingRect.width - textW / 2);\n      }\n\n      if (pointerOrientation == \"vertical\") {\n        if (boundingRect && y > boundingRect.y + textH + pointerLength) {\n          textY = -textH - pointerLength;\n          this._verticalOrientation = \"up\";\n        } else {\n          textY = pointerLength;\n          this._verticalOrientation = \"down\";\n        }\n      } else if (pointerOrientation == \"down\") {\n        textY = -textH - pointerLength;\n        this._verticalOrientation = \"up\";\n      } else {\n        textY = pointerLength;\n        this._verticalOrientation = \"down\";\n      }\n    }\n\n    if (boundingRect) {\n      textY = $math.fitToRange(textY, boundingRect.y - y, boundingRect.y + boundingRect.height - textH - y);\n    }\n\n    label.x = textX;\n    label.y = textY;\n    this.drawBackground();\n  };\n  /**\r\n   * Overrides functionality from the superclass.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Tooltip.prototype.updateBackground = function () {\n    this.group.addToBack(this.background.group);\n  };\n  /**\r\n   * Draws Tooltip background (chrome, background and pointer/stem).\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Tooltip.prototype.drawBackground = function () {\n    var label = this.label;\n    var background = this.background;\n    var textWidth = label.measuredWidth;\n    var textHeight = label.measuredHeight;\n    var boundingRect = this._boundingRect;\n    var bgWidth = textWidth;\n    var bgX = label.pixelX - textWidth / 2;\n    var bgHeight = textHeight;\n    var bgY = label.pixelY;\n    var x = this._pointTo.x;\n    var y = this._pointTo.y;\n    var boundX1 = boundingRect.x - x;\n    var boundX2 = boundX1 + boundingRect.width;\n    var boundY1 = boundingRect.y - y;\n    var boundY2 = boundY1 + boundingRect.height;\n    background.x = bgX;\n    background.y = bgY;\n    background.width = bgWidth;\n    background.height = bgHeight;\n\n    if (this.fitPointerToBounds) {\n      background.pointerX = $math.fitToRange(-background.x, boundX1 - background.x, boundX2 - background.x);\n      background.pointerY = $math.fitToRange(-background.y, boundY1 - background.y, boundY2 - background.y);\n    } else {\n      background.pointerX = -background.x;\n      background.pointerY = -background.y;\n    }\n\n    background.validate();\n  };\n  /**\r\n   *\r\n   */\n\n\n  Tooltip.prototype.delayedPointTo = function (point, instantly) {\n    var _this = this;\n\n    if (this._pointToDisposer) {\n      this._pointToDisposer.dispose();\n    }\n\n    this._pointToDisposer = registry.events.once(\"exitframe\", function () {\n      _this.pointTo(point, instantly);\n    });\n    this.addDisposer(this._pointToDisposer);\n  };\n  /**\r\n   * Set nes tooltip's anchor point and moves whole tooltip.\r\n   *\r\n   * @param x  X coordinate\r\n   * @param y  Y coordinate\r\n   */\n\n\n  Tooltip.prototype.pointTo = function (point, instantly) {\n    if (this._pointTo.x != point.x || this._pointTo.y != point.y) {\n      this._pointTo = point;\n      this.invalidate(); // this helps to avoid strange animation from nowhere on initial show or when balloon was hidden already\n\n      if (!this.visible || instantly) {\n        this.moveTo(this._pointTo);\n\n        if (this._animation) {\n          this._animation.kill();\n        }\n      } else {\n        // helps to avoid flicker on top/left corner\n        if (this.pixelX == 0 && this.pixelY == 0) {\n          this.moveTo(this._pointTo);\n        } else {\n          if (this._animation) {\n            this._animation.kill();\n          }\n\n          this._animation = new Animation(this, [{\n            property: \"x\",\n            to: point.x,\n            from: this.pixelX\n          }, {\n            property: \"y\",\n            to: point.y,\n            from: this.pixelY\n          }], this.animationDuration, this.animationEasing).start();\n        }\n      }\n    }\n  };\n  /**\r\n   * Sets numeric boundaries Tooltip needs to obey (so it does not go outside\r\n   * specific area).\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param rectangle Boundary rectangle\r\n   */\n\n\n  Tooltip.prototype.setBounds = function (rectangle) {\n    var oldRect = this._boundingRect;\n\n    if (oldRect.x != rectangle.x || oldRect.y != rectangle.y || oldRect.width != rectangle.width || oldRect.height != rectangle.height) {\n      this._boundingRect = rectangle;\n      this.invalidate();\n    }\n  };\n\n  Object.defineProperty(Tooltip.prototype, \"boundingContainer\", {\n    /**\r\n     * Sets a [[Container]] instance to be used when calculating numeric\r\n     * boundaries for the Tooltip.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param container  Boundary container\r\n     */\n    set: function (container) {\n      this._boundingContainer = container; // TODO remove closures ?\n\n      container.events.on(\"sizechanged\", this.updateBounds, this);\n      container.events.on(\"positionchanged\", this.updateBounds, this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates numeric boundaries for the Tooltip, based on the\r\n   * `boundingCountrainer`.\r\n   */\n\n  Tooltip.prototype.updateBounds = function () {\n    var boundingContainer = this._boundingContainer; // to global\n\n    var rect = $utils.spriteRectToSvg({\n      x: boundingContainer.pixelX,\n      y: boundingContainer.pixelY,\n      width: boundingContainer.maxWidth,\n      height: boundingContainer.maxHeight\n    }, boundingContainer);\n    this.setBounds(rect);\n  };\n\n  Object.defineProperty(Tooltip.prototype, \"ignoreBounds\", {\n    /**\r\n     * @return Ignore chart bounds?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"ignoreBounds\");\n    },\n\n    /**\r\n     * Normally, a tooltip's position will be adjusted so it always fits into\r\n     * chart's coundaries.\r\n     *\r\n     * Setting this to `false` will disable such checks and will allow tooltip\r\n     * to \"bleed over\" the edge of the chart.\r\n     *\r\n     * @default false\r\n     * @since 4.10.8\r\n     * @param  value  Ignore chart bounds?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"ignoreBounds\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"verticalOrientation\", {\n    /**\r\n     * If tooltipOrientation is vertical, it can be drawn below or above point.\r\n     * We need to know this when solving overlapping.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return \"up\" | \"down\"\r\n     */\n    get: function () {\n      return this._verticalOrientation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"tooltip\", {\n    /**\r\n     * To avoid stackoverflow\r\n     * @ignore\r\n     */\n    get: function () {\n      return undefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties and other attributes.\r\n   *\r\n   * @param source  Source\r\n   */\n\n  Tooltip.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.label.copyFrom(source.label);\n\n    if (source._boundingRect) {\n      this._boundingRect = source._boundingRect;\n    }\n  };\n  /**\r\n   * Adds easing functions to \"function\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n\n\n  Tooltip.prototype.asFunction = function (field) {\n    return field == \"animationEasing\" || _super.prototype.asIs.call(this, field);\n  };\n\n  return Tooltip;\n}(Container);\n\nexport { Tooltip };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Tooltip\"] = Tooltip;","map":{"version":3,"names":["__extends","Container","registry","PointedRectangle","Label","Animation","color","DropShadowFilter","$math","$ease","$utils","Tooltip","_super","_this","call","_boundingRect","x","y","width","height","_pointTo","fitPointerToBounds","_verticalOrientation","fixDoc","className","isMeasured","getFillFromObject","margin","defaultState","transitionDuration","hiddenState","background","interactionsEnabled","fillOpacity","strokeWidth","strokeOpacity","stroke","cornerRadius","pointerLength","pointerBaseWidth","dropShadow","dy","dx","opacity","filters","push","autoTextColor","label","createChild","shouldClone","padding","horizontalCenter","fill","_disposers","events","on","drawBackground","zIndex","pointerOrientation","animationDuration","animationEasing","cubicOut","setPropertyValue","role","visible","handleVisibility","applyTheme","prototype","invalidate","Object","defineProperty","get","getPropertyValue","set","value","enumerable","configurable","hoverable","ev","targetSprite","isHover","createBackground","html","text","draw","invalid","validate","boundingRect","textW","measuredWidth","textH","measuredHeight","textX","textY","ignoreBounds","undefined","spritePointToDocument","parent","p1","documentWidth","document","body","offsetWidth","used","offsetHeight","fitToRange","updateBackground","group","addToBack","textWidth","textHeight","bgWidth","bgX","pixelX","bgHeight","bgY","pixelY","boundX1","boundX2","boundY1","boundY2","pointerX","pointerY","delayedPointTo","point","instantly","_pointToDisposer","dispose","once","pointTo","addDisposer","moveTo","_animation","kill","property","to","from","start","setBounds","rectangle","oldRect","container","_boundingContainer","updateBounds","boundingContainer","rect","spriteRectToSvg","maxWidth","maxHeight","copyFrom","source","asFunction","field","asIs","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/elements/Tooltip.js"],"sourcesContent":["/**\r\n * Provides functionality used to creating and showing tooltips (balloons).\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { PointedRectangle } from \"./PointedRectangle\";\r\nimport { Label } from \"../elements/Label\";\r\nimport { Animation } from \"../utils/Animation\";\r\nimport { color } from \"../utils/Color\";\r\nimport { DropShadowFilter } from \"../rendering/filters/DropShadowFilter\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $utils from \"../utils/Utils\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Tooltip displays text and/or multimedia information in a balloon over chart\r\n * area.\r\n * @see {@link ITooltipEvents} for a list of available events\r\n * @see {@link ITooltipAdapters} for a list of available Adapters\r\n */\r\nvar Tooltip = /** @class */ (function (_super) {\r\n    __extends(Tooltip, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Tooltip() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Holds numeric boundary values. Calculated from the `boundingContainer`.\r\n         * @ignore\r\n         */\r\n        _this._boundingRect = { x: -40000, y: -40000, width: 80000, height: 80000 };\r\n        /**\r\n         * Coordinates tooltip's pointer (stem) should point to.\r\n         */\r\n        _this._pointTo = { x: 0, y: 0 };\r\n        /**\r\n         * If set to `true` the pointer/stem of the Tooltip will not go outside\r\n         * Tooltip's width or height depending on pointer's orientation.\r\n         *\r\n         * @default false\r\n         */\r\n        _this.fitPointerToBounds = false;\r\n        /**\r\n         * If `tooltipOrientation` is vertical, it can be drawn below or above point\r\n         * We need to know this when solving overlapping.\r\n         */\r\n        _this._verticalOrientation = \"up\";\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.fixDoc = true;\r\n        _this.className = \"Tooltip\";\r\n        _this.isMeasured = false;\r\n        _this.getFillFromObject = true;\r\n        _this.margin(5, 5, 5, 5);\r\n        _this.defaultState.transitionDuration = 1;\r\n        _this.hiddenState.transitionDuration = 1;\r\n        // Create chrome/background\r\n        var background = _this.background;\r\n        background.interactionsEnabled = false;\r\n        background.fillOpacity = 0.9;\r\n        background.strokeWidth = 1;\r\n        background.strokeOpacity = 1;\r\n        background.stroke = color(\"#ffffff\");\r\n        background.cornerRadius = 3;\r\n        background.pointerLength = 6;\r\n        background.pointerBaseWidth = 10;\r\n        var dropShadow = new DropShadowFilter();\r\n        dropShadow.dy = 1;\r\n        dropShadow.dx = 1;\r\n        dropShadow.opacity = 0.5;\r\n        background.filters.push(dropShadow);\r\n        _this.autoTextColor = true;\r\n        // Create text element\r\n        var label = _this.createChild(Label);\r\n        label.shouldClone = false;\r\n        _this.label = label;\r\n        label.padding(7, 12, 4, 12);\r\n        label.interactionsEnabled = false;\r\n        label.horizontalCenter = \"middle\";\r\n        label.fill = color(\"#ffffff\");\r\n        _this._disposers.push(label);\r\n        _this.label.events.on(\"sizechanged\", _this.drawBackground, _this);\r\n        _this.label.zIndex = 1; // @todo remove this line when bg sorting is solved\r\n        // Set defaults\r\n        _this.pointerOrientation = \"vertical\";\r\n        _this.animationDuration = 0;\r\n        _this.animationEasing = $ease.cubicOut;\r\n        _this.setPropertyValue(\"showInViewport\", false);\r\n        // Set accessibility options\r\n        _this.role = \"tooltip\";\r\n        _this.visible = false;\r\n        _this.opacity = 0;\r\n        _this.x = 0;\r\n        _this.y = 0;\r\n        _this.events.on(\"visibilitychanged\", _this.handleVisibility, _this);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Tooltip.prototype.handleVisibility = function () {\r\n        if (this.visible) {\r\n            this.label.invalidate();\r\n        }\r\n    };\r\n    Object.defineProperty(Tooltip.prototype, \"getStrokeFromObject\", {\r\n        /**\r\n         * Specifies if tooltip background should get stroke color from the sprite it is pointing to.\r\n         *\r\n         * @return {boolean}\r\n         * @default false\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"getStrokeFromObject\");\r\n        },\r\n        /**\r\n         * Specifies if tooltip background should get stroke color from the sprite it is pointing to.\r\n         *\r\n         * @param value boolean\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"getStrokeFromObject\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"autoTextColor\", {\r\n        /**\r\n         * @return {boolean}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"autoTextColor\");\r\n        },\r\n        /**\r\n         * Specifies if text color should be chosen automatically for a better\r\n         * readability.\r\n         *\r\n         * IMPORTANT: this feature is generally ignored, if `getFillFromObject = false`.\r\n         *\r\n         * If inheriting of `fill` color from object tooltip is displayed for is\r\n         * disabled, this feature will not work. If you are explicitly setting a\r\n         * color for tooltip background, you may set a color for its label as well\r\n         * using `tooltip.label.fill` property.\r\n         *\r\n         *\r\n         * @param value boolean\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"autoTextColor\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"keepTargetHover\", {\r\n        /**\r\n         * @return Keep target hovered?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"keepTargetHover\");\r\n        },\r\n        /**\r\n         * If this tooltip is displayed on hover on some other object, keep that\r\n         * element hovered if hovering on the tooltip.\r\n         *\r\n         * @default false\r\n         * @since 4.1.13\r\n         * @param  value  Keep target hovered?\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            if (this.setPropertyValue(\"keepTargetHover\", value, true)) {\r\n                if (value) {\r\n                    this.hoverable = true;\r\n                    this.background.interactionsEnabled = true;\r\n                    this._disposers.push(this.events.on(\"over\", function (ev) {\r\n                        if (_this.targetSprite && _this.targetSprite.hoverable) {\r\n                            _this.targetSprite.isHover = true;\r\n                        }\r\n                    }));\r\n                    this._disposers.push(this.events.on(\"out\", function (ev) {\r\n                        if (_this.targetSprite && _this.targetSprite.hoverable) {\r\n                            //this.hideTooltip();\r\n                            //this.targetSprite.handleOut();\r\n                            _this.targetSprite.isHover = false;\r\n                        }\r\n                    }));\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"showInViewport\", {\r\n        /**\r\n         * @return Force showing tooltip?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"showInViewport\");\r\n        },\r\n        /**\r\n         * Normally, a tooltip will hide itself if it is pointing to a coordinate\r\n         * that is outside viewport.\r\n         *\r\n         * Setting this setting to `true` will override that and make tooltip\r\n         * appear next to the viewport edge closest to the target point.\r\n         *\r\n         * @default false\r\n         * @since 4.5.7\r\n         * @param  value  Force showing tooltip?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"showInViewport\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"getFillFromObject\", {\r\n        /**\r\n         * Specifies if tooltip background should get fill color from the sprite it is pointing to.\r\n         *\r\n         * @return {boolean}\r\n         * @default true\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"getFillFromObject\");\r\n        },\r\n        /**\r\n         * @param value boolean\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"getFillFromObject\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates and returns a background element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Background\r\n     */\r\n    Tooltip.prototype.createBackground = function () {\r\n        return new PointedRectangle();\r\n    };\r\n    Object.defineProperty(Tooltip.prototype, \"pointerOrientation\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pointerOrientation\");\r\n        },\r\n        /**\r\n         * Pointer orientation: `\"horizontal\"`, `\"vertical\"`, `\"up\"`, `\"down\"`,\r\n         * `\"right\"`, or `\"left\"`.\r\n         *\r\n         * Options`\"horizontal\"` or `\"vertical\"` are location-aware, meaning they\r\n         * will change position of the Tooltip based on the target point's position\r\n         * in relation to chart center.\r\n         *\r\n         * Options `\"up\"`, `\"down\"`, `\"right\"`, `\"left\"` are static and will point\r\n         * in the specified direction regardless of the position, even if that means\r\n         * going out of chart/screen bounds.\r\n         *\r\n         * IMPORTANT: in some situations, like having multiple tooltips stacked for\r\n         * multiple series, the `\"up\"` and `\"down\"` values might be ignored in order\r\n         * to make tooltip overlap algorithm work.\r\n         *\r\n         * @default \"vertical\"\r\n         * @param  value  Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"pointerOrientation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"animationDuration\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"animationDuration\");\r\n        },\r\n        /**\r\n         * Duration in milliseconds for the animation to take place when the tooltip\r\n         * is moving from one place to another.\r\n         *\r\n         * @default 0\r\n         * @param value  number\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"animationDuration\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"animationEasing\", {\r\n        /**\r\n         * @return {Function}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"animationEasing\");\r\n        },\r\n        /**\r\n         * Tooltip animation (moving from one place to another) easing function.\r\n         *\r\n         * @default $ease.cubicOut\r\n         * @param value (value: number) => number\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"animationEasing\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"html\", {\r\n        /**\r\n         * @return HTML content\r\n         */\r\n        get: function () {\r\n            return this.label.html;\r\n        },\r\n        /**\r\n         * HTML content for the Tooltip.\r\n         *\r\n         * Provided value will be used as is, without applying any further\r\n         * formatting to it.\r\n         *\r\n         * @param value  HTML content\r\n         */\r\n        set: function (value) {\r\n            if (this.label.html != value) {\r\n                this.label.html = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"text\", {\r\n        /**\r\n         * @return SVG text\r\n         */\r\n        get: function () {\r\n            return this.label.text;\r\n        },\r\n        /**\r\n         * SVG text content for the Tooltip.\r\n         *\r\n         * Text can have a number of formatting options supported by\r\n         * [[TextFormatter]].\r\n         *\r\n         * @param value  SVG text\r\n         */\r\n        set: function (value) {\r\n            if (this.label.text != value) {\r\n                this.label.text = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates the Tooltip.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Tooltip.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var label = this.label;\r\n        if (label.invalid) {\r\n            label.validate();\r\n        }\r\n        var x = this._pointTo.x;\r\n        var y = this._pointTo.y;\r\n        var boundingRect = this._boundingRect;\r\n        var textW = label.measuredWidth;\r\n        var textH = label.measuredHeight;\r\n        var pointerLength = this.background.pointerLength;\r\n        var textX;\r\n        var textY;\r\n        if (this.ignoreBounds) {\r\n            boundingRect = undefined;\r\n        }\r\n        // try to handle if text is wider than br\r\n        if (boundingRect && this.fixDoc && textW > boundingRect.width) {\r\n            // TODO maybe this isn't needed ?\r\n            $utils.spritePointToDocument({ x: boundingRect.x, y: boundingRect.y }, this.parent);\r\n            var p1 = $utils.spritePointToDocument({ x: boundingRect.x + boundingRect.width, y: boundingRect.y + boundingRect.height }, this.parent);\r\n            var documentWidth = document.body.offsetWidth;\r\n            // TODO maybe this isn't needed ?\r\n            $utils.used(document.body.offsetHeight);\r\n            if (p1.x > documentWidth / 2) {\r\n                boundingRect.x = boundingRect.width - textW;\r\n            }\r\n            else {\r\n                boundingRect.width = boundingRect.x + textW;\r\n            }\r\n        }\r\n        var pointerOrientation = this.pointerOrientation;\r\n        // horizontal\r\n        if (pointerOrientation == \"horizontal\" || pointerOrientation == \"left\" || pointerOrientation == \"right\") {\r\n            textY = -textH / 2;\r\n            if (pointerOrientation == \"horizontal\") {\r\n                if (boundingRect && x > boundingRect.x + boundingRect.width / 2) {\r\n                    textX = -textW / 2 - pointerLength;\r\n                }\r\n                else {\r\n                    textX = textW / 2 + pointerLength;\r\n                }\r\n            }\r\n            else if (pointerOrientation == \"left\") {\r\n                textX = textW / 2 + pointerLength;\r\n            }\r\n            else {\r\n                textX = -textW / 2 - pointerLength;\r\n            }\r\n        }\r\n        // vertical pointer\r\n        else {\r\n            if (boundingRect) {\r\n                textX = $math.fitToRange(0, boundingRect.x - x + textW / 2, boundingRect.x - x + boundingRect.width - textW / 2);\r\n            }\r\n            if (pointerOrientation == \"vertical\") {\r\n                if (boundingRect && y > boundingRect.y + textH + pointerLength) {\r\n                    textY = -textH - pointerLength;\r\n                    this._verticalOrientation = \"up\";\r\n                }\r\n                else {\r\n                    textY = pointerLength;\r\n                    this._verticalOrientation = \"down\";\r\n                }\r\n            }\r\n            else if (pointerOrientation == \"down\") {\r\n                textY = -textH - pointerLength;\r\n                this._verticalOrientation = \"up\";\r\n            }\r\n            else {\r\n                textY = pointerLength;\r\n                this._verticalOrientation = \"down\";\r\n            }\r\n        }\r\n        if (boundingRect) {\r\n            textY = $math.fitToRange(textY, boundingRect.y - y, boundingRect.y + boundingRect.height - textH - y);\r\n        }\r\n        label.x = textX;\r\n        label.y = textY;\r\n        this.drawBackground();\r\n    };\r\n    /**\r\n     * Overrides functionality from the superclass.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Tooltip.prototype.updateBackground = function () {\r\n        this.group.addToBack(this.background.group);\r\n    };\r\n    /**\r\n     * Draws Tooltip background (chrome, background and pointer/stem).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Tooltip.prototype.drawBackground = function () {\r\n        var label = this.label;\r\n        var background = this.background;\r\n        var textWidth = label.measuredWidth;\r\n        var textHeight = label.measuredHeight;\r\n        var boundingRect = this._boundingRect;\r\n        var bgWidth = textWidth;\r\n        var bgX = label.pixelX - textWidth / 2;\r\n        var bgHeight = textHeight;\r\n        var bgY = label.pixelY;\r\n        var x = this._pointTo.x;\r\n        var y = this._pointTo.y;\r\n        var boundX1 = boundingRect.x - x;\r\n        var boundX2 = boundX1 + boundingRect.width;\r\n        var boundY1 = boundingRect.y - y;\r\n        var boundY2 = boundY1 + boundingRect.height;\r\n        background.x = bgX;\r\n        background.y = bgY;\r\n        background.width = bgWidth;\r\n        background.height = bgHeight;\r\n        if (this.fitPointerToBounds) {\r\n            background.pointerX = $math.fitToRange(-background.x, boundX1 - background.x, boundX2 - background.x);\r\n            background.pointerY = $math.fitToRange(-background.y, boundY1 - background.y, boundY2 - background.y);\r\n        }\r\n        else {\r\n            background.pointerX = -background.x;\r\n            background.pointerY = -background.y;\r\n        }\r\n        background.validate();\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Tooltip.prototype.delayedPointTo = function (point, instantly) {\r\n        var _this = this;\r\n        if (this._pointToDisposer) {\r\n            this._pointToDisposer.dispose();\r\n        }\r\n        this._pointToDisposer = registry.events.once(\"exitframe\", function () {\r\n            _this.pointTo(point, instantly);\r\n        });\r\n        this.addDisposer(this._pointToDisposer);\r\n    };\r\n    /**\r\n     * Set nes tooltip's anchor point and moves whole tooltip.\r\n     *\r\n     * @param x  X coordinate\r\n     * @param y  Y coordinate\r\n     */\r\n    Tooltip.prototype.pointTo = function (point, instantly) {\r\n        if (this._pointTo.x != point.x || this._pointTo.y != point.y) {\r\n            this._pointTo = point;\r\n            this.invalidate();\r\n            // this helps to avoid strange animation from nowhere on initial show or when balloon was hidden already\r\n            if (!this.visible || instantly) {\r\n                this.moveTo(this._pointTo);\r\n                if (this._animation) {\r\n                    this._animation.kill();\r\n                }\r\n            }\r\n            else {\r\n                // helps to avoid flicker on top/left corner\r\n                if (this.pixelX == 0 && this.pixelY == 0) {\r\n                    this.moveTo(this._pointTo);\r\n                }\r\n                else {\r\n                    if (this._animation) {\r\n                        this._animation.kill();\r\n                    }\r\n                    this._animation = new Animation(this, [{ property: \"x\", to: point.x, from: this.pixelX }, { property: \"y\", to: point.y, from: this.pixelY }], this.animationDuration, this.animationEasing).start();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets numeric boundaries Tooltip needs to obey (so it does not go outside\r\n     * specific area).\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param rectangle Boundary rectangle\r\n     */\r\n    Tooltip.prototype.setBounds = function (rectangle) {\r\n        var oldRect = this._boundingRect;\r\n        if (oldRect.x != rectangle.x || oldRect.y != rectangle.y || oldRect.width != rectangle.width || oldRect.height != rectangle.height) {\r\n            this._boundingRect = rectangle;\r\n            this.invalidate();\r\n        }\r\n    };\r\n    Object.defineProperty(Tooltip.prototype, \"boundingContainer\", {\r\n        /**\r\n         * Sets a [[Container]] instance to be used when calculating numeric\r\n         * boundaries for the Tooltip.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param container  Boundary container\r\n         */\r\n        set: function (container) {\r\n            this._boundingContainer = container;\r\n            // TODO remove closures ?\r\n            container.events.on(\"sizechanged\", this.updateBounds, this);\r\n            container.events.on(\"positionchanged\", this.updateBounds, this);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates numeric boundaries for the Tooltip, based on the\r\n     * `boundingCountrainer`.\r\n     */\r\n    Tooltip.prototype.updateBounds = function () {\r\n        var boundingContainer = this._boundingContainer;\r\n        // to global\r\n        var rect = $utils.spriteRectToSvg({\r\n            x: boundingContainer.pixelX,\r\n            y: boundingContainer.pixelY,\r\n            width: boundingContainer.maxWidth,\r\n            height: boundingContainer.maxHeight\r\n        }, boundingContainer);\r\n        this.setBounds(rect);\r\n    };\r\n    Object.defineProperty(Tooltip.prototype, \"ignoreBounds\", {\r\n        /**\r\n         * @return Ignore chart bounds?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"ignoreBounds\");\r\n        },\r\n        /**\r\n         * Normally, a tooltip's position will be adjusted so it always fits into\r\n         * chart's coundaries.\r\n         *\r\n         * Setting this to `false` will disable such checks and will allow tooltip\r\n         * to \"bleed over\" the edge of the chart.\r\n         *\r\n         * @default false\r\n         * @since 4.10.8\r\n         * @param  value  Ignore chart bounds?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"ignoreBounds\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"verticalOrientation\", {\r\n        /**\r\n         * If tooltipOrientation is vertical, it can be drawn below or above point.\r\n         * We need to know this when solving overlapping.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return \"up\" | \"down\"\r\n         */\r\n        get: function () {\r\n            return this._verticalOrientation;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"tooltip\", {\r\n        /**\r\n         * To avoid stackoverflow\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies properties and other attributes.\r\n     *\r\n     * @param source  Source\r\n     */\r\n    Tooltip.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.label.copyFrom(source.label);\r\n        if (source._boundingRect) {\r\n            this._boundingRect = source._boundingRect;\r\n        }\r\n    };\r\n    /**\r\n     * Adds easing functions to \"function\" fields.\r\n     *\r\n     * @param field  Field name\r\n     * @return Assign as function?\r\n     */\r\n    Tooltip.prototype.asFunction = function (field) {\r\n        return field == \"animationEasing\" || _super.prototype.asIs.call(this, field);\r\n    };\r\n    return Tooltip;\r\n}(Container));\r\nexport { Tooltip };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Tooltip\"] = Tooltip;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}