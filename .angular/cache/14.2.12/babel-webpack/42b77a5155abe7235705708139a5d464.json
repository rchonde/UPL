{"ast":null,"code":"/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Column } from \"./Column\";\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\n\nvar Column3D =\n/** @class */\nfunction (_super) {\n  __extends(Column3D, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Column3D() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Column3D\";\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Column3D.prototype.createAssets = function () {\n    this.column3D = this.createChild(Rectangle3D);\n    this.column3D.shouldClone = false;\n    this.column3D.strokeOpacity = 0; // some dirty hack so that if user access column, it won't get error\n\n    this.column = this.column3D;\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Column3D.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    if (this.column3D) {\n      this.column3D.width = this.pixelWidth;\n      this.column3D.height = this.pixelHeight;\n\n      if (this.column3D.invalid) {\n        this.column3D.validate();\n      }\n    }\n  };\n  /**\r\n   * Copies all parameters from another [[Column3D]].\r\n   *\r\n   * @param source Source Column3D\r\n   */\n\n\n  Column3D.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (this.column3D) {\n      this.column3D.copyFrom(source.column3D);\n    }\n  };\n  /**\r\n   * Sets actual `fill` property on the SVG element, including applicable color\r\n   * modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Fill\r\n   */\n\n\n  Column3D.prototype.setFill = function (value) {\n    _super.prototype.setFill.call(this, value);\n\n    this.column.fill = value;\n  };\n\n  return Column3D;\n}(Column);\n\nexport { Column3D };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Column3D\"] = Column3D;","map":{"version":3,"names":["__extends","Column","Rectangle3D","registry","Column3D","_super","_this","call","className","prototype","createAssets","column3D","createChild","shouldClone","strokeOpacity","column","validate","width","pixelWidth","height","pixelHeight","invalid","copyFrom","source","setFill","value","fill","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/elements/Column3D.js"],"sourcesContent":["/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar Column3D = /** @class */ (function (_super) {\r\n    __extends(Column3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Column3D() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Column3D\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    Column3D.prototype.createAssets = function () {\r\n        this.column3D = this.createChild(Rectangle3D);\r\n        this.column3D.shouldClone = false;\r\n        this.column3D.strokeOpacity = 0;\r\n        // some dirty hack so that if user access column, it won't get error\r\n        this.column = this.column3D;\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     */\r\n    Column3D.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        if (this.column3D) {\r\n            this.column3D.width = this.pixelWidth;\r\n            this.column3D.height = this.pixelHeight;\r\n            if (this.column3D.invalid) {\r\n                this.column3D.validate();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Column3D]].\r\n     *\r\n     * @param source Source Column3D\r\n     */\r\n    Column3D.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.column3D) {\r\n            this.column3D.copyFrom(source.column3D);\r\n        }\r\n    };\r\n    /**\r\n     * Sets actual `fill` property on the SVG element, including applicable color\r\n     * modifiers.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Fill\r\n     */\r\n    Column3D.prototype.setFill = function (value) {\r\n        _super.prototype.setFill.call(this, value);\r\n        this.column.fill = value;\r\n    };\r\n    return Column3D;\r\n}(Column));\r\nexport { Column3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,WAAT,QAA4B,oCAA5B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,QAAQ;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC5CL,SAAS,CAACI,QAAD,EAAWC,MAAX,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,QAAT,GAAoB;IAChB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;IACAD,KAAK,CAACE,SAAN,GAAkB,UAAlB;IACA,OAAOF,KAAP;EACH;EACD;AACJ;AACA;;;EACIF,QAAQ,CAACK,SAAT,CAAmBC,YAAnB,GAAkC,YAAY;IAC1C,KAAKC,QAAL,GAAgB,KAAKC,WAAL,CAAiBV,WAAjB,CAAhB;IACA,KAAKS,QAAL,CAAcE,WAAd,GAA4B,KAA5B;IACA,KAAKF,QAAL,CAAcG,aAAd,GAA8B,CAA9B,CAH0C,CAI1C;;IACA,KAAKC,MAAL,GAAc,KAAKJ,QAAnB;EACH,CAND;EAOA;AACJ;AACA;;;EACIP,QAAQ,CAACK,SAAT,CAAmBO,QAAnB,GAA8B,YAAY;IACtCX,MAAM,CAACI,SAAP,CAAiBO,QAAjB,CAA0BT,IAA1B,CAA+B,IAA/B;;IACA,IAAI,KAAKI,QAAT,EAAmB;MACf,KAAKA,QAAL,CAAcM,KAAd,GAAsB,KAAKC,UAA3B;MACA,KAAKP,QAAL,CAAcQ,MAAd,GAAuB,KAAKC,WAA5B;;MACA,IAAI,KAAKT,QAAL,CAAcU,OAAlB,EAA2B;QACvB,KAAKV,QAAL,CAAcK,QAAd;MACH;IACJ;EACJ,CATD;EAUA;AACJ;AACA;AACA;AACA;;;EACIZ,QAAQ,CAACK,SAAT,CAAmBa,QAAnB,GAA8B,UAAUC,MAAV,EAAkB;IAC5ClB,MAAM,CAACI,SAAP,CAAiBa,QAAjB,CAA0Bf,IAA1B,CAA+B,IAA/B,EAAqCgB,MAArC;;IACA,IAAI,KAAKZ,QAAT,EAAmB;MACf,KAAKA,QAAL,CAAcW,QAAd,CAAuBC,MAAM,CAACZ,QAA9B;IACH;EACJ,CALD;EAMA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIP,QAAQ,CAACK,SAAT,CAAmBe,OAAnB,GAA6B,UAAUC,KAAV,EAAiB;IAC1CpB,MAAM,CAACI,SAAP,CAAiBe,OAAjB,CAAyBjB,IAAzB,CAA8B,IAA9B,EAAoCkB,KAApC;;IACA,KAAKV,MAAL,CAAYW,IAAZ,GAAmBD,KAAnB;EACH,CAHD;;EAIA,OAAOrB,QAAP;AACH,CAxD6B,CAwD5BH,MAxD4B,CAA9B;;AAyDA,SAASG,QAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,QAAQ,CAACwB,iBAAT,CAA2B,UAA3B,IAAyCvB,QAAzC"},"metadata":{},"sourceType":"module"}