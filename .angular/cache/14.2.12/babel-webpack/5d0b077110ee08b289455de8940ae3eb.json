{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { AxisBullet } from \"./AxisBullet\";\nimport { WavedLine } from \"../../core/elements/WavedLine\";\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\nimport { registry } from \"../../core/Registry\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A renderer for horizontal axis.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\n\nvar AxisRendererX =\n/** @class */\nfunction (_super) {\n  __extends(AxisRendererX, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRendererX() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"AxisRendererX\";\n    _this.minGridDistance = 120;\n    _this.opposite = false;\n    _this.rotation = 0;\n    _this.width = percent(100);\n    _this.labels.template.horizontalCenter = \"middle\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n  * @ignore\r\n  */\n\n\n  AxisRendererX.prototype.setAxis = function (axis) {\n    _super.prototype.setAxis.call(this, axis);\n\n    axis.layout = \"vertical\";\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  AxisRendererX.prototype.updateGridContainer = function () {\n    var axis = this.axis;\n\n    if (axis) {\n      var gridContainer = this.gridContainer;\n      gridContainer.x = axis.pixelX;\n      gridContainer.width = axis.axisLength;\n    }\n  };\n  /**\r\n   * Called when rendered is attached to an Axis, as well as a property of\r\n   * Axis that might affect the appearance is updated.\r\n   *\r\n   * E.g. `axis.opposite`, `axis.inside`, etc.\r\n   *\r\n   * This method is called **before** draw, so that any related setting\r\n   * changed in this method can be changed.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererX.prototype.processRenderer = function () {\n    _super.prototype.processRenderer.call(this); // can not do this in init, as axis is set later\n\n\n    var axis = this.axis;\n\n    if (axis) {\n      if (!(axis.width instanceof Percent)) {\n        axis.width = percent(100);\n      } // @todo Is thi sneeded?\n\n\n      $utils.used(this.line);\n      var title = axis.title;\n      title.rotation = 0;\n      title.align = \"center\";\n\n      if (this.opposite) {\n        this.line.toFront();\n        title.toBack();\n      } else {\n        title.toFront();\n        this.toBack();\n        this.line.toBack();\n      }\n    }\n  };\n  /**\r\n   * Updates some of the Axis tooltip's visual properties, related to\r\n   * rendering of the Axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererX.prototype.updateTooltip = function () {\n    var axis = this.axis;\n\n    if (axis) {\n      var bigNum = 1000;\n      var bbx = this.line.pixelX;\n      var bby = this.line.pixelY;\n      var bbw = this.axisLength;\n      var bbh = bigNum; // top\n\n      if (this.opposite) {\n        if (!this.inside) {\n          bby = -bigNum;\n          bbh = bigNum;\n        }\n      } // bottom\n      else {\n        if (this.inside) {\n          bby = -bigNum;\n          bbh = bigNum;\n        }\n      }\n\n      this.axis.updateTooltip(\"vertical\", {\n        x: bbx,\n        y: bby,\n        width: bbw,\n        height: bbh\n      });\n    }\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n\n\n  AxisRendererX.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    label.isMeasured = !label.inside;\n    var deltaY = 0;\n    var verticalCenter;\n    var maxHeight = this.gridContainer.maxHeight;\n\n    if (this.opposite) {\n      if (label.inside) {\n        verticalCenter = \"top\";\n\n        if (label.valign == \"bottom\") {\n          deltaY = maxHeight;\n          verticalCenter = \"bottom\";\n        }\n\n        if (label.valign == \"middle\") {\n          deltaY = maxHeight / 2;\n          verticalCenter = \"middle\";\n        }\n      } else {\n        verticalCenter = \"bottom\";\n      }\n\n      point.y = deltaY;\n    } else {\n      if (label.inside) {\n        verticalCenter = \"bottom\";\n\n        if (label.valign == \"top\") {\n          deltaY = -maxHeight;\n          verticalCenter = \"top\";\n        }\n\n        if (label.valign == \"middle\") {\n          deltaY = -maxHeight / 2;\n          verticalCenter = \"middle\";\n        }\n      } else {\n        verticalCenter = \"top\";\n      }\n\n      point.y += deltaY;\n    }\n\n    if (label.rotation == 0) {\n      // Apply fuzzy logic to verticalCenter only if labels are not rotated\n      label.verticalCenter = verticalCenter;\n    }\n\n    this.positionItem(label, point);\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n\n  Object.defineProperty(AxisRendererX.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      var axis = this.axis;\n      return axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n\n  AxisRendererX.prototype.positionToPoint = function (position, position2) {\n    return {\n      x: this.positionToCoordinate(position),\n      y: 0\n    };\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRendererX.prototype.pointToPosition = function (point) {\n    return this.coordinateToPosition(point.x, point.y);\n  };\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n\n\n  AxisRendererX.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    var x1 = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\n    var x2 = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\n    var w = Math.abs(x2 - x1);\n    var h = this.getHeight();\n    var x = Math.min(x1, x2);\n    var y = 0;\n    return $path.rectToPath({\n      x: x,\n      y: y,\n      width: w,\n      height: h\n    }, true);\n  };\n  /**\r\n   * Updates and positions an axis break element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Break element\r\n   */\n\n\n  AxisRendererX.prototype.updateBreakElement = function (axisBreak) {\n    _super.prototype.updateBreakElement.call(this, axisBreak);\n\n    var startLine = axisBreak.startLine;\n    var endLine = axisBreak.endLine;\n    var fillShape = axisBreak.fillShape;\n    var startPoint = axisBreak.startPoint;\n    var endPoint = axisBreak.endPoint;\n    var y1 = axisBreak.pixelMarginLeft;\n    var y2 = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;\n    startPoint.x = $math.fitToRange(startPoint.x, -1, this.axisLength + 1);\n    endPoint.x = $math.fitToRange(endPoint.x, -1, this.axisLength + 1);\n\n    if (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.axisLength)) {\n      axisBreak.fillShape.__disabled = true;\n    } else {\n      axisBreak.fillShape.__disabled = false;\n    }\n\n    startLine.y = y1;\n    startLine.width = 0;\n    startLine.height = y2;\n    endLine.y = y1;\n    endLine.width = 0;\n    endLine.height = y2;\n    fillShape.height = y2;\n    fillShape.width = Math.abs(endPoint.x - startPoint.x);\n    fillShape.y = y1;\n    fillShape.x = startPoint.x;\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererX.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position); //point.x = $utils.spritePointToSprite({x:point.x, y:0}, this, this.gridContainer).x;\n\n    grid.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: this.getHeight()\n    });\n    this.positionItem(grid, point);\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererX.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n    var tickLength = tick.length;\n    point.y = $utils.spritePointToSprite({\n      x: 0,\n      y: this.line.pixelY\n    }, this.line.parent, this.gridContainer).y;\n\n    if (this.opposite) {\n      tickLength *= tick.inside ? 1 : -1;\n    } else {\n      tickLength *= tick.inside ? -1 : 1;\n    }\n\n    tick.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: tickLength\n    });\n    this.positionItem(tick, point);\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererX.prototype.updateAxisLine = function () {\n    this.line.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: this.axisLength,\n      y: 0\n    });\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererX.prototype.updateBaseGridElement = function () {\n    _super.prototype.updateBaseGridElement.call(this);\n\n    var axis = this.axis;\n    var h = this.getHeight();\n    var w = this.axisLength;\n    var baseGrid = this.baseGrid;\n    var x = axis.basePoint.x;\n\n    if (x < -0.2 || x > w + 0.2) {\n      baseGrid.hide(0);\n    } else {\n      var y = $utils.spritePointToSprite({\n        x: 0,\n        y: 0\n      }, this.gridContainer, baseGrid.parent).y;\n      baseGrid.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: 0,\n        y: h\n      });\n      baseGrid.moveTo({\n        x: x,\n        y: y\n      });\n      baseGrid.show(0);\n    }\n  };\n  /**\r\n   * Creates visual elements for and axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Axis break\r\n   */\n\n\n  AxisRendererX.prototype.createBreakSprites = function (axisBreak) {\n    axisBreak.startLine = new WavedLine();\n    axisBreak.endLine = new WavedLine();\n    var wavedRectangle = new WavedRectangle();\n    wavedRectangle.setWavedSides(false, true, false, true);\n    axisBreak.fillShape = wavedRectangle;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  AxisRendererX.prototype.toAxisPosition = function (value) {\n    var inversedPosition = value;\n    var axis = this.axis;\n\n    if (axis) {\n      var relativePositionSprite = axis.relativePositionSprite;\n      var x = axis.pixelX;\n\n      if (relativePositionSprite) {\n        x = $utils.spritePointToSprite({\n          x: this.pixelX,\n          y: 0\n        }, this.parent, relativePositionSprite).x;\n      } else {\n        relativePositionSprite = axis.parent;\n      }\n\n      if (relativePositionSprite) {\n        var relativeX = x / relativePositionSprite.innerWidth;\n        var relativeWidth = axis.axisLength / relativePositionSprite.innerWidth;\n        return (inversedPosition - relativeX) / relativeWidth;\n      }\n    }\n\n    return value;\n  };\n  /**\r\n   * Updates and positions axis bullets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererX.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    point.y = $utils.spritePointToSprite({\n      x: 0,\n      y: this.line.pixelY\n    }, this.line.parent, this.gridContainer).y;\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n\n  return AxisRendererX;\n}(AxisRenderer);\n\nexport { AxisRendererX };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisRendererX\"] = AxisRendererX;\n/**\r\n * Add default responsive rules\r\n */\n\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.heightXS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererX) {\n      var state = target.states.create(stateId);\n      state.properties.inside = true;\n      state.properties.maxLabelPosition = 0.9;\n      state.properties.minLabelPosition = 0.1;\n      return state;\n    }\n\n    return null;\n  }\n});\n/**\r\n * Disable labels altogather on very small charts\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.heightXXS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererX) {\n      var state = target.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});","map":{"version":3,"names":["__extends","AxisRenderer","AxisBullet","WavedLine","WavedRectangle","registry","percent","Percent","$math","$path","$utils","$type","defaultRules","ResponsiveBreakpoints","AxisRendererX","_super","_this","call","className","minGridDistance","opposite","rotation","width","labels","template","horizontalCenter","applyTheme","prototype","setAxis","axis","layout","updateGridContainer","gridContainer","x","pixelX","axisLength","processRenderer","used","line","title","align","toFront","toBack","updateTooltip","bigNum","bbx","bby","pixelY","bbw","bbh","inside","y","height","updateLabelElement","label","position","endPosition","location","hasValue","point","positionToPoint","isMeasured","deltaY","verticalCenter","maxHeight","valign","positionItem","toggleVisibility","minLabelPosition","maxLabelPosition","Object","defineProperty","get","measuredWidth","pixelPaddingRight","pixelPaddingLeft","enumerable","configurable","position2","positionToCoordinate","pointToPosition","coordinateToPosition","getPositionRangePath","startPosition","x1","fitToRange","x2","w","Math","abs","h","getHeight","min","rectToPath","updateBreakElement","axisBreak","startLine","endLine","fillShape","startPoint","endPoint","y1","pixelMarginLeft","y2","pixelMarginTop","pixelMarginBottom","__disabled","updateGridElement","grid","path","moveTo","lineTo","updateTickElement","tick","tickLength","length","spritePointToSprite","parent","updateAxisLine","updateBaseGridElement","baseGrid","basePoint","hide","show","createBreakSprites","wavedRectangle","setWavedSides","toAxisPosition","value","inversedPosition","relativePositionSprite","relativeX","innerWidth","relativeWidth","updateBullet","bullet","registeredClasses","push","relevant","heightXS","state","target","stateId","states","create","properties","heightXXS","disabled"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererX.js"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A renderer for horizontal axis.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nvar AxisRendererX = /** @class */ (function (_super) {\r\n    __extends(AxisRendererX, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param axis Related axis\r\n     */\r\n    function AxisRendererX() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"AxisRendererX\";\r\n        _this.minGridDistance = 120;\r\n        _this.opposite = false;\r\n        _this.rotation = 0;\r\n        _this.width = percent(100);\r\n        _this.labels.template.horizontalCenter = \"middle\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n    * @ignore\r\n    */\r\n    AxisRendererX.prototype.setAxis = function (axis) {\r\n        _super.prototype.setAxis.call(this, axis);\r\n        axis.layout = \"vertical\";\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    AxisRendererX.prototype.updateGridContainer = function () {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var gridContainer = this.gridContainer;\r\n            gridContainer.x = axis.pixelX;\r\n            gridContainer.width = axis.axisLength;\r\n        }\r\n    };\r\n    /**\r\n     * Called when rendered is attached to an Axis, as well as a property of\r\n     * Axis that might affect the appearance is updated.\r\n     *\r\n     * E.g. `axis.opposite`, `axis.inside`, etc.\r\n     *\r\n     * This method is called **before** draw, so that any related setting\r\n     * changed in this method can be changed.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererX.prototype.processRenderer = function () {\r\n        _super.prototype.processRenderer.call(this);\r\n        // can not do this in init, as axis is set later\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            if (!(axis.width instanceof Percent)) {\r\n                axis.width = percent(100);\r\n            }\r\n            // @todo Is thi sneeded?\r\n            $utils.used(this.line);\r\n            var title = axis.title;\r\n            title.rotation = 0;\r\n            title.align = \"center\";\r\n            if (this.opposite) {\r\n                this.line.toFront();\r\n                title.toBack();\r\n            }\r\n            else {\r\n                title.toFront();\r\n                this.toBack();\r\n                this.line.toBack();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates some of the Axis tooltip's visual properties, related to\r\n     * rendering of the Axis.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererX.prototype.updateTooltip = function () {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var bigNum = 1000;\r\n            var bbx = this.line.pixelX;\r\n            var bby = this.line.pixelY;\r\n            var bbw = this.axisLength;\r\n            var bbh = bigNum;\r\n            // top\r\n            if (this.opposite) {\r\n                if (!this.inside) {\r\n                    bby = -bigNum;\r\n                    bbh = bigNum;\r\n                }\r\n            }\r\n            // bottom\r\n            else {\r\n                if (this.inside) {\r\n                    bby = -bigNum;\r\n                    bbh = bigNum;\r\n                }\r\n            }\r\n            this.axis.updateTooltip(\"vertical\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n        }\r\n    };\r\n    /**\r\n     * Updates and positions a label element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param label        Label element\r\n     * @param position     Starting position\r\n     * @param endPosition  Ending position\r\n     */\r\n    AxisRendererX.prototype.updateLabelElement = function (label, position, endPosition, location) {\r\n        if (!$type.hasValue(location)) {\r\n            location = label.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        var point = this.positionToPoint(position);\r\n        label.isMeasured = !label.inside;\r\n        var deltaY = 0;\r\n        var verticalCenter;\r\n        var maxHeight = this.gridContainer.maxHeight;\r\n        if (this.opposite) {\r\n            if (label.inside) {\r\n                verticalCenter = \"top\";\r\n                if (label.valign == \"bottom\") {\r\n                    deltaY = maxHeight;\r\n                    verticalCenter = \"bottom\";\r\n                }\r\n                if (label.valign == \"middle\") {\r\n                    deltaY = maxHeight / 2;\r\n                    verticalCenter = \"middle\";\r\n                }\r\n            }\r\n            else {\r\n                verticalCenter = \"bottom\";\r\n            }\r\n            point.y = deltaY;\r\n        }\r\n        else {\r\n            if (label.inside) {\r\n                verticalCenter = \"bottom\";\r\n                if (label.valign == \"top\") {\r\n                    deltaY = -maxHeight;\r\n                    verticalCenter = \"top\";\r\n                }\r\n                if (label.valign == \"middle\") {\r\n                    deltaY = -maxHeight / 2;\r\n                    verticalCenter = \"middle\";\r\n                }\r\n            }\r\n            else {\r\n                verticalCenter = \"top\";\r\n            }\r\n            point.y += deltaY;\r\n        }\r\n        if (label.rotation == 0) {\r\n            // Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n            label.verticalCenter = verticalCenter;\r\n        }\r\n        this.positionItem(label, point);\r\n        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n    };\r\n    Object.defineProperty(AxisRendererX.prototype, \"axisLength\", {\r\n        /**\r\n         * Returns actual length of the Axis, in pixels.\r\n         *\r\n         * @return Length (px)\r\n         */\r\n        get: function () {\r\n            var axis = this.axis;\r\n            return (axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position on axis to point coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @param position2  Position (0-1) Position on the second axis\r\n     * @return Point\r\n     */\r\n    AxisRendererX.prototype.positionToPoint = function (position, position2) {\r\n        return { x: this.positionToCoordinate(position), y: 0 };\r\n    };\r\n    /**\r\n     * Converts a point at specific coordinates to a relative position (0-1)\r\n     * on the axis.\r\n     *\r\n     * @param point  Point\r\n     * @return Position (0-1)\r\n     */\r\n    AxisRendererX.prototype.pointToPosition = function (point) {\r\n        return this.coordinateToPosition(point.x, point.y);\r\n    };\r\n    /**\r\n     * [getPositionRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param startPosition  Starting position\r\n     * @param endPosition    End position\r\n     * @return SVG path\r\n     */\r\n    AxisRendererX.prototype.getPositionRangePath = function (startPosition, endPosition) {\r\n        var x1 = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n        var x2 = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n        var w = Math.abs(x2 - x1);\r\n        var h = this.getHeight();\r\n        var x = Math.min(x1, x2);\r\n        var y = 0;\r\n        return $path.rectToPath({\r\n            x: x,\r\n            y: y,\r\n            width: w,\r\n            height: h\r\n        }, true);\r\n    };\r\n    /**\r\n     * Updates and positions an axis break element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axisBreak Break element\r\n     */\r\n    AxisRendererX.prototype.updateBreakElement = function (axisBreak) {\r\n        _super.prototype.updateBreakElement.call(this, axisBreak);\r\n        var startLine = axisBreak.startLine;\r\n        var endLine = axisBreak.endLine;\r\n        var fillShape = axisBreak.fillShape;\r\n        var startPoint = axisBreak.startPoint;\r\n        var endPoint = axisBreak.endPoint;\r\n        var y1 = axisBreak.pixelMarginLeft;\r\n        var y2 = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;\r\n        startPoint.x = $math.fitToRange(startPoint.x, -1, this.axisLength + 1);\r\n        endPoint.x = $math.fitToRange(endPoint.x, -1, this.axisLength + 1);\r\n        if (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.axisLength)) {\r\n            axisBreak.fillShape.__disabled = true;\r\n        }\r\n        else {\r\n            axisBreak.fillShape.__disabled = false;\r\n        }\r\n        startLine.y = y1;\r\n        startLine.width = 0;\r\n        startLine.height = y2;\r\n        endLine.y = y1;\r\n        endLine.width = 0;\r\n        endLine.height = y2;\r\n        fillShape.height = y2;\r\n        fillShape.width = Math.abs(endPoint.x - startPoint.x);\r\n        fillShape.y = y1;\r\n        fillShape.x = startPoint.x;\r\n    };\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param grid         Grid element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererX.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        //point.x = $utils.spritePointToSprite({x:point.x, y:0}, this, this.gridContainer).x;\r\n        grid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.getHeight() });\r\n        this.positionItem(grid, point);\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param tick         Tick element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererX.prototype.updateTickElement = function (tick, position, endPosition) {\r\n        position = position + (endPosition - position) * tick.location;\r\n        var point = this.positionToPoint(position);\r\n        var tickLength = tick.length;\r\n        point.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n        if (this.opposite) {\r\n            tickLength *= (tick.inside ? 1 : -1);\r\n        }\r\n        else {\r\n            tickLength *= (tick.inside ? -1 : 1);\r\n        }\r\n        tick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: tickLength });\r\n        this.positionItem(tick, point);\r\n        this.toggleVisibility(tick, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions the axis line element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererX.prototype.updateAxisLine = function () {\r\n        this.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.axisLength, y: 0 });\r\n    };\r\n    /**\r\n     * Updates and positions the base grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererX.prototype.updateBaseGridElement = function () {\r\n        _super.prototype.updateBaseGridElement.call(this);\r\n        var axis = this.axis;\r\n        var h = this.getHeight();\r\n        var w = this.axisLength;\r\n        var baseGrid = this.baseGrid;\r\n        var x = axis.basePoint.x;\r\n        if (x < -0.2 || x > w + 0.2) {\r\n            baseGrid.hide(0);\r\n        }\r\n        else {\r\n            var y = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).y;\r\n            baseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n            baseGrid.moveTo({ x: x, y: y });\r\n            baseGrid.show(0);\r\n        }\r\n    };\r\n    /**\r\n     * Creates visual elements for and axis break.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axisBreak Axis break\r\n     */\r\n    AxisRendererX.prototype.createBreakSprites = function (axisBreak) {\r\n        axisBreak.startLine = new WavedLine();\r\n        axisBreak.endLine = new WavedLine();\r\n        var wavedRectangle = new WavedRectangle();\r\n        wavedRectangle.setWavedSides(false, true, false, true);\r\n        axisBreak.fillShape = wavedRectangle;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    AxisRendererX.prototype.toAxisPosition = function (value) {\r\n        var inversedPosition = value;\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var relativePositionSprite = axis.relativePositionSprite;\r\n            var x = axis.pixelX;\r\n            if (relativePositionSprite) {\r\n                x = $utils.spritePointToSprite({ x: this.pixelX, y: 0 }, this.parent, relativePositionSprite).x;\r\n            }\r\n            else {\r\n                relativePositionSprite = axis.parent;\r\n            }\r\n            if (relativePositionSprite) {\r\n                var relativeX = x / relativePositionSprite.innerWidth;\r\n                var relativeWidth = axis.axisLength / relativePositionSprite.innerWidth;\r\n                return (inversedPosition - relativeX) / relativeWidth;\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Updates and positions axis bullets.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param bullet       AxisBullet element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererX.prototype.updateBullet = function (bullet, position, endPosition) {\r\n        var location = 0.5;\r\n        if (bullet instanceof AxisBullet) {\r\n            location = bullet.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        var point = this.positionToPoint(position);\r\n        point.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n        this.positionItem(bullet, point);\r\n        this.toggleVisibility(bullet, position, 0, 1);\r\n    };\r\n    return AxisRendererX;\r\n}(AxisRenderer));\r\nexport { AxisRendererX };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX\"] = AxisRendererX;\r\n/**\r\n * Add default responsive rules\r\n */\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.heightXS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof AxisRendererX) {\r\n            var state = target.states.create(stateId);\r\n            state.properties.inside = true;\r\n            state.properties.maxLabelPosition = 0.9;\r\n            state.properties.minLabelPosition = 0.1;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.heightXXS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof AxisRendererX) {\r\n            var state = target.states.create(stateId);\r\n            state.properties.disabled = true;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}