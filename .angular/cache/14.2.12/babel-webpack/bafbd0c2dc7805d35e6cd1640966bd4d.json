{"ast":null,"code":"/**\r\n * Value Axis module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Axis, AxisDataItem } from \"./Axis\";\nimport { AxisRendererY } from \"./AxisRendererY\";\nimport { MultiDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[ValueAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar ValueAxisDataItem =\n/** @class */\nfunction (_super) {\n  __extends(ValueAxisDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ValueAxisDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ValueAxisDataItem\";\n    _this.values.value = {};\n    _this.values.endValue = {};\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(ValueAxisDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values[\"value\"].value;\n    },\n\n    /**\r\n     * A data point's numeric value.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxisDataItem.prototype, \"endValue\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values[\"endValue\"].value;\n    },\n\n    /**\r\n     * Data point's numeric end value.\r\n     *\r\n     * @param value  End value\r\n     */\n    set: function (value) {\n      this.setValue(\"endValue\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ValueAxisDataItem;\n}(AxisDataItem);\n\nexport { ValueAxisDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to create a value axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JSON\r\n * \"yAxes\": [{\r\n *   \"type\": \"ValueAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Monthly Sales\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IValueAxisEvents} for a list of available Events\r\n * @see {@link IValueAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar ValueAxis =\n/** @class */\nfunction (_super) {\n  __extends(ValueAxis, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ValueAxis() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * [_stepDecimalPlaces description]\r\n     *\r\n     * @todo Description\r\n     */\n\n\n    _this._stepDecimalPlaces = 0;\n    _this._prevStepDecimalPlaces = 0;\n    _this._adjustLabelPrecision = true;\n    /**\r\n     * Base value for the axis.\r\n     */\n\n    _this._baseValue = 0;\n    /**\r\n     * Adjusted start in case we have breaks.\r\n     *\r\n     * @todo Description\r\n     */\n\n    _this._adjustedStart = 0;\n    /**\r\n     * Adjusted end in case we have breaks.\r\n     *\r\n     * @todo Description\r\n     */\n\n    _this._adjustedEnd = 1;\n    _this._extremesChanged = false;\n    _this._deltaMinMax = 1;\n    _this._dsc = false;\n    /**\r\n     * As calculating totals is expensive operation and not often needed, we\r\n     * don't do it by default.\r\n     *\r\n     * In case you use `totalPercent` or `total` in your charts, this must be set\r\n     * to `true`.\r\n     *\r\n     * @default false\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#100_stacks} For using `calculateTotals` for 100% stacked series.\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/#Placeholders_for_numeric_values} For using `calculateTotals` in labels.\r\n     */\n\n    _this.calculateTotals = false;\n    _this.className = \"ValueAxis\"; // Set field name\n\n    _this.axisFieldName = \"value\"; // Set defaults\n\n    _this.setPropertyValue(\"maxZoomFactor\", 1000);\n\n    _this.setPropertyValue(\"extraMin\", 0);\n\n    _this.setPropertyValue(\"extraMax\", 0);\n\n    _this.setPropertyValue(\"strictMinMax\", false);\n\n    _this.setPropertyValue(\"maxPrecision\", Number.MAX_VALUE);\n\n    _this.setPropertyValue(\"adjustLabelPrecision\", true);\n\n    _this.setPropertyValue(\"extraTooltipPrecision\", 0);\n\n    _this.keepSelection = false;\n    _this.includeRangesInMinMax = false; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Holds reference to a function that accepts a DataItem as parameter.\r\n   *\r\n   * It can either return a fill opacity for a fill, or manipulate data item\r\n   * directly, to create various highlighting scenarios.\r\n   */\n\n\n  ValueAxis.prototype.fillRule = function (dataItem) {\n    var value = dataItem.value;\n    var axis = dataItem.component;\n\n    if (!dataItem.axisFill.disabled) {\n      // rounding in left to solve floating point number\n      if ($math.round(value / axis.step / 2, 5) == Math.round(value / axis.step / 2)) {\n        dataItem.axisFill.__disabled = true;\n      } else {\n        dataItem.axisFill.__disabled = false;\n      }\n    }\n  };\n  /**\r\n   * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  ValueAxis.prototype.createDataItem = function () {\n    return new ValueAxisDataItem();\n  };\n  /**\r\n   * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n   *\r\n   * @return Axis break\r\n   */\n\n\n  ValueAxis.prototype.createAxisBreak = function () {\n    return new ValueAxisBreak();\n  };\n  /**\r\n   * [dataChangeUpdate description]\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  ValueAxis.prototype.dataChangeUpdate = function () {\n    this.clearCache();\n\n    if (!this.keepSelection) {\n      if (this._start != 0 || this._end != 1) {\n        this._start = 0;\n        this._end = 1;\n        this.dispatchImmediately(\"startendchanged\");\n      }\n    } else {\n      if (this._start != 0) {\n        this.dispatchImmediately(\"startchanged\");\n      }\n\n      if (this._end != 1) {\n        this.dispatchImmediately(\"endchanged\");\n      }\n\n      if (this._start != 0 || this._end != 1) {\n        this.dispatchImmediately(\"startendchanged\");\n      }\n    }\n\n    this._maxZoomed = this._maxDefined;\n    this._minZoomed = this._minDefined;\n    this._maxAdjusted = this._maxDefined;\n    this._minAdjusted = this._minDefined;\n  };\n  /**\r\n   * Processes data items of the related Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ValueAxis.prototype.processSeriesDataItems = function () {\n    // @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu\n    if (this.calculateTotals) {\n      var series = this.series.getIndex(0);\n      var startIndex = series.startIndex;\n\n      if (series.dataItems.length > 0) {\n        if (startIndex > 0) {\n          startIndex--;\n        }\n\n        var endIndex = series.endIndex;\n\n        if (endIndex < series.dataItems.length) {\n          endIndex++;\n        }\n\n        var _loop_1 = function (i) {\n          // This has to be `var` in order to avoid garbage collection\n          var total = {};\n          var sum = {};\n          this_1.series.each(function (series) {\n            if (!series.excludeFromTotal) {\n              var dataItem_1 = series.dataItems.getIndex(i);\n\n              if (dataItem_1) {\n                $object.each(dataItem_1.values, function (key) {\n                  var value = dataItem_1.values[key].workingValue; // can not use getWorkingValue here!\n\n                  if ($type.isNumber(value)) {\n                    if (!$type.isNumber(total[key])) {\n                      total[key] = Math.abs(value);\n                    } else {\n                      total[key] += Math.abs(value);\n                    }\n\n                    if (!$type.isNumber(sum[key])) {\n                      sum[key] = value;\n                    } else {\n                      sum[key] += value;\n                    }\n                  }\n                });\n              }\n            }\n          });\n          this_1.series.each(function (series) {\n            if (!series.excludeFromTotal) {\n              var dataItem_2 = series.dataItems.getIndex(i);\n\n              if (dataItem_2) {\n                $object.each(dataItem_2.values, function (key) {\n                  var value = dataItem_2.values[key].workingValue; // can not use getWorkingValue here!\n\n                  if ($type.isNumber(value)) {\n                    dataItem_2.setCalculatedValue(key, total[key], \"total\");\n                    dataItem_2.setCalculatedValue(key, 100 * value / total[key], \"totalPercent\");\n                    dataItem_2.setCalculatedValue(key, sum[key], \"sum\");\n                  }\n                });\n              }\n            }\n          });\n        };\n\n        var this_1 = this; // This has to be `var` in order to avoid garbage collection\n\n        for (var i = startIndex; i < endIndex; ++i) {\n          _loop_1(i);\n        }\n      }\n    }\n  };\n  /**\r\n   * Validates the whole axis. Causes it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   */\n\n\n  ValueAxis.prototype.validate = function () {\n    if (this.axisLength <= 0) {\n      return;\n    }\n\n    _super.prototype.validate.call(this);\n\n    this.getMinMax();\n\n    if (!$type.isNumber(this._minAdjusted)) {\n      this.dataItems.each(function (dataItem) {\n        dataItem.value = null;\n      });\n    }\n\n    this.fixAxisBreaks();\n    this.calculateZoom();\n    this.validateAxisElements();\n    this.validateAxisRanges();\n    this.validateBreaks();\n    this.hideUnusedDataItems();\n    this.renderer.invalidateLayout(); // hide too close\n    //this.hideTooCloseDataItems();\n  };\n  /**\r\n   * Calculates all positions, related to axis as per current zoom.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ValueAxis.prototype.calculateZoom = function () {\n    if ($type.isNumber(this.min) && $type.isNumber(this.max)) {\n      var min = this.positionToValue(this.start);\n      var max = this.positionToValue(this.end);\n      var differece = this.adjustDifference(min, max);\n      var minMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\n      var stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\n      this._stepDecimalPlaces = stepDecimalPlaces;\n      min = $math.round(min, stepDecimalPlaces);\n      max = $math.round(max, stepDecimalPlaces);\n      minMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\n      var step = minMaxStep.step;\n\n      if (this.syncWithAxis) {\n        var calculated = this.getCache(min + \"-\" + max);\n\n        if ($type.isNumber(calculated)) {\n          step = calculated;\n        }\n      } else {\n        min = minMaxStep.min;\n        max = minMaxStep.max;\n      }\n\n      if (this._minZoomed != min || this._maxZoomed != max || this._step != step || this._dsc) {\n        this._dsc = false;\n        this._minZoomed = min;\n        this._maxZoomed = max;\n        this._step = step;\n        this.dispatchImmediately(\"selectionextremeschanged\");\n      }\n    }\n  };\n\n  ValueAxis.prototype.fixSmallStep = function (step) {\n    if (1 + step == 1) {\n      step *= 2;\n      return this.fixSmallStep(step);\n    }\n\n    return step;\n  };\n  /**\r\n   * Validates Axis elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  ValueAxis.prototype.validateAxisElements = function () {\n    var _this = this;\n\n    if ($type.isNumber(this.max) && $type.isNumber(this.min)) {\n      // first regular items\n      var value_1 = this.minZoomed - this._step * 2;\n\n      if (!this.logarithmic) {\n        value_1 = Math.floor(value_1 / this._step) * this._step;\n      } else {\n        var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\n\n        if (differencePower > 1) {\n          value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E);\n        } else {\n          value_1 = Math.floor(this.minZoomed / this._step) * this._step;\n\n          if (value_1 == 0) {\n            value_1 = this.minZoomed;\n          }\n        }\n      }\n\n      var maxZoomed = this._maxZoomed + this._step;\n      this.resetIterators();\n      var dataItemsIterator_1 = this._dataItemsIterator;\n\n      if (this._step == 0) {\n        return;\n      }\n\n      this._step = this.fixSmallStep(this._step);\n      var i = 0;\n      var precisionChanged = this._prevStepDecimalPlaces != this._stepDecimalPlaces;\n      this._prevStepDecimalPlaces = this._stepDecimalPlaces;\n\n      while (value_1 <= maxZoomed) {\n        var axisBreak = this.isInBreak(value_1);\n\n        if (!axisBreak) {\n          var dataItem = dataItemsIterator_1.find(function (x) {\n            return x.value === value_1;\n          });\n\n          if (dataItem.__disabled) {\n            dataItem.__disabled = false;\n          } //this.processDataItem(dataItem);\n\n\n          this.appendDataItem(dataItem);\n          dataItem.axisBreak = undefined;\n\n          if (dataItem.value != value_1 || precisionChanged) {\n            dataItem.value = value_1;\n            dataItem.text = this.formatLabel(value_1);\n\n            if (dataItem.label && dataItem.label.invalid) {\n              dataItem.label.validate();\n            }\n\n            if (dataItem.value >= this.min && dataItem.value <= this.max) {\n              if (dataItem.label) {\n                if (this.axisLetter == \"Y\" && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth || this.axisLetter == \"X\" && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight) {\n                  this.ghostLabel.text = dataItem.label.currentText;\n                  this.ghostLabel.validate();\n                }\n              }\n            }\n          }\n\n          this.validateDataElement(dataItem);\n        }\n\n        i++;\n        var oldValue = value_1;\n\n        if (!this.logarithmic) {\n          value_1 += this._step;\n        } else {\n          var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\n\n          if (differencePower > 1) {\n            value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);\n          } else {\n            value_1 += this._step;\n          }\n        }\n\n        var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(this._step)) * Math.LOG10E));\n\n        if (stepPower < 1) {\n          // exponent is less then 1 too. Count decimals of exponent\n          var decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\n          decCount = Math.min(13, decCount); // round value to avoid floating point issues\n\n          value_1 = $math.round(value_1, decCount); // ceil causes problems: https://codepen.io/team/amcharts/pen/XWMjZwy?editors=1010\n\n          if (oldValue == value_1) {\n            value_1 = maxZoomed;\n            break;\n          }\n        }\n      }\n\n      var axisBreaks = this._axisBreaks;\n\n      if (axisBreaks) {\n        // breaks later\n        var renderer_1 = this.renderer;\n        $iter.each(axisBreaks.iterator(), function (axisBreak) {\n          if (axisBreak.breakSize > 0) {\n            // only add grid if gap is bigger then minGridDistance\n            if ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer_1.minGridDistance) {\n              var breakValue_1 = axisBreak.adjustedMin;\n\n              while (breakValue_1 <= axisBreak.adjustedMax) {\n                if (breakValue_1 >= axisBreak.adjustedStartValue && breakValue_1 <= axisBreak.adjustedEndValue) {\n                  var dataItem = dataItemsIterator_1.find(function (x) {\n                    return x.value === breakValue_1;\n                  });\n\n                  if (dataItem.__disabled) {\n                    dataItem.__disabled = false;\n                  } //this.processDataItem(dataItem);\n\n\n                  _this.appendDataItem(dataItem);\n\n                  dataItem.axisBreak = axisBreak;\n\n                  if (dataItem.value != breakValue_1) {\n                    dataItem.value = breakValue_1;\n                    dataItem.text = _this.formatLabel(breakValue_1);\n\n                    if (dataItem.label && dataItem.label.invalid) {\n                      dataItem.label.validate();\n                    }\n                  }\n\n                  _this.validateDataElement(dataItem);\n                }\n\n                breakValue_1 += axisBreak.adjustedStep;\n              }\n            }\n          }\n        });\n      }\n    }\n  };\n  /**\r\n   * Validates axis data item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param dataItem  Data item\r\n   */\n\n\n  ValueAxis.prototype.validateDataElement = function (dataItem) {\n    _super.prototype.validateDataElement.call(this, dataItem); //dataItem.__disabled = false;\n\n\n    dataItem.itemIndex = this._axisItemCount;\n    this._axisItemCount++;\n    var renderer = this.renderer;\n    var value = dataItem.value;\n    var endValue = dataItem.endValue;\n    var position = this.valueToPosition(value);\n    dataItem.position = position;\n    var endPosition = position;\n    var fillEndPosition = this.valueToPosition(value + this._step);\n\n    if ($type.isNumber(endValue)) {\n      endPosition = this.valueToPosition(endValue);\n      fillEndPosition = endPosition;\n    } // this point is needed to calculate distance to satisfy minGridDistance\n\n\n    dataItem.point = renderer.positionToPoint(position);\n    var tick = dataItem.tick;\n\n    if (tick && !tick.disabled) {\n      renderer.updateTickElement(tick, position, endPosition);\n    }\n\n    var grid = dataItem.grid;\n\n    if (grid && !grid.disabled) {\n      renderer.updateGridElement(grid, position, endPosition);\n    }\n\n    var label = dataItem.label;\n\n    if (label && !label.disabled) {\n      renderer.updateLabelElement(label, position, endPosition);\n    }\n\n    var fill = dataItem.axisFill;\n\n    if (fill && !fill.disabled) {\n      renderer.updateFillElement(fill, position, fillEndPosition);\n\n      if (!dataItem.isRange) {\n        this.fillRule(dataItem);\n      }\n    }\n\n    if (dataItem.bullet) {\n      renderer.updateBullet(dataItem.bullet, position, endPosition);\n    }\n\n    var mask = dataItem.mask;\n\n    if (mask) {\n      renderer.updateFillElement(mask, position, fillEndPosition);\n    }\n  };\n  /**\r\n   * Formats the value according to axis' own [[NumberFormatter]].\r\n   *\r\n   * @param value  Source value\r\n   * @return Formatted value\r\n   */\n\n\n  ValueAxis.prototype.formatLabel = function (value) {\n    if (this.adjustLabelPrecision && value != 0) {\n      return this.numberFormatter.format(value, undefined, this._stepDecimalPlaces);\n    } else {\n      return this.numberFormatter.format(value);\n    }\n  };\n\n  Object.defineProperty(ValueAxis.prototype, \"basePoint\", {\n    /**\r\n     * Coordinates of the actual axis start.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Base point\r\n     */\n    get: function () {\n      var baseValue = this.baseValue;\n      var position = this.valueToPosition(baseValue);\n      var basePoint = this.renderer.positionToPoint(position);\n      return basePoint;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"baseValue\", {\n    /**\r\n     * @return base value\r\n     */\n    get: function () {\n      var baseValue = this._baseValue;\n\n      if (this.logarithmic) {\n        baseValue = this.min;\n      }\n\n      if (!this._adapterO) {\n        return baseValue;\n      } else {\n        return this._adapterO.apply(\"baseValue\", baseValue);\n      }\n    },\n\n    /**\r\n     * A base value.\r\n     *\r\n     * This is a threshold value that will divide \"positive\" and \"negative\"\r\n     * value ranges.\r\n     *\r\n     * Other scale-related functionality also depend on base value. E.g. stacks,\r\n     * value-dependent coloring, etc.\r\n     *\r\n     * @param value Base value\r\n     */\n    set: function (value) {\n      this._baseValue = value;\n      this.invalidateLayout();\n      this.invalidateSeries();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts a numeric value to relative position on axis\r\n   *\r\n   * An alias to `valueToPosition()`.\r\n   *\r\n   * @param value  Value\r\n   * @return Position\r\n   */\n\n  ValueAxis.prototype.anyToPosition = function (value) {\n    return this.valueToPosition(value);\n  };\n  /**\r\n   * Converts a numeric value to orientation point (x, y, angle) on axis\r\n   *\r\n   * @param value  Value\r\n   * @return Orientation point\r\n   */\n\n\n  ValueAxis.prototype.valueToPoint = function (value) {\n    var position = this.valueToPosition(value);\n    var point = this.renderer.positionToPoint(position);\n    var angle = this.renderer.positionToAngle(position);\n    return {\n      x: point.x,\n      y: point.y,\n      angle: angle\n    };\n  };\n  /**\r\n   * Converts a numeric value to orientation (x, y, angle) point on axis\r\n   *\r\n   * @param value  Value\r\n   * @return Orientation point\r\n   */\n\n\n  ValueAxis.prototype.anyToPoint = function (value) {\n    return this.valueToPoint(value);\n  };\n  /**\r\n   * Converts a numeric value to relative position on axis.\r\n   *\r\n   * @param value  Value\r\n   * @return relative position\r\n   */\n\n\n  ValueAxis.prototype.valueToPosition = function (value) {\n    if ($type.isNumber(value)) {\n      // todo: think if possible to take previous value and do not go through all previous breaks\n      var min_1 = this.min;\n      var max_1 = this.max;\n\n      if ($type.isNumber(min_1) && $type.isNumber(max_1)) {\n        var difference = this._difference;\n        var axisBreaks = this._axisBreaks;\n\n        if (axisBreaks && axisBreaks.length > 0) {\n          $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\n            var startValue = axisBreak.adjustedStartValue;\n            var endValue = axisBreak.adjustedEndValue;\n\n            if ($type.isNumber(startValue) && $type.isNumber(endValue)) {\n              if (value < startValue) {\n                return false;\n              }\n\n              if ($math.intersect({\n                start: startValue,\n                end: endValue\n              }, {\n                start: min_1,\n                end: max_1\n              })) {\n                // todo: check this once and set some flag in axisBreak\n                startValue = Math.max(startValue, min_1);\n                endValue = Math.min(endValue, max_1);\n                var breakSize = axisBreak.breakSize; // value to the right of break end\n\n                if (value > endValue) {\n                  min_1 += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?\n                } // value to the left of break start\n                else if (value < startValue) {} // value within break\n                else {\n                  value = startValue + (value - startValue) * breakSize;\n                }\n              }\n            }\n\n            return true;\n          });\n        }\n\n        var position = void 0;\n\n        if (!this.logarithmic) {\n          position = (value - min_1) / difference;\n        } else {\n          var treatZeroAs = this.treatZeroAs;\n\n          if ($type.isNumber(treatZeroAs)) {\n            if (value <= treatZeroAs) {\n              value = treatZeroAs;\n            }\n          }\n\n          position = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / (Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E);\n        } //position = $math.round(position, 10);\n\n\n        return position;\n      }\n    }\n\n    return 0;\n  };\n  /**\r\n   * When fontSize of fontFamily changes we need to hard-invalidate all Labels of this container to position them properly.\r\n   */\n\n\n  ValueAxis.prototype.invalidateLabels = function () {\n    _super.prototype.invalidateLabels.call(this);\n\n    if (this.dataItems) {\n      this.dataItems.each(function (dataItem) {\n        dataItem.value = undefined;\n      });\n      this.invalidate();\n    }\n  };\n  /**\r\n   * Converts an relative position to a corresponding value within\r\n   * axis' scale.\r\n   *\r\n   * @param position  Position (px)\r\n   * @return Value\r\n   */\n\n\n  ValueAxis.prototype.positionToValue = function (position) {\n    var min = this.min;\n    var max = this.max;\n\n    if ($type.isNumber(min) && $type.isNumber(max)) {\n      var difference_1 = max - min; //no need to adjust!\n\n      var value_2 = null;\n      var axisBreaks = this._axisBreaks;\n\n      if (axisBreaks) {\n        // in case we have some axis breaks\n        if (axisBreaks.length > 0) {\n          $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\n            var breakStartPosition = axisBreak.startPosition;\n            var breakEndPosition = axisBreak.endPosition;\n            var breakStartValue = axisBreak.adjustedStartValue;\n            var breakEndValue = axisBreak.adjustedEndValue;\n\n            if ($type.isNumber(breakStartValue) && $type.isNumber(breakEndValue)) {\n              if (breakStartValue > max) {\n                return false;\n              }\n\n              if ($math.intersect({\n                start: breakStartValue,\n                end: breakEndValue\n              }, {\n                start: min,\n                end: max\n              })) {\n                breakStartValue = $math.max(breakStartValue, min);\n                breakEndValue = $math.min(breakEndValue, max);\n                var breakSize = axisBreak.breakSize;\n                difference_1 -= (breakEndValue - breakStartValue) * (1 - breakSize); // position to the right of break end\n\n                if (position > breakEndPosition) {\n                  min += (breakEndValue - breakStartValue) * (1 - breakSize);\n                } // position to the left of break start\n                else if (position < breakStartPosition) {} // value within break\n                else {\n                  var breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\n                  value_2 = breakStartValue + breakPosition * (breakEndValue - breakStartValue);\n                  return false;\n                }\n              }\n\n              return true;\n            }\n          });\n        }\n      }\n\n      if (!$type.isNumber(value_2)) {\n        if (this.logarithmic) {\n          value_2 = Math.pow(Math.E, (position * (Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) + Math.log(this.min) * Math.LOG10E) / Math.LOG10E);\n        } else {\n          value_2 = position * difference_1 + min;\n        }\n      }\n\n      return value_2;\n    } //}\n\n  };\n  /**\r\n   * Converts an X coordinate to a relative value in axis' scale.\r\n   *\r\n   * @param x  X (px)\r\n   * @return Value\r\n   */\n\n\n  ValueAxis.prototype.xToValue = function (x) {\n    return this.positionToValue(this.pointToPosition({\n      x: x,\n      y: 0\n    }));\n  };\n  /**\r\n   * Converts an Y coordinate to a relative value in axis' scale.\r\n   *\r\n   * @param y  Y (px)\r\n   * @return Value\r\n   */\n\n\n  ValueAxis.prototype.yToValue = function (y) {\n    return this.positionToValue(this.pointToPosition({\n      x: 0,\n      y: y\n    }));\n  };\n  /**\r\n   * Converts pixel coordinates to a relative position. (0-1)\r\n   *\r\n   * @param point  Coorinates (px)\r\n   * @return Position (0-1)\r\n   */\n\n\n  ValueAxis.prototype.pointToPosition = function (point) {\n    if (this.renderer instanceof AxisRendererY) {\n      return 1 - this.renderer.pointToPosition(point);\n    } else {\n      return this.renderer.pointToPosition(point);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  ValueAxis.prototype.animateMinMax = function (min, max) {\n    return this.animate([{\n      property: \"_minAdjusted\",\n      from: this._minAdjusted,\n      to: min\n    }, {\n      property: \"_maxAdjusted\",\n      from: this._maxAdjusted,\n      to: max\n    }], this.rangeChangeDuration, this.rangeChangeEasing);\n  };\n  /**\r\n   * Calculates smallest and biggest value for the axis scale.\r\n   * @ignore\r\n   * @todo Description (review)\r\n   */\n\n\n  ValueAxis.prototype.getMinMax = function () {\n    var _this = this;\n\n    this.updateGridCount();\n    var min = Number.POSITIVE_INFINITY;\n    var max = Number.NEGATIVE_INFINITY; // only if min and max are not set from outside, we go through min and max influencers\n\n    if (!$type.isNumber(this._minDefined) || !$type.isNumber(this._maxDefined)) {\n      this.series.each(function (series) {\n        if (!series.ignoreMinMax) {\n          // check min\n          var seriesMin = series.min(_this);\n\n          if ($type.isNumber(seriesMin) && seriesMin < min) {\n            min = seriesMin;\n          } // check max\n\n\n          var seriesMax = series.max(_this);\n\n          if ($type.isNumber(seriesMax) && seriesMax > max) {\n            max = seriesMax;\n          }\n        }\n      });\n\n      if (this.includeRangesInMinMax) {\n        this.axisRanges.each(function (range) {\n          if (!range.ignoreMinMax) {\n            var minValue = $math.min(range.value, range.endValue);\n            var maxValue = $math.max(range.value, range.endValue);\n\n            if (minValue < min || !$type.isNumber(min)) {\n              min = minValue;\n            }\n\n            if (maxValue > max || !$type.isNumber(max)) {\n              max = maxValue;\n            }\n          }\n        });\n      }\n    }\n\n    if (this.logarithmic) {\n      var treatZeroAs = this.treatZeroAs;\n\n      if ($type.isNumber(treatZeroAs)) {\n        if (min <= 0) {\n          min = treatZeroAs;\n        }\n      }\n\n      if (min <= 0) {\n        this.raiseCriticalError(new Error(\"Logarithmic value axis can not have values <= 0.\"), true);\n      }\n    }\n\n    if (min == 0 && max == 0) {\n      max = 0.9;\n      min = -0.9;\n    } // if defined from outside\n\n\n    if ($type.isNumber(this._minDefined)) {\n      min = this._minDefined;\n    }\n\n    if ($type.isNumber(this._maxDefined)) {\n      max = this._maxDefined;\n    }\n\n    if (this._adapterO) {\n      min = this._adapterO.apply(\"min\", min);\n    }\n\n    if (this._adapterO) {\n      max = this._adapterO.apply(\"max\", max);\n    }\n\n    if (!$type.isNumber(min) || !$type.isNumber(max)) {\n      return;\n    }\n\n    this._minReal = min;\n    this._maxReal = max;\n\n    if (min == Number.POSITIVE_INFINITY) {\n      min = undefined;\n    }\n\n    if (max == Number.NEGATIVE_INFINITY) {\n      max = undefined;\n    }\n\n    var dif = this.adjustDifference(min, max); // previously it was max-min, but not worked well\n\n    min = this.fixMin(min);\n    max = this.fixMax(max); // this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\n\n    if (max - min <= 1 / Math.pow(10, 15)) {\n      if (max - min != 0) {\n        this._deltaMinMax = (max - min) / 2;\n      } else {\n        // the number by which we need to raise 10 to get difference\n        var exponent = Math.log(Math.abs(max)) * Math.LOG10E; // here we find a number which is power of 10 and has the same count of numbers as difference has\n\n        var power = Math.pow(10, Math.floor(exponent)); // reduce this number by 10 times\n\n        power = power / 10;\n        this._deltaMinMax = power;\n      }\n\n      min -= this._deltaMinMax;\n      max += this._deltaMinMax;\n    }\n\n    min -= (max - min) * this.extraMin;\n    max += (max - min) * this.extraMax;\n    var strict = this.strictMinMax;\n\n    if ($type.isNumber(this._maxDefined)) {\n      strict = true;\n    }\n\n    var minMaxStep = this.adjustMinMax(min, max, dif, this._gridCount, strict);\n    min = minMaxStep.min;\n    max = minMaxStep.max;\n    dif = max - min; //new\n    // do it for the second time (importat!)\n\n    minMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);\n    min = minMaxStep.min;\n    max = minMaxStep.max; // return min max if strict\n\n    if (this.strictMinMax) {\n      if ($type.isNumber(this._minDefined)) {\n        min = this._minDefined;\n      } else {\n        min = this._minReal;\n      }\n\n      if ($type.isNumber(this._maxDefined)) {\n        max = this._maxDefined;\n      } else {\n        max = this._maxReal;\n      }\n\n      if (max - min <= 0.00000001) {\n        min -= this._deltaMinMax;\n        max += this._deltaMinMax;\n      }\n\n      min -= (max - min) * this.extraMin;\n      max += (max - min) * this.extraMax;\n    }\n\n    if (this._adapterO) {\n      min = this._adapterO.apply(\"min\", min);\n    }\n\n    if (this._adapterO) {\n      max = this._adapterO.apply(\"max\", max);\n    }\n\n    this._step = minMaxStep.step;\n\n    if (!$type.isNumber(min) && !$type.isNumber(max)) {\n      this.start = 0;\n      this.end = 1;\n      this.renderer.labels.each(function (label) {\n        label.dataItem.text = \"\";\n      });\n    } // checking isNumber is good when all series are hidden\n\n\n    if ((this._minAdjusted != min || this._maxAdjusted != max) && $type.isNumber(min) && $type.isNumber(max)) {\n      var animation = this._minMaxAnimation;\n\n      if (this._extremesChanged && $type.isNumber(this._minAdjusted) && $type.isNumber(this._maxAdjusted) && this.inited) {\n        if (animation && !animation.isFinished() && this._finalMax == max && this._finalMin == min) {\n          return;\n        } else {\n          this._finalMin = min;\n          this._finalMax = max;\n          animation = this.animateMinMax(min, max);\n\n          if (animation && !animation.isFinished()) {\n            animation.events.on(\"animationprogress\", this.validateDataItems, this);\n            animation.events.on(\"animationended\", function () {\n              //this.validateDataItems();\n              _this.series.each(function (series) {\n                series.validate();\n              });\n\n              _this.validateDataItems();\n\n              _this.handleSelectionExtremesChange();\n            });\n            this._minMaxAnimation = animation;\n          } else {\n            this.series.each(function (series) {\n              series.invalidate();\n            });\n          }\n\n          this.validateDataItems();\n          this.dispatchImmediately(\"extremeschanged\");\n          this.handleSelectionExtremesChange();\n        }\n      } else {\n        if (animation && !animation.isFinished() && this._finalMax == max && this._finalMin == min) {\n          return;\n        } else {\n          this._minAdjusted = min;\n          this._maxAdjusted = max;\n          this._finalMin = min;\n          this._finalMax = max;\n          this.invalidateDataItems();\n          this.dispatchImmediately(\"extremeschanged\");\n\n          this._saveMinMax(min, max);\n        }\n      }\n    }\n\n    this._extremesChanged = false;\n    this._difference = this.adjustDifference(min, max);\n  };\n  /**\r\n   * Adjusts the minimum value.\r\n   *\r\n   * This is a placeholder method for extending classes to override.\r\n   *\r\n   * For numeric values this does nothing, however for more complex types, like\r\n   * dates, it may be necessary to adjust.\r\n   *\r\n   * @param value  Value\r\n   * @return Adjusted value\r\n   */\n\n\n  ValueAxis.prototype.fixMin = function (value) {\n    return value;\n  };\n  /**\r\n   * Adjusts the maximum value.\r\n   *\r\n   * This is a placeholder method for extending classes to override.\r\n   *\r\n   * For numeric values this does nothing, however for more complex types, like\r\n   * dates, it may be necessary to adjust.\r\n   *\r\n   * @param value  Value\r\n   * @return Adjusted value\r\n   */\n\n\n  ValueAxis.prototype.fixMax = function (value) {\n    return value;\n  };\n  /**\r\n   * Adjusts actual min and max scale values so that the axis starts and ends\r\n   * at \"nice\" values, unless `strictMinMax` is set.\r\n   *\r\n   * The `difference` can be something else than `max - min`, because of the\r\n   * axis breaks.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param min        [description]\r\n   * @param max        [description]\r\n   * @param difference [description]\r\n   * @param gridCount  [description]\r\n   * @param strictMode [description]\r\n   * @return [description]\r\n   */\n\n\n  ValueAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\n    // will fail if 0\n    if (gridCount <= 1) {\n      gridCount = 1;\n    }\n\n    gridCount = Math.round(gridCount);\n    var initialMin = min;\n    var initialMax = max; // in case min and max is the same, use max\n\n    if (difference === 0) {\n      difference = Math.abs(max);\n    } // the number by which we need to raise 10 to get difference\n\n\n    var exponent = Math.log(Math.abs(difference)) * Math.LOG10E; // here we find a number which is power of 10 and has the same count of numbers as difference has\n\n    var power = Math.pow(10, Math.floor(exponent)); // reduce this number by 10 times\n\n    power = power / 10;\n    var extra = power;\n\n    if (strictMode) {\n      extra = 0;\n    }\n\n    if (!this.logarithmic) {\n      // round down min\n      if (strictMode) {\n        min = Math.floor(min / power) * power; // round up max\n\n        max = Math.ceil(max / power) * power;\n      } else {\n        min = Math.ceil(min / power) * power - extra; // round up max\n\n        max = Math.floor(max / power) * power + extra;\n      } // don't let min go below 0 if real min is >= 0\n\n\n      if (min < 0 && initialMin >= 0) {\n        min = 0;\n      } // don't let max go above 0 if real max is <= 0\n\n\n      if (max > 0 && initialMax <= 0) {\n        max = 0;\n      }\n    } else {\n      if (min <= 0) {\n        //throw Error(\"Logarithmic value axis can not have values <= 0.\");\n        min = this.baseValue;\n      } // @todo: think of a better way or to restrict zooming when no series are selected\n\n\n      if (min == Infinity) {\n        min = 1;\n      }\n\n      if (max == -Infinity) {\n        max = 10;\n      }\n\n      if (this.strictMinMax) {\n        if (this._minDefined > 0) {\n          min = this._minDefined;\n        } else {\n          min = min;\n        }\n\n        if (this._maxDefined > 0) {\n          max = max;\n        }\n      } else {\n        min = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\n        max = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\n      }\n    } // repeat diff, exponent and power again with rounded values\n    //difference = this.adjustDifference(min, max);\n\n    /*\r\n              if(min > initialMin){\r\n                min = initialMin;\r\n            }\r\n              if(max < initialMax){\r\n                max = initialMax;\r\n            }\r\n    */\n\n\n    exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\n    power = Math.pow(10, Math.floor(exponent));\n    power = power / 10; // approximate difference between two grid lines\n\n    var step = Math.ceil(difference / gridCount / power) * power;\n    var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E)); // TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution\n    // the step should divide by  2, 5, and 10.\n\n    var stepDivisor = Math.ceil(step / stepPower); // number 0 - 10\n\n    if (stepDivisor > 5) {\n      stepDivisor = 10;\n    } else if (stepDivisor <= 5 && stepDivisor > 2) {\n      stepDivisor = 5;\n    } // now get real step\n\n\n    step = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\n\n    if (this.maxPrecision < Number.MAX_VALUE && step != $math.ceil(step, this.maxPrecision)) {\n      step = $math.ceil(step, this.maxPrecision);\n    }\n\n    var decCount = 0; // in case numbers are smaller than 1\n\n    if (stepPower < 1) {\n      // exponent is less then 1 too. Count decimals of exponent\n      decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1; // round step\n\n      step = $math.round(step, decCount);\n    }\n\n    if (!this.logarithmic) {\n      // final min and max\n      var minCount = Math.floor(min / step);\n      min = $math.round(step * minCount, decCount);\n      var maxCount = void 0;\n\n      if (!strictMode) {\n        maxCount = Math.ceil(max / step);\n      } else {\n        maxCount = Math.floor(max / step);\n      }\n\n      if (maxCount == minCount) {\n        maxCount++;\n      }\n\n      max = $math.round(step * maxCount, decCount);\n\n      if (max < initialMax) {\n        max = max + step;\n      }\n\n      if (min > initialMin) {\n        min = min - step;\n      }\n    }\n\n    return {\n      min: min,\n      max: max,\n      step: step\n    };\n  };\n\n  Object.defineProperty(ValueAxis.prototype, \"min\", {\n    /**\r\n     * @return Min value\r\n     */\n    get: function () {\n      var min = this._minAdjusted;\n\n      if (!$type.isNumber(min)) {\n        min = this._minDefined;\n      }\n\n      return min;\n    },\n\n    /**\r\n     * A minimum value for the axis scale.\r\n     *\r\n     * This value might be auto-adjusted by the Axis in order to accomodate the\r\n     * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n     *\r\n     * The above might be overridden by `strictMinMax` which will force exact\r\n     * user-defined min and max values to be used for scale.\r\n     *\r\n     * @param value  Min value\r\n     */\n    set: function (value) {\n      if (this._minDefined != value) {\n        this._minDefined = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"minDefined\", {\n    /**\r\n     * Min value as defined by user's code, not auto-calculated.\r\n     *\r\n     * @readonly\r\n     * @return Min value\r\n     */\n    get: function () {\n      return this._minDefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"maxDefined\", {\n    /**\r\n     * Max value as defined by user's code, not auto-calculated.\r\n     *\r\n     * @readonly\r\n     * @return Man value\r\n     */\n    get: function () {\n      return this._maxDefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"extraMin\", {\n    /**\r\n     * @return {number}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"extraMin\");\n    },\n\n    /**\r\n     * Allows relatively adjusting minimum value of the axis' scale.\r\n     *\r\n     * The value is relative to the actual range of values currently displayed\r\n     * on the axis.\r\n     *\r\n     * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n     * from 100 to 200, we will now have axis displaying from 50 to 200 because\r\n     * we asked to expand minimum value by 50% (0.5).\r\n     *\r\n     * NOTE: this setting is not compatible with `strictMinMax`.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"extraMin\", value)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"extraMax\", {\n    /**\r\n     * @return Min multiplier\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"extraMax\");\n    },\n\n    /**\r\n     * Allows relatively adjusting maximum value of the axis' scale.\r\n     *\r\n     * The value is relative to the actual range of values currently displayed\r\n     * on the axis.\r\n     *\r\n     * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n     * from 100 to 200, we will now have axis displaying from 100 to 250 because\r\n     * we asked to expand maximum value by 50% (0.5).\r\n     *\r\n     * NOTE: this setting is not compatible with `strictMinMax`.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"extraMax\", value)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"step\", {\n    /**\r\n     * Current calculated delta in values between two adjacent grid lines (step).\r\n     *\r\n     * This is a read-only value and cannot be used to set actual step.\r\n     *\r\n     * @readonly\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} For more information about modifying density of labels\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._step;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"max\", {\n    /**\r\n     * @return Max value\r\n     */\n    get: function () {\n      var max = this._maxAdjusted;\n\n      if (!$type.isNumber(max)) {\n        max = this._maxDefined;\n      }\n\n      return max;\n    },\n\n    /**\r\n     * A maximum value for the axis scale.\r\n     *\r\n     * This value might be auto-adjusted by the Axis in order to accomodate the\r\n     * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n     *\r\n     * The above might be overridden by `strictMinMax` which will force exact\r\n     * user-defined min and max values to be used for scale.\r\n     *\r\n     * @param value  Max value\r\n     */\n    set: function (value) {\n      if (this._maxDefined != value) {\n        this._maxDefined = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"adjustLabelPrecision\", {\n    /**\r\n     * @return Adjust precision\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"adjustLabelPrecision\");\n    },\n\n    /**\r\n     * By default the axis will adjust precision of all numbers to match number\r\n     * of decimals in all its labels, e.g.: `1.0`, `1.5`, `2.0`.\r\n     *\r\n     * To disable set `adjustLabelPrecision` to `false`, to use whatever other\r\n     * precision or number format settings are set.\r\n     *\r\n     * IMPORTANT: This setting will be ignored if your number format uses\r\n     * modifiers, e.g. `\"#a\"`.\r\n     *\r\n     * @default true\r\n     * @since 4.9.14\r\n     * @param  value  Adjust precision\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"adjustLabelPrecision\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Used for the Series to register itself as the user of this Axis.\r\n   *\r\n   * This will also decorate both the Series and Axis with event handlers, used\r\n   * to redraw on Axis position/zoom change.\r\n   *\r\n   * A disposer for those events is returned, so that they can be disposed\r\n   * together with Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param series  Series\r\n   * @return Disposer for events\r\n   */\n\n  ValueAxis.prototype.registerSeries = function (series) {\n    return new MultiDisposer([_super.prototype.registerSeries.call(this, series), series.events.on(\"extremeschanged\", this.handleExtremesChange, this, false), series.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false), this.events.on(\"extremeschanged\", series.invalidate, series, false)]);\n  };\n  /**\r\n   * Perform tasks after Axis zoom.\r\n   */\n\n\n  ValueAxis.prototype.handleSelectionExtremesChange = function () {\n    var _this = this;\n\n    var selectionMin;\n    var selectionMax;\n    var allHidden = true;\n    $iter.each(this.series.iterator(), function (series) {\n      if (!series.ignoreMinMax && !series.isHidden && !series.outOfRange) {\n        if (series.visible && !series.isHiding) {\n          allHidden = false;\n        }\n\n        var seriesSelectionMin = series.selectionMin(_this);\n        var seriesSelectionMax = series.selectionMax(_this);\n\n        if ($type.isNumber(seriesSelectionMin)) {\n          if (!$type.isNumber(selectionMin) || seriesSelectionMin < selectionMin) {\n            selectionMin = seriesSelectionMin;\n          }\n        } // check max\n\n\n        if ($type.isNumber(seriesSelectionMax)) {\n          if (!$type.isNumber(selectionMax) || seriesSelectionMax > selectionMax) {\n            selectionMax = seriesSelectionMax;\n          }\n        }\n      }\n    });\n\n    if (this.includeRangesInMinMax) {\n      this.axisRanges.each(function (range) {\n        if (!range.ignoreMinMax) {\n          var minValue = $math.min(range.value, range.endValue);\n          var maxValue = $math.max(range.value, range.endValue);\n\n          if (minValue < selectionMin) {\n            selectionMin = minValue;\n          }\n\n          if (maxValue > selectionMax) {\n            selectionMax = maxValue;\n          }\n        }\n      });\n    } // this is not good, as if date axis is initially zoomed, selection of y axis is reset to 0, 1 at the end of this method\n    //$iter.each(this.series.iterator(), (series) => {\n    //\tif (!series.appeared) {\n    //\t\tallHidden = true;\n    //\t}\n    //})\n\n\n    if ($type.isNumber(this._minDefined)) {\n      if (this.strictMinMax) {\n        selectionMin = this._minDefined;\n      } else {\n        selectionMin = this.min;\n      }\n    } else if (this.strictMinMax) {\n      selectionMin = this._minReal;\n    }\n\n    if ($type.isNumber(this._maxDefined)) {\n      if (this.strictMinMax) {\n        selectionMax = this._maxDefined;\n      } else {\n        selectionMax = this.max;\n      }\n    } else if (this.strictMinMax) {\n      selectionMax = this._maxReal;\n    }\n\n    if (selectionMin == selectionMax) {\n      selectionMin -= this._deltaMinMax;\n      selectionMax += this._deltaMinMax;\n      var minMaxStep2 = this.adjustMinMax(selectionMin, selectionMax, 0, this._gridCount, this.strictMinMax);\n      selectionMin = minMaxStep2.min;\n      selectionMax = minMaxStep2.max;\n    }\n\n    var dif = this.adjustDifference(selectionMin, selectionMax);\n    var minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);\n    selectionMin = minMaxStep.min;\n    selectionMax = minMaxStep.max;\n    selectionMin -= (selectionMax - selectionMin) * this.extraMin;\n    selectionMax += (selectionMax - selectionMin) * this.extraMax;\n    selectionMin = $math.fitToRange(selectionMin, this.min, this.max);\n    selectionMax = $math.fitToRange(selectionMax, this.min, this.max); // do it for the second time !important\n\n    dif = this.adjustDifference(selectionMin, selectionMax);\n    minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);\n    selectionMin = minMaxStep.min;\n    selectionMax = minMaxStep.max;\n\n    if (this.strictMinMax) {\n      selectionMin = $math.max(selectionMin, this._minDefined);\n      selectionMax = $math.min(selectionMax, this._maxDefined);\n    }\n\n    var step = minMaxStep.step;\n\n    if (this.syncWithAxis) {\n      minMaxStep = this.syncAxes(selectionMin, selectionMax, step);\n      selectionMin = minMaxStep.min;\n      selectionMax = minMaxStep.max;\n      this.invalidate();\n    }\n\n    step = minMaxStep.step; // needed because of grouping\n\n    this._difference = this.adjustDifference(this.min, this.max);\n    var start = this.valueToPosition(selectionMin);\n    var end = this.valueToPosition(selectionMax); // in case all series are hidden or hiding, full zoomout\n\n    if (allHidden && !this.syncWithAxis) {\n      start = 0;\n      end = 1;\n    }\n\n    var declination = 0;\n\n    if (this.syncWithAxis) {\n      declination = 5;\n      this.setCache(selectionMin + \"-\" + selectionMax, step);\n    } else {\n      if (this._step != step || this._minZoomed != selectionMin || this._maxZoomed != selectionMax) {\n        this._dsc = true;\n      }\n\n      this._step = step;\n      this._minZoomed = selectionMin;\n      this._maxZoomed = selectionMax;\n    }\n\n    if (!this.keepSelection) {\n      this.zoom({\n        start: start,\n        end: end\n      }, false, false, declination);\n    }\n  };\n\n  Object.defineProperty(ValueAxis.prototype, \"strictMinMax\", {\n    /**\r\n     * @return Use exact values?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strictMinMax\");\n    },\n\n    /**\r\n     * Indicates whether to blindly use exact `min` and `max` values set by user\r\n     * when generating Axis scale.\r\n     *\r\n     * If not set, the Axis might slightly adjust those values to accomodate a\r\n     * better looking grid.\r\n     *\r\n     * NOTE: if `min` and `max` are not set, setting `strictMinMax` to `true`\r\n     * will result in fixing the scale of the axis to actual lowest and highest\r\n     * values in the series within currently selected scope.\r\n     *\r\n     * @default false\r\n     * @param value Use exact values?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"strictMinMax\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"logarithmic\", {\n    /**\r\n     * @return Logarithmic scale?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"logarithmic\");\n    },\n\n    /**\r\n     * Indicates if this axis should use a logarithmic scale.\r\n     *\r\n     * Please note that logarithmic axis can **only** accommodate values bigger\r\n     * than zero.\r\n     *\r\n     * Having zero or negative values will result in error and failure of the\r\n     * whole chart.\r\n     *\r\n     * @param value Logarithmic scale?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"logarithmic\", value)) {\n        this.invalidate();\n        this.series.each(function (series) {\n          series.invalidateDataItems();\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"keepSelection\", {\n    /**\r\n     * @return Preseve zoom after data update?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"keepSelection\");\n    },\n\n    /**\r\n     * Indicates if a current selection (zoom) should be kept across data updates.\r\n     *\r\n     * If your axis is zoomed while chart's data is updated, the axis will try\r\n     * to retain the same start and end values.\r\n     *\r\n     * You can also use this to initially pre-zoom axis:\r\n     *\r\n     * ```TypeScript\r\n     * axis.keepSelection = true;\r\n     * axis.start = 0.5;\r\n     * axis.end = 0.7;\r\n     * ```\r\n     * ```JavaScript\r\n     * axis.keepSelection = true;\r\n     * axis.start = 0.5;\r\n     * axis.end = 0.7;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   \"xAxes\": [{\r\n     *     // ...\r\n     *     \"keepSelection\": true,\r\n     *     \"start\": 0.5,\r\n     *     \"end\": 0.7\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * The above will start the chart zoomed from the middle of the actual scope\r\n     * to 70%.\r\n     *\r\n     * @since 4.1.1\r\n     * @default false\r\n     * @param  value  Preseve zoom after data update?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"keepSelection\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"includeRangesInMinMax\", {\n    /**\r\n     * @return Include ranges?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"includeRangesInMinMax\");\n    },\n\n    /**\r\n     * If set to `true`, values of axis ranges will be included when calculating\r\n     * range of values / scale of the [[ValueAxis]].\r\n     *\r\n     * @default false\r\n     * @since 4.4.9\r\n     * @param  value  Include ranges?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"includeRangesInMinMax\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"maxPrecision\", {\n    /**\r\n     * @return max precision\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxPrecision\");\n    },\n\n    /**\r\n     * Maximum number of decimals to allow when placing grid lines and labels\r\n     * on axis.\r\n     *\r\n     * Set it to `0` (zero) to force integer-only axis labels.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maxPrecision\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"extraTooltipPrecision\", {\n    /**\r\n     * @return Extra decimals\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"extraTooltipPrecision\");\n    },\n\n    /**\r\n     * This setting allows using bigger precision for numbers displayed in axis\r\n     * tooltip.\r\n     *\r\n     * Please note that this setting indicates additional decimal places to\r\n     * automatically-calculated axis number precision.\r\n     *\r\n     * So if your axis displays numbers like 0.1, 0.2, etc. (one decimal place),\r\n     * and you set `extraTooltipPrecision = 1`, tooltips will display numbers\r\n     * like 0.12, 0.25, etc. (two decimal places).\r\n     *\r\n     * @default 0\r\n     * @since 4.8.3\r\n     * @param  value  Extra decimals\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"extraTooltipPrecision\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Invalidates axis data items when series extremes change\r\n   */\n\n  ValueAxis.prototype.handleExtremesChange = function () {\n    var _this = this;\n\n    this._extremesChanged = true;\n    this.getMinMax();\n\n    if (this.ghostLabel) {\n      var mw_1 = 0;\n      this.dataItems.each(function (dataItem) {\n        if (dataItem.label && dataItem.label.pixelWidth > mw_1) {\n          _this.ghostLabel.text = dataItem.label.currentText;\n        }\n      });\n    }\n  };\n  /**\r\n   * Returns relative position on axis for series' data item's value.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem  Data item\r\n   * @param key       Data field to get value from\r\n   * @param location  Location (0-1)\r\n   * @param stackKey  ?\r\n   * @return X coordinate (px)\r\n   */\n\n\n  ValueAxis.prototype.getX = function (dataItem, key, location, stackKey, range) {\n    return this.renderer.positionToPoint(this.getPositionX(dataItem, key, location, stackKey, range)).x;\n  };\n  /**\r\n   * Returns the X coordinate for series' data item's value.\r\n   *\r\n   * @since 4.5.14\r\n   * @param  dataItem  Data item\r\n   * @param  key       Data field to get value from\r\n   * @param  location  Location (0-1)\r\n   * @param  stackKey  ?\r\n   * @return           Relative position\r\n   */\n\n\n  ValueAxis.prototype.getPositionX = function (dataItem, key, location, stackKey, range) {\n    var value = dataItem.getWorkingValue(key);\n\n    if (!$type.hasValue(stackKey)) {\n      stackKey = \"valueX\";\n    }\n\n    var stack = dataItem.getValue(stackKey, \"stack\");\n\n    if (!$type.isNumber(value)) {\n      value = this.baseValue;\n\n      if (this.logarithmic) {\n        if (stack > 0) {\n          value = 0;\n        }\n      }\n    }\n\n    var position = this.valueToPosition(value + stack);\n\n    if (range) {\n      position = $math.fitToRange(position, range.start, range.end);\n    }\n\n    return position;\n  };\n  /**\r\n   * Returns the Y coordinate for series' data item's value.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem  Data item\r\n   * @param key       Data field to get value from\r\n   * @param location  Location (0-1)\r\n   * @param stackKey  Stack ID\r\n   * @return Y coordinate (px)\r\n   */\n\n\n  ValueAxis.prototype.getY = function (dataItem, key, location, stackKey, range) {\n    return this.renderer.positionToPoint(this.getPositionY(dataItem, key, location, stackKey, range)).y;\n  };\n  /**\r\n   * Returns relative position on axis for series' data item's value.\r\n   *\r\n   * @since 4.5.14\r\n   * @param  dataItem  Data item\r\n   * @param  key       Data field to get value from\r\n   * @param  location  Location (0-1)\r\n   * @param  stackKey  Stack ID\r\n   * @return           Relative position\r\n   */\n\n\n  ValueAxis.prototype.getPositionY = function (dataItem, key, location, stackKey, range) {\n    var value = dataItem.getWorkingValue(key);\n\n    if (!$type.hasValue(stackKey)) {\n      stackKey = \"valueY\";\n    }\n\n    var stack = dataItem.getValue(stackKey, \"stack\");\n\n    if (!$type.isNumber(value)) {\n      value = this.baseValue;\n\n      if (this.logarithmic) {\n        if (stack > 0) {\n          value = 0;\n        }\n      }\n    }\n\n    var position = this.valueToPosition(value + stack);\n\n    if (range) {\n      position = $math.fitToRange(position, range.start, range.end);\n    }\n\n    return position;\n  };\n  /**\r\n   * Returns an angle for series data item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem  Data item\r\n   * @param key       Data field to get value from\r\n   * @param location  Location (0-1)\r\n   * @param stackKey  Stack ID\r\n   * @param range Range to fit in\r\n   * @return Angle\r\n   */\n\n\n  ValueAxis.prototype.getAngle = function (dataItem, key, location, stackKey, range) {\n    var value = dataItem.getWorkingValue(key);\n    var stack = dataItem.getValue(stackKey, \"stack\");\n\n    if (!$type.isNumber(value)) {\n      value = this.baseValue;\n    }\n\n    var position = this.valueToPosition(value + stack);\n\n    if (range) {\n      position = $math.fitToRange(position, range.start, range.end);\n    }\n\n    return this.positionToAngle(position);\n  };\n  /**\r\n   * [getAnyRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param start     [description]\r\n   * @param end       [description]\r\n   * @param location  [description]\r\n   * @return [description]\r\n   */\n\n\n  ValueAxis.prototype.getAnyRangePath = function (start, end, location) {\n    var startPosition = this.valueToPosition(start);\n    var endPosition = this.valueToPosition(end);\n    return this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer\n  };\n  /**\r\n   * Returns text to show in a axis tooltip, based on specific position within\r\n   * axis.\r\n   *\r\n   * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n   * chart, or explicitly for this Axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (px)\r\n   * @return Label (numeric value)\r\n   */\n\n\n  ValueAxis.prototype.getTooltipText = function (position) {\n    var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces + this.extraTooltipPrecision);\n    var valueStr = this.tooltip.numberFormatter.format(value);\n\n    if (!this._adapterO) {\n      return valueStr;\n    } else {\n      return this._adapterO.apply(\"getTooltipText\", valueStr);\n    }\n  };\n  /**\r\n   * Zooms axis to specific values.\r\n   *\r\n   * @param startValue      Start value\r\n   * @param endValue        End value\r\n   * @param skipRangeEvent  Do not invoke events\r\n   * @param instantly       Do not play zoom animations\r\n   */\n\n\n  ValueAxis.prototype.zoomToValues = function (startValue, endValue, skipRangeEvent, instantly) {\n    var start = (startValue - this.min) / (this.max - this.min);\n    var end = (endValue - this.min) / (this.max - this.min);\n    this.zoom({\n      start: start,\n      end: end\n    }, skipRangeEvent, instantly);\n  };\n\n  Object.defineProperty(ValueAxis.prototype, \"minZoomed\", {\n    /**\r\n     * A smallest value in axis scale within current zoom.\r\n     *\r\n     * @return Min zoom value\r\n     */\n    get: function () {\n      if (!this.syncWithAxis) {\n        return $math.max(this.min, this._minZoomed);\n      } else {\n        return this._minZoomed;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"maxZoomed\", {\n    /**\r\n     * A biggest value in axis scale within current zoom.\r\n     * @return [description]\r\n     */\n    get: function () {\n      if (!this.syncWithAxis) {\n        return $math.min(this.max, this._maxZoomed);\n      } else {\n        return this._maxZoomed;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates positioning of Axis breaks after something changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  ValueAxis.prototype.fixAxisBreaks = function () {\n    var _this = this;\n\n    _super.prototype.fixAxisBreaks.call(this);\n\n    var axisBreaks = this._axisBreaks;\n\n    if (axisBreaks && axisBreaks.length > 0) {\n      // process breaks\n      axisBreaks.each(function (axisBreak) {\n        var startValue = axisBreak.adjustedStartValue;\n        var endValue = axisBreak.adjustedEndValue; // break difference\n\n        var axisBreakDif = endValue - startValue;\n\n        var axisBreakGridCount = Math.ceil(axisBreakDif * axisBreak.breakSize) * _this._gridCount / (_this.max - _this.min); // calculate min, max and step for axis break\n\n\n        var breakMinMaxStep = _this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount, true);\n\n        axisBreak.adjustedStep = breakMinMaxStep.step;\n        axisBreak.adjustedMin = breakMinMaxStep.min;\n        axisBreak.adjustedMax = breakMinMaxStep.max;\n      });\n    }\n\n    this._difference = this.adjustDifference(this.min, this.max);\n  };\n  /**\r\n   * Returns value based on position.\r\n   *\r\n   * Please note that `position` represents position within axis which may be\r\n   * zoomed and not correspond to Cursor's `position`.\r\n   *\r\n   * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n   * @param position  Relative position on axis (0-1)\r\n   * @return Position label\r\n   */\n\n\n  ValueAxis.prototype.getPositionLabel = function (position) {\n    var value = this.positionToValue(position);\n    return this.numberFormatter.format(value);\n  };\n  /**\r\n   * Shows Axis tooltip at specific value\r\n   *\r\n   * @param value Value\r\n   */\n\n\n  ValueAxis.prototype.showTooltipAt = function (value) {\n    this.showTooltipAtPosition(this.valueToPosition(value));\n  };\n  /**\r\n   * Copies all properties and related data from a different instance of Axis.\r\n   *\r\n   * @param source Source Axis\r\n   */\n\n\n  ValueAxis.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.min = source.min;\n    this.max = source.max;\n    this.calculateTotals = source.calculateTotals;\n    this._baseValue = source.baseValue;\n  };\n\n  Object.defineProperty(ValueAxis.prototype, \"syncWithAxis\", {\n    /**\r\n     * @return Target axis\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"syncWithAxis\");\n    },\n\n    /**\r\n     * Enables syncing of grid with another axis.\r\n     *\r\n     * To enable, set to a reference of the other `ValueAxis`. This axis will try\r\n     * to maintain its scale in such way that its grid matches target axis grid.\r\n     *\r\n     * IMPORTANT #1: At this stage it's an experimental feature. Use it at your\r\n     * own risk, as it may not work in 100% of the scenarios.\r\n     *\r\n     * IMPORTANT #2: `syncWithAxis` is not compatible with `strictMinMax` and\r\n     * `sequencedInterpolation` settings.\r\n     *\r\n     * IMPORTANT #3: `syncWithAxis` is not compatible with scrollbars. Make sure\r\n     * you do not add a scrollbar in the same direction as synced axes. For\r\n     * example, if you have vertical synced axes, do not add `scrollbarY` on\r\n     * your chart. It will create anomalies when used.\r\n     *\r\n     * IMPORTANT #4: `syncWithAxis` is not compatible with `XYCursor` if it has\r\n     * its `behavior` set to either `zoomY` or `zoomXY`.\r\n     *\r\n     * @since 4.8.1\r\n     * @param  axis  Target axis\r\n     */\n    set: function (axis) {\n      var _this = this;\n\n      if (this.setPropertyValue(\"syncWithAxis\", axis, true)) {\n        if (axis) {\n          this._disposers.push(axis.events.on(\"extremeschanged\", this.handleSelectionExtremesChange, this, false));\n\n          this._disposers.push(axis.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false));\n\n          this._disposers.push(axis.events.on(\"startendchanged\", this.handleSelectionExtremesChange, this, false));\n\n          this.events.on(\"shown\", this.handleSelectionExtremesChange, this, false);\n          this.events.on(\"maxsizechanged\", function () {\n            _this.clearCache();\n\n            _this._disposers.push(registry.events.once(\"exitframe\", function () {\n              _this.handleSelectionExtremesChange();\n            }));\n          }, this, false);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"treatZeroAs\", {\n    /**\r\n     * @return Zero replacement value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"treatZeroAs\");\n    },\n\n    /**\r\n     * If set, zero values will be treated as this value.\r\n     *\r\n     * It is useful if you need to use data with zero-values on a logarithmic\r\n     * axis scale.\r\n     *\r\n     * @since 4.9.34\r\n     * @param  value  Zero replacement value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"treatZeroAs\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Syncs with a target axis.\r\n   *\r\n   * @param  min  Min\r\n   * @param  max  Max\r\n   * @param  step Step\r\n   */\n\n  ValueAxis.prototype.syncAxes = function (min, max, step) {\n    var axis = this.syncWithAxis;\n\n    if (axis) {\n      if (!$type.isNumber(min)) {\n        min = this.min;\n      }\n\n      if (!$type.isNumber(max)) {\n        max = this.max;\n      }\n\n      if (!$type.isNumber(step)) {\n        step = this._step;\n      }\n\n      var count = Math.round((axis.maxZoomed - axis.minZoomed) / axis.step);\n      var currentCount = Math.round((max - min) / step);\n\n      if ($type.isNumber(count) && $type.isNumber(currentCount)) {\n        var synced = false;\n        var c = 0;\n        var diff = (max - min) * 0.01;\n        var omin = min;\n        var omax = max;\n        var ostep = step;\n\n        while (synced != true) {\n          synced = this.checkSync(omin, omax, ostep, count);\n          c++;\n\n          if (c > 1000) {\n            synced = true;\n          }\n\n          if (!synced) {\n            //omin = min - diff * c;\n            if (c / 3 == Math.round(c / 3)) {\n              omin = min - diff * c;\n\n              if (min >= 0 && omin < 0) {\n                omin = 0;\n              }\n            } else {\n              omax = max + diff * c;\n\n              if (omax <= 0 && omax > 0) {\n                omax = 0;\n              }\n            }\n\n            var minMaxStep = this.adjustMinMax(omin, omax, omax - omin, this._gridCount, true);\n            omin = minMaxStep.min;\n            omax = minMaxStep.max;\n            ostep = minMaxStep.step;\n          } else {\n            min = omin;\n            max = omax;\n            step = ostep;\n          }\n        }\n      }\n    }\n\n    return {\n      min: min,\n      max: max,\n      step: step\n    };\n  };\n  /**\r\n   * Returns `true` if axis needs to be resunced with some other axis.\r\n   */\n\n\n  ValueAxis.prototype.checkSync = function (min, max, step, count) {\n    var currentCount = (max - min) / step;\n\n    for (var i = 1; i < count; i++) {\n      if ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  ValueAxis.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up axes\n      if ($type.hasValue(config.syncWithAxis) && $type.isString(config.syncWithAxis)) {\n        if (this.map.hasKey(config.syncWithAxis)) {\n          config.syncWithAxis = this.map.getKey(config.syncWithAxis);\n        } else {\n          this.processingErrors.push(\"[ValueAxis] No axis with id \\\"\" + config.syncWithAxis + \"\\\" found for `syncWithAxis`\");\n          delete config.xAxis;\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  ValueAxis.prototype._saveMinMax = function (_min, _max) {};\n\n  return ValueAxis;\n}(Axis);\n\nexport { ValueAxis };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ValueAxis\"] = ValueAxis;\nregistry.registeredClasses[\"ValueAxisDataItem\"] = ValueAxisDataItem;","map":{"version":3,"names":["__extends","Axis","AxisDataItem","AxisRendererY","MultiDisposer","registry","ValueAxisBreak","$math","$iter","$object","$type","$utils","ValueAxisDataItem","_super","_this","call","className","values","value","endValue","applyTheme","Object","defineProperty","prototype","get","set","setValue","enumerable","configurable","ValueAxis","_stepDecimalPlaces","_prevStepDecimalPlaces","_adjustLabelPrecision","_baseValue","_adjustedStart","_adjustedEnd","_extremesChanged","_deltaMinMax","_dsc","calculateTotals","axisFieldName","setPropertyValue","Number","MAX_VALUE","keepSelection","includeRangesInMinMax","fillRule","dataItem","axis","component","axisFill","disabled","round","step","Math","__disabled","createDataItem","createAxisBreak","dataChangeUpdate","clearCache","_start","_end","dispatchImmediately","_maxZoomed","_maxDefined","_minZoomed","_minDefined","_maxAdjusted","_minAdjusted","processSeriesDataItems","series","getIndex","startIndex","dataItems","length","endIndex","_loop_1","i","total","sum","this_1","each","excludeFromTotal","dataItem_1","key","workingValue","isNumber","abs","dataItem_2","setCalculatedValue","validate","axisLength","getMinMax","fixAxisBreaks","calculateZoom","validateAxisElements","validateAxisRanges","validateBreaks","hideUnusedDataItems","renderer","invalidateLayout","min","max","positionToValue","start","end","differece","adjustDifference","minMaxStep","adjustMinMax","_gridCount","stepDecimalPlaces","decimalPlaces","syncWithAxis","calculated","getCache","_step","fixSmallStep","value_1","minZoomed","logarithmic","floor","differencePower","log","LOG10E","pow","maxZoomed","resetIterators","dataItemsIterator_1","_dataItemsIterator","precisionChanged","axisBreak","isInBreak","find","x","appendDataItem","undefined","text","formatLabel","label","invalid","axisLetter","measuredWidth","ghostLabel","measuredHeight","currentText","validateDataElement","oldValue","stepPower","decCount","axisBreaks","_axisBreaks","renderer_1","iterator","breakSize","getDistance","startPoint","endPoint","minGridDistance","breakValue_1","adjustedMin","adjustedMax","adjustedStartValue","adjustedEndValue","adjustedStep","itemIndex","_axisItemCount","position","valueToPosition","endPosition","fillEndPosition","point","positionToPoint","tick","updateTickElement","grid","updateGridElement","updateLabelElement","fill","updateFillElement","isRange","bullet","updateBullet","mask","adjustLabelPrecision","numberFormatter","format","baseValue","basePoint","_adapterO","apply","invalidateSeries","anyToPosition","valueToPoint","angle","positionToAngle","y","anyToPoint","min_1","max_1","difference","_difference","eachContinue","startValue","intersect","treatZeroAs","invalidateLabels","invalidate","difference_1","value_2","breakStartPosition","startPosition","breakEndPosition","breakStartValue","breakEndValue","breakPosition","E","xToValue","pointToPosition","yToValue","animateMinMax","animate","property","from","to","rangeChangeDuration","rangeChangeEasing","updateGridCount","POSITIVE_INFINITY","NEGATIVE_INFINITY","ignoreMinMax","seriesMin","seriesMax","axisRanges","range","minValue","maxValue","raiseCriticalError","Error","_minReal","_maxReal","dif","fixMin","fixMax","exponent","power","extraMin","extraMax","strict","strictMinMax","labels","animation","_minMaxAnimation","inited","isFinished","_finalMax","_finalMin","events","on","validateDataItems","handleSelectionExtremesChange","invalidateDataItems","_saveMinMax","gridCount","strictMode","initialMin","initialMax","extra","ceil","Infinity","stepDivisor","maxPrecision","minCount","maxCount","getPropertyValue","registerSeries","handleExtremesChange","selectionMin","selectionMax","allHidden","isHidden","outOfRange","visible","isHiding","seriesSelectionMin","seriesSelectionMax","minMaxStep2","fitToRange","syncAxes","declination","setCache","zoom","mw_1","pixelWidth","getX","location","stackKey","getPositionX","getWorkingValue","hasValue","stack","getValue","getY","getPositionY","getAngle","getAnyRangePath","getPositionRangePath","getTooltipText","extraTooltipPrecision","valueStr","tooltip","zoomToValues","skipRangeEvent","instantly","axisBreakDif","axisBreakGridCount","breakMinMaxStep","getPositionLabel","showTooltipAt","showTooltipAtPosition","copyFrom","source","_disposers","push","once","count","currentCount","synced","c","diff","omin","omax","ostep","checkSync","processConfig","config","isString","map","hasKey","getKey","processingErrors","xAxis","_min","_max","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/axes/ValueAxis.js"],"sourcesContent":["/**\r\n * Value Axis module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[ValueAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar ValueAxisDataItem = /** @class */ (function (_super) {\r\n    __extends(ValueAxisDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ValueAxisDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ValueAxisDataItem\";\r\n        _this.values.value = {};\r\n        _this.values.endValue = {};\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ValueAxisDataItem.prototype, \"value\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values[\"value\"].value;\r\n        },\r\n        /**\r\n         * A data point's numeric value.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"value\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxisDataItem.prototype, \"endValue\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values[\"endValue\"].value;\r\n        },\r\n        /**\r\n         * Data point's numeric end value.\r\n         *\r\n         * @param value  End value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"endValue\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ValueAxisDataItem;\r\n}(AxisDataItem));\r\nexport { ValueAxisDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to create a value axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JSON\r\n * \"yAxes\": [{\r\n *   \"type\": \"ValueAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Monthly Sales\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IValueAxisEvents} for a list of available Events\r\n * @see {@link IValueAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar ValueAxis = /** @class */ (function (_super) {\r\n    __extends(ValueAxis, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ValueAxis() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * [_stepDecimalPlaces description]\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._stepDecimalPlaces = 0;\r\n        _this._prevStepDecimalPlaces = 0;\r\n        _this._adjustLabelPrecision = true;\r\n        /**\r\n         * Base value for the axis.\r\n         */\r\n        _this._baseValue = 0;\r\n        /**\r\n         * Adjusted start in case we have breaks.\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._adjustedStart = 0;\r\n        /**\r\n         * Adjusted end in case we have breaks.\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._adjustedEnd = 1;\r\n        _this._extremesChanged = false;\r\n        _this._deltaMinMax = 1;\r\n        _this._dsc = false;\r\n        /**\r\n         * As calculating totals is expensive operation and not often needed, we\r\n         * don't do it by default.\r\n         *\r\n         * In case you use `totalPercent` or `total` in your charts, this must be set\r\n         * to `true`.\r\n         *\r\n         * @default false\r\n         * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#100_stacks} For using `calculateTotals` for 100% stacked series.\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/#Placeholders_for_numeric_values} For using `calculateTotals` in labels.\r\n         */\r\n        _this.calculateTotals = false;\r\n        _this.className = \"ValueAxis\";\r\n        // Set field name\r\n        _this.axisFieldName = \"value\";\r\n        // Set defaults\r\n        _this.setPropertyValue(\"maxZoomFactor\", 1000);\r\n        _this.setPropertyValue(\"extraMin\", 0);\r\n        _this.setPropertyValue(\"extraMax\", 0);\r\n        _this.setPropertyValue(\"strictMinMax\", false);\r\n        _this.setPropertyValue(\"maxPrecision\", Number.MAX_VALUE);\r\n        _this.setPropertyValue(\"adjustLabelPrecision\", true);\r\n        _this.setPropertyValue(\"extraTooltipPrecision\", 0);\r\n        _this.keepSelection = false;\r\n        _this.includeRangesInMinMax = false;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Holds reference to a function that accepts a DataItem as parameter.\r\n     *\r\n     * It can either return a fill opacity for a fill, or manipulate data item\r\n     * directly, to create various highlighting scenarios.\r\n     */\r\n    ValueAxis.prototype.fillRule = function (dataItem) {\r\n        var value = dataItem.value;\r\n        var axis = dataItem.component;\r\n        if (!dataItem.axisFill.disabled) {\r\n            // rounding in left to solve floating point number\r\n            if ($math.round(value / axis.step / 2, 5) == Math.round(value / axis.step / 2)) {\r\n                dataItem.axisFill.__disabled = true;\r\n            }\r\n            else {\r\n                dataItem.axisFill.__disabled = false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    ValueAxis.prototype.createDataItem = function () {\r\n        return new ValueAxisDataItem();\r\n    };\r\n    /**\r\n     * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n     *\r\n     * @return Axis break\r\n     */\r\n    ValueAxis.prototype.createAxisBreak = function () {\r\n        return new ValueAxisBreak();\r\n    };\r\n    /**\r\n     * [dataChangeUpdate description]\r\n     *\r\n     * This is a placeholder to override for extending classes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    ValueAxis.prototype.dataChangeUpdate = function () {\r\n        this.clearCache();\r\n        if (!this.keepSelection) {\r\n            if (this._start != 0 || this._end != 1) {\r\n                this._start = 0;\r\n                this._end = 1;\r\n                this.dispatchImmediately(\"startendchanged\");\r\n            }\r\n        }\r\n        else {\r\n            if (this._start != 0) {\r\n                this.dispatchImmediately(\"startchanged\");\r\n            }\r\n            if (this._end != 1) {\r\n                this.dispatchImmediately(\"endchanged\");\r\n            }\r\n            if (this._start != 0 || this._end != 1) {\r\n                this.dispatchImmediately(\"startendchanged\");\r\n            }\r\n        }\r\n        this._maxZoomed = this._maxDefined;\r\n        this._minZoomed = this._minDefined;\r\n        this._maxAdjusted = this._maxDefined;\r\n        this._minAdjusted = this._minDefined;\r\n    };\r\n    /**\r\n     * Processes data items of the related Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ValueAxis.prototype.processSeriesDataItems = function () {\r\n        // @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu\r\n        if (this.calculateTotals) {\r\n            var series = this.series.getIndex(0);\r\n            var startIndex = series.startIndex;\r\n            if (series.dataItems.length > 0) {\r\n                if (startIndex > 0) {\r\n                    startIndex--;\r\n                }\r\n                var endIndex = series.endIndex;\r\n                if (endIndex < series.dataItems.length) {\r\n                    endIndex++;\r\n                }\r\n                var _loop_1 = function (i) {\r\n                    // This has to be `var` in order to avoid garbage collection\r\n                    var total = {};\r\n                    var sum = {};\r\n                    this_1.series.each(function (series) {\r\n                        if (!series.excludeFromTotal) {\r\n                            var dataItem_1 = series.dataItems.getIndex(i);\r\n                            if (dataItem_1) {\r\n                                $object.each(dataItem_1.values, function (key) {\r\n                                    var value = dataItem_1.values[key].workingValue; // can not use getWorkingValue here!\r\n                                    if ($type.isNumber(value)) {\r\n                                        if (!$type.isNumber(total[key])) {\r\n                                            total[key] = Math.abs(value);\r\n                                        }\r\n                                        else {\r\n                                            total[key] += Math.abs(value);\r\n                                        }\r\n                                        if (!$type.isNumber(sum[key])) {\r\n                                            sum[key] = value;\r\n                                        }\r\n                                        else {\r\n                                            sum[key] += value;\r\n                                        }\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                    this_1.series.each(function (series) {\r\n                        if (!series.excludeFromTotal) {\r\n                            var dataItem_2 = series.dataItems.getIndex(i);\r\n                            if (dataItem_2) {\r\n                                $object.each(dataItem_2.values, function (key) {\r\n                                    var value = dataItem_2.values[key].workingValue; // can not use getWorkingValue here!\r\n                                    if ($type.isNumber(value)) {\r\n                                        dataItem_2.setCalculatedValue(key, total[key], \"total\");\r\n                                        dataItem_2.setCalculatedValue(key, 100 * value / total[key], \"totalPercent\");\r\n                                        dataItem_2.setCalculatedValue(key, sum[key], \"sum\");\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                };\r\n                var this_1 = this;\r\n                // This has to be `var` in order to avoid garbage collection\r\n                for (var i = startIndex; i < endIndex; ++i) {\r\n                    _loop_1(i);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates the whole axis. Causes it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     */\r\n    ValueAxis.prototype.validate = function () {\r\n        if (this.axisLength <= 0) {\r\n            return;\r\n        }\r\n        _super.prototype.validate.call(this);\r\n        this.getMinMax();\r\n        if (!$type.isNumber(this._minAdjusted)) {\r\n            this.dataItems.each(function (dataItem) {\r\n                dataItem.value = null;\r\n            });\r\n        }\r\n        this.fixAxisBreaks();\r\n        this.calculateZoom();\r\n        this.validateAxisElements();\r\n        this.validateAxisRanges();\r\n        this.validateBreaks();\r\n        this.hideUnusedDataItems();\r\n        this.renderer.invalidateLayout();\r\n        // hide too close\r\n        //this.hideTooCloseDataItems();\r\n    };\r\n    /**\r\n     * Calculates all positions, related to axis as per current zoom.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ValueAxis.prototype.calculateZoom = function () {\r\n        if ($type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n            var min = this.positionToValue(this.start);\r\n            var max = this.positionToValue(this.end);\r\n            var differece = this.adjustDifference(min, max);\r\n            var minMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n            var stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\r\n            this._stepDecimalPlaces = stepDecimalPlaces;\r\n            min = $math.round(min, stepDecimalPlaces);\r\n            max = $math.round(max, stepDecimalPlaces);\r\n            minMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n            var step = minMaxStep.step;\r\n            if (this.syncWithAxis) {\r\n                var calculated = this.getCache(min + \"-\" + max);\r\n                if ($type.isNumber(calculated)) {\r\n                    step = calculated;\r\n                }\r\n            }\r\n            else {\r\n                min = minMaxStep.min;\r\n                max = minMaxStep.max;\r\n            }\r\n            if (this._minZoomed != min || this._maxZoomed != max || this._step != step || this._dsc) {\r\n                this._dsc = false;\r\n                this._minZoomed = min;\r\n                this._maxZoomed = max;\r\n                this._step = step;\r\n                this.dispatchImmediately(\"selectionextremeschanged\");\r\n            }\r\n        }\r\n    };\r\n    ValueAxis.prototype.fixSmallStep = function (step) {\r\n        if (1 + step == 1) {\r\n            step *= 2;\r\n            return this.fixSmallStep(step);\r\n        }\r\n        return step;\r\n    };\r\n    /**\r\n     * Validates Axis elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    ValueAxis.prototype.validateAxisElements = function () {\r\n        var _this = this;\r\n        if ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n            // first regular items\r\n            var value_1 = this.minZoomed - this._step * 2;\r\n            if (!this.logarithmic) {\r\n                value_1 = Math.floor(value_1 / this._step) * this._step;\r\n            }\r\n            else {\r\n                var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n                if (differencePower > 1) {\r\n                    value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E);\r\n                }\r\n                else {\r\n                    value_1 = Math.floor(this.minZoomed / this._step) * this._step;\r\n                    if (value_1 == 0) {\r\n                        value_1 = this.minZoomed;\r\n                    }\r\n                }\r\n            }\r\n            var maxZoomed = this._maxZoomed + this._step;\r\n            this.resetIterators();\r\n            var dataItemsIterator_1 = this._dataItemsIterator;\r\n            if (this._step == 0) {\r\n                return;\r\n            }\r\n            this._step = this.fixSmallStep(this._step);\r\n            var i = 0;\r\n            var precisionChanged = this._prevStepDecimalPlaces != this._stepDecimalPlaces;\r\n            this._prevStepDecimalPlaces = this._stepDecimalPlaces;\r\n            while (value_1 <= maxZoomed) {\r\n                var axisBreak = this.isInBreak(value_1);\r\n                if (!axisBreak) {\r\n                    var dataItem = dataItemsIterator_1.find(function (x) { return x.value === value_1; });\r\n                    if (dataItem.__disabled) {\r\n                        dataItem.__disabled = false;\r\n                    }\r\n                    //this.processDataItem(dataItem);\r\n                    this.appendDataItem(dataItem);\r\n                    dataItem.axisBreak = undefined;\r\n                    if (dataItem.value != value_1 || precisionChanged) {\r\n                        dataItem.value = value_1;\r\n                        dataItem.text = this.formatLabel(value_1);\r\n                        if (dataItem.label && dataItem.label.invalid) {\r\n                            dataItem.label.validate();\r\n                        }\r\n                        if (dataItem.value >= this.min && dataItem.value <= this.max) {\r\n                            if (dataItem.label) {\r\n                                if ((this.axisLetter == \"Y\" && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth) || (this.axisLetter == \"X\" && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n                                    this.ghostLabel.text = dataItem.label.currentText;\r\n                                    this.ghostLabel.validate();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    this.validateDataElement(dataItem);\r\n                }\r\n                i++;\r\n                var oldValue = value_1;\r\n                if (!this.logarithmic) {\r\n                    value_1 += this._step;\r\n                }\r\n                else {\r\n                    var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n                    if (differencePower > 1) {\r\n                        value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);\r\n                    }\r\n                    else {\r\n                        value_1 += this._step;\r\n                    }\r\n                }\r\n                var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(this._step)) * Math.LOG10E));\r\n                if (stepPower < 1) {\r\n                    // exponent is less then 1 too. Count decimals of exponent\r\n                    var decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\r\n                    decCount = Math.min(13, decCount);\r\n                    // round value to avoid floating point issues\r\n                    value_1 = $math.round(value_1, decCount);\r\n                    // ceil causes problems: https://codepen.io/team/amcharts/pen/XWMjZwy?editors=1010\r\n                    if (oldValue == value_1) {\r\n                        value_1 = maxZoomed;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            var axisBreaks = this._axisBreaks;\r\n            if (axisBreaks) {\r\n                // breaks later\r\n                var renderer_1 = this.renderer;\r\n                $iter.each(axisBreaks.iterator(), function (axisBreak) {\r\n                    if (axisBreak.breakSize > 0) {\r\n                        // only add grid if gap is bigger then minGridDistance\r\n                        if ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer_1.minGridDistance) {\r\n                            var breakValue_1 = axisBreak.adjustedMin;\r\n                            while (breakValue_1 <= axisBreak.adjustedMax) {\r\n                                if (breakValue_1 >= axisBreak.adjustedStartValue && breakValue_1 <= axisBreak.adjustedEndValue) {\r\n                                    var dataItem = dataItemsIterator_1.find(function (x) { return x.value === breakValue_1; });\r\n                                    if (dataItem.__disabled) {\r\n                                        dataItem.__disabled = false;\r\n                                    }\r\n                                    //this.processDataItem(dataItem);\r\n                                    _this.appendDataItem(dataItem);\r\n                                    dataItem.axisBreak = axisBreak;\r\n                                    if (dataItem.value != breakValue_1) {\r\n                                        dataItem.value = breakValue_1;\r\n                                        dataItem.text = _this.formatLabel(breakValue_1);\r\n                                        if (dataItem.label && dataItem.label.invalid) {\r\n                                            dataItem.label.validate();\r\n                                        }\r\n                                    }\r\n                                    _this.validateDataElement(dataItem);\r\n                                }\r\n                                breakValue_1 += axisBreak.adjustedStep;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates axis data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param dataItem  Data item\r\n     */\r\n    ValueAxis.prototype.validateDataElement = function (dataItem) {\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n        //dataItem.__disabled = false;\r\n        dataItem.itemIndex = this._axisItemCount;\r\n        this._axisItemCount++;\r\n        var renderer = this.renderer;\r\n        var value = dataItem.value;\r\n        var endValue = dataItem.endValue;\r\n        var position = this.valueToPosition(value);\r\n        dataItem.position = position;\r\n        var endPosition = position;\r\n        var fillEndPosition = this.valueToPosition(value + this._step);\r\n        if ($type.isNumber(endValue)) {\r\n            endPosition = this.valueToPosition(endValue);\r\n            fillEndPosition = endPosition;\r\n        }\r\n        // this point is needed to calculate distance to satisfy minGridDistance\r\n        dataItem.point = renderer.positionToPoint(position);\r\n        var tick = dataItem.tick;\r\n        if (tick && !tick.disabled) {\r\n            renderer.updateTickElement(tick, position, endPosition);\r\n        }\r\n        var grid = dataItem.grid;\r\n        if (grid && !grid.disabled) {\r\n            renderer.updateGridElement(grid, position, endPosition);\r\n        }\r\n        var label = dataItem.label;\r\n        if (label && !label.disabled) {\r\n            renderer.updateLabelElement(label, position, endPosition);\r\n        }\r\n        var fill = dataItem.axisFill;\r\n        if (fill && !fill.disabled) {\r\n            renderer.updateFillElement(fill, position, fillEndPosition);\r\n            if (!dataItem.isRange) {\r\n                this.fillRule(dataItem);\r\n            }\r\n        }\r\n        if (dataItem.bullet) {\r\n            renderer.updateBullet(dataItem.bullet, position, endPosition);\r\n        }\r\n        var mask = dataItem.mask;\r\n        if (mask) {\r\n            renderer.updateFillElement(mask, position, fillEndPosition);\r\n        }\r\n    };\r\n    /**\r\n     * Formats the value according to axis' own [[NumberFormatter]].\r\n     *\r\n     * @param value  Source value\r\n     * @return Formatted value\r\n     */\r\n    ValueAxis.prototype.formatLabel = function (value) {\r\n        if (this.adjustLabelPrecision && value != 0) {\r\n            return this.numberFormatter.format(value, undefined, this._stepDecimalPlaces);\r\n        }\r\n        else {\r\n            return this.numberFormatter.format(value);\r\n        }\r\n    };\r\n    Object.defineProperty(ValueAxis.prototype, \"basePoint\", {\r\n        /**\r\n         * Coordinates of the actual axis start.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Base point\r\n         */\r\n        get: function () {\r\n            var baseValue = this.baseValue;\r\n            var position = this.valueToPosition(baseValue);\r\n            var basePoint = this.renderer.positionToPoint(position);\r\n            return basePoint;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"baseValue\", {\r\n        /**\r\n         * @return base value\r\n         */\r\n        get: function () {\r\n            var baseValue = this._baseValue;\r\n            if (this.logarithmic) {\r\n                baseValue = this.min;\r\n            }\r\n            if (!this._adapterO) {\r\n                return baseValue;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"baseValue\", baseValue);\r\n            }\r\n        },\r\n        /**\r\n         * A base value.\r\n         *\r\n         * This is a threshold value that will divide \"positive\" and \"negative\"\r\n         * value ranges.\r\n         *\r\n         * Other scale-related functionality also depend on base value. E.g. stacks,\r\n         * value-dependent coloring, etc.\r\n         *\r\n         * @param value Base value\r\n         */\r\n        set: function (value) {\r\n            this._baseValue = value;\r\n            this.invalidateLayout();\r\n            this.invalidateSeries();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts a numeric value to relative position on axis\r\n     *\r\n     * An alias to `valueToPosition()`.\r\n     *\r\n     * @param value  Value\r\n     * @return Position\r\n     */\r\n    ValueAxis.prototype.anyToPosition = function (value) {\r\n        return this.valueToPosition(value);\r\n    };\r\n    /**\r\n     * Converts a numeric value to orientation point (x, y, angle) on axis\r\n     *\r\n     * @param value  Value\r\n     * @return Orientation point\r\n     */\r\n    ValueAxis.prototype.valueToPoint = function (value) {\r\n        var position = this.valueToPosition(value);\r\n        var point = this.renderer.positionToPoint(position);\r\n        var angle = this.renderer.positionToAngle(position);\r\n        return { x: point.x, y: point.y, angle: angle };\r\n    };\r\n    /**\r\n     * Converts a numeric value to orientation (x, y, angle) point on axis\r\n     *\r\n     * @param value  Value\r\n     * @return Orientation point\r\n     */\r\n    ValueAxis.prototype.anyToPoint = function (value) {\r\n        return this.valueToPoint(value);\r\n    };\r\n    /**\r\n     * Converts a numeric value to relative position on axis.\r\n     *\r\n     * @param value  Value\r\n     * @return relative position\r\n     */\r\n    ValueAxis.prototype.valueToPosition = function (value) {\r\n        if ($type.isNumber(value)) {\r\n            // todo: think if possible to take previous value and do not go through all previous breaks\r\n            var min_1 = this.min;\r\n            var max_1 = this.max;\r\n            if ($type.isNumber(min_1) && $type.isNumber(max_1)) {\r\n                var difference = this._difference;\r\n                var axisBreaks = this._axisBreaks;\r\n                if (axisBreaks && axisBreaks.length > 0) {\r\n                    $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\r\n                        var startValue = axisBreak.adjustedStartValue;\r\n                        var endValue = axisBreak.adjustedEndValue;\r\n                        if ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n                            if (value < startValue) {\r\n                                return false;\r\n                            }\r\n                            if ($math.intersect({ start: startValue, end: endValue }, { start: min_1, end: max_1 })) { // todo: check this once and set some flag in axisBreak\r\n                                startValue = Math.max(startValue, min_1);\r\n                                endValue = Math.min(endValue, max_1);\r\n                                var breakSize = axisBreak.breakSize;\r\n                                // value to the right of break end\r\n                                if (value > endValue) {\r\n                                    min_1 += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?\r\n                                }\r\n                                // value to the left of break start\r\n                                else if (value < startValue) {\r\n                                }\r\n                                // value within break\r\n                                else {\r\n                                    value = startValue + (value - startValue) * breakSize;\r\n                                }\r\n                            }\r\n                        }\r\n                        return true;\r\n                    });\r\n                }\r\n                var position = void 0;\r\n                if (!this.logarithmic) {\r\n                    position = (value - min_1) / difference;\r\n                }\r\n                else {\r\n                    var treatZeroAs = this.treatZeroAs;\r\n                    if ($type.isNumber(treatZeroAs)) {\r\n                        if (value <= treatZeroAs) {\r\n                            value = treatZeroAs;\r\n                        }\r\n                    }\r\n                    position = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E));\r\n                }\r\n                //position = $math.round(position, 10);\r\n                return position;\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * When fontSize of fontFamily changes we need to hard-invalidate all Labels of this container to position them properly.\r\n     */\r\n    ValueAxis.prototype.invalidateLabels = function () {\r\n        _super.prototype.invalidateLabels.call(this);\r\n        if (this.dataItems) {\r\n            this.dataItems.each(function (dataItem) {\r\n                dataItem.value = undefined;\r\n            });\r\n            this.invalidate();\r\n        }\r\n    };\r\n    /**\r\n     * Converts an relative position to a corresponding value within\r\n     * axis' scale.\r\n     *\r\n     * @param position  Position (px)\r\n     * @return Value\r\n     */\r\n    ValueAxis.prototype.positionToValue = function (position) {\r\n        var min = this.min;\r\n        var max = this.max;\r\n        if ($type.isNumber(min) && $type.isNumber(max)) {\r\n            var difference_1 = max - min; //no need to adjust!\r\n            var value_2 = null;\r\n            var axisBreaks = this._axisBreaks;\r\n            if (axisBreaks) {\r\n                // in case we have some axis breaks\r\n                if (axisBreaks.length > 0) {\r\n                    $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\r\n                        var breakStartPosition = axisBreak.startPosition;\r\n                        var breakEndPosition = axisBreak.endPosition;\r\n                        var breakStartValue = axisBreak.adjustedStartValue;\r\n                        var breakEndValue = axisBreak.adjustedEndValue;\r\n                        if ($type.isNumber(breakStartValue) && $type.isNumber(breakEndValue)) {\r\n                            if (breakStartValue > max) {\r\n                                return false;\r\n                            }\r\n                            if ($math.intersect({ start: breakStartValue, end: breakEndValue }, { start: min, end: max })) {\r\n                                breakStartValue = $math.max(breakStartValue, min);\r\n                                breakEndValue = $math.min(breakEndValue, max);\r\n                                var breakSize = axisBreak.breakSize;\r\n                                difference_1 -= (breakEndValue - breakStartValue) * (1 - breakSize);\r\n                                // position to the right of break end\r\n                                if (position > breakEndPosition) {\r\n                                    min += (breakEndValue - breakStartValue) * (1 - breakSize);\r\n                                }\r\n                                // position to the left of break start\r\n                                else if (position < breakStartPosition) {\r\n                                }\r\n                                // value within break\r\n                                else {\r\n                                    var breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n                                    value_2 = breakStartValue + breakPosition * (breakEndValue - breakStartValue);\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            return true;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (!$type.isNumber(value_2)) {\r\n                if (this.logarithmic) {\r\n                    value_2 = Math.pow(Math.E, (position * ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E)) + Math.log(this.min) * Math.LOG10E) / Math.LOG10E);\r\n                }\r\n                else {\r\n                    value_2 = position * difference_1 + min;\r\n                }\r\n            }\r\n            return value_2;\r\n        }\r\n        //}\r\n    };\r\n    /**\r\n     * Converts an X coordinate to a relative value in axis' scale.\r\n     *\r\n     * @param x  X (px)\r\n     * @return Value\r\n     */\r\n    ValueAxis.prototype.xToValue = function (x) {\r\n        return this.positionToValue(this.pointToPosition({ x: x, y: 0 }));\r\n    };\r\n    /**\r\n     * Converts an Y coordinate to a relative value in axis' scale.\r\n     *\r\n     * @param y  Y (px)\r\n     * @return Value\r\n     */\r\n    ValueAxis.prototype.yToValue = function (y) {\r\n        return this.positionToValue(this.pointToPosition({ x: 0, y: y }));\r\n    };\r\n    /**\r\n     * Converts pixel coordinates to a relative position. (0-1)\r\n     *\r\n     * @param point  Coorinates (px)\r\n     * @return Position (0-1)\r\n     */\r\n    ValueAxis.prototype.pointToPosition = function (point) {\r\n        if (this.renderer instanceof AxisRendererY) {\r\n            return 1 - this.renderer.pointToPosition(point);\r\n        }\r\n        else {\r\n            return this.renderer.pointToPosition(point);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    ValueAxis.prototype.animateMinMax = function (min, max) {\r\n        return this.animate([{ property: \"_minAdjusted\", from: this._minAdjusted, to: min }, { property: \"_maxAdjusted\", from: this._maxAdjusted, to: max }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n    };\r\n    /**\r\n     * Calculates smallest and biggest value for the axis scale.\r\n     * @ignore\r\n     * @todo Description (review)\r\n     */\r\n    ValueAxis.prototype.getMinMax = function () {\r\n        var _this = this;\r\n        this.updateGridCount();\r\n        var min = Number.POSITIVE_INFINITY;\r\n        var max = Number.NEGATIVE_INFINITY;\r\n        // only if min and max are not set from outside, we go through min and max influencers\r\n        if (!$type.isNumber(this._minDefined) || !$type.isNumber(this._maxDefined)) {\r\n            this.series.each(function (series) {\r\n                if (!series.ignoreMinMax) {\r\n                    // check min\r\n                    var seriesMin = series.min(_this);\r\n                    if ($type.isNumber(seriesMin) && (seriesMin < min)) {\r\n                        min = seriesMin;\r\n                    }\r\n                    // check max\r\n                    var seriesMax = series.max(_this);\r\n                    if ($type.isNumber(seriesMax) && (seriesMax > max)) {\r\n                        max = seriesMax;\r\n                    }\r\n                }\r\n            });\r\n            if (this.includeRangesInMinMax) {\r\n                this.axisRanges.each(function (range) {\r\n                    if (!range.ignoreMinMax) {\r\n                        var minValue = $math.min(range.value, range.endValue);\r\n                        var maxValue = $math.max(range.value, range.endValue);\r\n                        if (minValue < min || !$type.isNumber(min)) {\r\n                            min = minValue;\r\n                        }\r\n                        if (maxValue > max || !$type.isNumber(max)) {\r\n                            max = maxValue;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (this.logarithmic) {\r\n            var treatZeroAs = this.treatZeroAs;\r\n            if ($type.isNumber(treatZeroAs)) {\r\n                if (min <= 0) {\r\n                    min = treatZeroAs;\r\n                }\r\n            }\r\n            if (min <= 0) {\r\n                this.raiseCriticalError(new Error(\"Logarithmic value axis can not have values <= 0.\"), true);\r\n            }\r\n        }\r\n        if (min == 0 && max == 0) {\r\n            max = 0.9;\r\n            min = -0.9;\r\n        }\r\n        // if defined from outside\r\n        if ($type.isNumber(this._minDefined)) {\r\n            min = this._minDefined;\r\n        }\r\n        if ($type.isNumber(this._maxDefined)) {\r\n            max = this._maxDefined;\r\n        }\r\n        if (this._adapterO) {\r\n            min = this._adapterO.apply(\"min\", min);\r\n        }\r\n        if (this._adapterO) {\r\n            max = this._adapterO.apply(\"max\", max);\r\n        }\r\n        if (!$type.isNumber(min) || !$type.isNumber(max)) {\r\n            return;\r\n        }\r\n        this._minReal = min;\r\n        this._maxReal = max;\r\n        if (min == Number.POSITIVE_INFINITY) {\r\n            min = undefined;\r\n        }\r\n        if (max == Number.NEGATIVE_INFINITY) {\r\n            max = undefined;\r\n        }\r\n        var dif = this.adjustDifference(min, max); // previously it was max-min, but not worked well\r\n        min = this.fixMin(min);\r\n        max = this.fixMax(max);\r\n        // this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\r\n        if (max - min <= 1 / Math.pow(10, 15)) {\r\n            if (max - min != 0) {\r\n                this._deltaMinMax = (max - min) / 2;\r\n            }\r\n            else {\r\n                // the number by which we need to raise 10 to get difference\r\n                var exponent = Math.log(Math.abs(max)) * Math.LOG10E;\r\n                // here we find a number which is power of 10 and has the same count of numbers as difference has\r\n                var power = Math.pow(10, Math.floor(exponent));\r\n                // reduce this number by 10 times\r\n                power = power / 10;\r\n                this._deltaMinMax = power;\r\n            }\r\n            min -= this._deltaMinMax;\r\n            max += this._deltaMinMax;\r\n        }\r\n        min -= (max - min) * this.extraMin;\r\n        max += (max - min) * this.extraMax;\r\n        var strict = this.strictMinMax;\r\n        if ($type.isNumber(this._maxDefined)) {\r\n            strict = true;\r\n        }\r\n        var minMaxStep = this.adjustMinMax(min, max, dif, this._gridCount, strict);\r\n        min = minMaxStep.min;\r\n        max = minMaxStep.max;\r\n        dif = max - min; //new\r\n        // do it for the second time (importat!)\r\n        minMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);\r\n        min = minMaxStep.min;\r\n        max = minMaxStep.max;\r\n        // return min max if strict\r\n        if (this.strictMinMax) {\r\n            if ($type.isNumber(this._minDefined)) {\r\n                min = this._minDefined;\r\n            }\r\n            else {\r\n                min = this._minReal;\r\n            }\r\n            if ($type.isNumber(this._maxDefined)) {\r\n                max = this._maxDefined;\r\n            }\r\n            else {\r\n                max = this._maxReal;\r\n            }\r\n            if (max - min <= 0.00000001) {\r\n                min -= this._deltaMinMax;\r\n                max += this._deltaMinMax;\r\n            }\r\n            min -= (max - min) * this.extraMin;\r\n            max += (max - min) * this.extraMax;\r\n        }\r\n        if (this._adapterO) {\r\n            min = this._adapterO.apply(\"min\", min);\r\n        }\r\n        if (this._adapterO) {\r\n            max = this._adapterO.apply(\"max\", max);\r\n        }\r\n        this._step = minMaxStep.step;\r\n        if (!$type.isNumber(min) && !$type.isNumber(max)) {\r\n            this.start = 0;\r\n            this.end = 1;\r\n            this.renderer.labels.each(function (label) {\r\n                label.dataItem.text = \"\";\r\n            });\r\n        }\r\n        // checking isNumber is good when all series are hidden\r\n        if ((this._minAdjusted != min || this._maxAdjusted != max) && $type.isNumber(min) && $type.isNumber(max)) {\r\n            var animation = this._minMaxAnimation;\r\n            if (this._extremesChanged && $type.isNumber(this._minAdjusted) && $type.isNumber(this._maxAdjusted) && this.inited) {\r\n                if ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n                    return;\r\n                }\r\n                else {\r\n                    this._finalMin = min;\r\n                    this._finalMax = max;\r\n                    animation = this.animateMinMax(min, max);\r\n                    if (animation && !animation.isFinished()) {\r\n                        animation.events.on(\"animationprogress\", this.validateDataItems, this);\r\n                        animation.events.on(\"animationended\", function () {\r\n                            //this.validateDataItems();\r\n                            _this.series.each(function (series) {\r\n                                series.validate();\r\n                            });\r\n                            _this.validateDataItems();\r\n                            _this.handleSelectionExtremesChange();\r\n                        });\r\n                        this._minMaxAnimation = animation;\r\n                    }\r\n                    else {\r\n                        this.series.each(function (series) {\r\n                            series.invalidate();\r\n                        });\r\n                    }\r\n                    this.validateDataItems();\r\n                    this.dispatchImmediately(\"extremeschanged\");\r\n                    this.handleSelectionExtremesChange();\r\n                }\r\n            }\r\n            else {\r\n                if ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n                    return;\r\n                }\r\n                else {\r\n                    this._minAdjusted = min;\r\n                    this._maxAdjusted = max;\r\n                    this._finalMin = min;\r\n                    this._finalMax = max;\r\n                    this.invalidateDataItems();\r\n                    this.dispatchImmediately(\"extremeschanged\");\r\n                    this._saveMinMax(min, max);\r\n                }\r\n            }\r\n        }\r\n        this._extremesChanged = false;\r\n        this._difference = this.adjustDifference(min, max);\r\n    };\r\n    /**\r\n     * Adjusts the minimum value.\r\n     *\r\n     * This is a placeholder method for extending classes to override.\r\n     *\r\n     * For numeric values this does nothing, however for more complex types, like\r\n     * dates, it may be necessary to adjust.\r\n     *\r\n     * @param value  Value\r\n     * @return Adjusted value\r\n     */\r\n    ValueAxis.prototype.fixMin = function (value) {\r\n        return value;\r\n    };\r\n    /**\r\n     * Adjusts the maximum value.\r\n     *\r\n     * This is a placeholder method for extending classes to override.\r\n     *\r\n     * For numeric values this does nothing, however for more complex types, like\r\n     * dates, it may be necessary to adjust.\r\n     *\r\n     * @param value  Value\r\n     * @return Adjusted value\r\n     */\r\n    ValueAxis.prototype.fixMax = function (value) {\r\n        return value;\r\n    };\r\n    /**\r\n     * Adjusts actual min and max scale values so that the axis starts and ends\r\n     * at \"nice\" values, unless `strictMinMax` is set.\r\n     *\r\n     * The `difference` can be something else than `max - min`, because of the\r\n     * axis breaks.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param min        [description]\r\n     * @param max        [description]\r\n     * @param difference [description]\r\n     * @param gridCount  [description]\r\n     * @param strictMode [description]\r\n     * @return [description]\r\n     */\r\n    ValueAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\r\n        // will fail if 0\r\n        if (gridCount <= 1) {\r\n            gridCount = 1;\r\n        }\r\n        gridCount = Math.round(gridCount);\r\n        var initialMin = min;\r\n        var initialMax = max;\r\n        // in case min and max is the same, use max\r\n        if (difference === 0) {\r\n            difference = Math.abs(max);\r\n        }\r\n        // the number by which we need to raise 10 to get difference\r\n        var exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n        // here we find a number which is power of 10 and has the same count of numbers as difference has\r\n        var power = Math.pow(10, Math.floor(exponent));\r\n        // reduce this number by 10 times\r\n        power = power / 10;\r\n        var extra = power;\r\n        if (strictMode) {\r\n            extra = 0;\r\n        }\r\n        if (!this.logarithmic) {\r\n            // round down min\r\n            if (strictMode) {\r\n                min = Math.floor(min / power) * power;\r\n                // round up max\r\n                max = Math.ceil(max / power) * power;\r\n            }\r\n            else {\r\n                min = Math.ceil(min / power) * power - extra;\r\n                // round up max\r\n                max = Math.floor(max / power) * power + extra;\r\n            }\r\n            // don't let min go below 0 if real min is >= 0\r\n            if (min < 0 && initialMin >= 0) {\r\n                min = 0;\r\n            }\r\n            // don't let max go above 0 if real max is <= 0\r\n            if (max > 0 && initialMax <= 0) {\r\n                max = 0;\r\n            }\r\n        }\r\n        else {\r\n            if (min <= 0) {\r\n                //throw Error(\"Logarithmic value axis can not have values <= 0.\");\r\n                min = this.baseValue;\r\n            }\r\n            // @todo: think of a better way or to restrict zooming when no series are selected\r\n            if (min == Infinity) {\r\n                min = 1;\r\n            }\r\n            if (max == -Infinity) {\r\n                max = 10;\r\n            }\r\n            if (this.strictMinMax) {\r\n                if (this._minDefined > 0) {\r\n                    min = this._minDefined;\r\n                }\r\n                else {\r\n                    min = min;\r\n                }\r\n                if (this._maxDefined > 0) {\r\n                    max = max;\r\n                }\r\n            }\r\n            else {\r\n                min = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\r\n                max = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\r\n            }\r\n        }\r\n        // repeat diff, exponent and power again with rounded values\r\n        //difference = this.adjustDifference(min, max);\r\n        /*\r\n\r\n                if(min > initialMin){\r\n                    min = initialMin;\r\n                }\r\n\r\n                if(max < initialMax){\r\n                    max = initialMax;\r\n                }\r\n        */\r\n        exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n        power = Math.pow(10, Math.floor(exponent));\r\n        power = power / 10;\r\n        // approximate difference between two grid lines\r\n        var step = Math.ceil((difference / gridCount) / power) * power;\r\n        var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\r\n        // TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution\r\n        // the step should divide by  2, 5, and 10.\r\n        var stepDivisor = Math.ceil(step / stepPower); // number 0 - 10\r\n        if (stepDivisor > 5) {\r\n            stepDivisor = 10;\r\n        }\r\n        else if (stepDivisor <= 5 && stepDivisor > 2) {\r\n            stepDivisor = 5;\r\n        }\r\n        // now get real step\r\n        step = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\r\n        if (this.maxPrecision < Number.MAX_VALUE && step != $math.ceil(step, this.maxPrecision)) {\r\n            step = $math.ceil(step, this.maxPrecision);\r\n        }\r\n        var decCount = 0;\r\n        // in case numbers are smaller than 1\r\n        if (stepPower < 1) {\r\n            // exponent is less then 1 too. Count decimals of exponent\r\n            decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\r\n            // round step\r\n            step = $math.round(step, decCount);\r\n        }\r\n        if (!this.logarithmic) {\r\n            // final min and max\r\n            var minCount = Math.floor(min / step);\r\n            min = $math.round(step * minCount, decCount);\r\n            var maxCount = void 0;\r\n            if (!strictMode) {\r\n                maxCount = Math.ceil(max / step);\r\n            }\r\n            else {\r\n                maxCount = Math.floor(max / step);\r\n            }\r\n            if (maxCount == minCount) {\r\n                maxCount++;\r\n            }\r\n            max = $math.round(step * maxCount, decCount);\r\n            if (max < initialMax) {\r\n                max = max + step;\r\n            }\r\n            if (min > initialMin) {\r\n                min = min - step;\r\n            }\r\n        }\r\n        return { min: min, max: max, step: step };\r\n    };\r\n    Object.defineProperty(ValueAxis.prototype, \"min\", {\r\n        /**\r\n         * @return Min value\r\n         */\r\n        get: function () {\r\n            var min = this._minAdjusted;\r\n            if (!$type.isNumber(min)) {\r\n                min = this._minDefined;\r\n            }\r\n            return min;\r\n        },\r\n        /**\r\n         * A minimum value for the axis scale.\r\n         *\r\n         * This value might be auto-adjusted by the Axis in order to accomodate the\r\n         * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n         *\r\n         * The above might be overridden by `strictMinMax` which will force exact\r\n         * user-defined min and max values to be used for scale.\r\n         *\r\n         * @param value  Min value\r\n         */\r\n        set: function (value) {\r\n            if (this._minDefined != value) {\r\n                this._minDefined = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"minDefined\", {\r\n        /**\r\n         * Min value as defined by user's code, not auto-calculated.\r\n         *\r\n         * @readonly\r\n         * @return Min value\r\n         */\r\n        get: function () {\r\n            return this._minDefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"maxDefined\", {\r\n        /**\r\n         * Max value as defined by user's code, not auto-calculated.\r\n         *\r\n         * @readonly\r\n         * @return Man value\r\n         */\r\n        get: function () {\r\n            return this._maxDefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"extraMin\", {\r\n        /**\r\n         * @return {number}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"extraMin\");\r\n        },\r\n        /**\r\n         * Allows relatively adjusting minimum value of the axis' scale.\r\n         *\r\n         * The value is relative to the actual range of values currently displayed\r\n         * on the axis.\r\n         *\r\n         * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n         * from 100 to 200, we will now have axis displaying from 50 to 200 because\r\n         * we asked to expand minimum value by 50% (0.5).\r\n         *\r\n         * NOTE: this setting is not compatible with `strictMinMax`.\r\n         *\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"extraMin\", value)) {\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"extraMax\", {\r\n        /**\r\n         * @return Min multiplier\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"extraMax\");\r\n        },\r\n        /**\r\n         * Allows relatively adjusting maximum value of the axis' scale.\r\n         *\r\n         * The value is relative to the actual range of values currently displayed\r\n         * on the axis.\r\n         *\r\n         * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n         * from 100 to 200, we will now have axis displaying from 100 to 250 because\r\n         * we asked to expand maximum value by 50% (0.5).\r\n         *\r\n         * NOTE: this setting is not compatible with `strictMinMax`.\r\n         *\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"extraMax\", value)) {\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"step\", {\r\n        /**\r\n         * Current calculated delta in values between two adjacent grid lines (step).\r\n         *\r\n         * This is a read-only value and cannot be used to set actual step.\r\n         *\r\n         * @readonly\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} For more information about modifying density of labels\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._step;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"max\", {\r\n        /**\r\n         * @return Max value\r\n         */\r\n        get: function () {\r\n            var max = this._maxAdjusted;\r\n            if (!$type.isNumber(max)) {\r\n                max = this._maxDefined;\r\n            }\r\n            return max;\r\n        },\r\n        /**\r\n         * A maximum value for the axis scale.\r\n         *\r\n         * This value might be auto-adjusted by the Axis in order to accomodate the\r\n         * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n         *\r\n         * The above might be overridden by `strictMinMax` which will force exact\r\n         * user-defined min and max values to be used for scale.\r\n         *\r\n         * @param value  Max value\r\n         */\r\n        set: function (value) {\r\n            if (this._maxDefined != value) {\r\n                this._maxDefined = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"adjustLabelPrecision\", {\r\n        /**\r\n         * @return Adjust precision\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"adjustLabelPrecision\");\r\n        },\r\n        /**\r\n         * By default the axis will adjust precision of all numbers to match number\r\n         * of decimals in all its labels, e.g.: `1.0`, `1.5`, `2.0`.\r\n         *\r\n         * To disable set `adjustLabelPrecision` to `false`, to use whatever other\r\n         * precision or number format settings are set.\r\n         *\r\n         * IMPORTANT: This setting will be ignored if your number format uses\r\n         * modifiers, e.g. `\"#a\"`.\r\n         *\r\n         * @default true\r\n         * @since 4.9.14\r\n         * @param  value  Adjust precision\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"adjustLabelPrecision\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Used for the Series to register itself as the user of this Axis.\r\n     *\r\n     * This will also decorate both the Series and Axis with event handlers, used\r\n     * to redraw on Axis position/zoom change.\r\n     *\r\n     * A disposer for those events is returned, so that they can be disposed\r\n     * together with Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param series  Series\r\n     * @return Disposer for events\r\n     */\r\n    ValueAxis.prototype.registerSeries = function (series) {\r\n        return new MultiDisposer([\r\n            _super.prototype.registerSeries.call(this, series),\r\n            series.events.on(\"extremeschanged\", this.handleExtremesChange, this, false),\r\n            series.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false),\r\n            this.events.on(\"extremeschanged\", series.invalidate, series, false)\r\n        ]);\r\n    };\r\n    /**\r\n     * Perform tasks after Axis zoom.\r\n     */\r\n    ValueAxis.prototype.handleSelectionExtremesChange = function () {\r\n        var _this = this;\r\n        var selectionMin;\r\n        var selectionMax;\r\n        var allHidden = true;\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (!series.ignoreMinMax && !series.isHidden && !series.outOfRange) {\r\n                if (series.visible && !series.isHiding) {\r\n                    allHidden = false;\r\n                }\r\n                var seriesSelectionMin = series.selectionMin(_this);\r\n                var seriesSelectionMax = series.selectionMax(_this);\r\n                if ($type.isNumber(seriesSelectionMin)) {\r\n                    if (!$type.isNumber(selectionMin) || (seriesSelectionMin < selectionMin)) {\r\n                        selectionMin = seriesSelectionMin;\r\n                    }\r\n                }\r\n                // check max\r\n                if ($type.isNumber(seriesSelectionMax)) {\r\n                    if (!$type.isNumber(selectionMax) || (seriesSelectionMax > selectionMax)) {\r\n                        selectionMax = seriesSelectionMax;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        if (this.includeRangesInMinMax) {\r\n            this.axisRanges.each(function (range) {\r\n                if (!range.ignoreMinMax) {\r\n                    var minValue = $math.min(range.value, range.endValue);\r\n                    var maxValue = $math.max(range.value, range.endValue);\r\n                    if (minValue < selectionMin) {\r\n                        selectionMin = minValue;\r\n                    }\r\n                    if (maxValue > selectionMax) {\r\n                        selectionMax = maxValue;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // this is not good, as if date axis is initially zoomed, selection of y axis is reset to 0, 1 at the end of this method\r\n        //$iter.each(this.series.iterator(), (series) => {\r\n        //\tif (!series.appeared) {\r\n        //\t\tallHidden = true;\r\n        //\t}\r\n        //})\r\n        if ($type.isNumber(this._minDefined)) {\r\n            if (this.strictMinMax) {\r\n                selectionMin = this._minDefined;\r\n            }\r\n            else {\r\n                selectionMin = this.min;\r\n            }\r\n        }\r\n        else if (this.strictMinMax) {\r\n            selectionMin = this._minReal;\r\n        }\r\n        if ($type.isNumber(this._maxDefined)) {\r\n            if (this.strictMinMax) {\r\n                selectionMax = this._maxDefined;\r\n            }\r\n            else {\r\n                selectionMax = this.max;\r\n            }\r\n        }\r\n        else if (this.strictMinMax) {\r\n            selectionMax = this._maxReal;\r\n        }\r\n        if (selectionMin == selectionMax) {\r\n            selectionMin -= this._deltaMinMax;\r\n            selectionMax += this._deltaMinMax;\r\n            var minMaxStep2 = this.adjustMinMax(selectionMin, selectionMax, 0, this._gridCount, this.strictMinMax);\r\n            selectionMin = minMaxStep2.min;\r\n            selectionMax = minMaxStep2.max;\r\n        }\r\n        var dif = this.adjustDifference(selectionMin, selectionMax);\r\n        var minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);\r\n        selectionMin = minMaxStep.min;\r\n        selectionMax = minMaxStep.max;\r\n        selectionMin -= (selectionMax - selectionMin) * this.extraMin;\r\n        selectionMax += (selectionMax - selectionMin) * this.extraMax;\r\n        selectionMin = $math.fitToRange(selectionMin, this.min, this.max);\r\n        selectionMax = $math.fitToRange(selectionMax, this.min, this.max);\r\n        // do it for the second time !important\r\n        dif = this.adjustDifference(selectionMin, selectionMax);\r\n        minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);\r\n        selectionMin = minMaxStep.min;\r\n        selectionMax = minMaxStep.max;\r\n        if (this.strictMinMax) {\r\n            selectionMin = $math.max(selectionMin, this._minDefined);\r\n            selectionMax = $math.min(selectionMax, this._maxDefined);\r\n        }\r\n        var step = minMaxStep.step;\r\n        if (this.syncWithAxis) {\r\n            minMaxStep = this.syncAxes(selectionMin, selectionMax, step);\r\n            selectionMin = minMaxStep.min;\r\n            selectionMax = minMaxStep.max;\r\n            this.invalidate();\r\n        }\r\n        step = minMaxStep.step;\r\n        // needed because of grouping\r\n        this._difference = this.adjustDifference(this.min, this.max);\r\n        var start = this.valueToPosition(selectionMin);\r\n        var end = this.valueToPosition(selectionMax);\r\n        // in case all series are hidden or hiding, full zoomout\r\n        if (allHidden && !this.syncWithAxis) {\r\n            start = 0;\r\n            end = 1;\r\n        }\r\n        var declination = 0;\r\n        if (this.syncWithAxis) {\r\n            declination = 5;\r\n            this.setCache(selectionMin + \"-\" + selectionMax, step);\r\n        }\r\n        else {\r\n            if (this._step != step || this._minZoomed != selectionMin || this._maxZoomed != selectionMax) {\r\n                this._dsc = true;\r\n            }\r\n            this._step = step;\r\n            this._minZoomed = selectionMin;\r\n            this._maxZoomed = selectionMax;\r\n        }\r\n        if (!this.keepSelection) {\r\n            this.zoom({ start: start, end: end }, false, false, declination);\r\n        }\r\n    };\r\n    Object.defineProperty(ValueAxis.prototype, \"strictMinMax\", {\r\n        /**\r\n         * @return Use exact values?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strictMinMax\");\r\n        },\r\n        /**\r\n         * Indicates whether to blindly use exact `min` and `max` values set by user\r\n         * when generating Axis scale.\r\n         *\r\n         * If not set, the Axis might slightly adjust those values to accomodate a\r\n         * better looking grid.\r\n         *\r\n         * NOTE: if `min` and `max` are not set, setting `strictMinMax` to `true`\r\n         * will result in fixing the scale of the axis to actual lowest and highest\r\n         * values in the series within currently selected scope.\r\n         *\r\n         * @default false\r\n         * @param value Use exact values?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"strictMinMax\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"logarithmic\", {\r\n        /**\r\n         * @return Logarithmic scale?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"logarithmic\");\r\n        },\r\n        /**\r\n         * Indicates if this axis should use a logarithmic scale.\r\n         *\r\n         * Please note that logarithmic axis can **only** accommodate values bigger\r\n         * than zero.\r\n         *\r\n         * Having zero or negative values will result in error and failure of the\r\n         * whole chart.\r\n         *\r\n         * @param value Logarithmic scale?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"logarithmic\", value)) {\r\n                this.invalidate();\r\n                this.series.each(function (series) {\r\n                    series.invalidateDataItems();\r\n                });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"keepSelection\", {\r\n        /**\r\n         * @return Preseve zoom after data update?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"keepSelection\");\r\n        },\r\n        /**\r\n         * Indicates if a current selection (zoom) should be kept across data updates.\r\n         *\r\n         * If your axis is zoomed while chart's data is updated, the axis will try\r\n         * to retain the same start and end values.\r\n         *\r\n         * You can also use this to initially pre-zoom axis:\r\n         *\r\n         * ```TypeScript\r\n         * axis.keepSelection = true;\r\n         * axis.start = 0.5;\r\n         * axis.end = 0.7;\r\n         * ```\r\n         * ```JavaScript\r\n         * axis.keepSelection = true;\r\n         * axis.start = 0.5;\r\n         * axis.end = 0.7;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   \"xAxes\": [{\r\n         *     // ...\r\n         *     \"keepSelection\": true,\r\n         *     \"start\": 0.5,\r\n         *     \"end\": 0.7\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * The above will start the chart zoomed from the middle of the actual scope\r\n         * to 70%.\r\n         *\r\n         * @since 4.1.1\r\n         * @default false\r\n         * @param  value  Preseve zoom after data update?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"keepSelection\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"includeRangesInMinMax\", {\r\n        /**\r\n         * @return Include ranges?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"includeRangesInMinMax\");\r\n        },\r\n        /**\r\n         * If set to `true`, values of axis ranges will be included when calculating\r\n         * range of values / scale of the [[ValueAxis]].\r\n         *\r\n         * @default false\r\n         * @since 4.4.9\r\n         * @param  value  Include ranges?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"includeRangesInMinMax\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"maxPrecision\", {\r\n        /**\r\n         * @return max precision\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxPrecision\");\r\n        },\r\n        /**\r\n         * Maximum number of decimals to allow when placing grid lines and labels\r\n         * on axis.\r\n         *\r\n         * Set it to `0` (zero) to force integer-only axis labels.\r\n         *\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"maxPrecision\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"extraTooltipPrecision\", {\r\n        /**\r\n         * @return Extra decimals\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"extraTooltipPrecision\");\r\n        },\r\n        /**\r\n         * This setting allows using bigger precision for numbers displayed in axis\r\n         * tooltip.\r\n         *\r\n         * Please note that this setting indicates additional decimal places to\r\n         * automatically-calculated axis number precision.\r\n         *\r\n         * So if your axis displays numbers like 0.1, 0.2, etc. (one decimal place),\r\n         * and you set `extraTooltipPrecision = 1`, tooltips will display numbers\r\n         * like 0.12, 0.25, etc. (two decimal places).\r\n         *\r\n         * @default 0\r\n         * @since 4.8.3\r\n         * @param  value  Extra decimals\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"extraTooltipPrecision\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Invalidates axis data items when series extremes change\r\n     */\r\n    ValueAxis.prototype.handleExtremesChange = function () {\r\n        var _this = this;\r\n        this._extremesChanged = true;\r\n        this.getMinMax();\r\n        if (this.ghostLabel) {\r\n            var mw_1 = 0;\r\n            this.dataItems.each(function (dataItem) {\r\n                if (dataItem.label && dataItem.label.pixelWidth > mw_1) {\r\n                    _this.ghostLabel.text = dataItem.label.currentText;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Returns relative position on axis for series' data item's value.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param dataItem  Data item\r\n     * @param key       Data field to get value from\r\n     * @param location  Location (0-1)\r\n     * @param stackKey  ?\r\n     * @return X coordinate (px)\r\n     */\r\n    ValueAxis.prototype.getX = function (dataItem, key, location, stackKey, range) {\r\n        return this.renderer.positionToPoint(this.getPositionX(dataItem, key, location, stackKey, range)).x;\r\n    };\r\n    /**\r\n     * Returns the X coordinate for series' data item's value.\r\n     *\r\n     * @since 4.5.14\r\n     * @param  dataItem  Data item\r\n     * @param  key       Data field to get value from\r\n     * @param  location  Location (0-1)\r\n     * @param  stackKey  ?\r\n     * @return           Relative position\r\n     */\r\n    ValueAxis.prototype.getPositionX = function (dataItem, key, location, stackKey, range) {\r\n        var value = dataItem.getWorkingValue(key);\r\n        if (!$type.hasValue(stackKey)) {\r\n            stackKey = \"valueX\";\r\n        }\r\n        var stack = dataItem.getValue(stackKey, \"stack\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.baseValue;\r\n            if (this.logarithmic) {\r\n                if (stack > 0) {\r\n                    value = 0;\r\n                }\r\n            }\r\n        }\r\n        var position = this.valueToPosition(value + stack);\r\n        if (range) {\r\n            position = $math.fitToRange(position, range.start, range.end);\r\n        }\r\n        return position;\r\n    };\r\n    /**\r\n     * Returns the Y coordinate for series' data item's value.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param dataItem  Data item\r\n     * @param key       Data field to get value from\r\n     * @param location  Location (0-1)\r\n     * @param stackKey  Stack ID\r\n     * @return Y coordinate (px)\r\n     */\r\n    ValueAxis.prototype.getY = function (dataItem, key, location, stackKey, range) {\r\n        return this.renderer.positionToPoint(this.getPositionY(dataItem, key, location, stackKey, range)).y;\r\n    };\r\n    /**\r\n     * Returns relative position on axis for series' data item's value.\r\n     *\r\n     * @since 4.5.14\r\n     * @param  dataItem  Data item\r\n     * @param  key       Data field to get value from\r\n     * @param  location  Location (0-1)\r\n     * @param  stackKey  Stack ID\r\n     * @return           Relative position\r\n     */\r\n    ValueAxis.prototype.getPositionY = function (dataItem, key, location, stackKey, range) {\r\n        var value = dataItem.getWorkingValue(key);\r\n        if (!$type.hasValue(stackKey)) {\r\n            stackKey = \"valueY\";\r\n        }\r\n        var stack = dataItem.getValue(stackKey, \"stack\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.baseValue;\r\n            if (this.logarithmic) {\r\n                if (stack > 0) {\r\n                    value = 0;\r\n                }\r\n            }\r\n        }\r\n        var position = this.valueToPosition(value + stack);\r\n        if (range) {\r\n            position = $math.fitToRange(position, range.start, range.end);\r\n        }\r\n        return position;\r\n    };\r\n    /**\r\n     * Returns an angle for series data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param dataItem  Data item\r\n     * @param key       Data field to get value from\r\n     * @param location  Location (0-1)\r\n     * @param stackKey  Stack ID\r\n     * @param range Range to fit in\r\n     * @return Angle\r\n     */\r\n    ValueAxis.prototype.getAngle = function (dataItem, key, location, stackKey, range) {\r\n        var value = dataItem.getWorkingValue(key);\r\n        var stack = dataItem.getValue(stackKey, \"stack\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.baseValue;\r\n        }\r\n        var position = this.valueToPosition(value + stack);\r\n        if (range) {\r\n            position = $math.fitToRange(position, range.start, range.end);\r\n        }\r\n        return this.positionToAngle(position);\r\n    };\r\n    /**\r\n     * [getAnyRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param start     [description]\r\n     * @param end       [description]\r\n     * @param location  [description]\r\n     * @return [description]\r\n     */\r\n    ValueAxis.prototype.getAnyRangePath = function (start, end, location) {\r\n        var startPosition = this.valueToPosition(start);\r\n        var endPosition = this.valueToPosition(end);\r\n        return this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer\r\n    };\r\n    /**\r\n     * Returns text to show in a axis tooltip, based on specific position within\r\n     * axis.\r\n     *\r\n     * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n     * chart, or explicitly for this Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param position  Position (px)\r\n     * @return Label (numeric value)\r\n     */\r\n    ValueAxis.prototype.getTooltipText = function (position) {\r\n        var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces + this.extraTooltipPrecision);\r\n        var valueStr = this.tooltip.numberFormatter.format(value);\r\n        if (!this._adapterO) {\r\n            return valueStr;\r\n        }\r\n        else {\r\n            return this._adapterO.apply(\"getTooltipText\", valueStr);\r\n        }\r\n    };\r\n    /**\r\n     * Zooms axis to specific values.\r\n     *\r\n     * @param startValue      Start value\r\n     * @param endValue        End value\r\n     * @param skipRangeEvent  Do not invoke events\r\n     * @param instantly       Do not play zoom animations\r\n     */\r\n    ValueAxis.prototype.zoomToValues = function (startValue, endValue, skipRangeEvent, instantly) {\r\n        var start = (startValue - this.min) / (this.max - this.min);\r\n        var end = (endValue - this.min) / (this.max - this.min);\r\n        this.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n    };\r\n    Object.defineProperty(ValueAxis.prototype, \"minZoomed\", {\r\n        /**\r\n         * A smallest value in axis scale within current zoom.\r\n         *\r\n         * @return Min zoom value\r\n         */\r\n        get: function () {\r\n            if (!this.syncWithAxis) {\r\n                return $math.max(this.min, this._minZoomed);\r\n            }\r\n            else {\r\n                return this._minZoomed;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"maxZoomed\", {\r\n        /**\r\n         * A biggest value in axis scale within current zoom.\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            if (!this.syncWithAxis) {\r\n                return $math.min(this.max, this._maxZoomed);\r\n            }\r\n            else {\r\n                return this._maxZoomed;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates positioning of Axis breaks after something changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ValueAxis.prototype.fixAxisBreaks = function () {\r\n        var _this = this;\r\n        _super.prototype.fixAxisBreaks.call(this);\r\n        var axisBreaks = this._axisBreaks;\r\n        if (axisBreaks && axisBreaks.length > 0) {\r\n            // process breaks\r\n            axisBreaks.each(function (axisBreak) {\r\n                var startValue = axisBreak.adjustedStartValue;\r\n                var endValue = axisBreak.adjustedEndValue;\r\n                // break difference\r\n                var axisBreakDif = endValue - startValue;\r\n                var axisBreakGridCount = Math.ceil(axisBreakDif * axisBreak.breakSize) * _this._gridCount / (_this.max - _this.min);\r\n                // calculate min, max and step for axis break\r\n                var breakMinMaxStep = _this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount, true);\r\n                axisBreak.adjustedStep = breakMinMaxStep.step;\r\n                axisBreak.adjustedMin = breakMinMaxStep.min;\r\n                axisBreak.adjustedMax = breakMinMaxStep.max;\r\n            });\r\n        }\r\n        this._difference = this.adjustDifference(this.min, this.max);\r\n    };\r\n    /**\r\n     * Returns value based on position.\r\n     *\r\n     * Please note that `position` represents position within axis which may be\r\n     * zoomed and not correspond to Cursor's `position`.\r\n     *\r\n     * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n     * @param position  Relative position on axis (0-1)\r\n     * @return Position label\r\n     */\r\n    ValueAxis.prototype.getPositionLabel = function (position) {\r\n        var value = this.positionToValue(position);\r\n        return this.numberFormatter.format(value);\r\n    };\r\n    /**\r\n     * Shows Axis tooltip at specific value\r\n     *\r\n     * @param value Value\r\n     */\r\n    ValueAxis.prototype.showTooltipAt = function (value) {\r\n        this.showTooltipAtPosition(this.valueToPosition(value));\r\n    };\r\n    /**\r\n     * Copies all properties and related data from a different instance of Axis.\r\n     *\r\n     * @param source Source Axis\r\n     */\r\n    ValueAxis.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.min = source.min;\r\n        this.max = source.max;\r\n        this.calculateTotals = source.calculateTotals;\r\n        this._baseValue = source.baseValue;\r\n    };\r\n    Object.defineProperty(ValueAxis.prototype, \"syncWithAxis\", {\r\n        /**\r\n         * @return Target axis\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"syncWithAxis\");\r\n        },\r\n        /**\r\n         * Enables syncing of grid with another axis.\r\n         *\r\n         * To enable, set to a reference of the other `ValueAxis`. This axis will try\r\n         * to maintain its scale in such way that its grid matches target axis grid.\r\n         *\r\n         * IMPORTANT #1: At this stage it's an experimental feature. Use it at your\r\n         * own risk, as it may not work in 100% of the scenarios.\r\n         *\r\n         * IMPORTANT #2: `syncWithAxis` is not compatible with `strictMinMax` and\r\n         * `sequencedInterpolation` settings.\r\n         *\r\n         * IMPORTANT #3: `syncWithAxis` is not compatible with scrollbars. Make sure\r\n         * you do not add a scrollbar in the same direction as synced axes. For\r\n         * example, if you have vertical synced axes, do not add `scrollbarY` on\r\n         * your chart. It will create anomalies when used.\r\n         *\r\n         * IMPORTANT #4: `syncWithAxis` is not compatible with `XYCursor` if it has\r\n         * its `behavior` set to either `zoomY` or `zoomXY`.\r\n         *\r\n         * @since 4.8.1\r\n         * @param  axis  Target axis\r\n         */\r\n        set: function (axis) {\r\n            var _this = this;\r\n            if (this.setPropertyValue(\"syncWithAxis\", axis, true)) {\r\n                if (axis) {\r\n                    this._disposers.push(axis.events.on(\"extremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n                    this._disposers.push(axis.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n                    this._disposers.push(axis.events.on(\"startendchanged\", this.handleSelectionExtremesChange, this, false));\r\n                    this.events.on(\"shown\", this.handleSelectionExtremesChange, this, false);\r\n                    this.events.on(\"maxsizechanged\", function () {\r\n                        _this.clearCache();\r\n                        _this._disposers.push(registry.events.once(\"exitframe\", function () {\r\n                            _this.handleSelectionExtremesChange();\r\n                        }));\r\n                    }, this, false);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"treatZeroAs\", {\r\n        /**\r\n         * @return Zero replacement value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"treatZeroAs\");\r\n        },\r\n        /**\r\n         * If set, zero values will be treated as this value.\r\n         *\r\n         * It is useful if you need to use data with zero-values on a logarithmic\r\n         * axis scale.\r\n         *\r\n         * @since 4.9.34\r\n         * @param  value  Zero replacement value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"treatZeroAs\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Syncs with a target axis.\r\n     *\r\n     * @param  min  Min\r\n     * @param  max  Max\r\n     * @param  step Step\r\n     */\r\n    ValueAxis.prototype.syncAxes = function (min, max, step) {\r\n        var axis = this.syncWithAxis;\r\n        if (axis) {\r\n            if (!$type.isNumber(min)) {\r\n                min = this.min;\r\n            }\r\n            if (!$type.isNumber(max)) {\r\n                max = this.max;\r\n            }\r\n            if (!$type.isNumber(step)) {\r\n                step = this._step;\r\n            }\r\n            var count = Math.round((axis.maxZoomed - axis.minZoomed) / axis.step);\r\n            var currentCount = Math.round((max - min) / step);\r\n            if ($type.isNumber(count) && $type.isNumber(currentCount)) {\r\n                var synced = false;\r\n                var c = 0;\r\n                var diff = (max - min) * 0.01;\r\n                var omin = min;\r\n                var omax = max;\r\n                var ostep = step;\r\n                while (synced != true) {\r\n                    synced = this.checkSync(omin, omax, ostep, count);\r\n                    c++;\r\n                    if (c > 1000) {\r\n                        synced = true;\r\n                    }\r\n                    if (!synced) {\r\n                        //omin = min - diff * c;\r\n                        if (c / 3 == Math.round(c / 3)) {\r\n                            omin = min - diff * c;\r\n                            if (min >= 0 && omin < 0) {\r\n                                omin = 0;\r\n                            }\r\n                        }\r\n                        else {\r\n                            omax = max + diff * c;\r\n                            if (omax <= 0 && omax > 0) {\r\n                                omax = 0;\r\n                            }\r\n                        }\r\n                        var minMaxStep = this.adjustMinMax(omin, omax, omax - omin, this._gridCount, true);\r\n                        omin = minMaxStep.min;\r\n                        omax = minMaxStep.max;\r\n                        ostep = minMaxStep.step;\r\n                    }\r\n                    else {\r\n                        min = omin;\r\n                        max = omax;\r\n                        step = ostep;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return { min: min, max: max, step: step };\r\n    };\r\n    /**\r\n     * Returns `true` if axis needs to be resunced with some other axis.\r\n     */\r\n    ValueAxis.prototype.checkSync = function (min, max, step, count) {\r\n        var currentCount = (max - min) / step;\r\n        for (var i = 1; i < count; i++) {\r\n            if ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    ValueAxis.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up axes\r\n            if ($type.hasValue(config.syncWithAxis) && $type.isString(config.syncWithAxis)) {\r\n                if (this.map.hasKey(config.syncWithAxis)) {\r\n                    config.syncWithAxis = this.map.getKey(config.syncWithAxis);\r\n                }\r\n                else {\r\n                    this.processingErrors.push(\"[ValueAxis] No axis with id \\\"\" + config.syncWithAxis + \"\\\" found for `syncWithAxis`\");\r\n                    delete config.xAxis;\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    ValueAxis.prototype._saveMinMax = function (_min, _max) {\r\n    };\r\n    return ValueAxis;\r\n}(Axis));\r\nexport { ValueAxis };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ValueAxis\"] = ValueAxis;\r\nregistry.registeredClasses[\"ValueAxisDataItem\"] = ValueAxisDataItem;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}