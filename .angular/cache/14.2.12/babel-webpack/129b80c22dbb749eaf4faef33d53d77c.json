{"ast":null,"code":"/**\r\n * FlowDiagram module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Chart, ChartDataItem } from \"../Chart\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { toColor, Color } from \"../../core/utils/Color\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $number from \"../../core/utils/Number\";\nimport * as $order from \"../../core/utils/Order\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo rearange notes after dragged\n\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar FlowDiagramDataItem =\n/** @class */\nfunction (_super) {\n  __extends(FlowDiagramDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FlowDiagramDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"FlowDiagramDataItem\";\n    _this.values.value = {};\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"fromName\", {\n    /**\r\n     * @return name\r\n     */\n    get: function () {\n      return this.properties.fromName;\n    },\n\n    /**\r\n     * Source node's name.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"fromName\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"toName\", {\n    /**\r\n     * @return name\r\n     */\n    get: function () {\n      return this.properties.toName;\n    },\n\n    /**\r\n     * Destination node's name.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"toName\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"color\", {\n    /**\r\n     * @return color\r\n     */\n    get: function () {\n      return this.properties.color;\n    },\n\n    /**\r\n     * Node color\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"color\", toColor(value));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values.value.value;\n    },\n\n    /**\r\n     * Link's value.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"link\", {\n    /**\r\n     * A visual element, representing link between the source and target nodes.\r\n     *\r\n     * Link's actual thickness will be determined by `value` of this link and\r\n     * `value` of the source node.\r\n     *\r\n     * @readonly\r\n     * @return Link element\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._link) {\n        var link_1 = this.component.links.create();\n        this._link = link_1;\n        this.addSprite(link_1);\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.links.removeValue(link_1);\n          }\n        }));\n      }\n\n      return this._link;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FlowDiagramDataItem;\n}(ChartDataItem);\n\nexport { FlowDiagramDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar FlowDiagram =\n/** @class */\nfunction (_super) {\n  __extends(FlowDiagram, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function FlowDiagram() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A Color Set to use when applying/generating colors for each subsequent\r\n     * node.\r\n     */\n\n\n    _this.colors = new ColorSet();\n    _this.className = \"FlowDiagram\";\n    _this.nodePadding = 20;\n    _this.sortBy = \"none\";\n    _this.sequencedInterpolation = true;\n    _this.colors.step = 2;\n    _this.minNodeSize = 0.02;\n\n    var linksContainer = _this.chartContainer.createChild(Container);\n\n    linksContainer.shouldClone = false;\n    linksContainer.layout = \"none\";\n    linksContainer.isMeasured = false;\n    _this.linksContainer = linksContainer;\n\n    var nodesContainer = _this.chartContainer.createChild(Container);\n\n    nodesContainer.shouldClone = false;\n    nodesContainer.layout = \"none\";\n    nodesContainer.isMeasured = false;\n    _this.nodesContainer = nodesContainer; // this data item holds sums, averages, etc\n\n    _this.dataItem = _this.createDataItem();\n    _this.dataItem.component = _this; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  FlowDiagram.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.dataItem.dispose();\n  };\n  /**\r\n   * (Re)validates chart's data, effectively causing the chart to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FlowDiagram.prototype.validateData = function () {\n    var _this = this;\n\n    if (this._parseDataFrom == 0) {\n      this.nodes.clear();\n    }\n\n    this.sortNodes();\n    this.colors.reset();\n\n    _super.prototype.validateData.call(this);\n\n    var sum = 0;\n    var count = 0;\n    var low;\n    var high; // build blocks\n\n    $iter.each(this.dataItems.iterator(), function (dataItem) {\n      var fromName = dataItem.fromName;\n\n      if (fromName) {\n        var node = _this.nodes.getKey(fromName);\n\n        if (!node) {\n          node = _this.nodes.create(fromName);\n          node.name = fromName;\n          node.chart = _this;\n          node.dataItem = dataItem;\n        }\n\n        dataItem.fromNode = node;\n        dataItem.fromNode.outgoingDataItems.push(dataItem);\n      }\n\n      var toName = dataItem.toName;\n\n      if (toName) {\n        var node = _this.nodes.getKey(toName);\n\n        if (!node) {\n          node = _this.nodes.create(toName);\n          node.name = toName;\n          node.chart = _this;\n          node.dataItem = dataItem;\n        }\n\n        dataItem.toNode = node;\n        dataItem.toNode.incomingDataItems.push(dataItem);\n      }\n\n      if (!dataItem.fromNode) {\n        var strokeModifier = new LinearGradientModifier();\n        strokeModifier.opacities = [0, 1];\n        dataItem.link.strokeModifier = strokeModifier;\n      }\n\n      if (!dataItem.toNode) {\n        var fillModifier = new LinearGradientModifier();\n        fillModifier.opacities = [1, 0];\n        dataItem.link.strokeModifier = fillModifier;\n      }\n\n      var value = dataItem.value;\n\n      if ($type.isNumber(value)) {\n        sum += value;\n        count++;\n\n        if (low > value || !$type.isNumber(low)) {\n          low = value;\n        }\n\n        if (high < value || !$type.isNumber(high)) {\n          high = value;\n        }\n      }\n    });\n    var key = \"value\";\n    this.dataItem.setCalculatedValue(key, high, \"high\");\n    this.dataItem.setCalculatedValue(key, low, \"low\");\n    this.dataItem.setCalculatedValue(key, sum, \"sum\");\n    this.dataItem.setCalculatedValue(key, sum / count, \"average\");\n    this.dataItem.setCalculatedValue(key, count, \"count\");\n    $iter.each(this.nodes.iterator(), function (strNode) {\n      var node = strNode[1];\n\n      if (node.fill instanceof Color) {\n        node.color = node.fill;\n      }\n\n      if (node.color == undefined) {\n        node.color = _this.colors.next();\n      }\n\n      if (node.dataItem.color != undefined) {\n        node.color = node.dataItem.color;\n      }\n\n      if (!node.dataItem.visible) {\n        node.hide(0);\n      }\n\n      _this.getNodeValue(node);\n    });\n    this.sortNodes();\n    this.feedLegend();\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  FlowDiagram.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\n    this.invalidate();\n  };\n  /**\r\n   * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n   */\n\n\n  FlowDiagram.prototype.sortNodes = function () {\n    if (this.sortBy == \"name\") {\n      this._sorted = this.nodes.sortedIterator();\n    } else if (this.sortBy == \"value\") {\n      this._sorted = $iter.sort(this.nodes.iterator(), function (x, y) {\n        return $order.reverse($number.order(x[1].total, y[1].total));\n      });\n    } else {\n      this._sorted = this.nodes.iterator();\n    }\n  };\n  /**\r\n   * Updates a cummulative value of the node.\r\n   *\r\n   * A node's value is determined by summing values of all of the incoming\r\n   * links or all of the outgoing links, whichever results in bigger number.\r\n   *\r\n   * @param node  Node value\r\n   */\n\n\n  FlowDiagram.prototype.getNodeValue = function (node) {\n    // todo: totalIncomming totalOutgoing, total\n    var incomingTotal = 0;\n    var outgoingTotal = 0;\n    $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\n      var value = dataItem.getWorkingValue(\"value\");\n\n      if ($type.isNumber(value)) {\n        incomingTotal += value;\n      }\n    });\n    $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\n      var value = dataItem.getWorkingValue(\"value\");\n\n      if ($type.isNumber(value)) {\n        outgoingTotal += value;\n      }\n    });\n    node.total = incomingTotal + outgoingTotal;\n    node.totalIncoming = incomingTotal;\n    node.totalOutgoing = outgoingTotal;\n  };\n\n  ;\n  /**\r\n   * Changes the sort type of the nodes.\r\n   *\r\n   * This will actually reshuffle nodes using nice animation.\r\n   */\n\n  FlowDiagram.prototype.changeSorting = function () {\n    this.sortNodes();\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  FlowDiagram.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Flow diagram\");\n    }\n  };\n  /**\r\n   * Creates and returns a new data item.\r\n   *\r\n   * @return Data item\r\n   */\n\n\n  FlowDiagram.prototype.createDataItem = function () {\n    return new FlowDiagramDataItem();\n  };\n\n  Object.defineProperty(FlowDiagram.prototype, \"nodePadding\", {\n    /**\r\n     * @return Padding (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nodePadding\");\n    },\n\n    /**\r\n     * Padding for node square in pixels.\r\n     *\r\n     * Padding will add extra space around node's name label.\r\n     *\r\n     * @param value Padding (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"nodePadding\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagram.prototype, \"sortBy\", {\n    /**\r\n     * @returns Node sorting\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"sortBy\");\n    },\n\n    /**\r\n     * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n     * @default \"none\"\r\n     * @param value  Node sorting\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"sortBy\", value);\n      this.changeSorting();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagram.prototype, \"minNodeSize\", {\n    /**\r\n     * @returns min node size\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minNodeSize\");\n    },\n\n    /**\r\n     * Sometimes nodes can get very small if their value is little. With this setting you\r\n     * can set min size of a node (this is relative value from the total size of all nodes)\r\n     * @default 0.02\r\n     * @param value  Node sorting\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minNodeSize\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagram.prototype, \"nodes\", {\n    /**\r\n     * A list of chart's nodes.\r\n     *\r\n     * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n     */\n    get: function () {\n      if (!this._nodes) {\n        var template = this.createNode();\n        template.events.on(\"hit\", function (event) {\n          event.target.handleHit(event);\n        });\n        this._nodes = new DictionaryTemplate(template);\n\n        this._disposers.push(new DictionaryDisposer(this._nodes));\n      }\n\n      return this._nodes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  FlowDiagram.prototype.createNode = function () {\n    var node = new FlowDiagramNode();\n\n    this._disposers.push(node);\n\n    return node;\n  };\n\n  Object.defineProperty(FlowDiagram.prototype, \"links\", {\n    /**\r\n     * A list of chart's links.\r\n     *\r\n     * @param {ListTemplate<this[\"_link\"]>}\r\n     */\n    get: function () {\n      if (!this._links) {\n        this._links = new ListTemplate(this.createLink());\n\n        this._disposers.push(new ListDisposer(this._links));\n      }\n\n      return this._links;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  FlowDiagram.prototype.createLink = function () {\n    var link = new FlowDiagramLink();\n\n    this._disposers.push(link);\n\n    return link;\n  };\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n\n\n  FlowDiagram.prototype.feedLegend = function () {\n    var legend = this.legend;\n\n    if (legend) {\n      var legendData_1 = [];\n      this.nodes.each(function (key, node) {\n        legendData_1.push(node);\n      });\n      legend.data = legendData_1;\n      legend.dataFields.name = \"name\";\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  FlowDiagram.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    this.nodes.clear();\n  };\n\n  return FlowDiagram;\n}(Chart);\n\nexport { FlowDiagram };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;","map":{"version":3,"names":["__extends","Chart","ChartDataItem","ListTemplate","ListDisposer","DictionaryTemplate","DictionaryDisposer","Container","registry","FlowDiagramNode","FlowDiagramLink","LinearGradientModifier","ColorSet","toColor","Color","$iter","$type","$number","$order","Disposer","FlowDiagramDataItem","_super","_this","call","className","values","value","applyTheme","Object","defineProperty","prototype","get","properties","fromName","set","setProperty","enumerable","configurable","toName","color","setValue","_link","link_1","component","links","create","addSprite","_disposers","push","removeValue","FlowDiagram","colors","nodePadding","sortBy","sequencedInterpolation","step","minNodeSize","linksContainer","chartContainer","createChild","shouldClone","layout","isMeasured","nodesContainer","dataItem","createDataItem","dispose","validateData","_parseDataFrom","nodes","clear","sortNodes","reset","sum","count","low","high","each","dataItems","iterator","node","getKey","name","chart","fromNode","outgoingDataItems","toNode","incomingDataItems","strokeModifier","opacities","link","fillModifier","isNumber","key","setCalculatedValue","strNode","fill","undefined","next","visible","hide","getNodeValue","feedLegend","handleDataItemWorkingValueChange","invalidate","_sorted","sortedIterator","sort","x","y","reverse","order","total","incomingTotal","outgoingTotal","getWorkingValue","totalIncoming","totalOutgoing","changeSorting","applyInternalDefaults","hasValue","readerTitle","language","translate","getPropertyValue","setPropertyValue","_nodes","template","createNode","events","on","event","target","handleHit","_links","createLink","legend","legendData_1","data","dataFields","disposeData","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/charts/types/FlowDiagram.js"],"sourcesContent":["/**\r\n * FlowDiagram module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, ChartDataItem } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\r\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo rearange notes after dragged\r\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar FlowDiagramDataItem = /** @class */ (function (_super) {\r\n    __extends(FlowDiagramDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FlowDiagramDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"FlowDiagramDataItem\";\r\n        _this.values.value = {};\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"fromName\", {\r\n        /**\r\n         * @return name\r\n         */\r\n        get: function () {\r\n            return this.properties.fromName;\r\n        },\r\n        /**\r\n         * Source node's name.\r\n         *\r\n         * @param value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"fromName\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"toName\", {\r\n        /**\r\n         * @return name\r\n         */\r\n        get: function () {\r\n            return this.properties.toName;\r\n        },\r\n        /**\r\n         * Destination node's name.\r\n         *\r\n         * @param value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"toName\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"color\", {\r\n        /**\r\n         * @return color\r\n         */\r\n        get: function () {\r\n            return this.properties.color;\r\n        },\r\n        /**\r\n         * Node color\r\n         *\r\n         * @param value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"color\", toColor(value));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"value\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.value.value;\r\n        },\r\n        /**\r\n         * Link's value.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"value\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"link\", {\r\n        /**\r\n         * A visual element, representing link between the source and target nodes.\r\n         *\r\n         * Link's actual thickness will be determined by `value` of this link and\r\n         * `value` of the source node.\r\n         *\r\n         * @readonly\r\n         * @return Link element\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._link) {\r\n                var link_1 = this.component.links.create();\r\n                this._link = link_1;\r\n                this.addSprite(link_1);\r\n                this._disposers.push(new Disposer(function () {\r\n                    if (_this.component) {\r\n                        _this.component.links.removeValue(link_1);\r\n                    }\r\n                }));\r\n            }\r\n            return this._link;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FlowDiagramDataItem;\r\n}(ChartDataItem));\r\nexport { FlowDiagramDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar FlowDiagram = /** @class */ (function (_super) {\r\n    __extends(FlowDiagram, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FlowDiagram() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A Color Set to use when applying/generating colors for each subsequent\r\n         * node.\r\n         */\r\n        _this.colors = new ColorSet();\r\n        _this.className = \"FlowDiagram\";\r\n        _this.nodePadding = 20;\r\n        _this.sortBy = \"none\";\r\n        _this.sequencedInterpolation = true;\r\n        _this.colors.step = 2;\r\n        _this.minNodeSize = 0.02;\r\n        var linksContainer = _this.chartContainer.createChild(Container);\r\n        linksContainer.shouldClone = false;\r\n        linksContainer.layout = \"none\";\r\n        linksContainer.isMeasured = false;\r\n        _this.linksContainer = linksContainer;\r\n        var nodesContainer = _this.chartContainer.createChild(Container);\r\n        nodesContainer.shouldClone = false;\r\n        nodesContainer.layout = \"none\";\r\n        nodesContainer.isMeasured = false;\r\n        _this.nodesContainer = nodesContainer;\r\n        // this data item holds sums, averages, etc\r\n        _this.dataItem = _this.createDataItem();\r\n        _this.dataItem.component = _this;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    FlowDiagram.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        this.dataItem.dispose();\r\n    };\r\n    /**\r\n     * (Re)validates chart's data, effectively causing the chart to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagram.prototype.validateData = function () {\r\n        var _this = this;\r\n        if (this._parseDataFrom == 0) {\r\n            this.nodes.clear();\r\n        }\r\n        this.sortNodes();\r\n        this.colors.reset();\r\n        _super.prototype.validateData.call(this);\r\n        var sum = 0;\r\n        var count = 0;\r\n        var low;\r\n        var high;\r\n        // build blocks\r\n        $iter.each(this.dataItems.iterator(), function (dataItem) {\r\n            var fromName = dataItem.fromName;\r\n            if (fromName) {\r\n                var node = _this.nodes.getKey(fromName);\r\n                if (!node) {\r\n                    node = _this.nodes.create(fromName);\r\n                    node.name = fromName;\r\n                    node.chart = _this;\r\n                    node.dataItem = dataItem;\r\n                }\r\n                dataItem.fromNode = node;\r\n                dataItem.fromNode.outgoingDataItems.push(dataItem);\r\n            }\r\n            var toName = dataItem.toName;\r\n            if (toName) {\r\n                var node = _this.nodes.getKey(toName);\r\n                if (!node) {\r\n                    node = _this.nodes.create(toName);\r\n                    node.name = toName;\r\n                    node.chart = _this;\r\n                    node.dataItem = dataItem;\r\n                }\r\n                dataItem.toNode = node;\r\n                dataItem.toNode.incomingDataItems.push(dataItem);\r\n            }\r\n            if (!dataItem.fromNode) {\r\n                var strokeModifier = new LinearGradientModifier();\r\n                strokeModifier.opacities = [0, 1];\r\n                dataItem.link.strokeModifier = strokeModifier;\r\n            }\r\n            if (!dataItem.toNode) {\r\n                var fillModifier = new LinearGradientModifier();\r\n                fillModifier.opacities = [1, 0];\r\n                dataItem.link.strokeModifier = fillModifier;\r\n            }\r\n            var value = dataItem.value;\r\n            if ($type.isNumber(value)) {\r\n                sum += value;\r\n                count++;\r\n                if (low > value || !$type.isNumber(low)) {\r\n                    low = value;\r\n                }\r\n                if (high < value || !$type.isNumber(high)) {\r\n                    high = value;\r\n                }\r\n            }\r\n        });\r\n        var key = \"value\";\r\n        this.dataItem.setCalculatedValue(key, high, \"high\");\r\n        this.dataItem.setCalculatedValue(key, low, \"low\");\r\n        this.dataItem.setCalculatedValue(key, sum, \"sum\");\r\n        this.dataItem.setCalculatedValue(key, sum / count, \"average\");\r\n        this.dataItem.setCalculatedValue(key, count, \"count\");\r\n        $iter.each(this.nodes.iterator(), function (strNode) {\r\n            var node = strNode[1];\r\n            if (node.fill instanceof Color) {\r\n                node.color = node.fill;\r\n            }\r\n            if (node.color == undefined) {\r\n                node.color = _this.colors.next();\r\n            }\r\n            if (node.dataItem.color != undefined) {\r\n                node.color = node.dataItem.color;\r\n            }\r\n            if (!node.dataItem.visible) {\r\n                node.hide(0);\r\n            }\r\n            _this.getNodeValue(node);\r\n        });\r\n        this.sortNodes();\r\n        this.feedLegend();\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagram.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n     */\r\n    FlowDiagram.prototype.sortNodes = function () {\r\n        if (this.sortBy == \"name\") {\r\n            this._sorted = this.nodes.sortedIterator();\r\n        }\r\n        else if (this.sortBy == \"value\") {\r\n            this._sorted = $iter.sort(this.nodes.iterator(), function (x, y) { return $order.reverse($number.order(x[1].total, y[1].total)); });\r\n        }\r\n        else {\r\n            this._sorted = this.nodes.iterator();\r\n        }\r\n    };\r\n    /**\r\n     * Updates a cummulative value of the node.\r\n     *\r\n     * A node's value is determined by summing values of all of the incoming\r\n     * links or all of the outgoing links, whichever results in bigger number.\r\n     *\r\n     * @param node  Node value\r\n     */\r\n    FlowDiagram.prototype.getNodeValue = function (node) {\r\n        // todo: totalIncomming totalOutgoing, total\r\n        var incomingTotal = 0;\r\n        var outgoingTotal = 0;\r\n        $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\r\n            var value = dataItem.getWorkingValue(\"value\");\r\n            if ($type.isNumber(value)) {\r\n                incomingTotal += value;\r\n            }\r\n        });\r\n        $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\r\n            var value = dataItem.getWorkingValue(\"value\");\r\n            if ($type.isNumber(value)) {\r\n                outgoingTotal += value;\r\n            }\r\n        });\r\n        node.total = incomingTotal + outgoingTotal;\r\n        node.totalIncoming = incomingTotal;\r\n        node.totalOutgoing = outgoingTotal;\r\n    };\r\n    ;\r\n    /**\r\n     * Changes the sort type of the nodes.\r\n     *\r\n     * This will actually reshuffle nodes using nice animation.\r\n     */\r\n    FlowDiagram.prototype.changeSorting = function () {\r\n        this.sortNodes();\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    FlowDiagram.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Flow diagram\");\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new data item.\r\n     *\r\n     * @return Data item\r\n     */\r\n    FlowDiagram.prototype.createDataItem = function () {\r\n        return new FlowDiagramDataItem();\r\n    };\r\n    Object.defineProperty(FlowDiagram.prototype, \"nodePadding\", {\r\n        /**\r\n         * @return Padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nodePadding\");\r\n        },\r\n        /**\r\n         * Padding for node square in pixels.\r\n         *\r\n         * Padding will add extra space around node's name label.\r\n         *\r\n         * @param value Padding (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"nodePadding\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagram.prototype, \"sortBy\", {\r\n        /**\r\n         * @returns Node sorting\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"sortBy\");\r\n        },\r\n        /**\r\n         * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n         * @default \"none\"\r\n         * @param value  Node sorting\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"sortBy\", value);\r\n            this.changeSorting();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagram.prototype, \"minNodeSize\", {\r\n        /**\r\n         * @returns min node size\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minNodeSize\");\r\n        },\r\n        /**\r\n         * Sometimes nodes can get very small if their value is little. With this setting you\r\n         * can set min size of a node (this is relative value from the total size of all nodes)\r\n         * @default 0.02\r\n         * @param value  Node sorting\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minNodeSize\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagram.prototype, \"nodes\", {\r\n        /**\r\n         * A list of chart's nodes.\r\n         *\r\n         * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n         */\r\n        get: function () {\r\n            if (!this._nodes) {\r\n                var template = this.createNode();\r\n                template.events.on(\"hit\", function (event) {\r\n                    event.target.handleHit(event);\r\n                });\r\n                this._nodes = new DictionaryTemplate(template);\r\n                this._disposers.push(new DictionaryDisposer(this._nodes));\r\n            }\r\n            return this._nodes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.createNode = function () {\r\n        var node = new FlowDiagramNode();\r\n        this._disposers.push(node);\r\n        return node;\r\n    };\r\n    Object.defineProperty(FlowDiagram.prototype, \"links\", {\r\n        /**\r\n         * A list of chart's links.\r\n         *\r\n         * @param {ListTemplate<this[\"_link\"]>}\r\n         */\r\n        get: function () {\r\n            if (!this._links) {\r\n                this._links = new ListTemplate(this.createLink());\r\n                this._disposers.push(new ListDisposer(this._links));\r\n            }\r\n            return this._links;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.createLink = function () {\r\n        var link = new FlowDiagramLink();\r\n        this._disposers.push(link);\r\n        return link;\r\n    };\r\n    /**\r\n     * Setups the legend to use the chart's data.\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.feedLegend = function () {\r\n        var legend = this.legend;\r\n        if (legend) {\r\n            var legendData_1 = [];\r\n            this.nodes.each(function (key, node) {\r\n                legendData_1.push(node);\r\n            });\r\n            legend.data = legendData_1;\r\n            legend.dataFields.name = \"name\";\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this.nodes.clear();\r\n    };\r\n    return FlowDiagram;\r\n}(Chart));\r\nexport { FlowDiagram };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,UAArC;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,uBAA3C;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,6BAAvD;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,sBAAT,QAAuC,mDAAvC;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,wBAA/B;AACA,OAAO,KAAKC,KAAZ,MAAuB,2BAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,yBAAzB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,mBAAmB;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACvDrB,SAAS,CAACoB,mBAAD,EAAsBC,MAAtB,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,mBAAT,GAA+B;IAC3B,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;IACAD,KAAK,CAACE,SAAN,GAAkB,qBAAlB;IACAF,KAAK,CAACG,MAAN,CAAaC,KAAb,GAAqB,EAArB;;IACAJ,KAAK,CAACK,UAAN;;IACA,OAAOL,KAAP;EACH;;EACDM,MAAM,CAACC,cAAP,CAAsBT,mBAAmB,CAACU,SAA1C,EAAqD,UAArD,EAAiE;IAC7D;AACR;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,KAAKC,UAAL,CAAgBC,QAAvB;IACH,CAN4D;;IAO7D;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,UAAUR,KAAV,EAAiB;MAClB,KAAKS,WAAL,CAAiB,UAAjB,EAA6BT,KAA7B;IACH,CAd4D;IAe7DU,UAAU,EAAE,IAfiD;IAgB7DC,YAAY,EAAE;EAhB+C,CAAjE;EAkBAT,MAAM,CAACC,cAAP,CAAsBT,mBAAmB,CAACU,SAA1C,EAAqD,QAArD,EAA+D;IAC3D;AACR;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,KAAKC,UAAL,CAAgBM,MAAvB;IACH,CAN0D;;IAO3D;AACR;AACA;AACA;AACA;IACQJ,GAAG,EAAE,UAAUR,KAAV,EAAiB;MAClB,KAAKS,WAAL,CAAiB,QAAjB,EAA2BT,KAA3B;IACH,CAd0D;IAe3DU,UAAU,EAAE,IAf+C;IAgB3DC,YAAY,EAAE;EAhB6C,CAA/D;EAkBAT,MAAM,CAACC,cAAP,CAAsBT,mBAAmB,CAACU,SAA1C,EAAqD,OAArD,EAA8D;IAC1D;AACR;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,KAAKC,UAAL,CAAgBO,KAAvB;IACH,CANyD;;IAO1D;AACR;AACA;AACA;AACA;IACQL,GAAG,EAAE,UAAUR,KAAV,EAAiB;MAClB,KAAKS,WAAL,CAAiB,OAAjB,EAA0BtB,OAAO,CAACa,KAAD,CAAjC;IACH,CAdyD;IAe1DU,UAAU,EAAE,IAf8C;IAgB1DC,YAAY,EAAE;EAhB4C,CAA9D;EAkBAT,MAAM,CAACC,cAAP,CAAsBT,mBAAmB,CAACU,SAA1C,EAAqD,OAArD,EAA8D;IAC1D;AACR;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,KAAKN,MAAL,CAAYC,KAAZ,CAAkBA,KAAzB;IACH,CANyD;;IAO1D;AACR;AACA;AACA;AACA;IACQQ,GAAG,EAAE,UAAUR,KAAV,EAAiB;MAClB,KAAKc,QAAL,CAAc,OAAd,EAAuBd,KAAvB;IACH,CAdyD;IAe1DU,UAAU,EAAE,IAf8C;IAgB1DC,YAAY,EAAE;EAhB4C,CAA9D;EAkBAT,MAAM,CAACC,cAAP,CAAsBT,mBAAmB,CAACU,SAA1C,EAAqD,MAArD,EAA6D;IACzD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,YAAY;MACb,IAAIT,KAAK,GAAG,IAAZ;;MACA,IAAI,CAAC,KAAKmB,KAAV,EAAiB;QACb,IAAIC,MAAM,GAAG,KAAKC,SAAL,CAAeC,KAAf,CAAqBC,MAArB,EAAb;QACA,KAAKJ,KAAL,GAAaC,MAAb;QACA,KAAKI,SAAL,CAAeJ,MAAf;;QACA,KAAKK,UAAL,CAAgBC,IAAhB,CAAqB,IAAI7B,QAAJ,CAAa,YAAY;UAC1C,IAAIG,KAAK,CAACqB,SAAV,EAAqB;YACjBrB,KAAK,CAACqB,SAAN,CAAgBC,KAAhB,CAAsBK,WAAtB,CAAkCP,MAAlC;UACH;QACJ,CAJoB,CAArB;MAKH;;MACD,OAAO,KAAKD,KAAZ;IACH,CAvBwD;IAwBzDL,UAAU,EAAE,IAxB6C;IAyBzDC,YAAY,EAAE;EAzB2C,CAA7D;EA2BA,OAAOjB,mBAAP;AACH,CAhHwC,CAgHvClB,aAhHuC,CAAzC;;AAiHA,SAASkB,mBAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAI8B,WAAW;AAAG;AAAe,UAAU7B,MAAV,EAAkB;EAC/CrB,SAAS,CAACkD,WAAD,EAAc7B,MAAd,CAAT;EACA;AACJ;AACA;;;EACI,SAAS6B,WAAT,GAAuB;IACnB,IAAI5B,KAAK,GACT;IACAD,MAAM,CAACE,IAAP,CAAY,IAAZ,KAAqB,IAFrB;IAGA;AACR;AACA;AACA;;;IACQD,KAAK,CAAC6B,MAAN,GAAe,IAAIvC,QAAJ,EAAf;IACAU,KAAK,CAACE,SAAN,GAAkB,aAAlB;IACAF,KAAK,CAAC8B,WAAN,GAAoB,EAApB;IACA9B,KAAK,CAAC+B,MAAN,GAAe,MAAf;IACA/B,KAAK,CAACgC,sBAAN,GAA+B,IAA/B;IACAhC,KAAK,CAAC6B,MAAN,CAAaI,IAAb,GAAoB,CAApB;IACAjC,KAAK,CAACkC,WAAN,GAAoB,IAApB;;IACA,IAAIC,cAAc,GAAGnC,KAAK,CAACoC,cAAN,CAAqBC,WAArB,CAAiCpD,SAAjC,CAArB;;IACAkD,cAAc,CAACG,WAAf,GAA6B,KAA7B;IACAH,cAAc,CAACI,MAAf,GAAwB,MAAxB;IACAJ,cAAc,CAACK,UAAf,GAA4B,KAA5B;IACAxC,KAAK,CAACmC,cAAN,GAAuBA,cAAvB;;IACA,IAAIM,cAAc,GAAGzC,KAAK,CAACoC,cAAN,CAAqBC,WAArB,CAAiCpD,SAAjC,CAArB;;IACAwD,cAAc,CAACH,WAAf,GAA6B,KAA7B;IACAG,cAAc,CAACF,MAAf,GAAwB,MAAxB;IACAE,cAAc,CAACD,UAAf,GAA4B,KAA5B;IACAxC,KAAK,CAACyC,cAAN,GAAuBA,cAAvB,CAxBmB,CAyBnB;;IACAzC,KAAK,CAAC0C,QAAN,GAAiB1C,KAAK,CAAC2C,cAAN,EAAjB;IACA3C,KAAK,CAAC0C,QAAN,CAAerB,SAAf,GAA2BrB,KAA3B,CA3BmB,CA4BnB;;IACAA,KAAK,CAACK,UAAN;;IACA,OAAOL,KAAP;EACH;;EACD4B,WAAW,CAACpB,SAAZ,CAAsBoC,OAAtB,GAAgC,YAAY;IACxC7C,MAAM,CAACS,SAAP,CAAiBoC,OAAjB,CAAyB3C,IAAzB,CAA8B,IAA9B;;IACA,KAAKyC,QAAL,CAAcE,OAAd;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;;;EACIhB,WAAW,CAACpB,SAAZ,CAAsBqC,YAAtB,GAAqC,YAAY;IAC7C,IAAI7C,KAAK,GAAG,IAAZ;;IACA,IAAI,KAAK8C,cAAL,IAAuB,CAA3B,EAA8B;MAC1B,KAAKC,KAAL,CAAWC,KAAX;IACH;;IACD,KAAKC,SAAL;IACA,KAAKpB,MAAL,CAAYqB,KAAZ;;IACAnD,MAAM,CAACS,SAAP,CAAiBqC,YAAjB,CAA8B5C,IAA9B,CAAmC,IAAnC;;IACA,IAAIkD,GAAG,GAAG,CAAV;IACA,IAAIC,KAAK,GAAG,CAAZ;IACA,IAAIC,GAAJ;IACA,IAAIC,IAAJ,CAX6C,CAY7C;;IACA7D,KAAK,CAAC8D,IAAN,CAAW,KAAKC,SAAL,CAAeC,QAAf,EAAX,EAAsC,UAAUf,QAAV,EAAoB;MACtD,IAAI/B,QAAQ,GAAG+B,QAAQ,CAAC/B,QAAxB;;MACA,IAAIA,QAAJ,EAAc;QACV,IAAI+C,IAAI,GAAG1D,KAAK,CAAC+C,KAAN,CAAYY,MAAZ,CAAmBhD,QAAnB,CAAX;;QACA,IAAI,CAAC+C,IAAL,EAAW;UACPA,IAAI,GAAG1D,KAAK,CAAC+C,KAAN,CAAYxB,MAAZ,CAAmBZ,QAAnB,CAAP;UACA+C,IAAI,CAACE,IAAL,GAAYjD,QAAZ;UACA+C,IAAI,CAACG,KAAL,GAAa7D,KAAb;UACA0D,IAAI,CAAChB,QAAL,GAAgBA,QAAhB;QACH;;QACDA,QAAQ,CAACoB,QAAT,GAAoBJ,IAApB;QACAhB,QAAQ,CAACoB,QAAT,CAAkBC,iBAAlB,CAAoCrC,IAApC,CAAyCgB,QAAzC;MACH;;MACD,IAAI1B,MAAM,GAAG0B,QAAQ,CAAC1B,MAAtB;;MACA,IAAIA,MAAJ,EAAY;QACR,IAAI0C,IAAI,GAAG1D,KAAK,CAAC+C,KAAN,CAAYY,MAAZ,CAAmB3C,MAAnB,CAAX;;QACA,IAAI,CAAC0C,IAAL,EAAW;UACPA,IAAI,GAAG1D,KAAK,CAAC+C,KAAN,CAAYxB,MAAZ,CAAmBP,MAAnB,CAAP;UACA0C,IAAI,CAACE,IAAL,GAAY5C,MAAZ;UACA0C,IAAI,CAACG,KAAL,GAAa7D,KAAb;UACA0D,IAAI,CAAChB,QAAL,GAAgBA,QAAhB;QACH;;QACDA,QAAQ,CAACsB,MAAT,GAAkBN,IAAlB;QACAhB,QAAQ,CAACsB,MAAT,CAAgBC,iBAAhB,CAAkCvC,IAAlC,CAAuCgB,QAAvC;MACH;;MACD,IAAI,CAACA,QAAQ,CAACoB,QAAd,EAAwB;QACpB,IAAII,cAAc,GAAG,IAAI7E,sBAAJ,EAArB;QACA6E,cAAc,CAACC,SAAf,GAA2B,CAAC,CAAD,EAAI,CAAJ,CAA3B;QACAzB,QAAQ,CAAC0B,IAAT,CAAcF,cAAd,GAA+BA,cAA/B;MACH;;MACD,IAAI,CAACxB,QAAQ,CAACsB,MAAd,EAAsB;QAClB,IAAIK,YAAY,GAAG,IAAIhF,sBAAJ,EAAnB;QACAgF,YAAY,CAACF,SAAb,GAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB;QACAzB,QAAQ,CAAC0B,IAAT,CAAcF,cAAd,GAA+BG,YAA/B;MACH;;MACD,IAAIjE,KAAK,GAAGsC,QAAQ,CAACtC,KAArB;;MACA,IAAIV,KAAK,CAAC4E,QAAN,CAAelE,KAAf,CAAJ,EAA2B;QACvB+C,GAAG,IAAI/C,KAAP;QACAgD,KAAK;;QACL,IAAIC,GAAG,GAAGjD,KAAN,IAAe,CAACV,KAAK,CAAC4E,QAAN,CAAejB,GAAf,CAApB,EAAyC;UACrCA,GAAG,GAAGjD,KAAN;QACH;;QACD,IAAIkD,IAAI,GAAGlD,KAAP,IAAgB,CAACV,KAAK,CAAC4E,QAAN,CAAehB,IAAf,CAArB,EAA2C;UACvCA,IAAI,GAAGlD,KAAP;QACH;MACJ;IACJ,CA9CD;IA+CA,IAAImE,GAAG,GAAG,OAAV;IACA,KAAK7B,QAAL,CAAc8B,kBAAd,CAAiCD,GAAjC,EAAsCjB,IAAtC,EAA4C,MAA5C;IACA,KAAKZ,QAAL,CAAc8B,kBAAd,CAAiCD,GAAjC,EAAsClB,GAAtC,EAA2C,KAA3C;IACA,KAAKX,QAAL,CAAc8B,kBAAd,CAAiCD,GAAjC,EAAsCpB,GAAtC,EAA2C,KAA3C;IACA,KAAKT,QAAL,CAAc8B,kBAAd,CAAiCD,GAAjC,EAAsCpB,GAAG,GAAGC,KAA5C,EAAmD,SAAnD;IACA,KAAKV,QAAL,CAAc8B,kBAAd,CAAiCD,GAAjC,EAAsCnB,KAAtC,EAA6C,OAA7C;IACA3D,KAAK,CAAC8D,IAAN,CAAW,KAAKR,KAAL,CAAWU,QAAX,EAAX,EAAkC,UAAUgB,OAAV,EAAmB;MACjD,IAAIf,IAAI,GAAGe,OAAO,CAAC,CAAD,CAAlB;;MACA,IAAIf,IAAI,CAACgB,IAAL,YAAqBlF,KAAzB,EAAgC;QAC5BkE,IAAI,CAACzC,KAAL,GAAayC,IAAI,CAACgB,IAAlB;MACH;;MACD,IAAIhB,IAAI,CAACzC,KAAL,IAAc0D,SAAlB,EAA6B;QACzBjB,IAAI,CAACzC,KAAL,GAAajB,KAAK,CAAC6B,MAAN,CAAa+C,IAAb,EAAb;MACH;;MACD,IAAIlB,IAAI,CAAChB,QAAL,CAAczB,KAAd,IAAuB0D,SAA3B,EAAsC;QAClCjB,IAAI,CAACzC,KAAL,GAAayC,IAAI,CAAChB,QAAL,CAAczB,KAA3B;MACH;;MACD,IAAI,CAACyC,IAAI,CAAChB,QAAL,CAAcmC,OAAnB,EAA4B;QACxBnB,IAAI,CAACoB,IAAL,CAAU,CAAV;MACH;;MACD9E,KAAK,CAAC+E,YAAN,CAAmBrB,IAAnB;IACH,CAfD;IAgBA,KAAKT,SAAL;IACA,KAAK+B,UAAL;EACH,CApFD;EAqFA;AACJ;AACA;AACA;AACA;;;EACIpD,WAAW,CAACpB,SAAZ,CAAsByE,gCAAtB,GAAyD,UAAUvC,QAAV,EAAoBkB,IAApB,EAA0B;IAC/E,KAAKsB,UAAL;EACH,CAFD;EAGA;AACJ;AACA;;;EACItD,WAAW,CAACpB,SAAZ,CAAsByC,SAAtB,GAAkC,YAAY;IAC1C,IAAI,KAAKlB,MAAL,IAAe,MAAnB,EAA2B;MACvB,KAAKoD,OAAL,GAAe,KAAKpC,KAAL,CAAWqC,cAAX,EAAf;IACH,CAFD,MAGK,IAAI,KAAKrD,MAAL,IAAe,OAAnB,EAA4B;MAC7B,KAAKoD,OAAL,GAAe1F,KAAK,CAAC4F,IAAN,CAAW,KAAKtC,KAAL,CAAWU,QAAX,EAAX,EAAkC,UAAU6B,CAAV,EAAaC,CAAb,EAAgB;QAAE,OAAO3F,MAAM,CAAC4F,OAAP,CAAe7F,OAAO,CAAC8F,KAAR,CAAcH,CAAC,CAAC,CAAD,CAAD,CAAKI,KAAnB,EAA0BH,CAAC,CAAC,CAAD,CAAD,CAAKG,KAA/B,CAAf,CAAP;MAA+D,CAAnH,CAAf;IACH,CAFI,MAGA;MACD,KAAKP,OAAL,GAAe,KAAKpC,KAAL,CAAWU,QAAX,EAAf;IACH;EACJ,CAVD;EAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI7B,WAAW,CAACpB,SAAZ,CAAsBuE,YAAtB,GAAqC,UAAUrB,IAAV,EAAgB;IACjD;IACA,IAAIiC,aAAa,GAAG,CAApB;IACA,IAAIC,aAAa,GAAG,CAApB;IACAnG,KAAK,CAAC8D,IAAN,CAAWG,IAAI,CAACO,iBAAL,CAAuBR,QAAvB,EAAX,EAA8C,UAAUf,QAAV,EAAoB;MAC9D,IAAItC,KAAK,GAAGsC,QAAQ,CAACmD,eAAT,CAAyB,OAAzB,CAAZ;;MACA,IAAInG,KAAK,CAAC4E,QAAN,CAAelE,KAAf,CAAJ,EAA2B;QACvBuF,aAAa,IAAIvF,KAAjB;MACH;IACJ,CALD;IAMAX,KAAK,CAAC8D,IAAN,CAAWG,IAAI,CAACK,iBAAL,CAAuBN,QAAvB,EAAX,EAA8C,UAAUf,QAAV,EAAoB;MAC9D,IAAItC,KAAK,GAAGsC,QAAQ,CAACmD,eAAT,CAAyB,OAAzB,CAAZ;;MACA,IAAInG,KAAK,CAAC4E,QAAN,CAAelE,KAAf,CAAJ,EAA2B;QACvBwF,aAAa,IAAIxF,KAAjB;MACH;IACJ,CALD;IAMAsD,IAAI,CAACgC,KAAL,GAAaC,aAAa,GAAGC,aAA7B;IACAlC,IAAI,CAACoC,aAAL,GAAqBH,aAArB;IACAjC,IAAI,CAACqC,aAAL,GAAqBH,aAArB;EACH,CAnBD;;EAoBA;EACA;AACJ;AACA;AACA;AACA;;EACIhE,WAAW,CAACpB,SAAZ,CAAsBwF,aAAtB,GAAsC,YAAY;IAC9C,KAAK/C,SAAL;EACH,CAFD;EAGA;AACJ;AACA;AACA;;;EACIrB,WAAW,CAACpB,SAAZ,CAAsByF,qBAAtB,GAA8C,YAAY;IACtDlG,MAAM,CAACS,SAAP,CAAiByF,qBAAjB,CAAuChG,IAAvC,CAA4C,IAA5C,EADsD,CAEtD;IACA;;;IACA,IAAI,CAACP,KAAK,CAACwG,QAAN,CAAe,KAAKC,WAApB,CAAL,EAAuC;MACnC,KAAKA,WAAL,GAAmB,KAAKC,QAAL,CAAcC,SAAd,CAAwB,cAAxB,CAAnB;IACH;EACJ,CAPD;EAQA;AACJ;AACA;AACA;AACA;;;EACIzE,WAAW,CAACpB,SAAZ,CAAsBmC,cAAtB,GAAuC,YAAY;IAC/C,OAAO,IAAI7C,mBAAJ,EAAP;EACH,CAFD;;EAGAQ,MAAM,CAACC,cAAP,CAAsBqB,WAAW,CAACpB,SAAlC,EAA6C,aAA7C,EAA4D;IACxD;AACR;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,KAAK6F,gBAAL,CAAsB,aAAtB,CAAP;IACH,CANuD;;IAOxD;AACR;AACA;AACA;AACA;AACA;AACA;IACQ1F,GAAG,EAAE,UAAUR,KAAV,EAAiB;MAClB,KAAKmG,gBAAL,CAAsB,aAAtB,EAAqCnG,KAArC,EAA4C,IAA5C;IACH,CAhBuD;IAiBxDU,UAAU,EAAE,IAjB4C;IAkBxDC,YAAY,EAAE;EAlB0C,CAA5D;EAoBAT,MAAM,CAACC,cAAP,CAAsBqB,WAAW,CAACpB,SAAlC,EAA6C,QAA7C,EAAuD;IACnD;AACR;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,KAAK6F,gBAAL,CAAsB,QAAtB,CAAP;IACH,CANkD;;IAOnD;AACR;AACA;AACA;AACA;IACQ1F,GAAG,EAAE,UAAUR,KAAV,EAAiB;MAClB,KAAKmG,gBAAL,CAAsB,QAAtB,EAAgCnG,KAAhC;MACA,KAAK4F,aAAL;IACH,CAfkD;IAgBnDlF,UAAU,EAAE,IAhBuC;IAiBnDC,YAAY,EAAE;EAjBqC,CAAvD;EAmBAT,MAAM,CAACC,cAAP,CAAsBqB,WAAW,CAACpB,SAAlC,EAA6C,aAA7C,EAA4D;IACxD;AACR;AACA;IACQC,GAAG,EAAE,YAAY;MACb,OAAO,KAAK6F,gBAAL,CAAsB,aAAtB,CAAP;IACH,CANuD;;IAOxD;AACR;AACA;AACA;AACA;AACA;IACQ1F,GAAG,EAAE,UAAUR,KAAV,EAAiB;MAClB,KAAKmG,gBAAL,CAAsB,aAAtB,EAAqCnG,KAArC,EAA4C,IAA5C;IACH,CAfuD;IAgBxDU,UAAU,EAAE,IAhB4C;IAiBxDC,YAAY,EAAE;EAjB0C,CAA5D;EAmBAT,MAAM,CAACC,cAAP,CAAsBqB,WAAW,CAACpB,SAAlC,EAA6C,OAA7C,EAAsD;IAClD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,YAAY;MACb,IAAI,CAAC,KAAK+F,MAAV,EAAkB;QACd,IAAIC,QAAQ,GAAG,KAAKC,UAAL,EAAf;QACAD,QAAQ,CAACE,MAAT,CAAgBC,EAAhB,CAAmB,KAAnB,EAA0B,UAAUC,KAAV,EAAiB;UACvCA,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBF,KAAvB;QACH,CAFD;QAGA,KAAKL,MAAL,GAAc,IAAIzH,kBAAJ,CAAuB0H,QAAvB,CAAd;;QACA,KAAKhF,UAAL,CAAgBC,IAAhB,CAAqB,IAAI1C,kBAAJ,CAAuB,KAAKwH,MAA5B,CAArB;MACH;;MACD,OAAO,KAAKA,MAAZ;IACH,CAhBiD;IAiBlD1F,UAAU,EAAE,IAjBsC;IAkBlDC,YAAY,EAAE;EAlBoC,CAAtD;EAoBA;AACJ;AACA;;EACIa,WAAW,CAACpB,SAAZ,CAAsBkG,UAAtB,GAAmC,YAAY;IAC3C,IAAIhD,IAAI,GAAG,IAAIvE,eAAJ,EAAX;;IACA,KAAKsC,UAAL,CAAgBC,IAAhB,CAAqBgC,IAArB;;IACA,OAAOA,IAAP;EACH,CAJD;;EAKApD,MAAM,CAACC,cAAP,CAAsBqB,WAAW,CAACpB,SAAlC,EAA6C,OAA7C,EAAsD;IAClD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,YAAY;MACb,IAAI,CAAC,KAAKuG,MAAV,EAAkB;QACd,KAAKA,MAAL,GAAc,IAAInI,YAAJ,CAAiB,KAAKoI,UAAL,EAAjB,CAAd;;QACA,KAAKxF,UAAL,CAAgBC,IAAhB,CAAqB,IAAI5C,YAAJ,CAAiB,KAAKkI,MAAtB,CAArB;MACH;;MACD,OAAO,KAAKA,MAAZ;IACH,CAZiD;IAalDlG,UAAU,EAAE,IAbsC;IAclDC,YAAY,EAAE;EAdoC,CAAtD;EAgBA;AACJ;AACA;;EACIa,WAAW,CAACpB,SAAZ,CAAsByG,UAAtB,GAAmC,YAAY;IAC3C,IAAI7C,IAAI,GAAG,IAAIhF,eAAJ,EAAX;;IACA,KAAKqC,UAAL,CAAgBC,IAAhB,CAAqB0C,IAArB;;IACA,OAAOA,IAAP;EACH,CAJD;EAKA;AACJ;AACA;AACA;;;EACIxC,WAAW,CAACpB,SAAZ,CAAsBwE,UAAtB,GAAmC,YAAY;IAC3C,IAAIkC,MAAM,GAAG,KAAKA,MAAlB;;IACA,IAAIA,MAAJ,EAAY;MACR,IAAIC,YAAY,GAAG,EAAnB;MACA,KAAKpE,KAAL,CAAWQ,IAAX,CAAgB,UAAUgB,GAAV,EAAeb,IAAf,EAAqB;QACjCyD,YAAY,CAACzF,IAAb,CAAkBgC,IAAlB;MACH,CAFD;MAGAwD,MAAM,CAACE,IAAP,GAAcD,YAAd;MACAD,MAAM,CAACG,UAAP,CAAkBzD,IAAlB,GAAyB,MAAzB;IACH;EACJ,CAVD;EAWA;AACJ;AACA;;;EACIhC,WAAW,CAACpB,SAAZ,CAAsB8G,WAAtB,GAAoC,YAAY;IAC5CvH,MAAM,CAACS,SAAP,CAAiB8G,WAAjB,CAA6BrH,IAA7B,CAAkC,IAAlC;;IACA,KAAK8C,KAAL,CAAWC,KAAX;EACH,CAHD;;EAIA,OAAOpB,WAAP;AACH,CAvVgC,CAuV/BjD,KAvV+B,CAAjC;;AAwVA,SAASiD,WAAT;AACA;AACA;AACA;AACA;AACA;AACA;;AACA1C,QAAQ,CAACqI,iBAAT,CAA2B,aAA3B,IAA4C3F,WAA5C"},"metadata":{},"sourceType":"module"}