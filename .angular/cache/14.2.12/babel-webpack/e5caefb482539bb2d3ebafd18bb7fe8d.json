{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Dictionary } from \"./utils/Dictionary\";\nimport { TargetedEventDispatcher } from \"./utils/EventDispatcher\";\nimport { MultiDisposer, CounterDisposer } from \"./utils/Disposer\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $object from \"./utils/Object\";\n/**\r\n * An [[EventDispatcher]] for [[Sprite]].\r\n *\r\n * @important\r\n */\n\nvar SpriteEventDispatcher =\n/** @class */\nfunction (_super) {\n  __extends(SpriteEventDispatcher, _super);\n\n  function SpriteEventDispatcher() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * [_interactionEvents description]\r\n     *\r\n     * @todo Description\r\n     */\n\n\n    _this._interactionEvents = new Dictionary();\n    return _this;\n  }\n  /**\r\n   * [_dispatchSpriteEvent description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  SpriteEventDispatcher.prototype._dispatchSpriteEvent = function (ev) {\n    if (this.target.disabled || this.target.isTemplate) {\n      return;\n    } // TODO remove this <any> later\n\n\n    if (this.target.events.isEnabled(ev.type)) {\n      var imev = $object.merge(ev, {\n        target: this.target\n      });\n      this.target.events.dispatchImmediately(imev.type, imev);\n    }\n  };\n  /**\r\n   * [_dispatchSpritePointEvent description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  SpriteEventDispatcher.prototype._dispatchSpritePointEvent = function (ev) {\n    if (this.target.disabled || this.target.isTemplate) {\n      return;\n    } // TODO remove this <any> later\n\n\n    if (this.target.events.isEnabled(ev.type)) {\n      var imev = $object.merge(ev, {\n        target: this.target,\n        spritePoint: ev.point ? $utils.documentPointToSprite(ev.point, this.target) : undefined,\n        svgPoint: this.target.getSvgPoint(ev.point)\n      });\n      this.target.events.dispatchImmediately(imev.type, imev);\n    }\n  };\n  /**\r\n   * [_addInteractionObjectEvent description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  SpriteEventDispatcher.prototype._addInteractionObjectEvent = function (type, callback, context, shouldClone) {\n    var _this = this;\n\n    var key = shouldClone + \"-\" + type;\n\n    var counter = this._interactionEvents.insertKeyIfEmpty(key, function () {\n      var disposer = _this.target.interactions.events.on(type, callback, context, shouldClone);\n\n      return new CounterDisposer(function () {\n        _this._interactionEvents.removeKey(key);\n\n        disposer.dispose();\n      });\n    });\n\n    return counter.increment();\n  };\n  /**\r\n   * [_on description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  SpriteEventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {\n    var info = _super.prototype._on.call(this, once, type, callback, context, shouldClone, dispatch);\n\n    var disposers = [info.disposer];\n    /**\r\n     * Catching Sprite-related events, converting them to [[SpriteEvent]] and\r\n     * triggering them on sprite\r\n     */\n\n    switch (type) {\n      case \"hit\":\n      case \"track\":\n      case \"doublehit\":\n      case \"wheel\":\n      case \"wheelup\":\n      case \"wheeldown\":\n      case \"wheelleft\":\n      case \"wheelright\":\n        disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpritePointEvent, this, shouldClone));\n        break;\n\n      case \"rightclick\":\n      case \"down\": //case \"hold\":\n\n      case \"up\":\n      case \"drag\":\n      case \"dragged\":\n      case \"dragstart\":\n      case \"dragstop\":\n      case \"over\":\n      case \"out\":\n      case \"swipe\":\n      case \"swipeleft\":\n      case \"swiperight\":\n      case \"resize\": //case \"rotate\":\n\n      case \"focus\":\n      case \"blur\":\n      case \"toggled\":\n        disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpriteEvent, this, shouldClone));\n        break;\n    }\n    /**\r\n     * Set functional properties based on events. For example if we add a\r\n     * \"drag\" event handler, we want to make the Sprite draggable, even if we\r\n     * don't explicitly set \"draggable\"\r\n     */\n\n\n    switch (type) {\n      case \"hit\":\n      case \"doublehit\":\n      case \"rightclick\":\n      case \"down\":\n      case \"up\":\n        this.target.clickable = true;\n        break;\n\n      case \"toggled\":\n        this.target.togglable = true;\n        break;\n\n      case \"drag\":\n      case \"dragstart\":\n      case \"dragstop\":\n        this.target.draggable = true;\n        break;\n\n      case \"track\":\n        this.target.trackable = true;\n        break;\n\n      case \"resize\":\n        this.target.resizable = true;\n        break;\n\n      case \"swipe\":\n      case \"swipeleft\":\n      case \"swiperight\":\n        this.target.swipeable = true;\n        break;\n\n      case \"wheel\":\n      case \"wheelup\":\n      case \"wheeldown\":\n      case \"wheelleft\":\n      case \"wheelright\":\n        this.target.wheelable = true;\n        break;\n\n      case \"over\":\n        this.target.hoverable = true;\n\n      case \"out\":\n        this.target.hoverable = true;\n        break;\n\n      case \"focus\":\n      case \"blur\":\n        this.target.focusable = true;\n        break;\n    }\n\n    info.disposer = new MultiDisposer(disposers);\n    return info;\n  };\n\n  return SpriteEventDispatcher;\n}(TargetedEventDispatcher);\n\nexport { SpriteEventDispatcher };","map":{"version":3,"names":["__extends","Dictionary","TargetedEventDispatcher","MultiDisposer","CounterDisposer","$utils","$object","SpriteEventDispatcher","_super","_this","apply","arguments","_interactionEvents","prototype","_dispatchSpriteEvent","ev","target","disabled","isTemplate","events","isEnabled","type","imev","merge","dispatchImmediately","_dispatchSpritePointEvent","spritePoint","point","documentPointToSprite","undefined","svgPoint","getSvgPoint","_addInteractionObjectEvent","callback","context","shouldClone","key","counter","insertKeyIfEmpty","disposer","interactions","on","removeKey","dispose","increment","_on","once","dispatch","info","call","disposers","push","clickable","togglable","draggable","trackable","resizable","swipeable","wheelable","hoverable","focusable"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/SpriteEvents.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\nimport { TargetedEventDispatcher } from \"./utils/EventDispatcher\";\r\nimport { MultiDisposer, CounterDisposer } from \"./utils/Disposer\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $object from \"./utils/Object\";\r\n/**\r\n * An [[EventDispatcher]] for [[Sprite]].\r\n *\r\n * @important\r\n */\r\nvar SpriteEventDispatcher = /** @class */ (function (_super) {\r\n    __extends(SpriteEventDispatcher, _super);\r\n    function SpriteEventDispatcher() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * [_interactionEvents description]\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._interactionEvents = new Dictionary();\r\n        return _this;\r\n    }\r\n    /**\r\n     * [_dispatchSpriteEvent description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    SpriteEventDispatcher.prototype._dispatchSpriteEvent = function (ev) {\r\n        if (this.target.disabled || this.target.isTemplate) {\r\n            return;\r\n        }\r\n        // TODO remove this <any> later\r\n        if (this.target.events.isEnabled(ev.type)) {\r\n            var imev = $object.merge(ev, {\r\n                target: this.target\r\n            });\r\n            this.target.events.dispatchImmediately(imev.type, imev);\r\n        }\r\n    };\r\n    /**\r\n     * [_dispatchSpritePointEvent description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    SpriteEventDispatcher.prototype._dispatchSpritePointEvent = function (ev) {\r\n        if (this.target.disabled || this.target.isTemplate) {\r\n            return;\r\n        }\r\n        // TODO remove this <any> later\r\n        if (this.target.events.isEnabled(ev.type)) {\r\n            var imev = $object.merge(ev, {\r\n                target: this.target,\r\n                spritePoint: ev.point ? $utils.documentPointToSprite(ev.point, this.target) : undefined,\r\n                svgPoint: this.target.getSvgPoint(ev.point)\r\n            });\r\n            this.target.events.dispatchImmediately(imev.type, imev);\r\n        }\r\n    };\r\n    /**\r\n     * [_addInteractionObjectEvent description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    SpriteEventDispatcher.prototype._addInteractionObjectEvent = function (type, callback, context, shouldClone) {\r\n        var _this = this;\r\n        var key = shouldClone + \"-\" + type;\r\n        var counter = this._interactionEvents.insertKeyIfEmpty(key, function () {\r\n            var disposer = _this.target.interactions.events.on(type, callback, context, shouldClone);\r\n            return new CounterDisposer(function () {\r\n                _this._interactionEvents.removeKey(key);\r\n                disposer.dispose();\r\n            });\r\n        });\r\n        return counter.increment();\r\n    };\r\n    /**\r\n     * [_on description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    SpriteEventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {\r\n        var info = _super.prototype._on.call(this, once, type, callback, context, shouldClone, dispatch);\r\n        var disposers = [info.disposer];\r\n        /**\r\n         * Catching Sprite-related events, converting them to [[SpriteEvent]] and\r\n         * triggering them on sprite\r\n         */\r\n        switch (type) {\r\n            case \"hit\":\r\n            case \"track\":\r\n            case \"doublehit\":\r\n            case \"wheel\":\r\n            case \"wheelup\":\r\n            case \"wheeldown\":\r\n            case \"wheelleft\":\r\n            case \"wheelright\":\r\n                disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpritePointEvent, this, shouldClone));\r\n                break;\r\n            case \"rightclick\":\r\n            case \"down\":\r\n            //case \"hold\":\r\n            case \"up\":\r\n            case \"drag\":\r\n            case \"dragged\":\r\n            case \"dragstart\":\r\n            case \"dragstop\":\r\n            case \"over\":\r\n            case \"out\":\r\n            case \"swipe\":\r\n            case \"swipeleft\":\r\n            case \"swiperight\":\r\n            case \"resize\":\r\n            //case \"rotate\":\r\n            case \"focus\":\r\n            case \"blur\":\r\n            case \"toggled\":\r\n                disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpriteEvent, this, shouldClone));\r\n                break;\r\n        }\r\n        /**\r\n         * Set functional properties based on events. For example if we add a\r\n         * \"drag\" event handler, we want to make the Sprite draggable, even if we\r\n         * don't explicitly set \"draggable\"\r\n         */\r\n        switch (type) {\r\n            case \"hit\":\r\n            case \"doublehit\":\r\n            case \"rightclick\":\r\n            case \"down\":\r\n            case \"up\":\r\n                this.target.clickable = true;\r\n                break;\r\n            case \"toggled\":\r\n                this.target.togglable = true;\r\n                break;\r\n            case \"drag\":\r\n            case \"dragstart\":\r\n            case \"dragstop\":\r\n                this.target.draggable = true;\r\n                break;\r\n            case \"track\":\r\n                this.target.trackable = true;\r\n                break;\r\n            case \"resize\":\r\n                this.target.resizable = true;\r\n                break;\r\n            case \"swipe\":\r\n            case \"swipeleft\":\r\n            case \"swiperight\":\r\n                this.target.swipeable = true;\r\n                break;\r\n            case \"wheel\":\r\n            case \"wheelup\":\r\n            case \"wheeldown\":\r\n            case \"wheelleft\":\r\n            case \"wheelright\":\r\n                this.target.wheelable = true;\r\n                break;\r\n            case \"over\":\r\n                this.target.hoverable = true;\r\n            case \"out\":\r\n                this.target.hoverable = true;\r\n                break;\r\n            case \"focus\":\r\n            case \"blur\":\r\n                this.target.focusable = true;\r\n                break;\r\n        }\r\n        info.disposer = new MultiDisposer(disposers);\r\n        return info;\r\n    };\r\n    return SpriteEventDispatcher;\r\n}(TargetedEventDispatcher));\r\nexport { SpriteEventDispatcher };\r\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,uBAAT,QAAwC,yBAAxC;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,kBAA/C;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,gBAAzB;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,qBAAqB;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACzDR,SAAS,CAACO,qBAAD,EAAwBC,MAAxB,CAAT;;EACA,SAASD,qBAAT,GAAiC;IAC7B,IAAIE,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAAhE;IACA;AACR;AACA;AACA;AACA;;;IACQF,KAAK,CAACG,kBAAN,GAA2B,IAAIX,UAAJ,EAA3B;IACA,OAAOQ,KAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIF,qBAAqB,CAACM,SAAtB,CAAgCC,oBAAhC,GAAuD,UAAUC,EAAV,EAAc;IACjE,IAAI,KAAKC,MAAL,CAAYC,QAAZ,IAAwB,KAAKD,MAAL,CAAYE,UAAxC,EAAoD;MAChD;IACH,CAHgE,CAIjE;;;IACA,IAAI,KAAKF,MAAL,CAAYG,MAAZ,CAAmBC,SAAnB,CAA6BL,EAAE,CAACM,IAAhC,CAAJ,EAA2C;MACvC,IAAIC,IAAI,GAAGhB,OAAO,CAACiB,KAAR,CAAcR,EAAd,EAAkB;QACzBC,MAAM,EAAE,KAAKA;MADY,CAAlB,CAAX;MAGA,KAAKA,MAAL,CAAYG,MAAZ,CAAmBK,mBAAnB,CAAuCF,IAAI,CAACD,IAA5C,EAAkDC,IAAlD;IACH;EACJ,CAXD;EAYA;AACJ;AACA;AACA;AACA;;;EACIf,qBAAqB,CAACM,SAAtB,CAAgCY,yBAAhC,GAA4D,UAAUV,EAAV,EAAc;IACtE,IAAI,KAAKC,MAAL,CAAYC,QAAZ,IAAwB,KAAKD,MAAL,CAAYE,UAAxC,EAAoD;MAChD;IACH,CAHqE,CAItE;;;IACA,IAAI,KAAKF,MAAL,CAAYG,MAAZ,CAAmBC,SAAnB,CAA6BL,EAAE,CAACM,IAAhC,CAAJ,EAA2C;MACvC,IAAIC,IAAI,GAAGhB,OAAO,CAACiB,KAAR,CAAcR,EAAd,EAAkB;QACzBC,MAAM,EAAE,KAAKA,MADY;QAEzBU,WAAW,EAAEX,EAAE,CAACY,KAAH,GAAWtB,MAAM,CAACuB,qBAAP,CAA6Bb,EAAE,CAACY,KAAhC,EAAuC,KAAKX,MAA5C,CAAX,GAAiEa,SAFrD;QAGzBC,QAAQ,EAAE,KAAKd,MAAL,CAAYe,WAAZ,CAAwBhB,EAAE,CAACY,KAA3B;MAHe,CAAlB,CAAX;MAKA,KAAKX,MAAL,CAAYG,MAAZ,CAAmBK,mBAAnB,CAAuCF,IAAI,CAACD,IAA5C,EAAkDC,IAAlD;IACH;EACJ,CAbD;EAcA;AACJ;AACA;AACA;AACA;;;EACIf,qBAAqB,CAACM,SAAtB,CAAgCmB,0BAAhC,GAA6D,UAAUX,IAAV,EAAgBY,QAAhB,EAA0BC,OAA1B,EAAmCC,WAAnC,EAAgD;IACzG,IAAI1B,KAAK,GAAG,IAAZ;;IACA,IAAI2B,GAAG,GAAGD,WAAW,GAAG,GAAd,GAAoBd,IAA9B;;IACA,IAAIgB,OAAO,GAAG,KAAKzB,kBAAL,CAAwB0B,gBAAxB,CAAyCF,GAAzC,EAA8C,YAAY;MACpE,IAAIG,QAAQ,GAAG9B,KAAK,CAACO,MAAN,CAAawB,YAAb,CAA0BrB,MAA1B,CAAiCsB,EAAjC,CAAoCpB,IAApC,EAA0CY,QAA1C,EAAoDC,OAApD,EAA6DC,WAA7D,CAAf;;MACA,OAAO,IAAI/B,eAAJ,CAAoB,YAAY;QACnCK,KAAK,CAACG,kBAAN,CAAyB8B,SAAzB,CAAmCN,GAAnC;;QACAG,QAAQ,CAACI,OAAT;MACH,CAHM,CAAP;IAIH,CANa,CAAd;;IAOA,OAAON,OAAO,CAACO,SAAR,EAAP;EACH,CAXD;EAYA;AACJ;AACA;AACA;AACA;;;EACIrC,qBAAqB,CAACM,SAAtB,CAAgCgC,GAAhC,GAAsC,UAAUC,IAAV,EAAgBzB,IAAhB,EAAsBY,QAAtB,EAAgCC,OAAhC,EAAyCC,WAAzC,EAAsDY,QAAtD,EAAgE;IAClG,IAAIC,IAAI,GAAGxC,MAAM,CAACK,SAAP,CAAiBgC,GAAjB,CAAqBI,IAArB,CAA0B,IAA1B,EAAgCH,IAAhC,EAAsCzB,IAAtC,EAA4CY,QAA5C,EAAsDC,OAAtD,EAA+DC,WAA/D,EAA4EY,QAA5E,CAAX;;IACA,IAAIG,SAAS,GAAG,CAACF,IAAI,CAACT,QAAN,CAAhB;IACA;AACR;AACA;AACA;;IACQ,QAAQlB,IAAR;MACI,KAAK,KAAL;MACA,KAAK,OAAL;MACA,KAAK,WAAL;MACA,KAAK,OAAL;MACA,KAAK,SAAL;MACA,KAAK,WAAL;MACA,KAAK,WAAL;MACA,KAAK,YAAL;QACI6B,SAAS,CAACC,IAAV,CAAe,KAAKnB,0BAAL,CAAgCX,IAAhC,EAAsC,KAAKI,yBAA3C,EAAsE,IAAtE,EAA4EU,WAA5E,CAAf;QACA;;MACJ,KAAK,YAAL;MACA,KAAK,MAAL,CAZJ,CAaI;;MACA,KAAK,IAAL;MACA,KAAK,MAAL;MACA,KAAK,SAAL;MACA,KAAK,WAAL;MACA,KAAK,UAAL;MACA,KAAK,MAAL;MACA,KAAK,KAAL;MACA,KAAK,OAAL;MACA,KAAK,WAAL;MACA,KAAK,YAAL;MACA,KAAK,QAAL,CAxBJ,CAyBI;;MACA,KAAK,OAAL;MACA,KAAK,MAAL;MACA,KAAK,SAAL;QACIe,SAAS,CAACC,IAAV,CAAe,KAAKnB,0BAAL,CAAgCX,IAAhC,EAAsC,KAAKP,oBAA3C,EAAiE,IAAjE,EAAuEqB,WAAvE,CAAf;QACA;IA9BR;IAgCA;AACR;AACA;AACA;AACA;;;IACQ,QAAQd,IAAR;MACI,KAAK,KAAL;MACA,KAAK,WAAL;MACA,KAAK,YAAL;MACA,KAAK,MAAL;MACA,KAAK,IAAL;QACI,KAAKL,MAAL,CAAYoC,SAAZ,GAAwB,IAAxB;QACA;;MACJ,KAAK,SAAL;QACI,KAAKpC,MAAL,CAAYqC,SAAZ,GAAwB,IAAxB;QACA;;MACJ,KAAK,MAAL;MACA,KAAK,WAAL;MACA,KAAK,UAAL;QACI,KAAKrC,MAAL,CAAYsC,SAAZ,GAAwB,IAAxB;QACA;;MACJ,KAAK,OAAL;QACI,KAAKtC,MAAL,CAAYuC,SAAZ,GAAwB,IAAxB;QACA;;MACJ,KAAK,QAAL;QACI,KAAKvC,MAAL,CAAYwC,SAAZ,GAAwB,IAAxB;QACA;;MACJ,KAAK,OAAL;MACA,KAAK,WAAL;MACA,KAAK,YAAL;QACI,KAAKxC,MAAL,CAAYyC,SAAZ,GAAwB,IAAxB;QACA;;MACJ,KAAK,OAAL;MACA,KAAK,SAAL;MACA,KAAK,WAAL;MACA,KAAK,WAAL;MACA,KAAK,YAAL;QACI,KAAKzC,MAAL,CAAY0C,SAAZ,GAAwB,IAAxB;QACA;;MACJ,KAAK,MAAL;QACI,KAAK1C,MAAL,CAAY2C,SAAZ,GAAwB,IAAxB;;MACJ,KAAK,KAAL;QACI,KAAK3C,MAAL,CAAY2C,SAAZ,GAAwB,IAAxB;QACA;;MACJ,KAAK,OAAL;MACA,KAAK,MAAL;QACI,KAAK3C,MAAL,CAAY4C,SAAZ,GAAwB,IAAxB;QACA;IA1CR;;IA4CAZ,IAAI,CAACT,QAAL,GAAgB,IAAIpC,aAAJ,CAAkB+C,SAAlB,CAAhB;IACA,OAAOF,IAAP;EACH,CA1FD;;EA2FA,OAAOzC,qBAAP;AACH,CAlK0C,CAkKzCL,uBAlKyC,CAA3C;;AAmKA,SAASK,qBAAT"},"metadata":{},"sourceType":"module"}