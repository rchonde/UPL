{"ast":null,"code":"/**\r\n * Polyspline (smoothed line) module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Polyline } from \"./Polyline\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a polysline. (smoothed multi-sigment line)\r\n *\r\n * @see {@link IPolysplineEvents} for a list of available events\r\n * @see {@link IPolysplineAdapters} for a list of available Adapters\r\n */\n\nvar Polyspline =\n/** @class */\nfunction (_super) {\n  __extends(Polyspline, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Polyspline() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Polyspline\";\n    _this.tensionX = 0.5;\n    _this.tensionY = 0.5;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Creats and adds an SVG path for the arc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Polyspline.prototype.makePath = function () {\n    this._distance = 0;\n    var segments = this.segments;\n    var tensionX = this.tensionX;\n    var tensionY = this.tensionY;\n    this.allPoints = [];\n\n    if (segments && segments.length > 0) {\n      var path = \"\";\n      this._realSegments = [];\n\n      for (var i = 0, len = segments.length; i < len; i++) {\n        var points = segments[i];\n        var realPoints = [];\n\n        this._realSegments.push(realPoints);\n\n        if (points.length > 0) {\n          var first = points[0];\n          var last = points[points.length - 1];\n          var closed_1 = false;\n\n          if ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\n            closed_1 = true;\n          }\n\n          path += $path.moveTo(points[0]);\n\n          for (var p = 0; p < points.length - 1; p++) {\n            var p0 = points[p - 1];\n            var p1 = points[p];\n            var p2 = points[p + 1];\n            var p3 = points[p + 2];\n\n            if (p === 0) {\n              p0 = points[p];\n            } else if (p == points.length - 2) {\n              p3 = points[p + 1];\n            }\n\n            if (!p3) {\n              p3 = p2;\n            }\n\n            if (p === 0) {\n              if (closed_1) {\n                p0 = points[points.length - 2];\n              } else {\n                p0 = points[i];\n              }\n            } else if (p == points.length - 2) {\n              if (closed_1) {\n                p3 = points[1];\n              } else {\n                p3 = points[p + 1];\n              }\n            }\n\n            var controlPointA = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\n            var controlPointB = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\n            path += $path.cubicCurveTo(p2, controlPointA, controlPointB); // now split to small segments so that we could have positionToPoint later\n\n            var stepCount = Math.ceil($math.getCubicCurveDistance(p1, p2, controlPointA, controlPointB, 20)) * 1.2;\n            var prevPoint = p1;\n\n            if (stepCount > 0) {\n              // not good for curved charts\n              //this.allPoints[0] = { x: points[0].x, y: points[0].y, angle: $math.getAngle(points[0], points[1]) };\n              //realPoints.push(this.allPoints[0]);\n              for (var s = 0; s <= stepCount; s++) {\n                var point = $math.getPointOnCubicCurve(p1, p2, controlPointA, controlPointB, s / stepCount);\n\n                if (point.x == prevPoint.x && point.y == prevPoint.y) {\n                  continue;\n                }\n\n                realPoints.push(point);\n                var angle = $math.round($math.getAngle(prevPoint, point), 5); //this.allPoints.push({ x: point.x, y: point.y, angle: angle });\n\n                this._distance += $math.getDistance(prevPoint, point);\n                this.allPoints[Math.floor(this._distance)] = {\n                  x: point.x,\n                  y: point.y,\n                  angle: angle\n                };\n                prevPoint = point;\n              }\n            } else {\n              realPoints.push(p0);\n            }\n          }\n        }\n\n        var allPoints = this.allPoints;\n\n        if (allPoints.length > 1) {\n          for (var i_1 = 0; i_1 < allPoints.length; i_1++) {\n            if (!allPoints[i_1]) {\n              if (i_1 > 1) {\n                allPoints[i_1] = allPoints[i_1 - 1];\n              } else {\n                for (var k = 1; k < allPoints.length; k++) {\n                  if (allPoints[k]) {\n                    allPoints[i_1] = allPoints[k];\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.path = path;\n    }\n  };\n  /**\r\n   * Returns an index of the point that is closest to specified coordinates.\r\n   *\r\n   * @param   point  Reference point\r\n   * @return         Index\r\n   */\n\n\n  Polyspline.prototype.getClosestPointIndex = function (point) {\n    var points = this.allPoints;\n    var index;\n    var closest = Infinity;\n\n    if (points.length > 1) {\n      for (var p = 1; p < points.length; p++) {\n        var distance = $math.getDistance(point, points[p]);\n\n        if (distance < closest) {\n          index = p;\n          closest = distance;\n        }\n      }\n    }\n\n    return index;\n  };\n\n  Object.defineProperty(Polyspline.prototype, \"tensionX\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tensionX\");\n    },\n\n    /**\r\n     * Horizontal tension for the spline.\r\n     *\r\n     * Used by the line smoothing algorithm.\r\n     *\r\n     * @default 0.5\r\n     * @param value  Tension\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tensionX\", value);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Polyspline.prototype, \"tensionY\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tensionY\");\n    },\n\n    /**\r\n     * Vertical tension for the spline.\r\n     *\r\n     * Used by the line smoothing algorithm.\r\n     *\r\n     * @default 0.5\r\n     * @param value  Tensions\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tensionY\", value, true);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n\n  Polyspline.prototype.positionToPoint = function (position, extend) {\n    var deltaAngle = 0;\n    var allPoints = this.allPoints;\n    var len = allPoints.length;\n\n    if (!$type.isNumber(position)) {\n      position = 0;\n    }\n\n    if (len > 1) {\n      if (extend && len > 3) {\n        if (position < 0) {\n          if (position < -0.01) {\n            position = -0.01;\n          }\n\n          var f0 = allPoints[0];\n          var f1 = allPoints[1];\n          var x = f0.x - (f0.x - f1.x) * len * position;\n          var y = f0.y - (f0.y - f1.y) * len * position;\n          return {\n            x: x,\n            y: y,\n            angle: $math.getAngle(f0, f1)\n          };\n        } else if (position > 1) {\n          if (position > 1.01) {\n            position = 1.01;\n          }\n\n          var f0 = allPoints[allPoints.length - 2];\n          var f1 = allPoints[allPoints.length - 3];\n          var x = f0.x + (f0.x - f1.x) * len * (position - 1);\n          var y = f0.y + (f0.y - f1.y) * len * (position - 1);\n          return {\n            x: x,\n            y: y,\n            angle: $math.getAngle(f0, {\n              x: x,\n              y: y\n            })\n          };\n        } else if (position == 1) {\n          var point_1 = allPoints[allPoints.length - 1];\n          return {\n            x: point_1.x,\n            y: point_1.y,\n            angle: point_1.angle\n          };\n        }\n      } else {\n        if (position < 0) {\n          position = Math.abs(position);\n          deltaAngle = 180;\n        }\n\n        if (position >= 1) {\n          position = 0.9999999999999;\n        }\n      }\n\n      var point = allPoints[Math.floor(position * len)];\n      return {\n        x: point.x,\n        y: point.y,\n        angle: point.angle + deltaAngle\n      };\n    } else if (len == 1) {\n      var point = allPoints[0];\n      return {\n        x: point.x,\n        y: point.y,\n        angle: point.angle\n      };\n    } else {\n      return {\n        x: 0,\n        y: 0,\n        angle: 0\n      };\n    }\n  };\n\n  return Polyspline;\n}(Polyline);\n\nexport { Polyspline };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Polyspline\"] = Polyspline;","map":{"version":3,"names":["__extends","Polyline","registry","$math","$type","$path","Polyspline","_super","_this","call","className","tensionX","tensionY","applyTheme","prototype","makePath","_distance","segments","allPoints","length","path","_realSegments","i","len","points","realPoints","push","first","last","closed_1","round","x","y","moveTo","p","p0","p1","p2","p3","controlPointA","getCubicControlPointA","controlPointB","getCubicControlPointB","cubicCurveTo","stepCount","Math","ceil","getCubicCurveDistance","prevPoint","s","point","getPointOnCubicCurve","angle","getAngle","getDistance","floor","i_1","k","getClosestPointIndex","index","closest","Infinity","distance","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","enumerable","configurable","positionToPoint","position","extend","deltaAngle","isNumber","f0","f1","point_1","abs","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/elements/Polyspline.js"],"sourcesContent":["/**\r\n * Polyspline (smoothed line) module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Polyline } from \"./Polyline\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a polysline. (smoothed multi-sigment line)\r\n *\r\n * @see {@link IPolysplineEvents} for a list of available events\r\n * @see {@link IPolysplineAdapters} for a list of available Adapters\r\n */\r\nvar Polyspline = /** @class */ (function (_super) {\r\n    __extends(Polyspline, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Polyspline() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Polyspline\";\r\n        _this.tensionX = 0.5;\r\n        _this.tensionY = 0.5;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creats and adds an SVG path for the arc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Polyspline.prototype.makePath = function () {\r\n        this._distance = 0;\r\n        var segments = this.segments;\r\n        var tensionX = this.tensionX;\r\n        var tensionY = this.tensionY;\r\n        this.allPoints = [];\r\n        if (segments && segments.length > 0) {\r\n            var path = \"\";\r\n            this._realSegments = [];\r\n            for (var i = 0, len = segments.length; i < len; i++) {\r\n                var points = segments[i];\r\n                var realPoints = [];\r\n                this._realSegments.push(realPoints);\r\n                if (points.length > 0) {\r\n                    var first = points[0];\r\n                    var last = points[points.length - 1];\r\n                    var closed_1 = false;\r\n                    if ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\r\n                        closed_1 = true;\r\n                    }\r\n                    path += $path.moveTo(points[0]);\r\n                    for (var p = 0; p < points.length - 1; p++) {\r\n                        var p0 = points[p - 1];\r\n                        var p1 = points[p];\r\n                        var p2 = points[p + 1];\r\n                        var p3 = points[p + 2];\r\n                        if (p === 0) {\r\n                            p0 = points[p];\r\n                        }\r\n                        else if (p == points.length - 2) {\r\n                            p3 = points[p + 1];\r\n                        }\r\n                        if (!p3) {\r\n                            p3 = p2;\r\n                        }\r\n                        if (p === 0) {\r\n                            if (closed_1) {\r\n                                p0 = points[points.length - 2];\r\n                            }\r\n                            else {\r\n                                p0 = points[i];\r\n                            }\r\n                        }\r\n                        else if (p == points.length - 2) {\r\n                            if (closed_1) {\r\n                                p3 = points[1];\r\n                            }\r\n                            else {\r\n                                p3 = points[p + 1];\r\n                            }\r\n                        }\r\n                        var controlPointA = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\r\n                        var controlPointB = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\r\n                        path += $path.cubicCurveTo(p2, controlPointA, controlPointB);\r\n                        // now split to small segments so that we could have positionToPoint later\r\n                        var stepCount = Math.ceil($math.getCubicCurveDistance(p1, p2, controlPointA, controlPointB, 20)) * 1.2;\r\n                        var prevPoint = p1;\r\n                        if (stepCount > 0) {\r\n                            // not good for curved charts\r\n                            //this.allPoints[0] = { x: points[0].x, y: points[0].y, angle: $math.getAngle(points[0], points[1]) };\r\n                            //realPoints.push(this.allPoints[0]);\r\n                            for (var s = 0; s <= stepCount; s++) {\r\n                                var point = $math.getPointOnCubicCurve(p1, p2, controlPointA, controlPointB, s / stepCount);\r\n                                if (point.x == prevPoint.x && point.y == prevPoint.y) {\r\n                                    continue;\r\n                                }\r\n                                realPoints.push(point);\r\n                                var angle = $math.round($math.getAngle(prevPoint, point), 5);\r\n                                //this.allPoints.push({ x: point.x, y: point.y, angle: angle });\r\n                                this._distance += $math.getDistance(prevPoint, point);\r\n                                this.allPoints[Math.floor(this._distance)] = { x: point.x, y: point.y, angle: angle };\r\n                                prevPoint = point;\r\n                            }\r\n                        }\r\n                        else {\r\n                            realPoints.push(p0);\r\n                        }\r\n                    }\r\n                }\r\n                var allPoints = this.allPoints;\r\n                if (allPoints.length > 1) {\r\n                    for (var i_1 = 0; i_1 < allPoints.length; i_1++) {\r\n                        if (!allPoints[i_1]) {\r\n                            if (i_1 > 1) {\r\n                                allPoints[i_1] = allPoints[i_1 - 1];\r\n                            }\r\n                            else {\r\n                                for (var k = 1; k < allPoints.length; k++) {\r\n                                    if (allPoints[k]) {\r\n                                        allPoints[i_1] = allPoints[k];\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.path = path;\r\n        }\r\n    };\r\n    /**\r\n     * Returns an index of the point that is closest to specified coordinates.\r\n     *\r\n     * @param   point  Reference point\r\n     * @return         Index\r\n     */\r\n    Polyspline.prototype.getClosestPointIndex = function (point) {\r\n        var points = this.allPoints;\r\n        var index;\r\n        var closest = Infinity;\r\n        if (points.length > 1) {\r\n            for (var p = 1; p < points.length; p++) {\r\n                var distance = $math.getDistance(point, points[p]);\r\n                if (distance < closest) {\r\n                    index = p;\r\n                    closest = distance;\r\n                }\r\n            }\r\n        }\r\n        return index;\r\n    };\r\n    Object.defineProperty(Polyspline.prototype, \"tensionX\", {\r\n        /**\r\n         * @return Tension\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tensionX\");\r\n        },\r\n        /**\r\n         * Horizontal tension for the spline.\r\n         *\r\n         * Used by the line smoothing algorithm.\r\n         *\r\n         * @default 0.5\r\n         * @param value  Tension\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tensionX\", value);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Polyspline.prototype, \"tensionY\", {\r\n        /**\r\n         * @return Tension\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tensionY\");\r\n        },\r\n        /**\r\n         * Vertical tension for the spline.\r\n         *\r\n         * Used by the line smoothing algorithm.\r\n         *\r\n         * @default 0.5\r\n         * @param value  Tensions\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tensionY\", value, true);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position along the line (0-1) into pixel coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @return Coordinates\r\n     */\r\n    Polyspline.prototype.positionToPoint = function (position, extend) {\r\n        var deltaAngle = 0;\r\n        var allPoints = this.allPoints;\r\n        var len = allPoints.length;\r\n        if (!$type.isNumber(position)) {\r\n            position = 0;\r\n        }\r\n        if (len > 1) {\r\n            if (extend && len > 3) {\r\n                if (position < 0) {\r\n                    if (position < -0.01) {\r\n                        position = -0.01;\r\n                    }\r\n                    var f0 = allPoints[0];\r\n                    var f1 = allPoints[1];\r\n                    var x = f0.x - (f0.x - f1.x) * len * position;\r\n                    var y = f0.y - (f0.y - f1.y) * len * position;\r\n                    return { x: x, y: y, angle: $math.getAngle(f0, f1) };\r\n                }\r\n                else if (position > 1) {\r\n                    if (position > 1.01) {\r\n                        position = 1.01;\r\n                    }\r\n                    var f0 = allPoints[allPoints.length - 2];\r\n                    var f1 = allPoints[allPoints.length - 3];\r\n                    var x = f0.x + (f0.x - f1.x) * len * (position - 1);\r\n                    var y = f0.y + (f0.y - f1.y) * len * (position - 1);\r\n                    return { x: x, y: y, angle: $math.getAngle(f0, { x: x, y: y }) };\r\n                }\r\n                else if (position == 1) {\r\n                    var point_1 = allPoints[allPoints.length - 1];\r\n                    return { x: point_1.x, y: point_1.y, angle: point_1.angle };\r\n                }\r\n            }\r\n            else {\r\n                if (position < 0) {\r\n                    position = Math.abs(position);\r\n                    deltaAngle = 180;\r\n                }\r\n                if (position >= 1) {\r\n                    position = 0.9999999999999;\r\n                }\r\n            }\r\n            var point = allPoints[Math.floor(position * len)];\r\n            return { x: point.x, y: point.y, angle: point.angle + deltaAngle };\r\n        }\r\n        else if (len == 1) {\r\n            var point = allPoints[0];\r\n            return { x: point.x, y: point.y, angle: point.angle };\r\n        }\r\n        else {\r\n            return { x: 0, y: 0, angle: 0 };\r\n        }\r\n    };\r\n    return Polyspline;\r\n}(Polyline));\r\nexport { Polyspline };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyspline\"] = Polyspline;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}