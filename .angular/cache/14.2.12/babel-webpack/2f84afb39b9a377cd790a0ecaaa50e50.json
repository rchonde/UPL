{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nvar Disposer =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param dispose  Function that disposes object\r\n   */\n  function Disposer(dispose) {\n    this._disposed = false;\n    this._dispose = dispose;\n  }\n  /**\r\n   * Checks if object is disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n\n\n  Disposer.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Disposes the object.\r\n   */\n\n\n  Disposer.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n\n      this._dispose();\n    }\n  };\n\n  return Disposer;\n}();\n\nexport { Disposer };\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nvar MultiDisposer =\n/** @class */\nfunction (_super) {\n  __extends(MultiDisposer, _super);\n\n  function MultiDisposer(disposers) {\n    return _super.call(this, function () {\n      $array.each(disposers, function (x) {\n        x.dispose();\n      });\n    }) || this;\n  }\n\n  return MultiDisposer;\n}(Disposer);\n\nexport { MultiDisposer };\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nvar MutableValueDisposer =\n/** @class */\nfunction (_super) {\n  __extends(MutableValueDisposer, _super);\n  /**\r\n   * Constructor.\r\n   */\n\n\n  function MutableValueDisposer() {\n    var _this = _super.call(this, function () {\n      if ($type.hasValue(_this._disposer)) {\n        _this._disposer.dispose();\n\n        _this._disposer = undefined;\n      }\n    }) || this;\n\n    return _this;\n  }\n  /**\r\n   * Returns current value.\r\n   *\r\n   * @return Value\r\n   */\n\n\n  MutableValueDisposer.prototype.get = function () {\n    return this._value;\n  };\n  /**\r\n   * Sets value and disposes previous disposer if it was set.\r\n   *\r\n   * @param value     New value\r\n   * @param disposer  Disposer\r\n   */\n\n\n  MutableValueDisposer.prototype.set = function (value, disposer) {\n    if ($type.hasValue(this._disposer)) {\n      this._disposer.dispose();\n    }\n\n    this._disposer = disposer;\n    this._value = value;\n  };\n  /**\r\n   * Resets the disposer value.\r\n   */\n\n\n  MutableValueDisposer.prototype.reset = function () {\n    this.set(undefined, undefined);\n  };\n\n  return MutableValueDisposer;\n}(Disposer);\n\nexport { MutableValueDisposer };\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nvar CounterDisposer =\n/** @class */\nfunction (_super) {\n  __extends(CounterDisposer, _super);\n\n  function CounterDisposer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * [_counter description]\r\n     *\r\n     * @todo Description\r\n     */\n\n\n    _this._counter = 0;\n    return _this;\n  }\n  /**\r\n   * [increment description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  CounterDisposer.prototype.increment = function () {\n    var _this = this; // TODO throw an error if it is disposed\n\n\n    ++this._counter; // TODO make this more efficient\n\n    return new Disposer(function () {\n      --_this._counter;\n\n      if (_this._counter === 0) {\n        _this.dispose();\n      }\n    });\n  };\n\n  return CounterDisposer;\n}(Disposer);\n\nexport { CounterDisposer };","map":{"version":3,"names":["__extends","$array","$type","Disposer","dispose","_disposed","_dispose","prototype","isDisposed","MultiDisposer","_super","disposers","call","each","x","MutableValueDisposer","_this","hasValue","_disposer","undefined","get","_value","set","value","disposer","reset","CounterDisposer","apply","arguments","_counter","increment"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar Disposer = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param dispose  Function that disposes object\r\n     */\r\n    function Disposer(dispose) {\r\n        this._disposed = false;\r\n        this._dispose = dispose;\r\n    }\r\n    /**\r\n     * Checks if object is disposed.\r\n     *\r\n     * @return Disposed?\r\n     */\r\n    Disposer.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Disposes the object.\r\n     */\r\n    Disposer.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            this._disposed = true;\r\n            this._dispose();\r\n        }\r\n    };\r\n    return Disposer;\r\n}());\r\nexport { Disposer };\r\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar MultiDisposer = /** @class */ (function (_super) {\r\n    __extends(MultiDisposer, _super);\r\n    function MultiDisposer(disposers) {\r\n        return _super.call(this, function () {\r\n            $array.each(disposers, function (x) {\r\n                x.dispose();\r\n            });\r\n        }) || this;\r\n    }\r\n    return MultiDisposer;\r\n}(Disposer));\r\nexport { MultiDisposer };\r\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar MutableValueDisposer = /** @class */ (function (_super) {\r\n    __extends(MutableValueDisposer, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function MutableValueDisposer() {\r\n        var _this = _super.call(this, function () {\r\n            if ($type.hasValue(_this._disposer)) {\r\n                _this._disposer.dispose();\r\n                _this._disposer = undefined;\r\n            }\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns current value.\r\n     *\r\n     * @return Value\r\n     */\r\n    MutableValueDisposer.prototype.get = function () {\r\n        return this._value;\r\n    };\r\n    /**\r\n     * Sets value and disposes previous disposer if it was set.\r\n     *\r\n     * @param value     New value\r\n     * @param disposer  Disposer\r\n     */\r\n    MutableValueDisposer.prototype.set = function (value, disposer) {\r\n        if ($type.hasValue(this._disposer)) {\r\n            this._disposer.dispose();\r\n        }\r\n        this._disposer = disposer;\r\n        this._value = value;\r\n    };\r\n    /**\r\n     * Resets the disposer value.\r\n     */\r\n    MutableValueDisposer.prototype.reset = function () {\r\n        this.set(undefined, undefined);\r\n    };\r\n    return MutableValueDisposer;\r\n}(Disposer));\r\nexport { MutableValueDisposer };\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar CounterDisposer = /** @class */ (function (_super) {\r\n    __extends(CounterDisposer, _super);\r\n    function CounterDisposer() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * [_counter description]\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._counter = 0;\r\n        return _this;\r\n    }\r\n    /**\r\n     * [increment description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    CounterDisposer.prototype.increment = function () {\r\n        var _this = this;\r\n        // TODO throw an error if it is disposed\r\n        ++this._counter;\r\n        // TODO make this more efficient\r\n        return new Disposer(function () {\r\n            --_this._counter;\r\n            if (_this._counter === 0) {\r\n                _this.dispose();\r\n            }\r\n        });\r\n    };\r\n    return CounterDisposer;\r\n}(Disposer));\r\nexport { CounterDisposer };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}