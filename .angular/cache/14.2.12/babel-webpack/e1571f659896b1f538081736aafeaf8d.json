{"ast":null,"code":"/**\r\n * Provides functionality used to build scrollbars.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../Container\";\nimport { ResizeButton } from \"../elements/ResizeButton\";\nimport { Button } from \"../elements/Button\";\nimport { getInteraction } from \"../interaction/Interaction\";\nimport { MouseCursorStyle } from \"../interaction/Mouse\";\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\nimport { registry } from \"../Registry\";\nimport { keyboard } from \"../utils/Keyboard\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { percent, Percent } from \"../utils/Percent\";\nimport * as $math from \"../utils/Math\";\nimport * as $ease from \"../utils/Ease\";\nimport * as $type from \"../utils/Type\";\nimport * as $utils from \"../utils/Utils\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Scrollbar is a generic control allowing to select a range of values or pan\r\n * the selection.\r\n *\r\n * @see {@link IScrollbarEvents} for a list of available events\r\n * @see {@link IScrollbarAdapters} for a list of available Adapters\r\n */\n\nvar Scrollbar =\n/** @class */\nfunction (_super) {\n  __extends(Scrollbar, _super);\n  /**\r\n   * Construtor\r\n   */\n\n\n  function Scrollbar() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Previously selected lower (start) value.\r\n     */\n\n\n    _this._previousStart = 0;\n    /**\r\n     * Previously selected upper (end) value.\r\n     */\n\n    _this._previousEnd = 1;\n    /**\r\n     * A value of previously selected lower value, used for doubleclick function.\r\n     */\n\n    _this._prevStart = 0;\n    /**\r\n     * A value of previously selected upper value, used for doubleclick function.\r\n     */\n\n    _this._prevEnd = 1;\n    /**\r\n     * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n     * performing zoom by user interaction).\r\n     */\n\n    _this._isBusy = false;\n    /**\r\n     * [_skipRangeEvents description]\r\n     *\r\n     * @todo Description\r\n     */\n\n    _this._skipRangeEvents = false;\n    /**\r\n     * Update the selection when dragging the grips.\r\n     *\r\n     * If set to `false` selection will be updated only when the grip is\r\n     * released.\r\n     *\r\n     * @default true\r\n     */\n\n    _this.updateWhileMoving = true;\n    _this.className = \"Scrollbar\";\n    _this.minHeight = 12;\n    _this.minWidth = 12;\n    _this.animationDuration = 0;\n    _this.animationEasing = $ease.cubicOut;\n\n    _this.margin(10, 10, 10, 10);\n\n    var interfaceColors = new InterfaceColorSet(); // background is also container as it might contain graphs, grid, etc\n\n    var background = _this.background;\n    background.cornerRadius(10, 10, 10, 10);\n    background.fill = interfaceColors.getFor(\"fill\");\n    background.fillOpacity = 0.5; // Make system tooltips appear by default\n\n    _this.showSystemTooltip = true;\n    _this.startGrip = new ResizeButton();\n    _this.endGrip = new ResizeButton(); // Default orientation...\n    // ... is set in `applyInternalDefaults()` because it accesses `language`\n    // and should only be started to access when parent is set\n    // Set events\n\n    _this.events.on(\"transformed\", function () {\n      _this.updateThumb();\n    }, _this, false); // Initial positions\n\n\n    _this.start = 0;\n    _this.end = 1; // Set roles\n\n    _this.role = \"scrollbar\";\n    _this.thumb.role = \"slider\";\n    _this.thumb.readerLive = \"polite\";\n    _this.startGrip.role = \"slider\";\n    _this.endGrip.role = \"slider\"; // otherwise range changed won't be registered\n\n    _this.events.once(\"inited\", function () {\n      _this._previousStart = undefined;\n\n      _this.dispatchRangeChange();\n    }, undefined, false);\n\n    _this.hideGrips = false;\n    _this.orientation = \"horizontal\"; // Min/max values for accessibility\n\n    _this.setSVGAttribute({\n      \"aria-valuemin\": \"0\"\n    });\n\n    _this.setSVGAttribute({\n      \"aria-valuemax\": \"100\"\n    });\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  Scrollbar.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Set screen reader tetxt accordingly\n\n\n    if (this.orientation === \"horizontal\") {\n      if (!$type.hasValue(this.readerTitle)) {\n        this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\n      }\n\n      if (!$type.hasValue(this.thumb.readerDescription)) {\n        this.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\n      }\n\n      if (!$type.hasValue(this.startGrip.readerDescription)) {\n        this.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\n      }\n\n      if (!$type.hasValue(this.endGrip.readerDescription)) {\n        this.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");\n      }\n\n      this.readerOrientation = \"horizontal\";\n    } else {\n      if (!$type.hasValue(this.readerTitle)) {\n        this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\n      }\n\n      if (!$type.hasValue(this.thumb.readerDescription)) {\n        this.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\n      }\n\n      if (!$type.hasValue(this.startGrip.readerDescription)) {\n        this.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\n      }\n\n      if (!$type.hasValue(this.endGrip.readerDescription)) {\n        this.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");\n      }\n\n      this.readerOrientation = \"vertical\";\n    }\n\n    this.readerControls = this.baseSprite.uidAttr();\n  };\n  /**\r\n   * Validates the layout of the scrollbar's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.validateLayout = function () {\n    this.updateSize();\n\n    _super.prototype.validateLayout.call(this); // when size changes, need to update extremes\n\n\n    this.updateExtremes();\n  };\n  /**\r\n   * Update background for the scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.processBackground = function () {\n    _super.prototype.processBackground.call(this);\n\n    var background = this.background;\n    background.clickable = true;\n    background.events.on(\"hit\", this.handleBgHit, this, undefined);\n  };\n  /**\r\n   * Zooms to the particular place when clicked/tapped on the scrollbar\r\n   * background.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  Scrollbar.prototype.handleBgHit = function (event) {\n    this.makeBusy();\n    var point = event.spritePoint;\n    point = $utils.spritePointToSprite(point, this.background, this);\n    var thumb = this.thumb;\n\n    if (this.orientation == \"horizontal\") {\n      var thumbX = point.x - thumb.pixelWidth / 2;\n      thumbX = $math.fitToRange(thumbX, 0, this.innerWidth - thumb.pixelWidth);\n      this._thumbAnimation = thumb.animate({\n        property: \"x\",\n        to: thumbX\n      }, this.animationDuration, this.animationEasing);\n    } else {\n      var thumbY = point.y - thumb.pixelHeight / 2;\n      thumbY = $math.fitToRange(thumbY, 0, this.innerHeight - thumb.pixelHeight);\n      this._thumbAnimation = thumb.animate({\n        property: \"y\",\n        to: thumbY\n      }, this.animationDuration, this.animationEasing);\n    }\n\n    if (this.animationDuration > 0) {\n      this._thumbAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\n    } else {\n      this._thumb.validate();\n\n      this.makeUnbusy();\n    }\n  };\n  /**\r\n   * Set scrollbar as busy. (currently zooming)\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.makeBusy = function () {\n    this._isBusy = true;\n    this._skipRangeEvents = false;\n\n    if (this._unbusyTimeout) {\n      this.removeDispose(this._unbusyTimeout);\n    }\n\n    this._unbusyTimeout = undefined;\n    this.stopAnimations();\n  };\n  /**\r\n   * Stops all animations, currently playing for the scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.stopAnimations = function () {\n    if (this._thumbAnimation) {\n      this._thumbAnimation.stop(true);\n    }\n\n    if (this._zoomAnimation) {\n      this._zoomAnimation.stop(true);\n    }\n  };\n  /**\r\n   * Cancels \"busy\" status of the Scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.makeUnbusy = function () {\n    /**\r\n     * We cannot make Scrollbar not busy right after release, because then axes\r\n     * will take over controll and Scrollbar will start to animate.\r\n     * Theorethically, it's not right to set timeout by `animationDuration`,\r\n     * however we can not know all the durations of elements we scroll, so we\r\n     * assume that animation duration will be the same as\r\n     * `interpolationDuration` or `rangeChange` duration.\r\n     */\n    this._unbusyTimeout = this.setTimeout(this.makeUnbusyReal.bind(this), this.animationDuration * 1.1);\n  };\n  /**\r\n   * [makeUnbusyReal description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.makeUnbusyReal = function () {\n    this._usingGrip = undefined;\n    this._isBusy = false;\n\n    if (!this.updateWhileMoving) {\n      this.dispatchRangeChange();\n    }\n  };\n  /**\r\n   * Disptatches rangechanged event if it really changed\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.dispatchRangeChange = function () {\n    if (this._previousEnd != this.end || this._previousStart != this.start) {\n      this._previousStart = this.start;\n      this._previousEnd = this.end;\n      this.dispatch(\"rangechanged\");\n    }\n  };\n  /**\r\n   * Updates the \"thumb\" element. A draggable element between the grips.\r\n   * @ignore\r\n   */\n\n\n  Scrollbar.prototype.updateThumb = function (dispatchEvents) {\n    if (dispatchEvents === void 0) {\n      dispatchEvents = true;\n    }\n\n    if (!this.parent) {\n      return;\n    }\n\n    var thumb = this.thumb;\n    var start = this.start;\n    var end = this.end;\n    var startGrip = this.startGrip;\n    var endGrip = this.endGrip;\n\n    if (this.orientation == \"horizontal\") {\n      var innerWidth_1 = this.innerWidth;\n      thumb.width = innerWidth_1 * (end - start);\n      thumb.maxX = innerWidth_1 - thumb.pixelWidth;\n      thumb.x = start * innerWidth_1;\n      startGrip.moveTo({\n        x: thumb.pixelX,\n        y: 0\n      }, undefined, undefined, true); // overrides dragging\n\n      endGrip.moveTo({\n        x: thumb.pixelX + thumb.pixelWidth,\n        y: 0\n      }, undefined, undefined, true);\n      startGrip.readerTitle = this.language.translate(\"From %1\", undefined, this.adapter.apply(\"positionValue\", {\n        value: Math.round(start * 100) + \"%\",\n        position: start\n      }).value);\n      startGrip.readerValueNow = \"\" + Math.round(start * 100);\n      startGrip.readerValueText = startGrip.readerTitle;\n      endGrip.readerTitle = this.language.translate(\"To %1\", undefined, this.adapter.apply(\"positionValue\", {\n        value: Math.round(end * 100) + \"%\",\n        position: end\n      }).value);\n      endGrip.readerValueNow = \"\" + Math.round(end * 100);\n      endGrip.readerValueText = endGrip.readerTitle;\n    } else {\n      var innerHeight_1 = this.innerHeight;\n      thumb.height = innerHeight_1 * (end - start);\n      thumb.maxY = innerHeight_1 - thumb.pixelHeight;\n      thumb.y = (1 - end) * innerHeight_1;\n      startGrip.moveTo({\n        x: 0,\n        y: thumb.pixelY + thumb.pixelHeight\n      }, undefined, undefined, true);\n      endGrip.moveTo({\n        x: 0,\n        y: thumb.pixelY\n      }, undefined, undefined, true);\n      startGrip.readerTitle = this.language.translate(\"To %1\", undefined, this.adapter.apply(\"positionValue\", {\n        value: Math.round((1 - start) * 100) + \"%\",\n        position: 1 - start\n      }).value);\n      startGrip.readerValueNow = \"\" + Math.round(start * 100);\n      startGrip.readerValueText = startGrip.readerTitle;\n      endGrip.readerTitle = this.language.translate(\"From %1\", undefined, this.adapter.apply(\"positionValue\", {\n        value: Math.round((1 - end) * 100) + \"%\",\n        position: 1 - end\n      }).value);\n      endGrip.readerValueNow = \"\" + Math.round(end * 100);\n      endGrip.readerValueText = endGrip.readerTitle;\n    } // Add accessibility\n\n\n    thumb.readerTitle = this.language.translate(\"From %1 to %2\", undefined, this.adapter.apply(\"positionValue\", {\n      value: Math.round(start * 100) + \"%\",\n      position: start\n    }).value, this.adapter.apply(\"positionValue\", {\n      value: Math.round(end * 100) + \"%\",\n      position: end\n    }).value);\n    thumb.readerValueNow = \"\" + Math.round(start * 100);\n    thumb.readerValueText = thumb.readerTitle;\n    this.readerValueNow = \"\" + Math.round(start * 100);\n    this.readerValueText = thumb.readerTitle;\n\n    if (!this._skipRangeEvents && this.updateWhileMoving && dispatchEvents) {\n      this.dispatchRangeChange();\n    }\n  };\n  /**\r\n   * Updates extremes of the scrollbar.\r\n   */\n\n\n  Scrollbar.prototype.updateExtremes = function () {\n    var orientation = this.orientation;\n    var minX = 0;\n    var minY = 0;\n    var maxX = 0;\n    var maxY = 0;\n\n    if (orientation == \"horizontal\") {\n      maxX = this.innerWidth;\n      minY = maxY = this.innerHeight / 2;\n    } else {\n      maxY = this.innerHeight;\n      minX = maxX = this.innerWidth / 2;\n    }\n\n    var startGrip = this.startGrip;\n    startGrip.minX = minX;\n    startGrip.maxX = maxX;\n    startGrip.minY = minY;\n    startGrip.maxY = maxY;\n    var endGrip = this.endGrip;\n    endGrip.minX = minX;\n    endGrip.maxX = maxX;\n    endGrip.minY = minY;\n    endGrip.maxY = maxY;\n    var thumb = this.thumb;\n    thumb.minX = minX;\n    thumb.maxX = maxX;\n    thumb.minY = minY;\n    thumb.maxY = maxY;\n  };\n  /**\r\n   * Updates size of the scrollbar.\r\n   */\n\n\n  Scrollbar.prototype.updateSize = function () {\n    var orientation = this.orientation;\n    var startGrip = this.startGrip;\n\n    if (startGrip) {\n      startGrip.orientation = orientation;\n    }\n\n    if (this.endGrip) {\n      this.endGrip.orientation = orientation;\n    }\n\n    var thumb = this.thumb;\n\n    if (thumb) {\n      if (orientation == \"horizontal\") {\n        if (!$type.isNumber(this._pixelWidth)) {\n          if (!(this.width instanceof Percent)) {\n            this.width = percent(100);\n          }\n        } // this teorethically might be wrong, if user indeed sets height of a horizontal scrollbar in percent\n        // however without this height might be equal to 100% if previous orientation was set to horizontal\n        // so this is ok solution, in case user really wants to have scrollbar height set in percent,\n        // he should do this after orientation.\n\n\n        if ($type.hasValue(this.percentHeight)) {\n          this.height = this.minHeight;\n        }\n\n        thumb.height = this.innerHeight;\n        thumb.verticalCenter = \"middle\";\n        thumb.horizontalCenter = \"left\";\n      } else {\n        if (!$type.isNumber(this._pixelHeight)) {\n          if (!(this.height instanceof Percent)) {\n            this.height = percent(100);\n          }\n        } // same as above with percentHeight\n\n\n        if ($type.hasValue(this.percentWidth)) {\n          this.width = this.minWidth;\n        }\n\n        thumb.width = this.innerWidth;\n        thumb.verticalCenter = \"top\";\n        thumb.horizontalCenter = \"middle\";\n      }\n    }\n  };\n\n  Object.defineProperty(Scrollbar.prototype, \"isBusy\", {\n    /**\r\n     * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n     * performing zoom by user interaction).\r\n     * @return boolean\r\n     */\n    get: function () {\n      return this._isBusy;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"start\", {\n    /**\r\n     * @return Position (0-1)\r\n     */\n    get: function () {\n      return Math.min(this.getPosition(this._start), this.getPosition(this._end));\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * POSITIONS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Relative position (0-1) of the start grip.\r\n     *\r\n     * @param position  Position (0-1)\r\n     */\n    set: function (position) {\n      if (!this._isBusy) {\n        this.__start = position;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"__start\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._start;\n    },\n\n    /**\r\n     * [__start description]\r\n     *\r\n     * @todo Description\r\n     * @param position [description]\r\n     */\n    set: function (position) {\n      this._start = this.getPosition(position);\n      this.updateThumb();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"end\", {\n    /**\r\n     * @return Position (0-1)\r\n     */\n    get: function () {\n      return Math.max(this.getPosition(this._start), this.getPosition(this._end));\n    },\n\n    /**\r\n     * Relative position (0-1) of the end grip.\r\n     *\r\n     * @param position  Position (0-1)\r\n     */\n    set: function (position) {\n      if (!this._isBusy) {\n        this.__end = position;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"__end\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._end;\n    },\n\n    /**\r\n     * [__end description]\r\n     *\r\n     * @todo Description\r\n     * @param position [description]\r\n     */\n    set: function (position) {\n      this._end = this.getPosition(position);\n      this.updateThumb();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"range\", {\n    /**\r\n     * Current selection range.\r\n     *\r\n     * @readonly\r\n     * @return Range\r\n     */\n    get: function () {\n      return {\n        start: this.start,\n        end: this.end,\n        priority: this._usingGrip\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Disables range change events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Scrollbar.prototype.skipRangeEvents = function () {\n    if (!this._isBusy) {\n      this._skipRangeEvents = true;\n    }\n  };\n  /**\r\n   * [fixRange description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   * @param range  Range\r\n   */\n\n\n  Scrollbar.prototype.fixRange = function (range) {\n    if (range.start != $math.round(this._start, 2) || range.end != $math.round(this._end, 2)) {\n      this._start = range.start;\n      this._end = range.end;\n      this._skipRangeEvents = true;\n      this.updateThumb();\n      this._skipRangeEvents = false;\n      this.thumb.validate();\n      this.thumb.background.validate();\n    }\n  };\n  /**\r\n   * [getPosition description]\r\n   *\r\n   * @todo Description\r\n   * @param position  [description]\r\n   * @return [description]\r\n   */\n\n\n  Scrollbar.prototype.getPosition = function (position) {\n    return $math.fitToRange($math.round(position, 4), 0, 1);\n  };\n\n  Object.defineProperty(Scrollbar.prototype, \"orientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * MISC\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Orientation of the scrollbar.\r\n     *\r\n     * Available options: \"horizontal\" (default) and \"vertical\".\r\n     *\r\n     * @default \"horizontal\"\r\n     * @param value  Orientation\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"orientation\", value)) {\n        // Set mouse cursors and screen reader tetxt accordingly\n        if (value === \"horizontal\") {\n          // Mouse styles\n          this.startGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\n          this.endGrip.cursorOverStyle = MouseCursorStyle.horizontalResize; // Reader text\n\n          /*this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\r\n          this.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\r\n          this.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\r\n          this.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");*/\n        } else {\n          // Mouse styles\n          this.startGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\n          this.endGrip.cursorOverStyle = MouseCursorStyle.verticalResize; // Reader text\n\n          /*this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\r\n          this.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\r\n          this.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\r\n          this.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");*/\n        }\n\n        this.updateByOrientation();\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Scrollbar.prototype.updateByOrientation = function () {};\n\n  Object.defineProperty(Scrollbar.prototype, \"startGrip\", {\n    /**\r\n     * @return Grip element\r\n     */\n    get: function () {\n      return this._startGrip;\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * GRIPS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Start grip element. (button)\r\n     *\r\n     * @param button  Grip element\r\n     */\n    set: function (button) {\n      if (this._startGrip) {\n        this.removeDispose(this._startGrip);\n      }\n\n      this._startGrip = button;\n      this.processGrip(button);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"endGrip\", {\n    /**\r\n     * @return Grip element\r\n     */\n    get: function () {\n      return this._endGrip;\n    },\n\n    /**\r\n     * End grip element. (button)\r\n     *\r\n     * @param button  Grip element\r\n     */\n    set: function (button) {\n      if (this._endGrip) {\n        this.removeDispose(this._endGrip);\n      }\n\n      this._endGrip = button;\n      this.processGrip(button);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates the grip button with properties and events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param button Grip button\r\n   */\n\n  Scrollbar.prototype.processGrip = function (button) {\n    button.parent = this;\n    button.isMeasured = false;\n    button.focusable = true;\n    button.shouldClone = false; // Set button defaults\n    //button.showSystemTooltip = true; // setting this here is not right because we break inheritance\n\n    button.zIndex = 100;\n    button.events.on(\"drag\", this.handleGripDrag, this, false);\n    button.events.on(\"dragstop\", this.makeUnbusy, this, false);\n    button.events.on(\"down\", this.makeBusy, this, false);\n    button.events.on(\"up\", this.makeUnbusy, this, false);\n\n    this._disposers.push(button);\n  };\n  /**\r\n   * Updates positions of related elements after grip element is dragged.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  Scrollbar.prototype.handleGripDrag = function (event) {\n    this.makeBusy();\n\n    if (event.target === this._startGrip) {\n      this._usingGrip = \"start\";\n    } else {\n      this._usingGrip = \"end\";\n    }\n\n    if (this.orientation == \"horizontal\") {\n      this._start = this.startGrip.pixelX / this.innerWidth;\n      this._end = this.endGrip.pixelX / this.innerWidth;\n    } else {\n      this._start = 1 - this.startGrip.pixelY / this.innerHeight;\n      this._end = 1 - this.endGrip.pixelY / this.innerHeight;\n    }\n\n    this.updateThumb();\n  };\n\n  Object.defineProperty(Scrollbar.prototype, \"thumb\", {\n    /**\r\n     * @return Thumb element\r\n     */\n    get: function () {\n      if (!this._thumb) {\n        // Create scrollbar controls (setters will handle adding disposers)\n        var thumb = new Button();\n        thumb.background.cornerRadius(10, 10, 10, 10);\n        thumb.padding(0, 0, 0, 0);\n        this.thumb = thumb;\n      }\n\n      return this._thumb;\n    },\n\n    /**\r\n     * A \"thumb\" element.\r\n     *\r\n     * It's a draggable square space between the grips, that can be used to\r\n     * pan the selection.\r\n     *\r\n     * @param thumb  Thumb element\r\n     */\n    set: function (thumb) {\n      var _this = this;\n\n      if (thumb) {\n        if (this._thumb) {\n          this.removeDispose(this._thumb);\n        }\n\n        this._thumb = thumb;\n        thumb.parent = this;\n        thumb.isMeasured = false;\n        thumb.inert = true;\n        thumb.draggable = true;\n        thumb.clickable = true;\n        thumb.hoverable = true;\n        thumb.focusable = true;\n        thumb.shouldClone = false;\n        thumb.zIndex = 0; // TODO remove closures ?\n        // Add events\n        // Add cursor styles to thumb\n\n        thumb.cursorOverStyle = MouseCursorStyle.grab;\n        thumb.cursorDownStyle = MouseCursorStyle.grabbing;\n        thumb.events.on(\"dragstart\", this.makeBusy, this, false);\n        thumb.events.on(\"dragstop\", this.makeUnbusy, this, false);\n        thumb.events.on(\"positionchanged\", this.handleThumbPosition, this, false);\n        thumb.events.on(\"sizechanged\", this.handleThumbPosition, this, false);\n        thumb.events.on(\"doublehit\", this.handleDoubleClick, this, false); // Add event for space and ENTER to toggle full zoom out and back\n        // (same as doubleclick)\n\n        this._disposers.push(getInteraction().body.events.on(\"keyup\", function (ev) {\n          if (keyboard.isKey(ev.event, [\"space\", \"enter\"]) && _this.thumb.isFocused) {\n            ev.event.preventDefault();\n\n            _this.handleDoubleClick();\n          }\n        }));\n\n        this._disposers.push(this._thumb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Zooms-in and out the selection on double-click of the thumb.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Scrollbar.prototype.handleDoubleClick = function () {\n    this.makeBusy();\n    var newStart = 0;\n    var newEnd = 1;\n\n    if (this.start != 0 || this.end != 1) {\n      this._prevStart = this.start;\n      this._prevEnd = this.end;\n    } else {\n      newStart = this._prevStart;\n      newEnd = this._prevEnd;\n    }\n\n    var zoomAnimation = this.animate([{\n      property: \"__start\",\n      to: newStart\n    }, {\n      property: \"__end\",\n      to: newEnd\n    }], this.animationDuration, this.animationEasing);\n\n    if (zoomAnimation && !zoomAnimation.isFinished()) {\n      zoomAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\n      this._zoomAnimation = zoomAnimation;\n    } else {\n      this.makeUnbusy();\n    }\n  };\n  /**\r\n   * Updates positions of other elements when thumb is moved.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Scrollbar.prototype.handleThumbPosition = function () {\n    var thumb = this.thumb;\n\n    if (this.orientation == \"horizontal\") {\n      var innerWidth_2 = this.innerWidth;\n      var w = thumb.innerWidth;\n      var x = thumb.pixelX;\n      this._start = x / innerWidth_2;\n      this._end = (x + w) / innerWidth_2;\n      this.updateThumb();\n    } else {\n      var innerHeight_2 = this.innerHeight;\n      var h = thumb.innerHeight;\n      var y = thumb.pixelY;\n\n      if (y + h > innerHeight_2) {\n        y = innerHeight_2 - h;\n        thumb.y = y;\n      }\n\n      this._start = 1 - (y + h) / innerHeight_2;\n      this._end = 1 - y / innerHeight_2;\n      this.updateThumb();\n    }\n  };\n  /**\r\n   * Creates a background element for the scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Background\r\n   */\n\n\n  Scrollbar.prototype.createBackground = function () {\n    return new RoundedRectangle();\n  };\n\n  Object.defineProperty(Scrollbar.prototype, \"hideGrips\", {\n    /**\r\n     * @return Show only on hover?\r\n     */\n    get: function () {\n      return this._hideGrips;\n    },\n\n    /**\r\n     * Use this property to set whether grips should be always visible (`false`),\r\n     * or they should just appear on scrollbar hover (`true`).\r\n     *\r\n     * @param value  Show only on hover?\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      this._hideGrips = value;\n\n      if (this._overDisposer) {\n        this.removeDispose(this._overDisposer);\n      }\n\n      if (this._outDisposer) {\n        this.removeDispose(this._outDisposer);\n      }\n\n      if (value) {\n        this._overDisposer = this.events.on(\"over\", function () {\n          _this.startGrip.show();\n\n          _this.endGrip.show();\n        }, undefined, false);\n        this._outDisposer = this.events.on(\"out\", function () {\n          _this.startGrip.hide();\n\n          _this.endGrip.hide();\n        }, undefined, false);\n        this.startGrip.hide();\n        this.endGrip.hide();\n      } else {\n        this.startGrip.show();\n        this.endGrip.show();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"animationDuration\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"animationDuration\");\n    },\n\n    /**\r\n     * Duration in milliseconds of scrollbar animation (happens when user clicks on a background of a scrollbar)\r\n     * @default 0\r\n     * @param value number\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"animationDuration\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"animationEasing\", {\n    /**\r\n     * @return {Function}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"animationEasing\");\n    },\n\n    /**\r\n     * Animation easing function.\r\n     * @todo: review description and default\r\n     * @default $ease.cubicOut\r\n     * @param value (value: number) => number\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"animationEasing\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds easing functions to \"function\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n\n  Scrollbar.prototype.asFunction = function (field) {\n    return field == \"animationEasing\" || _super.prototype.asIs.call(this, field);\n  };\n\n  return Scrollbar;\n}(Container);\n\nexport { Scrollbar };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Scrollbar\"] = Scrollbar;","map":{"version":3,"names":["__extends","Container","ResizeButton","Button","getInteraction","MouseCursorStyle","RoundedRectangle","registry","keyboard","InterfaceColorSet","percent","Percent","$math","$ease","$type","$utils","Scrollbar","_super","_this","call","_previousStart","_previousEnd","_prevStart","_prevEnd","_isBusy","_skipRangeEvents","updateWhileMoving","className","minHeight","minWidth","animationDuration","animationEasing","cubicOut","margin","interfaceColors","background","cornerRadius","fill","getFor","fillOpacity","showSystemTooltip","startGrip","endGrip","events","on","updateThumb","start","end","role","thumb","readerLive","once","undefined","dispatchRangeChange","hideGrips","orientation","setSVGAttribute","applyTheme","prototype","applyInternalDefaults","hasValue","readerTitle","language","translate","readerDescription","readerOrientation","readerControls","baseSprite","uidAttr","validateLayout","updateSize","updateExtremes","processBackground","clickable","handleBgHit","event","makeBusy","point","spritePoint","spritePointToSprite","thumbX","x","pixelWidth","fitToRange","innerWidth","_thumbAnimation","animate","property","to","thumbY","y","pixelHeight","innerHeight","makeUnbusy","_thumb","validate","_unbusyTimeout","removeDispose","stopAnimations","stop","_zoomAnimation","setTimeout","makeUnbusyReal","bind","_usingGrip","dispatch","dispatchEvents","parent","innerWidth_1","width","maxX","moveTo","pixelX","adapter","apply","value","Math","round","position","readerValueNow","readerValueText","innerHeight_1","height","maxY","pixelY","minX","minY","isNumber","_pixelWidth","percentHeight","verticalCenter","horizontalCenter","_pixelHeight","percentWidth","Object","defineProperty","get","enumerable","configurable","min","getPosition","_start","_end","set","__start","max","__end","priority","skipRangeEvents","fixRange","range","getPropertyValue","setPropertyValue","cursorOverStyle","horizontalResize","verticalResize","updateByOrientation","invalidate","_startGrip","button","processGrip","_endGrip","isMeasured","focusable","shouldClone","zIndex","handleGripDrag","_disposers","push","target","padding","inert","draggable","hoverable","grab","cursorDownStyle","grabbing","handleThumbPosition","handleDoubleClick","body","ev","isKey","isFocused","preventDefault","newStart","newEnd","zoomAnimation","isFinished","innerWidth_2","w","innerHeight_2","h","createBackground","_hideGrips","_overDisposer","_outDisposer","show","hide","asFunction","field","asIs","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/elements/Scrollbar.js"],"sourcesContent":["/**\r\n * Provides functionality used to build scrollbars.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { ResizeButton } from \"../elements/ResizeButton\";\r\nimport { Button } from \"../elements/Button\";\r\nimport { getInteraction } from \"../interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../interaction/Mouse\";\r\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\r\nimport { registry } from \"../Registry\";\r\nimport { keyboard } from \"../utils/Keyboard\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent, Percent } from \"../utils/Percent\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Scrollbar is a generic control allowing to select a range of values or pan\r\n * the selection.\r\n *\r\n * @see {@link IScrollbarEvents} for a list of available events\r\n * @see {@link IScrollbarAdapters} for a list of available Adapters\r\n */\r\nvar Scrollbar = /** @class */ (function (_super) {\r\n    __extends(Scrollbar, _super);\r\n    /**\r\n     * Construtor\r\n     */\r\n    function Scrollbar() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Previously selected lower (start) value.\r\n         */\r\n        _this._previousStart = 0;\r\n        /**\r\n         * Previously selected upper (end) value.\r\n         */\r\n        _this._previousEnd = 1;\r\n        /**\r\n         * A value of previously selected lower value, used for doubleclick function.\r\n         */\r\n        _this._prevStart = 0;\r\n        /**\r\n         * A value of previously selected upper value, used for doubleclick function.\r\n         */\r\n        _this._prevEnd = 1;\r\n        /**\r\n         * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n         * performing zoom by user interaction).\r\n         */\r\n        _this._isBusy = false;\r\n        /**\r\n         * [_skipRangeEvents description]\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._skipRangeEvents = false;\r\n        /**\r\n         * Update the selection when dragging the grips.\r\n         *\r\n         * If set to `false` selection will be updated only when the grip is\r\n         * released.\r\n         *\r\n         * @default true\r\n         */\r\n        _this.updateWhileMoving = true;\r\n        _this.className = \"Scrollbar\";\r\n        _this.minHeight = 12;\r\n        _this.minWidth = 12;\r\n        _this.animationDuration = 0;\r\n        _this.animationEasing = $ease.cubicOut;\r\n        _this.margin(10, 10, 10, 10);\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // background is also container as it might contain graphs, grid, etc\r\n        var background = _this.background;\r\n        background.cornerRadius(10, 10, 10, 10);\r\n        background.fill = interfaceColors.getFor(\"fill\");\r\n        background.fillOpacity = 0.5;\r\n        // Make system tooltips appear by default\r\n        _this.showSystemTooltip = true;\r\n        _this.startGrip = new ResizeButton();\r\n        _this.endGrip = new ResizeButton();\r\n        // Default orientation...\r\n        // ... is set in `applyInternalDefaults()` because it accesses `language`\r\n        // and should only be started to access when parent is set\r\n        // Set events\r\n        _this.events.on(\"transformed\", function () {\r\n            _this.updateThumb();\r\n        }, _this, false);\r\n        // Initial positions\r\n        _this.start = 0;\r\n        _this.end = 1;\r\n        // Set roles\r\n        _this.role = \"scrollbar\";\r\n        _this.thumb.role = \"slider\";\r\n        _this.thumb.readerLive = \"polite\";\r\n        _this.startGrip.role = \"slider\";\r\n        _this.endGrip.role = \"slider\";\r\n        // otherwise range changed won't be registered\r\n        _this.events.once(\"inited\", function () {\r\n            _this._previousStart = undefined;\r\n            _this.dispatchRangeChange();\r\n        }, undefined, false);\r\n        _this.hideGrips = false;\r\n        _this.orientation = \"horizontal\";\r\n        // Min/max values for accessibility\r\n        _this.setSVGAttribute({ \"aria-valuemin\": \"0\" });\r\n        _this.setSVGAttribute({ \"aria-valuemax\": \"100\" });\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    Scrollbar.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Set screen reader tetxt accordingly\r\n        if (this.orientation === \"horizontal\") {\r\n            if (!$type.hasValue(this.readerTitle)) {\r\n                this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\r\n            }\r\n            if (!$type.hasValue(this.thumb.readerDescription)) {\r\n                this.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\r\n            }\r\n            if (!$type.hasValue(this.startGrip.readerDescription)) {\r\n                this.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\r\n            }\r\n            if (!$type.hasValue(this.endGrip.readerDescription)) {\r\n                this.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");\r\n            }\r\n            this.readerOrientation = \"horizontal\";\r\n        }\r\n        else {\r\n            if (!$type.hasValue(this.readerTitle)) {\r\n                this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\r\n            }\r\n            if (!$type.hasValue(this.thumb.readerDescription)) {\r\n                this.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\r\n            }\r\n            if (!$type.hasValue(this.startGrip.readerDescription)) {\r\n                this.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\r\n            }\r\n            if (!$type.hasValue(this.endGrip.readerDescription)) {\r\n                this.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");\r\n            }\r\n            this.readerOrientation = \"vertical\";\r\n        }\r\n        this.readerControls = this.baseSprite.uidAttr();\r\n    };\r\n    /**\r\n     * Validates the layout of the scrollbar's elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.validateLayout = function () {\r\n        this.updateSize();\r\n        _super.prototype.validateLayout.call(this);\r\n        // when size changes, need to update extremes\r\n        this.updateExtremes();\r\n    };\r\n    /**\r\n     * Update background for the scrollbar.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.processBackground = function () {\r\n        _super.prototype.processBackground.call(this);\r\n        var background = this.background;\r\n        background.clickable = true;\r\n        background.events.on(\"hit\", this.handleBgHit, this, undefined);\r\n    };\r\n    /**\r\n     * Zooms to the particular place when clicked/tapped on the scrollbar\r\n     * background.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event  Event\r\n     */\r\n    Scrollbar.prototype.handleBgHit = function (event) {\r\n        this.makeBusy();\r\n        var point = event.spritePoint;\r\n        point = $utils.spritePointToSprite(point, this.background, this);\r\n        var thumb = this.thumb;\r\n        if (this.orientation == \"horizontal\") {\r\n            var thumbX = point.x - thumb.pixelWidth / 2;\r\n            thumbX = $math.fitToRange(thumbX, 0, this.innerWidth - thumb.pixelWidth);\r\n            this._thumbAnimation = thumb.animate({ property: \"x\", to: thumbX }, this.animationDuration, this.animationEasing);\r\n        }\r\n        else {\r\n            var thumbY = point.y - thumb.pixelHeight / 2;\r\n            thumbY = $math.fitToRange(thumbY, 0, this.innerHeight - thumb.pixelHeight);\r\n            this._thumbAnimation = thumb.animate({ property: \"y\", to: thumbY }, this.animationDuration, this.animationEasing);\r\n        }\r\n        if (this.animationDuration > 0) {\r\n            this._thumbAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\r\n        }\r\n        else {\r\n            this._thumb.validate();\r\n            this.makeUnbusy();\r\n        }\r\n    };\r\n    /**\r\n     * Set scrollbar as busy. (currently zooming)\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.makeBusy = function () {\r\n        this._isBusy = true;\r\n        this._skipRangeEvents = false;\r\n        if (this._unbusyTimeout) {\r\n            this.removeDispose(this._unbusyTimeout);\r\n        }\r\n        this._unbusyTimeout = undefined;\r\n        this.stopAnimations();\r\n    };\r\n    /**\r\n     * Stops all animations, currently playing for the scrollbar.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.stopAnimations = function () {\r\n        if (this._thumbAnimation) {\r\n            this._thumbAnimation.stop(true);\r\n        }\r\n        if (this._zoomAnimation) {\r\n            this._zoomAnimation.stop(true);\r\n        }\r\n    };\r\n    /**\r\n     * Cancels \"busy\" status of the Scrollbar.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.makeUnbusy = function () {\r\n        /**\r\n         * We cannot make Scrollbar not busy right after release, because then axes\r\n         * will take over controll and Scrollbar will start to animate.\r\n         * Theorethically, it's not right to set timeout by `animationDuration`,\r\n         * however we can not know all the durations of elements we scroll, so we\r\n         * assume that animation duration will be the same as\r\n         * `interpolationDuration` or `rangeChange` duration.\r\n         */\r\n        this._unbusyTimeout = this.setTimeout(this.makeUnbusyReal.bind(this), this.animationDuration * 1.1);\r\n    };\r\n    /**\r\n     * [makeUnbusyReal description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.makeUnbusyReal = function () {\r\n        this._usingGrip = undefined;\r\n        this._isBusy = false;\r\n        if (!this.updateWhileMoving) {\r\n            this.dispatchRangeChange();\r\n        }\r\n    };\r\n    /**\r\n     * Disptatches rangechanged event if it really changed\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.dispatchRangeChange = function () {\r\n        if (this._previousEnd != this.end || this._previousStart != this.start) {\r\n            this._previousStart = this.start;\r\n            this._previousEnd = this.end;\r\n            this.dispatch(\"rangechanged\");\r\n        }\r\n    };\r\n    /**\r\n     * Updates the \"thumb\" element. A draggable element between the grips.\r\n     * @ignore\r\n     */\r\n    Scrollbar.prototype.updateThumb = function (dispatchEvents) {\r\n        if (dispatchEvents === void 0) { dispatchEvents = true; }\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        var thumb = this.thumb;\r\n        var start = this.start;\r\n        var end = this.end;\r\n        var startGrip = this.startGrip;\r\n        var endGrip = this.endGrip;\r\n        if (this.orientation == \"horizontal\") {\r\n            var innerWidth_1 = this.innerWidth;\r\n            thumb.width = innerWidth_1 * (end - start);\r\n            thumb.maxX = innerWidth_1 - thumb.pixelWidth;\r\n            thumb.x = start * innerWidth_1;\r\n            startGrip.moveTo({ x: thumb.pixelX, y: 0 }, undefined, undefined, true); // overrides dragging\r\n            endGrip.moveTo({ x: thumb.pixelX + thumb.pixelWidth, y: 0 }, undefined, undefined, true);\r\n            startGrip.readerTitle = this.language.translate(\"From %1\", undefined, this.adapter.apply(\"positionValue\", {\r\n                value: Math.round(start * 100) + \"%\",\r\n                position: start\r\n            }).value);\r\n            startGrip.readerValueNow = \"\" + Math.round(start * 100);\r\n            startGrip.readerValueText = startGrip.readerTitle;\r\n            endGrip.readerTitle = this.language.translate(\"To %1\", undefined, this.adapter.apply(\"positionValue\", {\r\n                value: Math.round(end * 100) + \"%\",\r\n                position: end\r\n            }).value);\r\n            endGrip.readerValueNow = \"\" + Math.round(end * 100);\r\n            endGrip.readerValueText = endGrip.readerTitle;\r\n        }\r\n        else {\r\n            var innerHeight_1 = this.innerHeight;\r\n            thumb.height = innerHeight_1 * (end - start);\r\n            thumb.maxY = innerHeight_1 - thumb.pixelHeight;\r\n            thumb.y = (1 - end) * innerHeight_1;\r\n            startGrip.moveTo({ x: 0, y: thumb.pixelY + thumb.pixelHeight }, undefined, undefined, true);\r\n            endGrip.moveTo({ x: 0, y: thumb.pixelY }, undefined, undefined, true);\r\n            startGrip.readerTitle = this.language.translate(\"To %1\", undefined, this.adapter.apply(\"positionValue\", {\r\n                value: Math.round((1 - start) * 100) + \"%\",\r\n                position: (1 - start)\r\n            }).value);\r\n            startGrip.readerValueNow = \"\" + Math.round(start * 100);\r\n            startGrip.readerValueText = startGrip.readerTitle;\r\n            endGrip.readerTitle = this.language.translate(\"From %1\", undefined, this.adapter.apply(\"positionValue\", {\r\n                value: Math.round((1 - end) * 100) + \"%\",\r\n                position: (1 - end)\r\n            }).value);\r\n            endGrip.readerValueNow = \"\" + Math.round(end * 100);\r\n            endGrip.readerValueText = endGrip.readerTitle;\r\n        }\r\n        // Add accessibility\r\n        thumb.readerTitle = this.language.translate(\"From %1 to %2\", undefined, this.adapter.apply(\"positionValue\", {\r\n            value: Math.round(start * 100) + \"%\",\r\n            position: start\r\n        }).value, this.adapter.apply(\"positionValue\", {\r\n            value: Math.round(end * 100) + \"%\",\r\n            position: end\r\n        }).value);\r\n        thumb.readerValueNow = \"\" + Math.round(start * 100);\r\n        thumb.readerValueText = thumb.readerTitle;\r\n        this.readerValueNow = \"\" + Math.round(start * 100);\r\n        this.readerValueText = thumb.readerTitle;\r\n        if (!this._skipRangeEvents && this.updateWhileMoving && dispatchEvents) {\r\n            this.dispatchRangeChange();\r\n        }\r\n    };\r\n    /**\r\n     * Updates extremes of the scrollbar.\r\n     */\r\n    Scrollbar.prototype.updateExtremes = function () {\r\n        var orientation = this.orientation;\r\n        var minX = 0;\r\n        var minY = 0;\r\n        var maxX = 0;\r\n        var maxY = 0;\r\n        if (orientation == \"horizontal\") {\r\n            maxX = this.innerWidth;\r\n            minY = maxY = this.innerHeight / 2;\r\n        }\r\n        else {\r\n            maxY = this.innerHeight;\r\n            minX = maxX = this.innerWidth / 2;\r\n        }\r\n        var startGrip = this.startGrip;\r\n        startGrip.minX = minX;\r\n        startGrip.maxX = maxX;\r\n        startGrip.minY = minY;\r\n        startGrip.maxY = maxY;\r\n        var endGrip = this.endGrip;\r\n        endGrip.minX = minX;\r\n        endGrip.maxX = maxX;\r\n        endGrip.minY = minY;\r\n        endGrip.maxY = maxY;\r\n        var thumb = this.thumb;\r\n        thumb.minX = minX;\r\n        thumb.maxX = maxX;\r\n        thumb.minY = minY;\r\n        thumb.maxY = maxY;\r\n    };\r\n    /**\r\n     * Updates size of the scrollbar.\r\n     */\r\n    Scrollbar.prototype.updateSize = function () {\r\n        var orientation = this.orientation;\r\n        var startGrip = this.startGrip;\r\n        if (startGrip) {\r\n            startGrip.orientation = orientation;\r\n        }\r\n        if (this.endGrip) {\r\n            this.endGrip.orientation = orientation;\r\n        }\r\n        var thumb = this.thumb;\r\n        if (thumb) {\r\n            if (orientation == \"horizontal\") {\r\n                if (!$type.isNumber(this._pixelWidth)) {\r\n                    if (!(this.width instanceof Percent)) {\r\n                        this.width = percent(100);\r\n                    }\r\n                }\r\n                // this teorethically might be wrong, if user indeed sets height of a horizontal scrollbar in percent\r\n                // however without this height might be equal to 100% if previous orientation was set to horizontal\r\n                // so this is ok solution, in case user really wants to have scrollbar height set in percent,\r\n                // he should do this after orientation.\r\n                if ($type.hasValue(this.percentHeight)) {\r\n                    this.height = this.minHeight;\r\n                }\r\n                thumb.height = this.innerHeight;\r\n                thumb.verticalCenter = \"middle\";\r\n                thumb.horizontalCenter = \"left\";\r\n            }\r\n            else {\r\n                if (!$type.isNumber(this._pixelHeight)) {\r\n                    if (!(this.height instanceof Percent)) {\r\n                        this.height = percent(100);\r\n                    }\r\n                }\r\n                // same as above with percentHeight\r\n                if ($type.hasValue(this.percentWidth)) {\r\n                    this.width = this.minWidth;\r\n                }\r\n                thumb.width = this.innerWidth;\r\n                thumb.verticalCenter = \"top\";\r\n                thumb.horizontalCenter = \"middle\";\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Scrollbar.prototype, \"isBusy\", {\r\n        /**\r\n         * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n         * performing zoom by user interaction).\r\n         * @return boolean\r\n         */\r\n        get: function () {\r\n            return this._isBusy;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"start\", {\r\n        /**\r\n         * @return Position (0-1)\r\n         */\r\n        get: function () {\r\n            return Math.min(this.getPosition(this._start), this.getPosition(this._end));\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * POSITIONS\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Relative position (0-1) of the start grip.\r\n         *\r\n         * @param position  Position (0-1)\r\n         */\r\n        set: function (position) {\r\n            if (!this._isBusy) {\r\n                this.__start = position;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"__start\", {\r\n        /**\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._start;\r\n        },\r\n        /**\r\n         * [__start description]\r\n         *\r\n         * @todo Description\r\n         * @param position [description]\r\n         */\r\n        set: function (position) {\r\n            this._start = this.getPosition(position);\r\n            this.updateThumb();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"end\", {\r\n        /**\r\n         * @return Position (0-1)\r\n         */\r\n        get: function () {\r\n            return Math.max(this.getPosition(this._start), this.getPosition(this._end));\r\n        },\r\n        /**\r\n         * Relative position (0-1) of the end grip.\r\n         *\r\n         * @param position  Position (0-1)\r\n         */\r\n        set: function (position) {\r\n            if (!this._isBusy) {\r\n                this.__end = position;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"__end\", {\r\n        /**\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._end;\r\n        },\r\n        /**\r\n         * [__end description]\r\n         *\r\n         * @todo Description\r\n         * @param position [description]\r\n         */\r\n        set: function (position) {\r\n            this._end = this.getPosition(position);\r\n            this.updateThumb();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"range\", {\r\n        /**\r\n         * Current selection range.\r\n         *\r\n         * @readonly\r\n         * @return Range\r\n         */\r\n        get: function () {\r\n            return { start: this.start, end: this.end, priority: this._usingGrip };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Disables range change events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.skipRangeEvents = function () {\r\n        if (!this._isBusy) {\r\n            this._skipRangeEvents = true;\r\n        }\r\n    };\r\n    /**\r\n     * [fixRange description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     * @param range  Range\r\n     */\r\n    Scrollbar.prototype.fixRange = function (range) {\r\n        if (range.start != $math.round(this._start, 2) || range.end != $math.round(this._end, 2)) {\r\n            this._start = range.start;\r\n            this._end = range.end;\r\n            this._skipRangeEvents = true;\r\n            this.updateThumb();\r\n            this._skipRangeEvents = false;\r\n            this.thumb.validate();\r\n            this.thumb.background.validate();\r\n        }\r\n    };\r\n    /**\r\n     * [getPosition description]\r\n     *\r\n     * @todo Description\r\n     * @param position  [description]\r\n     * @return [description]\r\n     */\r\n    Scrollbar.prototype.getPosition = function (position) {\r\n        return $math.fitToRange($math.round(position, 4), 0, 1);\r\n    };\r\n    Object.defineProperty(Scrollbar.prototype, \"orientation\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * MISC\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Orientation of the scrollbar.\r\n         *\r\n         * Available options: \"horizontal\" (default) and \"vertical\".\r\n         *\r\n         * @default \"horizontal\"\r\n         * @param value  Orientation\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"orientation\", value)) {\r\n                // Set mouse cursors and screen reader tetxt accordingly\r\n                if (value === \"horizontal\") {\r\n                    // Mouse styles\r\n                    this.startGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\r\n                    this.endGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\r\n                    // Reader text\r\n                    /*this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\r\n                    this.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\r\n                    this.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\r\n                    this.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");*/\r\n                }\r\n                else {\r\n                    // Mouse styles\r\n                    this.startGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\r\n                    this.endGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\r\n                    // Reader text\r\n                    /*this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\r\n                    this.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\r\n                    this.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\r\n                    this.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");*/\r\n                }\r\n                this.updateByOrientation();\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    Scrollbar.prototype.updateByOrientation = function () {\r\n    };\r\n    Object.defineProperty(Scrollbar.prototype, \"startGrip\", {\r\n        /**\r\n         * @return Grip element\r\n         */\r\n        get: function () {\r\n            return this._startGrip;\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * GRIPS\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Start grip element. (button)\r\n         *\r\n         * @param button  Grip element\r\n         */\r\n        set: function (button) {\r\n            if (this._startGrip) {\r\n                this.removeDispose(this._startGrip);\r\n            }\r\n            this._startGrip = button;\r\n            this.processGrip(button);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"endGrip\", {\r\n        /**\r\n         * @return Grip element\r\n         */\r\n        get: function () {\r\n            return this._endGrip;\r\n        },\r\n        /**\r\n         * End grip element. (button)\r\n         *\r\n         * @param button  Grip element\r\n         */\r\n        set: function (button) {\r\n            if (this._endGrip) {\r\n                this.removeDispose(this._endGrip);\r\n            }\r\n            this._endGrip = button;\r\n            this.processGrip(button);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Decorates the grip button with properties and events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param button Grip button\r\n     */\r\n    Scrollbar.prototype.processGrip = function (button) {\r\n        button.parent = this;\r\n        button.isMeasured = false;\r\n        button.focusable = true;\r\n        button.shouldClone = false;\r\n        // Set button defaults\r\n        //button.showSystemTooltip = true; // setting this here is not right because we break inheritance\r\n        button.zIndex = 100;\r\n        button.events.on(\"drag\", this.handleGripDrag, this, false);\r\n        button.events.on(\"dragstop\", this.makeUnbusy, this, false);\r\n        button.events.on(\"down\", this.makeBusy, this, false);\r\n        button.events.on(\"up\", this.makeUnbusy, this, false);\r\n        this._disposers.push(button);\r\n    };\r\n    /**\r\n     * Updates positions of related elements after grip element is dragged.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event  Event\r\n     */\r\n    Scrollbar.prototype.handleGripDrag = function (event) {\r\n        this.makeBusy();\r\n        if (event.target === this._startGrip) {\r\n            this._usingGrip = \"start\";\r\n        }\r\n        else {\r\n            this._usingGrip = \"end\";\r\n        }\r\n        if (this.orientation == \"horizontal\") {\r\n            this._start = this.startGrip.pixelX / this.innerWidth;\r\n            this._end = this.endGrip.pixelX / this.innerWidth;\r\n        }\r\n        else {\r\n            this._start = 1 - this.startGrip.pixelY / this.innerHeight;\r\n            this._end = 1 - this.endGrip.pixelY / this.innerHeight;\r\n        }\r\n        this.updateThumb();\r\n    };\r\n    Object.defineProperty(Scrollbar.prototype, \"thumb\", {\r\n        /**\r\n         * @return Thumb element\r\n         */\r\n        get: function () {\r\n            if (!this._thumb) {\r\n                // Create scrollbar controls (setters will handle adding disposers)\r\n                var thumb = new Button();\r\n                thumb.background.cornerRadius(10, 10, 10, 10);\r\n                thumb.padding(0, 0, 0, 0);\r\n                this.thumb = thumb;\r\n            }\r\n            return this._thumb;\r\n        },\r\n        /**\r\n         * A \"thumb\" element.\r\n         *\r\n         * It's a draggable square space between the grips, that can be used to\r\n         * pan the selection.\r\n         *\r\n         * @param thumb  Thumb element\r\n         */\r\n        set: function (thumb) {\r\n            var _this = this;\r\n            if (thumb) {\r\n                if (this._thumb) {\r\n                    this.removeDispose(this._thumb);\r\n                }\r\n                this._thumb = thumb;\r\n                thumb.parent = this;\r\n                thumb.isMeasured = false;\r\n                thumb.inert = true;\r\n                thumb.draggable = true;\r\n                thumb.clickable = true;\r\n                thumb.hoverable = true;\r\n                thumb.focusable = true;\r\n                thumb.shouldClone = false;\r\n                thumb.zIndex = 0;\r\n                // TODO remove closures ?\r\n                // Add events\r\n                // Add cursor styles to thumb\r\n                thumb.cursorOverStyle = MouseCursorStyle.grab;\r\n                thumb.cursorDownStyle = MouseCursorStyle.grabbing;\r\n                thumb.events.on(\"dragstart\", this.makeBusy, this, false);\r\n                thumb.events.on(\"dragstop\", this.makeUnbusy, this, false);\r\n                thumb.events.on(\"positionchanged\", this.handleThumbPosition, this, false);\r\n                thumb.events.on(\"sizechanged\", this.handleThumbPosition, this, false);\r\n                thumb.events.on(\"doublehit\", this.handleDoubleClick, this, false);\r\n                // Add event for space and ENTER to toggle full zoom out and back\r\n                // (same as doubleclick)\r\n                this._disposers.push(getInteraction().body.events.on(\"keyup\", function (ev) {\r\n                    if (keyboard.isKey(ev.event, [\"space\", \"enter\"]) && _this.thumb.isFocused) {\r\n                        ev.event.preventDefault();\r\n                        _this.handleDoubleClick();\r\n                    }\r\n                }));\r\n                this._disposers.push(this._thumb);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Zooms-in and out the selection on double-click of the thumb.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.handleDoubleClick = function () {\r\n        this.makeBusy();\r\n        var newStart = 0;\r\n        var newEnd = 1;\r\n        if (this.start != 0 || this.end != 1) {\r\n            this._prevStart = this.start;\r\n            this._prevEnd = this.end;\r\n        }\r\n        else {\r\n            newStart = this._prevStart;\r\n            newEnd = this._prevEnd;\r\n        }\r\n        var zoomAnimation = this.animate([{ property: \"__start\", to: newStart }, { property: \"__end\", to: newEnd }], this.animationDuration, this.animationEasing);\r\n        if (zoomAnimation && !zoomAnimation.isFinished()) {\r\n            zoomAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\r\n            this._zoomAnimation = zoomAnimation;\r\n        }\r\n        else {\r\n            this.makeUnbusy();\r\n        }\r\n    };\r\n    /**\r\n     * Updates positions of other elements when thumb is moved.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.handleThumbPosition = function () {\r\n        var thumb = this.thumb;\r\n        if (this.orientation == \"horizontal\") {\r\n            var innerWidth_2 = this.innerWidth;\r\n            var w = thumb.innerWidth;\r\n            var x = thumb.pixelX;\r\n            this._start = x / innerWidth_2;\r\n            this._end = (x + w) / innerWidth_2;\r\n            this.updateThumb();\r\n        }\r\n        else {\r\n            var innerHeight_2 = this.innerHeight;\r\n            var h = thumb.innerHeight;\r\n            var y = thumb.pixelY;\r\n            if (y + h > innerHeight_2) {\r\n                y = innerHeight_2 - h;\r\n                thumb.y = y;\r\n            }\r\n            this._start = 1 - (y + h) / innerHeight_2;\r\n            this._end = 1 - y / innerHeight_2;\r\n            this.updateThumb();\r\n        }\r\n    };\r\n    /**\r\n     * Creates a background element for the scrollbar.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Background\r\n     */\r\n    Scrollbar.prototype.createBackground = function () {\r\n        return new RoundedRectangle();\r\n    };\r\n    Object.defineProperty(Scrollbar.prototype, \"hideGrips\", {\r\n        /**\r\n         * @return Show only on hover?\r\n         */\r\n        get: function () {\r\n            return this._hideGrips;\r\n        },\r\n        /**\r\n         * Use this property to set whether grips should be always visible (`false`),\r\n         * or they should just appear on scrollbar hover (`true`).\r\n         *\r\n         * @param value  Show only on hover?\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            this._hideGrips = value;\r\n            if (this._overDisposer) {\r\n                this.removeDispose(this._overDisposer);\r\n            }\r\n            if (this._outDisposer) {\r\n                this.removeDispose(this._outDisposer);\r\n            }\r\n            if (value) {\r\n                this._overDisposer = this.events.on(\"over\", function () {\r\n                    _this.startGrip.show();\r\n                    _this.endGrip.show();\r\n                }, undefined, false);\r\n                this._outDisposer = this.events.on(\"out\", function () {\r\n                    _this.startGrip.hide();\r\n                    _this.endGrip.hide();\r\n                }, undefined, false);\r\n                this.startGrip.hide();\r\n                this.endGrip.hide();\r\n            }\r\n            else {\r\n                this.startGrip.show();\r\n                this.endGrip.show();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"animationDuration\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"animationDuration\");\r\n        },\r\n        /**\r\n         * Duration in milliseconds of scrollbar animation (happens when user clicks on a background of a scrollbar)\r\n         * @default 0\r\n         * @param value number\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"animationDuration\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"animationEasing\", {\r\n        /**\r\n         * @return {Function}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"animationEasing\");\r\n        },\r\n        /**\r\n         * Animation easing function.\r\n         * @todo: review description and default\r\n         * @default $ease.cubicOut\r\n         * @param value (value: number) => number\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"animationEasing\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds easing functions to \"function\" fields.\r\n     *\r\n     * @param field  Field name\r\n     * @return Assign as function?\r\n     */\r\n    Scrollbar.prototype.asFunction = function (field) {\r\n        return field == \"animationEasing\" || _super.prototype.asIs.call(this, field);\r\n    };\r\n    return Scrollbar;\r\n}(Container));\r\nexport { Scrollbar };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Scrollbar\"] = Scrollbar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}