{"ast":null,"code":"/**\r\n * Data Loader is responsible for loading and parsing external data\r\n */\nimport { CSVParser } from \"./CSVParser\";\nimport { JSONParser } from \"./JSONParser\";\nimport { Adapter } from \"../utils/Adapter\";\nimport * as $net from \"../utils/Net\";\nimport * as $array from \"../utils/Array\";\n;\n/**\r\n * Data Loader is responsible for loading and parsing external data.\r\n *\r\n * There is just one instance of DataLoader per system. Unless you have a\r\n * speicific reason, do not instantiate additional instances.\r\n *\r\n * The global instance of Data Loader is accessible via:\r\n *\r\n * ```TypeScript\r\n * am4core.dataLoader;\r\n * ```\r\n * ```JavaScript\r\n * am4core.dataLoader;\r\n * ```\r\n *\r\n * A loading of specific data source is done via [[DataSource]].\r\n *\r\n     Please refer to [[DataSource]] for information how to use it.\r\n *\r\n * @see {@link IDataLoaderAdapters} for a list of available Adapters\r\n */\n\nvar DataLoader =\n/** @class */\nfunction () {\n  function DataLoader() {\n    /**\r\n     * Adapter.\r\n     */\n    this.adapter = new Adapter(this);\n  }\n  /**\r\n   * Loads a supplied [[DataSource]] or an array of data sources, then calls\r\n   * their respective `parse` methods.\r\n   *\r\n   * @param source  A single data source or an array of multiple of data sources\r\n   */\n\n\n  DataLoader.prototype.load = function (source) {\n    var sources = Array.isArray(source) ? source : [source]; // Add each Source to the list to be loaded simultaneously\n\n    var promises = $array.map(sources, function (x) {\n      // Dispatch events\n      x.dispatchImmediately(\"started\");\n      x.dispatchImmediately(\"loadstarted\");\n      return $net.load(x.url, x, x.requestOptions);\n    }); // Run all promises in parallel\n\n    Promise.all(promises).then(function (res) {\n      // Process each loaded source\n      $array.each(res, function (result) {\n        // Get Source\n        var source = result.target; // Dispatch events\n\n        source.dispatchImmediately(\"loadended\");\n\n        if (result.error) {\n          if (source.events.isEnabled(\"error\")) {\n            source.events.dispatchImmediately(\"error\", {\n              type: \"error\",\n              code: result.xhr.status,\n              message: source.language.translate(\"Unable to load file: %1\", null, source.url),\n              target: source\n            });\n          }\n        } else {\n          // Initiate parsing of the loaded data\n          source.processData(result.response, result.type);\n        }\n\n        source.dispatchImmediately(\"ended\");\n      });\n    }).catch(function (res) {\n      if (res.target) {\n        res.target.dispatchImmediately(\"loadended\");\n\n        if (res.target.events.isEnabled(\"error\")) {\n          res.target.events.dispatchImmediately(\"error\", {\n            type: \"error\",\n            code: res.xhr.status,\n            message: res.target.language.translate(\"Unable to load file: %1\", null, res.target.url),\n            target: res.target\n          });\n        }\n\n        res.target.dispatchImmediately(\"ended\");\n      }\n    });\n  };\n  /**\r\n   * Instantiates a [[DataParser]] object based on the data type.\r\n   * Built-in parser types are as follows:\r\n   *\r\n   * * \"csv\" or \"text/csv\"\r\n   * * \"json\" or \"application/json\"\r\n   *\r\n   * @param contentType  A format type\r\n   * @return A parser object\r\n   */\n\n\n  DataLoader.prototype.getParserByType = function (contentType) {\n    // Let some plugin decide\n    var parser = this.adapter.apply(\"getParserByType\", {\n      parser: null,\n      type: contentType\n    }).parser;\n\n    if (parser) {\n      return parser;\n    }\n\n    if (contentType == \"csv\" || contentType == \"text/csv\" || contentType == \"application/vnd.ms-excel\") {\n      return new CSVParser();\n    }\n\n    if (contentType == \"json\" || contentType == \"application/json\") {\n      return new JSONParser();\n    }\n\n    return;\n  };\n  /**\r\n   * Tries to determine a parser out of content type and/or actual data.\r\n   *\r\n   * @param data         Data\r\n   * @param contentType  Content-type\r\n   * @return Parser instance\r\n   */\n\n\n  DataLoader.prototype.getParserByData = function (data, contentType) {\n    // Let some plugin decide\n    var parser = this.adapter.apply(\"getParserByData\", {\n      parser: null,\n      data: data,\n      type: contentType\n    }).parser; // Check if we have parser from outside code\n\n    if (!parser) {\n      // No, let's try to figure it out\n      parser = this.getParserByType(contentType);\n\n      if (parser) {\n        // We're able to figure out parser by content-type\n        return parser;\n      } else if (JSONParser.isJSON(data)) {\n        return this.getParserByType(\"json\");\n      } else if (CSVParser.isCSV(data)) {\n        return this.getParserByType(\"csv\");\n      }\n    }\n\n    return parser;\n  };\n\n  return DataLoader;\n}();\n\nexport { DataLoader };\n/**\r\n * Create instance of Data Loader\r\n */\n\nexport var dataLoader = new DataLoader();","map":{"version":3,"names":["CSVParser","JSONParser","Adapter","$net","$array","DataLoader","adapter","prototype","load","source","sources","Array","isArray","promises","map","x","dispatchImmediately","url","requestOptions","Promise","all","then","res","each","result","target","error","events","isEnabled","type","code","xhr","status","message","language","translate","processData","response","catch","getParserByType","contentType","parser","apply","getParserByData","data","isJSON","isCSV","dataLoader"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/data/DataLoader.js"],"sourcesContent":["/**\r\n * Data Loader is responsible for loading and parsing external data\r\n */\r\nimport { CSVParser } from \"./CSVParser\";\r\nimport { JSONParser } from \"./JSONParser\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport * as $net from \"../utils/Net\";\r\nimport * as $array from \"../utils/Array\";\r\n;\r\n/**\r\n * Data Loader is responsible for loading and parsing external data.\r\n *\r\n * There is just one instance of DataLoader per system. Unless you have a\r\n * speicific reason, do not instantiate additional instances.\r\n *\r\n * The global instance of Data Loader is accessible via:\r\n *\r\n * ```TypeScript\r\n * am4core.dataLoader;\r\n * ```\r\n * ```JavaScript\r\n * am4core.dataLoader;\r\n * ```\r\n *\r\n * A loading of specific data source is done via [[DataSource]].\r\n *\r\n     Please refer to [[DataSource]] for information how to use it.\r\n *\r\n * @see {@link IDataLoaderAdapters} for a list of available Adapters\r\n */\r\nvar DataLoader = /** @class */ (function () {\r\n    function DataLoader() {\r\n        /**\r\n         * Adapter.\r\n         */\r\n        this.adapter = new Adapter(this);\r\n    }\r\n    /**\r\n     * Loads a supplied [[DataSource]] or an array of data sources, then calls\r\n     * their respective `parse` methods.\r\n     *\r\n     * @param source  A single data source or an array of multiple of data sources\r\n     */\r\n    DataLoader.prototype.load = function (source) {\r\n        var sources = Array.isArray(source) ? source : [source];\r\n        // Add each Source to the list to be loaded simultaneously\r\n        var promises = $array.map(sources, function (x) {\r\n            // Dispatch events\r\n            x.dispatchImmediately(\"started\");\r\n            x.dispatchImmediately(\"loadstarted\");\r\n            return $net.load(x.url, x, x.requestOptions);\r\n        });\r\n        // Run all promises in parallel\r\n        Promise.all(promises).then(function (res) {\r\n            // Process each loaded source\r\n            $array.each(res, function (result) {\r\n                // Get Source\r\n                var source = result.target;\r\n                // Dispatch events\r\n                source.dispatchImmediately(\"loadended\");\r\n                if (result.error) {\r\n                    if (source.events.isEnabled(\"error\")) {\r\n                        source.events.dispatchImmediately(\"error\", {\r\n                            type: \"error\",\r\n                            code: result.xhr.status,\r\n                            message: source.language.translate(\"Unable to load file: %1\", null, source.url),\r\n                            target: source\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    // Initiate parsing of the loaded data\r\n                    source.processData(result.response, result.type);\r\n                }\r\n                source.dispatchImmediately(\"ended\");\r\n            });\r\n        }).catch(function (res) {\r\n            if (res.target) {\r\n                res.target.dispatchImmediately(\"loadended\");\r\n                if (res.target.events.isEnabled(\"error\")) {\r\n                    res.target.events.dispatchImmediately(\"error\", {\r\n                        type: \"error\",\r\n                        code: res.xhr.status,\r\n                        message: res.target.language.translate(\"Unable to load file: %1\", null, res.target.url),\r\n                        target: res.target\r\n                    });\r\n                }\r\n                res.target.dispatchImmediately(\"ended\");\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Instantiates a [[DataParser]] object based on the data type.\r\n     * Built-in parser types are as follows:\r\n     *\r\n     * * \"csv\" or \"text/csv\"\r\n     * * \"json\" or \"application/json\"\r\n     *\r\n     * @param contentType  A format type\r\n     * @return A parser object\r\n     */\r\n    DataLoader.prototype.getParserByType = function (contentType) {\r\n        // Let some plugin decide\r\n        var parser = this.adapter.apply(\"getParserByType\", {\r\n            parser: null,\r\n            type: contentType\r\n        }).parser;\r\n        if (parser) {\r\n            return parser;\r\n        }\r\n        if (contentType == \"csv\" || contentType == \"text/csv\" || contentType == \"application/vnd.ms-excel\") {\r\n            return new CSVParser();\r\n        }\r\n        if (contentType == \"json\" || contentType == \"application/json\") {\r\n            return new JSONParser();\r\n        }\r\n        return;\r\n    };\r\n    /**\r\n     * Tries to determine a parser out of content type and/or actual data.\r\n     *\r\n     * @param data         Data\r\n     * @param contentType  Content-type\r\n     * @return Parser instance\r\n     */\r\n    DataLoader.prototype.getParserByData = function (data, contentType) {\r\n        // Let some plugin decide\r\n        var parser = this.adapter.apply(\"getParserByData\", {\r\n            parser: null,\r\n            data: data,\r\n            type: contentType\r\n        }).parser;\r\n        // Check if we have parser from outside code\r\n        if (!parser) {\r\n            // No, let's try to figure it out\r\n            parser = this.getParserByType(contentType);\r\n            if (parser) {\r\n                // We're able to figure out parser by content-type\r\n                return parser;\r\n            }\r\n            else if (JSONParser.isJSON(data)) {\r\n                return this.getParserByType(\"json\");\r\n            }\r\n            else if (CSVParser.isCSV(data)) {\r\n                return this.getParserByType(\"csv\");\r\n            }\r\n        }\r\n        return parser;\r\n    };\r\n    return DataLoader;\r\n}());\r\nexport { DataLoader };\r\n/**\r\n * Create instance of Data Loader\r\n */\r\nexport var dataLoader = new DataLoader();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}