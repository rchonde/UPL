{"ast":null,"code":"/**\r\n * JSON parser.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { DataParser } from \"./DataParser\";\nimport * as $object from \"../utils/Object\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * A parser for JSON.\r\n *\r\n * @important\r\n */\n\nvar JSONParser =\n/** @class */\nfunction (_super) {\n  __extends(JSONParser, _super);\n\n  function JSONParser() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Content-type suitable for JSON format.\r\n     */\n\n\n    _this.contentType = \"application/json\";\n    /**\r\n     * Parser options.\r\n     *\r\n     * @see {@link IJSONOptions} for description of each option\r\n     */\n\n    _this.options = {};\n    return _this;\n  }\n  /**\r\n   * Tests if the data is valid JSON.\r\n   *\r\n   * @param data  Source data\r\n   * @return Is it JSON?\r\n   */\n\n\n  JSONParser.isJSON = function (data) {\n    try {\n      // Try parsing JSON\n      JSON.parse(data); // If we got to this point it means it's a valid JSON\n\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n  /**\r\n   * Parses and returns data.\r\n   *\r\n   * @param data  Unparsed data\r\n   * @return Parsed data\r\n   */\n\n\n  JSONParser.prototype.parse = function (data) {\n    var _this = this; // Init return\n\n\n    var res; // Try parsing\n\n    try {\n      if ($type.hasValue(JSON)) {\n        res = JSON.parse(data);\n      }\n    } catch (e) {\n      return undefined;\n    } // Do we need to cast some fields to numbers or dates?\n\n\n    var empty = $type.hasValue(this.options.emptyAs);\n    var numbers = this.parsableNumbers;\n    var dates = this.parsableDates;\n\n    if (Array.isArray(res) && (numbers || dates || empty)) {\n      var _loop_1 = function (i, len) {\n        var row = res[i];\n        $object.each(row, function (key, value) {\n          if (empty) {\n            row[key] = _this.maybeToEmpty(row[key]);\n          }\n\n          if (numbers) {\n            row[key] = _this.maybeToNumber(key, row[key]);\n          }\n\n          if (dates) {\n            row[key] = _this.maybeToDate(key, row[key]);\n          }\n        });\n      }; // Iterate through the data and check if it needs to be converted\n\n\n      for (var i = 0, len = res.length; i < len; i++) {\n        _loop_1(i, len);\n      }\n    } // Convert to array\n    //return Array.isArray(res) ? res : [res];\n\n\n    return res;\n  };\n\n  return JSONParser;\n}(DataParser);\n\nexport { JSONParser };","map":{"version":3,"names":["__extends","DataParser","$object","$type","JSONParser","_super","_this","apply","arguments","contentType","options","isJSON","data","JSON","parse","e","prototype","res","hasValue","undefined","empty","emptyAs","numbers","parsableNumbers","dates","parsableDates","Array","isArray","_loop_1","i","len","row","each","key","value","maybeToEmpty","maybeToNumber","maybeToDate","length"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/data/JSONParser.js"],"sourcesContent":["/**\r\n * JSON parser.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { DataParser } from \"./DataParser\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * A parser for JSON.\r\n *\r\n * @important\r\n */\r\nvar JSONParser = /** @class */ (function (_super) {\r\n    __extends(JSONParser, _super);\r\n    function JSONParser() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * Content-type suitable for JSON format.\r\n         */\r\n        _this.contentType = \"application/json\";\r\n        /**\r\n         * Parser options.\r\n         *\r\n         * @see {@link IJSONOptions} for description of each option\r\n         */\r\n        _this.options = {};\r\n        return _this;\r\n    }\r\n    /**\r\n     * Tests if the data is valid JSON.\r\n     *\r\n     * @param data  Source data\r\n     * @return Is it JSON?\r\n     */\r\n    JSONParser.isJSON = function (data) {\r\n        try {\r\n            // Try parsing JSON\r\n            JSON.parse(data);\r\n            // If we got to this point it means it's a valid JSON\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Parses and returns data.\r\n     *\r\n     * @param data  Unparsed data\r\n     * @return Parsed data\r\n     */\r\n    JSONParser.prototype.parse = function (data) {\r\n        var _this = this;\r\n        // Init return\r\n        var res;\r\n        // Try parsing\r\n        try {\r\n            if ($type.hasValue(JSON)) {\r\n                res = JSON.parse(data);\r\n            }\r\n        }\r\n        catch (e) {\r\n            return undefined;\r\n        }\r\n        // Do we need to cast some fields to numbers or dates?\r\n        var empty = $type.hasValue(this.options.emptyAs);\r\n        var numbers = this.parsableNumbers;\r\n        var dates = this.parsableDates;\r\n        if (Array.isArray(res) && (numbers || dates || empty)) {\r\n            var _loop_1 = function (i, len) {\r\n                var row = res[i];\r\n                $object.each(row, function (key, value) {\r\n                    if (empty) {\r\n                        row[key] = _this.maybeToEmpty(row[key]);\r\n                    }\r\n                    if (numbers) {\r\n                        row[key] = _this.maybeToNumber(key, row[key]);\r\n                    }\r\n                    if (dates) {\r\n                        row[key] = _this.maybeToDate(key, row[key]);\r\n                    }\r\n                });\r\n            };\r\n            // Iterate through the data and check if it needs to be converted\r\n            for (var i = 0, len = res.length; i < len; i++) {\r\n                _loop_1(i, len);\r\n            }\r\n        }\r\n        // Convert to array\r\n        //return Array.isArray(res) ? res : [res];\r\n        return res;\r\n    };\r\n    return JSONParser;\r\n}(DataParser));\r\nexport { JSONParser };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}