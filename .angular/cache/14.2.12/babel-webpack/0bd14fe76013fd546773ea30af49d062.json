{"ast":null,"code":"/**\r\n * Duration formatting functionality.\r\n */\nimport { __extends } from \"tslib\";\nimport { Language } from \"../utils/Language\";\nimport { BaseObject } from \"../Base\";\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\nimport { registry } from \"../Registry\";\nimport * as $strings from \"../utils/Strings\";\nimport * as $object from \"../utils/Object\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $type from \"../utils/Type\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * DurationFormatter class. Formats numbers as durations.\r\n *\r\n * `1000` as `16:40`\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n */\n\nvar DurationFormatter =\n/** @class */\nfunction (_super) {\n  __extends(DurationFormatter, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function DurationFormatter() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A base value for negative numbers. Will treat all numbers below this value\r\n     * as negative numbers.\r\n     */\n\n\n    _this._negativeBase = 0;\n    /**\r\n     * A base unit to consider values are in.\r\n     *\r\n     * @default \"s\"\r\n     */\n\n    _this._baseUnit = \"second\";\n    /**\r\n     * Output format to produce. If the format calls for applying color to the\r\n     * formatted value, this setting will determine what markup to use: SVG or\r\n     * HTML.\r\n     *\r\n     * Available options: svg, html.\r\n     *\r\n     * @default \"svg\"\r\n     */\n\n    _this._outputFormat = \"svg\";\n    /**\r\n     * How many milliseconds each unit represents.\r\n     */\n\n    _this._unitValues = {\n      \"millisecond\": 1,\n      \"second\": 1000,\n      \"minute\": 60000,\n      \"hour\": 3600000,\n      \"day\": 86400000,\n      \"week\": 604800000,\n      \"month\": 2592000000,\n      \"year\": 31536000000\n    };\n    /**\r\n     * Collection of aliases for units.\r\n     */\n\n    _this._unitAliases = {\n      \"Y\": \"y\",\n      \"D\": \"d\",\n      \"H\": \"h\",\n      \"K\": \"h\",\n      \"k\": \"h\",\n      \"n\": \"S\"\n    };\n    _this.className = \"DurationFormatter\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Formats the number according as duration.\r\n   *\r\n   * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n   * 16 minutes and 40 seconds.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n   * @param value   Value to format\r\n   * @param format  Format to apply\r\n   * @param base    Override base unit\r\n   * @return Formatted number\r\n   */\n\n\n  DurationFormatter.prototype.format = function (value, format, base) {\n    // no language?\n    if (!this.language) {\n      if (this.sprite) {\n        this.language = this.sprite.language;\n      } else {\n        this.language = new Language();\n      }\n    } // no base unit?\n\n\n    var baseUnit = base || this._baseUnit; // no format passed in or empty\n\n    if (typeof format === \"undefined\" || format === \"\") {\n      if ($type.hasValue(this.durationFormat)) {\n        format = this.durationFormat;\n      } else {\n        format = this.getFormat($type.toNumber(value), null, baseUnit);\n      }\n    } // Clean format\n\n\n    format = $utils.cleanFormat(format); // get format info (it will also deal with parser caching)\n\n    var info = this.parseFormat(format, baseUnit); // cast to number just in case\n    // TODO: maybe use better casting\n\n    var source = Number(value); // format and replace the number\n\n    var details;\n\n    if (source > this._negativeBase) {\n      details = info.positive;\n    } else if (source < this._negativeBase) {\n      details = info.negative;\n    } else {\n      details = info.zero;\n    } // Format\n\n\n    var formatted = this.applyFormat(source, details); // Apply color?\n\n    if (details.color !== \"\") {\n      if (this._outputFormat === \"svg\") {\n        formatted = \"<tspan fill='\" + details.color + \"'>\" + formatted + \"</tspan>\";\n      } else if (this._outputFormat === \"html\") {\n        formatted = \"<span style='color: \" + details.color + \";'>\" + formatted + \"</span>\";\n      }\n    }\n\n    return formatted;\n  };\n  /**\r\n   * Parses supplied format into structured object which can be used to format\r\n   * the number.\r\n   *\r\n   * @param format  Format string, i.e. \"#,###.00\"\r\n   * @param base    Override base unit\r\n   * @return Parsed information\r\n   */\n\n\n  DurationFormatter.prototype.parseFormat = function (format, base) {\n    var _this = this; // Check cache\n\n\n    var cached = this.getCache(format);\n\n    if ($type.hasValue(cached)) {\n      return cached;\n    } // no base unit?\n\n\n    var baseUnit = base || this._baseUnit; // Initialize duration parsing info\n\n    var info = {\n      \"positive\": {\n        \"color\": \"\",\n        \"template\": \"\",\n        \"parts\": [],\n        \"source\": \"\",\n        \"baseUnit\": baseUnit,\n        \"parsed\": false,\n        \"absolute\": false\n      },\n      \"negative\": {\n        \"color\": \"\",\n        \"template\": \"\",\n        \"parts\": [],\n        \"source\": \"\",\n        \"baseUnit\": baseUnit,\n        \"parsed\": false,\n        \"absolute\": false\n      },\n      \"zero\": {\n        \"color\": \"\",\n        \"template\": \"\",\n        \"parts\": [],\n        \"source\": \"\",\n        \"baseUnit\": baseUnit,\n        \"parsed\": false,\n        \"absolute\": false\n      }\n    }; // Escape double vertical bars (that mean display one vertical bar)\n\n    format = format.replace(\"||\", $strings.PLACEHOLDER2); // Split it up and deal with different formats\n\n    var parts = format.split(\"|\");\n    info.positive.source = parts[0];\n\n    if (typeof parts[2] === \"undefined\") {\n      info.zero = info.positive;\n    } else {\n      info.zero.source = parts[2];\n    }\n\n    if (typeof parts[1] === \"undefined\") {\n      info.negative = info.positive;\n    } else {\n      info.negative.source = parts[1];\n    } // Parse each\n\n\n    $object.each(info, function (part, item) {\n      // Already parsed\n      if (item.parsed) {\n        return;\n      } // Check cached\n\n\n      if (typeof _this.getCache(item.source) !== \"undefined\") {\n        info[part] = _this.getCache(item.source);\n        return;\n      } // Begin parsing\n\n\n      var partFormat = item.source; // Check for [] directives\n\n      var dirs = [];\n      dirs = item.source.match(/^\\[([^\\]]*)\\]/);\n\n      if (dirs && dirs.length && dirs[0] !== \"\") {\n        partFormat = item.source.substr(dirs[0].length);\n        item.color = dirs[1];\n      } // Let TextFormatter split into chunks\n\n\n      var chunks = getTextFormatter().chunk(partFormat, true);\n\n      for (var i = 0; i < chunks.length; i++) {\n        var chunk = chunks[i]; // replace back double vertical bar\n\n        chunk.text = chunk.text.replace($strings.PLACEHOLDER2, \"|\");\n\n        if (chunk.type === \"value\") {\n          // Just \"Duration\"?\n          // if (chunk.text.toLowerCase() === \"duration\") {\n          // \tchunk.text = durationFormat;\n          // }\n          // Check for \"a\" (absolute) modifier\n          if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\n            item.absolute = true;\n            chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\n          } // Find all possible parts\n\n\n          var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\n\n          if (matches) {\n            // Populate template\n            for (var x = 0; x < matches.length; x++) {\n              // Is it an alias?\n              if (!$type.hasValue(matches[x])) {\n                matches[x] = _this._unitAliases[matches[x]];\n              }\n\n              item.parts.push(matches[x]);\n              chunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\n            }\n          }\n        } // Apply to template\n\n\n        item.template += chunk.text;\n      } // Apply style formatting\n      //item.template = getTextFormatter().format(item.template, this.outputFormat);\n      // Save cache\n\n\n      _this.setCache(item.source, item); // Mark this as parsed\n\n\n      item.parsed = true;\n    }); // Save cache (the whole thing)\n\n    this.setCache(format, info);\n    return info;\n  };\n  /**\r\n   * Applies parsed format to a numeric value.\r\n   *\r\n   * @param value    Value\r\n   * @param details  Parsed format as returned by {parseFormat}\r\n   * @return Formatted duration\r\n   */\n\n\n  DurationFormatter.prototype.applyFormat = function (value, details) {\n    // Use absolute values\n    var negative = !details.absolute && value < this._negativeBase;\n    value = Math.abs(value); // Recalculate to milliseconds\n\n    var tstamp = this.toTimeStamp(value, details.baseUnit); // Init return value\n\n    var res = details.template; // Iterate through duration parts\n\n    for (var i = 0, len = details.parts.length; i < len; i++) {\n      // Gather the part\n      var part = details.parts[i];\n      var unit = this.toTimeUnit(part.substr(0, 1));\n      var digits = part.length; // Calculate current unit value\n\n      var ints = Math.floor(tstamp / this._unitValues[unit]);\n      res = res.replace($strings.PLACEHOLDER, $utils.padString(ints, digits, \"0\")); // Reduce timestamp\n\n      tstamp -= ints * this._unitValues[unit];\n    } // Reapply negative sign\n\n\n    if (negative) {\n      res = \"-\" + res;\n    }\n\n    return res;\n  };\n  /**\r\n   * Converts numeric value to timestamp in milliseconds.\r\n   *\r\n   * @param value     A source value\r\n   * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n   * @return Value representation as a timestamp in milliseconds\r\n   */\n\n\n  DurationFormatter.prototype.toTimeStamp = function (value, baseUnit) {\n    return value * this._unitValues[baseUnit];\n  };\n\n  DurationFormatter.prototype.toTimeUnit = function (code) {\n    switch (code) {\n      case \"S\":\n        return \"millisecond\";\n\n      case \"s\":\n        return \"second\";\n\n      case \"m\":\n        return \"minute\";\n\n      case \"h\":\n        return \"hour\";\n\n      case \"d\":\n        return \"day\";\n\n      case \"w\":\n        return \"week\";\n\n      case \"M\":\n        return \"month\";\n\n      case \"y\":\n        return \"year\";\n    }\n\n    ;\n  };\n  /**\r\n   * Invalidates the parent [[Sprite]] object.\r\n   */\n\n\n  DurationFormatter.prototype.invalidateSprite = function () {\n    if (this.sprite) {\n      this.sprite.invalidate();\n    }\n  };\n\n  Object.defineProperty(DurationFormatter.prototype, \"baseUnit\", {\n    /**\r\n     * @return Base unit\r\n     */\n    get: function () {\n      return this._baseUnit;\n    },\n\n    /**\r\n     * Base unit the values are in.\r\n     *\r\n     * A base unit will be used to recalculate the numeric value to millisecond\r\n     * timestamps.\r\n     *\r\n     * Available options:\r\n     *\r\n     * * \"millisecond\"\r\n     * * \"second\"\r\n     * * \"minute\"\r\n     * * \"hour\"\r\n     * * \"day\"\r\n     * * \"week\"\r\n     * * \"month\"\r\n     * * \"year\"\r\n     *\r\n     * @default \"s\"\r\n     * @param baseUnit  A base unit\r\n     */\n    set: function (baseUnit) {\n      this._baseUnit = baseUnit;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"outputFormat\", {\n    /**\r\n     * Getter for output format.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Output format\r\n     */\n    get: function () {\n      return this._outputFormat;\n    },\n\n    /**\r\n     * Setter for output format: \"svg\" or \"html.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Output format\r\n     */\n    set: function (outputFormat) {\n      this._outputFormat = outputFormat.toLowerCase();\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns appropriate default format for the value.\r\n   *\r\n   * If `maxValue` is sepcified, it will use that value to determine the time\r\n   * unit for the format.\r\n   *\r\n   * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n   * will get `\"10\"`.\r\n   *\r\n   * However, you might want it to be formatted in the context of bigger scale,\r\n   * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n   * values, including small ones will use format with minutes, e.g.:\r\n   * `00:10`, `00:50`, `12: 30`, etc.\r\n   *\r\n   * @param value     Value to format\r\n   * @param maxValue  Maximum value to be used to determine format\r\n   * @param baseUnit  Base unit of the value\r\n   * @return Format\r\n   */\n\n  DurationFormatter.prototype.getFormat = function (value, maxValue, baseUnit) {\n    // Is format override set?\n    if ($type.hasValue(this.durationFormat)) {\n      return this.durationFormat;\n    } // Get base unit\n\n\n    if (!baseUnit) {\n      baseUnit = this.baseUnit;\n    }\n\n    if ($type.hasValue(maxValue) && value != maxValue) {\n      value = Math.abs(value);\n      maxValue = Math.abs(maxValue);\n      var maxUnit = this.getValueUnit($math.max(value, maxValue), baseUnit); //let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\n      //console.log(maxUnit, diffUnit);\n\n      return this.durationFormats[baseUnit][maxUnit];\n    } else {\n      var unit = this.getValueUnit(value, baseUnit);\n      return this.durationFormats[baseUnit][unit];\n    }\n  };\n  /**\r\n   * Returns value's closest denominator time unit, e.g 100 seconds is\r\n   * `\"minute\"`, while 59 seconds would still be `second`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Denominator\r\n   */\n\n\n  DurationFormatter.prototype.getValueUnit = function (value, baseUnit) {\n    // Get base unit\n    if (!baseUnit) {\n      baseUnit = this.baseUnit;\n    } // Convert to milliseconds\n\n\n    var currentUnit;\n    var ms = this.getMilliseconds(value, baseUnit);\n    $object.eachContinue(this._unitValues, function (key, val) {\n      if (key == baseUnit || currentUnit) {\n        var num = ms / val;\n\n        if (num <= 1) {\n          if (!currentUnit) {\n            currentUnit = key;\n          }\n\n          return false;\n        }\n\n        currentUnit = key;\n      }\n\n      return true;\n    });\n    return currentUnit;\n  };\n  /**\r\n   * Converts value to milliseconds according to `baseUnit`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Value in milliseconds\r\n   */\n\n\n  DurationFormatter.prototype.getMilliseconds = function (value, baseUnit) {\n    // Get base unit\n    if (!baseUnit) {\n      baseUnit = this.baseUnit;\n    }\n\n    return value * this._unitValues[baseUnit];\n  };\n\n  Object.defineProperty(DurationFormatter.prototype, \"durationFormat\", {\n    /**\r\n     * @return Format\r\n     */\n    get: function () {\n      return this._durationFormat;\n    },\n\n    /**\r\n     * If set, this format will be used instead of the one determined dynamically\r\n     * based on the basedUnit and range of values.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Available fomatting codes\r\n     * @param value  Format\r\n     */\n    set: function (value) {\n      if (this._durationFormat != value) {\n        this._durationFormat = value;\n        this.invalidateSprite();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"durationFormats\", {\n    /**\r\n     * @return Formats\r\n     */\n    get: function () {\n      if (!this._durationFormats) {\n        this._durationFormats = {\n          \"millisecond\": {\n            \"millisecond\": this.language.translate(\"_duration_millisecond\"),\n            \"second\": this.language.translate(\"_duration_millisecond_second\"),\n            \"minute\": this.language.translate(\"_duration_millisecond_minute\"),\n            \"hour\": this.language.translate(\"_duration_millisecond_hour\"),\n            \"day\": this.language.translate(\"_duration_millisecond_day\"),\n            \"week\": this.language.translate(\"_duration_millisecond_week\"),\n            \"month\": this.language.translate(\"_duration_millisecond_month\"),\n            \"year\": this.language.translate(\"_duration_millisecond_year\")\n          },\n          \"second\": {\n            \"second\": this.language.translate(\"_duration_second\"),\n            \"minute\": this.language.translate(\"_duration_second_minute\"),\n            \"hour\": this.language.translate(\"_duration_second_hour\"),\n            \"day\": this.language.translate(\"_duration_second_day\"),\n            \"week\": this.language.translate(\"_duration_second_week\"),\n            \"month\": this.language.translate(\"_duration_second_month\"),\n            \"year\": this.language.translate(\"_duration_second_year\")\n          },\n          \"minute\": {\n            \"minute\": this.language.translate(\"_duration_minute\"),\n            \"hour\": this.language.translate(\"_duration_minute_hour\"),\n            \"day\": this.language.translate(\"_duration_minute_day\"),\n            \"week\": this.language.translate(\"_duration_minute_week\"),\n            \"month\": this.language.translate(\"_duration_minute_month\"),\n            \"year\": this.language.translate(\"_duration_minute_year\")\n          },\n          \"hour\": {\n            \"hour\": this.language.translate(\"_duration_hour\"),\n            \"day\": this.language.translate(\"_duration_hour_day\"),\n            \"week\": this.language.translate(\"_duration_hour_week\"),\n            \"month\": this.language.translate(\"_duration_hour_month\"),\n            \"year\": this.language.translate(\"_duration_hour_year\")\n          },\n          \"day\": {\n            \"day\": this.language.translate(\"_duration_day\"),\n            \"week\": this.language.translate(\"_duration_day_week\"),\n            \"month\": this.language.translate(\"_duration_day_month\"),\n            \"year\": this.language.translate(\"_duration_day_year\")\n          },\n          \"week\": {\n            \"week\": this.language.translate(\"_duration_week\"),\n            \"month\": this.language.translate(\"_duration_week_month\"),\n            \"year\": this.language.translate(\"_duration_week_year\")\n          },\n          \"month\": {\n            \"month\": this.language.translate(\"_duration_month\"),\n            \"year\": this.language.translate(\"_duration_month_year\")\n          },\n          \"year\": {\n            \"year\": this.language.translate(\"_duration_year\")\n          }\n        };\n      }\n\n      return this._durationFormats;\n    },\n\n    /**\r\n     * Duration formats for various combination of base units.\r\n     *\r\n     * @param value  Formats\r\n     */\n    set: function (value) {\n      this._durationFormats = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DurationFormatter;\n}(BaseObject);\n\nexport { DurationFormatter };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"DurationFormatter\"] = DurationFormatter;","map":{"version":3,"names":["__extends","Language","BaseObject","getTextFormatter","registry","$strings","$object","$utils","$type","$math","DurationFormatter","_super","_this","call","_negativeBase","_baseUnit","_outputFormat","_unitValues","_unitAliases","className","applyTheme","prototype","format","value","base","language","sprite","baseUnit","hasValue","durationFormat","getFormat","toNumber","cleanFormat","info","parseFormat","source","Number","details","positive","negative","zero","formatted","applyFormat","color","cached","getCache","replace","PLACEHOLDER2","parts","split","each","part","item","parsed","partFormat","dirs","match","length","substr","chunks","chunk","i","text","type","absolute","matches","x","push","PLACEHOLDER","template","setCache","Math","abs","tstamp","toTimeStamp","res","len","unit","toTimeUnit","digits","ints","floor","padString","code","invalidateSprite","invalidate","Object","defineProperty","get","set","enumerable","configurable","outputFormat","toLowerCase","maxValue","maxUnit","getValueUnit","max","durationFormats","currentUnit","ms","getMilliseconds","eachContinue","key","val","num","_durationFormat","_durationFormats","translate","registeredClasses"],"sources":["D:/APPLICATION/UI/UPL/NEW/node_modules/@amcharts/amcharts4/.internal/core/formatters/DurationFormatter.js"],"sourcesContent":["/**\r\n * Duration formatting functionality.\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { BaseObject } from \"../Base\";\r\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * DurationFormatter class. Formats numbers as durations.\r\n *\r\n * `1000` as `16:40`\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n */\r\nvar DurationFormatter = /** @class */ (function (_super) {\r\n    __extends(DurationFormatter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DurationFormatter() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A base value for negative numbers. Will treat all numbers below this value\r\n         * as negative numbers.\r\n         */\r\n        _this._negativeBase = 0;\r\n        /**\r\n         * A base unit to consider values are in.\r\n         *\r\n         * @default \"s\"\r\n         */\r\n        _this._baseUnit = \"second\";\r\n        /**\r\n         * Output format to produce. If the format calls for applying color to the\r\n         * formatted value, this setting will determine what markup to use: SVG or\r\n         * HTML.\r\n         *\r\n         * Available options: svg, html.\r\n         *\r\n         * @default \"svg\"\r\n         */\r\n        _this._outputFormat = \"svg\";\r\n        /**\r\n         * How many milliseconds each unit represents.\r\n         */\r\n        _this._unitValues = {\r\n            \"millisecond\": 1,\r\n            \"second\": 1000,\r\n            \"minute\": 60000,\r\n            \"hour\": 3600000,\r\n            \"day\": 86400000,\r\n            \"week\": 604800000,\r\n            \"month\": 2592000000,\r\n            \"year\": 31536000000,\r\n        };\r\n        /**\r\n         * Collection of aliases for units.\r\n         */\r\n        _this._unitAliases = {\r\n            \"Y\": \"y\",\r\n            \"D\": \"d\",\r\n            \"H\": \"h\",\r\n            \"K\": \"h\",\r\n            \"k\": \"h\",\r\n            \"n\": \"S\"\r\n        };\r\n        _this.className = \"DurationFormatter\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Formats the number according as duration.\r\n     *\r\n     * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n     * 16 minutes and 40 seconds.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n     * @param value   Value to format\r\n     * @param format  Format to apply\r\n     * @param base    Override base unit\r\n     * @return Formatted number\r\n     */\r\n    DurationFormatter.prototype.format = function (value, format, base) {\r\n        // no language?\r\n        if (!this.language) {\r\n            if (this.sprite) {\r\n                this.language = this.sprite.language;\r\n            }\r\n            else {\r\n                this.language = new Language;\r\n            }\r\n        }\r\n        // no base unit?\r\n        var baseUnit = base || this._baseUnit;\r\n        // no format passed in or empty\r\n        if (typeof format === \"undefined\" || format === \"\") {\r\n            if ($type.hasValue(this.durationFormat)) {\r\n                format = this.durationFormat;\r\n            }\r\n            else {\r\n                format = this.getFormat($type.toNumber(value), null, baseUnit);\r\n            }\r\n        }\r\n        // Clean format\r\n        format = $utils.cleanFormat(format);\r\n        // get format info (it will also deal with parser caching)\r\n        var info = this.parseFormat(format, baseUnit);\r\n        // cast to number just in case\r\n        // TODO: maybe use better casting\r\n        var source = Number(value);\r\n        // format and replace the number\r\n        var details;\r\n        if (source > this._negativeBase) {\r\n            details = info.positive;\r\n        }\r\n        else if (source < this._negativeBase) {\r\n            details = info.negative;\r\n        }\r\n        else {\r\n            details = info.zero;\r\n        }\r\n        // Format\r\n        var formatted = this.applyFormat(source, details);\r\n        // Apply color?\r\n        if (details.color !== \"\") {\r\n            if (this._outputFormat === \"svg\") {\r\n                formatted = \"<tspan fill='\" + details.color + \"'>\" + formatted + \"</tspan>\";\r\n            }\r\n            else if (this._outputFormat === \"html\") {\r\n                formatted = \"<span style='color: \" + details.color + \";'>\" + formatted + \"</span>\";\r\n            }\r\n        }\r\n        return formatted;\r\n    };\r\n    /**\r\n     * Parses supplied format into structured object which can be used to format\r\n     * the number.\r\n     *\r\n     * @param format  Format string, i.e. \"#,###.00\"\r\n     * @param base    Override base unit\r\n     * @return Parsed information\r\n     */\r\n    DurationFormatter.prototype.parseFormat = function (format, base) {\r\n        var _this = this;\r\n        // Check cache\r\n        var cached = this.getCache(format);\r\n        if ($type.hasValue(cached)) {\r\n            return cached;\r\n        }\r\n        // no base unit?\r\n        var baseUnit = base || this._baseUnit;\r\n        // Initialize duration parsing info\r\n        var info = {\r\n            \"positive\": {\r\n                \"color\": \"\",\r\n                \"template\": \"\",\r\n                \"parts\": [],\r\n                \"source\": \"\",\r\n                \"baseUnit\": baseUnit,\r\n                \"parsed\": false,\r\n                \"absolute\": false\r\n            },\r\n            \"negative\": {\r\n                \"color\": \"\",\r\n                \"template\": \"\",\r\n                \"parts\": [],\r\n                \"source\": \"\",\r\n                \"baseUnit\": baseUnit,\r\n                \"parsed\": false,\r\n                \"absolute\": false\r\n            },\r\n            \"zero\": {\r\n                \"color\": \"\",\r\n                \"template\": \"\",\r\n                \"parts\": [],\r\n                \"source\": \"\",\r\n                \"baseUnit\": baseUnit,\r\n                \"parsed\": false,\r\n                \"absolute\": false\r\n            }\r\n        };\r\n        // Escape double vertical bars (that mean display one vertical bar)\r\n        format = format.replace(\"||\", $strings.PLACEHOLDER2);\r\n        // Split it up and deal with different formats\r\n        var parts = format.split(\"|\");\r\n        info.positive.source = parts[0];\r\n        if (typeof parts[2] === \"undefined\") {\r\n            info.zero = info.positive;\r\n        }\r\n        else {\r\n            info.zero.source = parts[2];\r\n        }\r\n        if (typeof parts[1] === \"undefined\") {\r\n            info.negative = info.positive;\r\n        }\r\n        else {\r\n            info.negative.source = parts[1];\r\n        }\r\n        // Parse each\r\n        $object.each(info, function (part, item) {\r\n            // Already parsed\r\n            if (item.parsed) {\r\n                return;\r\n            }\r\n            // Check cached\r\n            if (typeof _this.getCache(item.source) !== \"undefined\") {\r\n                info[part] = _this.getCache(item.source);\r\n                return;\r\n            }\r\n            // Begin parsing\r\n            var partFormat = item.source;\r\n            // Check for [] directives\r\n            var dirs = [];\r\n            dirs = item.source.match(/^\\[([^\\]]*)\\]/);\r\n            if (dirs && dirs.length && dirs[0] !== \"\") {\r\n                partFormat = item.source.substr(dirs[0].length);\r\n                item.color = dirs[1];\r\n            }\r\n            // Let TextFormatter split into chunks\r\n            var chunks = getTextFormatter().chunk(partFormat, true);\r\n            for (var i = 0; i < chunks.length; i++) {\r\n                var chunk = chunks[i];\r\n                // replace back double vertical bar\r\n                chunk.text = chunk.text.replace($strings.PLACEHOLDER2, \"|\");\r\n                if (chunk.type === \"value\") {\r\n                    // Just \"Duration\"?\r\n                    // if (chunk.text.toLowerCase() === \"duration\") {\r\n                    // \tchunk.text = durationFormat;\r\n                    // }\r\n                    // Check for \"a\" (absolute) modifier\r\n                    if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\r\n                        item.absolute = true;\r\n                        chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\r\n                    }\r\n                    // Find all possible parts\r\n                    var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\r\n                    if (matches) {\r\n                        // Populate template\r\n                        for (var x = 0; x < matches.length; x++) {\r\n                            // Is it an alias?\r\n                            if (!$type.hasValue(matches[x])) {\r\n                                matches[x] = _this._unitAliases[matches[x]];\r\n                            }\r\n                            item.parts.push(matches[x]);\r\n                            chunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\r\n                        }\r\n                    }\r\n                }\r\n                // Apply to template\r\n                item.template += chunk.text;\r\n            }\r\n            // Apply style formatting\r\n            //item.template = getTextFormatter().format(item.template, this.outputFormat);\r\n            // Save cache\r\n            _this.setCache(item.source, item);\r\n            // Mark this as parsed\r\n            item.parsed = true;\r\n        });\r\n        // Save cache (the whole thing)\r\n        this.setCache(format, info);\r\n        return info;\r\n    };\r\n    /**\r\n     * Applies parsed format to a numeric value.\r\n     *\r\n     * @param value    Value\r\n     * @param details  Parsed format as returned by {parseFormat}\r\n     * @return Formatted duration\r\n     */\r\n    DurationFormatter.prototype.applyFormat = function (value, details) {\r\n        // Use absolute values\r\n        var negative = !details.absolute && (value < this._negativeBase);\r\n        value = Math.abs(value);\r\n        // Recalculate to milliseconds\r\n        var tstamp = this.toTimeStamp(value, details.baseUnit);\r\n        // Init return value\r\n        var res = details.template;\r\n        // Iterate through duration parts\r\n        for (var i = 0, len = details.parts.length; i < len; i++) {\r\n            // Gather the part\r\n            var part = details.parts[i];\r\n            var unit = this.toTimeUnit(part.substr(0, 1));\r\n            var digits = part.length;\r\n            // Calculate current unit value\r\n            var ints = Math.floor(tstamp / this._unitValues[unit]);\r\n            res = res.replace($strings.PLACEHOLDER, $utils.padString(ints, digits, \"0\"));\r\n            // Reduce timestamp\r\n            tstamp -= ints * this._unitValues[unit];\r\n        }\r\n        // Reapply negative sign\r\n        if (negative) {\r\n            res = \"-\" + res;\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Converts numeric value to timestamp in milliseconds.\r\n     *\r\n     * @param value     A source value\r\n     * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n     * @return Value representation as a timestamp in milliseconds\r\n     */\r\n    DurationFormatter.prototype.toTimeStamp = function (value, baseUnit) {\r\n        return value * this._unitValues[baseUnit];\r\n    };\r\n    DurationFormatter.prototype.toTimeUnit = function (code) {\r\n        switch (code) {\r\n            case \"S\":\r\n                return \"millisecond\";\r\n            case \"s\":\r\n                return \"second\";\r\n            case \"m\":\r\n                return \"minute\";\r\n            case \"h\":\r\n                return \"hour\";\r\n            case \"d\":\r\n                return \"day\";\r\n            case \"w\":\r\n                return \"week\";\r\n            case \"M\":\r\n                return \"month\";\r\n            case \"y\":\r\n                return \"year\";\r\n        }\r\n        ;\r\n    };\r\n    /**\r\n     * Invalidates the parent [[Sprite]] object.\r\n     */\r\n    DurationFormatter.prototype.invalidateSprite = function () {\r\n        if (this.sprite) {\r\n            this.sprite.invalidate();\r\n        }\r\n    };\r\n    Object.defineProperty(DurationFormatter.prototype, \"baseUnit\", {\r\n        /**\r\n         * @return Base unit\r\n         */\r\n        get: function () {\r\n            return this._baseUnit;\r\n        },\r\n        /**\r\n         * Base unit the values are in.\r\n         *\r\n         * A base unit will be used to recalculate the numeric value to millisecond\r\n         * timestamps.\r\n         *\r\n         * Available options:\r\n         *\r\n         * * \"millisecond\"\r\n         * * \"second\"\r\n         * * \"minute\"\r\n         * * \"hour\"\r\n         * * \"day\"\r\n         * * \"week\"\r\n         * * \"month\"\r\n         * * \"year\"\r\n         *\r\n         * @default \"s\"\r\n         * @param baseUnit  A base unit\r\n         */\r\n        set: function (baseUnit) {\r\n            this._baseUnit = baseUnit;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DurationFormatter.prototype, \"outputFormat\", {\r\n        /**\r\n         * Getter for output format.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Output format\r\n         */\r\n        get: function () {\r\n            return this._outputFormat;\r\n        },\r\n        /**\r\n         * Setter for output format: \"svg\" or \"html.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Output format\r\n         */\r\n        set: function (outputFormat) {\r\n            this._outputFormat = outputFormat.toLowerCase();\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns appropriate default format for the value.\r\n     *\r\n     * If `maxValue` is sepcified, it will use that value to determine the time\r\n     * unit for the format.\r\n     *\r\n     * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n     * will get `\"10\"`.\r\n     *\r\n     * However, you might want it to be formatted in the context of bigger scale,\r\n     * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n     * values, including small ones will use format with minutes, e.g.:\r\n     * `00:10`, `00:50`, `12: 30`, etc.\r\n     *\r\n     * @param value     Value to format\r\n     * @param maxValue  Maximum value to be used to determine format\r\n     * @param baseUnit  Base unit of the value\r\n     * @return Format\r\n     */\r\n    DurationFormatter.prototype.getFormat = function (value, maxValue, baseUnit) {\r\n        // Is format override set?\r\n        if ($type.hasValue(this.durationFormat)) {\r\n            return this.durationFormat;\r\n        }\r\n        // Get base unit\r\n        if (!baseUnit) {\r\n            baseUnit = this.baseUnit;\r\n        }\r\n        if ($type.hasValue(maxValue) && value != maxValue) {\r\n            value = Math.abs(value);\r\n            maxValue = Math.abs(maxValue);\r\n            var maxUnit = this.getValueUnit($math.max(value, maxValue), baseUnit);\r\n            //let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\r\n            //console.log(maxUnit, diffUnit);\r\n            return this.durationFormats[baseUnit][maxUnit];\r\n        }\r\n        else {\r\n            var unit = this.getValueUnit(value, baseUnit);\r\n            return this.durationFormats[baseUnit][unit];\r\n        }\r\n    };\r\n    /**\r\n     * Returns value's closest denominator time unit, e.g 100 seconds is\r\n     * `\"minute\"`, while 59 seconds would still be `second`.\r\n     *\r\n     * @param value     Source duration value\r\n     * @param baseUnit  Base unit\r\n     * @return Denominator\r\n     */\r\n    DurationFormatter.prototype.getValueUnit = function (value, baseUnit) {\r\n        // Get base unit\r\n        if (!baseUnit) {\r\n            baseUnit = this.baseUnit;\r\n        }\r\n        // Convert to milliseconds\r\n        var currentUnit;\r\n        var ms = this.getMilliseconds(value, baseUnit);\r\n        $object.eachContinue(this._unitValues, function (key, val) {\r\n            if (key == baseUnit || currentUnit) {\r\n                var num = ms / val;\r\n                if (num <= 1) {\r\n                    if (!currentUnit) {\r\n                        currentUnit = key;\r\n                    }\r\n                    return false;\r\n                }\r\n                currentUnit = key;\r\n            }\r\n            return true;\r\n        });\r\n        return currentUnit;\r\n    };\r\n    /**\r\n     * Converts value to milliseconds according to `baseUnit`.\r\n     *\r\n     * @param value     Source duration value\r\n     * @param baseUnit  Base unit\r\n     * @return Value in milliseconds\r\n     */\r\n    DurationFormatter.prototype.getMilliseconds = function (value, baseUnit) {\r\n        // Get base unit\r\n        if (!baseUnit) {\r\n            baseUnit = this.baseUnit;\r\n        }\r\n        return value * this._unitValues[baseUnit];\r\n    };\r\n    Object.defineProperty(DurationFormatter.prototype, \"durationFormat\", {\r\n        /**\r\n         * @return Format\r\n         */\r\n        get: function () {\r\n            return this._durationFormat;\r\n        },\r\n        /**\r\n         * If set, this format will be used instead of the one determined dynamically\r\n         * based on the basedUnit and range of values.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Available fomatting codes\r\n         * @param value  Format\r\n         */\r\n        set: function (value) {\r\n            if (this._durationFormat != value) {\r\n                this._durationFormat = value;\r\n                this.invalidateSprite();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DurationFormatter.prototype, \"durationFormats\", {\r\n        /**\r\n         * @return Formats\r\n         */\r\n        get: function () {\r\n            if (!this._durationFormats) {\r\n                this._durationFormats = {\r\n                    \"millisecond\": {\r\n                        \"millisecond\": this.language.translate(\"_duration_millisecond\"),\r\n                        \"second\": this.language.translate(\"_duration_millisecond_second\"),\r\n                        \"minute\": this.language.translate(\"_duration_millisecond_minute\"),\r\n                        \"hour\": this.language.translate(\"_duration_millisecond_hour\"),\r\n                        \"day\": this.language.translate(\"_duration_millisecond_day\"),\r\n                        \"week\": this.language.translate(\"_duration_millisecond_week\"),\r\n                        \"month\": this.language.translate(\"_duration_millisecond_month\"),\r\n                        \"year\": this.language.translate(\"_duration_millisecond_year\")\r\n                    },\r\n                    \"second\": {\r\n                        \"second\": this.language.translate(\"_duration_second\"),\r\n                        \"minute\": this.language.translate(\"_duration_second_minute\"),\r\n                        \"hour\": this.language.translate(\"_duration_second_hour\"),\r\n                        \"day\": this.language.translate(\"_duration_second_day\"),\r\n                        \"week\": this.language.translate(\"_duration_second_week\"),\r\n                        \"month\": this.language.translate(\"_duration_second_month\"),\r\n                        \"year\": this.language.translate(\"_duration_second_year\")\r\n                    },\r\n                    \"minute\": {\r\n                        \"minute\": this.language.translate(\"_duration_minute\"),\r\n                        \"hour\": this.language.translate(\"_duration_minute_hour\"),\r\n                        \"day\": this.language.translate(\"_duration_minute_day\"),\r\n                        \"week\": this.language.translate(\"_duration_minute_week\"),\r\n                        \"month\": this.language.translate(\"_duration_minute_month\"),\r\n                        \"year\": this.language.translate(\"_duration_minute_year\")\r\n                    },\r\n                    \"hour\": {\r\n                        \"hour\": this.language.translate(\"_duration_hour\"),\r\n                        \"day\": this.language.translate(\"_duration_hour_day\"),\r\n                        \"week\": this.language.translate(\"_duration_hour_week\"),\r\n                        \"month\": this.language.translate(\"_duration_hour_month\"),\r\n                        \"year\": this.language.translate(\"_duration_hour_year\")\r\n                    },\r\n                    \"day\": {\r\n                        \"day\": this.language.translate(\"_duration_day\"),\r\n                        \"week\": this.language.translate(\"_duration_day_week\"),\r\n                        \"month\": this.language.translate(\"_duration_day_month\"),\r\n                        \"year\": this.language.translate(\"_duration_day_year\")\r\n                    },\r\n                    \"week\": {\r\n                        \"week\": this.language.translate(\"_duration_week\"),\r\n                        \"month\": this.language.translate(\"_duration_week_month\"),\r\n                        \"year\": this.language.translate(\"_duration_week_year\")\r\n                    },\r\n                    \"month\": {\r\n                        \"month\": this.language.translate(\"_duration_month\"),\r\n                        \"year\": this.language.translate(\"_duration_month_year\")\r\n                    },\r\n                    \"year\": {\r\n                        \"year\": this.language.translate(\"_duration_year\")\r\n                    }\r\n                };\r\n            }\r\n            return this._durationFormats;\r\n        },\r\n        /**\r\n         * Duration formats for various combination of base units.\r\n         *\r\n         * @param value  Formats\r\n         */\r\n        set: function (value) {\r\n            this._durationFormats = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DurationFormatter;\r\n}(BaseObject));\r\nexport { DurationFormatter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationFormatter\"] = DurationFormatter;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}